VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassMATGrava"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Private Declare Function Comando_BindVarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_BindVar" (ByVal lComando As Long, lpVar As Variant) As Long
Private Declare Function Comando_PrepararInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Preparar" (ByVal lComando As Long, ByVal lpSQLStmt As String) As Long
Private Declare Function Comando_ExecutarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Executar" (ByVal lComando As Long) As Long

'******* Favor nao retirar este type deste lugar. Mario.
Type typeImportProd
    sCodigo As String
    iTipo As Integer
    sDescricao As String
    sNomeReduzido As String
    sModelo As String
    iGerencial As Integer
    iNivel As Integer
    sSubstituto1 As String
    sSubstituto2 As String
    iPrazoValidade As Integer
    sCodigoBarras As String
    iEtiquetasCodBarras As Integer
    dPesoLiq As Double
    dPesoBruto As Double
    dComprimento As Double
    dEspessura As Double
    dLargura As Double
    sCor As String
    sObsFisica As String
    iClasseUM As Integer
    sSiglaUMEstoque As String
    sSiglaUMCompra As String
    sSiglaUMVenda As String
    iAtivo As Integer
    iFaturamento As Integer
    iCompras As Integer
    iPCP As Integer
    iKitBasico As Integer
    iKitInt As Integer
    dIPIAliquota As Double
    sIPICodigo As String
    sIPICodDIPI As String
    iControleEstoque As Integer
    iICMSAgregaCusto As Integer
    iIPIAgregaCusto As Integer
    iFreteAgregaCusto As Integer
    iApropriacaoCusto As Integer
    sContaContabil As String
    sContaContabilProducao As String
    dResiduo As Double
    iNatureza As Integer
    dCustoReposicao As Double
    iOrigemMercadoria As Integer
    iTabelaPreco As Integer
    dPercentMaisQuantCotAnt  As Double
    dPercentMenosQuantCotAnt As Double
    iConsideraQuantCotAnt As Integer
    iTemFaixaReceb As Integer
    dPercentMaisReceb As Double
    dPercentMenosReceb As Double
    iRecebForaFaixa As Integer
    iTempoProducao As Integer
    iRastro As Integer
    lHorasMaquina As Long
    dPesoEspecifico As Double
    iCreditoIPI As Integer
    iCreditoICMS As Integer
    iLinha As Integer
    iGrupo As Integer
    iSubGrupo As Integer
    sffl_CodClasse As String
    sffl_DescrClasse As String
    sffl_ONU As String
    iffl_R As Integer
End Type



'??? Jones 19/11/99: a funcao abaixo deve ser completada ou apagada
''Function ClasseUM_Automatico(iProxClasse As Integer) As Long
'''Gera o próximo código para Classe de UM
'''Chamada dentro de transação
''
''Dim lErro As Long, lTemp As Long
''Dim lTransacao As Long
''
''On Error GoTo Erro_ClasseUM_Automatico
''
''    'Inicia a Transacao
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 22371
''
'''    lErro = CF("CPRConfig_ObterNumInt","NUM_PROX_CLASSE", lTemp)
'''    If lErro <> SUCESSO Then Error 22413
''
''    iProxClasse = lTemp
''
''    'Confirma a Transação
''    lErro = Transacao_Commit()
''    If lErro <> AD_SQL_SUCESSO Then Error 22372
''
''    ClasseUM_Automatico = SUCESSO
''
''    Exit Function
''
''Erro_ClasseUM_Automatico:
''
''    ClasseUM_Automatico = Err
''
''   Select Case Err
''
'''        Case 22413
''
''        Case 22371
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 22372
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151676)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    Exit Function
''
''End Function

Function Empenho_Grava(ByVal objEmpenho As ClassEmpenho) As Long
'Grava o Empenho à partir da chave candidata fornecida em objEmpenho, com os seguintes campos preenchidos:
'objEmpenho.iFilialEmpresa, objEmpenho.sCodigoOP, objEmpenho.iItemOP, objEmpenho.sProduto, objEmpenho.iAlmoxarifado

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(8) As Long
Dim lTransacao As Long
Dim sCodigo As String, lCodigoEmpenho As Long
Dim lNumIntDoc As Long, objProduto As New ClassProduto
Dim dQuantidade As Double
Dim tEmpenho As typeEmpenho
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dQuantEmpenhada As Double

On Error GoTo Erro_Empenho_Grava

    sCodigo = String(STRING_PRODUTO, 0)
    tEmpenho.sProduto = String(STRING_PRODUTO, 0)

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 33151
    Next

    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 33152

    'Ler o item da OP (por código e item da OP)
    lErro = Comando_ExecutarLockado(alComando(1), "SELECT NumIntDoc FROM ItensOrdemProducao WHERE FilialEmpresa = ? AND Codigo = ? AND Item = ?", lNumIntDoc, objEmpenho.iFilialEmpresa, objEmpenho.sCodigoOP, objEmpenho.iItemOP)
    If lErro <> AD_SQL_SUCESSO Then Error 33161

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33162
    
    'Não encontrou o item da OP ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 33163
    
    '"Lock" do item da OP
    lErro = Comando_LockShared(alComando(1))
    If lErro <> SUCESSO Then Error 33164
    
    objEmpenho.lNumIntDocItemOP = lNumIntDoc
        
    'Pesquisa o Empenho
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo, Quantidade, Data FROM Empenho WHERE NumIntDocItemOP = ? AND Produto = ? AND Almoxarifado = ?", 0, tEmpenho.lCodigo, tEmpenho.dQuantidade, tEmpenho.dtData, objEmpenho.lNumIntDocItemOP, objEmpenho.sProduto, objEmpenho.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 33165

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33166
    
    If lErro = AD_SQL_SUCESSO Then 'MODIFICAÇÃO
    
        '"Lock" do Empenho
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then Error 33168
    
        'Verifica se Quantidade ou Data de Emissão foram alterados
        If (objEmpenho.dQuantidade <> tEmpenho.dQuantidade) Or (objEmpenho.dtData <> tEmpenho.dtData) Then
        
            'Atualiza a tabela de Empenho (Quantidade ou Data)
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE Empenho SET Quantidade = ?,Data = ?", alComando(2), objEmpenho.dQuantidade, objEmpenho.dtData)
            If lErro <> AD_SQL_SUCESSO Then Error 33194
            
            objEstoqueProduto.sProduto = objEmpenho.sProduto
            objEstoqueProduto.iAlmoxarifado = objEmpenho.iAlmoxarifado
            
            'Só deve chamar EstoqueProduto_AlterarEmpenho se houver diferenca
            If objEmpenho.dQuantidade <> tEmpenho.dQuantidade Then
                
                'Ajustar a qtde do empenho no almoxarifado pela diferença entre o que havia sido empenhado e a nova qtde empenhada
                lErro = CF("EstoqueProduto_AlterarEmpenho", objEstoqueProduto, objEmpenho.dQuantidade - tEmpenho.dQuantidade)
                If lErro <> SUCESSO Then Error 33195
            
            End If
            
        End If
        
    Else 'INSERÇÃO
    
        objProduto.sCodigo = objEmpenho.sProduto
        
        lErro = CF("Produto_Lock1", alComando(0), objProduto)
        If lErro <> SUCESSO Then Error 41892
        
        lErro = CF("Empenho_Automatico", lCodigoEmpenho, alComando(6), alComando(7))
        If lErro <> SUCESSO Then Error 41893
        
        objEmpenho.lCodigo = lCodigoEmpenho
        
        'Chama Empenho_Inserir_Batch
        lErro = CF("Empenho_Inserir_Batch", objEmpenho, alComando(2))
        If lErro <> SUCESSO Then Error 33200
        
    End If
    
    'Faz o commit da transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 33201

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Empenho_Grava = SUCESSO

    Exit Function

Erro_Empenho_Grava:

    Empenho_Grava = Err

    Select Case Err

        Case 33151
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 33161, 33162
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDEMPRODUCAO", Err, objEmpenho.iFilialEmpresa, objEmpenho.sCodigoOP, objEmpenho.iItemOP)
        
        Case 33163
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEM_ORDEMPRODUCAO_NAO_CADASTRADO", Err, objEmpenho.iItemOP, objEmpenho.sCodigoOP, objEmpenho.iFilialEmpresa)

        Case 33164
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSORDEMPRODUCAO", Err, objEmpenho.iFilialEmpresa, objEmpenho.sCodigoOP, objEmpenho.iItemOP)

        Case 33165, 33166
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO", Err, objEmpenho.iFilialEmpresa, objEmpenho.lCodigo)
        
        Case 33168
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_EMPENHO", Err, objEmpenho.iFilialEmpresa, objEmpenho.lCodigo)
                
        Case 33169
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_EMPENHO", Err)
        
        Case 33194
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_EMPENHO", Err, objEmpenho.lCodigo, objEmpenho.iFilialEmpresa)

        Case 33195, 41891
        
        Case 33197, 33198
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO1", Err, objEmpenho.sProduto, objEmpenho.iAlmoxarifado, objEmpenho.lNumIntDocItemOP)
                        
        Case 33199
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EMPENHO_REPETIDO", Err, objEmpenho.sProduto, objEmpenho.iAlmoxarifado, objEmpenho.lNumIntDocItemOP)
        
        Case 33200, 41893
        
        Case 33201
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 33216, 33217
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO1", Err, objEmpenho.sProduto, objEmpenho.iAlmoxarifado)
        
        Case 33218
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUE_PRODUTO_NAO_CADASTRADO", Err, objEmpenho.sProduto, objEmpenho.iAlmoxarifado)

        Case 33437
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_ITEMOP_EMPENHO", Err, lNumIntDoc, tEmpenho.lNumIntDocItemOP)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151677)

    End Select

    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Empenho_Exclui(ByVal objEmpenho As ClassEmpenho) As Long
'Exclui o Empenho
'objEmpenho.iFilialEmpresa e objEmpenho.lCodigo tem que estar preenchidos
    'nao deixar excluir se houver qtde requisitada
    'diminuir a qtde empenhada na tabela EstoqueProduto

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(2) As Long
Dim lTransacao As Long
Dim tEmpenho As typeEmpenho
Dim dQuantEmpenhada As Double
Dim dQuantResultado As Double
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dQuantSaldo As Double

On Error GoTo Erro_Empenho_Exclui

    tEmpenho.sProduto = String(STRING_PRODUTO, 0)
    
    'Abertura comandos
    For iIndice = 0 To 1
        
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 33178

    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 33179

    'Pesquisa o Empenho
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto, Almoxarifado, Quantidade, QuantidadeRequisitada FROM Empenho WHERE FilialEmpresa = ? AND Codigo = ?", 0, tEmpenho.sProduto, tEmpenho.iAlmoxarifado, tEmpenho.dQuantidade, tEmpenho.dQuantidadeRequisitada, objEmpenho.iFilialEmpresa, objEmpenho.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33180

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33181
    
    'Se não encontrou o Empenho ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 33182
    
    'Verifica se existe quantidade requisitada
    If tEmpenho.dQuantidadeRequisitada <> 0 Then Error 33183
    
    'Lock da tabela de Empenho
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 33184
    
    'Exclui o Empenho
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Empenho", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 33220
    
    objEstoqueProduto.sProduto = objEmpenho.sProduto
    objEstoqueProduto.iAlmoxarifado = objEmpenho.iAlmoxarifado
    
    dQuantSaldo = objEmpenho.dQuantidadeRequisitada - objEmpenho.dQuantidade
    
    'Chamar EstoqueProduto_AlterarEmpenho
    lErro = CF("EstoqueProduto_AlterarEmpenho", objEstoqueProduto, dQuantSaldo)
    If lErro <> SUCESSO Then Error 33206
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 33207

    'Fechamento comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    Empenho_Exclui = SUCESSO

    Exit Function

Erro_Empenho_Exclui:

    Empenho_Exclui = Err

    Select Case Err

        Case 33178
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33179
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 33180, 33181
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO", Err, objEmpenho.iFilialEmpresa, objEmpenho.lCodigo)
        
        Case 33182
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EMPENHO_NAO_CADASTRADO", Err, objEmpenho.iFilialEmpresa, objEmpenho.lCodigo)
        
        Case 33183
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_EMPENHO_REQUISICAO", Err, objEmpenho.lCodigo, objEmpenho.iFilialEmpresa)
        
        Case 33184
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_EMPENHO", Err, objEmpenho.iFilialEmpresa, objEmpenho.lCodigo)
        
        Case 33206

        Case 33207
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case 33220
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_EMPENHO", Err, objEmpenho.lCodigo, objEmpenho.iFilialEmpresa)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151678)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ClasseUM_Grava_EmTrans(ByVal objClasseUM As ClassClasseUM, ByVal colSiglas As Collection) As Long
'Inclui ou altera uma Classe de Unidade de Medida
'Tabelas:ClasseUM e UnidadeDeMedida

Dim lErro As Long
Dim iIndice As Integer
Dim iEditavel As Integer
Dim colUMCopia As New Collection
Dim sDescricao As String, sSigla As String
Dim iClasse As Integer
Dim objUM As New ClassUnidadeDeMedida
Dim alComando(1 To 8) As Long
Dim iTotalClasseUM As Integer
Dim tUM As typeUnidadeMedida

On Error GoTo Erro_ClasseUM_Grava_EmTrans

    'Cria uma cópia "de trabalho" da coleção passada como parametro
    For Each objUM In colSiglas
        colUMCopia.Add objUM
    Next

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 22445

    Next

    sSigla = String(STRING_UM_SIGLA, 0)
    sDescricao = String(STRING_CLASSEUM_DESCRICAO, 0)

    'Pesquisa no BD a Classe em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Descricao, Sigla FROM ClasseUM WHERE Classe = ?", 0, sDescricao, sSigla, objClasseUM.iClasse)
    If lErro <> AD_SQL_SUCESSO Then Error 22447

    'Lê a Classe, se estiver no BD
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22448

    'Se a Classe já existe
    If lErro = AD_SQL_SUCESSO Then

        'Se trocou a Descrição da classe ou a sigla base
        If sDescricao <> objClasseUM.sDescricao Or sSigla <> objClasseUM.sSiglaUMBase Then

            'Alterar a ClasseUM
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE ClasseUM SET Descricao = ?, Sigla = ?", alComando(1), objClasseUM.sDescricao, objClasseUM.sSiglaUMBase)
            If lErro <> AD_SQL_SUCESSO Then Error 22449

        End If

        tUM.sSigla = String(STRING_UM_SIGLA, 0)
        tUM.sNome = String(STRING_CLASSEUM_NOME, 0)
        tUM.sSiglaUMBase = String(STRING_UM_SIGLA, 0)

        'Percorre as siglas da Classe no BD
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Sigla, Nome, Quantidade, SiglaUMBase, Editavel, Ativo FROM UnidadesDeMedida WHERE Classe = ?", 0, tUM.sSigla, tUM.sNome, tUM.dQuantidade, tUM.sSiglaUMBase, tUM.iEditavel, tUM.iAtivo, objClasseUM.iClasse)
        If lErro <> AD_SQL_SUCESSO Then Error 22450

        'Lê a Sigla da Classe, se estiver no BD
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22451

        Do While lErro <> AD_SQL_SEM_DADOS

            'Procura a Sigla na coleção correspondente ao grid
            iIndice = CF("ClasseUM_Grava_SiglaNaColecao", colUMCopia, tUM.sSigla)

            If iIndice <> 0 Then

                Set objUM = colUMCopia.Item(iIndice)

                'Se houver sido alterada a Descrição(Nome), o Fator de Conversão(Quantidade) ou a Sigla Base(SiglaUMBase)
                If objUM.sNome <> tUM.sNome Or objUM.dQuantidade <> tUM.dQuantidade Or objUM.sSiglaUMBase <> tUM.sSiglaUMBase Or objUM.iAtivo <> tUM.iAtivo Then

                    'se a conversao já foi utilizada a sigla nao é editavel
                    If tUM.iEditavel <> UM_EDITAVEL And (objUM.sSiglaUMBase <> tUM.sSiglaUMBase Or objUM.dQuantidade <> tUM.dQuantidade) Then
                        Error 22920
                    End If

                    'Altera a Tabela UnidadesDeMedida
                    lErro = Comando_ExecutarPos(alComando(4), "UPDATE UnidadesDeMedida SET Nome = ?, Quantidade = ?, SiglaUMBase = ?, Ativo = ?", alComando(3), objUM.sNome, objUM.dQuantidade, objUM.sSiglaUMBase, objUM.iAtivo)
                    If lErro <> AD_SQL_SUCESSO Then Error 22452

                End If

                'Retira da coleção
                colUMCopia.Remove (iIndice)

            Else

                'se a conversao já foi utilizada a sigla nao é editavel
                If iEditavel <> UM_EDITAVEL Then Error 22921

                'Se o par (classe,sigla) estiver sendo usado em Produtos, TiposDeProduto, Itens de Pedido de venda,.... nao poderá ser excluido
                lErro = ClasseUM_Exclui2(objClasseUM.iClasse, tUM.sSigla)
                If lErro <> SUCESSO Then Error 22455

                'Excluir registro em UnidadesDeMedida
                lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM UnidadesDeMedida", alComando(3))
                If lErro <> AD_SQL_SUCESSO Then Error 22454

            End If

            'Lê a Sigla da Classe, se estiver no BD
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22453

        Loop

    Else 'A Classe não existe

        'Se for Versão Light
'        If giTipoVersao = VERSAO_LIGHT Then
'
'            'Lê o Número Total de Classes
'            lErro = CF("ClasseUM_Le_Total", iTotalClasseUM)
'            If lErro <> SUCESSO Then Error 61191
'
'            'Se ultrapassou o número máximo de Classes UM ---> ERRO
'            If iTotalClasseUM >= LIMITE_CLASSE_UM_VGLIGHT Then Error 61192
'
'        End If

        'Insere em ClasseUM, criando uma nova Classe
        lErro = Comando_Executar(alComando(6), "INSERT INTO ClasseUM (Classe,Descricao, Sigla) VALUES(?,?,?)", objClasseUM.iClasse, objClasseUM.sDescricao, objClasseUM.sSiglaUMBase)
        If lErro <> AD_SQL_SUCESSO Then Error 22456

    End If

    'Grava as Siglas que ainda não faziam parte da Classe
    lErro = CF("ClasseUM_Grava_NovasSiglas", objClasseUM, colUMCopia)
    If lErro <> SUCESSO Then Error 22457

    'libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ClasseUM_Grava_EmTrans = SUCESSO

    Exit Function

Erro_ClasseUM_Grava_EmTrans:

    ClasseUM_Grava_EmTrans = Err

    Select Case Err

        Case 22457, 22455, 61191

        Case 22445
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22447, 22448
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSEUM", Err)

        Case 22449
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLASSEUM", Err)

        Case 22452
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_UNIDADESDEMEDIDA", Err)

        Case 22454
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_UNIDADESDEMEDIDA", Err, objClasseUM.iClasse)

        Case 22450, 22451, 22453
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_UNIDADESDEMEDIDA", Err)

        Case 22456
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CLASSEUM", Err, objClasseUM.iClasse)

        Case 22920, 22921
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SIGLA_UM_NAO_EDITAVEL", Err, tUM.sSiglaUMBase, objClasseUM.iClasse)
        
        Case 61192
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIMITE_CLASSE_UM", Err, LIMITE_CLASSE_UM_VGLIGHT)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151679)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ClasseUM_Grava(ByVal objClasseUM As ClassClasseUM, ByVal colSiglas As Collection) As Long
'Inclui ou altera uma Classe de Unidade de Medida
'Tabelas:ClasseUM e UnidadeDeMedida

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ClasseUM_Grava

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 22446

    lErro = ClasseUM_Grava_EmTrans(objClasseUM, colSiglas)
    If lErro <> SUCESSO Then Error 59493

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 22458

    ClasseUM_Grava = SUCESSO

    Exit Function

Erro_ClasseUM_Grava:

    ClasseUM_Grava = Err

    Select Case Err

        Case 59493
        
        Case 22446
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 22458
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151680)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function ClasseUM_Grava_NovasSiglas(ByVal objClasseUM As ClassClasseUM, ByVal colSiglas As Collection) As Long
'Percorre as Siglas na coleção incluindo-as no BD

Dim lErro As Long, lComando As Long
Dim objUM As New ClassUnidadeDeMedida

On Error GoTo Erro_ClasseUM_Grava_NovasSiglas

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22459

    'Percorre a coleção
    For Each objUM In colSiglas

        lErro = Comando_Executar(lComando, "INSERT INTO UnidadesDeMedida (Classe, Sigla, Nome, Quantidade, SiglaUMBase, Editavel, Ativo) VALUES(?,?,?,?,?,?,?)", objUM.iClasse, objUM.sSigla, objUM.sNome, objUM.dQuantidade, objUM.sSiglaUMBase, UM_EDITAVEL, objUM.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then Error 22460

    Next

    Call Comando_Fechar(lComando)

    ClasseUM_Grava_NovasSiglas = SUCESSO

    Exit Function

Erro_ClasseUM_Grava_NovasSiglas:

    ClasseUM_Grava_NovasSiglas = Err

    Select Case Err

        Case 22459
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22460
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_UNIDADESDEMEDIDA", Err, objClasseUM.iClasse)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151681)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ClasseUM_Exclui(ByVal objClasseUM As ClassClasseUM) As Long
'Exclui a Classe UM
'Se a Classe estiver sendo usada em Produtos ou TiposDeProduto não poderá ser excluída

Dim lErro As Long
Dim lComando(2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iClasse As Integer

On Error GoTo Erro_ClasseUM_Exclui

    'Abre comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 22416
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 22417

    'Lê a ClasseUM a ser excluída
    lErro = Comando_ExecutarPos(lComando(0), "SELECT Classe FROM ClasseUM WHERE Classe =?", 0, iClasse, objClasseUM.iClasse)
    If lErro <> AD_SQL_SUCESSO Then Error 22418

    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22423
    If lErro <> AD_SQL_SUCESSO Then Error 22419

    'Lock de ClasseUM
    lErro = Comando_LockExclusive(lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 22420

    'Verifica a Classe está sendo usada em Produtos e TiposDeProduto
    lErro = ClasseUM_Exclui1(objClasseUM)
    If lErro <> SUCESSO Then Error 22421

    'Exclui da Tabela UnidadesDeMedida
    lErro = CF("ClasseUM_Exclui_UM", objClasseUM)
    If lErro <> SUCESSO Then Error 22424

    'Exclui ClasseUM
    lErro = Comando_ExecutarPos(lComando(1), "DELETE FROM ClasseUM", lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 22426

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 22425

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    ClasseUM_Exclui = SUCESSO

    Exit Function

Erro_ClasseUM_Exclui:

    ClasseUM_Exclui = Err

    Select Case Err

        'Tratados nas rotinas chamadas
        Case 22421, 22424

        Case 22416
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22417
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 22418, 22423
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSEUM", Err)

        Case 22419
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSEUM_INEXISTENTE", Err, objClasseUM.iClasse)

        Case 22420
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLASSEUM", Err)

        Case 22426
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CLASSEUM", Err, objClasseUM.iClasse)

        Case 22425
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151682)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 1
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function ClasseUM_Exclui1(ByVal objClasseUM As ClassClasseUM) As Long
''Retorna SUCESSO se a Classe não estiver sendo usada nas tabelas Produtos e TiposDeProduto

Dim lErro As Long, lComando As Long, iClasse As Integer

On Error GoTo Erro_ClasseUM_Exclui1

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22427

    'Pesquisa se a Classe está sendo usada na tabela Produtos
    lErro = Comando_Executar(lComando, "SELECT ClasseUM FROM Produtos WHERE ClasseUM = ?", iClasse, objClasseUM.iClasse)
    If lErro <> AD_SQL_SUCESSO Then Error 22428

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22429

    'Se a Classe está sendo usada na tabela Produtos => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 22430

    'Pesquisa se a Classe está sendo usada na tabela TiposDeProduto
    lErro = Comando_Executar(lComando, "SELECT ClasseUM FROM TiposDeProduto WHERE ClasseUM = ?", iClasse, objClasseUM.iClasse)
    If lErro <> AD_SQL_SUCESSO Then Error 57815

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 57816

    'Se a Classe está sendo usada na tabela TiposDeProduto => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 57817

    Call Comando_Fechar(lComando)
    
    ClasseUM_Exclui1 = SUCESSO

    Exit Function

Erro_ClasseUM_Exclui1:

    ClasseUM_Exclui1 = Err

    Select Case Err

        Case 22427
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22428, 22429
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", Err)

        Case 22430
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSEUM_UTILIZADA_PRODUTOS", Err, objClasseUM.iClasse)

        Case 57815, 57816
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEPRODUTO1", Err)
            
        Case 57817
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSEUM_UTILIZADA_TIPOSDEPRODUTO", Err, objClasseUM.iClasse)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151683)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function ClasseUM_Exclui2(ByVal iClasseUM As Integer, ByVal sSiglaUM As String) As Long
'Retorna SUCESSO se a Classe e a Sigla não estiverem sendo usadas nas tabelas Produtos , TiposDeProduto e ItensPedidoDeVenda

Dim lErro As Long, lComando As Long, iClasse As Integer, sSigla As String

On Error GoTo Erro_ClasseUM_Exclui2

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22431

    sSigla = String(STRING_UM_SIGLA, 0)

    'Pesquisa se a Classe e a Sigla estão sendo usadas na tabela Produtos
    lErro = Comando_Executar(lComando, "SELECT ClasseUM, SiglaUMEstoque FROM Produtos WHERE ClasseUM = ? AND SiglaUMEstoque = ?", iClasse, sSigla, iClasseUM, sSiglaUM)
    If lErro <> AD_SQL_SUCESSO Then Error 22432

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22433

    'se a Classe e a Sigla estão sendo usadas na tabela Produtos => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 22434

    'Pesquisa se a Classe e a sigla estão sendo usadas na tabela TiposDeProduto
    lErro = Comando_Executar(lComando, "SELECT ClasseUM, SiglaUMEstoque FROM TiposDeProduto WHERE ClasseUM = ? AND SiglaUMEstoque = ?", iClasse, sSigla, iClasseUM, sSiglaUM)
    If lErro <> AD_SQL_SUCESSO Then Error 57819

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 57820

    'Se a Classe está sendo usada na tabela TiposDeProduto => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 57821
    
    sSigla = String(STRING_UM_SIGLA, 0)

    'Pesquisa se a Classe e a Sigla estão sendo usadas na tabela ItensPedidoDeVenda
    lErro = Comando_Executar(lComando, "SELECT ClasseUM, UnidadeMed FROM ItensPedidoDeVenda WHERE ClasseUM = ? AND UnidadeMed = ?", iClasse, sSigla, iClasseUM, sSiglaUM)
    If lErro <> AD_SQL_SUCESSO Then Error 22435

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22436

    'se a categoria está associada a algum produto => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 22437

    Call Comando_Fechar(lComando)
    
    ClasseUM_Exclui2 = SUCESSO

    Exit Function

Erro_ClasseUM_Exclui2:

    ClasseUM_Exclui2 = Err

    Select Case Err

        Case 22431
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22432, 22433
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", Err)

        Case 22435, 22436
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA", Err)

        Case 22434
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSEUM_E_SIGLAUM_UTILIZADAS_PRODUTOS", Err, iClasseUM, sSiglaUM)

        Case 22437
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSEUM_E_SIGLAUM_UTILIZADAS_ITENSPEDIDODEVENDA", Err, iClasseUM, sSiglaUM)

        Case 57819, 57820
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEPRODUTO1", Err)
            
        Case 57821
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSEUM_E_SIGLAUM_UTILIZADAS_TIPOSDEPRODUTO", Err, iClasseUM, sSiglaUM)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151684)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ClasseUM_Exclui_UM(ByVal objClasseUM As ClassClasseUM) As Long
'Exclui as Unidades de Medida de uma Classe

Dim lErro As Long, iIndice As Integer
Dim alComando(2) As Long
Dim iClasse As Integer, sSigla As String, sNome As String, dQuantidade As Double, sSiglaUMBase As String

On Error GoTo Erro_ClasseUM_Exclui_UM

    'Abre comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 22440
    Next

    sSigla = String(STRING_UM_SIGLA, 0)
    sNome = String(STRING_CLASSEUM_NOME, 0)
    sSiglaUMBase = String(STRING_UM_SIGLA, 0)

    'Percorrer todas Unidades de Medida no BD
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Sigla, Nome, Quantidade, SiglaUMBase FROM UnidadesDeMedida WHERE Classe = ?", 0, sSigla, sNome, dQuantidade, sSiglaUMBase, objClasseUM.iClasse)
    If lErro <> AD_SQL_SUCESSO Then Error 22441

    'Lê a UM, se estiver no BD
    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22442

    Do While lErro <> AD_SQL_SEM_DADOS

        'excluir a Sigla do BD
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM UnidadesDeMedida", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 22444

        'Lê a UM da Classe, se estiver no BD
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22443

    Loop

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    ClasseUM_Exclui_UM = SUCESSO

    Exit Function

Erro_ClasseUM_Exclui_UM:

    ClasseUM_Exclui_UM = Err

    Select Case Err

        Case 22444
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_UNIDADESDEMEDIDA", Err, objClasseUM.iClasse)

        Case 22441, 22442, 22443
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_UNIDADESDEMEDIDA", Err)

        Case 22440
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151685)

    End Select

    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TiposMovEst_Grava(ByVal objTiposMovEstoque As ClassTipoMovEst) As Long
'recebe uma objTipoMovEstoque e realiza a inserção/atualização(se possível) no bd

    'sendo criada em TipoMOVEstoque.frm
    
End Function

Function TiposMovEst_Exclui(ByVal objTiposMovEstoque As ClassTipoMovEst) As Long
'recebe um objTiposMovEstoque e exclui do bd a partir do codigo passado

    'sendo criada em TipoMOVEstoque.frm
    
End Function

Function TiposMovEst_Automatico(iCodigo As Integer) As Long
'Le a tabela de tipos de movimentos de estoque e retorna o proximo codigo disponivel.

    'sendo criada em TipoMOVEstoque.frm
    
End Function

Function ClasseUM_Grava_SiglaNaColecao(ByVal colUMCopia As Collection, ByVal sSigla As String) As Long
'Retorna o Indice da Sigla na coleção ou Zero se não acha-la (na coleção)

Dim iIndice As Integer
Dim objUM As New ClassUnidadeDeMedida

    'Pesquisa a Sigla na coleção
    For iIndice = 1 To colUMCopia.Count

        Set objUM = colUMCopia.Item(iIndice)

        'Se achou a Sigla na coleção
        If objUM.sSigla = sSigla Then

            ClasseUM_Grava_SiglaNaColecao = iIndice
            Exit Function

        End If

    Next

    ClasseUM_Grava_SiglaNaColecao = 0

End Function

Friend Function ProdutoKit_Exclui_Produto(ByVal sProduto As String) As Long
'Exlui o Produto da Tabela ProdutoKit

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iNivel As Integer

On Error GoTo Erro_ProdutoKit_Exclui_Produto

    'Abre os Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31064

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31065

    'Lê o Produto
    lErro = Comando_ExecutarPos(lComando, "SELECT Nivel FROM ProdutoKit WHERE ProdutoRaiz = ? ", 0, iNivel, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31066

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31067

    Do While lErro <> AD_SQL_SEM_DADOS

        'Exclui o Produto da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM ProdutoKit", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31069

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 31070

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ProdutoKit_Exclui_Produto = SUCESSO

    Exit Function

Erro_ProdutoKit_Exclui_Produto:

    ProdutoKit_Exclui_Produto = Err

    Select Case Err

        Case 31064, 31065
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31066, 31067, 31070
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT1", Err, sProduto)

        Case 31069
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOKIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151686)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function Kit_Exclui_Produto(ByVal sProduto1 As String) As Long
'Exclui o Produto da Tabela Kit

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim sProduto As String

On Error GoTo Erro_Kit_Exclui_Produto

    'Abre os Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31072

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31073

    sProduto = String(STRING_PRODUTO, 0)

    'Lê o Produto
    lErro = Comando_ExecutarPos(lComando, "SELECT ProdutoRaiz FROM Kit WHERE ProdutoRaiz = ? ", 0, sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 31074

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31075

    If lErro = AD_SQL_SUCESSO Then
        
        'Exclui da tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM Kit", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31077

    End If

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Kit_Exclui_Produto = SUCESSO

    Exit Function

Erro_Kit_Exclui_Produto:

    Kit_Exclui_Produto = Err

    Select Case Err

        Case 31072, 31073
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31074, 31075
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KIT", Err, sProduto1)

        Case 31077
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_KIT", Err, sProduto1)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151687)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function EstoqueProduto_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui o Produto da tabela EstoqueProduto

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iAlmoxarifado As Integer

On Error GoTo Erro_EstoqueProduto_Exclui_Produto

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31079

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31080

    'Lê os registros relacionados com o Produto
    lErro = Comando_ExecutarPos(lComando, "SELECT Almoxarifado FROM EstoqueProduto WHERE Produto = ? ", 0, iAlmoxarifado, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31081

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31082

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão na tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM EstoqueProduto", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31084

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31085

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    EstoqueProduto_Exclui_Produto = SUCESSO

    Exit Function

Erro_EstoqueProduto_Exclui_Produto:

    EstoqueProduto_Exclui_Produto = Err

    Select Case Err

        Case 31079, 31080
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31081, 31082, 31085

        Case 31084
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ESTOQUEPRODUTO", Err, sProduto, iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151688)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function SldMesEst_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui da tabela SldMesEst os registros relacionados com o Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_SldMesEst_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31087

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31088

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM SldMesEst WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31089

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31090

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEst", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31093

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31091

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEst_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEst_Exclui_Produto:

    SldMesEst_Exclui_Produto = Err

    Select Case Err

        Case 31087, 31088
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31089, 31090, 31091
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1", Err, sProduto)

        Case 31093
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST1", Err, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151689)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function SldMesEst1_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui da tabela SldMesEst1 os registros relacionados com o Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_SldMesEst1_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60932

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60933

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM SldMesEst1 WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 60934

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60935

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEst1", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 60936

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60937

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEst1_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEst1_Exclui_Produto:

    SldMesEst1_Exclui_Produto = Err

    Select Case Err

        Case 60932, 60933
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60934, 60935, 60937
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", Err, sProduto)

        Case 60936
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST11", Err, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151690)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function SldDiaEst_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui da tabela SldDiaEst os registros relacionados com o Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_SldDiaEst_Exclui_Produto

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31094

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31095

    'Lê os registros
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM SldDiaEst WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31096

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31097

    Do While lErro <> AD_SQL_SEM_DADOS

        'faz a exclusão da tabela.
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldDiaEst", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31100

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31098

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldDiaEst_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldDiaEst_Exclui_Produto:

    SldDiaEst_Exclui_Produto = Err

    Select Case Err

        Case 31094, 31095
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31096, 31097, 31098
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAEST", Err)

        Case 31100
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDDIAEST", Err, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151691)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function ProdutosFilial_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui o Produto da tabela ProdutosFilial

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_ProdutosFilial_Exclui_Produto

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31103

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31104

    'Lê o Produto em ProdutosFilial
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM ProdutosFilial WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31105

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31106

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o Produto
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM ProdutosFilial", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31108
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28197

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ProdutosFilial_Exclui_Produto = SUCESSO

    Exit Function

Erro_ProdutosFilial_Exclui_Produto:

    ProdutosFilial_Exclui_Produto = Err

    Select Case Err

        Case 28197, 31105, 31106
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", Err)

        Case 31103, 31104
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31108
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOSFILIAL", Err, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151692)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function TabelasDePrecoItens_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui os registros relacionados ao Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_TabelasDePrecoItens_Exclui_Produto

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31109

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31110

    'Lê os registros relacionados ao Produto
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM TabelasDePrecoItens WHERE CodProduto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31111

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31112

    Do While lErro <> AD_SQL_SEM_DADOS

        'Exclui da tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM TabelasDePrecoItens", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31115

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31113

    Loop

    'Fecah os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    TabelasDePrecoItens_Exclui_Produto = SUCESSO

    Exit Function

Erro_TabelasDePrecoItens_Exclui_Produto:

    TabelasDePrecoItens_Exclui_Produto = Err

    Select Case Err

        Case 31109, 31110
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31111, 31112, 31113
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS", Err)

        Case 31115
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TABELASDEPRECOITENS", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151693)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'Friend Function FornecedorProduto_Exclui_Produto(sProduto As String) As Long
''Exclui de FornecedorProduto os registros ligados ao Produto passado
'
'Dim lErro As Long
'Dim lComando As Long
'Dim lComando1 As Long
'Dim lFornecedor As Long
'
'On Error GoTo Erro_FornecedorProduto_Exclui_Produto
'
'    'Abre os comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 31116
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 31117
'
'    'Faz a leitura dos registros
'    lErro = Comando_ExecutarPos(lComando, "SELECT Fornecedor FROM FornecedorProduto WHERE Produto = ? ", 0, lFornecedor, sProduto)
'    If lErro <> AD_SQL_SUCESSO Then Error 31118
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31119
'
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        'Exclui na tabela
'        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM FornecedorProduto", lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 31122
'
'        'Lê o próximo
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31120
'
'    Loop
'
'    'Fecha os comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    FornecedorProduto_Exclui_Produto = SUCESSO
'
'    Exit Function
'
'Erro_FornecedorProduto_Exclui_Produto:
'
'    FornecedorProduto_Exclui_Produto = Err
'
'    Select Case Err
'
'        Case 31116, 31117
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 31118, 31119, 31120
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTO", Err)
'
'        Case 31122
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FORNECEDORPRODUTO", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151694)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function

Friend Function ProdutoCategoria_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui em ProdutoCategoria os registros ligados ao Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim sCategoria As String

On Error GoTo Erro_ProdutoCategoria_Exclui_Produto

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31124

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31125

    sCategoria = String(STRING_CATEGORIAPRODUTO_CATEGORIA, 0)

    'Faz a leitura dos registros relacionados ao Produto
    lErro = Comando_ExecutarPos(lComando, "SELECT Categoria FROM ProdutoCategoria WHERE Produto = ? ", 0, sCategoria, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31126

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31127

    Do While lErro <> AD_SQL_SEM_DADOS

        'Exclui na tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM ProdutoCategoria", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31130

        'Lê o próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31128

    Loop

    'Fechar o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ProdutoCategoria_Exclui_Produto = SUCESSO

    Exit Function

Erro_ProdutoCategoria_Exclui_Produto:

    ProdutoCategoria_Exclui_Produto = Err

    Select Case Err

        Case 31124, 31125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31126, 31127, 31128
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOCATEGORIA", Err)

        Case 31130
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOCATEGORIA", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151695)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function ProdutoGerencial_Exclui_BD(ByVal sProduto As String) As Long
'Exclui no BD o Produto passado e os seus "filhos".

Dim lErro As Long
Dim lErro1 As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim iNivel As Integer
Dim iNivel1 As Integer
Dim iGerencial As Integer
Dim sProduto1 As String

On Error GoTo Erro_ProdutoGerencial_Exclui_BD

    'Abre os Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 84258

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 84259

    sProduto1 = String(STRING_PRODUTO, 0)

    'Lê o Produto e os seus filhos
    lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, Gerencial FROM Produtos WHERE Codigo >= ? ORDER BY Codigo", 0, sProduto1, iGerencial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 84260

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84261

    If lErro = AD_SQL_SUCESSO Then

        'Pega o nível do Produto lido
        lErro1 = Mascara_Produto_ObterNivel(sProduto, iNivel)
        If lErro1 <> SUCESSO Then gError 84262

        iNivel1 = iNivel + 1

    End If

    Do While lErro = AD_SQL_SUCESSO And iNivel < iNivel1
        
        lErro = Produto_Exclui_Todas(sProduto1)
        If lErro <> SUCESSO Then gError 84263
                
        'Exclui o Produto na Tabela de Produtos
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM Produtos", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 84264

        'lê o próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84265

        If lErro = AD_SQL_SUCESSO Then
            'Pega o nível do Próximo
            lErro1 = Mascara_Produto_ObterNivel(sProduto1, iNivel1)
            If lErro1 <> SUCESSO Then gError 84266

        End If

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ProdutoGerencial_Exclui_BD = SUCESSO

    Exit Function

Erro_ProdutoGerencial_Exclui_BD:

    ProdutoGerencial_Exclui_BD = gErr

    Select Case gErr

        Case 84258, 84259
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 84260, 84261, 84265
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, sProduto)

        Case 84262, 84266
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MASCARA_PRODUTO_OBTERNIVEL", gErr, sProduto)

        Case 84258

        Case 84264
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOS", gErr, sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151696)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function Produto_Exclui_Todas(ByVal sProduto As String) As Long

Dim lErro As Long

On Error GoTo Erro_Produto_Exclui_Todas

    'Exclui o Produto em ProdutoKit
    lErro = ProdutoKit_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84267
    'Exclui o Produto em Kit
    lErro = Kit_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84268
    'Exclui o Produto em EstoqueProduto
    lErro = EstoqueProduto_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84269
    'Exclui o Produto em SldMesEst
    lErro = SldMesEst_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84270
    'Exclui o Produto em SldMesEst1
    lErro = SldMesEst1_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84271
    'Exclui o Produto em SldMesEst2
    lErro = SldMesEst2_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84285
    'Exclui o Produto em SldMesDia
    lErro = SldDiaEst_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84272
    'Exclui o Produto em SldMesEst1Terc
    lErro = SldMesEst1Terc_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84271
    'Exclui o Produto em SldMesEst2Terc
    lErro = SldMesEst2Terc_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84285
    'Exclui o Produto em SldMesDiaTerc
    lErro = SldDiaEstTerc_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84272
    'Exclui o Produto em ProdutosFilial
    lErro = ProdutosFilial_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84273
    'Exclui o Produto em TabelasDePrecoItens
    lErro = TabelasDePrecoItens_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84274
'    'Exclui o Produto em FornecedorProduto
'    lErro = FornecedorProduto_Exclui_Produto(sProduto)
'    If lErro <> SUCESSO Then gError 84275
    'Exclui o Produto em FornecedorProdutoFF
    lErro = FornecedorProdutoFF_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84276
    'Exclui o Produto em ProdutoCategoria
    lErro = ProdutoCategoria_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84277
    'Exclui o Produto em SldMesEstAlm
    lErro = SldMesEstAlm_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84303
    'Exclui o Produto em SldMesEstAlm1
    lErro = SldMesEstAlm1_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84304
    'Exclui o Produto em SldMesEstAlm2
    lErro = SldMesEstAlm2_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 84305
    'Exclui o Produto em SldDiaForn
    lErro = SldDiaForn_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 108775
    'Exclui o Produto em SldMesForn
    lErro = SldMesForn_Exclui_Produto(sProduto)
    If lErro <> SUCESSO Then gError 108776
    
    lErro = CF("ProdutoCNAE_Exclui", sProduto)
    If lErro <> SUCESSO Then gError 108776
    
    'Exclui os codigos de barra do produto em questao
    lErro = Produto_Exclui_ProdutoCodBarras(sProduto)
    If lErro <> SUCESSO Then gError 199869
        
    lErro = Produto_Exclui_Tabela(sProduto, "LivRegESCadProd", "Produto")
    If lErro <> SUCESSO Then gError 108776
    
    lErro = CF("Produto_Exclui_Usu", sProduto)
    If lErro <> SUCESSO Then gError 197240
    
    Produto_Exclui_Todas = SUCESSO

    Exit Function

Erro_Produto_Exclui_Todas:

    Produto_Exclui_Todas = gErr
    
    Select Case gErr

        Case 84285, 84303, 84304, 84305, 84267, 84268, 84269, 84270, 84271, 84272, 84273, 84274, 84275, 84276, 84277, 108775, 108776, 197240, 199869
           
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151697)

    End Select
    
    Exit Function
    
End Function

Friend Function SldMesEst2_Exclui_Produto(ByVal sProduto As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_SldMesEst2_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 84279 '60932

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 84280 '60933

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM SldMesEst2 WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 84281 '60934

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84282 '60935

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEst2", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 84283 '60936

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84284 '60937

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEst2_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEst2_Exclui_Produto:

    SldMesEst2_Exclui_Produto = Err

    Select Case Err

        Case 84279, 84280
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 84281, 84282, 84284
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST22", gErr, sProduto)

        Case 84283
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST22", gErr, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151698)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function SldMesEstAlm_Exclui_Produto(ByVal sProduto As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iAlmoxarifado As Integer

On Error GoTo Erro_SldMesEstAlm_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 84285

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 84286

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT Almoxarifado FROM SldMesEstAlm WHERE Produto = ? ", 0, iAlmoxarifado, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 84287

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84288

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEstAlm", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 84289

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84290

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEstAlm_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEstAlm_Exclui_Produto:

    SldMesEstAlm_Exclui_Produto = gErr

    Select Case gErr

        Case 84285, 84286
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 84287, 84288, 84290
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM", gErr, sProduto)

        Case 84289
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESESTALM", gErr, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151699)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function SldMesEstAlm1_Exclui_Produto(ByVal sProduto As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iAlmoxarifado As Integer

On Error GoTo Erro_SldMesEstAlm1_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 84291 '84285

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 84292 '84286

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT Almoxarifado FROM SldMesEstAlm1 WHERE Produto = ? ", 0, iAlmoxarifado, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 84293 '84287

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84294 '84288

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEstAlm1", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 84295 '84289

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84296 '84290

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEstAlm1_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEstAlm1_Exclui_Produto:

    SldMesEstAlm1_Exclui_Produto = gErr

    Select Case gErr

        Case 84291, 84292
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 84293, 84294, 84296
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM1", gErr, sProduto)

        Case 84295
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESESTALM1", gErr, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151700)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function SldMesEstAlm2_Exclui_Produto(ByVal sProduto As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iAlmoxarifado As Integer

On Error GoTo Erro_SldMesEstAlm2_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 84297

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 84298

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT Almoxarifado FROM SldMesEstAlm2 WHERE Produto = ? ", 0, iAlmoxarifado, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 84299

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84300

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEstAlm2", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 84301
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84302

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEstAlm2_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEstAlm2_Exclui_Produto:

    SldMesEstAlm2_Exclui_Produto = gErr

    Select Case gErr

        Case 84297, 84298
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 84299, 84300, 84302
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM2", gErr, sProduto)

        Case 84301
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESESTALM2", gErr, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151701)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function Produto_Altera_CategoriaItem(ByVal sProduto As String, ByVal colCategoriaItem As Collection) As Long
'Faz a alteração em ProdutoCategoria dos registros passados em colCategoriaItem

Dim lErro As Long
Dim sCategoria As String
Dim sItem As String
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim objProdutoCategoria As ClassProdutoCategoria
Dim iIndice As Integer

On Error GoTo Erro_Produto_Altera_CategoriaItem

    'Abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31165

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 31166
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 18781

    sCategoria = String(STRING_CATEGORIAPRODUTO_CATEGORIA, 0)
    sItem = String(STRING_CATEGORIAPRODUTOITEM_ITEM, 0)

    'Lê a CAtegoria em ProdutoCategoria
    lErro = Comando_ExecutarPos(lComando1, "SELECT Categoria, Item FROM ProdutoCategoria WHERE Produto = ?", 0, sCategoria, sItem, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 26966

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26967

    Do While lErro <> AD_SQL_SEM_DADOS
    
        'procura a categoria encontrada no bd na colecao passada
        iIndice = Produto_Grava_CategoriaNaColecao(colCategoriaItem, sCategoria)

        If iIndice <> 0 Then

            Set objProdutoCategoria = colCategoriaItem.Item(iIndice)

            'Se houver sido alterado o Item
            If objProdutoCategoria.sItem <> sItem Then
                            
                lErro = CF("CategoriaProdutoItem_Lock", objProdutoCategoria.sCategoria, objProdutoCategoria.sItem, lComando3)
                If lErro <> SUCESSO And lErro <> 18650 Then Error 18701
                
                If lErro = 18650 Then Error 18702
                
                'Altera a Tabela ProdutoCategoria
                lErro = Comando_ExecutarPos(lComando2, "UPDATE ProdutoCategoria SET Item = ?", lComando1, objProdutoCategoria.sItem)
                If lErro <> AD_SQL_SUCESSO Then Error 31237

            End If

            'Retira da coleção
            colCategoriaItem.Remove (iIndice)

        Else

            'Excluir registro em ProdutoCategoria
            lErro = Comando_ExecutarPos(lComando2, "DELETE FROM ProdutoCategoria", lComando1)
            If lErro <> AD_SQL_SUCESSO Then Error 31238

        End If

        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26968

    Loop

    'FEcha os Comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Produto_Altera_CategoriaItem = SUCESSO

    Exit Function

Erro_Produto_Altera_CategoriaItem:

    Produto_Altera_CategoriaItem = Err

    Select Case Err
    
        Case 18701
        
        Case 18702
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTOITEM_NAO_CADASTRADA", Err, objProdutoCategoria.sItem, objProdutoCategoria.sCategoria)

        Case 31165, 31166, 18781
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 26966, 26967, 26968
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOCATEGORIA", Err, sProduto)

        Case 31237
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOCATEGORIA", Err, sProduto)

        Case 31238
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOCATEGORIA", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151702)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Friend Function Produto_Grava_CategoriaItem(ByVal sProduto As String, ByVal colCategoriaItem As Collection) As Long
'Insere em ProdutoCaregoria os registros passados como parâmetro

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim objProdutoCategoria As ClassProdutoCategoria
Dim sCategoria As String

On Error GoTo Erro_Produto_Grava_CategoriaItem

    'Abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31177

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 31178

    'Para  cada registro da coleção
    For Each objProdutoCategoria In colCategoriaItem

        sCategoria = String(STRING_CATEGORIAPRODUTO_CATEGORIA, 0)
        'Lê a CategoriaProdutoItem
        lErro = Comando_ExecutarLockado(lComando1, "SELECT Categoria FROM CategoriaProdutoItem WHERE Categoria = ? and Item = ?", sCategoria, objProdutoCategoria.sCategoria, objProdutoCategoria.sItem)
        If lErro <> AD_SQL_SUCESSO Then Error 26978

        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26979
        'Se não encontrar --> Erro
        If lErro = AD_SQL_SEM_DADOS Then Error 26984

        'Faz o "lock"
        lErro = Comando_LockShared(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 26980

        'Insere os registros em ProdutoCategoria
        lErro = Comando_Executar(lComando2, "INSERT INTO ProdutoCategoria (Produto, Categoria, Item) VALUES (?,?,?)", sProduto, objProdutoCategoria.sCategoria, objProdutoCategoria.sItem)
        If lErro <> AD_SQL_SUCESSO Then Error 26981

    Next

    'Fecha os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Produto_Grava_CategoriaItem = SUCESSO

    Exit Function

Erro_Produto_Grava_CategoriaItem:

    Produto_Grava_CategoriaItem = Err

    Select Case Err

        Case 31177, 31178
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 26978, 26979
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTOITEM", Err, objProdutoCategoria.sCategoria)

        Case 26984
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTOITEM_INEXISTENTE", Err, objProdutoCategoria.sItem, objProdutoCategoria.sCategoria)

        Case 26980
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CATEGORIAPRODUTOITEM", Err)

        Case 26981
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CATEGORIAPRODUTOITEM", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151703)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Friend Function Produto_Grava_TabelaPrecoItem(ByVal sProduto As String, ByVal colTabelaPrecoItem As Collection) As Long
'Grava os preços para a filial corrente (ou Empresa Toda) em TabelasDePrecoItens
'TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim objTabelaPrecoItem As ClassTabelaPrecoItem
Dim iCodTabela As Integer

On Error GoTo Erro_Produto_Grava_TabelaPrecoItem

    'Abre os Comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31175

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 31176

    'Para cada tabela da coleção
    For Each objTabelaPrecoItem In colTabelaPrecoItem

        'Lâ a tabela
        lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM TabelasDePreco WHERE Codigo = ?", iCodTabela, objTabelaPrecoItem.iCodTabela)
        If lErro <> AD_SQL_SUCESSO Then Error 26982

        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26983
        'Se não achar --> Erro
        If lErro = AD_SQL_SEM_DADOS Then Error 26985

        'faz o "lock"da Tabela
        lErro = Comando_LockShared(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 26986

        'Insere o registro em TabelasDePrecoItens
        lErro = Comando_Executar(lComando2, "INSERT INTO TabelasDePrecoItens (CodTabela,FilialEmpresa,CodProduto,DataVigencia,Preco) VALUES (?,?,?,?,?)", objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.dtDataVigencia, objTabelaPrecoItem.dPreco)
        If lErro <> AD_SQL_SUCESSO Then Error 26987

    Next

    'Fecha os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Produto_Grava_TabelaPrecoItem = SUCESSO

    Exit Function

Erro_Produto_Grava_TabelaPrecoItem:

    Produto_Grava_TabelaPrecoItem = Err

    Select Case Err

        Case 31175, 31176
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 26982, 26983
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS", Err)

        Case 26985
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TABELA_PRECO_NAO_CADASTRADA", Err, objTabelaPrecoItem.iCodTabela)

        Case 26986
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TABELASDEPRECOITENS", Err)

        Case 26987
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TABELASDEPRECOITENS", Err, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151704)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

'Alterado por Ivan em 04/04/03
Function CategoriaProduto_Grava_NovosItens(ByVal objCategoriaProduto As ClassCategoriaProduto, ByVal colItensCategoria As Collection) As Long
'percorrer os itens na colecao incluindo-os no bd

Dim lErro As Long, lComando As Long
Dim objCategoriaItem As New ClassCategoriaProdutoItem

On Error GoTo Erro_CategoriaProduto_Grava_NovosItens

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27119
    
    'percorrer a colecao
    For Each objCategoriaItem In colItensCategoria

        With objCategoriaItem
            lErro = Comando_Executar(lComando, "INSERT INTO CategoriaProdutoItem (Categoria, Item, Ordem, Descricao, Valor1, Valor2, Valor3, Valor4, Valor5, Valor6, Valor7, Valor8) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)", _
                .sCategoria, .sItem, .iOrdem, .sDescricao, .dvalor1, .dvalor2, .dvalor3, .dvalor4, .dvalor5, .dvalor6, .dvalor7, .dvalor8)
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 27120
            
    Next
    
    Call Comando_Fechar(lComando)
    
    CategoriaProduto_Grava_NovosItens = SUCESSO

    Exit Function

Erro_CategoriaProduto_Grava_NovosItens:

    CategoriaProduto_Grava_NovosItens = Err

    Select Case Err

        Case 27119
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 27120
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CATEGORIAPRODUTOITEM", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151705)

    End Select

    Call Comando_Fechar(lComando)
        
    Exit Function

End Function

Function CategoriaProduto_Grava_ItemNaColecao(ByVal colItensCategoria As Collection, ByVal sItem As String) As Long
'retorna o indice do item na colecao ou zero se nao acha-lo (na colecao)

Dim iIndice As Integer
Dim objCategoriaItem As New ClassCategoriaProdutoItem

    'pesquisa o item na colecao
    For iIndice = 1 To colItensCategoria.Count
         
        Set objCategoriaItem = colItensCategoria.Item(iIndice)
        
        'se achou o item na colecao
        If objCategoriaItem.sItem = sItem Then
            CategoriaProduto_Grava_ItemNaColecao = iIndice
            Exit Function
        End If
        
    Next

    CategoriaProduto_Grava_ItemNaColecao = 0
    
End Function

'Alterado por Ivan em 04/04/03
Function CategoriaProduto_Grava_EmTrans(ByVal objCategoriaProduto As ClassCategoriaProduto, ByVal colItensCategoria As Collection) As Long
'inclui ou altera uma categoria de produtos e seus valores
'tabelas:CategoriaProduto e CategoriaProdutoItem

Dim lErro As Long, iIndice As Integer, colItensCategoriaCopia As New Collection
Dim sCategoriaDescricao As String, sCategoriaSigla As String
Dim objCategoriaProdutoItem As New ClassCategoriaProdutoItem
Dim alComando(1 To 6) As Long
Dim tCategoriaItem As typeCategoriaProdutoItem

On Error GoTo Erro_CategoriaProduto_Grava_EmTrans

    'cria uma copia "de trabalho" da colecao passada como parametro
    For Each objCategoriaProdutoItem In colItensCategoria
        colItensCategoriaCopia.Add objCategoriaProdutoItem
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 27121
    Next

    sCategoriaDescricao = String(STRING_CATEGORIAPRODUTO_DESCRICAO, 0)
    sCategoriaSigla = String(STRING_CATEGORIAPRODUTO_SIGLA, 0)
    
    'Pesquisa no BD a categoria em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Descricao, Sigla FROM CategoriaProduto WHERE Categoria = ?", 0, sCategoriaDescricao, sCategoriaSigla, objCategoriaProduto.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 27124

    'Lê a categoria, se estiver no BD
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 27125

    'Se a categoria existir...
    If lErro = AD_SQL_SUCESSO Then
    
        'Se a descrição ou sigla da categoria for diferente
        If sCategoriaDescricao <> objCategoriaProduto.sDescricao Or sCategoriaSigla <> objCategoriaProduto.sSigla Then
             
            'Alterar a descrição ou a sigla da categoria
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE CategoriaProduto SET Descricao = ?, Sigla = ?", alComando(1), objCategoriaProduto.sDescricao, objCategoriaProduto.sSigla)
            If lErro <> AD_SQL_SUCESSO Then gError 27126
            
        End If
                
        tCategoriaItem.sDescricao = String(STRING_CATEGORIAPRODUTOITEM_DESCRICAO, 0)
        tCategoriaItem.sItem = String(STRING_CATEGORIAPRODUTOITEM_ITEM, 0)
        
        'Percorrer todos os itens atuais da categoria no bd
        With tCategoriaItem
            lErro = Comando_ExecutarPos(alComando(3), "SELECT Item, Ordem, Descricao, Valor1, Valor2, Valor3, Valor4, Valor5, Valor6, Valor7, Valor8 FROM CategoriaProdutoItem WHERE Categoria = ?", 0, _
                .sItem, .iOrdem, .sDescricao, .dvalor1, .dvalor2, .dvalor3, .dvalor4, .dvalor5, .dvalor6, .dvalor7, .dvalor8, objCategoriaProduto.sCategoria)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 27127
        
        'Lê o item da categoria, se estiver no BD
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 27128

        Do While lErro <> AD_SQL_SEM_DADOS
            
            'Procura o item na coleção correspondente ao grid
            iIndice = CF("CategoriaProduto_Grava_ItemNaColecao", colItensCategoriaCopia, tCategoriaItem.sItem)
            
            'Se (ainda) existir no grid uma linha com a mesma chave
            If iIndice <> 0 Then
            
                Set objCategoriaProdutoItem = colItensCategoriaCopia.Item(iIndice)
                           
                lErro = CF("CategoriaProdutoItem_Altera", objCategoriaProdutoItem, objCategoriaProduto.sCategoria, alComando(4), alComando(3))
                If lErro <> SUCESSO Then gError 126501
                           
                'excluir o item da colecao
                colItensCategoriaCopia.Remove (iIndice)
                
            Else
            
                lErro = CF("CategoriaProdutoItem_NaoUtilizado", objCategoriaProduto.sCategoria, tCategoriaItem.sItem)
                If lErro <> SUCESSO Then gError 27156
                
                'Excluir o item do bd
                lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM CategoriaProdutoItem", alComando(3))
                If lErro <> AD_SQL_SUCESSO Then gError 27130
                
            End If
            
            'Lê o item da categoria, se estiver no BD
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 27131

        Loop
        
    Else 'a categoria não existe...
    
        'Criá-la ( incluí-la em CategoriaProduto )
        lErro = Comando_Executar(alComando(6), "INSERT INTO CategoriaProduto (Categoria, Descricao, Sigla) VALUES(?,?,?)", objCategoriaProduto.sCategoria, objCategoriaProduto.sDescricao, objCategoriaProduto.sSigla)
        If lErro <> AD_SQL_SUCESSO Then gError 27132
        
    End If
    
    'Grava os itens que ainda nao faziam parte da categoria
    lErro = CF("CategoriaProduto_Grava_NovosItens", objCategoriaProduto, colItensCategoriaCopia)
    If lErro <> SUCESSO Then gError 27133
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CategoriaProduto_Grava_EmTrans = SUCESSO

    Exit Function

Erro_CategoriaProduto_Grava_EmTrans:

    CategoriaProduto_Grava_EmTrans = gErr

    Select Case gErr

        Case 27133, 27156, 126501
        
        Case 27121
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 27124, 27125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTO", gErr)
        
        Case 27126
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CATEGORIAPRODUTO", gErr)
        
        Case 27130
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CATEGORIAPRODUTOITEM", gErr)
        
        Case 27127, 27128, 27131
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTOITENS_CATEGORIA", gErr)
        
        Case 27132
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CATEGORIAPRODUTO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151706)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
        
End Function

Function CategoriaProduto_Grava(ByVal objCategoriaProduto As ClassCategoriaProduto, ByVal colItensCategoria As Collection) As Long
'inclui ou altera uma categoria de produtos e seus valores
'tabelas:CategoriaProduto e CategoriaProdutoItem

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CategoriaProduto_Grava

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 27122

    lErro = CategoriaProduto_Grava_EmTrans(objCategoriaProduto, colItensCategoria)
    If lErro <> SUCESSO Then Error 59492
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 27123

    CategoriaProduto_Grava = SUCESSO

    Exit Function

Erro_CategoriaProduto_Grava:

    CategoriaProduto_Grava = Err

    Select Case Err

        Case 59492
        
        Case 27122
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 27123
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151707)

    End Select

    Call Transacao_Rollback
    
    Exit Function
        
End Function

Function CategoriaProduto_Exclui(ByVal objCategoriaProduto As ClassCategoriaProduto) As Long
'excluir a tabela com todos os seus itens se nao for usada em ProdutoCategoria

Dim lErro As Long, sCategoriaDescricao As String
Dim lTransacao As Long, lComandoSel As Long, lComandoDel As Long, lComando As Long
Dim iTipo As Integer

On Error GoTo Erro_CategoriaProduto_Exclui

    'Abertura comandos
    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 27134

    lComandoDel = Comando_Abrir()
    If lComandoDel = 0 Then Error 27135
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 28983
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 27136

    sCategoriaDescricao = String(STRING_CATEGORIAPRODUTO_DESCRICAO, 0)
    
    'Lê a categoria
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Descricao FROM CategoriaProduto WHERE Categoria = ?", 0, sCategoriaDescricao, objCategoriaProduto.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then Error 27137
    
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27138
        
    If lErro <> AD_SQL_SUCESSO Then Error 27139
    
    lErro = Comando_LockExclusive(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 27140
    
    'Pesquisa no BD se a Categoria está sendo usada por algum tipo de produto
    lErro = Comando_Executar(lComando, "SELECT TipoDeProduto FROM TipoDeProdutoCategorias WHERE Categoria = ?", iTipo, objCategoriaProduto.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then Error 28984

    'Verifica se Categoria está sendo utilizada
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28985

    'Se encontrou ==> erro
    If lErro = AD_SQL_SUCESSO Then Error 28986

    'Verifica se a categoria está sendo usada para algum produto
    lErro = CF("CategoriaProduto_Exclui1", objCategoriaProduto)
    If lErro <> SUCESSO Then Error 27141
    
    'Exclui os itens da categoria
    lErro = CF("CategoriaProduto_ExcluiItens", objCategoriaProduto)
    If lErro <> SUCESSO Then Error 27142
    
    'Exclui a propria categoria
    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM CategoriaProduto", lComandoSel)
    If lErro <> SUCESSO Then Error 27143
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 27144

    'Libera comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)
    Call Comando_Fechar(lComando)
    
    CategoriaProduto_Exclui = SUCESSO

    Exit Function

Erro_CategoriaProduto_Exclui:

    CategoriaProduto_Exclui = Err

    Select Case Err

        Case 27141, 27142
        
        Case 27137, 27138
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTO", Err)
        
        Case 27139
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTO_INEXISTENTE", Err, objCategoriaProduto.sCategoria)
        
        Case 27140
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CATEGORIAPRODUTO", Err)
        
        Case 27134, 27135, 28983
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 27136
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 27143
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CATEGORIAPRODUTO", Err)
        
        Case 27144
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 28984, 28985
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEPRODUTOCATEGORIAS1", Err, objCategoriaProduto.sCategoria)

        Case 28986
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CATEGORIAPRODUTO_UTILIZADA", Err, objCategoriaProduto.sCategoria, iTipo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151708)

    End Select

    Call Transacao_Rollback
    
    'Libera comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CategoriaProduto_Exclui1(ByVal objCategoriaProduto As ClassCategoriaProduto) As Long
'retorna SUCESSO se a categoria nao estiver sendo usada por nenhum produto

Dim lErro As Long, lComando As Long, sProduto As String
Dim sCategoriaProduto As String

On Error GoTo Erro_CategoriaProduto_Exclui1

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27145
    
    sProduto = String(STRING_PRODUTO, 0)
    
    'pesquisa se a categoria está associada a algum produto
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ProdutoCategoria WHERE Categoria = ?", sProduto, objCategoriaProduto.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then Error 27146
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27147
    
    'se a categoria está associada a algum produto => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 27148
     
    sCategoriaProduto = String(STRING_CATEGORIAPRODUTO_CATEGORIA, 0)
    
    'Verifica se Categoria é usada na Tabela ICMSExcecoes.
    lErro = Comando_Executar(lComando, "SELECT CategoriaProduto FROM ICMSExcecoes WHERE CategoriaProduto = ?", sCategoriaProduto, objCategoriaProduto.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then Error 55181
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55182
    
    'Se está sendo usado => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 55183
             
    'Verifica se Categoria e/ou Item são usados na Tabela IPIExcecoes.
    lErro = Comando_Executar(lComando, "SELECT CategoriaProduto FROM IPIExcecoes WHERE CategoriaProduto = ?", sCategoriaProduto, objCategoriaProduto.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then Error 55184
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55185
    
    'Se está sendo usado => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 55186
     
    Call Comando_Fechar(lComando)
    
    CategoriaProduto_Exclui1 = SUCESSO

    Exit Function

Erro_CategoriaProduto_Exclui1:

    CategoriaProduto_Exclui1 = Err

    Select Case Err

        Case 27145
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 27146, 27147
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS_CATEGORIA", Err, objCategoriaProduto.sCategoria)
        
        Case 27148
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTO_UTILIZADA", Err, objCategoriaProduto.sCategoria, sProduto)
        
        Case 55181, 55182
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ICMSEXCECOES", Err)
                    
        Case 55183
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTO_ICMSEXCECOES", Err, objCategoriaProduto.sCategoria)
            
        Case 55184, 55185
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IPIEXCECOES", Err)
        
        Case 55186
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTO_IPIEXCECOES", Err, objCategoriaProduto.sCategoria)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151709)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CategoriaProduto_ExcluiItens(ByVal objCategoriaProduto As ClassCategoriaProduto) As Long
'exclui os itens de uma categoria (se nao for utilizado  )

Dim lErro As Long, lComandoSel As Long, lComandoDel As Long
Dim sCategoriaItem As String, sCategoriaItemDescricao As String

On Error GoTo Erro_CategoriaProduto_ExcluiItens

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 27149

    lComandoDel = Comando_Abrir()
    If lComandoDel = 0 Then Error 27150

    sCategoriaItem = String(STRING_CATEGORIAPRODUTOITEM_ITEM, 0)
    sCategoriaItemDescricao = String(STRING_CATEGORIAPRODUTOITEM_DESCRICAO, 0)
    
    'percorrer todos os itens da categoria no bd
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Item, Descricao FROM CategoriaProdutoItem WHERE Categoria = ?", 0, sCategoriaItem, sCategoriaItemDescricao, objCategoriaProduto.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then Error 27151
    
    'le o item da categoria, se estiver no BD
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27152

    Do While lErro <> AD_SQL_SEM_DADOS
        
        lErro = CF("CategoriaProdutoItem_NaoUtilizado", objCategoriaProduto.sCategoria, sCategoriaItem)
        If lErro <> SUCESSO Then Error 27153
        
        'excluir o item do bd
        lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM CategoriaProdutoItem", lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then Error 27154
            
        'le o item da categoria, se estiver no BD
        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27155

    Loop
        
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)

    CategoriaProduto_ExcluiItens = SUCESSO

    Exit Function

Erro_CategoriaProduto_ExcluiItens:

    CategoriaProduto_ExcluiItens = Err

    Select Case Err

        Case 27153
        
        Case 27154
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CATEGORIAPRODUTOITEM", Err)
        
        Case 27151, 27152, 27155
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTOITENS_CATEGORIA", Err)
        
        Case 27149, 27150
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151710)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)

    Exit Function

End Function

Function CategoriaProdutoItem_NaoUtilizado(ByVal sCategoria As String, ByVal sItem As String, Optional ByVal iNaoExibeMsgErro As Integer = 0) As Long
'retorna SUCESSO se nenhum produto tiver o valor de sItem na categoria identificada por sCategoria

Dim lErro As Long, lComando As Long, sProduto As String
Dim sCategoriaProduto As String

On Error GoTo Erro_CategoriaProdutoItem_NaoUtilizado

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27160
    
    sProduto = String(STRING_PRODUTO, 0)
    
    'pesquisa se o par (categoria,item) está associado a algum produto
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ProdutoCategoria WHERE Categoria = ? AND Item = ?", sProduto, sCategoria, sItem)
    If lErro <> AD_SQL_SUCESSO Then Error 27157
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27158
    
    'se está associado a algum produto => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 27159
    
    sCategoriaProduto = String(STRING_CATEGORIAPRODUTO_CATEGORIA, 0)
    
    'Verifica se Categoria e/ou Item são usados na Tabela ICMSExcecoes.
    lErro = Comando_Executar(lComando, "SELECT CategoriaProduto FROM ICMSExcecoes WHERE CategoriaProduto = ? AND CategoriaProdutoItem = ? ", sCategoriaProduto, sCategoria, sItem)
    If lErro <> AD_SQL_SUCESSO Then Error 22087
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22119
    
    'Se está sendo usado => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 22120
             
    'Verifica se Categoria e/ou Item são usados na Tabela IPIExcecoes.
    lErro = Comando_Executar(lComando, "SELECT CategoriaProduto FROM IPIExcecoes WHERE CategoriaProduto = ? AND CategoriaProdutoItem = ?", sCategoriaProduto, sCategoria, sItem)
    If lErro <> AD_SQL_SUCESSO Then Error 28903
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28904
    
    'Se está sendo usado => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 28905
         
    Call Comando_Fechar(lComando)
    
    CategoriaProdutoItem_NaoUtilizado = SUCESSO

    Exit Function

Erro_CategoriaProdutoItem_NaoUtilizado:

    CategoriaProdutoItem_NaoUtilizado = Err

    Select Case Err
        
        Case 22087, 22119
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ICMSEXCECOES", Err)
                    
        Case 22120
            If iNaoExibeMsgErro = 0 Then Call Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTOITEM_ICMSEXCECOES", Err, sCategoria, sItem)
            
        Case 27160
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 27157, 27158
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS_CATEGORIA_ITEM", Err, sCategoria, sItem)
        
        Case 27159
            If iNaoExibeMsgErro = 0 Then Call Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTOITEM_UTILIZADO", Err, sProduto, sItem, sCategoria)
                    
        Case 28903, 28904
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IPIEXCECOES", Err)
        
        Case 28905
            If iNaoExibeMsgErro = 0 Then Call Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAPRODUTOITEM_IPIEXCECOES", Err, sCategoria, sItem)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151711)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TipoDeProduto_Exclui(ByVal objTipoDeProduto As ClassTipoDeProduto) As Long
'Exclui o Tipo de Produto
'Se o Tipo de Produto estiver sendo usado em Produtos não poderá ser excluído

Dim lErro As Long
Dim lComando(2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iTipo As Integer

On Error GoTo Erro_TipoDeProduto_Exclui

    'Abre comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 22551
    Next

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 22552

    'Lê o TipoDeProduto a ser excluído
    lErro = Comando_ExecutarPos(lComando(0), "SELECT TipoDeProduto FROM TiposDeProduto WHERE TipoDeProduto = ?", 0, iTipo, objTipoDeProduto.iTipo)
    If lErro <> AD_SQL_SUCESSO Then Error 22553

    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22554

    If lErro <> AD_SQL_SUCESSO Then Error 22555

    'Lock de TiposDeProduto
    lErro = Comando_LockExclusive(lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 22556

    'Verifica se o Tipo de Produto está sendo usado em Produtos
    lErro = TipoDeProduto_Exclui1(objTipoDeProduto)
    If lErro <> SUCESSO Then Error 22557

    'Exclui da Tabela TipoDeProdutoCategorias
    lErro = TipoDeProduto_Exclui_Categorias(objTipoDeProduto)
    If lErro <> SUCESSO Then Error 22558

    'Exclui da Tabela TiposDeProduto
    lErro = Comando_ExecutarPos(lComando(1), "DELETE FROM TiposDeProduto", lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 22559

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 22560

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    TipoDeProduto_Exclui = SUCESSO

    Exit Function

Erro_TipoDeProduto_Exclui:

    TipoDeProduto_Exclui = Err

    Select Case Err

        Case 22551
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22552
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 22553, 22554
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEPRODUTO", Err, objTipoDeProduto.iTipo)

        Case 22555
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOPRODUTO_INEXISTENTE", Err, objTipoDeProduto.iTipo)

        Case 22556
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOSDEPRODUTO", Err)

        'Tratados nas rotinas chamadas
        Case 22557, 22558

        Case 22559
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOPRODUTO", Err, objTipoDeProduto.iTipo)

        Case 22560
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151712)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 1
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Private Function TipoDeProduto_Exclui1(ByVal objTipoDeProduto As ClassTipoDeProduto) As Long
''Retorna SUCESSO se o Tipo de Produto não estiver sendo usado na Tabela Produtos

Dim lErro As Long
Dim lComando As Long
Dim iTipo As Integer

On Error GoTo Erro_TipoDeProduto_Exclui1

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22561

    'Pesquisa se o Tipo de Produto está sendo usado na tabela Produtos
    lErro = Comando_Executar(lComando, "SELECT Tipo FROM Produtos WHERE Tipo = ?", iTipo, objTipoDeProduto.iTipo)
    If lErro <> AD_SQL_SUCESSO Then Error 22562

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22563

    'Se o Tipo de Produto está sendo usado na tabela Produtos => erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 22564

    Call Comando_Fechar(lComando)

    TipoDeProduto_Exclui1 = SUCESSO

    Exit Function

Erro_TipoDeProduto_Exclui1:

    TipoDeProduto_Exclui1 = Err

    Select Case Err

        Case 22561
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22562, 22563
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", Err)

        Case 22564
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOPRODUTO_UTILIZADO_PRODUTOS", Err, objTipoDeProduto.iTipo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151713)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function TipoDeProduto_Exclui_Categorias(ByVal objTipoDeProduto As ClassTipoDeProduto) As Long
'Exclui as Categorias de um Tipo de Produto

Dim lErro As Long, iIndice As Integer
Dim alComando(2) As Long
Dim sCategoria As String, sItem As String

On Error GoTo Erro_TipoDeProduto_Exclui_Categorias

    'Abre comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 22565
    Next

    sCategoria = String(STRING_CATEGORIAPRODUTO_CATEGORIA, 0)
    sItem = String(STRING_CATEGORIAPRODUTOITEM_ITEM, 0)

    'Percorrer todas as Categorias no BD
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Categoria, Item FROM TipoDeProdutoCategorias WHERE TipoDeProduto = ?", 0, sCategoria, sItem, objTipoDeProduto.iTipo)
    If lErro <> AD_SQL_SUCESSO Then Error 22566

    'Lê a Categoria, se estiver no BD
    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22567

    Do While lErro <> AD_SQL_SEM_DADOS

        'excluir a Categoria no BD
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TipoDeProdutoCategorias", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 22569

        'Lê a Categoria do Tipo de Produto, se estiver no BD
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22568

    Loop

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    TipoDeProduto_Exclui_Categorias = SUCESSO

    Exit Function

Erro_TipoDeProduto_Exclui_Categorias:

    TipoDeProduto_Exclui_Categorias = Err

    Select Case Err

        Case 22565
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22566, 22567, 22568
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEPRODUTOCATEGORIAS", Err, objTipoDeProduto.iTipo)

        Case 22569
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPODEPRODUTOCATEGORIAS", Err, objTipoDeProduto.iTipo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151714)

    End Select

    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Kit_Grava(ByVal objKit As ClassKit) As Long
'grava os registros correspondentes em ProdutoKit e Kit
'ALTERADA POR WAGNER
'CHAMA FUNÇÃO KIT_GRAVA_EMTRANS

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Kit_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 21762
        
    lErro = CF("Kit_Grava_EmTrans", objKit)
    If lErro <> SUCESSO Then gError 129979
        
     'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 21772

    Kit_Grava = SUCESSO

    Exit Function

Erro_Kit_Grava:

    Kit_Grava = gErr

    Select Case gErr

        Case 21762
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 21772
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 129979
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151715)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

'##########################################################
'INCLUÍDO POR WAGNER
Function Kit_Verifica_Permissao() As Long
'Permite alterar um Kit Ativo ou Padrão a usuários com permissão a
'essa função via CF
    
    Kit_Verifica_Permissao = SUCESSO

End Function


Function Kit_Grava_EmTrans(ByVal objKit As ClassKit) As Long
'grava os registros correspondentes em ProdutoKit e Kit
'Tem que ser chamada dentro de transação

Dim lErro As Long
Dim lErro2 As Long
Dim alComando(5) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iNivel As Integer
Dim dtData As Date
Dim sObservacao As String
Dim sCodigo As String
Dim objProdutoKit As ClassProdutoKit
Dim colKits As New Collection
Dim objProduto As New ClassProduto
Dim objProdutoKit1 As ClassProdutoKit
Dim iProdutoIntermediario As Boolean
Dim dPesoFator1 As Double
Dim dPesoFator2 As Double
Dim dPesoFator3 As Double
Dim dPesoFator4 As Double
Dim dPesoFator5 As Double
Dim dPesoFator6 As Double

'***********************************
'Alteracao Daniel em 17/07/2002
Dim iSituacao As Integer
Dim objKitBD As New ClassKit
'***********************************
Dim iVersaoFormPreco As Integer

On Error GoTo Erro_Kit_Grava_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)

        'Abertura comando
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 21761

    Next
        
    'le todos os Kit com produto raiz igual e versões diferentes e coloca na coleção
    lErro = CF("Kit_Le_Produto", objKit, colKits)
    If lErro <> SUCESSO And lErro <> 49949 Then gError 49951
        
    '********************************************
    'Alteracao Daniel em 12/07/2002
    
    'Se existir uma outra versão
    If lErro <> 49949 Then
    
        'Se está gravando uma versao com situacao padrao e existe outra versao padrao já gravada no BD
        If objKit.iSituacao = KIT_SITUACAO_PADRAO Then
        
            'Instancia um novo obj
            Set objKitBD = New ClassKit
            
            objKitBD.sProdutoRaiz = objKit.sProdutoRaiz
        
            'Le a Versao Padrao para o Kit
            lErro = CF("Kit_Le_Padrao", objKitBD)
            If lErro <> SUCESSO And lErro <> 106304 Then gError 106300

            'Se nao encontrou => Erro
            If lErro = 106304 Then gError 106380

            'Torna a antiga versão padrao ativa
            lErro = Kit_Muda_Situacao_Versao(objKitBD.sProdutoRaiz, objKitBD.sVersao, KIT_SITUACAO_ATIVO)
            If lErro <> SUCESSO Then gError 106252
        
        End If
    
        'se está gravando uma versao que vai ser a utilizada para formacao de precos
        If objKit.iVersaoFormPreco = 1 Then
            
            'Instancia um novo obj
            Set objKitBD = New ClassKit
            
            objKitBD.sProdutoRaiz = objKit.sProdutoRaiz
        
            'Le a Versao Padrao para o Kit
            lErro = CF("Kit_Le_FormPreco", objKitBD)
            If lErro <> SUCESSO And lErro <> 106304 Then gError 106300

            'Se nao encontrou => Erro
            If lErro = 106304 Then gError 106380

            'Desmarca a antiga versão para formacao de preco
            lErro = Kit_Muda_FormPreco_Versao(objKitBD.sProdutoRaiz, objKitBD.sVersao, 0)
            If lErro <> SUCESSO Then gError 106252
        
        End If
    
    Else 'Se não existir outra versão no BD...
    
        If objKit.iSituacao = KIT_SITUACAO_INATIVO Then gError 106380 'Inserido por Wagner
    
        'Se não existirem outras versões => Deve ser gravado como padrao.
        objKit.iSituacao = KIT_SITUACAO_PADRAO
        
    End If
    
    '********************************************
    sObservacao = String(STRING_KIT_OBSERVACAO, 0)

    lErro = Comando_ExecutarPos(alComando(2), "SELECT Data, Observacao, Situacao, VersaoFormPreco, PesoFator1, PesoFator2, PesoFator3, PesoFator4, PesoFator5, PesoFator6 FROM Kit WHERE ProdutoRaiz = ? AND Versao = ? ", 0, dtData, sObservacao, iSituacao, iVersaoFormPreco, dPesoFator1, dPesoFator2, dPesoFator3, dPesoFator4, dPesoFator5, dPesoFator6, objKit.sProdutoRaiz, objKit.sVersao)
    If lErro <> AD_SQL_SUCESSO Then gError 21767

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 21768

    '##########################################################
    'INCLUÍDO POR WAGNER
    'se era ou está passando a ser ativo tem que ter permissao
    If objKit.iSituacao <> KIT_SITUACAO_INATIVO Or (lErro <> AD_SQL_SEM_DADOS And iSituacao <> KIT_SITUACAO_INATIVO) Then
        lErro2 = CF("Kit_Verifica_Permissao")
        If lErro2 <> SUCESSO Then gError 129958
    End If
    'FIM
    '##########################################################

    If lErro = AD_SQL_SEM_DADOS Then

        objProduto.sCodigo = objKit.sProdutoRaiz

        lErro = CF("Produto_Lock", objProduto)
        If lErro <> SUCESSO Then gError 55199

        lErro = Comando_Executar(alComando(3), "INSERT INTO Kit (ProdutoRaiz, Versao, Data, Observacao, Situacao, VersaoFormPreco, PesoFator1, PesoFator2, PesoFator3, PesoFator4, PesoFator5, PesoFator6) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objKit.sProdutoRaiz, objKit.sVersao, objKit.dtData, objKit.sObservacao, objKit.iSituacao, objKit.iVersaoFormPreco, objKit.dPesoFator1, objKit.dPesoFator2, objKit.dPesoFator3, objKit.dPesoFator4, objKit.dPesoFator5, objKit.dPesoFator6)
        If lErro <> AD_SQL_SUCESSO Then gError 21769

    Else

        'Faz o lock exclusivo do KIT
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then gError 106381

        'Se esta tentando reativar um kit => Erro.
        'If iSituacao = KIT_SITUACAO_INATIVO And objKit.iSituacao <> KIT_SITUACAO_INATIVO Then gError 106250 'Comentado por Wagner
        
        'Se a situacao da versao no BD for padrao e estiver tentando gravar como outra => Erro.
        If iSituacao = KIT_SITUACAO_PADRAO And objKit.iSituacao <> KIT_SITUACAO_PADRAO Then gError 106251
        
        'se no bd era a versao para formacao de precos e está deixando de ser
        If iVersaoFormPreco = 1 And objKit.iVersaoFormPreco = 0 Then gError 130056
        
        'apaga a composicao anterior
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Nivel FROM ProdutoKit WHERE ProdutoRaiz = ? AND Versao = ?", 0, iNivel, objKit.sProdutoRaiz, objKit.sVersao)
        If lErro <> AD_SQL_SUCESSO Then gError 21763
    
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 21764
    
        Do While lErro <> AD_SQL_SEM_DADOS
    
            lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ProdutoKit", alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 21765
    
            lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 21766
    
        Loop

        If ((sObservacao <> objKit.sObservacao) Or (dtData <> objKit.dtData) Or (iSituacao <> objKit.iSituacao) Or (iVersaoFormPreco <> objKit.iVersaoFormPreco) Or (dPesoFator1 <> objKit.dPesoFator1) Or (dPesoFator2 <> objKit.dPesoFator2) Or (dPesoFator3 <> objKit.dPesoFator3) Or (dPesoFator4 <> objKit.dPesoFator4) Or (dPesoFator5 <> objKit.dPesoFator5) Or (dPesoFator6 <> objKit.dPesoFator6)) Then

            lErro = Comando_ExecutarPos(alComando(3), "UPDATE Kit SET Observacao = ?, Data = ?, Situacao = ?, VersaoFormPreco = ?, PesoFator1 = ?, PesoFator2 = ?, PesoFator3 = ?, PesoFator4 = ?, PesoFator5 = ?, PesoFator6 = ?", alComando(2), objKit.sObservacao, objKit.dtData, objKit.iSituacao, objKit.iVersaoFormPreco, objKit.dPesoFator1, objKit.dPesoFator2, objKit.dPesoFator3, objKit.dPesoFator4, objKit.dPesoFator5, objKit.dPesoFator6)
            If lErro <> AD_SQL_SUCESSO Then gError 21770

        End If

    End If

    'inclui a composicao "atual"
    For Each objProdutoKit In objKit.colComponentes

        objProduto.sCodigo = objProdutoKit.sProduto

        lErro = CF("Produto_Lock", objProduto)
        If lErro <> SUCESSO Then gError 55198

        If objProdutoKit.sProduto <> objProdutoKit.sProdutoRaiz Then

            iProdutoIntermediario = False

            For Each objProdutoKit1 In objKit.colComponentes
        
                If objProdutoKit1.iNivel = objProdutoKit.iNivel + 1 And objProdutoKit1.iSeqPai = objProdutoKit.iSeq Then
                    iProdutoIntermediario = True
                    Exit For
                End If
            
            Next
        
            'se se tratar de um produto que não pode participar de um kit como produto intermediario
            'mas está participando deste kit nesta condição ==> erro
            If objProduto.iKitInt = 0 And iProdutoIntermediario = True Then gError 55200
        
            'se se tratar de um produto que não pode participar de um kit como produto basico
            'mas está participando deste kit nesta condição ==> erro
            If objProduto.iKitBasico = 0 And iProdutoIntermediario = False Then gError 55201
        
        End If
        
        lErro = CF("ProdutoKit_Insere", objKit, objProdutoKit, alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 184296
        
    Next

    'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Kit_Grava_EmTrans = SUCESSO

    Exit Function

Erro_Kit_Grava_EmTrans:

    Kit_Grava_EmTrans = gErr

    Select Case gErr

        Case 21761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 21763, 21764, 21766
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT", gErr)

        Case 21765
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOKIT", gErr)

        Case 21767, 21768
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KIT", gErr)

        Case 21769
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_KIT", gErr)

        Case 21770
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_KIT", gErr)

        Case 21771
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOKIT", gErr)

        Case 21779, 49951, 55198, 55199, 184296
        
        Case 55200
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NAO_KIT_INTERMEDIARIO", gErr, objProduto.sCodigo)

        Case 55201
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NAO_KIT_BASICO", gErr, objProduto.sCodigo)
            
        '************************************
        'Alteracao Daniel em 12/07/2002
        
        Case 106250
            Call Rotina_Erro(vbOKOnly, "ERRO_KIT_REATIVACAO", gErr)
            
        Case 106251
            Call Rotina_Erro(vbOKOnly, "ERRO_KIT_GRAVA_DIFERENTE_PADRAO", gErr)
            
        Case 106252
        
        Case 106380
            Call Rotina_Erro(vbOKOnly, "ERRO_KIT_SEM_PADRAO", gErr, objKit.sProdutoRaiz, objKit.sVersao)
            
        Case 106381
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_KIT", gErr)
        '************************************
        Case 130056
            Call Rotina_Erro(vbOKOnly, "ERRO_KIT_GRAVA_DIFERENTE_FORMPRECO", gErr)
        
        '###########################################
        'Incluido por Wagner
        Case 129958, 129959
        '###########################################
        
         Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151716)

    End Select

    'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'FIM
'##########################################################

Function Kit_Exclui(ByVal objKit As ClassKit) As Long
'recebe um produto raiz e exclui suas composições

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(5) As Long
Dim lTransacao As Long
Dim iSituacao As Integer, iVersaoFormPreco As Integer
Dim iNivel As Integer
Dim objProdutoKit As ClassProdutoKit
Dim lErro1 As Integer

'********************************************
'Alteracao Daniel em 11/07/2002
Dim iVersoesAtivas As Integer
Dim iVersoesInativas As Integer
Dim sProxVersao As String
'********************************************
'Incluido por Jorge Specian - 27/04/2005
'-------------------------------
Dim iAux As Integer
'-------------------------------

On Error GoTo Erro_Kit_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        'Abertura comando
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 21737

    Next

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 21738

    lErro = Comando_ExecutarPos(alComando(3), "SELECT Situacao, VersaoFormPreco FROM Kit WHERE ProdutoRaiz = ? AND Versao = ? ", 0, iSituacao, iVersaoFormPreco, objKit.sProdutoRaiz, objKit.sVersao)
    If lErro <> AD_SQL_SUCESSO Then gError 21739

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 21740

    If lErro = AD_SQL_SEM_DADOS Then gError 21741

    lErro = Comando_ExecutarPos(alComando(1), "SELECT Nivel FROM ProdutoKit WHERE ProdutoRaiz = ? AND Versao = ? ", 0, iNivel, objKit.sProdutoRaiz, objKit.sVersao)
    If lErro <> AD_SQL_SUCESSO Then gError 21743

    lErro1 = Comando_BuscarPrimeiro(alComando(1))
    If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 21744

    If lErro1 = AD_SQL_SEM_DADOS Then gError 21745


    '##########################################################
    'INCLUÍDO POR WAGNER
    'se era ou está passando a ser ativo tem que ter permissao
    If iSituacao <> KIT_SITUACAO_INATIVO Then
        lErro = CF("Kit_Verifica_Permissao")
        If lErro <> SUCESSO Then gError 131458
    End If
    'FIM
    '##########################################################


    '########################################
    'Inserido por Wagner 23/11/04
    'Verifica se um Kit utiliza o Kit a ser excluído como componente
    lErro = Kit_Verifica_Kit(objKit)
    If lErro <> SUCESSO Then gError 131309
    '########################################
    
    '*********************************************
    'Alteracao Daniel em 11/07/2002
    'Verifica se já existe algum movimento para esse kit na Tabela de ItensOrdemProducao
    lErro = CF("Kit_Verifica_Movimentacao", objKit.sProdutoRaiz, objKit.sVersao)
    If lErro <> SUCESSO Then gError 106210
    
    '---------------------------------------
    'Incluido por Jorge Specian - 27/04/2005
    'Verifica se há Roteiros de Fabricação para este Kit e impede sua exclusão
    
    lErro = Comando_ExecutarPos(alComando(5), "SELECT 1 FROM RoteirosDeFabricacao WHERE ProdutoRaiz = ? AND Versao = ? ", 0, iAux, objKit.sProdutoRaiz, objKit.sVersao)
    If lErro <> AD_SQL_SUCESSO Then gError 134965

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 134966

    If lErro = AD_SQL_SUCESSO Then gError 134967
        
    '---------------------------------------
    If iSituacao = KIT_SITUACAO_PADRAO Or iVersaoFormPreco = 1 Then

        'Verifica a existencia de OUTRAS versoes do kit
        lErro = CF("Kit_Verifica_Outras_Versoes", objKit.sProdutoRaiz, objKit.sVersao, iVersoesAtivas, iVersoesInativas, sProxVersao)
        If lErro <> SUCESSO And lErro <> 106217 Then gError 106211
        
        If lErro = SUCESSO Then
        
            'Se existem versoes inativas e nao existem versoes ativas => Erro
            If iVersoesInativas > 0 And iVersoesAtivas = 0 Then gError 106219
            
            'Se a versao Padrao está sendo excluida e só existe uma versao Ativa => A versão ativa agora é padrao
            If iVersoesAtivas = 1 Then
            
                If iSituacao = KIT_SITUACAO_PADRAO Then
                
                    'Torna a Versao Ativa (que agora será a unica versão) Padrão
                    lErro = Kit_Muda_Situacao_Versao(objKit.sProdutoRaiz, sProxVersao, KIT_SITUACAO_PADRAO)
                    If lErro <> SUCESSO Then gError 106212
            
                End If
                
                If iVersaoFormPreco = 1 Then
                
                    'marca a versão ativa para formacao de preco
                    lErro = Kit_Muda_FormPreco_Versao(objKit.sProdutoRaiz, sProxVersao, 1)
                    If lErro <> SUCESSO Then gError 130057
                    
                End If
            
            Else 'Existem mais de uma versao ativa ou só existem versoes inativas
                
                gError 106213
                
            End If
        
        End If
        
    End If
    '*********************************************
    
    Do While lErro1 <> AD_SQL_SEM_DADOS

        lErro1 = Comando_ExecutarPos(alComando(2), "DELETE FROM ProdutoKit", alComando(1))
        If lErro1 <> AD_SQL_SUCESSO Then gError 21746

        lErro1 = Comando_BuscarProximo(alComando(1))
        If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 21747

    Loop

    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM Kit", alComando(3))
    If lErro <> AD_SQL_SUCESSO Then gError 21742

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 21748

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Kit_Exclui = SUCESSO

    Exit Function

Erro_Kit_Exclui:

    Kit_Exclui = gErr

    Select Case gErr

        Case 21737
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 21738
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 21739, 21740
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KIT", gErr)

        Case 21741, 21745, 130057

        Case 21742
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_KIT", gErr)

        Case 21743, 21744, 21747
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT", gErr)

        Case 21742
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOKIT", gErr)

        Case 21748
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        '***********************************************
        'Alteracao Daniel em 11/07/2002

        Case 106210, 106211, 106212
        
        Case 106219
            Call Rotina_Erro(vbOKOnly, "ERRO_KIT_OUTRAS_VERSOES_INEXISTENTES", gErr, objKit.sProdutoRaiz)
            'ERRO_KIT_OUTRAS_VERSOES_INEXISTENTES = "Não pode excluir o kit padrão, pois não existem outras versões para o Produto %s."
            
        Case 106213
            Call Rotina_Erro(vbOKOnly, "ERRO_KIT_OUTRAS_VERSOES_EXISTENTES", gErr, objKit.sProdutoRaiz)
            'ERRO_KIT_OUTRAS_VERSOES_EXISTENTES = "Erro ao tentar excluir o kit %s. Ou só existe versão inativa ou existe mais de uma versão ativa."
            
        '***********************************************
        Case 131309, 131458

        '---------------------------------------
        'Incluido por Jorge Specian - 27/04/2005
        
        Case 134965, 134966
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTEIROSDEFABRICACAO", gErr)
        
        Case 134967
            Call Rotina_Erro(vbOKOnly, "ERRO_ROTEIRODEFABRICACAO_VINCULADO", gErr, Trim(objKit.sProdutoRaiz), Trim(objKit.sVersao))
        
        '---------------------------------------
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151717)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentoEstoque_Alterar(ByVal objItemMovEst As ClassItemMovEstoque) As Long
'altera a data/hora do movimento de estoque passado como parametro
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim alComando(1 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long, dtDataAnt As Date

On Error GoTo Erro_MovimentoEstoque_Alterar

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 89679
    Next

    'le o codigo do movimento de estoque passado como parametro
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Data, NumIntDoc FROM MovimentoEstoque WHERE NumIntDoc = ?", 0, dtDataAnt, lNumIntDoc, objItemMovEst.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 89680

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89681

    'se o movimento não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then gError 89682

    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentoEstoque SET Data = ?, Hora = ?, Observacao=?, Requisitante = ?", alComando(1), objItemMovEst.dtData, CDbl(objItemMovEst.dtHora), objItemMovEst.sObservacao, objItemMovEst.lRequisitante)
    If lErro <> AD_SQL_SUCESSO Then gError 89683
        
    lErro = CF("Movimento_Verifica_Bloqueio_Data", dtDataAnt, 1, gobjMAT.iMovEstVerificaBloqData, gobjMAT.dtMovEstBloqDataLimite)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = CF("Movimento_Verifica_Bloqueio_Data", objItemMovEst.dtData, 1, gobjMAT.iMovEstVerificaBloqData, gobjMAT.dtMovEstBloqDataLimite)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentoEstoque_Alterar = SUCESSO
    
    Exit Function

Erro_MovimentoEstoque_Alterar:

    MovimentoEstoque_Alterar = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 89679
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89680, 89681
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

        Case 89682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO1", gErr, objItemMovEst.lNumIntDoc)

        Case 89683
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOESTOQUE", gErr, objItemMovEst.iFilialEmpresa, objItemMovEst.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151718)

    End Select

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentoEstoque_Grava_Estorno(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objItemMovEst As ClassItemMovEstoque) As Long
'grava no movimento que será estornado o numero de documento de estorno
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao
    
Dim lErro As Long

On Error GoTo Erro_MovimentoEstoque_Grava_Estorno

    'atualiza o numero de documento de estorno no documento que está sendo estornado
    lErro = Comando_ExecutarPos(lComando1, "UPDATE MovimentoEstoque SET NumIntDocEst=?", lComando2, objItemMovEst.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 20431

    MovimentoEstoque_Grava_Estorno = SUCESSO
    
    Exit Function

Erro_MovimentoEstoque_Grava_Estorno:

    MovimentoEstoque_Grava_Estorno = Err

    Select Case Err

        Case 20431
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOESTOQUE", Err, objItemMovEst.iFilialEmpresa, objItemMovEst.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151719)

    End Select

    Exit Function

End Function

Function MovimentoEstoque_Inserir(ByVal lComando1 As Long, ByVal objItemMovEst As ClassItemMovEstoque) As Long
'insere um movimento de estoque na tabela MovimentoEstoque
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long

On Error GoTo Erro_MovimentoEstoque_Inserir

    '#######################################################
    'Alterado por Wagner 22/12/04 - Inserido campo Observacao
    'Insere um registro na tabela de MovimentoEstoque
    lErro = Comando_Executar(lComando1, "INSERT INTO MovimentoEstoque (FilialEmpresa, Codigo, NumIntDoc, Custo, Apropriacao, Produto, SiglaUM, Quantidade, Almoxarifado, TipoMov, NumIntDocOrigem, TipoNumIntDocOrigem, Data, Ccl, NumIntDocEst, Cliente, Fornecedor, CodigoOP, DocOrigem, ContaContabilEst, ContaContabilAplic, HorasMaquina, DataInicioProducao, DataRegistro, Hora, NumIntDocGrade, Observacao, Requisitante, QuantInsumos, ItemNF, Item, FilialCli, FilialForn) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objItemMovEst.iFilialEmpresa, objItemMovEst.lCodigo, objItemMovEst.lNumIntDoc, objItemMovEst.dCusto, objItemMovEst.iApropriacao, objItemMovEst.sProduto, objItemMovEst.sSiglaUM, objItemMovEst.dQuantidade, objItemMovEst.iAlmoxarifado, objItemMovEst.iTipoMov, objItemMovEst.lNumIntDocOrigem, objItemMovEst.iTipoNumIntDocOrigem, objItemMovEst.dtData, objItemMovEst.sCcl, objItemMovEst.lNumIntDocEst, objItemMovEst.lCliente, objItemMovEst.lFornecedor, objItemMovEst.sOPCodigo, objItemMovEst.sDocOrigem, objItemMovEst.sContaContabilEst, objItemMovEst.sContaContabilAplic, _
        objItemMovEst.lHorasMaquina, objItemMovEst.dtDataInicioProducao, objItemMovEst.dtDataRegistro, CDbl(objItemMovEst.dtHora), objItemMovEst.lNumIntDocGrade, objItemMovEst.sObservacao, objItemMovEst.lRequisitante, objItemMovEst.dQuantInsumos, objItemMovEst.iItemNF, objItemMovEst.iItem, objItemMovEst.iFilialCli, objItemMovEst.iFilialForn)
    If lErro <> AD_SQL_SUCESSO Then gError 20405
    '#######################################################
    
    lErro = CF("Movimento_Verifica_Bloqueio_Data", objItemMovEst.dtData, 1, gobjMAT.iMovEstVerificaBloqData, gobjMAT.dtMovEstBloqDataLimite)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    MovimentoEstoque_Inserir = SUCESSO

    Exit Function

Erro_MovimentoEstoque_Inserir:

    MovimentoEstoque_Inserir = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 20405
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOESTOQUE", Err, objItemMovEst.iFilialEmpresa, objItemMovEst.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151720)

    End Select

    Exit Function

End Function

Function EstoqueProduto_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal objTipoMovEstoque As ClassTipoMovEst, ByVal objItemMovEst As ClassItemMovEstoque, ByVal lComando As Long, ByVal iOperacao As Integer, dQuantConsig3 As Double, dQuantBenef3 As Double) As Long
'Atualiza a tabela de EstoqueProduto utilizando os valores passados atraves de objEstoqueProduto.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim tEstProd As typeEstoqueProduto
Dim dCustoMedio As Double
Dim tEstProd1 As typeEstoqueProduto
Dim dQuantResto As Double

On Error GoTo Erro_EstoqueProduto_Atualiza

    dQuantBenef3 = 0
    dQuantConsig3 = 0

    'Le a tabela de estoqueproduto para o produto/almoxarifado em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT QuantDispNossa, QuantRecIndl, QuantIndOutras, QuantDefeituosa, QuantConsig3, QuantConsig, QuantDemo3, QuantDemo, QuantConserto3, QuantConserto, QuantOutras3, QuantOutras, QuantReservada, QuantReservadaConsig, QuantBenef, QuantBenef3, QuantOP, ValorConsig3, ValorConsig, ValorDemo3, ValorDemo, ValorConserto3, ValorConserto, ValorOutras3, ValorOutras, ValorBenef, ValorBenef3 FROM EstoqueProduto WHERE Produto = ? AND Almoxarifado = ?", 0, tEstProd.dQuantDispNossa, tEstProd.dQuantRecIndl, tEstProd.dQuantInd, tEstProd.dQuantDefeituosa, tEstProd.dQuantConsig3, tEstProd.dQuantConsig, tEstProd.dQuantDemo3, tEstProd.dQuantDemo, tEstProd.dQuantConserto3, tEstProd.dQuantConserto, tEstProd.dQuantOutras3, tEstProd.dQuantOutras, tEstProd.dQuantReservada, tEstProd.dQuantReservadaConsig, tEstProd.dQuantBenef, tEstProd.dQuantBenef3, tEstProd.dQuantOP, _
    tEstProd.dValorConsig3, tEstProd.dValorConsig, tEstProd.dValorDemo3, tEstProd.dValorDemo, tEstProd.dValorConserto3, tEstProd.dValorConserto, tEstProd.dValorOutras3, tEstProd.dValorOutras, tEstProd.dValorBenef, tEstProd.dValorBenef3, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 20390

    'leitura do registro referente ao estoque/almoxarifado em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 20391
    
    'lock do estoque/almoxarifado
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 20392
    
    'no momento de reprocessamento desfazer , a critica de quantidade é retirada
    'no reprocessamento refaz a critica permanece mas não impede o processamento, apenas grava as excecoes no log
    'na apuração de custo de produção o teste não é feito pois as quantidades não são atualizadas em estoqueproduto nesta operação, só os valores.
    If iOperacao <> REPROCESSAMENTO_DESFAZ And iOperacao <> APURACAO_CUSTO_PRODUCAO Then
    
        If gobjMAT.iAceitaEstoqueNegativo = DESMARCADO Then
        
            If tEstProd.dQuantConserto + objEstoqueProduto.dQuantConserto < -QTDE_ESTOQUE_DELTA Then gError 36001
            
            If tEstProd.dQuantConserto3 + objEstoqueProduto.dQuantConserto3 < -QTDE_ESTOQUE_DELTA Then gError 36002
            
            If tEstProd.dQuantConsig + objEstoqueProduto.dQuantConsig < -QTDE_ESTOQUE_DELTA Then gError 36003
            
            If tEstProd.dQuantDefeituosa + objEstoqueProduto.dQuantDefeituosa < -QTDE_ESTOQUE_DELTA Then gError 36005
            
            If tEstProd.dQuantDemo + objEstoqueProduto.dQuantDemo < -QTDE_ESTOQUE_DELTA Then gError 36006
            
            If tEstProd.dQuantDemo3 + objEstoqueProduto.dQuantDemo3 < -QTDE_ESTOQUE_DELTA Then gError 36007
            
            If objTipoMovEstoque.iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO1 And iOperacao <> REPROCESSAMENTO_REFAZ And gobjMAT.iAceitaEstoqueNegativo = DESMARCADO Then
            
                'se a quantidade disponivel + quantidade em consig de 3 + quantidade em benef de 3 for menor do que a quantidade solicitada ==> erro
                If tEstProd.dQuantDispNossa + tEstProd.dQuantConsig3 + tEstProd.dQuantBenef3 + objEstoqueProduto.dQuantDispNossa < -QTDE_ESTOQUE_DELTA Then gError 36479
    
                'se a quantidade em estoque não for disponivel
                If tEstProd.dQuantDispNossa + objEstoqueProduto.dQuantDispNossa < -QTDE_ESTOQUE_DELTA Then
                
                    'guarda o que ainda falta a ser alocado depois de descontar a quantidade que estava disponivel
                    dQuantResto = -(tEstProd.dQuantDispNossa + objEstoqueProduto.dQuantDispNossa)
                
                    'se a quantidade em beneficiamento de terceiros em estoque for suficiente para atender
                    If tEstProd.dQuantBenef3 - dQuantResto > 0 Then
                        objEstoqueProduto.dQuantBenef3 = -dQuantResto
                        dQuantBenef3 = dQuantResto
                        objEstoqueProduto.dQuantDispNossa = 0
                        
                        'calcula o custo médio de material de terceiros em consignação pois o proximo movimento a ser processado é a transferencia de material consignado de terceiros para disponível
                        lErro = CF("SldMesEst1_Le_CustoMedioBenef3", lComando, objItemMovEst.iFilialEmpresa, Year(objItemMovEst.dtData), objItemMovEst.sProduto, Month(objItemMovEst.dtData), dCustoMedio)
                        If lErro <> SUCESSO Then gError 92977
                
                        objItemMovEst.dCusto = dCustoMedio * dQuantResto
                        objEstoqueProduto.dValorBenef3 = -objItemMovEst.dCusto
                        
                    Else
                        'se houver quantidade beneficiada de terceiros ==> aloca esta quantidade
                        If tEstProd.dQuantBenef3 > 0 Then
                        
                            objEstoqueProduto.dQuantBenef3 = -tEstProd.dQuantBenef3
                            dQuantBenef3 = tEstProd.dQuantBenef3
                            objEstoqueProduto.dQuantDispNossa = 0
                            
                            dQuantConsig3 = dQuantResto - dQuantBenef3
                            
                            'calcula o custo médio de material de terceiros em consignação pois o proximo movimento a ser processado é a transferencia de material consignado de terceiros para disponível
                            lErro = CF("SldMesEst1_Le_CustoMedioBenef3", lComando, objItemMovEst.iFilialEmpresa, Year(objItemMovEst.dtData), objItemMovEst.sProduto, Month(objItemMovEst.dtData), dCustoMedio)
                            If lErro <> SUCESSO Then gError 92976
                    
                            objItemMovEst.dCusto = dCustoMedio * tEstProd.dQuantBenef3
                            objEstoqueProduto.dValorBenef3 = -objItemMovEst.dCusto
                            
                        Else
                            
                            objEstoqueProduto.dQuantConsig3 = -dQuantResto
                            objEstoqueProduto.dQuantDispNossa = 0
                            dQuantConsig3 = dQuantResto
                                    
                            'calcula o custo médio de material de terceiros em consignação pois o proximo movimento a ser processado é a transferencia de material consignado de terceiros para disponível
                            lErro = CF("SldMesEst1_Le_CustoMedioConsig3", lComando, objItemMovEst.iFilialEmpresa, Year(objItemMovEst.dtData), objItemMovEst.sProduto, Month(objItemMovEst.dtData), dCustoMedio)
                            If lErro <> SUCESSO Then gError 60952
                    
                            objItemMovEst.dCusto = dCustoMedio * dQuantResto
                            objEstoqueProduto.dValorConsig3 = -objItemMovEst.dCusto
                            
                        End If
                    End If
                    
                End If
                
            Else
                                                                 
                If objItemMovEst.iTipoMov <> MOV_EST_DECR_INVENT_DISPONIVEL_NOSSA_FX_ZERA Then
                    If iOperacao <> REPROCESSAMENTO_REFAZ And iOperacao <> REPROCESSAMENTO_DESFAZ Then
                        If tEstProd.dQuantDispNossa + objEstoqueProduto.dQuantDispNossa < -QTDE_ESTOQUE_DELTA Then gError 36008
                    Else
                        'Se está reprocessando não pode considerar a reserva porque potencialmente ela foi feita depois da movimentação
                        'que está sendo testada
                        If tEstProd.dQuantDispNossa + objEstoqueProduto.dQuantDispNossa + tEstProd.dQuantReservada < -QTDE_ESTOQUE_DELTA Then gError 36008
                    End If
                End If
            End If
            
            If tEstProd.dQuantConsig3 + objEstoqueProduto.dQuantConsig3 < -QTDE_ESTOQUE_DELTA Then gError 36004
            
            If tEstProd.dQuantBenef3 + objEstoqueProduto.dQuantBenef3 < -QTDE_ESTOQUE_DELTA Then gError 44976
                
            If tEstProd.dQuantInd + objEstoqueProduto.dQuantInd < -QTDE_ESTOQUE_DELTA Then gError 36009
            
            If tEstProd.dQuantOutras + objEstoqueProduto.dQuantOutras < -QTDE_ESTOQUE_DELTA Then gError 36010
            
            If tEstProd.dQuantOutras3 + objEstoqueProduto.dQuantOutras3 < -QTDE_ESTOQUE_DELTA Then gError 36011
            
            If tEstProd.dQuantBenef + objEstoqueProduto.dQuantBenef < -QTDE_ESTOQUE_DELTA Then gError 44975
            
            If tEstProd.dQuantOP + objEstoqueProduto.dQuantOP < -QTDE_ESTOQUE_DELTA Then gError 55257
    
        End If
    
        lErro = EstoqueProduto_Atualiza1(objEstoqueProduto, objTipoMovEstoque, objItemMovEst, tEstProd)
        If lErro <> SUCESSO Then gError 36480
    
    End If
    
    lErro = EstoqueProduto_Zera_Delta(objEstoqueProduto, tEstProd, tEstProd1)
    If lErro <> SUCESSO Then gError 83784
    
    If iOperacao = APURACAO_CUSTO_PRODUCAO Then
    
        'Atualiza a tabela de estoqueproduto para o produto/almoxarifado em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE EstoqueProduto SET ValorConsig3 = ValorConsig3 + ?, ValorConsig = ValorConsig + ?, ValorDemo3 = ValorDemo3 + ?, ValorDemo = ValorDemo + ?, ValorConserto3 = ValorConserto3 + ?, ValorConserto = ValorConserto + ?, ValorOutras3 = ValorOutras3 + ?, ValorOutras = ValorOutras + ?, ValorBenef = ValorBenef + ?, ValorBenef3 = ValorBenef3 + ?, DataUltAtualizacao = ?, Exportado = ? ", lComando1, _
        IIf(objEstoqueProduto.dValorConsig3 <> 0, objEstoqueProduto.dValorConsig3 - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorConsig, objEstoqueProduto.dValorConsig - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorDemo3 <> 0, objEstoqueProduto.dValorDemo3 - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorDemo <> 0, objEstoqueProduto.dValorDemo - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorConserto3 <> 0, objEstoqueProduto.dValorConserto3 - objItemMovEst.dCustoAnt, 0), _
        IIf(objEstoqueProduto.dValorConserto <> 0, objEstoqueProduto.dValorConserto - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorOutras3 <> 0, objEstoqueProduto.dValorOutras3 - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorOutras <> 0, objEstoqueProduto.dValorOutras - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorBenef <> 0, objEstoqueProduto.dValorBenef - objItemMovEst.dCustoAnt, 0), IIf(objEstoqueProduto.dValorBenef3 <> 0, objEstoqueProduto.dValorBenef3 - objItemMovEst.dCustoAnt, 0), Date, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 20393
    
    
    Else
    
        'Atualiza a tabela de estoqueproduto para o produto/almoxarifado em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE EstoqueProduto SET QuantDispNossa = ?, QuantRecIndl = ?, QuantIndOutras = ?, QuantDefeituosa = ?, QuantConsig3 = ?, QuantConsig = ?, QuantDemo3 = ?, QuantDemo = ?, QuantConserto3 = ?, QuantConserto = ?, QuantOutras3 = ?, QuantOutras = ?, QuantReservada = ?, QuantReservadaConsig = ?, QuantBenef = ?, QuantBenef3 = ?, QuantOP = ?, " & _
        "ValorConsig3 = ValorConsig3 + ?, ValorConsig = ValorConsig + ?, ValorDemo3 = ValorDemo3 + ?, ValorDemo = ValorDemo + ?, ValorConserto3 = ValorConserto3 + ?, ValorConserto = ValorConserto + ?, ValorOutras3 = ValorOutras3 + ?, ValorOutras = ValorOutras + ?, ValorBenef = ValorBenef + ?, ValorBenef3 = ValorBenef3 + ?, DataUltAtualizacao = ?, Exportado = ? ", lComando1, _
        tEstProd1.dQuantDispNossa, tEstProd1.dQuantRecIndl, tEstProd1.dQuantInd, tEstProd1.dQuantDefeituosa, tEstProd1.dQuantConsig3, tEstProd1.dQuantConsig, tEstProd1.dQuantDemo3, tEstProd1.dQuantDemo, tEstProd1.dQuantConserto3, tEstProd1.dQuantConserto, tEstProd1.dQuantOutras3, tEstProd1.dQuantOutras, tEstProd1.dQuantReservada, tEstProd1.dQuantReservadaConsig, tEstProd1.dQuantBenef, tEstProd1.dQuantBenef3, tEstProd1.dQuantOP, _
        objEstoqueProduto.dValorConsig3, objEstoqueProduto.dValorConsig, objEstoqueProduto.dValorDemo3, objEstoqueProduto.dValorDemo, objEstoqueProduto.dValorConserto3, objEstoqueProduto.dValorConserto, objEstoqueProduto.dValorOutras3, objEstoqueProduto.dValorOutras, objEstoqueProduto.dValorBenef, objEstoqueProduto.dValorBenef3, Date, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 20393

    End If

    EstoqueProduto_Atualiza = SUCESSO

    Exit Function

Erro_EstoqueProduto_Atualiza:

    EstoqueProduto_Atualiza = gErr

    Select Case gErr

        Case 20390, 20391
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 20392
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 20393
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 36001
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSERTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantConserto)
            
        Case 36002
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSERTO3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantConserto3)
            
        Case 36003
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSIG", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantConsig)
            
        Case 36004
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSIG3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantConsig3)
            
        Case 36005
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DEFEITUOSO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantDefeituosa)
            
        Case 36006
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DEMO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantDemo)
            
        Case 36007
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DEMO3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantDemo3)
            
        Case 36008
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DISPONIVEL", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantDispNossa)
            
        Case 36009
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_INDISPONIVEL", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantInd)
            
        Case 36010
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_OUTRAS", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantOutras)
            
        Case 36011
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_OUTRAS3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantOutras3)
            
        Case 36479
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DISP_CONSIG3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantDispNossa)
            
        Case 36480, 60952, 92976, 92977
        
        Case 44975
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_BENEF", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantBenef)
            
        Case 44976
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_BENEF3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantBenef3)
        
        Case 55257
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_OP", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantOP)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151721)

    End Select

    'se estiver realizando o reprocessamento e o erro for de saldo ==> registrar o erro no log e continuar o reprocessamento
    If iOperacao = REPROCESSAMENTO_REFAZ Then

        If (gl_UltimoErro >= 36001 And gl_UltimoErro <= 36011) Or gl_UltimoErro = 36479 Or gl_UltimoErro = 44975 Or gl_UltimoErro = 44976 Or gl_UltimoErro = 55257 Then
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOESTOQUE_REPROCESSAMENTO", gl_UltimoErro, objItemMovEst.iFilialEmpresa, objItemMovEst.lCodigo, objItemMovEst.lNumIntDoc, objItemMovEst.sProduto, objItemMovEst.sSiglaUM, objItemMovEst.dQuantidade, objItemMovEst.iAlmoxarifado, objItemMovEst.iTipoMov, objItemMovEst.dtData)
            Resume Next
        End If
        
    End If

    If objTipoMovEstoque.iInventario = TIPOMOV_EST_INVENTARIO And Sistema_ObterTipoCliente(GL_lSistema) = AD_SIST_BATCH Then
        If (gl_UltimoErro >= 36001 And gl_UltimoErro <= 36011) Or gl_UltimoErro = 36479 Or gl_UltimoErro = 44975 Or gl_UltimoErro = 44976 Or gl_UltimoErro = 55257 Then
            Resume Next
        End If
    End If

    Exit Function

End Function

Private Function EstoqueProduto_Zera_Delta(ByVal objEstoqueProduto As ClassEstoqueProduto, tEstProd As typeEstoqueProduto, tEstProd1 As typeEstoqueProduto) As Long

Dim lErro As Long

On Error GoTo Erro_EstoqueProduto_Zera_Delta

    If Abs(tEstProd.dQuantConserto + objEstoqueProduto.dQuantConserto) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantConserto = 0
    Else
        tEstProd1.dQuantConserto = tEstProd.dQuantConserto + objEstoqueProduto.dQuantConserto
    End If
    
    If Abs(tEstProd.dQuantConserto3 + objEstoqueProduto.dQuantConserto3) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantConserto3 = 0
    Else
        tEstProd1.dQuantConserto3 = tEstProd.dQuantConserto3 + objEstoqueProduto.dQuantConserto3
    End If
    
    If Abs(tEstProd.dQuantConsig + objEstoqueProduto.dQuantConsig) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantConsig = 0
    Else
        tEstProd1.dQuantConsig = tEstProd.dQuantConsig + objEstoqueProduto.dQuantConsig
    End If
    
    If Abs(tEstProd.dQuantConsig3 + objEstoqueProduto.dQuantConsig3) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantConsig3 = 0
    Else
        tEstProd1.dQuantConsig3 = tEstProd.dQuantConsig3 + objEstoqueProduto.dQuantConsig3
    End If
    
    If Abs(tEstProd.dQuantDefeituosa + objEstoqueProduto.dQuantDefeituosa) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantDefeituosa = 0
    Else
        tEstProd1.dQuantDefeituosa = tEstProd.dQuantDefeituosa + objEstoqueProduto.dQuantDefeituosa
    End If
    
    If Abs(tEstProd.dQuantDemo + objEstoqueProduto.dQuantDemo) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantDemo = 0
    Else
        tEstProd1.dQuantDemo = tEstProd.dQuantDemo + objEstoqueProduto.dQuantDemo
    End If
    
    If Abs(tEstProd.dQuantDemo3 + objEstoqueProduto.dQuantDemo3) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantDemo3 = 0
    Else
        tEstProd1.dQuantDemo3 = tEstProd.dQuantDemo3 + objEstoqueProduto.dQuantDemo3
    End If
    
    If Abs(tEstProd.dQuantDispNossa + objEstoqueProduto.dQuantDispNossa) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantDispNossa = 0
    Else
        tEstProd1.dQuantDispNossa = tEstProd.dQuantDispNossa + objEstoqueProduto.dQuantDispNossa
    End If
        
    If Abs(tEstProd.dQuantInd + objEstoqueProduto.dQuantInd) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantInd = 0
    Else
        tEstProd1.dQuantInd = tEstProd.dQuantInd + objEstoqueProduto.dQuantInd
    End If

    If Abs(tEstProd.dQuantOutras + objEstoqueProduto.dQuantOutras) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantOutras = 0
    Else
        tEstProd1.dQuantOutras = tEstProd.dQuantOutras + objEstoqueProduto.dQuantOutras
    End If
    
    If Abs(tEstProd.dQuantOutras3 + objEstoqueProduto.dQuantOutras3) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantOutras3 = 0
    Else
        tEstProd1.dQuantOutras3 = tEstProd.dQuantOutras3 + objEstoqueProduto.dQuantOutras3
    End If
    
    If Abs(tEstProd.dQuantBenef + objEstoqueProduto.dQuantBenef) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantBenef = 0
    Else
        tEstProd1.dQuantBenef = tEstProd.dQuantBenef + objEstoqueProduto.dQuantBenef
    End If
    
    If Abs(tEstProd.dQuantBenef3 + objEstoqueProduto.dQuantBenef3) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantBenef3 = 0
    Else
        tEstProd1.dQuantBenef3 = tEstProd.dQuantBenef3 + objEstoqueProduto.dQuantBenef3
    End If
        
    If Abs(tEstProd.dQuantOP + objEstoqueProduto.dQuantOP) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantOP = 0
    Else
        tEstProd1.dQuantOP = tEstProd.dQuantOP + objEstoqueProduto.dQuantOP
    End If

    If Abs(tEstProd.dQuantReservada + objEstoqueProduto.dQuantReservada) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantReservada = 0
    Else
        tEstProd1.dQuantReservada = tEstProd.dQuantReservada + objEstoqueProduto.dQuantReservada
    End If

    If Abs(tEstProd.dQuantReservadaConsig + objEstoqueProduto.dQuantReservadaConsig) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantReservadaConsig = 0
    Else
        tEstProd1.dQuantReservadaConsig = tEstProd.dQuantReservadaConsig + objEstoqueProduto.dQuantReservadaConsig
    End If

    If Abs(tEstProd.dQuantRecIndl + objEstoqueProduto.dQuantRecIndl) < QTDE_ESTOQUE_DELTA Then
        tEstProd1.dQuantRecIndl = 0
    Else
        tEstProd1.dQuantRecIndl = tEstProd.dQuantRecIndl + objEstoqueProduto.dQuantRecIndl
    End If

    EstoqueProduto_Zera_Delta = SUCESSO
    
    Exit Function
    
Erro_EstoqueProduto_Zera_Delta:

    EstoqueProduto_Zera_Delta = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151722)

    End Select

    Exit Function

End Function

Private Function EstoqueProduto_Atualiza1(ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal objTipoMovEstoque As ClassTipoMovEst, ByVal objItemMovEst As ClassItemMovEstoque, tEstProd As typeEstoqueProduto) As Long
'Continuacao de EstoqueProduto_Atualiza
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long

On Error GoTo Erro_EstoqueProduto_Atualiza1

    'reserva primeiro do escaninho de produtos nosso disponiveis e depois de consignação
    If objTipoMovEstoque.iAtualizaReserva = TIPOMOV_EST_ADICIONARESERVANOSSACONFIG Then
    
        'se a quantidade a reservar ultrapassa a soma do disponivel + em consignacao ==> erro
        If tEstProd.dQuantDispNossa + tEstProd.dQuantConsig3 - objItemMovEst.dQuantidadeEst < -QTDE_ESTOQUE_DELTA2 Then
    
            'se nao aceita estoque negativo
            If gobjMAT.iAceitaEstoqueNegativo = DESMARCADO Then
                
                Error 36481
            
            Else
            
                objEstoqueProduto.dQuantReservada = objItemMovEst.dQuantidadeEst - tEstProd.dQuantConsig3
                objEstoqueProduto.dQuantDispNossa = -objEstoqueProduto.dQuantReservada
                objEstoqueProduto.dQuantConsig3 = -tEstProd.dQuantConsig3
                objEstoqueProduto.dQuantReservadaConsig = tEstProd.dQuantConsig3
        
            End If
            
        'se a quantidade a reservar ultrapassa a quantidade disponivel ==> reserva toda a quantidade disponivel e o restante da consignacao
        ElseIf tEstProd.dQuantDispNossa - objItemMovEst.dQuantidadeEst < -QTDE_ESTOQUE_DELTA2 Then
        
            objEstoqueProduto.dQuantDispNossa = -tEstProd.dQuantDispNossa
            objEstoqueProduto.dQuantReservada = tEstProd.dQuantDispNossa
            objEstoqueProduto.dQuantConsig3 = -(objItemMovEst.dQuantidadeEst - tEstProd.dQuantDispNossa)
            objEstoqueProduto.dQuantReservadaConsig = -objEstoqueProduto.dQuantConsig3
        Else
        
            objEstoqueProduto.dQuantDispNossa = -objItemMovEst.dQuantidadeEst
            objEstoqueProduto.dQuantReservada = objItemMovEst.dQuantidadeEst
            
        End If
        
    End If

    'baixa a reserva nossa e depois a reserva em consignação
    If objTipoMovEstoque.iAtualizaReserva = TIPOMOV_EST_SUBTRAIRESERVANOSSACONFIG Then
    
        'se a quantidade a baixar da reservar ultrapassa a soma do reservado disponivel + reservado em consignacao ==> erro
        If tEstProd.dQuantReservada + tEstProd.dQuantReservadaConsig - objItemMovEst.dQuantidadeEst < -QTDE_ESTOQUE_DELTA2 Then Error 36482
        
        'se a quantidade a baixar de reserva ultrapassar a quantidade reservada disponivel ==> baixa toda a quantidade reserva disponivel e o restante da reserva de consignacao
        If tEstProd.dQuantReservada - objItemMovEst.dQuantidadeEst < -QTDE_ESTOQUE_DELTA2 Then
        
            objEstoqueProduto.dQuantReservada = -tEstProd.dQuantReservada
            objEstoqueProduto.dQuantReservadaConsig = -(objItemMovEst.dQuantidadeEst - tEstProd.dQuantReservada)
            objEstoqueProduto.dQuantDispNossa = -objEstoqueProduto.dQuantReservada
            objEstoqueProduto.dQuantConsig3 = -objEstoqueProduto.dQuantReservadaConsig
            
        Else
        
            objEstoqueProduto.dQuantReservada = -objItemMovEst.dQuantidadeEst
            objEstoqueProduto.dQuantDispNossa = -objEstoqueProduto.dQuantReservada
            
        End If
        
    End If

    'baixa a reserva consig e depois a reserva nossa disponivel
    If objTipoMovEstoque.iAtualizaReserva = TIPOMOV_EST_SUBTRAIRESERVACONFIGNOSSA Then
    
        'se a quantidade a baixar da reserva ultrapassa a soma do reservado disponivel + reservado em consignacao ==> erro
        If tEstProd.dQuantReservada + tEstProd.dQuantReservadaConsig - objItemMovEst.dQuantidadeEst < -QTDE_ESTOQUE_DELTA2 Then Error 36483
        
        'se a quantidade a baixar de reserva ultrapassar a quantidade reservada consig ==> baixa toda a quantidade reserva consig e o restante da reserva disponivel
        If tEstProd.dQuantReservadaConsig - objItemMovEst.dQuantidadeEst < -QTDE_ESTOQUE_DELTA2 Then
        
            objEstoqueProduto.dQuantReservadaConsig = -tEstProd.dQuantReservadaConsig
            objEstoqueProduto.dQuantReservada = -(objItemMovEst.dQuantidadeEst - tEstProd.dQuantReservadaConsig)
            objEstoqueProduto.dQuantDispNossa = -objEstoqueProduto.dQuantReservada
            objEstoqueProduto.dQuantConsig3 = -objEstoqueProduto.dQuantReservadaConsig
            
        Else
        
            objEstoqueProduto.dQuantReservadaConsig = -objItemMovEst.dQuantidadeEst
            objEstoqueProduto.dQuantConsig3 = -objEstoqueProduto.dQuantReservadaConsig
            
        End If
        
    End If

    EstoqueProduto_Atualiza1 = SUCESSO

    Exit Function

Erro_EstoqueProduto_Atualiza1:

    EstoqueProduto_Atualiza1 = Err

    Select Case Err

        Case 36481
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DISP_CONSIG3", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantDispNossa + tEstProd.dQuantConsig3)

        Case 36482, 36483
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_RESDISP_RESCONSIG3", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, tEstProd.dQuantReservada + tEstProd.dQuantReservadaConsig)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151723)

    End Select

    Exit Function

End Function

Function SldDiaEst_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst) As Long
'Atualiza a tabela de SldDiaEst utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim dtData As Date

On Error GoTo Erro_SldDiaEst_Atualiza

    'Le a tabela de SldDiaEst para a filial/produto/data em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Data FROM SldDiaEst WHERE FilialEmpresa = ? AND Produto = ? AND Data = ?", 0, dtData, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, objSldDiaEst.dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 20396

    'leitura do registro referente a filial/produto/data em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20397
    
    'se não encontrou um registro para a data em questão ==> insere um registro
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Insere um registro na tabela de SldDiaEst para a filial/produto/data em questão
        lErro = Comando_Executar(lComando2, "INSERT INTO SldDiaEst (FilialEmpresa, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons, QuantVendConsig3, ValorVendConsig3, QuantEntCusto, ValorEntCusto, QuantSaiCusto, ValorSaiCusto, QuantEntConsig3, ValorEntConsig3, QuantSaiConsig3, ValorSaiConsig3, QuantEntDemo3, ValorEntDemo3, QuantSaiDemo3, ValorSaiDemo3, QuantEntConserto3, ValorEntConserto3, QuantSaiConserto3, ValorSaiConserto3, QuantEntOutros3, ValorEntOutros3, QuantSaiOutros3, ValorSaiOutros3, QuantEntBenef3, ValorEntBenef3, QuantSaiBenef3, ValorSaiBenef3," & _
        "QuantEntConsig, ValorEntConsig, QuantSaiConsig, ValorSaiConsig, QuantEntDemo, ValorEntDemo, QuantSaiDemo, ValorSaiDemo, QuantEntConserto, ValorEntConserto, QuantSaiConserto, ValorSaiConserto, QuantEntOutros, ValorEntOutros, QuantSaiOutros, ValorSaiOutros, QuantEntBenef, ValorEntBenef, QuantSaiBenef, ValorSaiBenef, QuantEntRecIndl, ValorEntRecIndl, QuantSaiRecIndl, ValorSaiRecIndl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, objSldDiaEst.dtData, objSldDiaEst.dQuantEntrada, objSldDiaEst.dQuantSaida, objSldDiaEst.dQuantCons, objSldDiaEst.dQuantVend, objSldDiaEst.dValorEntrada, objSldDiaEst.dValorSaida, objSldDiaEst.dQuantComp, objSldDiaEst.dValorComp, objSldDiaEst.dValorVend, objSldDiaEst.dValorCons, objSldDiaEst.dQuantVendConsig3, objSldDiaEst.dValorVendConsig3, objSldDiaEst.dQuantEntCusto, objSldDiaEst.dValorEntCusto, objSldDiaEst.dQuantSaiCusto, _
        objSldDiaEst.dValorSaiCusto, objSldDiaEst.dQuantEntConsig3, objSldDiaEst.dValorEntConsig3, objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3, objSldDiaEst.dValorEntDemo3, objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3, objSldDiaEst.dValorEntConserto3, objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3, objSldDiaEst.dValorEntOutros3, objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3, objSldDiaEst.dValorEntBenef3, objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorSaiBenef3, _
        objSldDiaEst.dQuantEntConsig, objSldDiaEst.dValorEntConsig, objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo, objSldDiaEst.dValorEntDemo, objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto, objSldDiaEst.dValorEntConserto, objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros, objSldDiaEst.dValorEntOutros, objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef, objSldDiaEst.dValorEntBenef, objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorSaiBenef, objSldDiaEst.dQuantEntRecIndl, _
        objSldDiaEst.dValorEntRecIndl, objSldDiaEst.dQuantSaiRecIndl, objSldDiaEst.dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 20398
    
    
    Else
        'se encontrou ==> atualiza o registro
    
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 20399
    
        'Atualiza a tabela de SldDiaEst para a filial/produto/data em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaEst SET QuantEntrada = QuantEntrada + ?, QuantSaida = QuantSaida + ?, QuantCons = QuantCons + ?, QuantVend = QuantVend + ?, ValorEntrada = ValorEntrada + ?, ValorSaida = ValorSaida + ?, QuantComp = QuantComp + ?, ValorComp = ValorComp + ?, ValorVend = ValorVend + ?, ValorCons = ValorCons + ?, QuantVendConsig3 = QuantVendConsig3 + ?, ValorVendConsig3 = ValorVendConsig3 + ?, QuantEntCusto = QuantEntCusto + ?, ValorEntCusto = ValorEntCusto + ?, QuantSaiCusto = QuantSaiCusto + ?, ValorSaiCusto = ValorSaiCusto + ?, QuantEntConsig3 = QuantEntConsig3 + ?, ValorEntConsig3 = ValorEntConsig3 + ?, QuantSaiConsig3 = QuantSaiConsig3 + ?, ValorSaiConsig3 = ValorSaiConsig3 + ?, QuantEntDemo3 = QuantEntDemo3 + ?, ValorEntDemo3 = ValorEntDemo3 + ?, QuantSaiDemo3 = QuantSaiDemo3 + ?, ValorSaiDemo3 = ValorSaiDemo3 + ?, " & _
                                    "QuantEntConserto3 = QuantEntConserto3 + ?, ValorEntConserto3 = ValorEntConserto3 + ?, QuantSaiConserto3 = QuantSaiConserto3 + ?, ValorSaiConserto3 = ValorSaiConserto3 + ?, QuantEntOutros3 = QuantEntOutros3 + ?, ValorEntOutros3 = ValorEntOutros3 + ?, QuantSaiOutros3 = QuantSaiOutros3 + ?, ValorSaiOutros3 = ValorSaiOutros3 + ?, QuantEntBenef3 = QuantEntBenef3 + ?, ValorEntBenef3 = ValorEntBenef3 + ?, QuantSaiBenef3 = QuantSaiBenef3 + ?, ValorSaiBenef3 = ValorSaiBenef3 + ?, " & _
                                    "QuantEntConsig = QuantEntConsig + ?, ValorEntConsig = ValorEntConsig + ?, QuantSaiConsig = QuantSaiConsig + ?, ValorSaiConsig = ValorSaiConsig + ?, QuantEntDemo = QuantEntDemo + ?, ValorEntDemo = ValorEntDemo + ?, QuantSaiDemo = QuantSaiDemo + ?, ValorSaiDemo = ValorSaiDemo + ?, QuantEntConserto = QuantEntConserto + ?, ValorEntConserto = ValorEntConserto + ?, QuantSaiConserto = QuantSaiConserto + ?, ValorSaiConserto = ValorSaiConserto + ?, QuantEntOutros = QuantEntOutros + ?, ValorEntOutros = ValorEntOutros + ?, QuantSaiOutros = QuantSaiOutros + ?, ValorSaiOutros = ValorSaiOutros + ?, QuantEntBenef = QuantEntBenef + ?, ValorEntBenef = ValorEntBenef + ?, QuantSaiBenef = QuantSaiBenef + ?, ValorSaiBenef = ValorSaiBenef + ?, QuantEntRecIndl = QuantEntRecIndl + ?, ValorEntRecIndl = ValorEntRecIndl + ?, QuantSaiRecIndl = QuantSaiRecIndl + ?, ValorSaiRecIndl = ValorSaiRecIndl + ?", _
                                    lComando1, objSldDiaEst.dQuantEntrada, objSldDiaEst.dQuantSaida, objSldDiaEst.dQuantCons, objSldDiaEst.dQuantVend, objSldDiaEst.dValorEntrada, objSldDiaEst.dValorSaida, objSldDiaEst.dQuantComp, objSldDiaEst.dValorComp, objSldDiaEst.dValorVend, objSldDiaEst.dValorCons, objSldDiaEst.dQuantVendConsig3, objSldDiaEst.dValorVendConsig3, objSldDiaEst.dQuantEntCusto, objSldDiaEst.dValorEntCusto, objSldDiaEst.dQuantSaiCusto, objSldDiaEst.dValorSaiCusto, objSldDiaEst.dQuantEntConsig3, objSldDiaEst.dValorEntConsig3, objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3, objSldDiaEst.dValorEntDemo3, objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3, objSldDiaEst.dValorEntConserto3, objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3, objSldDiaEst.dValorEntOutros3, objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorSaiOutros3, _
                                    objSldDiaEst.dQuantEntBenef3, objSldDiaEst.dValorEntBenef3, objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorSaiBenef3, objSldDiaEst.dQuantEntConsig, objSldDiaEst.dValorEntConsig, objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo, objSldDiaEst.dValorEntDemo, objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto, objSldDiaEst.dValorEntConserto, objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros, objSldDiaEst.dValorEntOutros, objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef, objSldDiaEst.dValorEntBenef, objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorSaiBenef, objSldDiaEst.dQuantEntRecIndl, objSldDiaEst.dValorEntRecIndl, objSldDiaEst.dQuantSaiRecIndl, objSldDiaEst.dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 20400
        
    End If

    SldDiaEst_Atualiza = SUCESSO

    Exit Function

Erro_SldDiaEst_Atualiza:

    SldDiaEst_Atualiza = Err

    Select Case Err

        Case 20396, 20397
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAEST", Err, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))

        Case 20398
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAEST", Err, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))
        
        Case 20399
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDDIAEST", Err, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))

        Case 20400
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAEST", Err, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151724)

    End Select

    Exit Function

End Function

Function SldMesEst_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal dCustoMedio As Double) As Long
'Atualiza a tabela de SldMesEst utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer
Dim tSldMesEst As typeSldMesEst

On Error GoTo Erro_SldMesEst_Atualiza
    
    iMes = Month(objSldDiaEst.dtData)
    sMes = CStr(iMes)
    
    'Le a tabela de SldMesEst para o Ano/filial/produto em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEst WHERE Ano=? AND FilialEmpresa=? AND Produto=?", 0, iAno, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 20401

    'leitura do registro referente ao Ano/filial/produto em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 20402
    
    'lock do registro em questão
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 20403

    If dCustoMedio <> 0 Then

        'Atualiza a tabela de SldMesEst para o Ano/filial/produto em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst SET QuantEnt" + sMes + " = QuantEnt" + sMes + " + ?, ValorEnt" + sMes + " = ValorEnt" + sMes + " + ?, QuantSai" + sMes + " = QuantSai" + sMes + " + ?, ValorSai" + sMes + " = ValorSai" + sMes + " + ?, QuantCons" + sMes + " = QuantCons" + sMes + " + ?, QuantVend" + sMes + " = QuantVend" + sMes + " + ?, QuantComp" + sMes + " = QuantComp" + sMes + " + ?, ValorComp" + sMes + " = ValorComp" + sMes + " + ?, ValorVend" + sMes + " = ValorVend" + sMes + " + ?, CustoMedio" + sMes + " = ?, ValorCons" + sMes + " = ValorCons" + sMes + " + ?, QuantVendConsig3" + sMes + " = QuantVendConsig3" + sMes + " + ?, ValorVendConsig3" + sMes + " = ValorVendConsig3" + sMes + " + ?, SaldoQuantCusto" + sMes + " = SaldoQuantCusto" + sMes + " + ?, SaldoValorCusto" + sMes + " = SaldoValorCusto" + sMes + " + ?, SaldoQuantRecIndl" + sMes + " = SaldoQuantRecIndl" + sMes + " + ?, SaldoValorRecIndl" + sMes + " = SaldoValorRecIndl" + sMes + " + ?", _
        lComando1, objSldDiaEst.dQuantEntrada, objSldDiaEst.dValorEntrada, objSldDiaEst.dQuantSaida, objSldDiaEst.dValorSaida, objSldDiaEst.dQuantCons, objSldDiaEst.dQuantVend, objSldDiaEst.dQuantComp, objSldDiaEst.dValorComp, objSldDiaEst.dValorVend, dCustoMedio, objSldDiaEst.dValorCons, objSldDiaEst.dQuantVendConsig3, objSldDiaEst.dValorVendConsig3, objSldDiaEst.dQuantEntCusto - objSldDiaEst.dQuantSaiCusto, objSldDiaEst.dValorEntCusto - objSldDiaEst.dValorSaiCusto, objSldDiaEst.dQuantEntRecIndl - objSldDiaEst.dQuantSaiRecIndl, objSldDiaEst.dValorEntRecIndl - objSldDiaEst.dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 20404
        
    Else
    
        'Atualiza a tabela de SldMesEst para o Ano/filial/produto em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst SET QuantEnt" + sMes + " = QuantEnt" + sMes + " + ?, ValorEnt" + sMes + " = ValorEnt" + sMes + " + ?, QuantSai" + sMes + " = QuantSai" + sMes + " + ?, ValorSai" + sMes + " = ValorSai" + sMes + " + ?, QuantCons" + sMes + " = QuantCons" + sMes + " + ?, QuantVend" + sMes + " = QuantVend" + sMes + " + ?, QuantComp" + sMes + " = QuantComp" + sMes + " + ?, ValorComp" + sMes + " = ValorComp" + sMes + " + ?, ValorVend" + sMes + " = ValorVend" + sMes + " + ?, ValorCons" + sMes + " = ValorCons" + sMes + " + ?, QuantVendConsig3" + sMes + " = QuantVendConsig3" + sMes + " + ?, ValorVendConsig3" + sMes + " = ValorVendConsig3" + sMes + " + ?, SaldoQuantCusto" + sMes + " = SaldoQuantCusto" + sMes + " + ?, SaldoValorCusto" + sMes + " = SaldoValorCusto" + sMes + " + ?, SaldoQuantRecIndl" + sMes + " = SaldoQuantRecIndl" + sMes + " + ?, SaldoValorRecIndl" + sMes + " = SaldoValorRecIndl" + sMes + " + ?", _
                                    lComando1, objSldDiaEst.dQuantEntrada, objSldDiaEst.dValorEntrada, objSldDiaEst.dQuantSaida, objSldDiaEst.dValorSaida, objSldDiaEst.dQuantCons, objSldDiaEst.dQuantVend, objSldDiaEst.dQuantComp, objSldDiaEst.dValorComp, objSldDiaEst.dValorVend, objSldDiaEst.dValorCons, objSldDiaEst.dQuantVendConsig3, objSldDiaEst.dValorVendConsig3, objSldDiaEst.dQuantEntCusto - objSldDiaEst.dQuantSaiCusto, objSldDiaEst.dValorEntCusto - objSldDiaEst.dValorSaiCusto, objSldDiaEst.dQuantEntRecIndl - objSldDiaEst.dQuantSaiRecIndl, objSldDiaEst.dValorEntRecIndl - objSldDiaEst.dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 20529
    
    End If
        
    SldMesEst_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEst_Atualiza:

    SldMesEst_Atualiza = Err

    Select Case Err

        Case 20401, 20402
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", Err, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case 20403
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST", Err, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case 20404, 20529
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST", Err, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151725)

    End Select

    Exit Function

End Function

Function SldMesEst_Atualiza_Mes(ByVal objTela As Object, ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer, ByVal objEstoque As ClassEstoqueMes) As Long
'Atualiza somente o mes, durante o decorrer do ano

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim vbMesRes As VbMsgBoxResult

On Error GoTo Erro_SldMesEst_Atualiza_Mes

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 40684

    'Inicializa comando2
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 40685
    
    'preenche o sMes para que seja usado no select
    iMes = objEstoque.iMes
    sMes = CStr(iMes)

    'Le o CustoMedio e o CustoStandard da tabela de SldMesEst
    lErro = Comando_ExecutarPos(lComando, "SELECT Status" + sMes + " FROM SldMesEst Where Ano=? And FilialEmpresa=?", 0, iStatus, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 40676

    'Busca o primeiro Custo Medio e Standard do primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 40677

    'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
    iMes2 = iMes + 1
    sMes2 = CStr(iMes2)
    
    'enquanto existir um produto
    Do While lErro = AD_SQL_SUCESSO

'        'lock do registro em questão
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then gError 40678
        
        'Altera os dados no BD
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst SET CustoMedio" + sMes2 + " = CustoMedio" + sMes + ", CustoStandard" + sMes2 + " = CustoStandard" + sMes + " , Status" + sMes2 + " = ?, Status" + sMes + " = ?", lComando, SLDMESEST_STATUS_ABERTO_NAO_ALTERADO, SLDMESEST_STATUS_FECHADO)
        If lErro <> AD_SQL_SUCESSO Then gError 40693
         
         
        'Joga o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
        
        DoEvents
        
        'verifica se foi cancelado o fechamento do mes
        If iCancela = CANCELA Then
            
            vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES", iMes)
                
            If vbMesRes = vbYes Then gError 40698
                
            iCancela = CANCELA_BATCH
        
        End If
        
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 40686

    Loop

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    SldMesEst_Atualiza_Mes = SUCESSO

    Exit Function

Erro_SldMesEst_Atualiza_Mes:

    SldMesEst_Atualiza_Mes = gErr

    Select Case gErr
            
        Case 40676, 40677, 40686
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 40678
            lErro = lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST_1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 40684, 40685
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 40693
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOMES_SLDMESEST", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, iMes)
        
        Case 40698
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151726)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst_Atualiza_Mes_Reproc(ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst) As Long
'Atualiza somente o mes, durante o decorrer do ano

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim sProduto As String
Dim iApropriacao As Integer

On Error GoTo Erro_SldMesEst_Atualiza_Mes_Reproc

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 89189

    'Inicializa comando
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 89233

    'Inicializa comando2
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 89190
    
    sMes = CStr(iMes)

    sProduto = String(STRING_PRODUTO, 0)

    'Le o CustoMedio e o CustoStandard da tabela de SldMesEst
    lErro = Comando_ExecutarPos(lComando, "SELECT Produto FROM SldMesEst Where Ano=? And FilialEmpresa=?", 0, sProduto, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 89191

    'Busca o primeiro Custo Medio e Standard do primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89192

    'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
    iMes2 = iMes + 1
    sMes2 = CStr(iMes2)
    
    'enquanto existir um produto
    Do While lErro = AD_SQL_SUCESSO

        'Lê o atributo Apropriação do produto, cujo codigo foi passado como parâmetro
        lErro = CF("Produto_Le_Apropriacao", lComando1, sProduto, iApropriacao)
        If lErro <> SUCESSO Then gError 89234

        If iApropriacao = APROPR_CUSTO_MEDIO Then

            'Altera os dados no BD
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst SET CustoMedio" + sMes2 + " = CustoMedio" + sMes, lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 89193
         
        End If
         
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89194

    Loop

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    SldMesEst_Atualiza_Mes_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst_Atualiza_Mes_Reproc:

    SldMesEst_Atualiza_Mes_Reproc = gErr

    Select Case gErr
            
        Case 89189, 89190, 89233
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89191, 89192, 89194
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 89193
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, sProduto)
        
        Case 89234
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151727)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function


Function SldMesEst_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst As typeSldMesEst
Dim iIndice As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult

On Error GoTo Erro_SldMesEst_Atualiza_Ano

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"
    
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 40687

    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 40688

    'Inicializa comandos
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 40695

    tSldMesEst.sProduto = String(STRING_PRODUTO, 0)

    'forma o comando do SQL
    sComando_SQL = "SELECT Ano, Produto, QuantInicial, ValorInicial, QuantEnt1, QuantSai1, QuantEnt2, QuantSai2, QuantEnt3, QuantSai3, QuantEnt4, QuantSai4, QuantEnt5, QuantSai5, QuantEnt6, QuantSai6, QuantEnt7, QuantSai7, QuantEnt8, QuantSai8, QuantEnt9, QuantSai9, QuantEnt10, QuantSai10, QuantEnt11, QuantSai11, QuantEnt12, QuantSai12, ValorEnt1, ValorSai1, ValorEnt2, ValorSai2, ValorEnt3, ValorSai3, ValorEnt4, ValorSai4, ValorEnt5, ValorSai5, ValorEnt6, ValorSai6, ValorEnt7, ValorSai7, ValorEnt8, ValorSai8, ValorEnt9, ValorSai9, ValorEnt10, ValorSai10, ValorEnt11, ValorSai11, ValorEnt12, ValorSai12, CustoMedio12, CustoStandard12, " & _
                    "QuantInicialCusto, ValorInicialCusto, SaldoQuantCusto1, SaldoValorCusto1, SaldoQuantCusto2, SaldoValorCusto2, SaldoQuantCusto3, SaldoValorCusto3, SaldoQuantCusto4, SaldoValorCusto4, SaldoQuantCusto5, SaldoValorCusto5, SaldoQuantCusto6, SaldoValorCusto6, SaldoQuantCusto7, SaldoValorCusto7, SaldoQuantCusto8, SaldoValorCusto8, SaldoQuantCusto9, SaldoValorCusto9, SaldoQuantCusto10, SaldoValorCusto10, SaldoQuantCusto11, SaldoValorCusto11, SaldoQuantCusto12, SaldoValorCusto12, " & _
                    "QuantInicialRecIndl, ValorInicialRecIndl, SaldoQuantRecIndl1, SaldoQuantRecIndl2, SaldoQuantRecIndl3, SaldoQuantRecIndl4, SaldoQuantRecIndl5, SaldoQuantRecIndl6, SaldoQuantRecIndl7, SaldoQuantRecIndl8, SaldoQuantRecIndl9, SaldoQuantRecIndl10, SaldoQuantRecIndl11, SaldoQuantRecIndl12, " & _
                    "SaldoValorRecIndl1, SaldoValorRecIndl2, SaldoValorRecIndl3, SaldoValorRecIndl4, SaldoValorRecIndl5, SaldoValorRecIndl6, SaldoValorRecIndl7, SaldoValorRecIndl8, SaldoValorRecIndl9, SaldoValorRecIndl10, SaldoValorRecIndl11, SaldoValorRecIndl12 FROM SldMesEst WHERE Ano =? And FilialEmpresa =? "

    'Le o ano, produto, QuantidadeInicial, valorInicial, QuantEnt(1..12), QuantSai(1..12), ValorEnt(1..12), valorSai(1..12),CustoMedio12, CustoStandard12, CustoMedioProducao12
    lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst.iAno, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.adQuantEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adQuantEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adQuantEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adQuantEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adQuantSai(12), _
                            tSldMesEst.adValorEnt(1), tSldMesEst.adValorSai(1), tSldMesEst.adValorEnt(2), tSldMesEst.adValorSai(2), tSldMesEst.adValorEnt(3), tSldMesEst.adValorSai(3), tSldMesEst.adValorEnt(4), tSldMesEst.adValorSai(4), tSldMesEst.adValorEnt(5), tSldMesEst.adValorSai(5), tSldMesEst.adValorEnt(6), tSldMesEst.adValorSai(6), tSldMesEst.adValorEnt(7), tSldMesEst.adValorSai(7), tSldMesEst.adValorEnt(8), tSldMesEst.adValorSai(8), tSldMesEst.adValorEnt(9), tSldMesEst.adValorSai(9), tSldMesEst.adValorEnt(10), tSldMesEst.adValorSai(10), tSldMesEst.adValorEnt(11), tSldMesEst.adValorSai(11), tSldMesEst.adValorEnt(12), tSldMesEst.adValorSai(12), tSldMesEst.adCustoMedio(12), tSldMesEst.adCustoStandard(12), _
                            tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adSaldoQuantCusto(12), tSldMesEst.adSaldoValorCusto(12), _
                            tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl, tSldMesEst.adSaldoQuantRecIndl(1), tSldMesEst.adSaldoQuantRecIndl(2), tSldMesEst.adSaldoQuantRecIndl(3), tSldMesEst.adSaldoQuantRecIndl(4), tSldMesEst.adSaldoQuantRecIndl(5), tSldMesEst.adSaldoQuantRecIndl(6), tSldMesEst.adSaldoQuantRecIndl(7), tSldMesEst.adSaldoQuantRecIndl(8), tSldMesEst.adSaldoQuantRecIndl(9), tSldMesEst.adSaldoQuantRecIndl(10), tSldMesEst.adSaldoQuantRecIndl(11), tSldMesEst.adSaldoQuantRecIndl(12), _
                            tSldMesEst.adSaldoValorRecIndl(1), tSldMesEst.adSaldoValorRecIndl(2), tSldMesEst.adSaldoValorRecIndl(3), tSldMesEst.adSaldoValorRecIndl(4), tSldMesEst.adSaldoValorRecIndl(5), tSldMesEst.adSaldoValorRecIndl(6), tSldMesEst.adSaldoValorRecIndl(7), tSldMesEst.adSaldoValorRecIndl(8), tSldMesEst.adSaldoValorRecIndl(9), tSldMesEst.adSaldoValorRecIndl(10), tSldMesEst.adSaldoValorRecIndl(11), tSldMesEst.adSaldoValorRecIndl(12), _
                            objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 40689

    'Busca o primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 40694

    Do While lErro = AD_SQL_SUCESSO

'        'lock do registro em questão
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 40690
        
        'soma um a ano para que seja criado outro ano
        tSldMesEst.iAno = tSldMesEst.iAno + 1
        
        'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
        For iIndice = 1 To 12

            tSldMesEst.dQuantInicial = tSldMesEst.dQuantInicial + tSldMesEst.adQuantEnt(iIndice) - tSldMesEst.adQuantSai(iIndice)
            tSldMesEst.dValorInicial = tSldMesEst.dValorInicial + tSldMesEst.adValorEnt(iIndice) - tSldMesEst.adValorSai(iIndice)
            tSldMesEst.dQuantInicialCusto = tSldMesEst.dQuantInicialCusto + tSldMesEst.adSaldoQuantCusto(iIndice)
            tSldMesEst.dValorInicialCusto = tSldMesEst.dValorInicialCusto + tSldMesEst.adSaldoValorCusto(iIndice)
            tSldMesEst.dQuantInicialRecIndl = tSldMesEst.dQuantInicialRecIndl + tSldMesEst.adSaldoQuantRecIndl(iIndice)
            tSldMesEst.dValorInicialRecIndl = tSldMesEst.dValorInicialRecIndl + tSldMesEst.adSaldoValorRecIndl(iIndice)
        Next
        
        'Altera o status do mes 12 no Bd
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst SET Status12 = ?", lComando, SLDMESEST_STATUS_FECHADO)
        If lErro <> AD_SQL_SUCESSO Then Error 40696

        'Insere os dados no BD
        lErro = Comando_Executar(lComando3, "INSERT INTO SldMesEst (Ano, FilialEmpresa, Produto, QuantInicial, ValorInicial, CustoMedio1, CustoStandard1, Status1, QuantInicialCusto, ValorInicialCusto, QuantInicialRecIndl, ValorInicialRecIndl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEst.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.adCustoMedio(12), tSldMesEst.adCustoStandard(12), SLDMESEST_STATUS_ABERTO_NAO_ALTERADO, tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 40691
        
        'Joga o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
        
        DoEvents
        
        'verifica se foi cancelado o fechamento do mes
        If iCancela = CANCELA Then
            
            vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
                
            If vbMesRes = vbYes Then Error 40699
            
            iCancela = CANCELA_BATCH
                
        End If
        
        'Busca o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 40692

    Loop
            
    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    'Fechamento comando
    Call Comando_Fechar(lComando3)

    SldMesEst_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEst_Atualiza_Ano:

    SldMesEst_Atualiza_Ano = Err

    Select Case Err
            
        Case 40687, 40688, 40695
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 40689, 40692, 40694
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1", Err, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 40690
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST", Err, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto)

        Case 40691
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOANO_SDLMESEST", Err, tSldMesEst.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst.sProduto)

        Case 40696
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESEST", Err, tSldMesEst.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst.sProduto)
        
        Case 40699
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151728)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Private Function SldMesEst_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Atualiza os saldos iniciais do ano seguinte para os produtos para fins de reprocessamento

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst As typeSldMesEst
Dim iIndice As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult
Dim iAno As Integer
Dim iApropriacao As Integer

On Error GoTo Erro_SldMesEst_Atualiza_Ano_Reproc

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 83670

    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 83671

    'Inicializa comandos
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 83672

    tSldMesEst.sProduto = String(STRING_PRODUTO, 0)

    If objSldMesEst.sProduto = "" Then
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicial, ValorInicial, QuantEnt1, QuantSai1, QuantEnt2, QuantSai2, QuantEnt3, QuantSai3, QuantEnt4, QuantSai4, QuantEnt5, QuantSai5, QuantEnt6, QuantSai6, QuantEnt7, QuantSai7, QuantEnt8, QuantSai8, QuantEnt9, QuantSai9, QuantEnt10, QuantSai10, QuantEnt11, QuantSai11, QuantEnt12, QuantSai12, ValorEnt1, ValorSai1, ValorEnt2, ValorSai2, ValorEnt3, ValorSai3, ValorEnt4, ValorSai4, ValorEnt5, ValorSai5, ValorEnt6, ValorSai6, ValorEnt7, ValorSai7, ValorEnt8, ValorSai8, ValorEnt9, ValorSai9, ValorEnt10, ValorSai10, ValorEnt11, ValorSai11, ValorEnt12, ValorSai12, CustoMedio12, CustoStandard12, " & _
                        "QuantInicialCusto, ValorInicialCusto, SaldoQuantCusto1, SaldoValorCusto1, SaldoQuantCusto2, SaldoValorCusto2, SaldoQuantCusto3, SaldoValorCusto3, SaldoQuantCusto4, SaldoValorCusto4, SaldoQuantCusto5, SaldoValorCusto5, SaldoQuantCusto6, SaldoValorCusto6, SaldoQuantCusto7, SaldoValorCusto7, SaldoQuantCusto8, SaldoValorCusto8, SaldoQuantCusto9, SaldoValorCusto9, SaldoQuantCusto10, SaldoValorCusto10, SaldoQuantCusto11, SaldoValorCusto11, SaldoQuantCusto12, SaldoValorCusto12, " & _
                        "QuantInicialRecIndl, ValorInicialRecIndl, SaldoQuantRecIndl1, SaldoQuantRecIndl2, SaldoQuantRecIndl3, SaldoQuantRecIndl4, SaldoQuantRecIndl5, SaldoQuantRecIndl6, SaldoQuantRecIndl7, SaldoQuantRecIndl8, SaldoQuantRecIndl9, SaldoQuantRecIndl10, SaldoQuantRecIndl11, SaldoQuantRecIndl12, " & _
                        "SaldoValorRecIndl1, SaldoValorRecIndl2, SaldoValorRecIndl3, SaldoValorRecIndl4, SaldoValorRecIndl5, SaldoValorRecIndl6, SaldoValorRecIndl7, SaldoValorRecIndl8, SaldoValorRecIndl9, SaldoValorRecIndl10, SaldoValorRecIndl11, SaldoValorRecIndl12, Produtos.Apropriacao FROM SldMesEst, Produtos WHERE Ano =? And FilialEmpresa =? AND SldMesEst.Produto = Produtos.Codigo"
                        
        'Le o ano, produto, QuantidadeInicial, valorInicial, QuantEnt(1..12), QuantSai(1..12), ValorEnt(1..12), valorSai(1..12),CustoMedio12, CustoStandard12, CustoMedioProducao12
        lErro = Comando_Executar(lComando, sComando_SQL, tSldMesEst.iAno, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.adQuantEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adQuantEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adQuantEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adQuantEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adQuantSai(12), _
                                tSldMesEst.adValorEnt(1), tSldMesEst.adValorSai(1), tSldMesEst.adValorEnt(2), tSldMesEst.adValorSai(2), tSldMesEst.adValorEnt(3), tSldMesEst.adValorSai(3), tSldMesEst.adValorEnt(4), tSldMesEst.adValorSai(4), tSldMesEst.adValorEnt(5), tSldMesEst.adValorSai(5), tSldMesEst.adValorEnt(6), tSldMesEst.adValorSai(6), tSldMesEst.adValorEnt(7), tSldMesEst.adValorSai(7), tSldMesEst.adValorEnt(8), tSldMesEst.adValorSai(8), tSldMesEst.adValorEnt(9), tSldMesEst.adValorSai(9), tSldMesEst.adValorEnt(10), tSldMesEst.adValorSai(10), tSldMesEst.adValorEnt(11), tSldMesEst.adValorSai(11), tSldMesEst.adValorEnt(12), tSldMesEst.adValorSai(12), tSldMesEst.adCustoMedio(12), tSldMesEst.adCustoStandard(12), _
                                tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adSaldoQuantCusto(12), tSldMesEst.adSaldoValorCusto(12), _
                                tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl, tSldMesEst.adSaldoQuantRecIndl(1), tSldMesEst.adSaldoQuantRecIndl(2), tSldMesEst.adSaldoQuantRecIndl(3), tSldMesEst.adSaldoQuantRecIndl(4), tSldMesEst.adSaldoQuantRecIndl(5), tSldMesEst.adSaldoQuantRecIndl(6), tSldMesEst.adSaldoQuantRecIndl(7), tSldMesEst.adSaldoQuantRecIndl(8), tSldMesEst.adSaldoQuantRecIndl(9), tSldMesEst.adSaldoQuantRecIndl(10), tSldMesEst.adSaldoQuantRecIndl(11), tSldMesEst.adSaldoQuantRecIndl(12), _
                                tSldMesEst.adSaldoValorRecIndl(1), tSldMesEst.adSaldoValorRecIndl(2), tSldMesEst.adSaldoValorRecIndl(3), tSldMesEst.adSaldoValorRecIndl(4), tSldMesEst.adSaldoValorRecIndl(5), tSldMesEst.adSaldoValorRecIndl(6), tSldMesEst.adSaldoValorRecIndl(7), tSldMesEst.adSaldoValorRecIndl(8), tSldMesEst.adSaldoValorRecIndl(9), tSldMesEst.adSaldoValorRecIndl(10), tSldMesEst.adSaldoValorRecIndl(11), tSldMesEst.adSaldoValorRecIndl(12), iApropriacao, _
                                objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    Else
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicial, ValorInicial, QuantEnt1, QuantSai1, QuantEnt2, QuantSai2, QuantEnt3, QuantSai3, QuantEnt4, QuantSai4, QuantEnt5, QuantSai5, QuantEnt6, QuantSai6, QuantEnt7, QuantSai7, QuantEnt8, QuantSai8, QuantEnt9, QuantSai9, QuantEnt10, QuantSai10, QuantEnt11, QuantSai11, QuantEnt12, QuantSai12, ValorEnt1, ValorSai1, ValorEnt2, ValorSai2, ValorEnt3, ValorSai3, ValorEnt4, ValorSai4, ValorEnt5, ValorSai5, ValorEnt6, ValorSai6, ValorEnt7, ValorSai7, ValorEnt8, ValorSai8, ValorEnt9, ValorSai9, ValorEnt10, ValorSai10, ValorEnt11, ValorSai11, ValorEnt12, ValorSai12, CustoMedio12, CustoStandard12, " & _
                        "QuantInicialCusto, ValorInicialCusto, SaldoQuantCusto1, SaldoValorCusto1, SaldoQuantCusto2, SaldoValorCusto2, SaldoQuantCusto3, SaldoValorCusto3, SaldoQuantCusto4, SaldoValorCusto4, SaldoQuantCusto5, SaldoValorCusto5, SaldoQuantCusto6, SaldoValorCusto6, SaldoQuantCusto7, SaldoValorCusto7, SaldoQuantCusto8, SaldoValorCusto8, SaldoQuantCusto9, SaldoValorCusto9, SaldoQuantCusto10, SaldoValorCusto10, SaldoQuantCusto11, SaldoValorCusto11, SaldoQuantCusto12, SaldoValorCusto12, " & _
                        "QuantInicialRecIndl, ValorInicialRecIndl, SaldoQuantRecIndl1, SaldoQuantRecIndl2, SaldoQuantRecIndl3, SaldoQuantRecIndl4, SaldoQuantRecIndl5, SaldoQuantRecIndl6, SaldoQuantRecIndl7, SaldoQuantRecIndl8, SaldoQuantRecIndl9, SaldoQuantRecIndl10, SaldoQuantRecIndl11, SaldoQuantRecIndl12, " & _
                        "SaldoValorRecIndl1, SaldoValorRecIndl2, SaldoValorRecIndl3, SaldoValorRecIndl4, SaldoValorRecIndl5, SaldoValorRecIndl6, SaldoValorRecIndl7, SaldoValorRecIndl8, SaldoValorRecIndl9, SaldoValorRecIndl10, SaldoValorRecIndl11, SaldoValorRecIndl12, Produtos.Apropriacao FROM SldMesEst, Produtos WHERE Ano =? And FilialEmpresa =? AND SldMesEst.Produto = Produtos.Codigo AND Produtos.Codigo = ?"
                        
        'Le o ano, produto, QuantidadeInicial, valorInicial, QuantEnt(1..12), QuantSai(1..12), ValorEnt(1..12), valorSai(1..12),CustoMedio12, CustoStandard12, CustoMedioProducao12
        lErro = Comando_Executar(lComando, sComando_SQL, tSldMesEst.iAno, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.adQuantEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adQuantEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adQuantEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adQuantEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adQuantSai(12), _
                                tSldMesEst.adValorEnt(1), tSldMesEst.adValorSai(1), tSldMesEst.adValorEnt(2), tSldMesEst.adValorSai(2), tSldMesEst.adValorEnt(3), tSldMesEst.adValorSai(3), tSldMesEst.adValorEnt(4), tSldMesEst.adValorSai(4), tSldMesEst.adValorEnt(5), tSldMesEst.adValorSai(5), tSldMesEst.adValorEnt(6), tSldMesEst.adValorSai(6), tSldMesEst.adValorEnt(7), tSldMesEst.adValorSai(7), tSldMesEst.adValorEnt(8), tSldMesEst.adValorSai(8), tSldMesEst.adValorEnt(9), tSldMesEst.adValorSai(9), tSldMesEst.adValorEnt(10), tSldMesEst.adValorSai(10), tSldMesEst.adValorEnt(11), tSldMesEst.adValorSai(11), tSldMesEst.adValorEnt(12), tSldMesEst.adValorSai(12), tSldMesEst.adCustoMedio(12), tSldMesEst.adCustoStandard(12), _
                                tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adSaldoQuantCusto(12), tSldMesEst.adSaldoValorCusto(12), _
                                tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl, tSldMesEst.adSaldoQuantRecIndl(1), tSldMesEst.adSaldoQuantRecIndl(2), tSldMesEst.adSaldoQuantRecIndl(3), tSldMesEst.adSaldoQuantRecIndl(4), tSldMesEst.adSaldoQuantRecIndl(5), tSldMesEst.adSaldoQuantRecIndl(6), tSldMesEst.adSaldoQuantRecIndl(7), tSldMesEst.adSaldoQuantRecIndl(8), tSldMesEst.adSaldoQuantRecIndl(9), tSldMesEst.adSaldoQuantRecIndl(10), tSldMesEst.adSaldoQuantRecIndl(11), tSldMesEst.adSaldoQuantRecIndl(12), _
                                tSldMesEst.adSaldoValorRecIndl(1), tSldMesEst.adSaldoValorRecIndl(2), tSldMesEst.adSaldoValorRecIndl(3), tSldMesEst.adSaldoValorRecIndl(4), tSldMesEst.adSaldoValorRecIndl(5), tSldMesEst.adSaldoValorRecIndl(6), tSldMesEst.adSaldoValorRecIndl(7), tSldMesEst.adSaldoValorRecIndl(8), tSldMesEst.adSaldoValorRecIndl(9), tSldMesEst.adSaldoValorRecIndl(10), tSldMesEst.adSaldoValorRecIndl(11), tSldMesEst.adSaldoValorRecIndl(12), iApropriacao, _
                                objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 83673

    'Busca o primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83674

    Do While lErro = AD_SQL_SUCESSO

        'soma um a ano para que seja atualizado o outro ano
        tSldMesEst.iAno = tSldMesEst.iAno + 1
        
        'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
        For iIndice = 1 To 12

            tSldMesEst.dQuantInicial = tSldMesEst.dQuantInicial + tSldMesEst.adQuantEnt(iIndice) - tSldMesEst.adQuantSai(iIndice)
            tSldMesEst.dValorInicial = tSldMesEst.dValorInicial + tSldMesEst.adValorEnt(iIndice) - tSldMesEst.adValorSai(iIndice)
            tSldMesEst.dQuantInicialCusto = tSldMesEst.dQuantInicialCusto + tSldMesEst.adSaldoQuantCusto(iIndice)
            tSldMesEst.dValorInicialCusto = tSldMesEst.dValorInicialCusto + tSldMesEst.adSaldoValorCusto(iIndice)
            tSldMesEst.dQuantInicialRecIndl = tSldMesEst.dQuantInicialRecIndl + tSldMesEst.adSaldoQuantRecIndl(iIndice)
            tSldMesEst.dValorInicialRecIndl = tSldMesEst.dValorInicialRecIndl + tSldMesEst.adSaldoValorRecIndl(iIndice)

        Next
        
        'Le o registro do ano seguinte
        lErro = Comando_ExecutarPos(lComando2, "SELECT Ano FROM SldMesEst WHERE Ano =? AND FilialEmpresa =? AND Produto=?", 0, iAno, tSldMesEst.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 83675
        
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83676
        
        If lErro = AD_SQL_SUCESSO Then
        
            If iApropriacao = APROPR_CUSTO_MEDIO Then
        
                'Insere os dados no BD
                lErro = Comando_ExecutarPos(lComando3, "UPDATE SldMesEst SET QuantInicial = ?, ValorInicial = ?, QuantInicialCusto = ?, ValorInicialCusto = ?, QuantInicialRecIndl = ?, ValorInicialRecIndl = ?, CustoMedio1=?", lComando2, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl, tSldMesEst.adCustoMedio(12))
                If lErro <> AD_SQL_SUCESSO Then gError 83677
                
            Else
            
                'Insere os dados no BD
                lErro = Comando_ExecutarPos(lComando3, "UPDATE SldMesEst SET QuantInicial = ?, ValorInicial = ?, QuantInicialCusto = ?, ValorInicialCusto = ?, QuantInicialRecIndl = ?, ValorInicialRecIndl = ?", lComando2, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl)
                If lErro <> AD_SQL_SUCESSO Then gError 83677
            
            End If
            
        End If
            
        'Busca o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83678

    Loop
            
    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    SldMesEst_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst_Atualiza_Ano_Reproc:

    SldMesEst_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83670, 83671, 83672
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83673, 83674, 83678
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 83675, 83676
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", gErr, tSldMesEst.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst.sProduto)

        Case 83677
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST", gErr, tSldMesEst.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst.sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151729)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function Empenho_Automatico(lCodigo As Long, ByVal lComando1 As Long, ByVal lComando2 As Long) As Long
'gera codigo para insercao de Empenho. O codigo é sequencial por filialempresa
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, sConteudo As String

On Error GoTo Erro_Empenho_Automatico

    sConteudo = String(STRING_CONFIG_CONTEUDO, 0)

    lErro = Comando_ExecutarPos(lComando1, "SELECT Conteudo FROM MatConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, sConteudo, "NUM_PROX_EMPENHO", giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 32126

    lErro = Comando_BuscarProximo(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 32127

    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 32128

    lCodigo = CLng(sConteudo)

    lErro = Comando_ExecutarPos(lComando2, "UPDATE MATConfig SET Conteudo = ?", lComando1, CStr(lCodigo + 1))
    If lErro <> AD_SQL_SUCESSO Then Error 32129

    Empenho_Automatico = SUCESSO
     
    Exit Function
    
Erro_Empenho_Automatico:

    Empenho_Automatico = Err
     
    Select Case Err
          
        Case 32126, 32127
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MATCONFIG", Err, "NUM_PROX_EMPENHO")
    
        Case 32128
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_MATCONFIG", Err, "NUM_PROX_EMPENHO")
    
        Case 32129
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MATCONFIG", Err, "NUM_PROX_EMPENHO")

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151730)
     
    End Select
     
    Exit Function

End Function

Function MATConfig_ObterNumInt(ByVal sCodigo As String, lNumInt As Long, Optional ByVal iQtde As Integer = 1) As Long
'Obter um número automático a partir de um contador identificado por uma chave
'iQtde identifica quantos numeros devem ser "liberados" a partir do lNumInt retornado
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComandoSel As Long, lComandoMod As Long
Dim sConteudo As String

On Error GoTo Erro_MATConfig_ObterNumInt

    sConteudo = String(STRING_MATCONFIG_CONTEUDO, 0)

    'Inicializa comandos
    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 33185

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 33186

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Conteudo FROM MATConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, sConteudo, sCodigo, EMPRESA_TODA)
    If lErro <> AD_SQL_SUCESSO Then Error 33187

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 33188

    lErro = Comando_LockExclusive(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 55463

    lNumInt = CLng(sConteudo)
    sConteudo = CStr(lNumInt + iQtde)

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE MATConfig SET Conteudo = ?", lComandoSel, sConteudo)
    If lErro <> AD_SQL_SUCESSO Then Error 33189

    'Libera os comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    MATConfig_ObterNumInt = SUCESSO

    Exit Function

Erro_MATConfig_ObterNumInt:

    MATConfig_ObterNumInt = Err

    Select Case Err

        Case 33185, 33186
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33187, 33188
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MATCONFIG", Err, sCodigo)

        Case 33189
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MATCONFIG", Err, sCodigo)

        Case 55463
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_MATCONFIG", Err, sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151731)

    End Select

    'Libera os comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Function MovEstoque_Automatico_EmTransacao(ByVal iFilialEmpresa As Integer, lCodigo As Long) As Long
'retorna o número do próximo MovEstoque disponivel

Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lErro As Long
Dim iFim_de_Arquivo As Integer
Dim lCodigo_MovEstoque As Long
Dim lcodigo_automatico As Long
Dim sConteudo As String, sChave As String
Dim sConteudo2 As String

On Error GoTo Erro_MovEstoque_Automatico_EmTransacao

    lErro = CF("Customizacao_FilialEmpresa", iFilialEmpresa)
    If lErro <> SUCESSO Then gError 126789

    lComando = 0
    lComando1 = 0
    lComando2 = 0

    sChave = "NUM_PROX_MOV_ESTOQUE"
    sConteudo = String(STRING_MATCONFIG_CONTEUDO, 0)

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 35141

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 35142

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 35143

    'Pesquisa o número do MovEstoque gerado automaticamente pelo sistema
    lErro = Comando_ExecutarPos(lComando, "SELECT Conteudo FROM MATConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, sConteudo, sChave, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 35144

    'le o registro com o número do MovEstoque automático
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 35145

    'loca o registro que guarda o numero do MovEstoque gerado automaticamente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 35146

    lcodigo_automatico = CLng(sConteudo)

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de MovEstoque maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando1, "SELECT Codigo FROM MovimentoEstoque WHERE Codigo >= ? AND FilialEmpresa = ? ORDER BY Codigo", lCodigo_MovEstoque, lcodigo_automatico, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 35147

    'le o primeiro codigo >= ao codigo automatico
    iFim_de_Arquivo = Comando_BuscarPrimeiro(lComando1)

    'pesquisa o proximo número de codigo disponível
    Do While iFim_de_Arquivo <> AD_SQL_SEM_DADOS

        If lCodigo_MovEstoque > lcodigo_automatico Then Exit Do

        If lCodigo_MovEstoque = lcodigo_automatico Then
            lcodigo_automatico = lcodigo_automatico + 1
        End If

        iFim_de_Arquivo = Comando_BuscarProximo(lComando1)

    Loop

    'Valor de retorno da funcao
    lCodigo = lcodigo_automatico

    lcodigo_automatico = lcodigo_automatico + 1

    sConteudo2 = CStr(lcodigo_automatico)

    'atualiza o numero do MovEstoque gerado automaticamente
    lErro = Comando_ExecutarPos(lComando2, "UPDATE MATConfig SET Conteudo = ?", lComando, sConteudo2)
    If lErro <> AD_SQL_SUCESSO Then gError 35148

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    MovEstoque_Automatico_EmTransacao = SUCESSO

    Exit Function

Erro_MovEstoque_Automatico_EmTransacao:

    MovEstoque_Automatico_EmTransacao = gErr

    Select Case gErr

    Case 35141, 35142, 35143
        lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

    Case 35144, 35145
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MATCONFIG", gErr, sChave)

    Case 35146
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_MATCONFIG", gErr, sChave)

    Case 35147
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

    Case 35148
        lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MATCONFIG", gErr, sChave)

    Case 126789

    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151732)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function MovEstoque_Automatico(ByVal iFilialEmpresa As Integer, lCodigo As Long) As Long
'retorna o número do próximo MovEstoque disponivel

Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lErro As Long
Dim iFim_de_Arquivo As Integer
Dim lCodigo_MovEstoque As Long
Dim lcodigo_automatico As Long
Dim lTransacao As Long
Dim sConteudo As String
Dim sConteudo2 As String

On Error GoTo Erro_MovEstoque_Automatico

    lErro = CF("Customizacao_FilialEmpresa", iFilialEmpresa)
    If lErro <> SUCESSO Then gError 126791

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    sConteudo = String(STRING_MATCONFIG_CONTEUDO, 0)

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 30133

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 30134

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 30135

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 30136

    'Pesquisa o número do MovEstoque gerado automaticamente pelo sistema
    lErro = Comando_ExecutarPos(lComando, "SELECT Conteudo FROM MATConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, sConteudo, "NUM_PROX_MOV_ESTOQUE", iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 30137

    'le o registro com o número do MovEstoque automático
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 30138

    'loca o registro que guarda o numero do MovEstoque gerado automaticamente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 30139

    lcodigo_automatico = CLng(sConteudo)

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de MovEstoque maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando1, "SELECT Codigo FROM MovimentoEstoque WHERE Codigo >= ? AND FilialEmpresa = ? ORDER BY Codigo", lCodigo_MovEstoque, lcodigo_automatico, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 30140

    'le o primeiro codigo >= ao codigo automatico
    iFim_de_Arquivo = Comando_BuscarPrimeiro(lComando1)

    'pesquisa o proximo número de codigo disponível
    Do While iFim_de_Arquivo <> AD_SQL_SEM_DADOS

        If lCodigo_MovEstoque > lcodigo_automatico Then Exit Do

        If lCodigo_MovEstoque = lcodigo_automatico Then
            lcodigo_automatico = lcodigo_automatico + 1
        End If

        iFim_de_Arquivo = Comando_BuscarProximo(lComando1)

    Loop

    'Valor de retorno da funcao
    lCodigo = lcodigo_automatico

    lcodigo_automatico = lcodigo_automatico + 1

    sConteudo2 = CStr(lcodigo_automatico)

    'atualiza o numero do MovEstoque gerado automaticamente
    lErro = Comando_ExecutarPos(lComando2, "UPDATE MATConfig SET Conteudo = ?", lComando, sConteudo2)
    If lErro <> AD_SQL_SUCESSO Then gError 30141

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 30142

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    MovEstoque_Automatico = SUCESSO

    Exit Function

Erro_MovEstoque_Automatico:

    MovEstoque_Automatico = gErr

    Select Case gErr

    Case 30133, 30134, 30135
        lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

    Case 30136
        lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

    Case 30137, 30138
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MATCONFIG", gErr, sConteudo)

    Case 30139
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_MATCONFIG", gErr, sConteudo)

    Case 30140
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

    Case 30141
        lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MATCONFIG", gErr, sConteudo)

    Case 30142
        lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

    Case 126791

    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151733)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function MovEstoque_Interno_Grava(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MovEstoque_Interno_Grava

    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 30892

    'Testa o Movimento de Estoque de Requisição de Produção
    lErro = CF("MovEstoque_Interno_Grava0", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105179

    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 30898

    MovEstoque_Interno_Grava = SUCESSO

    Exit Function

Erro_MovEstoque_Interno_Grava:

    MovEstoque_Interno_Grava = gErr

    Select Case gErr

        Case 30892
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 30898
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 105179

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151734)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Public Function MovEstoque_Producao_Grava(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Grava a producao do movimento de estoque

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MovEstoque_Producao_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = SUCESSO Then gError 34679

    'Testa a producao do movimento de estoque
    lErro = CF("MovEstoque_Producao_Grava0", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105155

    'Confirmacao da transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 34701

    MovEstoque_Producao_Grava = SUCESSO

    Exit Function

Erro_MovEstoque_Producao_Grava:

    MovEstoque_Producao_Grava = gErr

    Select Case gErr

        Case 34679
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 34701
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 105155

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151735)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function OrdemDeProducao_TrataBaixaItem(ByVal objItemOP As ClassItemOP, alComando() As Long) As Long
'Deve ser chamada qdo um item da OP acaba de ser baixado
'De alComando(2) a alComando(10) devem estar "livres"

Dim lErro As Long
Dim tOrdemProducao As typeOrdemProducao, tItemOP As typeItemOP
Dim sComando_SQL As String
'Dim objItemOP As New ClassItemOP

On Error GoTo Erro_OrdemDeProducao_TrataBaixaItem

    'localiza a Ordem de Producao
    sComando_SQL = "SELECT DataEmissao, NumItens, NumItensBaixados FROM OrdensDeProducao WHERE FilialEmpresa = ? And Codigo = ?"
    lErro = Comando_ExecutarPos(alComando(2), sComando_SQL, 0, tOrdemProducao.dtDataEmissao, tOrdemProducao.iNumItens, tOrdemProducao.iNumItensBaixados, giFilialEmpresa, objItemOP.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 34686

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34687

    'nao encontrou ordem de produto
    If lErro = AD_SQL_SEM_DADOS Then Error 34688

    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 34689

'    'Se todos os Itens foram baixados , baixa a OP
'    If tOrdemProducao.iNumItensBaixados + 1 = tOrdemProducao.iNumItens Then
'
'        'Insere na tabela OrdensDeProducaoBaixadas
'        sComando_SQL = "INSERT INTO OrdensDeProducaoBaixadas ( FilialEmpresa, Codigo, DataEmissao, NumItens, NumItensBaixados) VALUES (?,?,?,?,?)"
'        lErro = Comando_Executar(alComando(4), sComando_SQL, giFilialEmpresa, objItemOP.sCodigo, tOrdemProducao.dtDataEmissao, tOrdemProducao.iNumItens, tOrdemProducao.iNumItens)
'        If lErro <> AD_SQL_SUCESSO Then Error 34691
'
'        tItemOP.sCodigo = String(STRING_OPCODIGO, 0)
'        tItemOP.sCcl = String(STRING_CCL, 0)
'        tItemOP.sProduto = String(STRING_PRODUTO, 0)
'        tItemOP.sSiglaUM = String(STRING_UM_SIGLA, 0)
'
'        'Lê todos os Itens da OP da Tabela ItensOrdemProducao a partir de giFilialEmpresa e objItemOP.sCodigo
'        sComando_SQL = "SELECT NumIntDoc, FilialEmpresa, Codigo, Item, Produto, FilialPedido, CodPedido, NumIntOrigem, Almoxarifado, Ccl, SiglaUM, Quantidade, DataInicioProd, DataFimProd, Prioridade, QuantidadeProd, Situacao, Destinacao FROM ItensOrdemProducao WHERE FilialEmpresa = ? And Codigo = ?"
'        lErro = Comando_ExecutarPos(alComando(5), sComando_SQL, 0, tItemOP.lNumIntDoc, tItemOP.iFilialEmpresa, tItemOP.sCodigo, tItemOP.iItem, tItemOP.sProduto, tItemOP.iFilialPedido, tItemOP.lCodPedido, tItemOP.lNumIntOrigem, tItemOP.iAlmoxarifado, tItemOP.sCcl, tItemOP.sSiglaUM, tItemOP.dQuantidade, tItemOP.dtDataInicioProd, tItemOP.dtDataFimProd, tItemOP.iPrioridade, tItemOP.dQuantidadeProd, tItemOP.iSituacao, tItemOP.iDestinacao, giFilialEmpresa, objItemOP.sCodigo)
'        If lErro <> AD_SQL_SUCESSO Then Error 34692
'
'        lErro = Comando_BuscarPrimeiro(alComando(5))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34693
'
'        'Para cada ítem lido
'        Do While lErro <> AD_SQL_SEM_DADOS
'
'            lErro = Comando_LockExclusive(alComando(5))
'            If lErro <> AD_SQL_SUCESSO Then Error 34694
'
'            'Insere na tabela ItensOrdemProducaoBaixadas
'            sComando_SQL = "INSERT INTO ItensOrdemProducaoBaixadas (NumIntDoc, FilialEmpresa, Codigo, Item, Produto, FilialPedido, CodPedido, NumIntOrigem, Almoxarifado, Ccl, SiglaUM, Quantidade, DataInicioProd, DataFimProd, Prioridade, QuantidadeProd, Situacao, Destinacao) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
'            lErro = Comando_Executar(alComando(6), sComando_SQL, tItemOP.lNumIntDoc, giFilialEmpresa, objItemOP.sCodigo, tItemOP.iItem, tItemOP.sProduto, tItemOP.iFilialPedido, tItemOP.lCodPedido, tItemOP.lNumIntOrigem, _
'            tItemOP.iAlmoxarifado, tItemOP.sCcl, tItemOP.sSiglaUM, tItemOP.dQuantidade, tItemOP.dtDataInicioProd, tItemOP.dtDataFimProd, tItemOP.iPrioridade, tItemOP.dQuantidadeProd, tItemOP.iSituacao, tItemOP.iDestinacao)
'
'            If lErro <> AD_SQL_SUCESSO Then Error 34695
'
'            objItemOP.iFilialEmpresa = tItemOP.iFilialEmpresa
'            objItemOP.lNumIntDoc = tItemOP.lNumIntDoc
'
'            'exclui empenhos associados ao itemOP
'            lErro = CF("Empenhos_Excluir_ItemOP1",objItemOP, alComando(9), alComando(10))
'            If lErro <> SUCESSO Then Error 55232
'
'            'Exclui da tabela ItensOrdemProducao
'            sComando_SQL = "DELETE FROM ItensOrdemProducao"
'            lErro = Comando_ExecutarPos(alComando(7), sComando_SQL, alComando(5))
'            If lErro <> AD_SQL_SUCESSO Then Error 34696
'
'            lErro = Comando_BuscarProximo(alComando(5))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34697
'
'        Loop
'
'        'Exclui OrdemProducao da tb OrdensProducao
'        sComando_SQL = "DELETE FROM OrdensDeProducao"
'        lErro = Comando_ExecutarPos(alComando(8), sComando_SQL, alComando(2))
'        If lErro <> AD_SQL_SUCESSO Then Error 34698
'
'    Else
        
        'Faz Update em OP
        sComando_SQL = "UPDATE OrdensDeProducao SET NumItensBaixados = NumItensBaixados + 1"
        lErro = Comando_ExecutarPos(alComando(3), sComando_SQL, alComando(2))
        If lErro <> AD_SQL_SUCESSO Then Error 34690

        'exclui empenhos associados ao itemOP
        lErro = CF("Empenhos_Excluir_ItemOP1", objItemOP, alComando(9), alComando(10))
        If lErro <> SUCESSO Then Error 55231

'    End If

    OrdemDeProducao_TrataBaixaItem = SUCESSO

    Exit Function

Erro_OrdemDeProducao_TrataBaixaItem:

    OrdemDeProducao_TrataBaixaItem = Err

    Select Case Err

        Case 34685
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITENSORDENSDEPRODUCAO", Err, tItemOP.iItem, objItemOP.sCodigo, giFilialEmpresa)

        Case 34686, 34687
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORDENSDEPRODUCAO", Err)

        Case 34688
            lErro = Rotina_Erro(vbOKOnly, "AVISO_OPCODIGO_NAO_CADASTRADO", Err, objItemOP.sCodigo)

        Case 34689
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ORDENSDEPRODUCAO", Err)

        Case 34690
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ORDENSDEPRODUCAO", Err, giFilialEmpresa, objItemOP.sCodigo)

        Case 34691
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ORDENSDEPRODUCAO", Err)

        Case 34692, 34693, 34697
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDENSPRODUCAO", Err)

        Case 34694
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSORDENSDEPRODUCAO", Err)

        Case 34695
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMOPBAIXADA", Err)

        Case 34696
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSORDENSDEPRODUCAO", Err)

        Case 34698
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ORDENSDEPRODUCAO", Err)

        Case 55231, 55232

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151736)

    End Select

    Exit Function

End Function

Function Empenho_Inserir_Batch(ByVal objEmpenho As ClassEmpenho, ByVal lComando As Long) As Long
'Insere um empenho da tabela de empenhos
'DEVE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dSaldo As Double

On Error GoTo Erro_Empenho_Inserir_Batch

    'Insere o Empenho na tabela Empenho
    lErro = Comando_Executar(lComando, "INSERT INTO Empenho (FilialEmpresa, Codigo, Produto, Almoxarifado, Quantidade, QuantidadeRequisitada, NumIntDocItemOP, Data) VALUES (?,?,?,?,?,?,?,?)", objEmpenho.iFilialEmpresa, objEmpenho.lCodigo, objEmpenho.sProduto, objEmpenho.iAlmoxarifado, objEmpenho.dQuantidade, objEmpenho.dQuantidadeRequisitada, objEmpenho.lNumIntDocItemOP, objEmpenho.dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 33202

    objEstoqueProduto.sProduto = objEmpenho.sProduto
    objEstoqueProduto.iAlmoxarifado = objEmpenho.iAlmoxarifado
    
    'Chama EstoqueProduto_AlterarEmpenho
    lErro = CF("EstoqueProduto_AlterarEmpenho", objEstoqueProduto, objEmpenho.dQuantidade)
    If lErro <> SUCESSO Then Error 33219
        
    Empenho_Inserir_Batch = SUCESSO

    Exit Function

Erro_Empenho_Inserir_Batch:

    Empenho_Inserir_Batch = Err

    Select Case Err

        Case 33202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_EMPENHO", Err, objEmpenho.lCodigo, objEmpenho.iFilialEmpresa)
            
        Case 33219

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 151737)

    End Select

    Exit Function

End Function

Function EstoqueProduto_AlterarEmpenho(ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal dQtde As Double) As Long
'Aumenta (ou diminui se dQtde for negativo) a qtde empenhada em um produto-almoxarifado
'objEstoqueProduto.sProduto e objEstoqueProduto.iAlmoxarifado tem que estar preenchidos
'DEVE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim dQuantEmpenhada As Double
Dim iIndice As Integer
Dim alComando(0 To 1) As Long

On Error GoTo Erro_EstoqueProduto_AlterarEmpenho

    'Abre os comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 33171
    Next
    
    'Pesquisar o estoque produto por produto e almoxarifado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT QuantEmpenhada FROM EstoqueProduto WHERE Produto= ? AND Almoxarifado = ?", 0, dQuantEmpenhada, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 33172

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33173

    'Não encontrou o estoque produto ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 33174
    
    '"Lock" no Estoque Produto
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then Error 33175
    
    'Atualiza a Quantidade Empenhada na tabela EstoqueProduto
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE EstoqueProduto SET QuantEmpenhada = QuantEmpenhada + ?, DataUltAtualizacao = ?, Exportado = ? ", alComando(0), dQtde, Date, 0)
    If lErro <> AD_SQL_SUCESSO Then Error 33176
    
    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    EstoqueProduto_AlterarEmpenho = SUCESSO

    Exit Function

Erro_EstoqueProduto_AlterarEmpenho:

    EstoqueProduto_AlterarEmpenho = Err

    Select Case Err

        Case 33171
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 33172, 33173
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO1", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 33174
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUE_PRODUTO_EMPENHO_NAO_CAD", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 33175
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEPRODUTO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 33176
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
        
        Case 33196

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151738)

    End Select

    'Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


Friend Function Produto_Valida_Alteracao(ByVal objProduto As ClassProduto, ByVal objProdutoBD As ClassProduto) As Long
'Verifica se o objProduto é compativel com a versao do produto que está no bd (objProdutoBD)

Dim objProduto1 As New ClassProduto
Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando4 As Long
Dim lComando5 As Long
Dim lComando3 As Long 'Incluido por Leo em 15/02/02
Dim iNivel As Integer
Dim iAlmoxarifado As Integer
Dim objUM As New ClassUnidadeDeMedida
Dim objTipoProduto As New ClassTipoDeProduto
Dim objProdutoSubst As New ClassProduto
Dim iTemFilho As Integer
Dim sProduto As String
Dim iAno As Integer 'Incluido por Leo em 15/02/02
Dim iTipo As Integer
Dim sCodigo As String
Dim sCodigo1 As String
Dim iIndice As Integer, bProdComMovtoEst As Boolean
Dim colItensRomaneioGrade As New Collection
Dim objItemRomaneioGrade As ClassItemRomaneioGrade
Dim iIndice2 As Integer
Dim iIndice3 As Integer, iIndice4 As Integer
Dim iContAchou As Integer
Dim sProdutoPai As String
Dim bAchou As Boolean

On Error GoTo Erro_Produto_Valida_Alteracao

    'Abre o Comando
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 31164

    'Abre o Comando
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 83019

    'Abre o Comando
    lComando3 = Comando_Abrir() 'Incluido por Leo em 15/02/02
    If lComando3 = 0 Then gError 94325
    
     'Abre o Comando
    lComando4 = Comando_Abrir()
    If lComando4 = 0 Then gError 112540
    
    'Abre o Comando
    lComando5 = Comando_Abrir()
    If lComando5 = 0 Then gError 112545

    'Se trocou o Nome Reduzido
    If UCase(objProdutoBD.sNomeReduzido) <> UCase(objProduto.sNomeReduzido) Then

        objProduto1.sNomeReduzido = objProduto.sNomeReduzido
        'Verifica se já existe um Produto com o mesmo Nome
        lErro = CF("Produto_Le_NomeReduzido", objProduto1)
        If lErro <> SUCESSO And lErro <> 26927 Then gError 26928
        If lErro = SUCESSO Then gError 26929 'se houver => erro
        
    End If
    
    'Se trocou a referencia
    If Len(Trim(objProduto.sReferencia)) > 0 Then
        If UCase(objProdutoBD.sReferencia) <> UCase(objProduto.sReferencia) Then
    
            'verificar se ele participa de algum outro produto
            lErro = Comando_Executar(lComando4, "SELECT Tipo FROM Produtos WHERE Referencia = ? AND Codigo <> ? ", iTipo, objProduto.sReferencia, objProduto.sCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 112533
            
            lErro = Comando_BuscarPrimeiro(lComando4)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112534
            
            'se ele encontrar, significa erro ( referencia não pode ser duplicada devido ao módulo Loja)
            If lErro = AD_SQL_SUCESSO Then gError 112535
       End If
    End If
    
    If gobjMAT.iAceitaEANRepetido = 0 Then
    
        'se tem o código de barras
        If objProduto.colCodBarras.Count > 0 Then
            For iIndice = 1 To objProduto.colCodBarras.Count
              sCodigo = objProduto.colCodBarras.Item(iIndice)
              
              sCodigo1 = String(STRING_PRODUTO, 0)
              
              'verificar se ele participa de algum outro produto
              lErro = Comando_Executar(lComando5, "SELECT CodProduto FROM ProdutoCodBarras WHERE CodBarras = ? AND CodProduto <> ?", sCodigo1, sCodigo, objProduto.sCodigo)
              If lErro <> AD_SQL_SUCESSO Then gError 112542
              
              lErro = Comando_BuscarPrimeiro(lComando5)
              If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112543
              
              'se ele encontrar, significa erro ( Código não pode ser duplicado)
              If lErro = AD_SQL_SUCESSO Then gError 112544
            Next
        End If
    
    End If
    
    'se estiver desmarcando o item p/participar de kit como folha final
    If objProduto.iKitBasico <> objProdutoBD.iKitBasico And objProduto.iKitBasico = DESMARCADO Then

        'verificar se ele participa de algum kit como folha final
        lErro = Comando_Executar(lComando1, "SELECT Nivel FROM ProdutoKit AS PX WHERE Produto = ? AND Nivel > 0 AND NOT EXISTS (SELECT PY.SeqPai FROM ProdutoKit AS PY WHERE PX.ProdutoRaiz = PY.ProdutoRaiz AND PX.Versao = PY.Versao AND PX.Nivel = PY.Nivel-1 AND PX.Seq = PY.SeqPai)", iNivel, objProduto.sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 20734
        
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 20735
        
        'se ele não encontrar, significa
        If lErro = AD_SQL_SUCESSO Then gError 26933 'se isto ocorrer => erro
                                
    End If

    'se estiver desmarcando o item p/participar de kit como intermediario
    If objProduto.iKitInt <> objProdutoBD.iKitInt And objProduto.iKitInt = DESMARCADO Then

        'verificar se ele já é pai de algum ramo do kit
        lErro = Comando_Executar(lComando1, "SELECT Nivel FROM ProdutoKit AS PX WHERE Produto = ? AND Nivel > 0 AND EXISTS (SELECT PY.SeqPai FROM ProdutoKit AS PY WHERE PX.ProdutoRaiz = PY.ProdutoRaiz AND PX.Versao = PY.Versao AND PX.Nivel = PY.Nivel-1 AND PX.Seq = PY.SeqPai)", iNivel, objProduto.sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 26931
        
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 26932
        
        If lErro = AD_SQL_SUCESSO Then gError 20733 'se isto ocorrer => erro

    End If
    
    objUM.iClasse = objProduto.iClasseUM
    
    'se trocou classeUM e/ou UMEstoque
    If objProduto.iClasseUM <> objProdutoBD.iClasseUM Or UCase(objProduto.sSiglaUMEstoque) <> UCase(objProdutoBD.sSiglaUMEstoque) Then
        
            'nao pode alterar o par (ClasseUM,UM de estoque) se houver reg em EstoqueProduto
            lErro = Comando_Executar(lComando1, "SELECT Almoxarifado FROM EstoqueProduto WHERE Produto = ?", iAlmoxarifado, objProduto.sCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 26934

            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 26935
            If lErro = SUCESSO Then gError 26936

            objUM.sSigla = objProduto.sSiglaUMEstoque
            'Lê e bloqueia a U.M. p/garantir sua existencia
            lErro = CF("UM_Le_Lock", objUM)
            If lErro <> SUCESSO Then gError 26944
    
    End If

    'Se trocou a U.M. de compra
    If objProduto.iClasseUM <> objProdutoBD.iClasseUM Or UCase(objProduto.sSiglaUMCompra) <> UCase(objProdutoBD.sSiglaUMCompra) Then
        objUM.sSigla = objProduto.sSiglaUMCompra
        'Lê e bloqueia a U.M.
        lErro = CF("UM_Le_Lock", objUM)
        If lErro <> SUCESSO Then gError 26938
    End If
    
    'Se trocou a U.M. de Venda
    If objProduto.sSiglaUMVenda <> objProdutoBD.sSiglaUMVenda Then
                    
    'Incluido por Leo em 15/02/02
                    
        'Verifica se esse produto já entrou no faturamento.
        lErro = Comando_Executar(lComando3, "SELECT Ano FROM SldMesFat WHERE Produto = ?", iAno, objProduto.sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 94326
        
        lErro = Comando_BuscarPrimeiro(lComando3)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94327
        
        'Se esse produto já foi faturado, Erro, Não pode trocar a Unidade de Medida de Venda.
        If lErro = SUCESSO Then gError 94328
                                   
    'Leo até aqui
                                   
        objUM.sSigla = objProduto.sSiglaUMVenda
        'Lê e bloqueia a U.M.
        lErro = CF("UM_Le_Lock", objUM)
        If lErro <> SUCESSO Then gError 26937
    End If
    
    If objProduto.iClasseUM <> objProdutoBD.iClasseUM Then
    
        lErro = Produto_Valida_Alteracao_UM(objProduto)
        If lErro <> SUCESSO Then gError 26937
    
    End If

    'se trocou o tipo de produto
    If objProduto.iTipo <> objProdutoBD.iTipo Then
        
        objTipoProduto.iTipo = objProduto.iTipo
        'ler e bloquear o tipo de produto
        lErro = CF("TipoDeProduto_Lock", objTipoProduto)
        If lErro <> SUCESSO Then gError 26952

    End If

    'Se alterou o Substituto1
    If Len(Trim(objProduto.sSubstituto1)) > 0 And UCase(objProdutoBD.sSubstituto1) <> UCase(objProduto.sSubstituto1) Then
        
        objProdutoSubst.sCodigo = objProduto.sSubstituto1
        'ler e bloquear o Substituto1
        lErro = CF("Produto_Lock", objProdutoSubst)
        If lErro <> SUCESSO Then gError 26955

    End If
    
    'Se alterou o Substituto2
    If Len(Trim(objProduto.sSubstituto2)) > 0 And UCase(objProdutoBD.sSubstituto2) <> UCase(objProduto.sSubstituto2) Then
        
        objProdutoSubst.sCodigo = objProduto.sSubstituto2
        'Ler e bloquear o Substituto2
        lErro = CF("Produto_Lock", objProdutoSubst)
        If lErro <> SUCESSO Then gError 26956
    
    End If

    'Se está alterando o produto de final para gerencial
    If objProduto.iGerencial <> objProdutoBD.iGerencial And objProduto.iGerencial = GERENCIAL Then
        
        lErro = Produto_Valida_AlteracaoGerFinal(objProduto.sCodigo)
        If lErro <> SUCESSO Then gError 20766

    ElseIf objProduto.iGerencial <> objProdutoBD.iGerencial And objProduto.iGerencial <> GERENCIAL Then
    
        'Verifica se o Produto tem filhos
        lErro = CF("Produto_Tem_Filho", objProduto.sCodigo, iTemFilho)
        If lErro <> SUCESSO Then gError 69566
    
        'Se tiver erro
        If iTemFilho = True Then gError 69567
    
    End If

    'Se o Produto for gerencial e tiver alterado a grade
    If objProduto.iGerencial = GERENCIAL And UCase(objProduto.sGrade) <> UCase(objProdutoBD.sGrade) Then

        'Se o produto nao tinha grade e agora tem
        If Len(Trim(objProdutoBD.sGrade)) = 0 Then
        
            'Lê os filhos analíticos do produto pai de grade passado
            lErro = CF("Produto_Le_Filhos_Grade", objProduto, colItensRomaneioGrade)
            If lErro <> SUCESSO And lErro <> 86304 Then gError 86397
            
            'O produto não tem filhos de grade ou seus filhos são analíticos
            If lErro = 86304 Then gError 86398
            
            'Para cada Item lido
            For iIndice = 1 To colItensRomaneioGrade.Count
                
                Set objItemRomaneioGrade = colItensRomaneioGrade(iIndice)
                
                'Verificar nos demais
                For iIndice2 = iIndice + 1 To colItensRomaneioGrade.Count
                    
                    iContAchou = 0
                    'Se há uma combinação igual de categorias
                    For iIndice3 = 1 To objItemRomaneioGrade.colCategoria.Count
                        For iIndice4 = 1 To colItensRomaneioGrade(iIndice2).colCategoria.Count
                            If (objItemRomaneioGrade.colCategoria(iIndice3).sCategoria = colItensRomaneioGrade(iIndice2).colCategoria(iIndice4).sCategoria) And (objItemRomaneioGrade.colCategoria(iIndice3).sItem = colItensRomaneioGrade(iIndice2).colCategoria(iIndice4).sItem) Then
                                iContAchou = iContAchou + 1
                                Exit For
                            End If
                        Next
                        If iContAchou = 0 Then Exit For
                    Next
                    
                    If iContAchou = objItemRomaneioGrade.colCategoria.Count Then gError 86399
                Next
                            
            Next
                       
        'Se o produto já tinha Grade
        Else
            
            lErro = ProdutoGrade_Valida_Utilizacao(objProdutoBD)
            If lErro <> SUCESSO Then gError 86400
        
        End If
        
    'Se for um produto filho
    ElseIf Not (objProduto.iGerencial = GERENCIAL) Then
        
        'Verificar se ele possui um pai de grade
        'Busca, caso exista, o produto pai de grade o prod em questão
        lErro = CF("Produto_Le_PaiGrade", objProduto, sProdutoPai)
        If lErro <> SUCESSO Then gError 86401
        
        If Len(Trim(sProdutoPai)) > 0 Then
        
            objProduto1.sCodigo = sProdutoPai
            'Se possuir
            
            lErro = CF("Produto_Le", objProduto1)
            If lErro <> SUCESSO And lErro <> 28030 Then Error 86402
    
            If lErro = 28030 Then gError 86403
            
            'Lê os filhos analíticos do produto pai de grade passado
            lErro = CF("Produto_Le_Filhos_Grade", objProduto1, colItensRomaneioGrade)
            If lErro <> SUCESSO And lErro <> 86304 Then gError 86404
                
            For Each objItemRomaneioGrade In colItensRomaneioGrade
                
                If UCase(objItemRomaneioGrade.sProduto) <> UCase(objProduto.sCodigo) Then
                    
                    For iIndice = 1 To objItemRomaneioGrade.colCategoria.Count
                        bAchou = False
                        For iIndice2 = 1 To objProduto.colCategoriaItem.Count
                            If (UCase(objItemRomaneioGrade.colCategoria(iIndice).sCategoria) = UCase(objProduto.colCategoriaItem(iIndice2).sCategoria)) And (UCase(objItemRomaneioGrade.colCategoria(iIndice).sItem) = UCase(objProduto.colCategoriaItem(iIndice2).sItem)) Then
                                bAchou = True
                                Exit For
                            End If
                        Next
                        If Not bAchou Then Exit For
                    Next
                    
                    If bAchou Then gError 86405
                    
                End If
            
            Next
        
        End If

    End If
    
    'se vou precisar verificar se já houve algum movto de estoque p/o produto
    If objProduto.iCompras <> objProdutoBD.iCompras Or objProduto.iApropriacaoCusto <> objProdutoBD.iApropriacaoCusto Then

        bProdComMovtoEst = False
        
        sProduto = String(STRING_PRODUTO, 0)

        'Verifica se o Produto está envolvido em algum Movimento de Estoque
        lErro = Comando_Executar(lComando1, "SELECT Produto FROM MovimentoEstoque WHERE Produto=?", sProduto, objProduto.sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 76345

        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76346

        'Se encontrou==>erro
        If lErro = AD_SQL_SUCESSO Then bProdComMovtoEst = True

    End If
    
    If bProdComMovtoEst And objProduto.iCompras <> objProdutoBD.iCompras Then gError 55122
    
    If bProdComMovtoEst And objProduto.iApropriacaoCusto <> objProdutoBD.iApropriacaoCusto Then gError 55123

       'Permite alterar de um produto rastreado para não rastreado e vice-versa ou o tipo do rastreamento (lote x FilialOP)
'''    If objProduto.iRastro <> objProdutoBD.iRastro Then
'''
'''        sProduto = String(STRING_PRODUTO, 0)
'''
'''        'Verifica se o Produto está envolvido em algum Movimento de Estoque
'''        lErro = Comando_Executar(lComando1, "SELECT Produto FROM MovimentoEstoque WHERE Produto=?", sProduto, objProduto.sCodigo)
'''        If lErro <> AD_SQL_SUCESSO Then gError 76345
'''
'''        lErro = Comando_BuscarPrimeiro(lComando1)
'''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76346
'''
'''        'Se encontrou==>erro
'''        If lErro = AD_SQL_SUCESSO Then gError 76347
'''
'''        sProduto = String(STRING_PRODUTO, 0)
'''
'''        'Verifica se o Produto está envolvido em algum Lote de Rastreamento
'''        lErro = Comando_Executar(lComando2, "SELECT Produto FROM RastreamentoLote WHERE Produto=?", sProduto, objProduto.sCodigo)
'''        If lErro <> AD_SQL_SUCESSO Then gError 83020
'''
'''        lErro = Comando_BuscarPrimeiro(lComando2)
'''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83021
'''
'''        'Se encontrou==>erro
'''        If lErro = AD_SQL_SUCESSO Then gError 83022
'''
'''    End If
    
    'Fecha o comando
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3) 'Incluido por Leo em 15/02/02
    Call Comando_Fechar(lComando4)
    Call Comando_Fechar(lComando5)
    
    Produto_Valida_Alteracao = SUCESSO

    Exit Function

Erro_Produto_Valida_Alteracao:

    Produto_Valida_Alteracao = gErr

    Select Case gErr

        Case 20733
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_KIT_NAO_INTERMEDIARIO", gErr)

        Case 20734, 20735, 26931, 26932
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT", gErr)

        Case 20766, 26928, 26938, 26944, 26937, 26952, 26955, 26956, 69566

        Case 26929
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_MESMO_NOME_REDUZIDO", gErr, objProduto.sNomeReduzido)

        Case 26933
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_KIT_NAO_BASICO", gErr)

        Case 26934, 26935
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO", gErr, objProduto.sCodigo)

        Case 26936
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_UMESTOQUE_ALTERACAO", gErr)

        Case 31164, 83019, 94325, 112540, 112545
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 55122
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ALTERACAO_COMPRA", gErr, objProduto.sCodigo)
        
        Case 55123
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ALTERACAO_APROPRIACAO", gErr, objProduto.sCodigo)

        Case 69567
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FINAL_COM_FILHOS", objProduto.sCodigo)

        Case 76345, 76346
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
            
        Case 76347
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ALTERACAO_RASTRO", gErr, objProduto.sCodigo)
            
        Case 83020, 83021
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTE1", gErr, objProduto.sCodigo)
        
        Case 83022
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ALTERACAO_RASTRO1", gErr, objProduto.sCodigo)
           
        Case 86397, 86400, 86401, 86402, 86404
        
        Case 86398
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_PAI_GRADE_SEM_FILHOS", gErr, objProduto.sCodigo)
            
        Case 86399
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILHOS_GRADES_IGUAIS", gErr, objItemRomaneioGrade.sProduto, colItensRomaneioGrade(iIndice2).sProduto)
        
        Case 86403
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto1.sCodigo)
        
        Case 86405
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILHOS_GRADES_IGUAIS", gErr, objItemRomaneioGrade.sProduto, objProduto.sCodigo)
        
        Case 94326, 94327 'Incluido por Leo em 15/02/02
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT1", gErr)
            
        Case 94328 'Incluido por Leo em 15/02/02
            lErro = Rotina_Erro(vbOKOnly, "ERRO_UMVENDA_PROIBIDO_ALTERAR", gErr, objProdutoBD.sSiglaUMVenda, objProduto.sSiglaUMVenda)
            
        Case 112533, 112534
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objProduto.sCodigo)
        
        Case 112535
            Call Rotina_Erro(vbOKOnly, "ERRO_REFERENCIA_JA_EXISTENTE", gErr)
            
        Case 112542, 112543
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOCODBARRAS", gErr)
        
        Case 112544
            Call Rotina_Erro(vbOKOnly, "ERRO_CODBARRAS_EXISTENTE", gErr, sCodigo)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151739)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3) 'Incluido por Leo em 15/02/02
    Call Comando_Fechar(lComando4)
    Call Comando_Fechar(lComando5)
    
    Exit Function

End Function
Private Function Produto_Grava_CategoriaNaColecao(ByVal colCategoriaItem As Collection, ByVal sCategoria As String) As Long
'Retorna o Indice da Categoria na coleção ou Zero se não acha-la (na coleção)

Dim iIndice As Integer
Dim objProdutoCategoria As New ClassProdutoCategoria

    'Pesquisa a Categoria na coleção
    For iIndice = 1 To colCategoriaItem.Count

        Set objProdutoCategoria = colCategoriaItem.Item(iIndice)

        'Se achou a Sigla na coleção
        If objProdutoCategoria.sCategoria = sCategoria Then

            Produto_Grava_CategoriaNaColecao = iIndice

            Exit Function

        End If

    Next

    Produto_Grava_CategoriaNaColecao = 0

End Function

Private Function Produto_Grava_TabelaNaColecao(ByVal colTabelaPrecoItem As Collection, ByVal iCodTabela As Integer, ByVal dtDataVigencia As Date) As Long
'Procura na coleção o Codigo da Tabela passado

Dim iIndice As Integer
Dim objTabelPrecoItem As ClassTabelaPrecoItem

    For iIndice = 1 To colTabelaPrecoItem.Count

        Set objTabelPrecoItem = colTabelaPrecoItem.Item(iIndice)

        If objTabelPrecoItem.iCodTabela = iCodTabela And objTabelPrecoItem.dtDataVigencia = dtDataVigencia Then

            Produto_Grava_TabelaNaColecao = iIndice

            Exit Function

        End If
    Next

    Produto_Grava_TabelaNaColecao = 0

End Function

Friend Function Produto_Altera_TabelaPrecoItens(ByVal sProduto As String, ByVal colTabelaPrecoItem As Collection) As Long
'Atualiza os precos para a filial corrente (ou EMPRESA_TODA) durante a alteracao de um produto

Dim lErro As Long
Dim iCodTabela As Integer
Dim dtDataVigencia As Date
Dim lComando1 As Long
Dim lComando2 As Long
Dim iIndice As Integer
Dim objTabelaPrecoItem As ClassTabelaPrecoItem
Dim dPreco As Double

On Error GoTo Erro_Produto_Altera_TabelaPrecoItens

    'Abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 31168

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 31169

    lErro = Comando_ExecutarPos(lComando1, "SELECT CodTabela,DataVigencia,Preco FROM TabelasDePrecoItens WHERE CodProduto = ? AND FilialEmpresa = ? ORDER BY CodTabela", 0, iCodTabela, dtDataVigencia, dPreco, sProduto, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 26966

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26967

    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Pesquisa na colecao o codigo e a data de acordo com o parametro, e retorna o indice na colecao
        iIndice = Produto_Grava_TabelaNaColecao(colTabelaPrecoItem, iCodTabela, dtDataVigencia)
        
        'encontrou
        If iIndice <> 0 Then

            Set objTabelaPrecoItem = colTabelaPrecoItem.Item(iIndice)

            'Se houver sido alterado o Item
            If objTabelaPrecoItem.dPreco <> dPreco Then

                'Altera a Tabela TabelaPrecoItem
                lErro = Comando_ExecutarPos(lComando2, "UPDATE TabelasDePrecoItens SET Preco = ?", lComando1, objTabelaPrecoItem.dPreco)
                If lErro <> AD_SQL_SUCESSO Then Error 31169

            End If

            'Retira da coleção
            colTabelaPrecoItem.Remove (iIndice)
        'nao encontrou
        Else

            'Excluir registro em TabelaPrecoItem
            lErro = Comando_ExecutarPos(lComando2, "DELETE FROM TabelasDePrecoItens", lComando1)
            If lErro <> AD_SQL_SUCESSO Then Error 31170

        End If

        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26968

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Produto_Altera_TabelaPrecoItens = SUCESSO

    Exit Function

Erro_Produto_Altera_TabelaPrecoItens:

    Produto_Altera_TabelaPrecoItens = Err

    Select Case Err

        Case 31168, 31169
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 26966, 26967, 26968
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS", Err)

        Case 31169
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TABELASDEPRECOITENS", Err)

        Case 31170
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TABELASDEPRECOITENS", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151740)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function CategoriaProdutoItem_Lock(ByVal sCategoriaProduto As String, ByVal sItemCategoria As String, ByVal lComando As Long) As Long
'faz lock shared de uma CategoriaProdutoItem para garantir a sua existencia

Dim sCategoriaItem As String
Dim lErro As Long

On Error GoTo Erro_CategoriaProdutoItem_Lock

    sCategoriaItem = String(STRING_CATEGORIAPRODUTOITEM_ITEM, 0)
                
    'Pesquisa a Item da CategoriaProduto
    lErro = Comando_ExecutarLockado(lComando, "SELECT Item FROM CategoriaProdutoItem WHERE Categoria = ? AND Item = ?", sCategoriaItem, sCategoriaProduto, sItemCategoria)
    If lErro <> AD_SQL_SUCESSO Then Error 18646

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18649

    'Se não encontrou ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18650

    '"Lock" da CategoriaProdutoItem
    lErro = Comando_LockShared(lComando)
    If lErro <> SUCESSO Then Error 18653
    
    CategoriaProdutoItem_Lock = SUCESSO
    
    Exit Function
    
Erro_CategoriaProdutoItem_Lock:

    CategoriaProdutoItem_Lock = Err
    
    Select Case Err
    
        Case 18646, 18649
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTOITEM", Err, sCategoriaProduto)
        
        Case 18650
        
        Case 18653
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CATEGORIAPRODUTOITEM", Err, sCategoriaProduto, sItemCategoria)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151741)

    End Select

    Exit Function
    
End Function

Function Produto_LerBloquear(ByVal sProduto As String, ByVal lComando As Long) As Long

Dim lErro As Long
Dim sCodigoProduto As String

On Error GoTo Erro_Produto_LerBloquear

    sCodigoProduto = String(STRING_PRODUTO, 0)
    
    lErro = Comando_ExecutarLockado(lComando, "SELECT Codigo FROM Produtos WHERE Codigo = ?", sCodigoProduto, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 34546

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34547

    If lErro = AD_SQL_SEM_DADOS Then Error 34548

    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 34549

    Produto_LerBloquear = SUCESSO
    
    Exit Function
    
Erro_Produto_LerBloquear:

    Produto_LerBloquear = Err
    
    Select Case Err
    
    Case 34546, 34547
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", Err, sProduto)
        
    Case 34548
        lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, sProduto)
    
    Case 34549
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", Err, sProduto)
    
    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151742)
        
    End Select
    
    Exit Function
    
End Function

Function Almoxarifado_Lock(ByVal iAlmoxarifado As Integer, ByVal lComando As Long) As Long

Dim lErro As Long
Dim iAlmox As Integer

On Error GoTo Erro_Almoxarifado_Lock
    
    lErro = Comando_ExecutarLockado(lComando, "SELECT Codigo FROM Almoxarifado WHERE Codigo = ?", iAlmox, iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 34550

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34551

    If lErro = AD_SQL_SEM_DADOS Then Error 34552

    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 34553
    
    Almoxarifado_Lock = SUCESSO
    
    Exit Function
    
Erro_Almoxarifado_Lock:

    Almoxarifado_Lock = Err
    
    Select Case Err
    
        Case 34550, 34551
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", Err, iAlmoxarifado)
    
        Case 34552
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_INEXISTENTE", Err, iAlmoxarifado)
        
        Case 34553
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO", Err, iAlmoxarifado)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151743)
    
    End Select
    
    Exit Function
    
End Function

Public Function MovEstoque_Grava_Generico(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Grava o movimento de estoque

Dim lErro As Long
Dim lTransacao As Long
Dim objItemMovEstoque As ClassItemMovEstoque

On Error GoTo Erro_MovEstoque_Grava_Generico

    lTransacao = Transacao_Abrir()
    If lTransacao = SUCESSO Then gError 36492

    lErro = CF("MovEstoque_Grava_Generico1", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105131

    'Confirmacao da transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 36495

    MovEstoque_Grava_Generico = SUCESSO

    Exit Function

Erro_MovEstoque_Grava_Generico:

    MovEstoque_Grava_Generico = gErr

    Select Case gErr

        Case 36492
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 36495
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 105131

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151744)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function EstoqueProduto_Atualiza2(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'Atualiza a tabela de EstoqueProduto utilizando os valores passados atraves de objEstoqueProduto.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long

On Error GoTo Erro_EstoqueProduto_Atualiza2
    
    'Atualiza a tabela de estoqueproduto para o produto/almoxarifado em questão
    lErro = Comando_ExecutarPos(lComando2, "UPDATE EstoqueProduto SET QuantDispNossa = ?, QuantRecIndl = ?, QuantIndOutras = ?, QuantDefeituosa = ?, QuantConsig3 = ?, QuantConsig = ?, QuantDemo3 = ?, QuantDemo = ?, QuantConserto3 = ?, QuantConserto = ?, QuantOutras3 = ?, QuantOutras = ?, QuantReservada = ?, QuantReservadaConsig = ?, DataUltAtualizacao = ?, Exportado = ? ", lComando1, _
    objEstoqueProduto.dQuantDispNossa, objEstoqueProduto.dQuantRecIndl, objEstoqueProduto.dQuantInd, objEstoqueProduto.dQuantDefeituosa, objEstoqueProduto.dQuantConsig3, objEstoqueProduto.dQuantConsig, objEstoqueProduto.dQuantDemo3, objEstoqueProduto.dQuantDemo, objEstoqueProduto.dQuantConserto3, objEstoqueProduto.dQuantConserto, objEstoqueProduto.dQuantOutras3, objEstoqueProduto.dQuantOutras, objEstoqueProduto.dQuantReservada, objEstoqueProduto.dQuantReservadaConsig, Date, 0)
    If lErro <> AD_SQL_SUCESSO Then gError 36669

    EstoqueProduto_Atualiza2 = SUCESSO

    Exit Function

Erro_EstoqueProduto_Atualiza2:

    EstoqueProduto_Atualiza2 = gErr

    Select Case gErr

        Case 36669
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151745)

    End Select

    Exit Function

End Function

Function SldDiaEstAlm_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal iAlmoxarifado As Integer) As Long
'Atualiza a tabela de SldDiaEstAlm utilizando os valores passados atraves de objSldDiaEst e iAlmoxarifado.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim dtData As Date

On Error GoTo Erro_SldDiaEstAlm_Atualiza

    'Le a tabela de SldDiaEstAlm para o Almoxarifado/produto/data em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Data FROM SldDiaEstAlm WHERE Almoxarifado = ? AND Produto = ? AND Data = ?", 0, dtData, iAlmoxarifado, objSldDiaEst.sProduto, objSldDiaEst.dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 40110

    'leitura do registro referente ao almoxarifado/produto/data em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 40111
    
    'se não encontrou um registro para a data em questão ==> insere um registro
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Insere um registro na tabela de SldDiaEstAlm para o almoxarifado/produto/data em questão
        lErro = Comando_Executar(lComando2, "INSERT INTO SldDiaEstAlm (Almoxarifado, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons, QuantEntCusto, ValorEntCusto, QuantSaiCusto, ValorSaiCusto, QuantVendConsig3, ValorVendConsig3, QuantEntConsig3, ValorEntConsig3, QuantSaiConsig3, ValorSaiConsig3, QuantEntDemo3, ValorEntDemo3, QuantSaiDemo3, ValorSaiDemo3, QuantEntConserto3, ValorEntConserto3, QuantSaiConserto3, ValorSaiConserto3, QuantEntOutros3, ValorEntOutros3, QuantSaiOutros3, ValorSaiOutros3, QuantEntBenef3, ValorEntBenef3, QuantSaiBenef3, ValorSaiBenef3," & _
        "QuantEntConsig, ValorEntConsig, QuantSaiConsig, ValorSaiConsig, QuantEntDemo, ValorEntDemo, QuantSaiDemo, ValorSaiDemo, QuantEntConserto, ValorEntConserto, QuantSaiConserto, ValorSaiConserto, QuantEntOutros, ValorEntOutros, QuantSaiOutros, ValorSaiOutros, QuantEntBenef, ValorEntBenef, QuantSaiBenef, ValorSaiBenef, QuantEntRecIndl, ValorEntRecIndl, QuantSaiRecIndl, ValorSaiRecIndl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        iAlmoxarifado, objSldDiaEst.sProduto, objSldDiaEst.dtData, objSldDiaEst.dQuantEntrada, objSldDiaEst.dQuantSaida, objSldDiaEst.dQuantCons, objSldDiaEst.dQuantVend, objSldDiaEst.dValorEntrada, objSldDiaEst.dValorSaida, objSldDiaEst.dQuantComp, objSldDiaEst.dValorComp, objSldDiaEst.dValorVend, objSldDiaEst.dValorCons, objSldDiaEst.dQuantEntCusto, objSldDiaEst.dValorEntCusto, objSldDiaEst.dQuantSaiCusto, objSldDiaEst.dValorSaiCusto, objSldDiaEst.dQuantVendConsig3, objSldDiaEst.dValorVendConsig3, _
        objSldDiaEst.dQuantEntConsig3, objSldDiaEst.dValorEntConsig3, objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3, objSldDiaEst.dValorEntDemo3, objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3, objSldDiaEst.dValorEntConserto3, objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3, objSldDiaEst.dValorEntOutros3, objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3, objSldDiaEst.dValorEntBenef3, objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorSaiBenef3, _
        objSldDiaEst.dQuantEntConsig, objSldDiaEst.dValorEntConsig, objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo, objSldDiaEst.dValorEntDemo, objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto, objSldDiaEst.dValorEntConserto, objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros, objSldDiaEst.dValorEntOutros, objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef, objSldDiaEst.dValorEntBenef, objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorSaiBenef, objSldDiaEst.dQuantEntRecIndl, _
        objSldDiaEst.dValorEntRecIndl, objSldDiaEst.dQuantSaiRecIndl, objSldDiaEst.dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 40112
    
    
    Else
        'se encontrou ==> atualiza o registro
    
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 40113
    
        'Atualiza a tabela de SldDiaEst para a filial/produto/data em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaEstAlm SET QuantEntrada = QuantEntrada + ?, QuantSaida = QuantSaida + ?, QuantCons = QuantCons + ?, QuantVend = QuantVend + ?, ValorEntrada = ValorEntrada + ?, ValorSaida = ValorSaida + ?, QuantComp = QuantComp + ?, ValorComp = ValorComp + ?, ValorVend = ValorVend + ?, ValorCons = ValorCons + ?, QuantVendConsig3 = QuantVendConsig3 + ?, ValorVendConsig3 = ValorVendConsig3 + ?, QuantEntCusto = QuantEntCusto + ?, ValorEntCusto = ValorEntCusto + ?, QuantSaiCusto = QuantSaiCusto + ?, ValorSaiCusto = ValorSaiCusto + ?, QuantEntConsig3 = QuantEntConsig3 + ?, ValorEntConsig3 = ValorEntConsig3 + ?, QuantSaiConsig3 = QuantSaiConsig3 + ?, ValorSaiConsig3 = ValorSaiConsig3 + ?, QuantEntDemo3 = QuantEntDemo3 + ?, ValorEntDemo3 = ValorEntDemo3 + ?, QuantSaiDemo3 = QuantSaiDemo3 + ?, ValorSaiDemo3 = ValorSaiDemo3 + ?, " & _
                                    "QuantEntConserto3 = QuantEntConserto3 + ?, ValorEntConserto3 = ValorEntConserto3 + ?, QuantSaiConserto3 = QuantSaiConserto3 + ?, ValorSaiConserto3 = ValorSaiConserto3 + ?, QuantEntOutros3 = QuantEntOutros3 + ?, ValorEntOutros3 = ValorEntOutros3 + ?, QuantSaiOutros3 = QuantSaiOutros3 + ?, ValorSaiOutros3 = ValorSaiOutros3 + ?, QuantEntBenef3 = QuantEntBenef3 + ?, ValorEntBenef3 = ValorEntBenef3 + ?, QuantSaiBenef3 = QuantSaiBenef3 + ?, ValorSaiBenef3 = ValorSaiBenef3 + ?, " & _
                                    "QuantEntConsig = QuantEntConsig + ?, ValorEntConsig = ValorEntConsig + ?, QuantSaiConsig = QuantSaiConsig + ?, ValorSaiConsig = ValorSaiConsig + ?, QuantEntDemo = QuantEntDemo + ?, ValorEntDemo = ValorEntDemo + ?, QuantSaiDemo = QuantSaiDemo + ?, ValorSaiDemo = ValorSaiDemo + ?, QuantEntConserto = QuantEntConserto + ?, ValorEntConserto = ValorEntConserto + ?, QuantSaiConserto = QuantSaiConserto + ?, ValorSaiConserto = ValorSaiConserto + ?, QuantEntOutros = QuantEntOutros + ?, ValorEntOutros = ValorEntOutros + ?, QuantSaiOutros = QuantSaiOutros + ?, ValorSaiOutros = ValorSaiOutros + ?, QuantEntBenef = QuantEntBenef + ?, ValorEntBenef = ValorEntBenef + ?, QuantSaiBenef = QuantSaiBenef + ?, ValorSaiBenef = ValorSaiBenef + ?, QuantEntRecIndl = QuantEntRecIndl + ?, ValorEntRecIndl = ValorEntRecIndl + ?, QuantSaiRecIndl = QuantSaiRecIndl + ?, ValorSaiRecIndl = ValorSaiRecIndl + ?", _
                                    lComando1, objSldDiaEst.dQuantEntrada, objSldDiaEst.dQuantSaida, objSldDiaEst.dQuantCons, objSldDiaEst.dQuantVend, objSldDiaEst.dValorEntrada, objSldDiaEst.dValorSaida, objSldDiaEst.dQuantComp, objSldDiaEst.dValorComp, objSldDiaEst.dValorVend, objSldDiaEst.dValorCons, objSldDiaEst.dQuantVendConsig3, objSldDiaEst.dValorVendConsig3, objSldDiaEst.dQuantEntCusto, objSldDiaEst.dValorEntCusto, objSldDiaEst.dQuantSaiCusto, objSldDiaEst.dValorSaiCusto, objSldDiaEst.dQuantEntConsig3, objSldDiaEst.dValorEntConsig3, objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorSaiConsig3, _
                                    objSldDiaEst.dQuantEntDemo3, objSldDiaEst.dValorEntDemo3, objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3, objSldDiaEst.dValorEntConserto3, objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3, objSldDiaEst.dValorEntOutros3, objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3, objSldDiaEst.dValorEntBenef3, objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorSaiBenef3, _
                                    objSldDiaEst.dQuantEntConsig, objSldDiaEst.dValorEntConsig, objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo, objSldDiaEst.dValorEntDemo, objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto, objSldDiaEst.dValorEntConserto, objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros, objSldDiaEst.dValorEntOutros, objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef, objSldDiaEst.dValorEntBenef, objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorSaiBenef, objSldDiaEst.dQuantEntRecIndl, objSldDiaEst.dValorEntRecIndl, objSldDiaEst.dQuantSaiRecIndl, objSldDiaEst.dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 40114
        
    End If


    SldDiaEstAlm_Atualiza = SUCESSO

    Exit Function

Erro_SldDiaEstAlm_Atualiza:

    SldDiaEstAlm_Atualiza = Err

    Select Case Err

        Case 40110, 40111
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAEST", Err, iAlmoxarifado, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))

        Case 40112
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAESTALM", Err, iAlmoxarifado, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))
        
        Case 40113
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDDIAESTALM", Err, iAlmoxarifado, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))

        Case 40114
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAESTALM", Err, iAlmoxarifado, objSldDiaEst.sProduto, CStr(objSldDiaEst.dtData))

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151746)

    End Select

    Exit Function

End Function

Function SldMesEstAlm_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal iAlmoxarifado As Integer) As Long
'Atualiza a tabela de SldMesEstAlm utilizando os valores passados atraves de objSldDiaEst e iAlmoxarifado.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesEstAlm_Atualiza
    
    iMes = Month(objSldDiaEst.dtData)
    sMes = CStr(iMes)
    
    'Le a tabela de SldMesEstAlm para o Ano/Almoxarifado/produto em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEstAlm WHERE Ano=? AND Almoxarifado=? AND Produto=?", 0, iAno, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 40115

    'leitura do registro referente ao Ano/Almoxarifado/produto em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 40116
    
    'lock do registro em questão
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 40117

    'Atualiza a tabela de SldMesEstAlm para o Ano/Almoxarifado/produto em questão
    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEstAlm SET QuantEnt" + sMes + " = QuantEnt" + sMes + " + ?, ValorEnt" + sMes + " = ValorEnt" + sMes + " + ?, QuantSai" + sMes + " = QuantSai" + sMes + " + ?, ValorSai" + sMes + " = ValorSai" + sMes + " + ?, QuantCons" + sMes + " = QuantCons" + sMes + " + ?, QuantVend" + sMes + " = QuantVend" + sMes + " + ?, QuantComp" + sMes + " = QuantComp" + sMes + " + ?, ValorComp" + sMes + " = ValorComp" + sMes + " + ?, ValorVend" + sMes + " = ValorVend" + sMes + " + ?, ValorCons" + sMes + " = ValorCons" + sMes + " + ?, SaldoQuantCusto" + sMes + " = SaldoQuantCusto" + sMes + " + ?, SaldoValorCusto" + sMes + " = SaldoValorCusto" + sMes + " + ?, QuantVendConsig3" + sMes + " = QuantVendConsig3" + sMes + " + ?, ValorVendConsig3" + sMes + " = ValorVendConsig3" + sMes + " + ?, SaldoQuantRecIndl" + sMes + " = SaldoQuantRecIndl" + sMes + " + ?, SaldoValorRecIndl" + sMes + " = SaldoValorRecIndl" + sMes + " + ?", _
        lComando1, objSldDiaEst.dQuantEntrada, objSldDiaEst.dValorEntrada, objSldDiaEst.dQuantSaida, objSldDiaEst.dValorSaida, objSldDiaEst.dQuantCons, objSldDiaEst.dQuantVend, objSldDiaEst.dQuantComp, objSldDiaEst.dValorComp, objSldDiaEst.dValorVend, objSldDiaEst.dValorCons, objSldDiaEst.dQuantEntCusto - objSldDiaEst.dQuantSaiCusto, objSldDiaEst.dValorEntCusto - objSldDiaEst.dValorSaiCusto, objSldDiaEst.dQuantVendConsig3, objSldDiaEst.dValorVendConsig3, objSldDiaEst.dQuantEntRecIndl - objSldDiaEst.dQuantSaiRecIndl, objSldDiaEst.dValorEntRecIndl - objSldDiaEst.dValorSaiRecIndl)
    If lErro <> AD_SQL_SUCESSO Then Error 40118
    
    SldMesEstAlm_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEstAlm_Atualiza:

    SldMesEstAlm_Atualiza = Err

    Select Case Err

        Case 40115, 40116
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case 40117
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESESTALM", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case 40118
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESESTALM", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151747)

    End Select

    Exit Function

End Function

Function MovEstoque_Automatico_EmTransacao1(ByVal lComando As Long, ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal iFilialEmpresa As Integer, lCodigo As Long) As Long
'retorna o número do próximo MovEstoque disponivel
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lCodigo_MovEstoque As Long
Dim lcodigo_automatico As Long
Dim sConteudo As String, sChave As String
Dim sConteudo2 As String

On Error GoTo Erro_MovEstoque_Automatico_EmTransacao1

    lErro = CF("Customizacao_FilialEmpresa", iFilialEmpresa)
    If lErro <> SUCESSO Then gError 126790

    sChave = "NUM_PROX_MOV_ESTOQUE"
    sConteudo = String(STRING_MATCONFIG_CONTEUDO, 0)

    'Pesquisa o número do MovEstoque gerado automaticamente pelo sistema
    lErro = Comando_ExecutarPos(lComando, "SELECT Conteudo FROM MATConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, sConteudo, sChave, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 35144

    'le o registro com o número do MovEstoque automático
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 35145

    'loca o registro que guarda o numero do MovEstoque gerado automaticamente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 35146

    lcodigo_automatico = CLng(sConteudo)

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de MovEstoque maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando1, "SELECT Codigo FROM MovimentoEstoque WHERE Codigo >= ? AND FilialEmpresa = ? ORDER BY Codigo", lCodigo_MovEstoque, lcodigo_automatico, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 35147

    'le o primeiro codigo >= ao codigo automatico
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 44280

    'pesquisa o proximo número de codigo disponível
    Do While lErro <> AD_SQL_SEM_DADOS

        If lCodigo_MovEstoque > lcodigo_automatico Then Exit Do

        If lCodigo_MovEstoque = lcodigo_automatico Then
            lcodigo_automatico = lcodigo_automatico + 1
        End If

        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 44281

    Loop

    'Valor de retorno da funcao
    lCodigo = lcodigo_automatico

    lcodigo_automatico = lcodigo_automatico + 1

    sConteudo2 = CStr(lcodigo_automatico)

    'atualiza o numero do MovEstoque gerado automaticamente
    lErro = Comando_ExecutarPos(lComando2, "UPDATE MATConfig SET Conteudo = ?", lComando, sConteudo2)
    If lErro <> AD_SQL_SUCESSO Then gError 35148

    MovEstoque_Automatico_EmTransacao1 = SUCESSO

    Exit Function

Erro_MovEstoque_Automatico_EmTransacao1:

    MovEstoque_Automatico_EmTransacao1 = gErr

    Select Case gErr

        Case 35144, 35145
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MATCONFIG", gErr, sChave)

        Case 35146
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_MATCONFIG", gErr, sChave)

        Case 35147, 44280, 44281
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

        Case 35148
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MATCONFIG", gErr, sChave)
            
        Case 126790

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151748)

    End Select

    Exit Function

End Function

Function Almoxarifado_Grava(ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal objEndereco As ClassEndereco) As Long
'Grava o Almoxarifado no BD

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Almoxarifado_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 189313

    lErro = CF("Almoxarifado_Grava_EmTrans", objAlmoxarifado, objEndereco)
    If lErro <> SUCESSO Then gError 189314

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 189315

    Almoxarifado_Grava = SUCESSO

Exit Function

Erro_Almoxarifado_Grava:

    Almoxarifado_Grava = gErr

    Select Case gErr

        Case 189313
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 189314
        
        Case 189315
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189316)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function Almoxarifado_Grava_EmTrans(ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal objEndereco As ClassEndereco) As Long
'Grava o Almoxarifado no BD

Dim lComando(3) As Long
Dim lErro As Long
Dim lCodEndereco As Long
Dim iIndice As Integer
Dim tAlmoxarifado As typeAlmoxarifado
Dim iCodigo  As Integer
Dim iTotalAlmox As Integer

On Error GoTo Erro_Almoxarifado_Grava_EmTrans

    'Abre os  comandos
    For iIndice = 0 To 2
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then gError 22258
    Next
    
    'Procura por um outro Almoxarifado com o mesmo Nome Reduzido
    lErro = Comando_Executar(lComando(0), "SELECT Codigo FROM Almoxarifado WHERE Codigo <> ? AND NomeReduzido = ?", iCodigo, objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then gError 22260

    'Tenta ler o código deste Almoxarifado
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 22261

    'Se existir outro Almoxarifado com o mesmo Nome Reduzido, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 22264

    'Inicializa o atributo STRING do type Almoxarifado
    tAlmoxarifado.sDescricao = String(STRING_ALMOXARIFADO_DESCRICAO, 0)

    'Lê o Almoxarifado no BD
    lErro = Comando_ExecutarPos(lComando(1), "SELECT Codigo, Descricao, Endereco, FilialEmpresa FROM Almoxarifado WHERE Codigo = ?", 0, _
        tAlmoxarifado.iCodigo, tAlmoxarifado.sDescricao, tAlmoxarifado.lEndereco, tAlmoxarifado.iFilialEmpresa, objAlmoxarifado.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 22262

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 22263

    'Almoxarifado não existe - INCLUSAO
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Se for Versão Light
'        If giTipoVersao = VERSAO_LIGHT Then
'
'            'Lê o Número Total de Almoxarifados
'            lErro = CF("Almoxarifado_Le_Total", iTotalAlmox)
'            If lErro <> SUCESSO Then gError 61183
'
'            'Se ultrapassou o número máximo de Almoxarifados ---> ERRO
'            If iTotalAlmox >= LIMITE_ALMOX_VLIGHT Then gError 61184
'
'        End If
        
        'obtem o novo Endereco do Almoxarifado
        lErro = CF("Endereco_Automatico", lCodEndereco)
        If lErro <> SUCESSO Then gError 22265

        objEndereco.lCodigo = lCodEndereco

        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then gError 22266

        'Preenche ponteiro de endereço de objAlmoxarifado
        objAlmoxarifado.lEndereco = objEndereco.lCodigo

        'Insere o Almoxarifado na tabela Almoxarifado
        lErro = Comando_Executar(lComando(2), "INSERT INTO Almoxarifado (Codigo, FilialEmpresa, Descricao, NomeReduzido, Endereco, ContaContabil) VALUES (?,?,?,?,?,?)", objAlmoxarifado.iCodigo, objAlmoxarifado.iFilialEmpresa, objAlmoxarifado.sDescricao, objAlmoxarifado.sNomeReduzido, objAlmoxarifado.lEndereco, objAlmoxarifado.sContaContabil)
        If lErro <> AD_SQL_SUCESSO Then gError 22270

    Else 'ALTERAÇÃO

        'se está tentando alterar os dados do almoxarifado de outra filial ==> erro
        If objAlmoxarifado.iFilialEmpresa <> tAlmoxarifado.iFilialEmpresa Then gError 55865

        'Faz a modificação do Endereço
        objEndereco.lCodigo = tAlmoxarifado.lEndereco

        'Atualiza o endereço
        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then gError 22267

        'Atualiza a tabela de Almoxarifado
        lErro = Comando_ExecutarPos(lComando(2), "UPDATE Almoxarifado SET Descricao = ?, NomeReduzido = ?, ContaContabil = ?", lComando(1), objAlmoxarifado.sDescricao, objAlmoxarifado.sNomeReduzido, objAlmoxarifado.sContaContabil)
        If lErro <> AD_SQL_SUCESSO Then gError 22268

    End If
    
    lErro = CF("Almoxarifado_Grava_Customizado", objAlmoxarifado)
    If lErro <> SUCESSO Then gError 198565

    'Fecha os comandos
    For iIndice = 0 To 2
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Almoxarifado_Grava_EmTrans = SUCESSO

Exit Function

Erro_Almoxarifado_Grava_EmTrans:

    Almoxarifado_Grava_EmTrans = gErr

    Select Case gErr

        Case 22258
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 22264
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", gErr, objAlmoxarifado.sNomeReduzido)

        Case 22260, 22261, 22262, 22263
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", gErr)

        Case 22270
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ALMOXARIFADO", gErr)

        'Erro já tratado
        Case 22265, 22266, 22267, 61183, 198565

        Case 22268
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_ALMOXARIFADO", gErr, objAlmoxarifado.iCodigo)

        Case 55865
            Call Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_DE_OUTRA_FILIAL", gErr, objAlmoxarifado.iCodigo, tAlmoxarifado.iFilialEmpresa)
        
        Case 61184
            Call Rotina_Erro(vbOKOnly, "ERRO_LIMITE_ALMOX_VLIGHT", gErr, LIMITE_ALMOX_VLIGHT)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151749)

    End Select

    For iIndice = 0 To 2
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function Almoxarifado_Exclui(ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'Exclui o Almoxarifado

Dim lErro As Long
Dim lComando(2) As Long
Dim lTransacao As Long
Dim colCodNotasFiscais As New Collection
Dim lTotal As Long
Dim iIndice As Integer
Dim iCodigo As Integer, lEndereco As Long

On Error GoTo Erro_Almoxarifado_Exclui

    'Abre comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 22276
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 22277

    'Seleciona o Almoxarifado a ser excluido
    lErro = Comando_ExecutarPos(lComando(0), "SELECT Codigo, Endereco FROM Almoxarifado WHERE Codigo =?", 0, iCodigo, lEndereco, objAlmoxarifado.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 22278

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22279
    If lErro = AD_SQL_SEM_DADOS Then Error 22280

    'Lock do Almoxarifado
    lErro = Comando_LockExclusive(lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 22285
    
    'verifica se Almoxarifado possui registro em Empenho
    lErro = Almoxarifado_Le_Empenho(objAlmoxarifado)
    If lErro <> SUCESSO And lErro <> 40637 Then Error 40638
    
    If lErro = SUCESSO Then Error 40650
    
    'verifica se Almoxarifado possui registro em Inventario
    lErro = Almoxarifado_Le_Inventario(objAlmoxarifado)
    If lErro <> SUCESSO And lErro <> 40642 Then Error 40643
    
    If lErro = SUCESSO Then Error 40651
    
    'verifica se Almoxarifado possui registro em InventarioPendente
    lErro = Almoxarifado_Le_InventarioPendente(objAlmoxarifado)
    If lErro <> SUCESSO And lErro <> 40647 Then Error 40648
    
    If lErro = SUCESSO Then Error 40652
    
    'Verifica se este Almoxarifado possui registro em EstoqueProduto
    lErro = Almoxarifado_Le_EstoqueProduto(objAlmoxarifado)
    If lErro <> SUCESSO And lErro <> 22327 Then Error 22325
    
    If lErro = SUCESSO Then Error 22322

    'Exclui o Almoxarifado
    lErro = Comando_ExecutarPos(lComando(1), "DELETE FROM Almoxarifado", lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 22282

    'Exclui o registro com o Endereço do Almoxarifado
    lErro = CF("Endereco_Exclui", lEndereco)
    If lErro <> SUCESSO Then Error 22287

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 22281

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Almoxarifado_Exclui = SUCESSO

    Exit Function

Erro_Almoxarifado_Exclui:

    Almoxarifado_Exclui = Err

    Select Case Err

        'Tratados nas rotinas chamadas
        Case 22287, 22325, 40638, 40643, 40648

        Case 22285
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO", Err)

        Case 22322
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_RELACIONADO_ESTOQUEPRODUTO", Err, objAlmoxarifado.iCodigo)

        Case 22276
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22277
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 22278, 22279
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", Err)

        Case 22280
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_NAO_CADASTRADO", Err, objAlmoxarifado.iCodigo)

        Case 22282
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ALMOXARIFADO", Err, objAlmoxarifado.iCodigo)

        Case 22281
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 40650
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_RELACIONADO_EMPENHO", Err, objAlmoxarifado.iCodigo)
        
        Case 40651
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_RELACIONADO_INVENTARIO", Err, objAlmoxarifado.iCodigo)

        Case 40652
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_RELACIONADO_INVENTARIOPENDENTE", Err, objAlmoxarifado.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151750)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 1
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Private Function Almoxarifado_Le_EstoqueProduto(ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'Verifica se o Almoxarifado possui registro em EstoqueProduto

Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer

On Error GoTo Erro_Almoxarifado_Le_EstoqueProduto

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22323

    'Seleciona o almoxarifado com o Código passado
    lErro = Comando_Executar(lComando, "SELECT Almoxarifado FROM EstoqueProduto WHERE Almoxarifado = ? ", iCodigo, objAlmoxarifado.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 22324

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22326

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 22327

    Call Comando_Fechar(lComando)

    Almoxarifado_Le_EstoqueProduto = SUCESSO

    Exit Function

Erro_Almoxarifado_Le_EstoqueProduto:

    Almoxarifado_Le_EstoqueProduto = Err

    Select Case Err

        Case 22323
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22324, 22326
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO", Err)

        Case 22327

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151751)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Almoxarifado_Le_PrevVenda(ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'Verifica se Almoxarifado possui registro com PrevVenda

Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer

On Error GoTo Erro_Almoxarifado_Le_PrevVenda

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 40629

    'Seleciona o almoxarifado com o Código passado
    lErro = Comando_Executar(lComando, "SELECT Almoxarifado FROM PrevVenda WHERE Almoxarifado = ? ", iCodigo, objAlmoxarifado.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 40630

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 40631

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 40632

    Call Comando_Fechar(lComando)

    Almoxarifado_Le_PrevVenda = SUCESSO

    Exit Function

Erro_Almoxarifado_Le_PrevVenda:

    Almoxarifado_Le_PrevVenda = Err

    Select Case Err

        Case 40629
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 40630, 40631
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDA", Err)

        Case 40632

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151752)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Almoxarifado_Le_Empenho(ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'Verifica se Almoxarifado possui registro com empenho

Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer

On Error GoTo Erro_Almoxarifado_Le_Empenho

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 40634

    'Seleciona o almoxarifado com o Código passado
    lErro = Comando_Executar(lComando, "SELECT Almoxarifado FROM Empenho WHERE Almoxarifado = ? ", iCodigo, objAlmoxarifado.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 40635

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 40636

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 40637

    Call Comando_Fechar(lComando)

    Almoxarifado_Le_Empenho = SUCESSO

    Exit Function

Erro_Almoxarifado_Le_Empenho:

    Almoxarifado_Le_Empenho = Err

    Select Case Err

        Case 40634
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 40635, 40636
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO2", Err)

        Case 40637

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151753)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Almoxarifado_Le_Inventario(ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'Verifica se Almoxarifado possui registro com Inventario

Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer

On Error GoTo Erro_Almoxarifado_Le_Inventario

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 40639

    'Seleciona o almoxarifado com o Código passado
    lErro = Comando_Executar(lComando, "SELECT Almoxarifado FROM Inventario WHERE Almoxarifado = ? ", iCodigo, objAlmoxarifado.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 40640

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 40641

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 40642

    Call Comando_Fechar(lComando)

    Almoxarifado_Le_Inventario = SUCESSO

    Exit Function

Erro_Almoxarifado_Le_Inventario:

    Almoxarifado_Le_Inventario = Err

    Select Case Err

        Case 40639
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 40640, 40641
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO", Err)

        Case 40642

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151754)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Almoxarifado_Le_InventarioPendente(ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'Verifica se Almoxarifado possui registro com InventarioPendente

Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer

On Error GoTo Erro_Almoxarifado_Le_InventarioPendente

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 40644

    'Seleciona o almoxarifado com o Código passado
    lErro = Comando_Executar(lComando, "SELECT Almoxarifado FROM InventarioPendente WHERE Almoxarifado = ? ", iCodigo, objAlmoxarifado.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 40645

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 40646

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 40647

    Call Comando_Fechar(lComando)

    Almoxarifado_Le_InventarioPendente = SUCESSO

    Exit Function

Erro_Almoxarifado_Le_InventarioPendente:

    Almoxarifado_Le_InventarioPendente = Err

    Select Case Err

        Case 40644
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 40645, 40646
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIOPENDENTE", Err)

        Case 40647

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151755)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ClassificacaoABC_Exclui(ByVal objClassABC As ClassClassificacaoABC) As Long
'Exclui Classificação ABC e seus ítens do Banco de Dados

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim tClassABC As typeClassificacaoABC
Dim iIndice As Integer

On Error GoTo Erro_ClassificacaoABC_Exclui
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 25406
    Next
    
    'Inicia a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 25407
   
    'Verifica se ClassifABC existe no BD
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumInt, AtualizaProdutosFilial, TipoProduto FROM ClassificacaoABC WHERE FilialEmpresa = ? AND Codigo = ?", 0, tClassABC.lNumInt, tClassABC.iAtualizaProdutosFilial, tClassABC.iTipoProduto, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 25408
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25409
    
    If lErro = AD_SQL_SEM_DADOS Then Error 25410  'Se não existir, Erro
    
    'Faz lock exclusive
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 25411
    
    objClassABC.lNumInt = tClassABC.lNumInt
    objClassABC.iTipoProduto = tClassABC.iTipoProduto
    
    'Verifica se foi a última classificaçãoABC a atualizar Produtos (desse tipo)
    If tClassABC.iAtualizaProdutosFilial = CLASSABC_ATUALIZA_PRODFILIAL Then
        
        lErro = CF("ClassificacaoABC_Eh_MaisRecente", objClassABC)
        If lErro <> SUCESSO Then Error 25416
        
    End If
    
    'Exclui ItensClassifABC
    lErro = CF("ItensABC_Exclui", objClassABC)
    If lErro <> SUCESSO Then Error 25419
    
    'Exclui Classificação ABC
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ClassificacaoABC", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 25417

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 25418

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ClassificacaoABC_Exclui = SUCESSO
    
    Exit Function

Erro_ClassificacaoABC_Exclui:
    
    ClassificacaoABC_Exclui = Err
    
    Select Case Err
        
        Case 25406
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
 
        Case 25407
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
          
        Case 25408
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSIFICACAOABC", Err, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
        
        Case 25409
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSIFICACAOABC", Err, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
            
        Case 25410
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSIFICACAOABC_INEXISTENTE1", Err, objClassABC.sCodigo, objClassABC.iFilialEmpresa)
            
        Case 25411
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLASSABC", Err, objClassABC.sCodigo, objClassABC.iFilialEmpresa)
        
        Case 25416, 25419 'tratado na rotina chamada
        
        Case 25417
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CLASSIFICACAOABC", Err, objClassABC.sCodigo, objClassABC.iFilialEmpresa)
        
        Case 25418
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151756)

    End Select

    'Desfaz transação
    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ItensABC_Exclui(ByVal objClassABC As ClassClassificacaoABC) As Long
'Exclui Itens da Classificação ABC do Banco de Dados
'CHAMADA EM TRANSAÇÃO por ClassificacaoABC_Exclui

Dim lErro As Long
Dim lErro1 As Long
Dim alComando(1 To 2) As Long
Dim sComandoSQL As String
Dim tItemABC As typeItemClassifABC
Dim iIndice As Integer

On Error GoTo Erro_ItensABC_Exclui
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 25420
    Next
    
    'Comando SQL p/ tabela ItensClassifABC
    sComandoSQL = "SELECT Produto FROM ItensClassifABC WHERE ClassifABC = ?"
    
    'Executa comando SQL que lê ItensClassifABC
    With tItemABC
        .sCodProduto = String(STRING_PRODUTO, 0)
        lErro = Comando_ExecutarPos(alComando(1), sComandoSQL, 0, .sCodProduto, objClassABC.lNumInt)
    End With
    
    If lErro <> AD_SQL_SUCESSO Then Error 25421
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25422
    
    If lErro = AD_SQL_SEM_DADOS Then Error 25423 'Se não existir, Erro
    
    Do While lErro1 <> AD_SQL_SEM_DADOS
        
        'Exclui ItemClassifABC do BD
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensClassifABC", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 25424

        'Busca próximo ítem
        lErro1 = Comando_BuscarProximo(alComando(1))
        If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then Error 25425
    
    Loop
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensABC_Exclui = SUCESSO
    
    Exit Function

Erro_ItensABC_Exclui:
    
    ItensABC_Exclui = Err
    
    Select Case Err
        
        Case 25420
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 25421, 25422
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSCLASSIFABC", Err, objClassABC.lNumInt)
            
        Case 25423
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMCLASSABC_INEXISTENTE", Err, objClassABC.lNumInt)
        
        Case 25424
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMCLASSIFABC", Err, objClassABC.lNumInt)
            
        Case 25425
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCLASSIFABC", Err, objClassABC.lNumInt)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151757)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ClassificacaoABC_Eh_MaisRecente(ByVal objClassABC As ClassClassificacaoABC) As Long
'Verifica se a ClassificacaoABC no BD eh a mais recente que atualizou produtos para o TipoProduto dela.
'Passa NumInt, FilialEmpresa e TipoProduto da ClassABC
'Retorna SUCESSO se for + recente

Dim lErro As Long
Dim lComando As Long
Dim tClassABC As typeClassificacaoABC

On Error GoTo Erro_ClassificacaoABC_Eh_MaisRecente

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 25412

    'Executa comando de leitura
    lErro = Comando_Executar(lComando, "SELECT NumInt FROM ClassificacaoABC WHERE NumInt > ? AND FilialEmpresa = ? AND AtualizaProdutosFilial = ? AND (TipoProduto = ? OR TipoProduto = ?)", _
        tClassABC.lNumInt, objClassABC.lNumInt, objClassABC.iFilialEmpresa, CLASSABC_ATUALIZA_PRODFILIAL, objClassABC.iTipoProduto, TODOS_TIPOS)
    If lErro <> AD_SQL_SUCESSO Then Error 25413
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25414
    
    'Se não encontrou ClassificacaoABC + recente --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 25415
        
    Call Comando_Fechar(lComando)
    
    ClassificacaoABC_Eh_MaisRecente = SUCESSO
    
    Exit Function
        
Erro_ClassificacaoABC_Eh_MaisRecente:

    ClassificacaoABC_Eh_MaisRecente = Err
    
    Select Case Err
    
        Case 25412
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 25413, 25414
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSIFICACAOABC", Err, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
            
        Case 25415
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSIFICACAOABC_MAIS_RECENTE", Err, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151758)
        
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ClassificacaoABC_Grava(ByVal objClassABC As ClassClassificacaoABC) As Long
'Grava Classificação ABC e seus ítens no Banco de Dados

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 5) As Long
Dim tClassABC As typeClassificacaoABC
Dim iIndice As Integer

On Error GoTo Erro_ClassificacaoABC_Grava
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 25343
    Next
    
    'Inicia a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 25344
   
    'Verifica se código de ClassifABC existe no BD para giFilialEmpresa
    lErro = Comando_Executar(alComando(1), "SELECT NumInt FROM ClassificacaoABC WHERE FilialEmpresa = ? AND Codigo = ?", tClassABC.lNumInt, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 25346
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25348
    
    'Se existir, Erro --> não é possível alterar
    If lErro = AD_SQL_SUCESSO Then Error 25349
        
    If objClassABC.iFaixaA < 1 Or objClassABC.iFaixaA > 99 Then Error 52879
    
    If objClassABC.iFaixaB < 1 Or objClassABC.iFaixaB > 99 Then Error 52880
    
    'Gera número interno automático para ClassifABC
    lErro = CF("Config_ObterNumInt", "ESTConfig", "NUM_INT_PROX_CLASS_ABC", tClassABC.lNumInt)
    If lErro <> SUCESSO Then Error 25350
    
    objClassABC.lNumInt = tClassABC.lNumInt
    
    'Grava ClassifABC no BD (menos DemandaTotal, FaixaA, FaixaB)
    With objClassABC
        lErro = Comando_Executar(alComando(2), "INSERT INTO ClassificacaoABC (NumInt, FilialEmpresa, Codigo, Descricao, Data, MesInicial, AnoInicial, MesFinal, AnoFinal, TipoProduto, AtualizaProdutosFilial) VALUES (?,?,?,?,?,?,?,?,?,?,?)", .lNumInt, .iFilialEmpresa, .sCodigo, .sDescricao, .dtData, .iMesInicial, .iAnoInicial, .iMesFinal, .iAnoFinal, .iTipoProduto, .iAtualizaProdutosFilial)
    End With
    If lErro <> AD_SQL_SUCESSO Then Error 25353
    
    'Calcula e grava demandas dos ítens (produtos) no BD
    lErro = ItensABC_GravaDemanda(objClassABC)
    If lErro <> SUCESSO Then Error 25339
    
    'Lê demanda total da ClassifABC
    lErro = Comando_Executar(alComando(3), "SELECT SUM(Demanda) FROM ItensClassifABC WHERE ClassifABC = ?", tClassABC.dDemandaTotal, objClassABC.lNumInt)
    If lErro <> AD_SQL_SUCESSO Then Error 25340
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO Then Error 25347
    
    If tClassABC.dDemandaTotal = 0 Then Error 43506
    
    objClassABC.dDemandaTotal = tClassABC.dDemandaTotal
    
    'Calcula e grava no BD a Classe ABC de cada Produto
    lErro = ItensABC_GravaABC(objClassABC)
    If lErro <> SUCESSO Then Error 25341
    
    'Faz SELECT p/ atualizar atributos DemandaTotal, FaixaA, FaixaB na ClassifABC
    lErro = Comando_ExecutarPos(alComando(4), "SELECT NumInt FROM ClassificacaoABC WHERE NumInt = ?", 0, tClassABC.lNumInt, objClassABC.lNumInt)
    If lErro <> AD_SQL_SUCESSO Then Error 25382
    
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25383
    
    If lErro = AD_SQL_SEM_DADOS Then Error 25384
    
    'Atualiza DemandaTotal, FaixaA, FaixaB na tabela ClassifABC
    lErro = Comando_ExecutarPos(alComando(5), "UPDATE ClassificacaoABC SET FaixaA = ?, FaixaB = ?, DemandaTotal = ?", alComando(4), objClassABC.iFaixaA, objClassABC.iFaixaB, objClassABC.dDemandaTotal)
    If lErro <> AD_SQL_SUCESSO Then Error 25385

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 25345

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ClassificacaoABC_Grava = SUCESSO
    
    Exit Function

Erro_ClassificacaoABC_Grava:
    
    ClassificacaoABC_Grava = Err
    
    Select Case Err
            
        Case 25339, 25341, 25350 'tratado na rotina chamada
        
        Case 25343
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
 
        Case 25344
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
          
        Case 25345
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 25340, 25347
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSCLASSIFABC", Err, objClassABC.lNumInt)
         
        Case 25346, 25348, 25382, 25383
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSIFICACAOABC", Err, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
            
        Case 25349
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSIFICACAOABC_EXISTE_BD", Err, objClassABC.iFilialEmpresa, objClassABC.sCodigo)
            
        Case 25353
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CLASSIFABC", Err, objClassABC.sCodigo)
        
        Case 25384
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLASSIFICACAOABC_INEXISTENTE", Err, objClassABC.lNumInt)
            
        Case 25385
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLASSIFABC", Err, objClassABC.sCodigo)
        
        Case 43506
            lErro = Rotina_Erro(vbOKOnly, "ERRO_DEMANDA_TOTAL_NULA", Err, objClassABC.sCodigo, objClassABC.iFilialEmpresa)
        
        Case 52879, 52880
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FAIXA_INVALIDA", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151759)

    End Select

    'Desfaz a transação
    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ItensABC_GravaABC(ByVal objClassABC As ClassClassificacaoABC) As Long
'Calcula e grava classificação A, B ou C nos ítens (produtos) da ClassifABC no BD.
'Chamada EM TRANSACAO por ClassificacaoABC_Grava
    
Dim lErro As Long
Dim sComandoSQL As String
Dim alComando(1 To 5) As Long
Dim tItemABC As typeItemClassifABC
Dim dDemandaAcumulada As Double
Dim dDemandaAcumuladaPerc As Double
Dim tProdutoFilial As typeProdutoFilial
Dim iIndice As Integer

On Error GoTo Erro_ItensABC_GravaABC
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 25354
    Next
    
    'Comando SQL p/ tabela ItensClassifABC
    sComandoSQL = "SELECT Produto, Demanda FROM ItensClassifABC WHERE ClassifABC = ? ORDER BY Demanda DESC, Produto"
    
    'Executa comando SQL que lê Produtos e suas Demandas (em valor)
    With tItemABC
        .sCodProduto = String(STRING_PRODUTO, 0)
        lErro = Comando_ExecutarPos(alComando(1), sComandoSQL, 0, .sCodProduto, .dDemanda, objClassABC.lNumInt)
    End With

    If lErro <> AD_SQL_SUCESSO Then Error 25356
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25357
    
    If lErro = AD_SQL_SEM_DADOS Then Error 25358  'não encontrou registro em ItensClassifABC
    
    'Grava classificação ABC na tabela ItensClassifABC no BD
    lErro = ItensABC_GravaABC1(alComando(), objClassABC, tItemABC)
    If lErro <> SUCESSO And lErro <> 25361 And lErro <> 25364 Then Error 25355
    
    If objClassABC.iAtualizaProdutosFilial = CLASSABC_ATUALIZA_PRODFILIAL Then
        'Inicializa comandos p/ atualizar ClasseABC na tabela ProdutosFilial
        
        'Comando SQL p/ tabela ItensClassifABC ordenada por Produto
        sComandoSQL = "SELECT Produto, ClasseABC FROM ItensClassifABC WHERE ClassifABC = ? ORDER BY Produto"
        
        'Executa comando SQL que lê ItensClassifABC com suas classificações
        With tItemABC
            .sCodProduto = String(STRING_PRODUTO, 0)
            .sClasseABC = String(STRING_CLASSEABC, 0)
            lErro = Comando_Executar(alComando(3), sComandoSQL, .sCodProduto, .sClasseABC, objClassABC.lNumInt)
        End With

        If lErro <> AD_SQL_SUCESSO Then Error 25368
        
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25369
        
        If lErro = AD_SQL_SEM_DADOS Then Error 25370  'não encontrou registro em ItensClassifABC
        
        If objClassABC.iFilialEmpresa <> EMPRESA_TODA Then 'ProdutosFilial não tem registros para EMPRESA_TODA
        
            'Comando SQL p/ tabela ProdutosFilial ordenada por Produto
            sComandoSQL = "SELECT Produto FROM ProdutosFilial WHERE FilialEmpresa = ? ORDER BY Produto"
        
            'Executa comando SQL que lê ProdutosFilial p/ atualizar ClasseABC
            With tProdutoFilial
                .sProduto = String(STRING_PRODUTO, 0)
                lErro = Comando_ExecutarPos(alComando(4), sComandoSQL, 0, .sProduto, objClassABC.iFilialEmpresa)
            End With
    
            If lErro <> AD_SQL_SUCESSO Then Error 25371
            
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25372
            
            If lErro = AD_SQL_SEM_DADOS Then Error 25373  'não encontrou registro em ProdutosFilial
        
            'Grava classif ABC na tabela de ProdutosFilial
            lErro = ItensABC_GravaABC2(alComando(), objClassABC, tItemABC, tProdutoFilial)
            
        End If
    
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensABC_GravaABC = SUCESSO
    
    Exit Function

Erro_ItensABC_GravaABC:
 
    ItensABC_GravaABC = Err
    
    Select Case Err
            
        Case 25354
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 25355  'tratado na rotina chamada
        
        Case 25356, 25368, 25371
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL2", Err)
        
        Case 25357, 25369
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCLASSIFABC", Err, objClassABC.lNumInt)
        
        Case 25358, 25370
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMCLASSABC_INEXISTENTE", Err, objClassABC.lNumInt)
       
        Case 25372
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL1", Err, objClassABC.iFilialEmpresa)
        
        Case 25373
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOSFILIAL_INEXISTENTE1", Err, objClassABC.iFilialEmpresa)
           
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151760)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ItensABC_GravaABC2(alComando() As Long, ByVal objClassABC As ClassClassificacaoABC, tItemABC As typeItemClassifABC, tProdutoFilial As typeProdutoFilial) As Long
'Grava na tabela ProdutosFilial classificação A ou B ou C para ítens (produtos) da ClassifABC.
'Chamada EM TRANSACAO por ClassificacaoABC_GravaABC
    
Dim lErro As Long
Dim lErro1 As Long

On Error GoTo Erro_ItensABC_GravaABC2

    'Faz atualização de classe ABC em ProdutosFilial
    Do While lErro1 <> AD_SQL_SEM_DADOS 'Sai do Do quando esgota os registros de ItensClassifABC (comando3)
     
        'Sincroniza Produto em ProdutosFilial com Produto em ItensClassifABC
        Do While tProdutoFilial.sProduto < tItemABC.sCodProduto
        
            lErro = Comando_BuscarProximo(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25374
            If lErro = AD_SQL_SEM_DADOS Then Error 25375
        
        Loop
        
        If tProdutoFilial.sProduto > tItemABC.sCodProduto Then Error 25376
        
        'Atualiza classe ABC em 1 registro de ProdutosFilial
        lErro = Comando_ExecutarPos(alComando(5), "UPDATE ProdutosFilial SET ClasseABC = ?", alComando(4), tItemABC.sClasseABC)
        If lErro <> AD_SQL_SUCESSO Then Error 25377
    
        'Vai p/ próximo registro de ItensClassifABC
        lErro1 = Comando_BuscarProximo(alComando(3))
        If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then Error 25378
        
    Loop
     
    ItensABC_GravaABC2 = SUCESSO
    
    Exit Function

Erro_ItensABC_GravaABC2:
 
    ItensABC_GravaABC2 = Err
    
    Select Case Err
            
        Case 25374
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL1", Err, objClassABC.iFilialEmpresa)
        
        Case 25375, 25376
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOSFILIAL_INEXISTENTE", Err, tItemABC.sCodProduto, objClassABC.iFilialEmpresa)
        
        Case 25377
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PRODUTOSFILIAL", Err, objClassABC.iFilialEmpresa, tItemABC.sCodProduto)
            
        Case 25378
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCLASSIFABC", Err, objClassABC.lNumInt)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151761)

    End Select

    Exit Function

End Function

Private Function ItensABC_GravaABC1(alComando() As Long, ByVal objClassABC As ClassClassificacaoABC, tItemABC As typeItemClassifABC) As Long
'Calcula e grava no BD classificação A ou B ou C nos ítens (produtos) da ClassifABC.
'Chamada EM TRANSACAO por ClassificacaoABC_GravaABC
    
Dim lErro As Long
Dim dDemandaAcumulada As Double
Dim dDemandaAcumuladaPerc As Double

On Error GoTo Erro_ItensABC_GravaABC1

    'Começa pela fazendo atualização com classe A
    Do While dDemandaAcumuladaPerc < objClassABC.iFaixaA
     
        'Calcula demanda acumulada até esse Produto
        dDemandaAcumulada = dDemandaAcumulada + tItemABC.dDemanda
        dDemandaAcumuladaPerc = (dDemandaAcumulada / objClassABC.dDemandaTotal) * 100
        
        'Atualiza com classe A
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensClassifABC SET ClasseABC = ?", alComando(1), "A")
        If lErro <> AD_SQL_SUCESSO Then Error 25359
    
        'Vai p/ próximo registro
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25360
        If lErro = AD_SQL_SEM_DADOS Then Error 25361
        
    Loop
    
    'Ajusta FaixaA
    objClassABC.iFaixaA = CInt(dDemandaAcumuladaPerc)
    
    'Ajusta FaixaB
    If objClassABC.iFaixaA + objClassABC.iFaixaB > 100 Then
        objClassABC.iFaixaB = 100 - objClassABC.iFaixaA
    End If
   
    'Faz atualização com classe B
    Do While dDemandaAcumuladaPerc < objClassABC.iFaixaA + objClassABC.iFaixaB Or objClassABC.iFaixaA = 100
     
        'Calcula demanda acumulada até esse Produto
        dDemandaAcumulada = dDemandaAcumulada + tItemABC.dDemanda
        dDemandaAcumuladaPerc = (dDemandaAcumulada / objClassABC.dDemandaTotal) * 100
        
        'Atualiza com classe B
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensClassifABC SET ClasseABC = ?", alComando(1), "B")
        If lErro <> AD_SQL_SUCESSO Then Error 25362
    
        'Vai p/ próximo registro
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25363
        If lErro = AD_SQL_SEM_DADOS Then Error 25364
        
    Loop
    
    'Ajusta FaixaB
    objClassABC.iFaixaB = CInt(dDemandaAcumuladaPerc) - objClassABC.iFaixaA
    
    'Faz atualização com classe C
    Do While True
        
        'Atualiza com classe C
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensClassifABC SET ClasseABC = ?", alComando(1), "C")
        If lErro <> AD_SQL_SUCESSO Then Error 25365
    
        'Vai p/ próximo registro
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25366
        'Se acabarem os registros termina
        If lErro = AD_SQL_SEM_DADOS Then Exit Do
        
    Loop
    
    ItensABC_GravaABC1 = SUCESSO
    
    Exit Function

Erro_ItensABC_GravaABC1:
 
    ItensABC_GravaABC1 = Err
    
    Select Case Err
            
        Case 25359, 25362, 25365
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_ITENSCLASSIFABC", Err, objClassABC.lNumInt, tItemABC.sCodProduto)
           
        Case 25360, 25363, 25366
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCLASSIFABC", Err, objClassABC.lNumInt)
        
        'Terminaram ítens de ClassifABC no BD (e estamos na Faixa A)
        Case 25361 'Terminaram os ítens de ClassifABC no BD
            objClassABC.iFaixaA = 100
            objClassABC.iFaixaB = 0
            
        'Terminaram ítens de ClassifABC no BD (e estamos na Faixa B)
        Case 25364 'Terminaram os ítens de ClassifABC no BD
            objClassABC.iFaixaB = 100 - objClassABC.iFaixaA
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151762)

    End Select

    Exit Function

End Function

Private Function ItensABC_GravaDemanda(ByVal objClassABC As ClassClassificacaoABC) As Long
'Calcula e grava demandas dos ítens (produtos) no BD.
'Chamada EM TRANSACAO por ClassificacaoABC_Grava
    
Dim lComando As Long
Dim lComando1 As Long
Dim lErro As Long
Dim lErro1 As Long
Dim tSldMesEst As typeSldMesEst
Dim iIndice As Integer
Dim iMesMin As Integer
Dim iMesMax As Integer
Dim objItemABC As New ClassItemClassifABC

On Error GoTo Erro_ItensABC_GravaDemanda
    
    'Abre comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 25351
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 25352
    
    'Inicializa o comando de pesquisa em SldMesEst dos valores de saída dos ítens da ClassifABC
    lErro = ItensABC_GravaDemanda1(lComando, objClassABC, tSldMesEst)
    If lErro <> SUCESSO Then Error 25367
    
    'Passa o NumInt da ClassifABC para objItemABC
    objItemABC.lClassifABC = objClassABC.lNumInt
    
    'Repete enquanto tiver registros em SaldoMesEst
    'lErro1 --> erro do BuscarProximo em SldMesEst
    Do While lErro1 <> AD_SQL_SEM_DADOS
    
        objItemABC.sCodProduto = tSldMesEst.sProduto
        objItemABC.dDemanda = 0
        
        'Repete enquanto tiver registros em SaldoMesEst e Produto não mudar
        Do While lErro1 <> AD_SQL_SEM_DADOS And tSldMesEst.sProduto = objItemABC.sCodProduto
        
            'Determinação do meses mínimo e máximo em função do ano
            
            'Se é ano inicial
            If tSldMesEst.iAno = objClassABC.iAnoInicial Then
                iMesMin = objClassABC.iMesInicial
            Else
                iMesMin = 1
            End If
            
            'Se é ano final
            If tSldMesEst.iAno = objClassABC.iAnoFinal Then
                iMesMax = objClassABC.iMesFinal
            Else
                iMesMax = 12
            End If
            
            'Soma valores de saídas do ano
            For iIndice = iMesMin To iMesMax
                objItemABC.dDemanda = objItemABC.dDemanda + tSldMesEst.adValorSai(iIndice)
            Next
            
            'Vai para o próximo registro em SldMesEst
            lErro1 = Comando_BuscarProximo(lComando)
            If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then Error 25336
            
        Loop
    
        'Mudou o Produto ou encerrou a busca em SldMesEst => Grava ItemClassABC
        lErro = Comando_Executar(lComando1, "INSERT INTO ItensClassifABC (ClassifABC, Produto, Demanda) VALUES (?,?,?)", objItemABC.lClassifABC, objItemABC.sCodProduto, objItemABC.dDemanda)
        If lErro <> AD_SQL_SUCESSO Then Error 25338
    
    Loop
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    ItensABC_GravaDemanda = SUCESSO
    
    Exit Function

Erro_ItensABC_GravaDemanda:
 
    ItensABC_GravaDemanda = Err
    
    Select Case Err
        
        Case 25336
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2", Err, objClassABC.iFilialEmpresa)
        
        Case 25338
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMCLASSIFABC", Err, objItemABC.lClassifABC, objItemABC.sCodProduto)
        
        Case 25351, 25352
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 25367 'Tratado na rotina chamada
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151763)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Private Function ItensABC_GravaDemanda1(ByVal lComando As Long, ByVal objClassABC As ClassClassificacaoABC, tSldMesEst As typeSldMesEst) As Long
'Inicializa o comando de pesquisa em SldMesEst dos valores de saída dos ítens da ClassifABC
'Chamada EM TRANSACAO por ItensABC_GravaDemanda
    
Dim sComandoSQL As String
Dim lErro As Long
Dim iIndice As Integer
Dim objItemABC As New ClassItemClassifABC
Dim sFiltro As String

On Error GoTo Erro_ItensABC_GravaDemanda1
    
    'Monta comando SQL que lê Valores Saída mês a mês na tabela SldMesEst de cada Produto
    sComandoSQL = "SELECT Produto, Ano, "
    
    For iIndice = 1 To 12
        sComandoSQL = sComandoSQL & "ValorSai" & CStr(iIndice)
        If iIndice < 12 Then sComandoSQL = sComandoSQL & ", "
    Next
    
    If objClassABC.iFilialEmpresa = EMPRESA_TODA Then
        lErro = CF("FilialEmpresa_Le_Filtro", sFiltro)
        If lErro <> SUCESSO Then gError 25336
    End If
    
    If objClassABC.iTipoProduto = TODOS_TIPOS Then
        sComandoSQL = sComandoSQL & " FROM SldMesEst WHERE (FilialEmpresa = ? OR ? = 0) AND Ano >= ? AND Ano <= ? " & sFiltro
    Else 'tipo de produto específico
        sComandoSQL = sComandoSQL & " FROM SldMesEst, Produtos WHERE SldMesEst.Produto=Produtos.Codigo AND Produtos.Tipo=? AND (SldMesEst.FilialEmpresa = ? OR ? = 0) AND SldMesESt.Ano >= ? AND SldMesEst.Ano <= ? " & sFiltro
    End If
    
    sComandoSQL = sComandoSQL & " ORDER BY Produto, Ano"
    
    'Executa comando SQL que lê Valores Saída mês a mês de cada Produto
    With tSldMesEst
        .sProduto = String(STRING_PRODUTO, 0)
    
        If objClassABC.iTipoProduto = TODOS_TIPOS Then
            lErro = Comando_Executar(lComando, sComandoSQL, .sProduto, .iAno, .adValorSai(1), .adValorSai(2), .adValorSai(3), .adValorSai(4), .adValorSai(5), .adValorSai(6), .adValorSai(7), .adValorSai(8), .adValorSai(9), .adValorSai(10), .adValorSai(11), .adValorSai(12), objClassABC.iFilialEmpresa, objClassABC.iFilialEmpresa, objClassABC.iAnoInicial, objClassABC.iAnoFinal)
        Else 'tipo de produto específico
            lErro = Comando_Executar(lComando, sComandoSQL, .sProduto, .iAno, .adValorSai(1), .adValorSai(2), .adValorSai(3), .adValorSai(4), .adValorSai(5), .adValorSai(6), .adValorSai(7), .adValorSai(8), .adValorSai(9), .adValorSai(10), .adValorSai(11), .adValorSai(12), objClassABC.iTipoProduto, objClassABC.iFilialEmpresa, objClassABC.iFilialEmpresa, objClassABC.iAnoInicial, objClassABC.iAnoFinal)
        End If
    End With

    If lErro <> AD_SQL_SUCESSO Then Error 25333
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25334
    If lErro = AD_SQL_SEM_DADOS Then Error 25335 'não encontrou registro em SaldoMesEst
    
    ItensABC_GravaDemanda1 = SUCESSO
    
    Exit Function

Erro_ItensABC_GravaDemanda1:
 
    ItensABC_GravaDemanda1 = Err
    
    Select Case Err
        
        Case 25333, 25334
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2", Err, objClassABC.iFilialEmpresa)
        
        Case 25335
            If objClassABC.iTipoProduto = TODOS_TIPOS Then
                lErro = Rotina_Erro(vbOKOnly, "ERRO_SLDMESEST_INEXISTENTE2", Err, objClassABC.iFilialEmpresa, objClassABC.iAnoInicial, objClassABC.iAnoFinal)
            Else
                lErro = Rotina_Erro(vbOKOnly, "ERRO_SLDMESEST_INEXISTENTE3", Err, objClassABC.iTipoProduto, objClassABC.iFilialEmpresa, objClassABC.iAnoInicial, objClassABC.iAnoFinal)
            End If
            
        Case 25336
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151764)

    End Select

    Exit Function

End Function

Function EstoqueInicial_Grava(ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal iAlmoxarifadoPadrao As Integer, ByVal colRastreamento As Collection) As Long
'Grava o estoque inicial do produto

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_EstoqueInicial_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 28763

'mario inicio
    'grava o estoque inicial em transacao
    lErro = CF("EstoqueInicial_Grava1", objEstoqueProduto, iAlmoxarifadoPadrao, colRastreamento)
    If lErro <> SUCESSO Then gError 105118
    
'    o resto do codigo foi transferido para dentro de EstoqueInicial_Grava_Trans
'mario fim

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 28782


    EstoqueInicial_Grava = SUCESSO

    Exit Function

Erro_EstoqueInicial_Grava:

    EstoqueInicial_Grava = gErr

    Select Case gErr

        Case 28763
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 28782
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 105118

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151765)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function EstoqueInicial_Grava1(ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal iAlmoxarifadoPadrao As Integer, ByVal colRastreamento As Collection) As Long
'Grava o estoque inicial do produto

Dim lErro As Long

On Error GoTo Erro_EstoqueInicial_Grava1

    'grava o estoque inicial em transacao
    lErro = CF("EstoqueInicial_Grava_Trans", objEstoqueProduto, iAlmoxarifadoPadrao, colRastreamento)
    If lErro <> SUCESSO Then gError 105119
    
    EstoqueInicial_Grava1 = SUCESSO

    Exit Function

Erro_EstoqueInicial_Grava1:

    EstoqueInicial_Grava1 = gErr

    Select Case gErr

        Case 105119

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151766)

    End Select

    Exit Function

End Function

'mario inicio
Function EstoqueInicial_Grava_Trans(ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal iAlmoxarifadoPadrao As Integer, ByVal colRastreamento As Collection, Optional ByVal iMostrarMsg As Integer = 1) As Long
'Grava o estoque inicial do produto em Transacao
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim bPossuiMovimento As Boolean
Dim bPossuiEstoqueProduto As Boolean
Dim iIndice As Integer
Dim alComando(0 To 34) As Long
Dim lTransacao As Long
Dim objEstoqueProdutoBD As New ClassEstoqueProduto
Dim objProduto As New ClassProduto
Dim lCodigo As Long
Dim objEstoqueMes As New ClassEstoqueMes
Dim iAno As Integer
Dim dtDataMovEst As Date
Dim dtDataInicialEstProd As Date, dtDataInicialEst As Date
Dim lQtdeEstProd As Long, lQtdeEst As Long
Dim iAnoEstAtual As Integer, iAnoEstAnt As Integer

On Error GoTo Erro_EstoqueInicial_Grava_Trans

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 28762
    Next

    'Pesquisa no BD o Produto passado como parâmetro
    objProduto.sCodigo = objEstoqueProduto.sProduto
    
    lErro = CF("Produto_Lock", objProduto)
    If lErro <> SUCESSO Then gError 28764
    
    If objProduto.iGerencial = GERENCIAL Then gError 28765

    'verifica se o produto é inventariado
    If objProduto.iControleEstoque = PRODUTO_CONTROLE_SEM_ESTOQUE Then gError 44936

    lErro = CF("Almoxarifado_Lock", objEstoqueProduto.iAlmoxarifado, alComando(0))
    If lErro <> SUCESSO Then gError 28768

    bPossuiMovimento = False
    
'    'Pesquisa no BD se já houve movimento no estoque para o produto em questão na filialempresa
'    lErro = Comando_Executar(alComando(1), "SELECT MovimentoEstoque.Codigo FROM MovimentoEstoque, TiposMovimentoEstoque WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND FilialEmpresa = ? AND Produto = ? AND (TiposMovimentoEstoque.EntradaOuSaida = ? Or TiposMovimentoEstoque.EntradaOuSaida = ?) ", lCodigo, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, TIPOMOV_EST_ENTRADA, TIPOMOV_EST_SAIDA)
'    If lErro <> AD_SQL_SUCESSO Then gError 28773
'
'    'Verifica movimento
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28774
'
'    If lErro = AD_SQL_SUCESSO Then bPossuiMovimento = True
    
    'Pesquisa no BD se já houve movimento no estoque para o produto em questão na filialempresa
    lErro = Comando_Executar(alComando(1), "SELECT MovimentoEstoque.Data FROM MovimentoEstoque, TiposMovimentoEstoque WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND FilialEmpresa = ? AND Produto = ? AND Almoxarifado = ? AND (TiposMovimentoEstoque.EntradaOuSaida = ? Or TiposMovimentoEstoque.EntradaOuSaida = ?) ORDER BY MovimentoEstoque.Data", dtDataMovEst, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, TIPOMOV_EST_ENTRADA, TIPOMOV_EST_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 133451

    'Verifica movimento
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133452
    
    If lErro = AD_SQL_SUCESSO Then bPossuiMovimento = True
    
    objEstoqueProdutoBD.sProduto = objEstoqueProduto.sProduto
    objEstoqueProdutoBD.iAlmoxarifado = objEstoqueProduto.iAlmoxarifado
    
    bPossuiEstoqueProduto = False
    
    lErro = CF("EstoqueProduto_Le1", alComando(2), objEstoqueProdutoBD)
    If lErro <> SUCESSO And lErro <> 36664 Then gError 28771
    
    If lErro = SUCESSO Then bPossuiEstoqueProduto = True

    'só admite editar o estoque inicial no mes que está aberto
    objEstoqueMes.iAno = Year(objEstoqueProduto.dtDataInicial)
    objEstoqueMes.iMes = Month(objEstoqueProduto.dtDataInicial)
    objEstoqueMes.iFilialEmpresa = objEstoqueProduto.iFilialEmpresa

    'Le a tabela EstoqueMes e loca o registro
    lErro = CF("EstoqueMes_Le_Lock", alComando(12), objEstoqueMes)
    If lErro <> SUCESSO And lErro <> 41774 Then gError 20739
    
    'se o mes não está cadastrado ==> erro
    If lErro = 41774 Then gError 20740
    
'    'se o mes está fechado ==> erro
'    If objEstoqueMes.iFechamento = ESTOQUEMES_FECHAMENTO_FECHADO Then gError 20741
'
'    Atualmente o sistema permite alterar o estoque inicial mesmo que haja movimentação do estoque
'    If bPossuiMovimento Then
'        If bPossuiEstoqueProduto Then
'            If objEstoqueProduto.dQuantidadeInicial <> objEstoqueProdutoBD.dQuantidadeInicial Or objEstoqueProduto.dSaldoInicial <> objEstoqueProdutoBD.dSaldoInicial Or objEstoqueProduto.dtDataInicial <> objEstoqueProdutoBD.dtDataInicial Then gError 26798
'        Else
'            If objEstoqueProduto.dQuantidadeInicial <> 0 Or objEstoqueProduto.dSaldoInicial <> 0 Then gError 26799
'        End If
'    End If
    
    'se o primeiro movimento de estoque tiver data menor que a data inicial de estoque produto ==> erro
    If bPossuiMovimento And dtDataMovEst < objEstoqueProduto.dtDataInicial Then gError 133439
    
'==================================================================================
'alComando(33 to 34)
   
    'Obtem o 1o estoque inicial desse produto
    lErro = Comando_Executar(alComando(33), "SELECT MIN(DataInicial), COUNT(*) FROM EstoqueProduto WHERE Produto = ? AND Almoxarifado IN (SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa = ?)", dtDataInicialEstProd, lQtdeEstProd, objEstoqueProduto.sProduto, objEstoqueMes.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 213204

    lErro = Comando_BuscarPrimeiro(alComando(33))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213205
    
    'Obtem o 1o estoque inicial cadastrado
    lErro = Comando_Executar(alComando(34), "SELECT MIN(DataInicial), COUNT(*) FROM EstoqueProduto WHERE Almoxarifado IN (SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa = ?)", dtDataInicialEst, lQtdeEst, objEstoqueMes.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 213206

    lErro = Comando_BuscarPrimeiro(alComando(34))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213207
    
    'Teste para garantir que sempre que existir quantidade vai existir valor
    If gobjMAT.iEstIniBloqVlrZerado = MARCADO Then
        If Abs(objEstoqueProduto.dQuantidadeInicial) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dSaldoInicial) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialBenef) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialBenef) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialBenef3) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialBenef3) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialConserto) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialConserto) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialConserto3) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialConserto3) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialConsig) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialConsig) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialConsig3) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialConsig3) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialDemo) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialDemo) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialDemo3) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialDemo3) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialOutras) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialOutras) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
        If Abs(objEstoqueProduto.dQuantInicialOutras3) > QTDE_ESTOQUE_DELTA Then
            If Abs(objEstoqueProduto.dValorInicialOutras3) < DELTA_VALORMONETARIO Then gError 213208 'Qtde sem valor
        End If
    End If
    
    'Testa para garantir que a data inicial do estoque é a mesma para todos os cadastros
    'podendo ser posterior se estiver sem quantidade
    If bPossuiEstoqueProduto Then lQtdeEst = lQtdeEst - 1 'Ignora se for cadastro único
    If gobjMAT.iEstIniBloqDataDif = MARCADO And dtDataInicialEst <> DATA_NULA And lQtdeEst > 0 Then
        If Abs(objEstoqueProduto.dQuantidadeInicial) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialBenef) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialBenef3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConserto) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConserto3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConsig) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConsig3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialDemo) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialDemo3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialOutras) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dValorInicialOutras3) > QTDE_ESTOQUE_DELTA _
        Then
            If objEstoqueProduto.dtDataInicial <> dtDataInicialEst Then gError 213209 'Data inicial tem que ser a data inicial do 1o estoque
        End If
        If objEstoqueProduto.dtDataInicial < dtDataInicialEst Then gError 213210 'Data inicial tem que ser posterior a data inicial do 1o estoque
    End If
    'OBS-> O 1o cadastro poderá ser em qualquer data e poderá ser alterado. Do 2o em diante terá de respeitar

    'Testa para garantir que a data inicial do estoque é a mesma para cadastrados do mesmo produto
    'podendo ser posterior se estiver sem quantidade
    If bPossuiEstoqueProduto Then lQtdeEstProd = lQtdeEstProd - 1 'lQtdeEstProd deverá considerar apenas outros cadastros para o produto e ignorar oi próprio
    If gobjMAT.iEstIniBloqDataDifProd = MARCADO And dtDataInicialEstProd <> DATA_NULA And lQtdeEstProd > 0 Then
        If Abs(objEstoqueProduto.dQuantidadeInicial) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialBenef) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialBenef3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConserto) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConserto3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConsig) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialConsig3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialDemo) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialDemo3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dQuantInicialOutras) > QTDE_ESTOQUE_DELTA Or _
            Abs(objEstoqueProduto.dValorInicialOutras3) > QTDE_ESTOQUE_DELTA _
        Then
            If objEstoqueProduto.dtDataInicial <> dtDataInicialEstProd Then gError 213211 'Data inicial tem que ser a data inicial do 1o estoque desse produto
        Else
            If objEstoqueProduto.dtDataInicial < dtDataInicialEstProd Then gError 213212 'Data inicial tem que ser posterior a data inicial do 1o estoque desse produto
        End If
    End If
    'OBS-> O 1o cadastro poderá ser em qualquer data e poderá ser alterado. Do 2o em diante terá de respeitar
    
    'Testa para ver se o estoque inicial está sendo alterado para um ano posterior
    If gobjMAT.iEstIniBloqAlterDataAnoPost = MARCADO And bPossuiEstoqueProduto Then
        iAnoEstAtual = Year(objEstoqueProduto.dtDataInicial)
        iAnoEstAnt = Year(objEstoqueProdutoBD.dtDataInicial)
        
        If iAnoEstAnt < iAnoEstAtual Then gError 213213 'Não pode cadastrar o estoque inicial e depois dizer que é de um ano posterior
    
    End If
    
'==================================================================================

    If bPossuiEstoqueProduto Then
        
        If gobjMAT.iAceitaEstoqueNegativo = DESMARCADO Then
            
            If objEstoqueProduto.dQuantidadeInicial + (objEstoqueProdutoBD.dQuantDispNossa - objEstoqueProdutoBD.dQuantidadeInicial) < -QTDE_ESTOQUE_DELTA Then gError 133440
        
            If objEstoqueProduto.dQuantInicialConserto + (objEstoqueProdutoBD.dQuantConserto - objEstoqueProdutoBD.dQuantInicialConserto) < -QTDE_ESTOQUE_DELTA Then gError 133441
            
            If objEstoqueProduto.dQuantInicialConserto3 + (objEstoqueProdutoBD.dQuantConserto3 - objEstoqueProdutoBD.dQuantInicialConserto3) < -QTDE_ESTOQUE_DELTA Then gError 133442
            
            If objEstoqueProduto.dQuantInicialConsig + (objEstoqueProdutoBD.dQuantConsig - objEstoqueProdutoBD.dQuantInicialConsig) < -QTDE_ESTOQUE_DELTA Then gError 133443
            
            If objEstoqueProduto.dQuantInicialConsig3 + (objEstoqueProdutoBD.dQuantConsig3 - objEstoqueProdutoBD.dQuantInicialConsig3) < -QTDE_ESTOQUE_DELTA Then gError 133444
            
            If objEstoqueProduto.dQuantInicialDemo + (objEstoqueProdutoBD.dQuantDemo - objEstoqueProdutoBD.dQuantInicialDemo) < -QTDE_ESTOQUE_DELTA Then gError 133445
            
            If objEstoqueProduto.dQuantInicialDemo3 + (objEstoqueProdutoBD.dQuantDemo3 - objEstoqueProdutoBD.dQuantInicialDemo3) < -QTDE_ESTOQUE_DELTA Then gError 133446
            
            If objEstoqueProduto.dQuantInicialOutras + (objEstoqueProdutoBD.dQuantOutras - objEstoqueProdutoBD.dQuantInicialOutras) < -QTDE_ESTOQUE_DELTA Then gError 133447
            
            If objEstoqueProduto.dQuantInicialOutras3 + (objEstoqueProdutoBD.dQuantOutras3 - objEstoqueProdutoBD.dQuantInicialOutras3) < -QTDE_ESTOQUE_DELTA Then gError 133448
            
            If objEstoqueProduto.dQuantInicialBenef + (objEstoqueProdutoBD.dQuantBenef - objEstoqueProdutoBD.dQuantInicialBenef) < -QTDE_ESTOQUE_DELTA Then gError 133449
            
            If objEstoqueProduto.dQuantInicialBenef3 + (objEstoqueProdutoBD.dQuantBenef3 - objEstoqueProdutoBD.dQuantInicialBenef3) < -QTDE_ESTOQUE_DELTA Then gError 133450
            
        End If
        
'    Atualmente o sistema permite alterar o estoque inicial mesmo que haja movimentação do estoque
'        If Not bPossuiMovimento Then

            'Se já tem a relacao produto x almoxarifado, mas ainda não possui movimento de estoque para a filial
            'Atualiza os dados na tabela de EstoqueProduto
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE EstoqueProduto SET QuantDispNossa = ?, LocalizacaoFisica = ?, QuantidadeInicial = ?, SaldoInicial = ?, DataInicial = ?, ContaContabil =?, QuantInicialConsig3 = ?, QuantInicialConsig = ?, QuantInicialDemo3 = ?, QuantInicialDemo = ?, QuantInicialConserto3 = ?, QuantInicialConserto = ?, QuantInicialOutras3 = ?, QuantInicialOutras = ?, QuantInicialBenef  = ?, QuantInicialBenef3 = ?, ValorInicialConsig3 = ?, ValorInicialConsig = ?, ValorInicialDemo3 = ?, ValorInicialDemo = ?, ValorInicialConserto3 = ?, ValorInicialConserto = ?, ValorInicialOutras3 = ?, ValorInicialOutras = ?, ValorInicialBenef = ?, ValorInicialBenef3 = ?, " & _
            "QuantConsig3 = ?, QuantConsig = ?, QuantDemo3 = ?, QuantDemo = ?, QuantConserto3 = ?, QuantConserto = ?, QuantOutras3 = ?, QuantOutras = ?, QuantBenef  = ?, QuantBenef3 = ?, ValorConsig3 = ?, ValorConsig = ?, ValorDemo3 = ?, ValorDemo = ?, ValorConserto3 = ?, ValorConserto = ?, ValorOutras3 = ?, ValorOutras = ?, ValorBenef = ?, ValorBenef3 = ?, DataUltAtualizacao = ?, Exportado = ? ", _
            alComando(2), objEstoqueProduto.dQuantidadeInicial + (objEstoqueProdutoBD.dQuantDispNossa - objEstoqueProdutoBD.dQuantidadeInicial), objEstoqueProduto.sLocalizacaoFisica, objEstoqueProduto.dQuantidadeInicial, objEstoqueProduto.dSaldoInicial, objEstoqueProduto.dtDataInicial, objEstoqueProduto.sContaContabil, _
            objEstoqueProduto.dQuantInicialConsig3, objEstoqueProduto.dQuantInicialConsig, objEstoqueProduto.dQuantInicialDemo3, objEstoqueProduto.dQuantInicialDemo, objEstoqueProduto.dQuantInicialConserto3, objEstoqueProduto.dQuantInicialConserto, objEstoqueProduto.dQuantInicialOutras3, objEstoqueProduto.dQuantInicialOutras, objEstoqueProduto.dQuantInicialBenef, objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dValorInicialConsig3, objEstoqueProduto.dValorInicialConsig, objEstoqueProduto.dValorInicialDemo3, objEstoqueProduto.dValorInicialDemo, objEstoqueProduto.dValorInicialConserto3, objEstoqueProduto.dValorInicialConserto, objEstoqueProduto.dValorInicialOutras3, objEstoqueProduto.dValorInicialOutras, objEstoqueProduto.dValorInicialBenef, objEstoqueProduto.dValorInicialBenef3, _
            objEstoqueProduto.dQuantInicialConsig3 + (objEstoqueProdutoBD.dQuantConsig3 - objEstoqueProdutoBD.dQuantInicialConsig3), objEstoqueProduto.dQuantInicialConsig + (objEstoqueProdutoBD.dQuantConsig - objEstoqueProdutoBD.dQuantInicialConsig), objEstoqueProduto.dQuantInicialDemo3 + (objEstoqueProdutoBD.dQuantDemo3 - objEstoqueProdutoBD.dQuantInicialDemo3), objEstoqueProduto.dQuantInicialDemo + (objEstoqueProdutoBD.dQuantDemo - objEstoqueProdutoBD.dQuantInicialDemo), objEstoqueProduto.dQuantInicialConserto3 + (objEstoqueProdutoBD.dQuantConserto3 - objEstoqueProdutoBD.dQuantInicialConserto3), objEstoqueProduto.dQuantInicialConserto + (objEstoqueProdutoBD.dQuantConserto - objEstoqueProdutoBD.dQuantInicialConserto), _
            objEstoqueProduto.dQuantInicialOutras3 + (objEstoqueProdutoBD.dQuantOutras3 - objEstoqueProdutoBD.dQuantInicialOutras3), objEstoqueProduto.dQuantInicialOutras + (objEstoqueProdutoBD.dQuantOutras - objEstoqueProdutoBD.dQuantInicialOutras), objEstoqueProduto.dQuantInicialBenef + (objEstoqueProdutoBD.dQuantBenef - objEstoqueProdutoBD.dQuantInicialBenef), objEstoqueProduto.dQuantInicialBenef3 + (objEstoqueProdutoBD.dQuantBenef3 - objEstoqueProdutoBD.dQuantInicialBenef3), _
            objEstoqueProduto.dValorInicialConsig3 + (objEstoqueProdutoBD.dValorConsig3 - objEstoqueProdutoBD.dValorInicialConsig3), objEstoqueProduto.dValorInicialConsig + (objEstoqueProdutoBD.dValorConsig - objEstoqueProdutoBD.dValorInicialConsig), objEstoqueProduto.dValorInicialDemo3 + (objEstoqueProdutoBD.dValorDemo3 - objEstoqueProdutoBD.dValorInicialDemo3), objEstoqueProduto.dValorInicialDemo + (objEstoqueProdutoBD.dValorDemo - objEstoqueProdutoBD.dValorInicialDemo), objEstoqueProduto.dValorInicialConserto3 + (objEstoqueProdutoBD.dValorConserto3 - objEstoqueProdutoBD.dValorInicialConserto3), objEstoqueProduto.dValorInicialConserto + (objEstoqueProdutoBD.dValorConserto - objEstoqueProdutoBD.dValorInicialConserto), _
            objEstoqueProduto.dValorInicialOutras3 + (objEstoqueProdutoBD.dValorOutras3 - objEstoqueProdutoBD.dValorInicialOutras3), objEstoqueProduto.dValorInicialOutras + (objEstoqueProdutoBD.dValorOutras - objEstoqueProdutoBD.dValorInicialOutras), objEstoqueProduto.dValorInicialBenef + (objEstoqueProdutoBD.dValorBenef - objEstoqueProdutoBD.dValorInicialBenef), objEstoqueProduto.dValorInicialBenef3 + (objEstoqueProdutoBD.dValorBenef3 - objEstoqueProdutoBD.dValorInicialBenef3), Date, 0)
            If lErro <> AD_SQL_SUCESSO Then gError 28777

            lErro = Comando_ExecutarPos(alComando(4), "SELECT Ano FROM SldMesEstAlm WHERE Almoxarifado = ? AND Produto = ? AND Ano = ? ", 0, iAno, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, Year(objEstoqueProduto.dtDataInicial))
            If lErro <> AD_SQL_SUCESSO Then gError 26800

            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 26801
            
            If lErro <> AD_SQL_SUCESSO Then gError 26802

            lErro = Comando_ExecutarPos(alComando(5), "UPDATE SldMesEstAlm SET ValorInicial=?, QuantInicial =?, ValorInicialCusto=?, QuantInicialCusto =?", alComando(4), objEstoqueProduto.dSaldoInicial + objEstoqueProduto.dValorInicialConsig3 + objEstoqueProduto.dValorInicialDemo3 + objEstoqueProduto.dValorInicialConserto3 + objEstoqueProduto.dValorInicialOutras3 + objEstoqueProduto.dValorInicialBenef3, objEstoqueProduto.dQuantidadeInicial + objEstoqueProduto.dQuantInicialConsig3 + objEstoqueProduto.dQuantInicialDemo3 + objEstoqueProduto.dQuantInicialConserto3 + objEstoqueProduto.dQuantInicialOutras3 + objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dSaldoInicial, objEstoqueProduto.dQuantidadeInicial)
            If lErro <> AD_SQL_SUCESSO Then gError 26604
                        
            'Atualiza SldMesEstAlm1
            lErro = Comando_ExecutarPos(alComando(17), "SELECT Ano FROM SldMesEstAlm1 WHERE Almoxarifado = ? AND Produto = ? AND Ano = ? ", 0, iAno, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, Year(objEstoqueProduto.dtDataInicial))
            If lErro <> AD_SQL_SUCESSO Then gError 69585

            lErro = Comando_BuscarPrimeiro(alComando(17))
            If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 69586
            
            If lErro = AD_SQL_SUCESSO Then
            
                lErro = Comando_ExecutarPos(alComando(18), "UPDATE SldMesEstAlm1 SET QuantInicialConsig3 = ?, QuantInicialDemo3 = ?, QuantInicialConserto3 = ?, QuantInicialOutros3 = ?, QuantInicialBenef3 = ?, ValorInicialConsig3 = ?, ValorInicialDemo3 = ?, ValorInicialConserto3 = ?, ValorInicialOutros3 = ?, ValorInicialBenef3 = ?", alComando(17), objEstoqueProduto.dQuantInicialConsig3, objEstoqueProduto.dQuantInicialDemo3, objEstoqueProduto.dQuantInicialConserto3, objEstoqueProduto.dQuantInicialOutras3, objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dValorInicialConsig3, objEstoqueProduto.dValorInicialDemo3, objEstoqueProduto.dValorInicialConserto3, objEstoqueProduto.dValorInicialOutras3, objEstoqueProduto.dValorInicialBenef3)
                If lErro <> AD_SQL_SUCESSO Then gError 69587
            
            End If
            
            'Atualiza SldMesEstAlm2
            lErro = Comando_ExecutarPos(alComando(19), "SELECT Ano FROM SldMesEstAlm2 WHERE Almoxarifado = ? AND Produto = ? AND Ano = ? ", 0, iAno, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, Year(objEstoqueProduto.dtDataInicial))
            If lErro <> AD_SQL_SUCESSO Then gError 69588

            lErro = Comando_BuscarPrimeiro(alComando(19))
            If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 69589
            
            If lErro = AD_SQL_SUCESSO Then
            
                lErro = Comando_ExecutarPos(alComando(20), "UPDATE SldMesEstAlm2 SET QuantInicialConsig = ?, QuantInicialDemo = ?, QuantInicialConserto = ?, QuantInicialOutros = ?, QuantInicialBenef = ?, ValorInicialConsig = ?, ValorInicialDemo = ?, ValorInicialConserto = ?, ValorInicialOutros = ?, ValorInicialBenef = ?", alComando(19), objEstoqueProduto.dQuantInicialConsig, objEstoqueProduto.dQuantInicialDemo, objEstoqueProduto.dQuantInicialConserto, objEstoqueProduto.dQuantInicialOutras, objEstoqueProduto.dQuantInicialBenef, objEstoqueProduto.dValorInicialConsig, objEstoqueProduto.dValorInicialDemo, objEstoqueProduto.dValorInicialConserto, objEstoqueProduto.dValorInicialOutras, objEstoqueProduto.dValorInicialBenef)
                If lErro <> AD_SQL_SUCESSO Then gError 69590
            
            End If
            
'    Atualmente o sistema permite alterar o estoque inicial mesmo que haja movimentação do estoque
'        Else
'
'            'Se já tem a relacao produto x almoxarifado, mas já tem movimento de estoque para a filial ==> só pode atualizar a localizacao fisica
'            'Atualiza os dados na tabela de EstoqueProduto
'            lErro = Comando_ExecutarPos(alComando(3), "UPDATE EstoqueProduto SET LocalizacaoFisica = ?, ContaContabil =?", alComando(2), objEstoqueProduto.sLocalizacaoFisica, objEstoqueProduto.sContaContabil)
'            If lErro <> AD_SQL_SUCESSO Then gError 60785
'
'        End If
        
    Else
    
        ' Se ainda não tem a relacao produto x almoxarifado
        'Insere o EstoqueProduto na tabela EstoqueProduto
        lErro = Comando_Executar(alComando(6), "INSERT INTO EstoqueProduto(Produto, Almoxarifado, QuantDispNossa, LocalizacaoFisica, ContaContabil, QuantidadeInicial, SaldoInicial, DataInicial, QuantInicialConsig3, QuantInicialConsig, QuantInicialDemo3, QuantInicialDemo, QuantInicialConserto3, QuantInicialConserto, QuantInicialOutras3, QuantInicialOutras, QuantInicialBenef, QuantInicialBenef3, ValorInicialConsig3, ValorInicialConsig, ValorInicialDemo3, ValorInicialDemo, ValorInicialConserto3, ValorInicialConserto, ValorInicialOutras3, ValorInicialOutras, ValorInicialBenef, ValorInicialBenef3, " & _
        "QuantConsig3, QuantConsig, QuantDemo3, QuantDemo, QuantConserto3, QuantConserto, QuantOutras3, QuantOutras, QuantBenef, QuantBenef3, ValorConsig3, ValorConsig, ValorDemo3, ValorDemo, ValorConserto3, ValorConserto, ValorOutras3, ValorOutras, ValorBenef, ValorBenef3,DataUltAtualizacao,Exportado)" & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.dQuantidadeInicial, objEstoqueProduto.sLocalizacaoFisica, objEstoqueProduto.sContaContabil, objEstoqueProduto.dQuantidadeInicial, objEstoqueProduto.dSaldoInicial, objEstoqueProduto.dtDataInicial, _
            objEstoqueProduto.dQuantInicialConsig3, objEstoqueProduto.dQuantInicialConsig, objEstoqueProduto.dQuantInicialDemo3, objEstoqueProduto.dQuantInicialDemo, objEstoqueProduto.dQuantInicialConserto3, objEstoqueProduto.dQuantInicialConserto, objEstoqueProduto.dQuantInicialOutras3, objEstoqueProduto.dQuantInicialOutras, objEstoqueProduto.dQuantInicialBenef, objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dValorInicialConsig3, objEstoqueProduto.dValorInicialConsig, objEstoqueProduto.dValorInicialDemo3, objEstoqueProduto.dValorInicialDemo, objEstoqueProduto.dValorInicialConserto3, objEstoqueProduto.dValorInicialConserto, objEstoqueProduto.dValorInicialOutras3, objEstoqueProduto.dValorInicialOutras, objEstoqueProduto.dValorInicialBenef, objEstoqueProduto.dValorInicialBenef3, _
            objEstoqueProduto.dQuantInicialConsig3, objEstoqueProduto.dQuantInicialConsig, objEstoqueProduto.dQuantInicialDemo3, objEstoqueProduto.dQuantInicialDemo, objEstoqueProduto.dQuantInicialConserto3, objEstoqueProduto.dQuantInicialConserto, objEstoqueProduto.dQuantInicialOutras3, objEstoqueProduto.dQuantInicialOutras, objEstoqueProduto.dQuantInicialBenef, objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dValorInicialConsig3, objEstoqueProduto.dValorInicialConsig, objEstoqueProduto.dValorInicialDemo3, objEstoqueProduto.dValorInicialDemo, objEstoqueProduto.dValorInicialConserto3, objEstoqueProduto.dValorInicialConserto, objEstoqueProduto.dValorInicialOutras3, objEstoqueProduto.dValorInicialOutras, objEstoqueProduto.dValorInicialBenef, objEstoqueProduto.dValorInicialBenef3, Date, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 28778
        
        'insere um registro em SldMesEstAlm
        lErro = Comando_Executar(alComando(7), "INSERT INTO SldMesEstAlm (Almoxarifado,Produto,Ano,QuantInicial,ValorInicial, QuantInicialCusto, ValorInicialCusto) VALUES (?,?,?,?,?,?,?)", objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.dQuantidadeInicial + objEstoqueProduto.dQuantInicialConsig3 + objEstoqueProduto.dQuantInicialDemo3 + objEstoqueProduto.dQuantInicialConserto3 + objEstoqueProduto.dQuantInicialOutras3 + objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dSaldoInicial + objEstoqueProduto.dValorInicialConsig3 + objEstoqueProduto.dValorInicialDemo3 + objEstoqueProduto.dValorInicialConserto3 + objEstoqueProduto.dValorInicialOutras3 + objEstoqueProduto.dValorInicialBenef3, objEstoqueProduto.dQuantidadeInicial, objEstoqueProduto.dSaldoInicial)
        If lErro <> SUCESSO Then gError 26789
        
        'insere um registro em SldMesEstAlm1
        lErro = Comando_Executar(alComando(15), "INSERT INTO SldMesEstAlm1 (Almoxarifado,Produto,Ano, QuantInicialConsig3, QuantInicialDemo3, QuantInicialConserto3, QuantInicialOutros3, QuantInicialBenef3, ValorInicialConsig3, ValorInicialDemo3, ValorInicialConserto3, ValorInicialOutros3, ValorInicialBenef3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.dQuantInicialConsig3, objEstoqueProduto.dQuantInicialDemo3, objEstoqueProduto.dQuantInicialConserto3, objEstoqueProduto.dQuantInicialOutras3, objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dValorInicialConsig3, objEstoqueProduto.dValorInicialDemo3, objEstoqueProduto.dValorInicialConserto3, objEstoqueProduto.dValorInicialOutras3, objEstoqueProduto.dValorInicialBenef3)
        If lErro <> SUCESSO Then gError 20783
    
        'insere um registro em SldMesEstAlm2
        lErro = Comando_Executar(alComando(16), "INSERT INTO SldMesEstAlm2 (Almoxarifado,Produto,Ano, QuantInicialConsig, QuantInicialDemo, QuantInicialConserto, QuantInicialOutros, QuantInicialBenef, ValorInicialConsig, ValorInicialDemo, ValorInicialConserto, ValorInicialOutros, ValorInicialBenef) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.dQuantInicialConsig, objEstoqueProduto.dQuantInicialDemo, objEstoqueProduto.dQuantInicialConserto, objEstoqueProduto.dQuantInicialOutras, objEstoqueProduto.dQuantInicialBenef, objEstoqueProduto.dValorInicialConsig, objEstoqueProduto.dValorInicialDemo, objEstoqueProduto.dValorInicialConserto, objEstoqueProduto.dValorInicialOutras, objEstoqueProduto.dValorInicialBenef)
        If lErro <> SUCESSO Then gError 20784
    
    End If
                
    'Grava as informações complementares (SldMesEst) de estoque inicial.
    lErro = EstoqueInicial_Grava_ProdutosFilial(alComando, objEstoqueProduto, bPossuiMovimento, iAlmoxarifadoPadrao, objProduto, objEstoqueProdutoBD, iMostrarMsg)
    If lErro <> SUCESSO Then gError 20738
    
    'se for Custo Standard e não possui movimento
    If objProduto.iApropriacaoCusto = APROPR_CUSTO_STANDARD And bPossuiMovimento = False Then
    
        'Insere o CustoStandard para o Produto passado
        lErro = EstoqueInicial_Grava_CustoStandard(alComando, objEstoqueProduto)
        If lErro <> SUCESSO Then gError 69966
            
    End If
    
    'gera os registros de SldMesEst, SldMesEst1, SldMesEst2, SldMesEstAlm, SldMesAlm1 e SldMesEstAlm2 que não existirem para os anos seguintes ao da data inicial que já estiverem abertos
    lErro = EstoqueInicial_Gera_Info_Anos_Abertos(objEstoqueMes, objEstoqueProduto)
    If lErro <> SUCESSO Then gError 92941
    
    'grava os rastreamentos associados ao estoque inicial
    lErro = EstoqueInicial_Rastreamento_Grava(alComando(29), alComando(30), alComando(31), alComando(32), colRastreamento, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> SUCESSO Then gError 71922

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    EstoqueInicial_Grava_Trans = SUCESSO

    Exit Function

Erro_EstoqueInicial_Grava_Trans:

    EstoqueInicial_Grava_Trans = gErr

    Select Case gErr

        Case 20738, 20739, 28764, 28768, 28771, 69966, 71890, 71922, 92941
        
        Case 20740
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEMES_INEXISTENTE", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
        
        Case 20741
            lErro = Rotina_Erro(vbOKOnly, "Erro_EstoqueMes_Fechado", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
        
        Case 20783
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM1", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 20784
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM2", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 26604, 69587, 69590
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESESTALM", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 26798
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_COM_MOVIMENTOS", gErr, objProduto.sCodigo)
        
        Case 26799
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_QUANTIDADE_NAO_NULOS", gErr, objEstoqueProduto.sProduto)
        
        Case 26789
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 26800, 26801
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 26802
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SLDMESESTALM_INEXISTENTE", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 28762
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 28765
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_GERENCIAL", gErr, objProduto.sCodigo)
                   
        Case 28773, 28774, 133451, 133452
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
        
        Case 28777, 60785
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 28778
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 44936
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_SEM_ESTOQUE", gErr, objProduto.sCodigo)
        
        Case 69585, 69586
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM11", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 69588, 69589
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM21", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 133439
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVEST_MENOR_DATAINICIALEST", gErr, dtDataMovEst, objEstoqueProduto.dtDataInicial)
        
        Case 133440
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DISPONIVEL", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantDispNossa)
        
        Case 133441
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSERTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantConserto)
            
        Case 133442
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSERTO3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantConserto3)
            
        Case 133443
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSIG", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantConsig)
            
        Case 133444
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSIG3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantConsig3)
            
        Case 133445
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DEMO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantDemo)
            
        Case 133446
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DEMO3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantDemo3)
            
        Case 133447
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_OUTRAS", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantOutras)
            
        Case 133448
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_OUTRAS3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantOutras3)
            
        Case 133449
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_BENEF", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantBenef)
            
        Case 133450
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_BENEF3", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProdutoBD.dQuantBenef3)
        
        Case 213204 To 213207
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO3", gErr)
            
        Case 213208
            Call Rotina_Erro(vbOKOnly, "ERRO_ESTINI_COM_QTDE_SEM_VALOR", gErr)
        
        Case 213209
            Call Rotina_Erro(vbOKOnly, "ERRO_ESTINI_DATA_DIF_DATAMIN_EST", gErr, objEstoqueProduto.dtDataInicial, dtDataInicialEst)
        
        Case 213210
            Call Rotina_Erro(vbOKOnly, "ERRO_ESTINI_DATA_MENOR_DATAMIN_EST", gErr, objEstoqueProduto.dtDataInicial, dtDataInicialEst)
        
        Case 213211
            Call Rotina_Erro(vbOKOnly, "ERRO_ESTINI_DATA_DIF_DATAMIN_ESTPROD", gErr, objEstoqueProduto.dtDataInicial, dtDataInicialEstProd)
        
        Case 213212
            Call Rotina_Erro(vbOKOnly, "ERRO_ESTINI_DATA_MENOR_DATAMIN_ESTPROD", gErr, objEstoqueProduto.dtDataInicial, dtDataInicialEstProd)
        
        Case 213213
            Call Rotina_Erro(vbOKOnly, "ERRO_ESTINI_MUDANCA_ANO", gErr, objEstoqueProduto.dtDataInicial, objEstoqueProdutoBD.dtDataInicial)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151767)

    End Select

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'mario fim'


Public Function EstoqueInicial_Gera_Info_Anos_Abertos(objEstoqueMes As ClassEstoqueMes, objEstoqueProduto As ClassEstoqueProduto) As Long
'gera os registros de SldMesEst, SldMesEst1, SldMesEst2, SldMesEstAlm, SldMesAlm1 e SldMesEstAlm2 que não existirem para os anos seguintes ao da data inicial que já estiverem abertos

Dim alComando(1 To 13) As Long
Dim iIndice As Integer
Dim iAno As Integer
Dim iAno1 As Integer
Dim lErro As Long

On Error GoTo Erro_EstoqueInicial_Gera_Info_Anos_Abertos

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92942
    Next

    'pesquisa os anos que estão abertos a partir do ano do estoqueinicial
    lErro = Comando_Executar(alComando(1), "SELECT DISTINCT Ano FROM EstoqueMes WHERE FilialEmpresa = ? AND Ano > ? ORDER BY Ano", iAno, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno)
    If lErro <> AD_SQL_SUCESSO Then gError 92947

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92948

    Do While lErro = AD_SQL_SUCESSO

        'verifica se o ano em questao já existe
        lErro = Comando_Executar(alComando(2), "SELECT Ano FROM SldMesEstAlm WHERE Almoxarifado = ? AND Produto = ? AND Ano = ? ", iAno1, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 92949

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 92950
        
        'se não existir
        If lErro = AD_SQL_SEM_DADOS Then

            'insere um registro em SldMesEstAlm
            lErro = Comando_Executar(alComando(3), "INSERT INTO SldMesEstAlm (Almoxarifado, Produto, Ano) VALUES (?,?,?)", objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, iAno)
            If lErro <> SUCESSO Then gError 92951

        End If

        'verifica se o ano em questao já existe
        lErro = Comando_Executar(alComando(4), "SELECT Ano FROM SldMesEstAlm1 WHERE Almoxarifado = ? AND Produto = ? AND Ano = ? ", iAno1, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 92952

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 92953
        
        'se não existir
        If lErro = AD_SQL_SEM_DADOS Then

            'insere um registro em SldMesEstAlm1
            lErro = Comando_Executar(alComando(5), "INSERT INTO SldMesEstAlm1 (Almoxarifado,Produto,Ano) VALUES (?,?,?)", objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, iAno)
            If lErro <> SUCESSO Then gError 92954

        End If

        'verifica se o ano em questao já existe
        lErro = Comando_Executar(alComando(6), "SELECT Ano FROM SldMesEstAlm2 WHERE Almoxarifado = ? AND Produto = ? AND Ano = ? ", iAno1, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 92955

        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 92956
        
        'se não existir
        If lErro = AD_SQL_SEM_DADOS Then

            'insere um registro em SldMesEstAlm2
            lErro = Comando_Executar(alComando(7), "INSERT INTO SldMesEstAlm2 (Almoxarifado,Produto,Ano) VALUES (?,?,?)", objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto, iAno)
            If lErro <> SUCESSO Then gError 92957

        End If

        'verifica se o ano em questao já existe
        lErro = Comando_Executar(alComando(8), "SELECT Ano FROM SldMesEst WHERE FilialEmpresa = ? AND Produto = ? AND Ano = ? ", iAno1, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 92958

        lErro = Comando_BuscarPrimeiro(alComando(8))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 92959
        
        'se não existir
        If lErro = AD_SQL_SEM_DADOS Then

            'insere um registro em SldMesEst
            lErro = Comando_Executar(alComando(9), "INSERT INTO SldMesEst (FilialEmpresa,Produto,Ano) VALUES (?,?,?)", objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto, iAno)
            If lErro <> SUCESSO Then gError 92960

        End If

        'verifica se o ano em questao já existe
        lErro = Comando_Executar(alComando(10), "SELECT Ano FROM SldMesEst1 WHERE FilialEmpresa = ? AND Produto = ? AND Ano = ? ", iAno1, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 92961

        lErro = Comando_BuscarPrimeiro(alComando(10))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 92962
        
        'se não existir
        If lErro = AD_SQL_SEM_DADOS Then

            'insere um registro em SldMesEstAlm
            lErro = Comando_Executar(alComando(11), "INSERT INTO SldMesEst1 (FilialEmpresa,Produto,Ano) VALUES (?,?,?)", objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto, iAno)
            If lErro <> SUCESSO Then gError 92963

        End If

        'verifica se o ano em questao já existe
        lErro = Comando_Executar(alComando(12), "SELECT Ano FROM SldMesEst2 WHERE FilialEmpresa = ? AND Produto = ? AND Ano = ? ", iAno1, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 92964

        lErro = Comando_BuscarPrimeiro(alComando(12))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 92965
        
        'se não existir
        If lErro = AD_SQL_SEM_DADOS Then

            'insere um registro em SldMesEstAlm
            lErro = Comando_Executar(alComando(13), "INSERT INTO SldMesEst2 (FilialEmpresa,Produto,Ano) VALUES (?,?,?)", objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto, iAno)
            If lErro <> SUCESSO Then gError 92966

        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92948
    
    Loop

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    EstoqueInicial_Gera_Info_Anos_Abertos = SUCESSO

    Exit Function

Erro_EstoqueInicial_Gera_Info_Anos_Abertos:

    EstoqueInicial_Gera_Info_Anos_Abertos = gErr

    Select Case gErr

        Case 92942
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 92947, 92948
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEMES1", gErr)
            
        Case 92949, 92950
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM", gErr, iAno, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)

        Case 92951
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM", gErr, iAno1, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)

        Case 92952, 92953
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM11", gErr, iAno, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 92954
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM1", gErr, iAno1, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 92955, 92956
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM21", gErr, iAno, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)

        Case 92957
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM2", gErr, iAno1, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 92958, 92959
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", gErr, iAno, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 92960
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST", gErr, iAno1, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 92961, 92962
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", gErr, iAno, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 92963
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST1", gErr, iAno1, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 92964, 92965
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST21", gErr, iAno, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 92966
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST1", gErr, iAno1, objEstoqueMes.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151768)

    End Select

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function EstoqueInicial_Grava_CustoStandard(alComando() As Long, ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'Insere o Custo Standard em Estoque Inicial e revaloriza os Estoque Iniciais se necessário

Dim lErro As Long
Dim iAno As Integer
Dim iMes As Integer
Dim dCustoStandardLido As Double
Dim dCustoStandardAtual As Double
Dim vbMesRes As VbMsgBoxResult
Dim objItemMovEstoque As New ClassItemMovEstoque
Dim dNovoValorInicial As Double
Dim tEstoqueProduto As typeEstoqueProduto
Dim objAlmoxarifado As New ClassAlmoxarifado

On Error GoTo Erro_EstoqueInicial_Grava_CustoStandard
    
    iMes = Month(objEstoqueProduto.dtDataInicial)
    iAno = Year(objEstoqueProduto.dtDataInicial)
    
    'Verifica se existe Custo Standard
    lErro = Comando_ExecutarPos(alComando(25), "SELECT CustoStandard" & iMes & " FROM SldMesEst WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, dCustoStandardLido, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 69960
    
    'Le o  SldMesEst
    lErro = Comando_BuscarPrimeiro(alComando(25))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69961
    
    'se o sldmesest ainda não existe ==> insere
    If lErro = AD_SQL_SUCESSO Then
        
        'Se a Quantidade Inicial que está sendo inserida for maior que ZERO
        If (objEstoqueProduto.dQuantidadeInicial) > 0 And (objEstoqueProduto.dSaldoInicial) > 0 Then
                            
            'Calcula o Novo Custo Standard
            dCustoStandardAtual = objEstoqueProduto.dSaldoInicial / objEstoqueProduto.dQuantidadeInicial
            
            'Se existe Custo Standard no BD
            If dCustoStandardLido > 0 Then
                
                'Se ele é diferente do Custo Atual ---> Erro
                If dCustoStandardAtual <> dCustoStandardLido Then
                    
                    'Pede confirmação na revalorização dos estoque iniciais
                    vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CUSTO_STANDARD_DIFERENTE_ALMOXARIFADO", objEstoqueProduto.sProduto, dCustoStandardLido, objEstoqueProduto.iAlmoxarifado, dCustoStandardAtual)
                        
                    'Se não deseja continuar --> Erro
                    If vbMesRes = vbNo Then gError 69963
                        
                    'Le os Produtos - Almoxados que seram  revalorizados
                    lErro = Comando_ExecutarPos(alComando(27), "SELECT Almoxarifado, QuantidadeInicial, SaldoInicial, DataInicial FROM EstoqueProduto WHERE Produto = ? ", 0, tEstoqueProduto.iAlmoxarifado, tEstoqueProduto.dQuantidadeInicial, tEstoqueProduto.dSaldoInicial, tEstoqueProduto.dtDataInicial, objEstoqueProduto.sProduto)
                    If lErro <> AD_SQL_SUCESSO Then gError 69966

                    lErro = Comando_BuscarPrimeiro(alComando(27))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69967

                    Do While lErro = AD_SQL_SUCESSO
                             
                        'Verifica se é da Filial Empresa
                        objAlmoxarifado.iCodigo = tEstoqueProduto.iAlmoxarifado
                        
                        'Le a Filial Empresa
                        lErro = CF("Almoxarifado_Le", objAlmoxarifado)
                        If lErro <> SUCESSO Then Error 69970
                        
                        If objAlmoxarifado.iFilialEmpresa = objEstoqueProduto.iFilialEmpresa Then
                        
                            dNovoValorInicial = tEstoqueProduto.dQuantidadeInicial * dCustoStandardAtual
                        
                            lErro = Comando_ExecutarPos(alComando(28), "UPDATE EstoqueProduto SET SaldoInicial = ?, DataUltAtualizacao = ?, Exportado = ? ", alComando(27), dNovoValorInicial, Date, 0)
                            If lErro <> AD_SQL_SUCESSO Then gError 69968
                    
                            lErro = Comando_BuscarProximo(alComando(27))
                            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69969
                                            
                        End If
                        
                    Loop
                    
                End If
            
            End If
        
            'Atualiza o Custo Standard
            lErro = Comando_ExecutarPos(alComando(26), "UPDATE SldMesEst SET CustoStandard" & CStr(iMes) & " = ?", alComando(25), dCustoStandardAtual)
            If lErro <> AD_SQL_SUCESSO Then gError 69964
        
        End If
    
    End If
    
    EstoqueInicial_Grava_CustoStandard = SUCESSO
    
    Exit Function
    
Erro_EstoqueInicial_Grava_CustoStandard:

    EstoqueInicial_Grava_CustoStandard = gErr
    
    Select Case gErr
        
        Case 69960, 69961
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 69962, 69970
                
        Case 69963
        
        Case 69964
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 69965
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST2", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 69966, 69967, 69969
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO3", Err)
        
        Case 69968
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO1", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151769)

    End Select
    
    Exit Function
    
End Function

Private Function EstoqueInicial_Grava_ProdutosFilial(alComando() As Long, ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal bPossuiMovimento As Boolean, ByVal iAlmoxarifadoPadrao As Integer, ByVal objProduto As ClassProduto, ByVal objEstoqueProdutoBD As ClassEstoqueProduto, Optional ByVal iMostrarMsg As Integer = 1) As Long
'Grava as informações complementares (SldMesEst, ProdutosFilial) de estoque inicial.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim iAlmoxarifado As Integer
Dim iAno As Integer
Dim iMes As Integer
Dim dCusto As Double
Dim dCustoMedio As Double
Dim dQuant As Double
Dim dValorInicial As Double
Dim tEstoqueProduto As typeEstoqueProduto
Dim dCustoMedioConsig3 As Double
Dim dCustoMedioDemo3 As Double
Dim dCustoMedioConserto3 As Double
Dim dCustoMedioOutros3 As Double
Dim dCustoMedioBenef3 As Double
Dim dCustoMedioConsig As Double
Dim dCustoMedioDemo As Double
Dim dCustoMedioConserto As Double
Dim dCustoMedioOutros As Double
Dim dCustoMedioBenef As Double
Dim dQuantCusto As Double
Dim dValorCusto As Double
Dim iProdNaFilial As Integer

On Error GoTo Erro_EstoqueInicial_Grava_ProdutosFilial

    'Pesquisa o ProdutosFilial no BD
    lErro = Comando_ExecutarPos(alComando(8), "SELECT Almoxarifado FROM ProdutosFilial WHERE FilialEmpresa = ? AND Produto = ?", 0, iAlmoxarifado, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 28435

    'Verifica se produto filial existe
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28437

    If lErro = AD_SQL_SEM_DADOS Then
    
        If iAlmoxarifadoPadrao = DESMARCADO Then
'            Call Rotina_Aviso(vbOKOnly, "AVISO_ALMOXARIFADO_TELA_PADRAO1")
        End If
        
        iProdNaFilial = DESMARCADO
        If objProduto.iCompras = PRODUTO_PRODUZIVEL Then iProdNaFilial = MARCADO
        
        lErro = Comando_Executar(alComando(9), "INSERT INTO ProdutosFilial (FilialEmpresa,Produto,Almoxarifado, ProdNaFilial) VALUES (?,?,?,?)", objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, iProdNaFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 28438
                
        If objProduto.iApropriacaoCusto = APROPR_CUSTO_REAL Then
            If objEstoqueProduto.dQuantidadeInicial > 0 Then dCusto = objEstoqueProduto.dSaldoInicial / objEstoqueProduto.dQuantidadeInicial
        ElseIf objProduto.iApropriacaoCusto = APROPR_CUSTO_MEDIO Then
            If objEstoqueProduto.dQuantidadeInicial > 0 Then dCustoMedio = objEstoqueProduto.dSaldoInicial / objEstoqueProduto.dQuantidadeInicial
        End If
        
        If objEstoqueProduto.dQuantInicialConsig3 > 0 Then dCustoMedioConsig3 = objEstoqueProduto.dValorInicialConsig3 / objEstoqueProduto.dQuantInicialConsig3
        If objEstoqueProduto.dQuantInicialDemo3 > 0 Then dCustoMedioDemo3 = objEstoqueProduto.dValorInicialDemo3 / objEstoqueProduto.dQuantInicialDemo3
        If objEstoqueProduto.dQuantInicialConserto3 > 0 Then dCustoMedioConserto3 = objEstoqueProduto.dValorInicialConserto3 / objEstoqueProduto.dQuantInicialConserto3
        If objEstoqueProduto.dQuantInicialOutras3 > 0 Then dCustoMedioOutros3 = objEstoqueProduto.dValorInicialOutras3 / objEstoqueProduto.dQuantInicialOutras3
        If objEstoqueProduto.dQuantInicialBenef3 > 0 Then dCustoMedioBenef3 = objEstoqueProduto.dValorInicialBenef3 / objEstoqueProduto.dQuantInicialBenef3
        
        If objEstoqueProduto.dQuantInicialConsig > 0 Then dCustoMedioConsig = objEstoqueProduto.dValorInicialConsig / objEstoqueProduto.dQuantInicialConsig
        If objEstoqueProduto.dQuantInicialDemo > 0 Then dCustoMedioDemo = objEstoqueProduto.dValorInicialDemo / objEstoqueProduto.dQuantInicialDemo
        If objEstoqueProduto.dQuantInicialConserto > 0 Then dCustoMedioConserto = objEstoqueProduto.dValorInicialConserto / objEstoqueProduto.dQuantInicialConserto
        If objEstoqueProduto.dQuantInicialOutras > 0 Then dCustoMedioOutros = objEstoqueProduto.dValorInicialOutras / objEstoqueProduto.dQuantInicialOutras
        If objEstoqueProduto.dQuantInicialBenef > 0 Then dCustoMedioBenef = objEstoqueProduto.dValorInicialBenef / objEstoqueProduto.dQuantInicialBenef
        
        iAno = Year(objEstoqueProduto.dtDataInicial)
        iMes = Month(objEstoqueProduto.dtDataInicial)
        
        'Insere SldMesEst
        lErro = Comando_Executar(alComando(10), "INSERT INTO SldMesEst (Ano, FilialEmpresa, Produto, QuantInicial, ValorInicial, CustoMedioProducaoInicial, CustoMedio" + CStr(iMes) + ", QuantInicialCusto, ValorInicialCusto) VALUES (?,?,?,?,?,?,?,?,?)", iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.dQuantidadeInicial + objEstoqueProduto.dQuantInicialConsig3 + objEstoqueProduto.dQuantInicialDemo3 + objEstoqueProduto.dQuantInicialConserto3 + objEstoqueProduto.dQuantInicialOutras3 + objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dSaldoInicial + objEstoqueProduto.dValorInicialConsig3 + objEstoqueProduto.dValorInicialDemo3 + objEstoqueProduto.dValorInicialConserto3 + objEstoqueProduto.dValorInicialOutras3 + objEstoqueProduto.dValorInicialBenef3, dCusto, dCustoMedio, objEstoqueProduto.dQuantidadeInicial, objEstoqueProduto.dSaldoInicial)
        If lErro <> AD_SQL_SUCESSO Then gError 28449

        lErro = Comando_Executar(alComando(13), "INSERT INTO SldMesEst1 (Ano, FilialEmpresa, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, CustoMedioConsig3" + CStr(iMes) + ", CustoMedioDemo3" + CStr(iMes) + ", CustoMedioConserto3" + CStr(iMes) + ", CustoMedioOutros3" + CStr(iMes) + ", CustoMedioBenef3" + CStr(iMes) + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", iAno, objEstoqueProduto.iFilialEmpresa, _
                                 objEstoqueProduto.sProduto, objEstoqueProduto.dQuantInicialConsig3, objEstoqueProduto.dValorInicialConsig3, objEstoqueProduto.dQuantInicialDemo3, objEstoqueProduto.dValorInicialDemo3, objEstoqueProduto.dQuantInicialConserto3, objEstoqueProduto.dValorInicialConserto3, objEstoqueProduto.dQuantInicialOutras3, objEstoqueProduto.dValorInicialOutras3, objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dValorInicialBenef3, dCustoMedioConsig3, _
                                 dCustoMedioDemo3, dCustoMedioConserto3, dCustoMedioOutros3, dCustoMedioBenef3)
        If lErro <> AD_SQL_SUCESSO Then gError 20779

        lErro = Comando_Executar(alComando(14), "INSERT INTO SldMesEst2 (Ano, FilialEmpresa, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, CustoMedioConsig" + CStr(iMes) + ", CustoMedioDemo" + CStr(iMes) + ", CustoMedioConserto" + CStr(iMes) + ", CustoMedioOutros" + CStr(iMes) + ", CustoMedioBenef" + CStr(iMes) + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.dQuantInicialConsig, objEstoqueProduto.dValorInicialConsig, objEstoqueProduto.dQuantInicialDemo, objEstoqueProduto.dValorInicialDemo, objEstoqueProduto.dQuantInicialConserto, objEstoqueProduto.dValorInicialConserto, objEstoqueProduto.dQuantInicialOutras, objEstoqueProduto.dValorInicialOutras, objEstoqueProduto.dQuantInicialBenef, objEstoqueProduto.dValorInicialBenef, dCustoMedioConsig, _
                                 dCustoMedioDemo, dCustoMedioConserto, dCustoMedioOutros, dCustoMedioBenef)
        If lErro <> AD_SQL_SUCESSO Then gError 20780

    Else
        
        'Lock na tabela ProdutosFilial
        lErro = Comando_LockExclusive(alComando(8))
        If lErro <> AD_SQL_SUCESSO Then gError 28439
        
        'o atual almoxarifado padrão não pode ser desmarcado como padrão. Ele somente poderá ser substituido por outro
        If iAlmoxarifado = objEstoqueProduto.iAlmoxarifado And iAlmoxarifadoPadrao = DESMARCADO Then gError 31318
        
        'se ainda não tem almoxarifado padrão ==> avisa que este será o almoxarifado padrão apesar de desmarcado como padrão
        If iAlmoxarifado = 0 And iAlmoxarifadoPadrao = DESMARCADO And iMostrarMsg = 1 Then
            Call Rotina_Aviso(vbOKOnly, "AVISO_ALMOXARIFADO_TELA_PADRAO1")
        End If
        
        'se o almoxarifado padrão está sendo trocado ou ainda não existe (criacao de produtosfilial via controle de estoque)
        If (iAlmoxarifado <> objEstoqueProduto.iAlmoxarifado And iAlmoxarifadoPadrao = MARCADO) Or iAlmoxarifado = 0 Then
            lErro = Comando_ExecutarPos(alComando(9), "UPDATE ProdutosFilial SET Almoxarifado = ?", alComando(8), objEstoqueProduto.iAlmoxarifado)
            If lErro <> AD_SQL_SUCESSO Then gError 28440
        End If
        
'    Atualmente o sistema permite alterar o estoque inicial mesmo que haja movimentação do estoque
'        If Not bPossuiMovimento Then
            
            iAno = Year(objEstoqueProduto.dtDataInicial)
            iMes = Month(objEstoqueProduto.dtDataInicial)
            
            'Verifica se SldMesEst existe
            lErro = Comando_ExecutarPos(alComando(10), "SELECT QuantInicial,ValorInicial, QuantInicialCusto, ValorInicialCusto FROM SldMesEst WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, dQuant, dValorInicial, dQuantCusto, dValorCusto, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 28430
            
            'Le o  SldMesEst
            lErro = Comando_BuscarPrimeiro(alComando(10))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28431
            
            'se o sldmesest ainda não existe ==> insere
            If lErro = AD_SQL_SEM_DADOS Then
            
                If objProduto.iApropriacaoCusto = APROPR_CUSTO_REAL Then
                    If objEstoqueProduto.dQuantidadeInicial > 0 Then dCusto = objEstoqueProduto.dSaldoInicial / objEstoqueProduto.dQuantidadeInicial
                ElseIf objProduto.iApropriacaoCusto = APROPR_CUSTO_MEDIO Then
                    If objEstoqueProduto.dQuantidadeInicial > 0 Then dCustoMedio = objEstoqueProduto.dSaldoInicial / objEstoqueProduto.dQuantidadeInicial
                End If
                
                'Insere SldMesEst
                lErro = Comando_Executar(alComando(10), "INSERT INTO SldMesEst (Ano, FilialEmpresa, Produto, QuantInicial, ValorInicial,CustoMedioProducaoInicial, CustoMedio" + CStr(iMes) + ", QuantInicialCusto, ValorInicialCusto) VALUES (?,?,?,?,?,?,?,?,?)", iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.dQuantidadeInicial + objEstoqueProduto.dQuantInicialConsig3 + objEstoqueProduto.dQuantInicialDemo3 + objEstoqueProduto.dQuantInicialConserto3 + objEstoqueProduto.dQuantInicialOutras3 + objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dSaldoInicial + objEstoqueProduto.dValorInicialConsig3 + objEstoqueProduto.dValorInicialDemo3 + objEstoqueProduto.dValorInicialConserto3 + objEstoqueProduto.dValorInicialOutras3 + objEstoqueProduto.dValorInicialBenef3, dCusto, dCustoMedio, objEstoqueProduto.dQuantidadeInicial, objEstoqueProduto.dSaldoInicial)
                If lErro <> AD_SQL_SUCESSO Then gError 44937
            
            Else
            
                'se o sldmesest existe ==> altera pela diferença
            
                dQuant = dQuant - (objEstoqueProdutoBD.dQuantidadeInicial + objEstoqueProdutoBD.dQuantInicialConsig3 + objEstoqueProdutoBD.dQuantInicialDemo3 + objEstoqueProdutoBD.dQuantInicialConserto3 + objEstoqueProdutoBD.dQuantInicialOutras3 + objEstoqueProdutoBD.dQuantInicialBenef3) + (objEstoqueProduto.dQuantidadeInicial + objEstoqueProduto.dQuantInicialConsig3 + objEstoqueProduto.dQuantInicialDemo3 + objEstoqueProduto.dQuantInicialConserto3 + objEstoqueProduto.dQuantInicialOutras3 + objEstoqueProduto.dQuantInicialBenef3)
                dValorInicial = dValorInicial - (objEstoqueProdutoBD.dSaldoInicial + objEstoqueProdutoBD.dValorInicialConsig3 + objEstoqueProdutoBD.dValorInicialDemo3 + objEstoqueProdutoBD.dValorInicialConserto3 + objEstoqueProdutoBD.dValorInicialOutras3 + objEstoqueProdutoBD.dValorInicialBenef3) + (objEstoqueProduto.dSaldoInicial + objEstoqueProduto.dValorInicialConsig3 + objEstoqueProduto.dValorInicialDemo3 + objEstoqueProduto.dValorInicialConserto3 + objEstoqueProduto.dValorInicialOutras3 + objEstoqueProduto.dValorInicialBenef3)
            
                dQuantCusto = dQuantCusto - objEstoqueProdutoBD.dQuantidadeInicial + objEstoqueProduto.dQuantidadeInicial
                dValorCusto = dValorCusto - objEstoqueProdutoBD.dSaldoInicial + objEstoqueProduto.dSaldoInicial
            
                If objProduto.iApropriacaoCusto = APROPR_CUSTO_REAL Then
                    If dQuant > 0 Then dCusto = dValorInicial / dQuant
                ElseIf objProduto.iApropriacaoCusto = APROPR_CUSTO_MEDIO Then
                    If dQuant > 0 Then dCustoMedio = dValorInicial / dQuant
                End If
                
                lErro = Comando_ExecutarPos(alComando(11), "UPDATE SldMesEst SET QuantInicial = ?, ValorInicial = ?,CustoMedioProducaoInicial = ?, CustoMedio" + CStr(iMes) + " = ?, QuantInicialCusto = ?, ValorInicialCusto = ?", alComando(10), dQuant, dValorInicial, dCusto, dCustoMedio, dQuantCusto, dValorCusto)
                If lErro <> AD_SQL_SUCESSO Then gError 26605
                
            End If
           

            'Verifica se SldMesEst1 existe
            lErro = Comando_ExecutarPos(alComando(23), "SELECT QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3 FROM SldMesEst1 WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, tEstoqueProduto.dQuantInicialConsig3, tEstoqueProduto.dValorInicialConsig3, tEstoqueProduto.dQuantInicialDemo3, tEstoqueProduto.dValorInicialDemo3, tEstoqueProduto.dQuantInicialConserto3, tEstoqueProduto.dValorInicialConserto3, tEstoqueProduto.dQuantInicialOutras3, tEstoqueProduto.dValorInicialOutras3, tEstoqueProduto.dQuantInicialBenef3, tEstoqueProduto.dValorInicialBenef3, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 92943
            
            'Le o  SldMesEst1
            lErro = Comando_BuscarPrimeiro(alComando(23))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92944
            
            'se o sldmesest1 ainda não existe ==> insere
            If lErro = AD_SQL_SEM_DADOS Then
            
                If objEstoqueProduto.dQuantInicialConsig3 > 0 Then dCustoMedioConsig3 = objEstoqueProduto.dValorInicialConsig3 / objEstoqueProduto.dQuantInicialConsig3
                If objEstoqueProduto.dQuantInicialDemo3 > 0 Then dCustoMedioDemo3 = objEstoqueProduto.dValorInicialDemo3 / objEstoqueProduto.dQuantInicialDemo3
                If objEstoqueProduto.dQuantInicialConserto3 > 0 Then dCustoMedioConserto3 = objEstoqueProduto.dValorInicialConserto3 / objEstoqueProduto.dQuantInicialConserto3
                If objEstoqueProduto.dQuantInicialOutras3 > 0 Then dCustoMedioOutros3 = objEstoqueProduto.dValorInicialOutras3 / objEstoqueProduto.dQuantInicialOutras3
                If objEstoqueProduto.dQuantInicialBenef3 > 0 Then dCustoMedioBenef3 = objEstoqueProduto.dValorInicialBenef3 / objEstoqueProduto.dQuantInicialBenef3
            
                'Insere SldMesEst1
                lErro = Comando_Executar(alComando(24), "INSERT INTO SldMesEst1 (Ano, FilialEmpresa, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, CustoMedioConsig3" + CStr(iMes) + ", CustoMedioDemo3" + CStr(iMes) + ", CustoMedioConserto3" + CStr(iMes) + ", CustoMedioOutros3" + CStr(iMes) + ", CustoMedioBenef3" + CStr(iMes) + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", iAno, objEstoqueProduto.iFilialEmpresa, _
                                         objEstoqueProduto.sProduto, objEstoqueProduto.dQuantInicialConsig3, objEstoqueProduto.dValorInicialConsig3, objEstoqueProduto.dQuantInicialDemo3, objEstoqueProduto.dValorInicialDemo3, objEstoqueProduto.dQuantInicialConserto3, objEstoqueProduto.dValorInicialConserto3, objEstoqueProduto.dQuantInicialOutras3, objEstoqueProduto.dValorInicialOutras3, objEstoqueProduto.dQuantInicialBenef3, objEstoqueProduto.dValorInicialBenef3, dCustoMedioConsig3, _
                                         dCustoMedioDemo3, dCustoMedioConserto3, dCustoMedioOutros3, dCustoMedioBenef3)
                If lErro <> AD_SQL_SUCESSO Then gError 20781
        
            Else
            
                'se o sldmesest1 existe ==> altera pela diferença
                tEstoqueProduto.dQuantInicialConsig3 = tEstoqueProduto.dQuantInicialConsig3 - objEstoqueProdutoBD.dQuantInicialConsig3 + objEstoqueProduto.dQuantInicialConsig3
                tEstoqueProduto.dValorInicialConsig3 = tEstoqueProduto.dValorInicialConsig3 - objEstoqueProdutoBD.dValorInicialConsig3 + objEstoqueProduto.dValorInicialConsig3
                tEstoqueProduto.dQuantInicialDemo3 = tEstoqueProduto.dQuantInicialDemo3 - objEstoqueProdutoBD.dQuantInicialDemo3 + objEstoqueProduto.dQuantInicialDemo3
                tEstoqueProduto.dValorInicialDemo3 = tEstoqueProduto.dValorInicialDemo3 - objEstoqueProdutoBD.dValorInicialDemo3 + objEstoqueProduto.dValorInicialDemo3
                tEstoqueProduto.dQuantInicialConserto3 = tEstoqueProduto.dQuantInicialConserto3 - objEstoqueProdutoBD.dQuantInicialConserto3 + objEstoqueProduto.dQuantInicialConserto3
                tEstoqueProduto.dValorInicialConserto3 = tEstoqueProduto.dValorInicialConserto3 - objEstoqueProdutoBD.dValorInicialConserto3 + objEstoqueProduto.dValorInicialConserto3
                tEstoqueProduto.dQuantInicialOutras3 = tEstoqueProduto.dQuantInicialOutras3 - objEstoqueProdutoBD.dQuantInicialOutras3 + objEstoqueProduto.dQuantInicialOutras3
                tEstoqueProduto.dValorInicialOutras3 = tEstoqueProduto.dValorInicialOutras3 - objEstoqueProdutoBD.dValorInicialOutras3 + objEstoqueProduto.dValorInicialOutras3
                tEstoqueProduto.dQuantInicialBenef3 = tEstoqueProduto.dQuantInicialBenef3 - objEstoqueProdutoBD.dQuantInicialBenef3 + objEstoqueProduto.dQuantInicialBenef3
                tEstoqueProduto.dValorInicialBenef3 = tEstoqueProduto.dValorInicialBenef3 - objEstoqueProdutoBD.dValorInicialBenef3 + objEstoqueProduto.dValorInicialBenef3
                
                If tEstoqueProduto.dQuantInicialConsig3 > 0 Then dCustoMedioConsig3 = tEstoqueProduto.dValorInicialConsig3 / tEstoqueProduto.dQuantInicialConsig3
                If tEstoqueProduto.dQuantInicialDemo3 > 0 Then dCustoMedioDemo3 = tEstoqueProduto.dValorInicialDemo3 / tEstoqueProduto.dQuantInicialDemo3
                If tEstoqueProduto.dQuantInicialConserto3 > 0 Then dCustoMedioConserto3 = tEstoqueProduto.dValorInicialConserto3 / tEstoqueProduto.dQuantInicialConserto3
                If tEstoqueProduto.dQuantInicialOutras3 > 0 Then dCustoMedioOutros3 = tEstoqueProduto.dValorInicialOutras3 / tEstoqueProduto.dQuantInicialOutras3
                If tEstoqueProduto.dQuantInicialBenef3 > 0 Then dCustoMedioBenef3 = tEstoqueProduto.dValorInicialBenef3 / tEstoqueProduto.dQuantInicialBenef3
                
                lErro = Comando_ExecutarPos(alComando(24), "UPDATE SldMesEst1 SET QuantInicialConsig3 = ?, ValorInicialConsig3 = ?, QuantInicialDemo3 = ?, ValorInicialDemo3 = ?, QuantInicialConserto3 = ?, ValorInicialConserto3 = ?, QuantInicialOutros3 = ?, ValorInicialOutros3 = ?, QuantInicialBenef3 = ?, ValorInicialBenef3 = ?, CustoMedioConsig3" + CStr(iMes) + " = ?, CustoMedioDemo3" + CStr(iMes) + " = ?, CustoMedioConserto3" + CStr(iMes) + " = ?, CustoMedioOutros3" + CStr(iMes) + " = ?, CustoMedioBenef3" + CStr(iMes) + " = ?", alComando(23), tEstoqueProduto.dQuantInicialConsig3, tEstoqueProduto.dValorInicialConsig3, tEstoqueProduto.dQuantInicialDemo3, tEstoqueProduto.dValorInicialDemo3, tEstoqueProduto.dQuantInicialConserto3, tEstoqueProduto.dValorInicialConserto3, tEstoqueProduto.dQuantInicialOutras3, tEstoqueProduto.dValorInicialOutras3, tEstoqueProduto.dQuantInicialBenef3, tEstoqueProduto.dValorInicialBenef3, dCustoMedioConsig3, _
                                            dCustoMedioDemo3, dCustoMedioConserto3, dCustoMedioOutros3, dCustoMedioBenef3)
                If lErro <> AD_SQL_SUCESSO Then gError 26605
                
            End If

            'Verifica se SldMesEst2 existe
            lErro = Comando_ExecutarPos(alComando(21), "SELECT QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef FROM SldMesEst2 WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, tEstoqueProduto.dQuantInicialConsig, tEstoqueProduto.dValorInicialConsig, tEstoqueProduto.dQuantInicialDemo, tEstoqueProduto.dValorInicialDemo, tEstoqueProduto.dQuantInicialConserto, tEstoqueProduto.dValorInicialConserto, tEstoqueProduto.dQuantInicialOutras, tEstoqueProduto.dValorInicialOutras, tEstoqueProduto.dQuantInicialBenef, tEstoqueProduto.dValorInicialBenef, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 92945
            
            'Le o  SldMesEst2
            lErro = Comando_BuscarPrimeiro(alComando(21))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92946
            
            'se o sldmesest1 ainda não existe ==> insere
            If lErro = AD_SQL_SEM_DADOS Then
            
                If objEstoqueProduto.dQuantInicialConsig > 0 Then dCustoMedioConsig = objEstoqueProduto.dValorInicialConsig / objEstoqueProduto.dQuantInicialConsig
                If objEstoqueProduto.dQuantInicialDemo > 0 Then dCustoMedioDemo = objEstoqueProduto.dValorInicialDemo / objEstoqueProduto.dQuantInicialDemo
                If objEstoqueProduto.dQuantInicialConserto > 0 Then dCustoMedioConserto = objEstoqueProduto.dValorInicialConserto / objEstoqueProduto.dQuantInicialConserto
                If objEstoqueProduto.dQuantInicialOutras > 0 Then dCustoMedioOutros = objEstoqueProduto.dValorInicialOutras / objEstoqueProduto.dQuantInicialOutras
                If objEstoqueProduto.dQuantInicialBenef > 0 Then dCustoMedioBenef = objEstoqueProduto.dValorInicialBenef / objEstoqueProduto.dQuantInicialBenef
            
                'Insere SldMesEst1
                lErro = Comando_Executar(alComando(22), "INSERT INTO SldMesEst2 (Ano, FilialEmpresa, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, CustoMedioConsig" + CStr(iMes) + ", CustoMedioDemo" + CStr(iMes) + ", CustoMedioConserto" + CStr(iMes) + ", CustoMedioOutros" + CStr(iMes) + ", CustoMedioBenef" + CStr(iMes) + ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.dQuantInicialConsig, objEstoqueProduto.dValorInicialConsig, objEstoqueProduto.dQuantInicialDemo, objEstoqueProduto.dValorInicialDemo, objEstoqueProduto.dQuantInicialConserto, objEstoqueProduto.dValorInicialConserto, objEstoqueProduto.dQuantInicialOutras, objEstoqueProduto.dValorInicialOutras, objEstoqueProduto.dQuantInicialBenef, objEstoqueProduto.dValorInicialBenef, dCustoMedioConsig, _
                                 dCustoMedioDemo, dCustoMedioConserto, dCustoMedioOutros, dCustoMedioBenef)
                If lErro <> AD_SQL_SUCESSO Then gError 20782
        
            Else
            
                'se o sldmesest2 existe ==> altera pela diferença
                tEstoqueProduto.dQuantInicialConsig = tEstoqueProduto.dQuantInicialConsig - objEstoqueProdutoBD.dQuantInicialConsig + objEstoqueProduto.dQuantInicialConsig
                tEstoqueProduto.dValorInicialConsig = tEstoqueProduto.dValorInicialConsig - objEstoqueProdutoBD.dValorInicialConsig + objEstoqueProduto.dValorInicialConsig
                tEstoqueProduto.dQuantInicialDemo = tEstoqueProduto.dQuantInicialDemo - objEstoqueProdutoBD.dQuantInicialDemo + objEstoqueProduto.dQuantInicialDemo
                tEstoqueProduto.dValorInicialDemo = tEstoqueProduto.dValorInicialDemo - objEstoqueProdutoBD.dValorInicialDemo + objEstoqueProduto.dValorInicialDemo
                tEstoqueProduto.dQuantInicialConserto = tEstoqueProduto.dQuantInicialConserto - objEstoqueProdutoBD.dQuantInicialConserto + objEstoqueProduto.dQuantInicialConserto
                tEstoqueProduto.dValorInicialConserto = tEstoqueProduto.dValorInicialConserto - objEstoqueProdutoBD.dValorInicialConserto + objEstoqueProduto.dValorInicialConserto
                tEstoqueProduto.dQuantInicialOutras = tEstoqueProduto.dQuantInicialOutras - objEstoqueProdutoBD.dQuantInicialOutras + objEstoqueProduto.dQuantInicialOutras
                tEstoqueProduto.dValorInicialOutras = tEstoqueProduto.dValorInicialOutras - objEstoqueProdutoBD.dValorInicialOutras + objEstoqueProduto.dValorInicialOutras
                tEstoqueProduto.dQuantInicialBenef = tEstoqueProduto.dQuantInicialBenef - objEstoqueProdutoBD.dQuantInicialBenef + objEstoqueProduto.dQuantInicialBenef
                tEstoqueProduto.dValorInicialBenef = tEstoqueProduto.dValorInicialBenef - objEstoqueProdutoBD.dValorInicialBenef + objEstoqueProduto.dValorInicialBenef
                
                If tEstoqueProduto.dQuantInicialConsig > 0 Then dCustoMedioConsig = tEstoqueProduto.dValorInicialConsig / tEstoqueProduto.dQuantInicialConsig
                If tEstoqueProduto.dQuantInicialDemo > 0 Then dCustoMedioDemo = tEstoqueProduto.dValorInicialDemo / tEstoqueProduto.dQuantInicialDemo
                If tEstoqueProduto.dQuantInicialConserto > 0 Then dCustoMedioConserto = tEstoqueProduto.dValorInicialConserto / tEstoqueProduto.dQuantInicialConserto
                If tEstoqueProduto.dQuantInicialOutras > 0 Then dCustoMedioOutros = tEstoqueProduto.dValorInicialOutras / tEstoqueProduto.dQuantInicialOutras
                If tEstoqueProduto.dQuantInicialBenef > 0 Then dCustoMedioBenef = tEstoqueProduto.dValorInicialBenef / tEstoqueProduto.dQuantInicialBenef
                
                lErro = Comando_ExecutarPos(alComando(22), "UPDATE SldMesEst2 SET QuantInicialConsig = ?, ValorInicialConsig = ?, QuantInicialDemo = ?, ValorInicialDemo = ?, QuantInicialConserto = ?, ValorInicialConserto = ?, QuantInicialOutros = ?, ValorInicialOutros = ?, QuantInicialBenef = ?, ValorInicialBenef = ?, CustoMedioConsig" + CStr(iMes) + " = ?, CustoMedioDemo" + CStr(iMes) + " = ?, CustoMedioConserto" + CStr(iMes) + " = ?, CustoMedioOutros" + CStr(iMes) + " = ?, CustoMedioBenef" + CStr(iMes) + " = ?", alComando(21), tEstoqueProduto.dQuantInicialConsig, tEstoqueProduto.dValorInicialConsig, tEstoqueProduto.dQuantInicialDemo, tEstoqueProduto.dValorInicialDemo, tEstoqueProduto.dQuantInicialConserto, tEstoqueProduto.dValorInicialConserto, tEstoqueProduto.dQuantInicialOutras, tEstoqueProduto.dValorInicialOutras, tEstoqueProduto.dQuantInicialBenef, tEstoqueProduto.dValorInicialBenef, dCustoMedioConsig, _
                                            dCustoMedioDemo, dCustoMedioConserto, dCustoMedioOutros, dCustoMedioBenef)
                If lErro <> AD_SQL_SUCESSO Then gError 26605
                
            End If

'    Atualmente o sistema permite alterar o estoque inicial mesmo que haja movimentação do estoque
'        End If
        
    End If

    EstoqueInicial_Grava_ProdutosFilial = SUCESSO

    Exit Function

Erro_EstoqueInicial_Grava_ProdutosFilial:

    EstoqueInicial_Grava_ProdutosFilial = gErr

    Select Case gErr

        Case 20779, 20781
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST1", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 20780, 20782
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST2", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 26605
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 28430, 28431
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28435, 28437
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 28438
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOSFILIAL", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28439
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOSFILIAL", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28440
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28449, 44937
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 31318
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_PADRAO", gErr)
        
        Case 92943, 92944
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case 92945, 92946
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST21", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151770)

    End Select

End Function

'mario inicio alterado giFilialEmpresa por EstoqueProduto.iFilialEmpresa

Function EstoqueInicial_Exclui(ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'Exclui o a associacao de estoque (almoxarifado) com produto passados como parametro

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_EstoqueInicial_Exclui

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 28785

    'continuacao da exclusao do estoqueinicial
    lErro = CF("EstoqueInicial_Exclui0", objEstoqueProduto)
    If lErro <> SUCESSO Then gError 105123

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 28806

    EstoqueInicial_Exclui = SUCESSO

    Exit Function

Erro_EstoqueInicial_Exclui:

    EstoqueInicial_Exclui = gErr

    Select Case gErr
    
        Case 28785
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 28806
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 105123
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151771)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function EstoqueInicial_Exclui0(ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'Exclui o a associacao de estoque (almoxarifado) com produto passados como parametro

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_EstoqueInicial_Exclui0

    'continuacao da exclusao do estoqueinicial
    lErro = CF("EstoqueInicial_Exclui_Trans", objEstoqueProduto)
    If lErro <> SUCESSO Then gError 105124

    EstoqueInicial_Exclui0 = SUCESSO

    Exit Function

Erro_EstoqueInicial_Exclui0:

    EstoqueInicial_Exclui0 = gErr

    Select Case gErr
    
        Case 105124
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151772)

    End Select

    Exit Function

End Function

Function EstoqueInicial_Exclui_Trans(ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'Exclui o a associacao de estoque (almoxarifado) com produto passados como parametro

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 14) As Long
Dim bPossuiMovimento As Boolean
Dim iAno As Integer
Dim iAlmoxarifado As Integer
Dim iFilialEmpresa As Integer
Dim lCodigo As Long
Dim dQuantIni As Double
Dim dValorIni As Double
Dim objProdutoFilial As New ClassProdutoFilial
Dim iAlmoxPadrao As Integer
Dim colRastroEstIni As New Collection
Dim colRastreamentoLoteSaldo As New Collection

On Error GoTo Erro_EstoqueInicial_Exclui_Trans

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 28784
    Next
    
    lErro = CF("EstoqueProduto_Le1", alComando(0), objEstoqueProduto)
    If lErro <> SUCESSO And lErro <> 36664 Then gError 28786
    
    'Não encontrou o EstoqueProduto ==> Erro
    If lErro <> SUCESSO Then gError 28788
   
    'Lock da tabela de EstoqueProduto
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 28789
    
    bPossuiMovimento = False
    
    'Pesquisa o Movimento no BD
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM MovimentoEstoque WHERE FilialEmpresa = ? AND Produto = ? ", 0, lCodigo, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 28790

    'Verifica se já houve movimento no estoque
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28791
    
    'se já houve movimento ==> seta flag
    If lErro = AD_SQL_SUCESSO Then bPossuiMovimento = True

    'Pesquisa o Movimento no BD
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM MovimentoEstoque WHERE FilialEmpresa = ? AND Produto = ? AND Almoxarifado = ?", 0, lCodigo, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 28772

    'Verifica se já houve movimento no estoque
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28775
    
    If lErro = AD_SQL_SUCESSO Then gError 54919

    If bPossuiMovimento And objEstoqueProduto.dQuantidadeInicial <> 0 Then gError 28779

    'Verifica se há reserva pendente
    If objEstoqueProduto.dQuantReservada <> 0 Or objEstoqueProduto.dQuantReservadaConsig <> 0 Then gError 55204
    
    'Verifica se há empenho pendente
    If objEstoqueProduto.dQuantEmpenhada <> 0 Then gError 55205

    'comentado por tulio050203
    'solucao para o erro 468 (suportesge), segue a descricao
    'Foi gravado um estoque inicial de um produto com a data de 2003 e gerado um pedido de compra com a data de 2003 tambem, ao tentar dar entrada em uma nota fiscal fatura utilizando este pedido de venda esta ocorrendo um erro (26802) por ter cadastrado o estoque inicial com data de 2003 e tentar dar entrada em uma nota fiscal com data de 2002. Ao tentar excluir o estoque inicial ocorre um erro (87441) após ter sido baixado todo o procedimento do modulo de compras, mas ocorre este erro
    'William 14/03/01
    'lErro = ItensReq_Le_ProdAlmCritica(objEstoqueProduto)
    'If lErro <> SUCESSO Then gError 87445


' - - - - - - - - - -  Exclui o SldMesEstAlm  - - - - - - - - - - - - - -
    
   
    'iAno = Year(objEstoqueProduto.dtDataInicial)

    'Alterado para excluir todos registros desse produto/almoxarifado de SldMesEstAlm
    'lErro = Comando_ExecutarPos(alComando(3), "SELECT Ano FROM SldMesEstAlm WHERE Produto = ? AND Almoxarifado =? AND Ano =?", 0, iAno, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, Year(objEstoqueProduto.dtDataInicial))
    lErro = Comando_ExecutarPos(alComando(3), "SELECT Ano FROM SldMesEstAlm WHERE Produto = ? AND Almoxarifado =? ", 0, iAno, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 28815

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28780
    
    'If lErro <> AD_SQL_SUCESSO Then gError 28389
    
    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM SldMesEstAlm", alComando(3))
        If lErro <> AD_SQL_SUCESSO Then gError 28428
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28780
        
    Loop
    
'Raphael 25/07/2000
' - - - - - - - - - -  Exclui o SldMesEstAlm1 e SldMesEstAlm2 - - - - - - - - - - - - - -
    
    'iAno = Year(objEstoqueProduto.dtDataInicial)

    'Alterado para excluir todos registros desse produto/almoxarifado de SldMesEstAlm1
    'lErro = Comando_ExecutarPos(alComando(7), "SELECT Ano FROM SldMesEstAlm1 WHERE Produto = ? AND Almoxarifado =? AND Ano =?", 0, iAno, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, Year(objEstoqueProduto.dtDataInicial))
    lErro = Comando_ExecutarPos(alComando(7), "SELECT Ano FROM SldMesEstAlm1 WHERE Produto = ? AND Almoxarifado =? ", 0, iAno, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 69571

    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69572
    
    'If lErro = AD_SQL_SUCESSO Then
    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_ExecutarPos(alComando(8), "DELETE FROM SldMesEstAlm1", alComando(7))
        If lErro <> AD_SQL_SUCESSO Then gError 69573
        
        lErro = Comando_BuscarProximo(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28780
        
    Loop
    'End If
    
    'Alterado para excluir todos registros desse produto/almoxarifado de SldMesEstAlm2
    'lErro = Comando_ExecutarPos(alComando(9), "SELECT Ano FROM SldMesEstAlm2 WHERE Produto = ? AND Almoxarifado =? AND Ano =?", 0, iAno, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, Year(objEstoqueProduto.dtDataInicial))
    lErro = Comando_ExecutarPos(alComando(9), "SELECT Ano FROM SldMesEstAlm2 WHERE Produto = ? AND Almoxarifado =? ", 0, iAno, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 69574

    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69575
    
    'If lErro = AD_SQL_SUCESSO Then
    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_ExecutarPos(alComando(10), "DELETE FROM SldMesEstAlm2", alComando(9))
        If lErro <> AD_SQL_SUCESSO Then gError 69576
    
        lErro = Comando_BuscarProximo(alComando(9))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28780
        
    Loop
    'End If
    
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
    
    lErro = Comando_ExecutarPos(alComando(5), "SELECT Almoxarifado FROM SldDiaEstAlm WHERE Produto = ? AND Almoxarifado = ?", 0, iAlmoxarifado, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 21322

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 21323

    Do While lErro <> AD_SQL_SEM_DADOS
    
        lErro = Comando_ExecutarPos(alComando(6), "DELETE FROM SldDiaEstAlm", alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 28781
    
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 27672

    Loop

    'continuacao da exclusao do estoqueinicial
    lErro = EstoqueInicial_Exclui1(objEstoqueProduto)
    If lErro <> SUCESSO Then gError 55207

    '#################################################
    'Acerta os dados referentes ao estoque inicial que foi associado a lotes
    'le os rastreamentos de estoque inicial para poder atualizar a tabela de rastreamentolotesaldo
    lErro = CF("RastroEstIni_Le", objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, colRastroEstIni)
    If lErro <> SUCESSO Then gError 55207
    
    'Exclui os Rastreamentos referentes ao EstoqueInicial do Produto/Almoxarifado passado como parametro
    lErro = RastroEstIni_Exclui(objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> SUCESSO Then gError 55207
    
    'coloca os valores do lote dentro de escaninho totalizador apropriado
    lErro = RastroLoteSaldo_Atualiza_EstIni(alComando(11), colRastroEstIni, RASTRO_SUBTRACAO, colRastreamentoLoteSaldo)
    If lErro <> SUCESSO Then gError 55207
    
    'atualiza a tabela de rastreamentolotesaldo retirando os saldos dos lotes de rastreamento
    lErro = RastroLoteSaldo_Atualiza_EstIni1(alComando(12), alComando(13), alComando(14), colRastreamentoLoteSaldo)
    If lErro <> SUCESSO Then gError 55207
    '#################################################

    'Exclui EstoqueProduto
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM EstoqueProduto", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 28802
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    EstoqueInicial_Exclui_Trans = SUCESSO

    Exit Function

Erro_EstoqueInicial_Exclui_Trans:

    EstoqueInicial_Exclui_Trans = gErr

    Select Case gErr
    
        Case 21322, 21323, 27672
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAESTALM1", gErr, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)

        Case 28389
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SLDMESESTALM_INEXISTENTE", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 28428
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESESTALM", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)

        Case 54919
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTO_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.iFilialEmpresa)

        Case 28772, 28775
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
            
        Case 28779
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ESTOQUEPRODUTO_SALDO_ZERO", gErr)
            
        Case 28780, 28815, 69571, 69572, 69574, 69575
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM", gErr, Year(objEstoqueProduto.dtDataInicial), objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)

        Case 28781, 69573, 69576
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDDIAESTALM", gErr, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)
        
        Case 28784
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 28786, 55207

        Case 28788
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUE_PRODUTO_NAO_CADASTRADO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 28789
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 28790, 28791
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 28802
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ESTOQUEPRODUTO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 55204
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ESTOQUEPRODUTO_RESERVA", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
            
        Case 55205
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ESTOQUEPRODUTO_EMPENHO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
        
        Case 87445
            'Erro tratado na rotina chamada
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151773)

    End Select

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function EstoqueInicial_Exclui1(ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'(continuação) Exclui o a associacao de estoque (almoxarifado) com produto passados como parametro
'IMPORTANTE: TEM QUE SER CHAMADO EM TRANSACAO

Dim alComando(0 To 32) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iAlmoxPadrao As Integer
Dim iAno As Integer
Dim iAlmoxarifado As Integer
Dim dQuantIni As Double
Dim dValorIni As Double
Dim iFilialEmpresa As Integer

'#######################################
'Inserido por Wagner
Dim objEstoqueProdutoAux As New ClassEstoqueProduto
Dim objProduto As New ClassProduto
'#######################################

On Error GoTo Erro_EstoqueInicial_Exclui1

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 55206

    Next

    'Pesquisa o ProdutosFilial no BD
    lErro = Comando_ExecutarPos(alComando(5), "SELECT Almoxarifado FROM ProdutosFilial WHERE FilialEmpresa = ? AND Produto = ?", 0, iAlmoxPadrao, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 28811

    'Verifica se produto filial existe
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28787
    
    If lErro = AD_SQL_SEM_DADOS Then gError 28792
    
    'Lock na tabela ProdutosFilial
    lErro = Comando_LockExclusive(alComando(5))
    If lErro <> AD_SQL_SUCESSO Then gError 27200

    'Verifica se o produto que o estoque está sendo excluído está associado
    'com outro almoxarifado da mesma FilialEmpresa
    lErro = Comando_Executar(alComando(0), "SELECT Almoxarifado FROM EstoqueProduto, Almoxarifado WHERE Produto = ? AND Almoxarifado <> ? AND EstoqueProduto.Almoxarifado = Almoxarifado.Codigo AND FilialEmpresa = ?", iAlmoxarifado, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 21317
       
    'Verifica se existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 21340

    'se só existe o registro que está sendo excluido
    If lErro = AD_SQL_SEM_DADOS Then

        lErro = Comando_ExecutarPos(alComando(6), "DELETE FROM ProdutosFilial", alComando(5))
        If lErro <> SUCESSO Then gError 28794
        
        iAno = Year(objEstoqueProduto.dtDataInicial)
            
        'Pesquisa o SldMesEst no BD
        'Alterado para excluir todos registros desse produto/filial de SldMesEst
        'lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantInicial,ValorInicial  FROM SldMesEst WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, dQuantIni, dValorIni, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantInicial, ValorInicial FROM SldMesEst WHERE FilialEmpresa = ? AND Produto = ?", 0, dQuantIni, dValorIni, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 28798
    
        'Verifica se SldMesEst existe
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28799
    
        'If lErro = AD_SQL_SEM_DADOS Then gError 28800
    
        Do While lErro <> AD_SQL_SEM_DADOS
    
            'Lock da tabela de SldMesEst
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 28801
        
            'Exclui SldMesEst
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM SldMesEst", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 28805
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28799
        
        Loop
    
'Raphael    25/07/2000
'  - - - - -  - - - - SdlMesEst1 e SldMesEst2 - - - - - - - - - - - -
        
        'Pesquisa o SldMesEst1 no BD
        'Alterado para excluir todos registros desse produto/filial de SldMesEst1
        'lErro = Comando_ExecutarPos(alComando(7), "SELECT Ano FROM SldMesEst1 WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, iAno, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        lErro = Comando_ExecutarPos(alComando(7), "SELECT Ano FROM SldMesEst1 WHERE FilialEmpresa = ? AND Produto = ?", 0, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 69577
    
        'Verifica se SldMesEst1 existe
        lErro = Comando_BuscarPrimeiro(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69578
    
        'If lErro = AD_SQL_SUCESSO Then
        Do While lErro <> AD_SQL_SEM_DADOS
    
            'Lock da tabela de SldMesEst1
            lErro = Comando_LockExclusive(alComando(7))
            If lErro <> AD_SQL_SUCESSO Then gError 69579
    
            'Exclui SldMesEst1
            lErro = Comando_ExecutarPos(alComando(8), "DELETE FROM SldMesEst1", alComando(7))
            If lErro <> AD_SQL_SUCESSO Then gError 69580
        
            lErro = Comando_BuscarProximo(alComando(7))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69578
        
        Loop
        'End If
    
        'Pesquisa o SldMesEst2 no BD
        'Alterado para excluir todos registros desse produto/filial de SldMesEst2
        'lErro = Comando_ExecutarPos(alComando(9), "SELECT Ano FROM SldMesEst2 WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, iAno, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        lErro = Comando_ExecutarPos(alComando(9), "SELECT Ano FROM SldMesEst2 WHERE FilialEmpresa = ? AND Produto = ?", 0, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 69581
    
        'Verifica se SldMesEst2 existe
        lErro = Comando_BuscarPrimeiro(alComando(9))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69582
    
        'If lErro = AD_SQL_SUCESSO Then
        Do While lErro <> AD_SQL_SEM_DADOS
    
            'Lock da tabela de SldMesEst2
            lErro = Comando_LockExclusive(alComando(9))
            If lErro <> AD_SQL_SUCESSO Then gError 69583
    
            'Exclui SldMesEst2
            lErro = Comando_ExecutarPos(alComando(10), "DELETE FROM SldMesEst2", alComando(9))
            If lErro <> AD_SQL_SUCESSO Then gError 69584
        
            lErro = Comando_BuscarProximo(alComando(9))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69582
        
        Loop
        'End If
    
' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        lErro = Comando_ExecutarPos(alComando(3), "SELECT FilialEmpresa FROM SldDiaEst WHERE Produto = ? AND FilialEmpresa = ?", 0, iFilialEmpresa, objEstoqueProduto.sProduto, objEstoqueProduto.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 28810
        
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 27677
        
        Do While lErro <> AD_SQL_SEM_DADOS
    
            lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM SldDiaEst", alComando(3))
            If lErro <> AD_SQL_SUCESSO Then gError 21313
            
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 28809
        Loop
    Else
                    
        If iAlmoxPadrao = objEstoqueProduto.iAlmoxarifado Then gError 28795
        
        '###################################################################################
        'Inserido por Wagner 15/02/2006
        objEstoqueProdutoAux.iAlmoxarifado = objEstoqueProduto.iAlmoxarifado
        objEstoqueProdutoAux.iFilialEmpresa = objEstoqueProduto.iFilialEmpresa
        objEstoqueProdutoAux.sProduto = objEstoqueProduto.sProduto
        objEstoqueProdutoAux.dtDataInicial = objEstoqueProduto.dtDataInicial
        
        objProduto.sCodigo = objEstoqueProduto.sProduto
        
        lErro = CF("Produto_Lock", objProduto)
        If lErro <> SUCESSO Then gError 141775

        lErro = EstoqueInicial_Grava_ProdutosFilial(alComando, objEstoqueProdutoAux, False, 0, objProduto, objEstoqueProduto)
        If lErro <> SUCESSO Then gError 141776
        '###################################################################################
    
    End If
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    EstoqueInicial_Exclui1 = SUCESSO

    Exit Function

Erro_EstoqueInicial_Exclui1:

    EstoqueInicial_Exclui1 = gErr

    Select Case gErr
        
        Case 21313
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDDIAEST", gErr)

        Case 21317, 21340
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO2", gErr, objEstoqueProduto.sProduto)
    
        Case 27200
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOSFILIAL", gErr)
        
        Case 27677, 28809, 28810
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAEST1", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28787, 28811
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", gErr, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28792
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOSFILIAL_INEXISTENTE", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iFilialEmpresa)
        
        Case 28794
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOSFILIAL", gErr, objEstoqueProduto.sProduto)
            
        Case 28795
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ALMOXARIFADO_PADRAO", gErr, objEstoqueProduto.iAlmoxarifado)

        Case 28798, 28799, 69577, 69578, 69581, 69582
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28800
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SLDMESEST_NAO_CADASTRADO", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28801, 69579, 69583
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28805, 69580, 69584
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST", gErr, iAno, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 55206
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 141775, 141776

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151774)

    End Select

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

'mario fim

Function EstoqueMes_Atualiza(ByVal objSldMesEst As ClassSldMesEst, iMes As Integer) As Long
'Atualiza a tabela de Estoque mes para a insercao de um novo mes
'IMPORTANTE: TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim iFechamento As Integer

On Error GoTo Erro_EstoqueMes_Atualiza

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 40701

    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 40702
    
    'Inicializa comandos
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 40703
    
    'Le Fechamento da tabela EstoqueMes para que atualize o Fechamento
    lErro = Comando_ExecutarPos(lComando, "SELECT Fechamento FROM EstoqueMes WHERE Ano = ? AND Mes = ? AND FilialEmpresa = ?", 0, iFechamento, objSldMesEst.iAno, iMes, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 40704
    
    'Busca o primeiro mes aberto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 40705
    
    'lock do registro em questão
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 40706
        
    'Altera na tabela no BD
    lErro = Comando_ExecutarPos(lComando2, "UPDATE EstoqueMes SET Fechamento = ?", lComando, ESTOQUEMES_FECHAMENTO_FECHADO)
    If lErro <> AD_SQL_SUCESSO Then Error 40707
    
    If iMes = 12 Then
        iMes = 1
        objSldMesEst.iAno = objSldMesEst.iAno + 1
    Else
        iMes = iMes + 1
    End If
    
    'Insere um novo mes ou ano depende do mes, se 12 será um novo ano
    lErro = Comando_Executar(lComando3, "INSERT INTO EstoqueMes (FilialEmpresa, Ano, Mes, Fechamento) VALUES (?,?,?,?)", objSldMesEst.iFilialEmpresa, objSldMesEst.iAno, iMes, ESTOQUEMES_FECHAMENTO_ABERTO)
    If lErro <> AD_SQL_SUCESSO Then Error 40708
    
    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    'Fechamento comando
    Call Comando_Fechar(lComando3)
    
    EstoqueMes_Atualiza = SUCESSO

    Exit Function

Erro_EstoqueMes_Atualiza:

    EstoqueMes_Atualiza = Err
    
    Select Case Err
        
        Case 40701, 40702, 40703
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
             
        Case 40704, 40705
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEMES", Err, giFilialEmpresa)

        Case 40706
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEMES", Err, giFilialEmpresa)
        
        Case 40707
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FECHAMENTO_MES_ANTERIOR", Err)
        
        Case 40708
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NOVO_MES", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151775)
     
    End Select
   
    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    'Fechamento comando
    Call Comando_Fechar(lComando3)
   
    Exit Function
   
End Function

'Function FornecedorProduto_Grava(objFornecedorProduto As ClassFornecedorProduto, iPadrao As Integer) As Long
''Grava a associação Produto X Fornecedor
'
'Dim lErro As Long
'Dim alComando(6) As Long
'Dim iIndice As Integer
'Dim lTransacao As Long
'Dim lCodigo As Long
'Dim lFornecedor As Long
'Dim lFornecedorPadrao As Long
'Dim sDescricao As String
'Dim iTotalFornProduto As Integer
'
'On Error GoTo Erro_FornecedorProduto_Grava
'
'    'Abertura comandos
'    For iIndice = 0 To 5
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then Error 28302
'    Next
'
'    'Abertura transação
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 28303
'
'    sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
'
'    'Pesquisa no BD o Fornecedor passado como parâmetro
'    lErro = Comando_ExecutarLockado(alComando(0), "SELECT Codigo FROM Fornecedores WHERE Codigo = ?", lCodigo, objFornecedorProduto.lFornecedor)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28304
'
'    'Verifica se Fornecedor existe
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28305
'
'    'Não encontrou o Fornecedor no BD
'    If lErro = AD_SQL_SEM_DADOS Then Error 28306
'
'    lErro = Comando_LockShared(alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then Error 28307
'
'    'Pesquisa no BD o Produto passado como parâmetro
'    lErro = Comando_ExecutarLockado(alComando(1), "SELECT Descricao FROM Produtos WHERE Codigo = ?", sDescricao, objFornecedorProduto.sProduto)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28308
'
'    'Verifica se Produto existe
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28309
'
'    'Não encontrou o Produto no BD
'    If lErro = AD_SQL_SEM_DADOS Then Error 28310
'
'    lErro = Comando_LockShared(alComando(1))
'    If lErro <> AD_SQL_SUCESSO Then Error 19411
'
'    'Pesquisa no BD o FornecedorProduto passado como parâmetro
'    lErro = Comando_ExecutarPos(alComando(2), "SELECT Fornecedor FROM FornecedorProduto WHERE Fornecedor = ? AND Produto = ?", 0, lFornecedor, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28311
'
'    'Verifica se FornecedorProduto existe
'    lErro = Comando_BuscarPrimeiro(alComando(2))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28312
'
'    'Encontrou o FornecedorProduto no BD
'    If lErro = AD_SQL_SUCESSO Then
'
'        'Atualiza a tabela FornecedorProduto
'        lErro = Comando_ExecutarPos(alComando(3), "UPDATE FornecedorProduto SET ProdutoFornecedor = ?, LoteMinimo = ?, LoteEconomico = ?, QuantPedAbertos = ?, TempoMedio = ?, QuantPedida = ?, QuantRecebida = ?, Valor = ?, DataPedido = ?, DataReceb = ?", _
'            alComando(2), objFornecedorProduto.sProdutoFornecedor, objFornecedorProduto.dLoteMinimo, objFornecedorProduto.dLoteEconomico, objFornecedorProduto.dQuantPedAbertos, objFornecedorProduto.iTempoMedio, objFornecedorProduto.dQuantPedida, objFornecedorProduto.dQuantRecebida, objFornecedorProduto.dValor, objFornecedorProduto.dtDataPedido, objFornecedorProduto.dtDataReceb)
'        If lErro <> AD_SQL_SUCESSO Then Error 28313
'
'    Else
'        'Não encontrou o FornecedorProduto no BD
'
'        'Faz a critica da versão Light
'        If giTipoVersao = VERSAO_LIGHT Then
'
'            'Lê o Total de Fornecedor para o Produto Passado
'            lErro = CF("FornecedorProduto_Le_Total",objFornecedorProduto, iTotalFornProduto)
'            If lErro <> SUCESSO Then Error 61229
'
'            'Se ultrapassou o número máximo de Fornecedores por Produto ---> ERRO
'            If iTotalFornProduto >= LIMITE_FORN_PRODUTO_VLIGHT Then Error 61230
'
'        End If
'
'        'Insere o FornecedorProduto na tabela FornecedorProduto
'        lErro = Comando_Executar(alComando(2), "INSERT INTO FornecedorProduto (Fornecedor, Produto, ProdutoFornecedor, LoteMinimo, LoteEconomico, QuantPedAbertos, TempoMedio, QuantPedida, QuantRecebida, Valor, DataPedido, DataReceb) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
'            objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto, objFornecedorProduto.sProdutoFornecedor, objFornecedorProduto.dLoteMinimo, objFornecedorProduto.dLoteEconomico, objFornecedorProduto.dQuantPedAbertos, objFornecedorProduto.iTempoMedio, objFornecedorProduto.dQuantPedida, objFornecedorProduto.dQuantRecebida, objFornecedorProduto.dValor, objFornecedorProduto.dtDataPedido, objFornecedorProduto.dtDataReceb)
'        If lErro <> AD_SQL_SUCESSO Then Error 28314
'
'    End If
'
'    lErro = CF("ProdutoFilial_AtualizaFornPadrao",objFornecedorProduto.sProduto, objFornecedorProduto.lFornecedor, iPadrao, alComando(4), alComando(5))
'    If lErro <> SUCESSO And lErro <> 28281 And lErro <> 28282 And lErro <> 28283 Then Error 28315
'
'    'Confirma transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 28319
'
'    'Fechamento comandos
'    For iIndice = 0 To 5
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    FornecedorProduto_Grava = SUCESSO
'
'    Exit Function
'
'Erro_FornecedorProduto_Grava:
'
'    FornecedorProduto_Grava = Err
'
'    Select Case Err
'
'        Case 19411
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS1", Err, objFornecedorProduto.sProduto)
'
'        Case 28302
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 28303
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
'
'        Case 28304, 28305
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err, objFornecedorProduto.lFornecedor)
'
'        Case 28306
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_CADASTRADO", Err, objFornecedorProduto.lFornecedor)
'
'        Case 28307
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORES", Err, objFornecedorProduto.lFornecedor)
'
'        Case 28308, 28309
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", Err, objFornecedorProduto.sProduto)
'
'        Case 28310
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objFornecedorProduto.sProduto)
'
'        Case 28311, 28312
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTO", Err, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'
'        Case 28313
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FORNECEDORPRODUTO", Err, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'
'        Case 28314
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FORNECEDORPRODUTO", Err, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'
'        Case 28315, 61229
'
'        Case 28319
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
'
'        Case 61230
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIMITE_FORNPRODUTO", Err, LIMITE_FORN_PRODUTO_VLIGHT)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151776)
'
'    End Select
'
'    'Fechamento transação
'    Call Transacao_Rollback
'
'    'Fechamento comandos
'    For iIndice = 0 To 5
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

'Function FornecedorProduto_Exclui(objFornecedorProduto As ClassFornecedorProduto) As Long
'
'Dim lErro As Long
'Dim iIndice As Integer
'Dim alComando(4) As Long
'Dim lTransacao As Long
'Dim lFornecedor As Long
'Dim lFornecedorPadrao As Long
'Dim lFornecedorExcluir As Long
'
'On Error GoTo Erro_FornecedorProduto_Exclui
'
'    'Abertura comandos
'    For iIndice = 0 To 3
'
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then Error 28327
'
'    Next
'
'    'Inicia a Transacao
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 28328
'
'    'Pesquisa o FornecedorProduto no BD
'    lErro = Comando_ExecutarPos(alComando(0), "SELECT Fornecedor FROM FornecedorProduto WHERE Fornecedor = ? AND Produto = ?", 0, lFornecedor, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28329
'
'    'Verifica se FornecedorProduto existe
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28330
'
'    'Não encontrou o FornecedorProduto ==> Erro
'    If lErro = AD_SQL_SEM_DADOS Then Error 28331
'
'    'Exclui FornecedorProduto
'    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM FornecedorProduto", alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then Error 28333
'
'    lErro = CF("ProdutoFilial_AtualizaFornPadrao",objFornecedorProduto.sProduto, objFornecedorProduto.lFornecedor, FORN_PROD_NAO_PADRAO, alComando(2), alComando(3))
'    If lErro <> SUCESSO And lErro <> 28281 And lErro <> 28282 And lErro <> 28283 Then Error 28335
'
'    'Confirma a transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 28339
'
'    'Fechamento comandos
'    For iIndice = 0 To 3
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    FornecedorProduto_Exclui = SUCESSO
'
'    Exit Function
'
'Erro_FornecedorProduto_Exclui:
'
'    FornecedorProduto_Exclui = Err
'
'    Select Case Err
'
'        Case 28327
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 28328
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
'
'        Case 28329, 28330
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTO", Err, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'
'        Case 28331
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECEDORPRODUTO_NAO_ENCONTRADO", Err, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'
'        Case 28333
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FORNECEDORPRODUTO", Err, objFornecedorProduto.lFornecedor, objFornecedorProduto.sProduto)
'
'        Case 28335
'
'        Case 28336
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOSFILIAL", Err, giFilialEmpresa, objFornecedorProduto.sProduto)
'
'        Case 28337
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", Err, giFilialEmpresa, objFornecedorProduto.sProduto)
'
'        Case 28338
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", Err, giFilialEmpresa, objFornecedorProduto.sProduto)
'
'        Case 28339
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151777)
'
'    End Select
'
'    'Fechamento transação
'    Call Transacao_Rollback
'
'    'Fechamento comandos
'    For iIndice = 0 To 3
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Function ProdutoFilial_AtualizaFornPadrao(ByVal sProduto As String, ByVal lForn As Long, iPadrao As Integer, ByVal lComando1 As Long, ByVal lComando2 As Long) As Long
'iPadrao indica se o fornecedor identificado por lForn está sendo atualizado para se tornar o fornecedor padrao ou nao.

Dim lFornecedorPadraoAnterior As Long, lErro As Long, lFornecedorPadraoNovo As Long

On Error GoTo Erro_ProdutoFilial_AtualizaFornPadrao

    'Pesquisa no BD o Produto Filial
    lErro = Comando_ExecutarPos(lComando1, "SELECT Fornecedor FROM ProdutosFilial WHERE FilialEmpresa = ? AND Produto = ?", 0, lFornecedorPadraoAnterior, giFilialEmpresa, sProduto)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28281

    'Verifica se Produto Filial existe
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28282

    'Se não encontrou o Produto na Filial == > Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 28284
    
    lFornecedorPadraoNovo = lFornecedorPadraoAnterior
            
    'ele era e nao é mais
    If lFornecedorPadraoAnterior = lForn And iPadrao = FORN_PROD_NAO_PADRAO Then
        lFornecedorPadraoNovo = 0
    End If
    
    'ele nao era e passou a ser
    If lFornecedorPadraoAnterior <> lForn And iPadrao = FORN_PROD_PADRAO Then
        lFornecedorPadraoNovo = lForn
    End If
    
    If lFornecedorPadraoNovo <> lFornecedorPadraoAnterior Then
        lErro = Comando_ExecutarPos(lComando2, "UPDATE ProdutosFilial SET Fornecedor = ?", lComando1, lFornecedorPadraoNovo)
        If lErro <> AD_SQL_SUCESSO Then Error 28283
    End If
    
    ProdutoFilial_AtualizaFornPadrao = SUCESSO
        
    Exit Function

Erro_ProdutoFilial_AtualizaFornPadrao:

    ProdutoFilial_AtualizaFornPadrao = Err
        
    Select Case Err
    
        Case 28281, 28282, 28283
        
        Case 28284
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILIAL_INEXISTENTE", Err, sProduto, giFilialEmpresa)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151778)

    End Select

    Exit Function

End Function

Private Function InventarioLote_TestaExistencia(ByVal objInventario As ClassInventario) As Long
'Testa a existência de um inventário na tabela Inventario

Dim lComando As Long
Dim lErro As Long
Dim sComando_SQL As String
Dim iLote As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_InventarioLote_TestaExistencia

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 41182

    sComando_SQL = "SELECT NumIntDoc FROM Inventario WHERE FilialEmpresa = ? AND Codigo = ?"

    'Tenta ler na tabela de Inventarios
    lErro = Comando_Executar(lComando, sComando_SQL, lNumIntDoc, objInventario.iFilialEmpresa, objInventario.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 41183

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41184

    If lErro = SUCESSO Then Error 41185

    'Fecha o comando
    Call Comando_Fechar(lComando)

    InventarioLote_TestaExistencia = SUCESSO

    Exit Function

Erro_InventarioLote_TestaExistencia:

    InventarioLote_TestaExistencia = Err

    Select Case Err

        Case 41182
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41183, 41184
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO", Err, objInventario.sCodigo)

        Case 41185 'Tratado na Rotina Chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151779)

    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Inventario_TestaExistencia(ByVal sCodigo As String, ByVal iFilialEmpresa As Integer, lNumIntDoc As Long) As Long
'Testa a existência de um inventário na tabela Inventario ou na tabela Inventarios Pendentes

Dim alComando(0 To 1) As Long
Dim lErro As Long
Dim sComando_SQL As String
Dim sCod As String
Dim iFilialEmp As Integer, iIndice As Integer
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Inventario_TestaExistencia

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 41020
    Next

    sCod = String(STRING_INVENTARIO_CODIGO, 0)

    sComando_SQL = "SELECT DISTINCT Codigo , FilialEmpresa FROM InventarioPendente WHERE Codigo = ? AND FilialEmpresa = ?"

    'Tenta ler na tabela de Inventarios Pendentes
    lErro = Comando_Executar(alComando(0), sComando_SQL, sCod, iFilialEmp, sCodigo, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 41021

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 41022

    If lErro = SUCESSO Then gError 41023

    sCod = String(STRING_INVENTARIO_CODIGO, 0)

    sComando_SQL = "SELECT DISTINCT Codigo , FilialEmpresa, NumIntDoc FROM Inventario WHERE Codigo = ? AND FilialEmpresa = ?"

    'Tenta ler na tabela de Inventarios
    lErro = Comando_Executar(alComando(1), sComando_SQL, sCod, iFilialEmp, lNumIntDoc, sCodigo, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 41024

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 41025

    If lErro = SUCESSO Then
    
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_INVENTARIO", sCodigo, iFilialEmpresa)
        
        If vbMsgRes = vbYes Then
            gError 89845
        Else
            gError 41026
        End If
        
    End If

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Inventario_TestaExistencia = SUCESSO

    Exit Function

Erro_Inventario_TestaExistencia:

    Inventario_TestaExistencia = gErr

    Select Case gErr

        Case 41020
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 41021, 41022
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO", gErr, sCodigo)

        Case 41023, 41026, 89845

        Case 41024, 41025
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO_PENDENTE", gErr, sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151780)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Inventario_Grava(ByVal objInventario As ClassInventario, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Inventario_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 41019

    'altera os dados do Inventário
    lErro = CF("Inventario_Grava0", objInventario, objContabil)
    If lErro <> SUCESSO Then gError 105187

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 41041

    Inventario_Grava = SUCESSO

    Exit Function

Erro_Inventario_Grava:

    Inventario_Grava = gErr

    Select Case gErr

        Case 41019
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 41041
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 105187

        Case Else
        
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151781)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Private Function Inventario_Altera(ByVal objInventario As ClassInventario) As Long
'altera os dados do Inventário
'IMPORTANTE: TEM QUE SER CHAMADO EM TRANSACAO

Dim lNumIntDoc As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long

On Error GoTo Erro_Inventario_Altera

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 89926
    Next

    'Tenta ler na tabela de Inventarios
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM Inventario WHERE Codigo = ? AND FilialEmpresa = ?", 0, lNumIntDoc, objInventario.sCodigo, objInventario.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 89927

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89928

    Do While lErro = SUCESSO

        'Tenta ler na tabela de Inventarios
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Inventario SET Data = ?, Hora = ?", alComando(1), objInventario.dtData, CDbl(objInventario.dtHora))
        If lErro <> AD_SQL_SUCESSO Then gError 89929

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89930

    Loop
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Inventario_Altera = SUCESSO
    
    Exit Function
    
Erro_Inventario_Altera:
    
    Inventario_Altera = gErr
    
    Select Case gErr
    
        Case 89926
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89927, 89928, 89930
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO1", gErr, objInventario.iFilialEmpresa, objInventario.sCodigo)

        Case 89929
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_INVENTARIO1", gErr, objInventario.iFilialEmpresa, objInventario.sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151782)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function Inventario_Grava1(ByVal objMovEstoque As ClassMovEstoque, ByVal objItemInventario As ClassItemInventario, tEstoqueProduto As typeEstoqueProduto, ByVal dQuantConv As Double, ByVal objProduto As ClassProduto, ByVal dCusto As Double, Optional ByVal dFator As Double = 1) As Long

Dim lErro As Long
Dim iTipoMov As Integer
Dim dCalculado As Double
Dim objItemMovEstoque As ClassItemMovEstoque
Dim iTipoMov2 As Integer
Dim colRastreamentoMovto As New Collection
Dim colRastreamentoMovto2 As New Collection
Dim dQtdCalc As Double, dCustoCalc As Double

On Error GoTo Erro_Inventario_Grava1

    dCalculado = dQuantConv

    If objItemInventario.iTipo = TIPO_QUANT_DISPONIVEL_NOSSA Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_DISP_NOSSA_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_DISP_NOSSA_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_DISPONIVEL_NOSSA
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_DISPONIVEL_NOSSA
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_RECEB_INDISP Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_RECEB_IND_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_RECEB_IND_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_RECEB_INDISP
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_RECEB_INDISP
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_OUTRAS_INDISP Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_IND_OUTRAS_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_IND_OUTRAS_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_INDISP_OUTRAS
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_INDISP_OUTRAS
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_DEFEIT Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_DEFEITUOSO_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_DEFEITUOSO_SOLOTE
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_DEFEITUOSO
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_DEFEITUOSO
            End If

        End If
        
    ElseIf objItemInventario.iTipo = TIPO_QUANT_3_CONSIG Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_CONSIG_TERC_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_CONSIG_TERC_SOLOTE
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_CONSIG_TERC
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_CONSIG_TERC
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_3_DEMO Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_DEMO_TERC_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_DEMO_TERC_SOLOTE
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_DEMO_TERC
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_DEMO_TERC
            End If
        
        End If
        
    ElseIf objItemInventario.iTipo = TIPO_QUANT_3_CONSERTO Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_CONS_TERC_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_CONS_TERC_SOLOTE
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_CONSERTO_TERC
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_CONSERTO_TERC
            End If
        
        End If
        
    ElseIf objItemInventario.iTipo = TIPO_QUANT_3_OUTRAS Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_OUTROS_TERC_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_OUTROS_TERC_SOLOTE
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_OUTROS_TERC
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_OUTROS_TERC
            End If
        
        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_3_BENEF Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_BENEF_TERC_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_BENEF_TERC_SOLOTE
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_BENEF_TERC
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_BENEF_TERC
            End If
        
        End If
        
    ElseIf objItemInventario.iTipo = TIPO_QUANT_DISPONIVEL_NOSSA_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_DISP_NOSSA_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_DISP_NOSSA_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_DISPONIVEL_NOSSA_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_DISPONIVEL_NOSSA_CI
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_RECEB_INDISP_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_RECEB_IND_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_RECEB_IND_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_RECEB_INDISP_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_RECEB_INDISP_CI
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_OUTRAS_INDISP_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_IND_OUTRAS_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_IND_OUTRAS_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_INDISP_OUTRAS_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_INDISP_OUTRAS_CI
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_DEFEIT_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_DEFEITUOSO_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_DEFEITUOSO_SOLOTE_CI
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_DEFEITUOSO_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_DEFEITUOSO_CI
            End If

        End If
        
    ElseIf objItemInventario.iTipo = TIPO_QUANT_3_CONSIG_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_CONSIG_TERC_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_CONSIG_TERC_SOLOTE_CI
            End If

        Else
        
            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRESCIMO_INVENT_CONSIG_TERC_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECRESCIMO_INVENT_CONSIG_TERC_CI
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_BENEF Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_BENEF_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_BENEF_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_BENEF
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_BENEF
            End If

        End If
    
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_BENEF_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_BENEF_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_BENEF_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_BENEF_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_BENEF_CI
            End If

        End If
    
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_DEMO Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_DEMO_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_DEMO_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_DEMO
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_DEMO
            End If

        End If
    
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_DEMO_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_DEMO_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_DEMO_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_DEMO_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_DEMO_CI
            End If

        End If

    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_CONSIG Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSIG_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSIG_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSIG
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSIG
            End If

        End If
    
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_CONSIG_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSIG_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSIG_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSIG_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSIG_CI
            End If

        End If
     
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_CONSERTO Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSERTO_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSERTO_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSERTO
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSERTO
            End If

        End If
    
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_CONSERTO_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSERTO_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSERTO_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_CONSERTO_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_CONSERTO_CI
            End If

        End If
        
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_OUTRAS Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_OUTROS_SOLOTE
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_OUTROS_SOLOTE
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_OUTROS
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_OUTROS
            End If

        End If
    
    ElseIf objItemInventario.iTipo = TIPO_QUANT_NOSSO_OUTRAS_CI Then

        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_OUTROS_SOLOTE_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_OUTROS_SOLOTE_CI
            End If

        Else

            If dCalculado >= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_NOSSO_OUTROS_CI
            ElseIf dCalculado < 0 Then
                iTipoMov = MOV_EST_DECR_INVENT_NOSSO_OUTROS_CI
            End If

        End If
        
    ElseIf objItemInventario.iTipo = TIPO_QUANT_DISPONIVEL_NOSSA_CI2P Then
    
         'Tem que acertar as quantidades
        lErro = CF("Prod_Obtem_Qtde_Custo_Est_Data", objItemInventario.sProduto, objItemInventario.iAlmoxarifado, objMovEstoque.dtData, objItemInventario.sLote, objItemInventario.iFilialOP, dQtdCalc, dCustoCalc)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
   
        If objItemInventario.iAtualizaSoLote = INVENTARIO_ATUALIZA_SO_LOTE Then

            If dQtdCalc <= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_DISP_NOSSA_SOLOTE_FX_ZERA
            Else
                iTipoMov = MOV_EST_DECR_INVENT_DISP_NOSSA_SOLOTE_FX_ZERA
            End If
            iTipoMov2 = MOV_EST_INVENT_DISP_NOSSA_SOLOTE_FX_RECOLOCA

        Else

            If dQtdCalc <= 0 Then
                iTipoMov = MOV_EST_ACRES_INVENT_DISPONIVEL_NOSSA_FX_ZERA
            Else
                iTipoMov = MOV_EST_DECR_INVENT_DISPONIVEL_NOSSA_FX_ZERA
            End If
            iTipoMov2 = MOV_EST_INVENT_DISPONIVEL_NOSSA_FX_RECOLOCA

        End If
        
    End If

    If dCalculado < 0 Then dCalculado = -dCalculado
           
    If objItemInventario.iTipo <> TIPO_QUANT_DISPONIVEL_NOSSA_CI2P Then
    
        'Move o Rastro do objInventário para a Colecao de Rastreamento
        lErro = Move_Rastro_Inventario_Estoque(objItemInventario, objProduto, colRastreamentoMovto)
        If lErro <> SUCESSO Then gError 78394
    
        Set objItemMovEstoque = objMovEstoque.colItens.Add(0, iTipoMov, dCusto, 0, objItemInventario.sProduto, objItemInventario.sProdutoDesc, objProduto.sSiglaUMEstoque, dCalculado, objItemInventario.iAlmoxarifado, objItemInventario.sAlmoxarifadoNomeRed, objItemInventario.lNumIntDoc, "", 0, "", "", "", "", 0, colRastreamentoMovto, Nothing, DATA_NULA)
        objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_INVENTARIO
    
    Else
    
        'Move o Rastro do objInventário para a Colecao de Rastreamento
        lErro = Move_Rastro_Inventario_Estoque(objItemInventario, objProduto, colRastreamentoMovto)
        If lErro <> SUCESSO Then gError 78394
            
        If colRastreamentoMovto.Count > 0 Then
            colRastreamentoMovto.Item(1).dQuantidade = dQtdCalc
        End If
        
        'Esse vai zerar o estoque, qtd = qtdeest e custo = valor total em estoque na data
        Set objItemMovEstoque = objMovEstoque.colItens.Add(0, iTipoMov, dCustoCalc, 0, objItemInventario.sProduto, objItemInventario.sProdutoDesc, objProduto.sSiglaUMEstoque, Abs(dQtdCalc), objItemInventario.iAlmoxarifado, objItemInventario.sAlmoxarifadoNomeRed, objItemInventario.lNumIntDoc, "", 0, "", "", "", "", 0, colRastreamentoMovto, Nothing, DATA_NULA)
        objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_INVENTARIO
    
        'Move o Rastro do objInventário para a Colecao de Rastreamento
        lErro = Move_Rastro_Inventario_Estoque(objItemInventario, objProduto, colRastreamentoMovto2)
        If lErro <> SUCESSO Then gError 78394
        
        If colRastreamentoMovto2.Count > 0 Then
            colRastreamentoMovto2.Item(1).dQuantidade = objItemInventario.dQuantidade * dFator
        End If
    
        Set objItemMovEstoque = objMovEstoque.colItens.Add(0, iTipoMov2, Arredonda_Moeda(objItemInventario.dCustoUnitario * objItemInventario.dQuantidade, 4), 0, objItemInventario.sProduto, objItemInventario.sProdutoDesc, objProduto.sSiglaUMEstoque, objItemInventario.dQuantidade * dFator, objItemInventario.iAlmoxarifado, objItemInventario.sAlmoxarifadoNomeRed, objItemInventario.lNumIntDoc, "", 0, "", "", "", "", 0, colRastreamentoMovto2, Nothing, DATA_NULA)
        objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_INVENTARIO
    End If
        
    Inventario_Grava1 = SUCESSO
    
    Exit Function
    
Erro_Inventario_Grava1:

    Inventario_Grava1 = gErr
    
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
        
        Case 78394
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151783)
    
    End Select
    
    Exit Function

End Function

Public Function Prod_Obtem_Qtde_Custo_Est_Data(ByVal sProd As String, ByVal iAlm As Integer, ByVal dtData As Date, ByVal sLote As String, ByVal iFilialOP As Integer, dQtdCalc As Double, dCustoCalc As Double) As Long

Dim lErro As Long
Dim dtDataBase As Date
Dim dValor As Double
Dim alComando(0 To 3) As Long, iIndice As Integer
Dim objRastroLoteSaldo As New ClassRastreamentoLoteSaldo

On Error GoTo Erro_Prod_Obtem_Qtde_Custo_Est_Data

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 41166
    Next
    
    dtDataBase = DateAdd("d", 1, dtData)
    dQtdCalc = 0
    dCustoCalc = 0
    
    If Len(Trim(sLote)) = 0 Then
        'lErro = CF("Produto_ObterRelQtdSldIni", sProd, iAlm, dtDataBase, dtDataBase, dQtdCalc, dValor, alComando, 0, 0, 0)
        lErro = CF("Produto_ObterRelQtdSldDisp", sProd, iAlm, dtDataBase, dtDataBase, dQtdCalc, dValor, alComando, 0, 0, 0)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    Else
        With objRastroLoteSaldo
            .sProduto = sProd
            .sLote = sLote
            .iFilialOP = iFilialOP
            .iAlmoxarifado = iAlm
        End With

        lErro = CF("RastroLoteSaldo_ObterNaData", objRastroLoteSaldo, dtDataBase, alComando)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        dQtdCalc = objRastroLoteSaldo.dQuantDispNossa
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
Erro_Prod_Obtem_Qtde_Custo_Est_Data:

    Prod_Obtem_Qtde_Custo_Est_Data = gErr
    
    Select Case gErr
    
        Case 41166
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151783)
    
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function


Private Function Move_Rastro_Inventario_Estoque(ByVal objItemInventario As ClassItemInventario, ByVal objProduto As ClassProduto, ByVal colRastreamentoMovto As Collection) As Long
'Move o Rastro do Inventario para a coleção que será passada no Reg. Inventário

Dim lErro As Long
Dim objRastreamentoMovto As New ClassRastreamentoMovto

On Error GoTo Erro_Move_Rastro_Inventario_Estoque
    
    If objProduto.iRastro <> PRODUTO_RASTRO_NENHUM And Len(Trim(objItemInventario.sLote)) > 0 Then
    
        If objProduto.iRastro = PRODUTO_RASTRO_LOTE Or objProduto.iRastro = PRODUTO_RASTRO_NUM_SERIE Then
            
            objRastreamentoMovto.sLote = objItemInventario.sLote
            
        ElseIf objProduto.iRastro = PRODUTO_RASTRO_OP Then
            
            objRastreamentoMovto.sLote = objItemInventario.sLote
            objRastreamentoMovto.iFilialOP = objItemInventario.iFilialOP
            
        End If
        
        objRastreamentoMovto.iTipoDocOrigem = TIPO_RASTREAMENTO_MOVTO_MOVTO_ESTOQUE
        objRastreamentoMovto.sProduto = objItemInventario.sProduto
        objRastreamentoMovto.dQuantidade = Abs(objItemInventario.dQuantidade - objItemInventario.dQuantEst)
        objRastreamentoMovto.sSiglaUM = objItemInventario.sSiglaUM
            
        colRastreamentoMovto.Add objRastreamentoMovto
        
    End If
    
    Move_Rastro_Inventario_Estoque = SUCESSO
    
    Exit Function
    
Erro_Move_Rastro_Inventario_Estoque:

    Move_Rastro_Inventario_Estoque = gErr
    
    Select Case gErr
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 151784)
    
    End Select
    
    Exit Function
    
End Function

Function ItemInventario_Automatico_EmTrans(lCodigo As Long, ByVal iQtde As Integer) As Long
'obtem numero interno para identificar um item de inventario
'procurar em MATConfig por codigo = NUM_PROX_ITEM_INVENTARIO
'TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim lTransacao As Long
Dim sCodigo As String

On Error GoTo Erro_ItemInventario_Automatico_EmTrans

    sCodigo = NUM_PROX_ITEM_INVENTARIO

    lErro = CF("MATConfig_ObterNumInt", sCodigo, lCodigo, iQtde)
    If lErro <> SUCESSO Then Error 41016

    ItemInventario_Automatico_EmTrans = SUCESSO

    Exit Function

Erro_ItemInventario_Automatico_EmTrans:

    ItemInventario_Automatico_EmTrans = Err

    Select Case Err

        Case 41016

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151785)

    End Select

    Exit Function

End Function

Private Function InventarioPendente_Exclui_Itens(ByVal objInventario As ClassInventario, iQuantidade As Integer, lNumIntDoc As Long) As Long
'funcao que exclua os itens existentes e retorne a qtde, retirando codigo desta funcao
'o Parametro lNumInDoc retorna o link do inventário que está sendo excluido com a contabilidade

Dim lErro As Long
Dim alComando(0 To 1) As Long, iIndice As Integer
Dim sComando_SQL As String
Dim iLote As Integer, iCount As Integer
Dim objItemInventario As New ClassItemInventario
Dim lNumIntDoc1 As Long

On Error GoTo Erro_InventarioPendente_Exclui_Itens

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 41166
    Next

    iLote = 0
    sComando_SQL = "SELECT Lote, NumIntDoc FROM InventarioPendente WHERE Codigo = ? AND FilialEmpresa = ? ORDER BY NumIntDoc"

    lErro = Comando_ExecutarPos(alComando(0), sComando_SQL, 0, iLote, lNumIntDoc1, objInventario.sCodigo, objInventario.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 41163

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41164

    If lErro = AD_SQL_SEM_DADOS Then Error 41162

    'está guardando o NumIntDoc do relacionamento do inventario com a contabilidade
    lNumIntDoc = lNumIntDoc1
    
    iCount = 0

    Do While lErro = AD_SQL_SUCESSO

        If iLote <> objInventario.iLote Then Error 41165

        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 41167

        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM InventarioPendente", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 41168

        iCount = iCount + 1

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41169

    Loop

    iQuantidade = iCount

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    InventarioPendente_Exclui_Itens = SUCESSO
    
    Exit Function

Erro_InventarioPendente_Exclui_Itens:

    InventarioPendente_Exclui_Itens = Err

    Select Case Err

        Case 41166
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41163, 41164, 41169
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIOPENDENTE", Err, objInventario.sCodigo, objInventario.iFilialEmpresa)

        Case 41165 'Lote diferente de objInventario.iLote
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOTE_INCOMPATIVEL", Err, iLote, objInventario.iLote)

        Case 41162 ' Inventario pendente inexistente

        Case 41167
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_INVENTARIOPENDENTE", Err, objInventario.sCodigo, objInventario.iFilialEmpresa)

        Case 41168
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_INVENTARIOPENDENTE", Err, objInventario.sCodigo)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151786)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function InventarioPendente_Grava(ByVal objInventario As ClassInventario) As Long

Dim lErro As Long, iQuantidade As Integer
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim sComando_SQL As String
Dim iIndice As Integer, lCodigo As Long
Dim objItemInventario As ClassItemInventario
Dim tInvLote As typeInvLote
Dim lNumIntDoc As Long
Dim objProduto As New ClassProduto
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dDiferencaQuantidade As Double
Dim dFator As Double
Dim vbMesRes As VbMsgBoxResult
Dim dCodigoNumerico As Double

On Error GoTo Erro_InventarioPendente_Grava

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 41158
    Next

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 41159

    lErro = CF("ItemInventario_Automatico_EmTrans", lCodigo, objInventario.colItens.Count)
    If lErro <> SUCESSO Then Error 41170

    'verifica se o codigo de inventario já foi utilizado anteriormente
    lErro = InventarioLote_TestaExistencia(objInventario)
    If lErro <> SUCESSO And lErro <> 41185 Then Error 41160

    If lErro = 41185 Then Error 41161

    sComando_SQL = "SELECT Descricao, NumItensAtual , NumItensInf , IdAtualizacao FROM InvLotePendente WHERE FilialEmpresa = ? AND Lote = ?"

    tInvLote.sDescricao = String(STRING_INVLOTE_DESCRICAO, 0)

    'Tenta ler na tabela invLotePendente
    lErro = Comando_ExecutarPos(alComando(0), sComando_SQL, 0, tInvLote.sDescricao, tInvLote.iNumItensAtual, tInvLote.iNumItensInf, tInvLote.iIdAtualizacao, objInventario.iFilialEmpresa, objInventario.iLote)
    If lErro <> AD_SQL_SUCESSO Then Error 41186

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41187

    If lErro = AD_SQL_SEM_DADOS Then Error 41188

    'testar se o lote está sendo atualizado
    If tInvLote.iIdAtualizacao <> 0 Then

        vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_LOTE_ATUALIZANDO_GRAVA", objInventario.iLote)
        If vbMesRes = vbNo Then Error 41062

    End If

    'fazer lock exclusivo
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 41061

    iQuantidade = 0

    'exclui os itens existentes e retorna a qtde
    lErro = InventarioPendente_Exclui_Itens(objInventario, iQuantidade, lNumIntDoc)
    If lErro <> SUCESSO And lErro <> 41162 Then Error 41060

    iIndice = 0

    For Each objItemInventario In objInventario.colItens

        iIndice = iIndice + 1

        objProduto.sCodigo = objItemInventario.sProduto

        'Lê o produto no BD para obter UM de estoque
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 61381

        If lErro = 28030 Then Error 61382

        objEstoqueProduto.iAlmoxarifado = objItemInventario.iAlmoxarifado
        objEstoqueProduto.sProduto = objItemInventario.sProduto

        'Lê o Estoque Produto correspondente ao Produto e ao Almoxarifado
        lErro = CF("EstoqueProduto_Le", objEstoqueProduto)
        If lErro <> SUCESSO And lErro <> 21306 Then Error 61383

        If lErro = 21306 Then Error 61384

        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemInventario.sSiglaUM, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then Error 61385

        'se não mencionar o lote ==> verificar se a quantidade encontrada é menor do que a quantidade em reserva, se for ==> erro (ou seja, tem que abrir mão das reservas antes).
        'se mencionar lote, não pode verificar a quantidade vs a quantidade reservada pois o produto pode estar distribuido por varios lotes. Para isto, existe um relatório que lista os produtos que tem no estoque quantidade abaixo da reservada.
        'o usuário poderá acertar esta situação pelo inventário que permite alterar só o estoque, o estoque junto com o lote ou só o lote.
        If gobjMAT.iAceitaEstoqueNegativo = DESMARCADO Then
        
            If Len(objItemInventario.sLote) = 0 Then
                If objItemInventario.iTipo = TIPO_QUANT_DISPONIVEL_NOSSA Then
                    If (objItemInventario.dQuantidade * dFator) - objEstoqueProduto.dQuantReservada < 0 Then Error 61386
                ElseIf objItemInventario.iTipo = TIPO_QUANT_3_CONSIG Then
                    If (objItemInventario.dQuantidade * dFator) - objEstoqueProduto.dQuantReservadaConsig < 0 Then Error 61387
                End If
            End If
            
        End If

        If IsNumeric(objInventario.sCodigo) Then
            dCodigoNumerico = Round(StrParaDbl(objInventario.sCodigo))
        Else
            dCodigoNumerico = 0
        End If
        
        objItemInventario.lNumIntDoc = lCodigo

        sComando_SQL = "INSERT INTO InventarioPendente (NumIntDoc, FilialEmpresa, Codigo, Data, Produto, SiglaUM, Quantidade, QuantEst, Custo, Almoxarifado, Etiqueta, Lote, Tipo, ContaContabilEst, ContaContabilInv, LoteProduto, FilialOP, Hora, AtualizaSoLote,CodigoNumerico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
        With objItemInventario
            lErro = Comando_Executar(alComando(1), sComando_SQL, .lNumIntDoc, objInventario.iFilialEmpresa, objInventario.sCodigo, objInventario.dtData, .sProduto, .sSiglaUM, .dQuantidade, .dQuantEst, .dCusto, .iAlmoxarifado, .sEtiqueta, objInventario.iLote, .iTipo, .sContaContabilEst, .sContaContabilInv, .sLote, .iFilialOP, CDbl(objInventario.dtHora), .iAtualizaSoLote, dCodigoNumerico)
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 41171

        lCodigo = lCodigo + 1

    Next

    sComando_SQL = "UPDATE InvLotePendente SET NumItensAtual = NumItensAtual + ?"
    lErro = Comando_ExecutarPos(alComando(2), sComando_SQL, alComando(0), objInventario.colItens.Count - iQuantidade)
    If lErro <> AD_SQL_SUCESSO Then Error 41172

    Set objItemInventario = objInventario.colItens(1)

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 41173

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    InventarioPendente_Grava = SUCESSO

    Exit Function

Erro_InventarioPendente_Grava:

    InventarioPendente_Grava = Err

    Select Case Err

        Case 36569, 41060

        Case 41061
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_INVLOTEPENDENTE", Err, objInventario.iFilialEmpresa, objInventario.iLote)

        Case 41062
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_INV_PENDENTE_EM_ATUALIZACAO", Err, objInventario.iLote)

        Case 41158
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41159
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 41160, 41170

        Case 41161
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INVENTARIO_LANCADO", Err, objInventario.sCodigo)

        Case 41171
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_INVENTARIOPENDENTE", Err, objInventario.sCodigo, objInventario.iFilialEmpresa)

        Case 41172
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_INVLOTEPENDENTE", Err)

        Case 41173
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 41186, 41187
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIOPENDENTE", Err, objInventario.sCodigo)

        Case 41188 'InvLotePendente não encontrado
        
        Case 61381, 61383, 61385
        
        Case 61382
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)

        Case 61384
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_NAO_TEM_PRODUTO", Err, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.sProduto)

        Case 61386
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERAR_QUANTIDADE_RESERVADA", Err, iIndice, CStr((objItemInventario.dQuantidade * dFator) - objEstoqueProduto.dQuantReservada) & " " & objItemInventario.sSiglaUM)
            
        Case 61387
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERAR_QUANTIDADE_RESERVADA_CONSIG", Err, iIndice, CStr((objItemInventario.dQuantidade * dFator) - objEstoqueProduto.dQuantReservadaConsig) & " " & objItemInventario.sSiglaUM)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151787)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function InventarioPendente_Exclui(ByVal objInventario As ClassInventario) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim sComando_SQL As String, iQuantidade As Integer
Dim tInvLote As typeInvLote
Dim lNumIntDoc As Long

On Error GoTo Erro_InventarioPendente_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 41189
    Next

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 41190

    'verifica se o codigo de inventario já foi utilizado anteriormente
    lErro = InventarioLote_TestaExistencia(objInventario)
    If lErro <> SUCESSO And lErro <> 41185 Then Error 41191

    If lErro = 41185 Then Error 41192

    sComando_SQL = "SELECT Descricao, NumItensAtual , NumItensInf , IdAtualizacao FROM InvLotePendente WHERE FilialEmpresa = ? AND Lote = ?"

    tInvLote.sDescricao = String(STRING_INVLOTE_DESCRICAO, 0)

    'Tenta ler na tabela invLotePendente
    lErro = Comando_ExecutarPos(alComando(0), sComando_SQL, 0, tInvLote.sDescricao, tInvLote.iNumItensAtual, tInvLote.iNumItensInf, tInvLote.iIdAtualizacao, objInventario.iFilialEmpresa, objInventario.iLote)
    If lErro <> AD_SQL_SUCESSO Then Error 41195

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41201

    If lErro = AD_SQL_SEM_DADOS Then Error 41194

    'testa se o lote está sendo atualizado
    If tInvLote.iIdAtualizacao <> 0 Then Error 41058

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 41057

    iQuantidade = 0
    
    'exclui os itens existentes e retorna a qtde de itens excluidos
    lErro = InventarioPendente_Exclui_Itens(objInventario, iQuantidade, lNumIntDoc)
    If lErro <> SUCESSO And lErro <> 41162 Then Error 41056

    sComando_SQL = "UPDATE InvLotePendente SET NumItensAtual = NumItensAtual - ?"
    lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, alComando(0), iQuantidade)
    If lErro <> AD_SQL_SUCESSO Then Error 41202
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 41203

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    InventarioPendente_Exclui = SUCESSO

    Exit Function

Erro_InventarioPendente_Exclui:

    InventarioPendente_Exclui = Err

    Select Case Err

        Case 36570, 41191, 41056

        Case 41057
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_INVLOTEPENDENTE", Err, objInventario.iFilialEmpresa, objInventario.iLote)

        Case 41058
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INV_PENDENTE_EM_ATUALIZACAO", Err, objInventario.iLote)

        Case 41195, 41201
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIOPENDENTE", Err, objInventario.sCodigo)

        Case 41189
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41190
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 41192
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INVENTARIO_LANCADO", Err, objInventario.sCodigo)

        Case 41202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_INVLOTEPENDENTE", Err)

        Case 41203
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 41194 'InvLotePendente não encontrado

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151788)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function InvLote_Automatico(lLote As Long) As Long
'retorna o número do proximo lote disponivel

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String
Dim sTabelaConfig As String
Dim sTabelaObjeto As String
Dim sCampo As String

On Error GoTo Erro_InvLote_Automatico

    sCodigo = "NUM_PROX_LOTE_INVENTARIO"
    sTabelaConfig = "EstConfig"
    sTabelaObjeto = "InvLotePendente"
    sCampo = "Lote"

    lErro = CF("Config_ObterAutomatico", sTabelaConfig, sCodigo, sTabelaObjeto, sCampo, lLote)
    If lErro <> SUCESSO Then Error 41283

    InvLote_Automatico = SUCESSO

    Exit Function

Erro_InvLote_Automatico:

    InvLote_Automatico = Err

    Select Case Err

        Case 41283

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151789)

    End Select

    Exit Function

End Function

Function InvLotePendente_Exclui(ByVal objInvLote As ClassInvLote) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim sComando_SQL As String
Dim iLote As Integer, iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_InvLotePendente_Exclui

    ' Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 41272
    Next

    ' abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 41273

    ' seleciona o lote desejado no BD
    sComando_SQL = "SELECT Lote FROM InvLotePendente WHERE FilialEmpresa = ? AND Lote = ?"
    lErro = Comando_ExecutarPos(alComando(0), sComando_SQL, 0, iLote, objInvLote.iFilialEmpresa, objInvLote.iLote)
    If lErro <> AD_SQL_SUCESSO Then Error 41274

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41275

    If lErro = AD_SQL_SEM_DADOS Then Error 41276

    ' se existir , lock no registro
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 41277

    ' Pesquisa se existe alguma associacao com InventarioPendente
    sComando_SQL = "SELECT NumIntDoc FROM InventarioPendente WHERE FilialEmpresa = ? AND Lote = ?"
    lErro = Comando_Executar(alComando(1), sComando_SQL, lNumIntDoc, objInvLote.iFilialEmpresa, objInvLote.iLote)
    If lErro <> AD_SQL_SUCESSO Then Error 41278

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41279

    ' se existir ==> Erro
    If lErro = AD_SQL_SUCESSO Then Error 41280

    ' exclui Lote de InvLotePendente
    sComando_SQL = "DELETE FROM InvLotePendente"
    lErro = Comando_ExecutarPos(alComando(2), sComando_SQL, alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 41281

    ' confirma transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 41282

    ' fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    InvLotePendente_Exclui = SUCESSO

    Exit Function

Erro_InvLotePendente_Exclui:

    InvLotePendente_Exclui = Err

    Select Case Err

        Case 41272
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41273
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 41274, 41275
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVLOTE", Err, objInvLote.iFilialEmpresa, objInvLote.iLote)

        Case 41276
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INV_LOTE_PEND_NAO_CADASTRADO", Err, objInvLote.iLote)

        Case 41277
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_INVLOTEPENDENTE", Err, objInvLote.iLote, objInvLote.iFilialEmpresa)

        Case 41278, 41279
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIOPENDENTE", Err)

        Case 41280
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ASSOCIACAO_INVENTARIO", Err, objInvLote.iLote, objInvLote.iFilialEmpresa)

        Case 41281
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_INVLOTEPENDENTE", Err, objInvLote.iFilialEmpresa, objInvLote.iLote)

        Case 41282
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function InvLotePendente_Grava(ByVal objInvLote As ClassInvLote) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim sComando_SQL As String
Dim iIndice As Integer, iLote As Integer

On Error GoTo Erro_InvLotePendente_Grava

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 41286
    Next

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 41287

    ' Verifico se existe em InvLotePendente
    sComando_SQL = "SELECT Lote FROM InvLotePendente WHERE FilialEmpresa = ? AND Lote = ?"
    lErro = Comando_ExecutarPos(alComando(0), sComando_SQL, 0, iLote, objInvLote.iFilialEmpresa, objInvLote.iLote)
    If lErro <> AD_SQL_SUCESSO Then Error 41291

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41292

    ' Se existir , faco um UPDATE
    If lErro = AD_SQL_SUCESSO Then
    
        sComando_SQL = "UPDATE InvLotePendente SET NumItensInf = ?, Descricao = ?"
        lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, alComando(0), objInvLote.iNumItensInf, objInvLote.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 41293
        
    Else ' Se nao verifico se existe em InvLote , se existir ==> Erro , se nao INSERT
        
        sComando_SQL = "SELECT Lote FROM InvLote WHERE FilialEmpresa = ? AND Lote = ?"
        lErro = Comando_Executar(alComando(2), sComando_SQL, iLote, objInvLote.iFilialEmpresa, objInvLote.iLote)
        If lErro <> AD_SQL_SUCESSO Then Error 41288
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41289
    
        If lErro = AD_SQL_SUCESSO Then Error 41290
    
        sComando_SQL = "INSERT INTO InvLotePendente (FilialEmpresa,Lote,Descricao,NumItensInf,NumItensAtual,IdAtualizacao) VALUES (?,?,?,?,?,?)"
        lErro = Comando_Executar(alComando(1), sComando_SQL, objInvLote.iFilialEmpresa, objInvLote.iLote, objInvLote.sDescricao, objInvLote.iNumItensInf, objInvLote.iNumItensAtual, 0)
        If lErro <> AD_SQL_SUCESSO Then Error 41294
    
    End If
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 41295
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    InvLotePendente_Grava = SUCESSO

    Exit Function

Erro_InvLotePendente_Grava:

    InvLotePendente_Grava = Err

    Select Case Err
        
        Case 41286
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 41287
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 41291, 41292
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVLOTE", Err, objInvLote.iFilialEmpresa, objInvLote.iLote)
            
        Case 41293
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_INVLOTEPENDENTE", Err, objInvLote.iFilialEmpresa, objInvLote.iLote)
        
        Case 41288, 41289
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVLOTE", Err, objInvLote.iFilialEmpresa, objInvLote.iLote)
        
        Case 41290
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INVLOTE_CADASTRADO", Err, objInvLote.iLote)
            
        Case 41294
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_INVLOTEPENDENTE", Err, objInvLote.iLote, objInvLote.iFilialEmpresa)
        
        Case 41295
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
                
    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function InvLotePendente_Atualiza(ByVal colInvLote As Collection, iIdAtualizacao As Integer) As Long
'atualiza o IdAtualizacao das tabelas Configuracao e LotePendente

Dim lErro As Long
Dim objInvLote As ClassInvLote
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lComando4 As Long
Dim lTransacao As Long
Dim iIdAtual As Integer

On Error GoTo Erro_InvLotePendente_Atualiza

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 41249

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 41250

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 41251

    lComando4 = Comando_Abrir()
    If lComando4 = 0 Then Error 41252

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 41253

    'apenas prepara o lock na tabela Configuracao
    lErro = Comando_ExecutarPos(lComando, "SELECT IdAtualizacao FROM Configuracao", 0, iIdAtualizacao)
    If lErro <> AD_SQL_SUCESSO Then Error 41254

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41255

    iIdAtualizacao = iIdAtualizacao + 1

    'Lock do registro de configuracao
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 41256

    'faz a alteracao em IdAtualizacao na tabela de Configuracao
    lErro = Comando_ExecutarPos(lComando2, "UPDATE Configuracao SET IdAtualizacao =? ", lComando, iIdAtualizacao)
    If lErro <> AD_SQL_SUCESSO Then Error 41257

    For Each objInvLote In colInvLote

        'apenas prepara o lock na tabela LotePendente
        lErro = Comando_ExecutarPos(lComando3, "SELECT IdAtualizacao FROM InvLotePendente WHERE FilialEmpresa = ? AND Lote = ?", 0, iIdAtual, objInvLote.iFilialEmpresa, objInvLote.iLote)
        If lErro <> AD_SQL_SUCESSO Then Error 41258

        lErro = Comando_BuscarPrimeiro(lComando3)
        If lErro <> AD_SQL_SUCESSO Then Error 41259

        If lErro = AD_SQL_SEM_DADOS Then Error 55474

        'Lock do registro de LotePendente
        lErro = Comando_LockExclusive(lComando3)
        If lErro <> AD_SQL_SUCESSO Then Error 41260

        'faz o update na tabela de LotePendente
        lErro = Comando_ExecutarPos(lComando4, "UPDATE InvLotePendente SET IdAtualizacao =? ", lComando3, iIdAtualizacao)
        If lErro <> AD_SQL_SUCESSO Then Error 41261

        objInvLote.iIdAtualizacao = iIdAtualizacao

    Next

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 41262

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    InvLotePendente_Atualiza = SUCESSO

    Exit Function

Erro_InvLotePendente_Atualiza:

    InvLotePendente_Atualiza = Err

    Select Case Err

        Case 41249, 41250, 41251, 41252
             lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41253
             lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 41254, 41255
             lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONFIGURACAO", Err)

        Case 41256
             lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONFIGURACAO", Err)

        Case 41257
             lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CONFIG", Err, iIdAtualizacao)

        Case 41258, 41259
'????? objInvlote.sOrigem não Existe
'             lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOTE_PENDENTE", Err, objInvLote.sOrigem, objInvLote.iExercicio, objInvLote.iPeriodo, objInvLote.iLote)

        Case 41260
             lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_LOTEPENDENTE", Err)

        Case 41261
             lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_LOTEPENDENTE", Err, iIdAtualizacao)

        Case 41262
             lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151790)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    Exit Function

End Function

Function Empenhos_Excluir_ItemOP(ByVal objItemOP As ClassItemOP) As Long
'Exclui os empenhos associados a um item de OP

Dim lErro As Long, lCodigo As Long
Dim iAlmoxarifado As Integer, alComando(1 To 2) As Long
Dim dQuantidadeRequisitada As Double
Dim dQuantEmpenhada As Double, iIndice As Integer
Dim sProdutoMascarado As String, objEstoqueProduto As New ClassEstoqueProduto
Dim sProduto As String
Dim dSaldo As Double

On Error GoTo Erro_Empenhos_Excluir_ItemOP

    'Abre os comandos
    For iIndice = 1 To 2
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 22967
    Next

    sProduto = String(STRING_PRODUTO, 0)

    'tenta seleciona empenhos associados a um Item da OP
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Produto, Codigo, Almoxarifado, QuantidadeRequisitada, Quantidade FROM Empenho WHERE FilialEmpresa = ? AND NumIntDocItemOP = ?", 0, sProduto, lCodigo, iAlmoxarifado, dQuantidadeRequisitada, dQuantEmpenhada, objItemOP.iFilialEmpresa, objItemOP.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 27500

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27501

    Do While lErro <> AD_SQL_SEM_DADOS

        If dQuantidadeRequisitada > QTDE_ESTOQUE_DELTA Then Error 27502

        'exclui empenho
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Empenho ", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 27503

        objEstoqueProduto.sProduto = sProduto
        objEstoqueProduto.iAlmoxarifado = iAlmoxarifado
        
        dSaldo = dQuantidadeRequisitada - dQuantEmpenhada
        
        lErro = CF("EstoqueProduto_AlterarEmpenho", objEstoqueProduto, dSaldo)
        If lErro <> SUCESSO Then Error 55230

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27507

    Loop

    'Fecha os comandos
    For iIndice = 1 To 2
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Empenhos_Excluir_ItemOP = SUCESSO

    Exit Function

Erro_Empenhos_Excluir_ItemOP:

    Empenhos_Excluir_ItemOP = Err

    Select Case Err

        Case 22967
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 27500, 27501, 27507
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO_ITEMOP", Err)

        Case 27502
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EMPENHO_COM_REQUISICAO", Err, lCodigo)

        Case 27503
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_EMPENHO", Err, lCodigo)

        Case 55230

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 151791)

    End Select

    'Fecha os comandos
    For iIndice = 1 To 2
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function EstoqueProduto_AlterarQtdOP(ByVal objEstoqueProduto As ClassEstoqueProduto, ByVal dQtde As Double) As Long
'Aumenta (ou diminui se dQtde for negativo) a qtde a ser produzida em um produto-almoxarifado
'objEstoqueProduto.sProduto e objEstoqueProduto.iAlmoxarifado tem que estar preenchidos
'DEVE SER CHAMADO EM TRANSACAO
'??? sugestao: poderia ser criada uma funcao generica pela passagem do nome do campo "qtde" a ser alterado

Dim lErro As Long
Dim dQuant As Double
Dim iIndice As Integer
Dim alComando(0 To 1) As Long

On Error GoTo Erro_EstoqueProduto_AlterarQtdOP

    'Abre os comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 41545
    Next
    
    'Pesquisar o estoque produto por produto e almoxarifado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT QuantOP FROM EstoqueProduto WHERE Produto= ? AND Almoxarifado = ?", 0, dQuant, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 41546

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41547

    'Não encontrou o estoque produto ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 41548
    
    '"Lock" no Estoque Produto
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then Error 41549
    
    'Atualiza a Quantidade em OP na tabela EstoqueProduto
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE EstoqueProduto SET QuantOP = QuantOP + ?, DataUltAtualizacao = ?, Exportado = ? ", alComando(0), dQtde, Date, 0)
    If lErro <> AD_SQL_SUCESSO Then Error 41550
    
    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    EstoqueProduto_AlterarQtdOP = SUCESSO

    Exit Function

Erro_EstoqueProduto_AlterarQtdOP:

    EstoqueProduto_AlterarQtdOP = Err

    Select Case Err

        Case 41545
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 41546, 41547
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO1", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 41548
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUE_PRODUTO_NAO_CADASTRADO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 41549
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEPRODUTO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 41550
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151792)

    End Select

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TabelaPrecoItem_Exclui(ByVal objTabelaPrecoItem As ClassTabelaPrecoItem) As Long
'Exclui a Tabela e Preço do BD

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim dPreco As Double

On Error GoTo Erro_TabelaPrecoItem_Exclui

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 28073
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 28075

    'Pesquisa o Item de Tabela de Preço no BD
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Preco FROM TabelasDePrecoItens WHERE FilialEmpresa = ? AND CodTabela = ? AND CodProduto = ? AND DataVigencia = ?", 0, dPreco, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.dtDataVigencia)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28076

    'Verifica se Ítem existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28077

    'Não encontrou o ítem
    If lErro = AD_SQL_SEM_DADOS Then Error 28078

    'Lock da Tabela de Preço Itens
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 28079

    lErro = CF("TabelaPrecoItem_Atualiza_TabelaPadrao", alComando(2), alComando(3), objTabelaPrecoItem, EXCLUIDO)
    If lErro <> SUCESSO Then Error 28074
    
    'Exclui TabelaPrecoItem
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TabelasDePrecoItens", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 28080

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 28081

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    TabelaPrecoItem_Exclui = SUCESSO

    Exit Function

Erro_TabelaPrecoItem_Exclui:

    TabelaPrecoItem_Exclui = Err

    Select Case Err

        Case 28073
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 28074

        Case 28075
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 28076, 28077
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS2", Err, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case 28078
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TABELAPRECOITEM_INEXISTENTE", Err, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case 28079
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TABELASDEPRECOITENS", Err, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case 28080
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TABELASDEPRECOITENS1", Err, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case 28081
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151793)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function



End Function

Function TabelaPrecoItem_Grava(ByVal objTabelaPrecoItem As ClassTabelaPrecoItem) As Long
'Rotina que grava Tabela de Preço Item

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_TabelaPrecoItem_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116889

    'Chama função que grava na tabela : TabelaDePrecoItens
    lErro = CF("TabelaPrecoItem_Grava_EmTrans", objTabelaPrecoItem)
    If lErro <> SUCESSO Then gError 116890

    lErro = CF("TabPrecoItem_Grava_Customizado", objTabelaPrecoItem)
    If lErro <> SUCESSO Then gError 199331

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116892

    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objTabelaPrecoItem.objTela, gsUsuario, objTabelaPrecoItem)
    If lErro <> SUCESSO Then gError 197764

    TabelaPrecoItem_Grava = SUCESSO

    Exit Function

Erro_TabelaPrecoItem_Grava:

    TabelaPrecoItem_Grava = gErr

    Select Case gErr
    
        Case 116890, 197764, 199331

        Case 116889
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116892
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151794)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function ProdutosProduzidosCustos_Grava(ByVal iAno As Integer, ByVal iMes As Integer, ByVal colProdutoCustoAtual As ColProdutoCusto) As Long
'Atualiza os Custo de Producao dos produtos na tabela de SldMesEst

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sProduto As String
Dim dCusto As Double
Dim sMes As String
Dim iIndice As Integer

On Error GoTo Erro_ProdutosProduzidosCustos_Grava

    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 48748

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 48749
    
    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 48750
        
    sMes = iMes
       
    For iIndice = 1 To colProdutoCustoAtual.Count
    
        sProduto = colProdutoCustoAtual.Item(iIndice).sCodProduto
                
        'Seleciona os Produtos que estao na tabela com o mes e ano correpondente
        lErro = Comando_ExecutarPos(lComando1, "SELECT CustoProducao" + sMes + " FROM SldMesEst WHERE Produto=? And FilialEmpresa=? And Ano =?", 0, dCusto, sProduto, giFilialEmpresa, iAno)
        If lErro <> AD_SQL_SUCESSO Then Error 48751
    
        'le o primeiro produto a atualizar o custo de producao
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48752
    
        'se nao encontrou erro - - - - -> dificilmente irá acontecer
        If lErro = AD_SQL_SEM_DADOS Then Error 48753
    
        'coloca o custo de acordo com o que esta na colecao
        dCusto = colProdutoCustoAtual.Item(iIndice).dCusto
    
        'Atualiza o custo de producao do Produto
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst SET CustoProducao" + sMes + "  = ? ", lComando1, dCusto)
        If lErro <> AD_SQL_SUCESSO Then Error 48754
    
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 48756

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
        
    Exit Function
    
    ProdutosProduzidosCustos_Grava = SUCESSO
    
Erro_ProdutosProduzidosCustos_Grava:

    ProdutosProduzidosCustos_Grava = Err
    
    Select Case Err
        
        Case 48748, 48749
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 48750
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 48751, 48752, 48755
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1", Err, iAno, giFilialEmpresa)
        
        Case 48753
            lErro = Rotina_Erro(vbOKOnly, "ERRO_AUSENCIA_PRODUTO_SLDMESEST", Err, sProduto)
        
        Case 48754
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CUSTO_PRODUCAO", Err, iAno, giFilialEmpresa)
            
        Case 48756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 151795)

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Function EstoqueProduto_Exclui(ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'Exclui Estoque X Produto passado como parâmetro

Dim lErro As Long

On Error GoTo Erro_EstoqueProduto_Exclui

    lErro = CF("EstoqueInicial_Exclui", objEstoqueProduto)
    If lErro <> SUCESSO Then Error 55208

    EstoqueProduto_Exclui = SUCESSO

    Exit Function

Erro_EstoqueProduto_Exclui:

    EstoqueProduto_Exclui = Err

    Select Case Err

        Case 55208

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151796)

    End Select

    Exit Function

End Function

'mario inicio alterado giFilialEmpresa por objEstoqueProduto.iFilialEmpresa
Function EstoqueProduto_AtualizaAlmoxarifado(ByVal objEstoqueProduto As ClassEstoqueProduto, iAlmoxarifadoPadraoFilial As Integer) As Long
'iAlmoxarifadoPadraoFilial com 1(um) ou 0(zero) p/indicar se o almoxarifado é ou nao o padrao p/(filial,produto)
'   permitirá alterar o almoxarifado padrao a nivel de filialEmpresa ou EMPRESA_TODA,
'   (dependendo de como o usuario tiver se logado), e a localizacao fisica no almoxarifado
'       se o registro nao existir em EstoqueProduto sera criado
'   o almoxarifado padrao ficara na tabela ProdutoFilial
'       se nao existir o reg este sera criado
'??? será que deve ter esta funcionalidade toda ?

Dim lErro As Long
Dim alComando(6) As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim sDescricao As String
Dim iCodigo As Integer
Dim iAlmoxarifado As Integer
Dim iAlmoxarifado1 As Integer
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_EstoqueProduto_AtualizaAlmoxarifado

    sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)

    'Abertura comandos
    For iIndice = 0 To 5
        alComando(iIndice) = 0

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 28390

    Next

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 28391

    'Pesquisa no BD o Produto passado como parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Descricao FROM Produtos WHERE Codigo = ?", 0, sDescricao, objEstoqueProduto.sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 28392

    'Verifica se Produto existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28393

    'Não encontrou o Produto no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 28394

    lErro = Comando_LockShared(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 28395

    'Pesquisa no BD o Almoxarifado passado como parâmetro
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM Almoxarifado WHERE Codigo = ? AND FilialEmpresa = ?", 0, iCodigo, objEstoqueProduto.iAlmoxarifado, objEstoqueProduto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 28396

    'Verifica se Almoxarifado existe
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28397

    'Não encontrou o Almoxarifado no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 28398

    'Pesquisa no BD o EstoqueProduto passado como parâmetro
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Almoxarifado FROM EstoqueProduto WHERE Produto = ? AND Almoxarifado = ?", 0, iAlmoxarifado, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 28399

    'Verifica se EstoqueProduto existe
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28400

    'Encontrou o EstoqueProduto no BD
    If lErro = AD_SQL_SUCESSO Then

        'Atualiza a tabela EstoqueProduto
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE EstoqueProduto SET LocalizacaoFisica = ?, ContaContabil =?, DataUltAtualizacao = ?, Exportado = ? ", alComando(2), objEstoqueProduto.sLocalizacaoFisica, objEstoqueProduto.sContaContabil, Date, 0)
        If lErro <> AD_SQL_SUCESSO Then Error 28401

    Else
        'Não encontrou o EstoqueProduto no BD
        Error 28402
    End If

    'Pesquisa no BD o Produto Filial
    lErro = Comando_ExecutarPos(alComando(4), "SELECT Almoxarifado FROM ProdutosFilial WHERE FilialEmpresa = ? AND Produto = ?", 0, iAlmoxarifado1, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 28403

    'Verifica se Produto Filial existe
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28404

    'Se não encontrou o Produto na Filial == > Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 28405
    
    'Lock na tabela ProdutosFilial
    lErro = Comando_LockExclusive(alComando(4))
    If lErro <> AD_SQL_SUCESSO Then Error 28372
    
    'Verifica se o Almoxarifado Padrao no BD está preenchido e se o da tela já não é o Padrao
    If iAlmoxarifado1 = 0 And iAlmoxarifadoPadraoFilial = NAO_PADRAO Then
    
        vbMsgRes = Rotina_Aviso(vbOKOnly, "AVISO_ALMOXARIFADO_TELA_PADRAO", objEstoqueProduto.iAlmoxarifado)
        
        iAlmoxarifadoPadraoFilial = objEstoqueProduto.iAlmoxarifado
        
    End If
    
    If iAlmoxarifadoPadraoFilial <> NAO_PADRAO Then
        
        'Se encontrou, altera o campo Almoxarifado, na tabela ProdutosFilial
        lErro = Comando_ExecutarPos(alComando(5), "UPDATE ProdutosFilial SET Almoxarifado = ?", alComando(4), iAlmoxarifadoPadraoFilial)
        If lErro <> AD_SQL_SUCESSO Then Error 28406
    
    End If
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 28407

    'Fechamento comandos
    For iIndice = 0 To 5
        Call Comando_Fechar(alComando(iIndice))
    Next

    EstoqueProduto_AtualizaAlmoxarifado = SUCESSO

    Exit Function

Erro_EstoqueProduto_AtualizaAlmoxarifado:

    EstoqueProduto_AtualizaAlmoxarifado = Err

    Select Case Err

        Case 28372
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOSFILIAL", Err, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28390
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 28391
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 28392, 28393
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", Err, objEstoqueProduto.sProduto)

        Case 28394
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objEstoqueProduto.sProduto)

        Case 28395
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", Err, objEstoqueProduto.sProduto)

        Case 28396, 28397
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", Err, objEstoqueProduto.iAlmoxarifado)

        Case 28398
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_NAO_CADASTRADO", Err, objEstoqueProduto.iAlmoxarifado)

        Case 28399, 28400
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO1", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 28401
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 28402
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUE_PRODUTO_NAO_CADASTRADO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case 28403, 28404
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", Err, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28405
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILIAL_INEXISTENTE", Err, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28406
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", Err, objEstoqueProduto.iFilialEmpresa, objEstoqueProduto.sProduto)

        Case 28407
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151797)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = 0 To 5
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'mario fim

Function Segmento_Grava_Produto(ByVal colSegmentos As Collection) As Long
'grava os registros da colecao na tabela Segmento

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Segmento_Grava_Produto

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 44835

    lErro = CF("Segmento_Grava_Produto_Trans", colSegmentos)
    If lErro <> SUCESSO Then Error 44836
     
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 44837
     
    Segmento_Grava_Produto = SUCESSO
    
    Exit Function

Erro_Segmento_Grava_Produto:

    Segmento_Grava_Produto = Err

    Select Case Err

        Case 44835
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 44836

        Case 44837
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151798)

    End Select
    
    Call Transacao_Rollback

    Exit Function

End Function

Function Segmento_Grava_Produto_Trans(ByVal colSegmentos As Collection) As Long
'grava os registros da colecao na tabela Segmento de Produto
'IMPORTANTE: TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim iPossui_Produto As Integer
Dim iExercicio As Integer
Dim iIndice As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim tSegmento As typeSegmento
Dim sCodigo As String
Dim sCodigo2 As String
Dim objSegmento As New ClassSegmento
Dim iCcl As Integer

On Error GoTo Erro_Segmento_Grava_Produto_Trans

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44836
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 44837
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 44838
  
    sCodigo = String(STRING_SEGMENTO_CODIGO, 0)
    sCodigo2 = String(STRING_SEGMENTO_CODIGO, 0)
    tSegmento.sDelimitador = String(STRING_SEGMENTO_DELIMITADOR, 0)
    
    'pega um objeto da colSegmentos para saber qual o formato( = campo codigo na tabela Segmento)
    For Each objSegmento In colSegmentos
        'guarda o formato em sCodigo para depois fazer o Select na tabela Segmentos
        sCodigo = objSegmento.sCodigo
        Exit For
    Next
       
    If objSegmento.sCodigo <> SEGMENTO_PRODUTO Then Error 44839
       
    'verifica existencia de pelo menos um produto cadastrado
    lErro = CF("Produto_ExisteProduto", iPossui_Produto)
    If lErro <> SUCESSO Then Error 44840

    If iPossui_Produto = POSSUI_PRODUTO Then
    'so faz modificacao no delimitador e no preenchimento da tabela Segmento
        
         lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, Nivel, Delimitador, Preenchimento FROM Segmento WHERE Codigo = ? ORDER BY Nivel", 0, sCodigo2, tSegmento.iNivel, tSegmento.sDelimitador, tSegmento.iPreenchimento, sCodigo)
         If lErro <> AD_SQL_SUCESSO Then Error 44841
     
         'percorre cada registro em colSegmentos para fazer a modificacao nos delimitadores e no preenchimento
         For Each objSegmento In colSegmentos
                     
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO Then Error 44842
            
            lErro = Comando_ExecutarPos(lComando2, "UPDATE Segmento SET Codigo =? , Nivel =? , Delimitador =? , Preenchimento =? ", lComando, sCodigo, objSegmento.iNivel, objSegmento.sDelimitador, objSegmento.iPreenchimento)
            If lErro <> AD_SQL_SUCESSO Then Error 44843
            
         Next
    
    Else
        'apaga toda tabela Segmento e insere os dados novos em Segmento
        
        'prepara o lock na tabela Configuracao
        lErro = Comando_ExecutarPos(lComando3, "SELECT UsoCcl FROM Configuracao", 0, iCcl)
        If lErro <> AD_SQL_SUCESSO Then Error 44844
    
        lErro = Comando_BuscarPrimeiro(lComando3)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44845
    
        'Lock da Configuracao
        lErro = Comando_LockExclusive(lComando3)
        If lErro <> AD_SQL_SUCESSO Then Error 44846
    
        'Seleciona registros na tabela de Segmento
        lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, Nivel FROM Segmento WHERE Codigo = ?", 0, sCodigo2, tSegmento.iNivel, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then Error 44847
        
        'le o primeiro segmento
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44848
        
        'verifica se ainda existe registro a ser deletado
        Do While lErro <> AD_SQL_SEM_DADOS
           
            'exclui o segmento
            lErro = Comando_ExecutarPos(lComando2, "DELETE FROM Segmento", lComando)
            If lErro <> AD_SQL_SUCESSO Then Error 44850
        
            'le o proximo segmento
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44849
        
        Loop
        
        For Each objSegmento In colSegmentos
           
           lErro = Comando_Executar(lComando2, "INSERT INTO Segmento (Codigo,Nivel,Tipo,Tamanho,Delimitador,Preenchimento) VALUES (?,?,?,?,?,?)", sCodigo, objSegmento.iNivel, objSegmento.iTipo, objSegmento.iTamanho, objSegmento.sDelimitador, objSegmento.iPreenchimento)
           If lErro <> AD_SQL_SUCESSO Then Error 44851
           
        Next
        
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
     
    Segmento_Grava_Produto_Trans = SUCESSO
    
    Exit Function

Erro_Segmento_Grava_Produto_Trans:

    Segmento_Grava_Produto_Trans = Err

    Select Case Err

        Case 44836, 44837, 44838
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 44839
            Call Rotina_Erro(vbOKOnly, "ERRO_SEGMENTO_PRODUTO_INVALIDO", Err, sCodigo)

        Case 44840

        Case 44841, 44842, 44847, 44848, 44849
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SEGMENTO1", Err, sCodigo)
             
        Case 44843
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SEGMENTO", Err, sCodigo, tSegmento.iNivel)
             
        Case 44844, 44845
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONFIGURACAO", Err)
        
        Case 44846
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONFIGURACAO", Err)

        Case 44850
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SEGMENTO", Err, sCodigo, tSegmento.iNivel)

        Case 44851
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SEGMENTO", Err, sCodigo, objSegmento.iNivel)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151799)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function EstoqueMes_Insere(ByVal objEstoqueMes As ClassEstoqueMes) As Long
'Insere um novo mes aberto na tabela de EstoqueMes
'IMPORTANTE: TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_EstoqueMes_Insere

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44965
    
    'Insere um novo registro em estoquemes
    lErro = Comando_Executar(lComando, "INSERT INTO EstoqueMes (FilialEmpresa, Ano, Mes, Fechamento) VALUES (?,?,?,?)", objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes, ESTOQUEMES_FECHAMENTO_ABERTO)
    If lErro <> AD_SQL_SUCESSO Then Error 44966
    
    'Fechamento comando
    Call Comando_Fechar(lComando)

    EstoqueMes_Insere = SUCESSO

    Exit Function

Erro_EstoqueMes_Insere:

    EstoqueMes_Insere = Err
    
    Select Case Err
        
        Case 44965
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
             
        Case 44966
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NOVO_MES", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151800)
     
    End Select
   
    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function
   
End Function

Private Function Produto_Valida_AlteracaoGerFinal(ByVal sProduto1 As String) As Long
'Lê dados do BD para validar a alteracao do produto de gerencial para final

Dim lErro As Long
Dim sProduto As String
Dim lComando As Long

On Error GoTo Erro_Produto_Valida_AlteracaoGerFinal

    'Abrir o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 55082
    
    sProduto = String(STRING_PRODUTO, 0)

    'verifica se o produto é substituto de outro
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM Produtos WHERE Substituto1 = ? OR Substituto2 = ?", sProduto, sProduto1, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55083

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55084
    If lErro = SUCESSO Then Error 55085 'Se for --> Erro

    'Verifica se o Produto está envolvido em algum Movimento de Estoque
    lErro = Comando_Executar(lComando, "SELECT Produto FROM MovimentoEstoque WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55086

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55087
    If lErro = AD_SQL_SUCESSO Then Error 55088 'Se estiver --> Erro

    'Verifica se o Produto está envolvido com algum ítem de ordem de produção
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensOrdemProducao WHERE Produto = ? ", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55089

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55090
    If lErro = AD_SQL_SUCESSO Then Error 55091 'Se estiver--> Erro

    'Verifica se o Produto está envolvido com algum ítem de ordem de produção baixado
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensOrdemProducaoBaixadas WHERE Produto = ? ", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55092

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55093
    If lErro = AD_SQL_SUCESSO Then Error 55094 'Se estiver -->Erro

    'Verifica se o Produto está envolvido em algum Empenho
    lErro = Comando_Executar(lComando, "SELECT Produto FROM Empenho WHERE Produto = ? ", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55095

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55096
    If lErro = SUCESSO Then Error 55097 'Se estiver -->Erro

    'Verifica se o Produto faz parte de um Kit como componente
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ProdutoKit WHERE ProdutoRaiz <> ? AND Produto=? ", sProduto, sProduto1, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55098

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55099
    If lErro = SUCESSO Then Error 55100 'Se fizer --> Erro

    'Verifica se o Produto está relacionado com algum item de Pedido de Venda
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensPedidoDeVenda WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55101

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55102
    If lErro = AD_SQL_SUCESSO Then Error 55103 'Se estiver -->Erro

    'Verifica se o Produto está relacionado com algum item de Pedido de Venda Baixado
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensPedidoDeVendaBaixados WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55104

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55105
    If lErro = AD_SQL_SUCESSO Then Error 55106 'Se estiver --> Erro

    'Verifica se o Produto está relacionado com algum item de requisição de compra
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensReqCompra WHERE Produto = ?", sProduto, sProduto1) 'William - altera
    If lErro <> AD_SQL_SUCESSO Then Error 55107

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55108
    If lErro = AD_SQL_SUCESSO Then Error 55109 'Se estiver --> Erro

    'Verifica se o Produto que está sendo excluido está relacionado com algum inventário
    lErro = Comando_Executar(lComando, "SELECT Produto FROM Inventario WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55110

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55111
    If lErro = AD_SQL_SUCESSO Then Error 55112 'Se estiver --> Erro

    'Verifica se o Produto está relacionado com algum inventário pendente
    lErro = Comando_Executar(lComando, "SELECT Produto FROM InventarioPendente WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55113

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55114
    If lErro = AD_SQL_SUCESSO Then Error 55115 'Se estiver --> Erro

    'Verifica se o Produto está envolvido em alguma reserva
    lErro = Comando_Executar(lComando, "SELECT Produto FROM Reserva WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55116

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55117
    If lErro = AD_SQL_SUCESSO Then Error 55118 'Se estiver --> Erro

    'Verifica se o Produto está envolvido em alguma nota fiscal
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensNFiscal WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55119

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55120
    If lErro = AD_SQL_SUCESSO Then Error 55121 'Se estiver --> Erro
    
'mario 2/7/99 Remover NFiscalBaixada
'    'Verifica se o Produto está envolvido em alguma nota fiscal baixada
'    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensNFiscalBaixadas WHERE Produto = ?", sProduto, sProduto1)
'    If lErro <> AD_SQL_SUCESSO Then Error 55122
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55123
'    If lErro = AD_SQL_SUCESSO Then Error 55124 'Se estiver --> Erro
    
    'Verifica se o Produto que está sendo excluido está envolvido em algum lançamento pendente
    lErro = Comando_Executar(lComando, "SELECT Produto FROM LanPendente WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then Error 55125

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55126
    If lErro = AD_SQL_SUCESSO Then Error 55127 'Se estiver --> Erro
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    Produto_Valida_AlteracaoGerFinal = SUCESSO

    Exit Function

Erro_Produto_Valida_AlteracaoGerFinal:

    Produto_Valida_AlteracaoGerFinal = Err

    Select Case Err
        
        Case 55082
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 55083, 55084
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", Err)

        Case 55085
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_SUBSTITUTO_GERFINAL", Err, sProduto1)

        Case 55086, 55087
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", Err)

        Case 55088
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_MOVIMENTOESTOQUE_GERFINAL", Err, sProduto1)

        Case 55089, 55090
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDEMPRODUCAO3", Err)

        Case 55091
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSORDEMPRODUCAOGERFINAL", Err, sProduto1)

        Case 55092, 55093
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDEMPRODUCAOBAIXADAS", Err)

        Case 55094
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSOPBAIXADASGERFINAL", Err, sProduto1)

        Case 55095, 55096
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO2", Err)

        Case 55097
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_EMPENHOGERFINAL", Err, sProduto1)

        Case 55098, 55099
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT", Err)

        Case 55100
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_KIT_GERFINAL", Err, sProduto1)

        Case 55101, 55102
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA1", Err)

        Case 55103
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITEMPVGERFINAL", Err, sProduto1)

        Case 55104, 55105
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDABAIXADOS1", Err)

        Case 55106
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITEMPVBAIXADOGERFINAL", Err, sProduto1)

        Case 55107, 55108
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQCOMPRA", Err)

        Case 55109
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSREQCOMPRA", Err)

        Case 55110, 55111
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO", Err)

        Case 55112
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INVENTARIOGERFINAL", Err, sProduto1)

        Case 55113, 55114
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIOPENDENTE", Err)

        Case 55115
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INVENTARIOPENDGERFINAL", Err, sProduto1)

        Case 55116, 55117
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)

        Case 55118
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_RESERVAGERFINAL", Err, sProduto1)

        Case 55119, 55120
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL2", Err)

        Case 55121
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSNFISCALGERFINAL", Err, sProduto1)

        Case 55122, 55123
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCALBAIXADAS2", Err)
        
        Case 55124
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSNFISCALBAIXADASGERFINAL", Err, sProduto1)
        
        Case 55125, 55126
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LANPENDENTE3", Err)
        
        Case 55127
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_LANPENDENTEGERFINAL", Err, sProduto1)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151801)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Empenhos_Excluir_ItemOP1(ByVal objItemOP As ClassItemOP, ByVal lComando As Long, ByVal lComando1 As Long) As Long
'Exclui os empenhos associados a um item de OP

Dim lErro As Long, lCodigo As Long
Dim sProduto As String
Dim iAlmoxarifado As Integer
Dim dQuantEmpenhada As Double, iIndice As Integer
Dim sProdutoMascarado As String, objEstoqueProduto As New ClassEstoqueProduto
Dim dQuantRequisitada As Double
Dim dSaldo As Double

On Error GoTo Erro_Empenhos_Excluir_ItemOP1

    sProduto = String(STRING_PRODUTO, 0)

    'tenta seleciona empenhos associados a um Item da OP
    lErro = Comando_ExecutarPos(lComando, "SELECT Produto, Almoxarifado, Quantidade, QuantidadeRequisitada FROM Empenho WHERE FilialEmpresa = ? AND NumIntDocItemOP = ?", 0, sProduto, iAlmoxarifado, dQuantEmpenhada, dQuantRequisitada, objItemOP.iFilialEmpresa, objItemOP.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 55225

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55226

    Do While lErro <> AD_SQL_SEM_DADOS

        'exclui empenho
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM Empenho ", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 55228

        objEstoqueProduto.sProduto = sProduto
        objEstoqueProduto.iAlmoxarifado = iAlmoxarifado

        dSaldo = dQuantRequisitada - dQuantEmpenhada
        
        'Só abate do saldo empenhado quando a qtd requisitada for menor que
        'a empenhada
        If dSaldo > 0 Then dSaldo = 0
        
        lErro = CF("EstoqueProduto_AlterarEmpenho", objEstoqueProduto, dSaldo)
        If lErro <> SUCESSO Then Error 55229

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55227

    Loop

    Empenhos_Excluir_ItemOP1 = SUCESSO

    Exit Function

Erro_Empenhos_Excluir_ItemOP1:

    Empenhos_Excluir_ItemOP1 = Err

    Select Case Err

        Case 55225, 55226, 55227
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO_ITEMOP", Err)

        Case 55228
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_EMPENHO", Err, lCodigo)

        Case 55229

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 151802)

    End Select

    Exit Function

End Function

Function OrdemDeProducao_Baixa(ByVal sOPCodigo As String) As Long
'Baixa a ordem de producao, seus itens e seus empenhos

Dim lErro As Long
Dim tOrdemProducao As typeOrdemProducao, tItemOP As typeItemOP
Dim sComando_SQL As String
Dim objItemOP As New ClassItemOP
Dim iIndice As Integer
Dim alComando(1 To 8) As Long
Dim sUsuario As String

On Error GoTo Erro_OrdemDeProducao_Baixa

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 55260
    Next

    tOrdemProducao.sOPGeradora = String(STRING_OPCODIGO, 0)
    sUsuario = String(STRING_USUARIO_CODIGO, 0)

    'localiza a Ordem de Producao
    sComando_SQL = "SELECT DataEmissao, NumItens, NumItensBaixados, OPGeradora, CodPrestador, Tipo, NumIntDocOper, CodigoNumerico,Usuario, TipoTerc, CodTerc, FilialTerc, EscaninhoTerc, IgnoraEst FROM OrdensDeProducao WHERE FilialEmpresa = ? And Codigo = ?"
    lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, 0, tOrdemProducao.dtDataEmissao, tOrdemProducao.iNumItens, tOrdemProducao.iNumItensBaixados, tOrdemProducao.sOPGeradora, tOrdemProducao.lCodPrestador, tOrdemProducao.iTipo, tOrdemProducao.lNumIntDocOper, tOrdemProducao.lCodigoNumerico, sUsuario, tOrdemProducao.iTipoTerc, tOrdemProducao.lCodTerc, tOrdemProducao.iFilialTerc, tOrdemProducao.iEscaninhoTerc, tOrdemProducao.iIgnoraEst, giFilialEmpresa, sOPCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 55261

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55262

    'nao encontrou ordem de produto
    If lErro = AD_SQL_SEM_DADOS Then Error 55263

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 55264

    'Insere na tabela OrdensDeProducaoBaixadas
    sComando_SQL = "INSERT INTO OrdensDeProducaoBaixadas ( FilialEmpresa, Codigo, DataEmissao, NumItens, NumItensBaixados, OPGeradora, CodPrestador, Tipo, NumIntDocOper, CodigoNumerico,Usuario, TipoTerc, CodTerc, FilialTerc, EscaninhoTerc,IgnoraEst) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
    
    lErro = Comando_Executar(alComando(2), sComando_SQL, giFilialEmpresa, sOPCodigo, tOrdemProducao.dtDataEmissao, tOrdemProducao.iNumItens, tOrdemProducao.iNumItens, tOrdemProducao.sOPGeradora, tOrdemProducao.lCodPrestador, tOrdemProducao.iTipo, tOrdemProducao.lNumIntDocOper, tOrdemProducao.lCodigoNumerico, sUsuario, tOrdemProducao.iTipoTerc, tOrdemProducao.lCodTerc, tOrdemProducao.iFilialTerc, tOrdemProducao.iEscaninhoTerc, tOrdemProducao.iIgnoraEst)
    If lErro <> AD_SQL_SUCESSO Then Error 55265

    tItemOP.sCodigo = String(STRING_OPCODIGO, 0)
    tItemOP.sCcl = String(STRING_CCL, 0)
    tItemOP.sProduto = String(STRING_PRODUTO, 0)
    tItemOP.sSiglaUM = String(STRING_UM_SIGLA, 0)
    tItemOP.sVersao = String(STRING_KIT_VERSAO, 0)
    
    'Lê todos os Itens da OP da Tabela ItensOrdemProducao a partir de giFilialEmpresa e sOPCodigo
    sComando_SQL = "SELECT NumIntItemOPGrade, NumIntDoc, FilialEmpresa, Codigo, Item, Produto, FilialPedido, CodPedido, NumIntOrigem, Almoxarifado, Ccl, SiglaUM, Quantidade, DataInicioProd, DataFimProd, Prioridade, QuantidadeProd, Situacao, Destinacao,Beneficiamento, NumIntEquipamento, Versao, Tipo FROM ItensOrdemProducao WHERE FilialEmpresa = ? And Codigo = ?"
    lErro = Comando_ExecutarPos(alComando(3), sComando_SQL, 0, tItemOP.lNumIntItemOP, tItemOP.lNumIntDoc, tItemOP.iFilialEmpresa, tItemOP.sCodigo, tItemOP.iItem, tItemOP.sProduto, tItemOP.iFilialPedido, tItemOP.lCodPedido, tItemOP.lNumIntOrigem, tItemOP.iAlmoxarifado, tItemOP.sCcl, tItemOP.sSiglaUM, tItemOP.dQuantidade, tItemOP.dtDataInicioProd, tItemOP.dtDataFimProd, tItemOP.iPrioridade, tItemOP.dQuantidadeProd, tItemOP.iSituacao, tItemOP.iDestinacao, tItemOP.iBeneficiamento, tItemOP.lNumIntEquipamento, tItemOP.sVersao, tItemOP.iTipo, giFilialEmpresa, sOPCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 55266

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55267

    'Para cada ítem lido
    Do While lErro <> AD_SQL_SEM_DADOS

        lErro = Comando_LockExclusive(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then Error 55268
        
        'Insere na tabela ItensOrdemProducaoBaixadas
        sComando_SQL = "INSERT INTO ItensOrdemProducaoBaixadas (NumIntItemOPGrade, NumIntDoc, FilialEmpresa, Codigo, Item, Produto, FilialPedido, CodPedido, NumIntOrigem, Almoxarifado, Ccl, SiglaUM, Quantidade, DataInicioProd, DataFimProd, Prioridade, QuantidadeProd, Situacao, Destinacao,Beneficiamento, NumIntEquipamento, Versao, Tipo, ProduzLogo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
        lErro = Comando_Executar(alComando(4), sComando_SQL, tItemOP.lNumIntItemOP, tItemOP.lNumIntDoc, giFilialEmpresa, sOPCodigo, tItemOP.iItem, tItemOP.sProduto, tItemOP.iFilialPedido, tItemOP.lCodPedido, tItemOP.lNumIntOrigem, _
        tItemOP.iAlmoxarifado, tItemOP.sCcl, tItemOP.sSiglaUM, tItemOP.dQuantidade, tItemOP.dtDataInicioProd, tItemOP.dtDataFimProd, tItemOP.iPrioridade, tItemOP.dQuantidadeProd, tItemOP.iSituacao, tItemOP.iDestinacao, tItemOP.iBeneficiamento, tItemOP.lNumIntEquipamento, tItemOP.sVersao, tItemOP.iTipo, tItemOP.iProduzLogo)
        If lErro <> AD_SQL_SUCESSO Then Error 55269

        objItemOP.iFilialEmpresa = tItemOP.iFilialEmpresa
        objItemOP.lNumIntDoc = tItemOP.lNumIntDoc

        'exclui empenhos associados ao itemOP
        lErro = CF("Empenhos_Excluir_ItemOP1", objItemOP, alComando(5), alComando(6))
        If lErro <> SUCESSO Then Error 55270

        'Exclui da tabela ItensOrdemProducao
        sComando_SQL = "DELETE FROM ItensOrdemProducao"
        lErro = Comando_ExecutarPos(alComando(7), sComando_SQL, alComando(3))
        If lErro <> AD_SQL_SUCESSO Then Error 55271

        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55272

    Loop

    'Exclui OrdemProducao da tb OrdensProducao
    sComando_SQL = "DELETE FROM OrdensDeProducao"
    lErro = Comando_ExecutarPos(alComando(8), sComando_SQL, alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 55273

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    OrdemDeProducao_Baixa = SUCESSO

    Exit Function

Erro_OrdemDeProducao_Baixa:

    OrdemDeProducao_Baixa = Err

    Select Case Err

        Case 55260
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 55261, 55262
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORDENSDEPRODUCAO", Err)

        Case 55263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORDEMDEPRODUCAO_INEXISTENTE", Err, sOPCodigo)

        Case 55264
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ORDENSDEPRODUCAO", Err)

        Case 55265
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ORDENSDEPRODUCAO", Err)

        Case 55266, 55267, 55272
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDENSPRODUCAO", Err)

        Case 55268
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSORDENSDEPRODUCAO", Err)

        Case 55269
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMOPBAIXADA", Err)

        Case 55270

        Case 55271
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSORDENSDEPRODUCAO", Err)

        Case 55273
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ORDENSDEPRODUCAO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151803)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function OrdemDeProducao_Baixa1(alComando() As Long, ByVal sOPCodigo As String) As Long
'Verifica se todos os itens da OP estão baixados, se tiverem ==> Baixa a ordem de producao, seus itens e seus empenhos

' *** Função corrigida em 09/08/2001 por Luiz G.F. Nogueira ***
' *** A correção foi feita para que ao baixar uma O.P. o sistema atualize
' o campo Beneficiamento na tabela ItensOrdemProducaoBaixadas corretamente ***

Dim lErro As Long
Dim tOrdemProducao As typeOrdemProducao, tItemOP As typeItemOP
Dim sComando_SQL As String
Dim objItemOP As New ClassItemOP
Dim iIndice As Integer
Dim sUsuario As String

On Error GoTo Erro_OrdemDeProducao_Baixa1

    tOrdemProducao.sOPGeradora = String(STRING_OPCODIGO, 0)
    sUsuario = String(STRING_USUARIO_CODIGO, 0)

    'localiza a Ordem de Producao
    sComando_SQL = "SELECT DataEmissao, NumItens, NumItensBaixados, OPGeradora, CodPrestador, Tipo, NumIntDocOper, CodigoNumerico, Usuario, TipoTerc, CodTerc, FilialTerc, EscaninhoTerc, IgnoraEst FROM OrdensDeProducao WHERE FilialEmpresa = ? And Codigo = ?"
    lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, 0, tOrdemProducao.dtDataEmissao, tOrdemProducao.iNumItens, tOrdemProducao.iNumItensBaixados, tOrdemProducao.sOPGeradora, tOrdemProducao.lCodPrestador, tOrdemProducao.iTipo, tOrdemProducao.lNumIntDocOper, tOrdemProducao.lCodigoNumerico, sUsuario, tOrdemProducao.iTipoTerc, tOrdemProducao.lCodTerc, tOrdemProducao.iFilialTerc, tOrdemProducao.iEscaninhoTerc, tOrdemProducao.iIgnoraEst, giFilialEmpresa, sOPCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 55285

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55286

    'se encontrou ordem de producao
    If lErro = AD_SQL_SUCESSO Then

        'se todos os itens estiverem baixados ==> baixa a OP
        If tOrdemProducao.iNumItens = tOrdemProducao.iNumItensBaixados Then

            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 55287

            'Insere na tabela OrdensDeProducaoBaixadas
            sComando_SQL = "INSERT INTO OrdensDeProducaoBaixadas ( FilialEmpresa, Codigo, DataEmissao, NumItens, NumItensBaixados, OPGeradora, CodPrestador, Tipo, NumIntDocOper, CodigoNumerico, Usuario, TipoTerc, CodTerc, FilialTerc, EscaninhoTerc, IgnoraEst) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
            
            lErro = Comando_Executar(alComando(2), sComando_SQL, giFilialEmpresa, sOPCodigo, tOrdemProducao.dtDataEmissao, tOrdemProducao.iNumItens, tOrdemProducao.iNumItens, tOrdemProducao.sOPGeradora, tOrdemProducao.lCodPrestador, tOrdemProducao.iTipo, tOrdemProducao.lNumIntDocOper, tOrdemProducao.lCodigoNumerico, sUsuario, tOrdemProducao.iTipoTerc, tOrdemProducao.lCodTerc, tOrdemProducao.iFilialTerc, tOrdemProducao.iEscaninhoTerc, tOrdemProducao.iIgnoraEst)
            If lErro <> AD_SQL_SUCESSO Then Error 55288

            tItemOP.sCodigo = String(STRING_OPCODIGO, 0)
            tItemOP.sCcl = String(STRING_CCL, 0)
            tItemOP.sProduto = String(STRING_PRODUTO, 0)
            tItemOP.sSiglaUM = String(STRING_UM_SIGLA, 0)
            tItemOP.sVersao = String(STRING_KIT_VERSAO, 0)
    
            'Corrigido em 09/08/01 => incluído para leitura o campo Beneficiamento
            'Lê todos os Itens da OP da Tabela ItensOrdemProducao a partir de giFilialEmpresa e sOPCodigo
            sComando_SQL = "SELECT NumIntItemOPGrade, NumIntDoc, FilialEmpresa, Codigo, Item, Produto, FilialPedido, CodPedido, NumIntOrigem, Almoxarifado, Ccl, SiglaUM, Quantidade, DataInicioProd, DataFimProd, Prioridade, QuantidadeProd, Situacao, Destinacao, Beneficiamento, NumIntEquipamento, Versao, ProduzLogo FROM ItensOrdemProducao WHERE FilialEmpresa = ? And Codigo = ?"
            lErro = Comando_ExecutarPos(alComando(3), sComando_SQL, 0, tItemOP.lNumIntItemOP, tItemOP.lNumIntDoc, tItemOP.iFilialEmpresa, tItemOP.sCodigo, tItemOP.iItem, tItemOP.sProduto, tItemOP.iFilialPedido, tItemOP.lCodPedido, tItemOP.lNumIntOrigem, tItemOP.iAlmoxarifado, tItemOP.sCcl, tItemOP.sSiglaUM, tItemOP.dQuantidade, tItemOP.dtDataInicioProd, tItemOP.dtDataFimProd, tItemOP.iPrioridade, tItemOP.dQuantidadeProd, tItemOP.iSituacao, tItemOP.iDestinacao, tItemOP.iBeneficiamento, tItemOP.lNumIntEquipamento, tItemOP.sVersao, tItemOP.iProduzLogo, giFilialEmpresa, sOPCodigo)
            If lErro <> AD_SQL_SUCESSO Then Error 55289
        
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55290
        
            'Para cada ítem lido
            Do While lErro <> AD_SQL_SEM_DADOS
        
                lErro = Comando_LockExclusive(alComando(3))
                If lErro <> AD_SQL_SUCESSO Then Error 55291
        
                'Corrigido em 09/08/01 => incluído para gravação o campo Beneficiamento
                'Insere na tabela ItensOrdemProducaoBaixadas
                sComando_SQL = "INSERT INTO ItensOrdemProducaoBaixadas (NumIntItemOPGrade, NumIntDoc, FilialEmpresa, Codigo, Item, Produto, FilialPedido, CodPedido, NumIntOrigem, Almoxarifado, Ccl, SiglaUM, Quantidade, DataInicioProd, DataFimProd, Prioridade, QuantidadeProd, Situacao, Destinacao, Beneficiamento, NumIntEquipamento, Versao, ProduzLogo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
                lErro = Comando_Executar(alComando(4), sComando_SQL, tItemOP.lNumIntItemOP, tItemOP.lNumIntDoc, giFilialEmpresa, sOPCodigo, tItemOP.iItem, tItemOP.sProduto, tItemOP.iFilialPedido, tItemOP.lCodPedido, tItemOP.lNumIntOrigem, _
                tItemOP.iAlmoxarifado, tItemOP.sCcl, tItemOP.sSiglaUM, tItemOP.dQuantidade, tItemOP.dtDataInicioProd, tItemOP.dtDataFimProd, tItemOP.iPrioridade, tItemOP.dQuantidadeProd, tItemOP.iSituacao, tItemOP.iDestinacao, tItemOP.iBeneficiamento, tItemOP.lNumIntEquipamento, tItemOP.sVersao, tItemOP.iProduzLogo)
                If lErro <> AD_SQL_SUCESSO Then Error 55292
        
                objItemOP.iFilialEmpresa = tItemOP.iFilialEmpresa
                objItemOP.lNumIntDoc = tItemOP.lNumIntDoc
        
                'exclui empenhos associados ao itemOP
                lErro = CF("Empenhos_Excluir_ItemOP1", objItemOP, alComando(5), alComando(6))
                If lErro <> SUCESSO Then Error 55293
        
                'Exclui da tabela ItensOrdemProducao
                sComando_SQL = "DELETE FROM ItensOrdemProducao"
                lErro = Comando_ExecutarPos(alComando(7), sComando_SQL, alComando(3))
                If lErro <> AD_SQL_SUCESSO Then Error 55294
        
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55295
        
            Loop
        
            'Exclui OrdemProducao da tb OrdensProducao
            sComando_SQL = "DELETE FROM OrdensDeProducao"
            lErro = Comando_ExecutarPos(alComando(8), sComando_SQL, alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 55296

        End If

    End If
    
    OrdemDeProducao_Baixa1 = SUCESSO

    Exit Function

Erro_OrdemDeProducao_Baixa1:

    OrdemDeProducao_Baixa1 = Err

    Select Case Err

        Case 55284
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 55285, 55286
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORDENSDEPRODUCAO", Err)

        Case 55287
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ORDENSDEPRODUCAO", Err)

        Case 55288
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ORDENSDEPRODUCAO", Err)

        Case 55289, 55290, 55295
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDENSPRODUCAO", Err)

        Case 55291
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSORDENSDEPRODUCAO", Err)

        Case 55292
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMOPBAIXADA", Err)

        Case 55293

        Case 55294
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSORDENSDEPRODUCAO", Err)

        Case 55296
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ORDENSDEPRODUCAO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151804)

    End Select

End Function

Function EmpenhoQtdRequisitada_Grava(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objMovEstoque As ClassMovEstoque) As Long
'atualiza o valor da quantidade requisitada no registro de empenho

Dim lErro As Long
Dim iIndice As Integer
Dim sComando_SQL As String
Dim objItemMovEstoque As ClassItemMovEstoque
Dim dQtdRequisitada As Double
Dim dQtdAtualizar As Double
Dim dQtdPodeAtualizar As Double
Dim dQtdEmpenho As Double
Dim iAlmoxarifado As Integer

On Error GoTo Erro_EmpenhoQtdRequisitada_Grava

    For Each objItemMovEstoque In objMovEstoque.colItens
    
        sComando_SQL = "SELECT QuantidadeRequisitada, Quantidade, Almoxarifado FROM Empenho WHERE Produto = ? AND Almoxarifado = ? AND NumIntDocItemOP = ?"
        
        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, dQtdRequisitada, dQtdEmpenho, iAlmoxarifado, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado, objItemMovEstoque.lNumIntDocOrigem)
        If lErro <> AD_SQL_SUCESSO Then gError 41360
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 41361
        
        '#######################################################
        'Inserido por Wagner 14/10/2005
        'Se não encontrou o empenho no mesmo almoxarifido, procura nos outros
        If lErro = AD_SQL_SEM_DADOS Then
        
            sComando_SQL = "SELECT QuantidadeRequisitada, Quantidade, Almoxarifado FROM Empenho WHERE Produto = ? AND NumIntDocItemOP = ?"
            
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, dQtdRequisitada, dQtdEmpenho, iAlmoxarifado, objItemMovEstoque.sProduto, objItemMovEstoque.lNumIntDocOrigem)
            If lErro <> AD_SQL_SUCESSO Then gError 41360
            
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 41361
        
        End If
        '#######################################################
        
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_LockExclusive(lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 41363
            
            If objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_DEV_MATERIAL_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO_BENEF3 Then
                
                '#########################################################
                'Inserido por Wagner 16/05/2006
                'Obtém o que ainda se pode baixar desse empenho
                
                'Se A quantidade requisitada é igual ou inferior ao empenhado
                'Abate da Qtd retorna a qtd empenha o que está sendo estornado
                If dQtdEmpenho - dQtdRequisitada >= 0 Then
                    dQtdAtualizar = objItemMovEstoque.dQuantidade
                Else
                'Se eu tenho uma quantidade requisitada maior que a empenhada
                'Calcula quanto vai ser empenhado
                    dQtdAtualizar = -dQtdRequisitada + objItemMovEstoque.dQuantidade + dQtdEmpenho
                End If
                If dQtdAtualizar < 0 Then dQtdAtualizar = 0
                '#########################################################
            
                dQtdRequisitada = -objItemMovEstoque.dQuantidade
            Else
            
                '#########################################################
                'Inserido por Wagner 16/05/2006
                'Obtém o que ainda se pode baixar desse empenho
                dQtdPodeAtualizar = dQtdEmpenho - dQtdRequisitada
                If dQtdPodeAtualizar < 0 Then dQtdPodeAtualizar = 0
                
                If objItemMovEstoque.dQuantidade < dQtdPodeAtualizar Then
                    dQtdAtualizar = -objItemMovEstoque.dQuantidade
                Else
                    dQtdAtualizar = -dQtdPodeAtualizar
                End If
                '#########################################################
            
                dQtdRequisitada = objItemMovEstoque.dQuantidade
            End If
            
            sComando_SQL = "UPDATE Empenho SET QuantidadeRequisitada = QuantidadeRequisitada + ?"
            
            lErro = Comando_ExecutarPos(lComando1, sComando_SQL, lComando, dQtdRequisitada)
            If lErro <> AD_SQL_SUCESSO Then gError 41364
            
            'Atualiza Estoque Produto (Quantidade Empenhada)
            lErro = EstoqueProduto_Atualiza_QuantEmpenhada(objItemMovEstoque, dQtdAtualizar, iAlmoxarifado)
            If lErro <> SUCESSO Then gError 69043
            
        End If

    Next
    
    EmpenhoQtdRequisitada_Grava = SUCESSO

    Exit Function

Erro_EmpenhoQtdRequisitada_Grava:

    EmpenhoQtdRequisitada_Grava = gErr

    Select Case gErr
        
       Case 41360, 41361
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO1", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado, objItemMovEstoque.lNumIntDocOrigem)
        
        Case 41363
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_EMPENHO1", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado, objItemMovEstoque.lNumIntDocOrigem)
            
        Case 41364
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_EMPENHO", gErr)
        
        Case 69043
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151805)
        
    End Select
    
    Exit Function

End Function

Private Function EmpenhoQtdRequisitada_Grava1(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objItemMovEstoque As ClassItemMovEstoque) As Long
'atualiza o valor da quantidade requisitada no registro de empenho

Dim lErro As Long
Dim iIndice As Integer
Dim sComando_SQL As String
Dim dQtdRequisitada As Double
Dim dQtdAtualizar As Double
Dim dQtdPodeAtualizar As Double
Dim dQtdEmpenho As Double
Dim iAlmoxarifado As Integer
Dim lComando2 As Long, lComando3 As Long, lComandoAux As Long, lComandoAux2 As Long

On Error GoTo Erro_EmpenhoQtdRequisitada_Grava1

    sComando_SQL = "SELECT QuantidadeRequisitada, Quantidade, Almoxarifado FROM Empenho WHERE Produto = ? AND Almoxarifado = ? AND NumIntDocItemOP = ?"
    
    lComandoAux = lComando
    lComandoAux2 = lComando1
    
    lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, dQtdRequisitada, dQtdEmpenho, iAlmoxarifado, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado, objItemMovEstoque.lNumIntDocOrigem)
    If lErro <> AD_SQL_SUCESSO Then gError 55306
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 55307
    
    '#######################################################
    'Inserido por Wagner 14/10/2005
    'Se não encontrou o empenho no mesmo almoxarifido, procura nos outros
    If lErro = AD_SQL_SEM_DADOS Then
    
        sComando_SQL = "SELECT QuantidadeRequisitada, Quantidade, Almoxarifado FROM Empenho WHERE Produto = ? AND NumIntDocItemOP = ?"
        
        lComando2 = Comando_Abrir()
        If lComando2 = 0 Then gError 69036
        
        lComando3 = Comando_Abrir()
        If lComando3 = 0 Then gError 69036
        
        lComandoAux = lComando2
        lComandoAux2 = lComando3
    
        lErro = Comando_ExecutarPos(lComando2, sComando_SQL, 0, dQtdRequisitada, dQtdEmpenho, iAlmoxarifado, objItemMovEstoque.sProduto, objItemMovEstoque.lNumIntDocOrigem)
        If lErro <> AD_SQL_SUCESSO Then gError 55306
        
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 55307
    
    End If
    '#######################################################
    
    If lErro = AD_SQL_SUCESSO Then
        
        lErro = Comando_LockExclusive(lComandoAux)
        If lErro <> AD_SQL_SUCESSO Then gError 55308
        
        sComando_SQL = "UPDATE Empenho SET QuantidadeRequisitada = QuantidadeRequisitada + ?"
        
        If objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_DEV_MATERIAL_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO_BENEF3 Then
            
            '#########################################################
            'Inserido por Wagner 16/05/2006
            'Obtém o que ainda se pode baixar desse empenho
            
            'Se A quantidade requisitada é igual ou inferior ao empenhado
            'Abate da Qtd retorna a qtd empenha o que está sendo estornado
            If dQtdEmpenho - dQtdRequisitada >= 0 Then
                dQtdAtualizar = objItemMovEstoque.dQuantidade
            Else
            'Se eu tenho uma quantidade requisitada maior que a empenhada
            'Calcula quanto vai ser empenhado
                dQtdAtualizar = -dQtdRequisitada + objItemMovEstoque.dQuantidade + dQtdEmpenho
            End If
            If dQtdAtualizar < 0 Then dQtdAtualizar = 0
            '#########################################################
            
            dQtdRequisitada = -objItemMovEstoque.dQuantidade
        Else
            '#########################################################
            'Inserido por Wagner 16/05/2006
            'Obtém o que ainda se pode baixar desse empenho
            dQtdPodeAtualizar = dQtdEmpenho - dQtdRequisitada
            If dQtdPodeAtualizar < 0 Then dQtdPodeAtualizar = 0
            
            If objItemMovEstoque.dQuantidade < dQtdPodeAtualizar Then
                dQtdAtualizar = -objItemMovEstoque.dQuantidade
            Else
                dQtdAtualizar = -dQtdPodeAtualizar
            End If
            '#########################################################
            
            dQtdRequisitada = objItemMovEstoque.dQuantidade


        End If
        
        lErro = Comando_ExecutarPos(lComandoAux2, sComando_SQL, lComandoAux, dQtdRequisitada)
        If lErro <> AD_SQL_SUCESSO Then gError 55309
        
        'Atualiza Estoque Produto (Quantidade Empenhada)
        lErro = EstoqueProduto_Atualiza_QuantEmpenhada(objItemMovEstoque, dQtdAtualizar, iAlmoxarifado)
        If lErro <> SUCESSO Then gError 69042
        
    End If
    
    If lComando2 <> 0 Then Call Comando_Fechar(lComando2)
    If lComando3 <> 0 Then Call Comando_Fechar(lComando3)

    EmpenhoQtdRequisitada_Grava1 = SUCESSO

    Exit Function

Erro_EmpenhoQtdRequisitada_Grava1:

    EmpenhoQtdRequisitada_Grava1 = gErr

    Select Case gErr
        
       Case 55306, 55307
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO1", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado, objItemMovEstoque.lNumIntDocOrigem)
        
        Case 55308
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_EMPENHO1", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado, objItemMovEstoque.lNumIntDocOrigem)
                        
        Case 55309
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_EMPENHO", gErr)
               
        Case 69036, 69037
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 69042
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151806)
        
    End Select
    
    If lComando2 <> 0 Then Call Comando_Fechar(lComando2)
    If lComando3 <> 0 Then Call Comando_Fechar(lComando3)
    
    Exit Function

End Function

Private Function EstoqueProduto_Atualiza_QuantEmpenhada(ByVal objItemMovEstoque As ClassItemMovEstoque, ByVal dQtdAtualizar As Double, ByVal iAlmoxarifado As Integer) As Long
'Atualiza a Quantidade Empenhada em Estoque Produto
'OBS: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim dQuantEmpenhada As Double
Dim sComando_SQL As String

On Error GoTo Erro_EstoqueProduto_Atualiza_QuantEmpenhada

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 69036
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 69037
    
    sComando_SQL = "SELECT QuantEmpenhada FROM EstoqueProduto WHERE Produto = ? AND Almoxarifado = ? "
    
    lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, dQuantEmpenhada, objItemMovEstoque.sProduto, iAlmoxarifado) 'Alterado por Wagner
    If lErro <> AD_SQL_SUCESSO Then gError 69038
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69039
    
    If lErro = AD_SQL_SUCESSO Then
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 69040
    
        sComando_SQL = "UPDATE EstoqueProduto SET QuantEmpenhada = QuantEmpenhada + ?, DataUltAtualizacao = ?, Exportado = ? "
        
'        If objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_DEV_MATERIAL_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO_BENEF3 Then
'            dQuantEmpenhada = objItemMovEstoque.dQuantidade
'        Else
'            dQuantEmpenhada = -objItemMovEstoque.dQuantidade
'        End If
'
'        lErro = Comando_ExecutarPos(lComando1, sComando_SQL, lComando, dQuantEmpenhada)
        lErro = Comando_ExecutarPos(lComando1, sComando_SQL, lComando, dQtdAtualizar, Date, 0) 'Alterado por Wagner 16/05/2006
        If lErro <> AD_SQL_SUCESSO Then gError 69041
        
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    EstoqueProduto_Atualiza_QuantEmpenhada = SUCESSO
    
    Exit Function
    
Erro_EstoqueProduto_Atualiza_QuantEmpenhada:

    EstoqueProduto_Atualiza_QuantEmpenhada = gErr
    
    Select Case gErr
        
        Case 69036, 69037
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 69038, 69039
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado)
        
        Case 69040
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEPRODUTO", gErr)
        
        Case 69041
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151807)

    End Select
        
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
            
    Exit Function
    
End Function

Function MovEstoque_ReqProducao_Grava1(ByVal lComando As Long, ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objItemMovEstoque As ClassItemMovEstoque) As Long
'Grava o Movimento de Estoque de Requisição de Produção
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim sComando_SQL As String
Dim lNumIntDoc As Long
Dim iSituacao As Integer

On Error GoTo Erro_MovEstoque_ReqProducao_Grava1

    If objItemMovEstoque.colItensRomaneioGrade.Count = 0 Then

        sComando_SQL = "SELECT NumIntDoc, Situacao FROM ItensOrdemProducao WHERE FilialEmpresa = ? AND Codigo = ? AND Produto = ?"
    
        'Le NumIntDoc do ItemOP a partir de giFilialEmpresa , OPCodigo , ProdutoOP
        lErro = Comando_ExecutarLockado(lComando, sComando_SQL, lNumIntDoc, iSituacao, giFilialEmpresa, objItemMovEstoque.sOPCodigo, objItemMovEstoque.sProdutoOP)
        If lErro <> AD_SQL_SUCESSO Then Error 34883
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34884
    
        If lErro = AD_SQL_SEM_DADOS Then
        
            sComando_SQL = "SELECT NumIntDoc FROM ItensOrdemProducaoBaixadas WHERE FilialEmpresa = ? AND Codigo = ? AND Produto = ?"
        
            'Verifica se a ordem de producao do item já está baixada ==> ordem de producao baixada
            lErro = Comando_Executar(lComando, sComando_SQL, lNumIntDoc, giFilialEmpresa, objItemMovEstoque.sOPCodigo, objItemMovEstoque.sProdutoOP)
            If lErro <> AD_SQL_SUCESSO Then Error 55279
        
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55280
        
            'OP baixada
            If lErro = AD_SQL_SUCESSO Then Error 55278
            
            'OP não cadastrada
            Error 34885
            
        End If
        
        If iSituacao = ITEMOP_SITUACAO_DESAB Then Error 55250
        
        If iSituacao = ITEMOP_SITUACAO_BAIXADA Then Error 55251
    
        'Faz lock shared em ItemOP
        lErro = Comando_LockShared(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 34886
    
        'Armazena lNumIntDoc em objItemMovEstoque.lNumIntDocOrigem
        objItemMovEstoque.lNumIntDocOrigem = lNumIntDoc
        objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMOP
    
        lErro = EmpenhoQtdRequisitada_Grava1(lComando1, lComando2, objItemMovEstoque)
        If lErro <> SUCESSO Then Error 55305
        
    End If

    MovEstoque_ReqProducao_Grava1 = SUCESSO

    Exit Function

Erro_MovEstoque_ReqProducao_Grava1:

    MovEstoque_ReqProducao_Grava1 = Err

    Select Case Err

        Case 34883, 34884
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDENSPRODUCAO", Err)

        Case 34885
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMOP_NAO_CADASTRADO", Err, objItemMovEstoque.sOPCodigo, objItemMovEstoque.sProdutoOP)

        Case 34886
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSORDENSDEPRODUCAO", Err)

        Case 55250
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMOP_SITUACAO_DESABILITADA", Err, objItemMovEstoque.sProdutoOP, objItemMovEstoque.sOPCodigo)

        Case 55251
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMOP_SITUACAO_BAIXADA", Err, objItemMovEstoque.sProdutoOP, objItemMovEstoque.sOPCodigo)

        Case 55278
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORDEMPRODUCAO_BAIXADA", Err, objItemMovEstoque.sOPCodigo)

        Case 55279, 55280
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDENSPRODUCAOBAIXADAS", Err)

        Case 55305

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151808)

    End Select

    Exit Function

End Function

Private Function MovEstoque_Producao_Grava1(alComando() As Long, ByVal objItemMovEstoque As ClassItemMovEstoque, ByVal colItemMovEst As colItensMovEstoque, Optional objReservaProd As ClassReservaProd) As Long
'Testa a producao do movimento de estoque

' *** Função corrigida em 09/08/2001 por Luiz G.F. Nogueira ***
' *** A correção foi feita para que ao excluir um movimento o
' sistema atualize a tabela ItensOrdemProducao corretamente ***

Dim sComando_SQL As String
Dim lErro As Long
Dim tItemOP As typeItemOP
Dim dFator As Double, dFator1 As Double
Dim dQuantConv As Double
Dim objProduto As New ClassProduto
Dim dQuantOP As Double
Dim objMovEstoque As New ClassMovEstoque
Dim objItemOP As New ClassItemOP
Dim objReservaItem As New ClassReservaItem
Dim sProduto As String

On Error GoTo Erro_MovEstoque_Producao_Grava1

    sProduto = objItemMovEstoque.sProduto

    If objItemMovEstoque.colItensRomaneioGrade.Count = 0 Then

        lErro = CF("Customiza_MovEst_Prod_Grava1", sProduto, objItemMovEstoque.iIndicePaiGrade, colItemMovEst)
        If lErro <> SUCESSO Then gError 117686

        tItemOP.sCodigo = String(STRING_ORDEM_DE_PRODUCAO, 0)
        tItemOP.sCcl = String(STRING_CCL, 0)
        tItemOP.sProduto = String(STRING_PRODUTO, 0)
        tItemOP.sSiglaUM = String(STRING_UM_SIGLA, 0)
    
        sComando_SQL = "SELECT NumIntDoc, FilialEmpresa, Codigo, Item, Produto, FilialPedido, CodPedido, NumIntOrigem, Almoxarifado, Beneficiamento, Ccl, SiglaUM, Quantidade, DataInicioProd, DataFimProd, Prioridade, " & _
        "QuantidadeProd, Situacao, Destinacao FROM ItensOrdemProducao WHERE FilialEmpresa = ? And Codigo = ? And Produto = ?"
    
        'Lê ItemOP da Tabela ItensOrdemProducao a partir de giFilialEmpresa , objItemMovEstoque.OPCodigo e objItemMovEstoque.Produto
        lErro = Comando_ExecutarPos(alComando(0), sComando_SQL, 0, tItemOP.lNumIntDoc, tItemOP.iFilialEmpresa, tItemOP.sCodigo, tItemOP.iItem, tItemOP.sProduto, tItemOP.iFilialPedido, tItemOP.lCodPedido, tItemOP.lNumIntOrigem, _
        tItemOP.iAlmoxarifado, tItemOP.iBeneficiamento, tItemOP.sCcl, tItemOP.sSiglaUM, tItemOP.dQuantidade, tItemOP.dtDataInicioProd, tItemOP.dtDataFimProd, tItemOP.iPrioridade, tItemOP.dQuantidadeProd, tItemOP.iSituacao, tItemOP.iDestinacao, giFilialEmpresa, objItemMovEstoque.sOPCodigo, sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 34680
    
        'Faz busca ao registro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 34681
    
        'Se não encontrou nenhum registro
        If lErro = AD_SQL_SEM_DADOS Then
    
            sComando_SQL = "SELECT NumIntDoc FROM ItensOrdemProducaoBaixadas WHERE FilialEmpresa = ? And Codigo = ? And Produto = ?"
    
            'Lê ItemOP da Tabela ItensOrdemProducaoBaixado a partir de giFilialEmpresa , objItemMovEstoque.OPCodigo e objItemMovEstoque.Produto
            lErro = Comando_Executar(alComando(0), sComando_SQL, tItemOP.lNumIntDoc, giFilialEmpresa, objItemMovEstoque.sOPCodigo, sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 55281
    
            'Faz busca ao registro
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 55282
    
            If lErro = AD_SQL_SUCESSO Then gError 55283
    
        Else
            objItemOP.lNumIntDoc = tItemOP.lNumIntDoc
            objItemOP.iFilialEmpresa = tItemOP.iFilialEmpresa
            objItemOP.sCodigo = tItemOP.sCodigo
            objItemOP.iItem = tItemOP.iItem
            objItemOP.sProduto = tItemOP.sProduto
            objItemOP.iFilialPedido = tItemOP.iFilialPedido
            objItemOP.lCodPedido = tItemOP.lCodPedido
            objItemOP.lNumIntOrigem = tItemOP.lNumIntOrigem
        
        End If
    
        If (objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO_BENEF3 Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_PRODUCAO_BENEF3) And tItemOP.iBeneficiamento = 0 Then gError 91280
    
        If (objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO) And tItemOP.iBeneficiamento = 1 Then gError 91281
    
        If tItemOP.iSituacao = ITEMOP_SITUACAO_DESAB Then gError 55252
    
        If tItemOP.iSituacao = ITEMOP_SITUACAO_BAIXADA Then gError 55253
    
    
        'If tItemOP.iAlmoxarifado <> objItemMovEstoque.iAlmoxarifado Then gError 55329
    
        'Lock no registro encontrado
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 34683
    
        'Armazena referencia p/ ItemOP em ItemMovEstoque
        objItemMovEstoque.lNumIntDocOrigem = tItemOP.lNumIntDoc
        objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMOP
    
        objProduto.sCodigo = objItemMovEstoque.sProduto
    
        'le a classe de UM de Estoque do produto
        lErro = CF("Produto_Le_ControleEstoque", alComando(11), objProduto)
        If lErro <> SUCESSO Then gError 55258
    
        'Converte as unidades de medida
        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemMovEstoque.sSiglaUM, tItemOP.sSiglaUM, dFator)
        If lErro <> SUCESSO Then gError 34684
    
        'Quantidade convertida para a UM de tItemOP
        dQuantConv = (objItemMovEstoque.dQuantidade * dFator)
    
        objMovEstoque.lCodigo = objItemMovEstoque.lCodigo
        objMovEstoque.iFilialEmpresa = giFilialEmpresa
    
        lErro = CF("MovEstoque_Le", objMovEstoque)
        If lErro <> SUCESSO And lErro <> 30128 Then gError 89868
    
        'se a produção não estiver cadastrada ou for um estorno ==> atualiza ItensOrdemProducao e se necessário EstoqueProduto (caso tenha trocado o almoxarifado)
        If lErro <> SUCESSO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_PRODUCAO_BENEF3 Then
    
            'Teste corrigido em 09/08/01
            If objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO_BENEF3 Or objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO_OUTROS Then
    
                'Se produziu o que foi ordenado baixa o item OP
                If (tItemOP.dQuantidade - tItemOP.dQuantidadeProd) <= dQuantConv Then
    
                    sComando_SQL = "UPDATE ItensOrdemProducao Set QuantidadeProd = QuantidadeProd + ?, Situacao = ?"
                    lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, alComando(0), dQuantConv, ITEMOP_SITUACAO_BAIXADA)
                    If lErro <> AD_SQL_SUCESSO Then gError 22925
    
                    lErro = CF("OrdemDeProducao_TrataBaixaItem", objItemOP, alComando)
                    If lErro <> SUCESSO Then gError 34702
    
                    objItemMovEstoque.dQuantidadeOP = (tItemOP.dQuantidade - tItemOP.dQuantidadeProd) / dFator
    
                'Se produziu menos que foi ordenado , acrescenta quantidade convertida
                ElseIf (tItemOP.dQuantidade - tItemOP.dQuantidadeProd) > dQuantConv Then
    
                    sComando_SQL = "UPDATE ItensOrdemProducao Set QuantidadeProd = QuantidadeProd + ?"
                    lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, alComando(0), dQuantConv)
                    If lErro <> AD_SQL_SUCESSO Then gError 34699
    
                    objItemMovEstoque.dQuantidadeOP = objItemMovEstoque.dQuantidade
    
                End If
                
                Set objReservaProd = New ClassReservaProd
            
                Set objReservaProd.objItemOP = objItemOP
                Set objReservaProd.objItemMovEst = objItemMovEstoque
                Set objReservaProd.objProduto = objProduto
                
                lErro = CF("ItemOPItemPV_Le2", objItemOP)
                If lErro <> SUCESSO Then gError 89868
                                
            Else 'estorno
    
                sComando_SQL = "UPDATE ItensOrdemProducao Set QuantidadeProd = QuantidadeProd - ?"
                lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, alComando(0), dQuantConv)
                If lErro <> AD_SQL_SUCESSO Then gError 22926
    
                objItemMovEstoque.dQuantidadeOP = objItemMovEstoque.dQuantidade
                
                'MOV_EST_ESTORNO_PRODUCAO = 16

    
            End If
    
            'se o almoxarifado que está dando entrada a produção for diferente do que foi ordenado na OP ==> atualiza a quantidade em op de estoque produto do almoxarifado da OP.
            If tItemOP.iAlmoxarifado <> objItemMovEstoque.iAlmoxarifado Then
    
                'se estiver produzindo em almoxarifado diferente da op ==> tem que tirar a quantidade em op do almoxarifado da op
                If objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO_BENEF3 Then objItemMovEstoque.dQuantidadeOP = -objItemMovEstoque.dQuantidadeOP
                
                'se estiver estornando a produção ==> tem que adicionar o material ao almoxarifado da op
                
                'Converte as unidades de medida da UM de Movimento de Estoque para a UM de Estoque
                lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemMovEstoque.sSiglaUM, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 83496
    
                'Quantidade convertida para a UM de Estoque
                dQuantOP = (objItemMovEstoque.dQuantidadeOP * dFator)
    
                'Atualiza a Quantidade em OP em Estoque Produto
                lErro = EstoqueProduto_Atualiza_QuantOP(tItemOP.sProduto, tItemOP.iAlmoxarifado, dQuantOP)
                If lErro <> SUCESSO Then gError 83495
    
                objItemMovEstoque.dQuantidadeOP = 0
    
            End If
    
        End If

    End If

    MovEstoque_Producao_Grava1 = SUCESSO

    Exit Function

Erro_MovEstoque_Producao_Grava1:

    MovEstoque_Producao_Grava1 = gErr

    Select Case gErr

        Case 22925, 34684, 34702, 55258, 83495, 83496, 89868, 92139, 117686

        Case 22926, 34699
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITENSORDENSDEPRODUCAO", gErr, tItemOP.iItem, tItemOP.sCodigo, tItemOP.iFilialEmpresa)

        Case 34680, 34681
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDENSPRODUCAO", gErr)

        Case 34682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEM_OP_NAO_CADASTRADO", gErr, objItemMovEstoque.sOPCodigo, objItemMovEstoque.sProduto)

        Case 34683
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSORDENSDEPRODUCAO", gErr)

        Case 55252
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMOP_SITUACAO_DESABILITADA", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.sOPCodigo)

        Case 55253
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMOP_SITUACAO_BAIXADA", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.sOPCodigo)

        Case 55281, 55282
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDENSPRODUCAOBAIXADAS", gErr)

        Case 55283
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORDEMPRODUCAO_BAIXADA", gErr, objItemMovEstoque.sOPCodigo)

        Case 55329
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOX_ITEMOP_PRODUCAO", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.iAlmoxarifado, tItemOP.iAlmoxarifado)
                
        Case 91280, 91281
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOV_PRODUCAO_BENEF3", gErr, objItemMovEstoque.sProduto, objItemMovEstoque.sOPCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151809)

    End Select

    Exit Function

End Function

Function InvLotePendente_Atualiza1(ByVal objInvLotePendente As ClassInvLote) As Long
'Atualiza o campo de InvLotePendente que indica o numero de lotes "NumItensAtual"

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim iNumItensAtual As Integer

On Error GoTo Erro_InvLotePendente_Atualiza1
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 52164
        
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 52165
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 52174
    
    'faz a atualização em InvLotePendente que indica o numero de lotes calculados "NumItensAtual"
    lErro = Comando_ExecutarPos(lComando1, "SELECT NumItensAtual FROM InvLotePendente WHERE Lote=? AND FilialEmpresa=? ", 0, iNumItensAtual, objInvLotePendente.iLote, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 52170
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 52171
    
    'lock do registro em questão
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 52172

    'Atualiza o  numero de itens Calculados
    lErro = Comando_ExecutarPos(lComando2, "UPDATE InvLotePendente SET NumItensAtual =?", lComando1, objInvLotePendente.iNumItensAtual)
    If lErro <> AD_SQL_SUCESSO Then Error 52173
        
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 52175
    
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    InvLotePendente_Atualiza1 = SUCESSO

    Exit Function

Erro_InvLotePendente_Atualiza1:

    InvLotePendente_Atualiza1 = Err

    Select Case Err

        Case 52164, 52165
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 52170, 52171, 52172
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVLOTEPENDENTE", Err)
            
        Case 52173
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_INVLOTEPENDENTE", Err, giFilialEmpresa, objInvLotePendente.iLote)
        
        Case 52174
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 52175
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
           
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151810)

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Function SldMesEstAlm_Atualiza_Mes(ByVal objTela As Object, ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer, ByVal objEstoque As ClassEstoqueMes) As Long
'Fecha o mes em questao e abre o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim vbMesRes As VbMsgBoxResult
Dim iAlmoxarifado As Integer
Dim sProduto As String

On Error GoTo Erro_SldMesEstAlm_Atualiza_Mes

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"
    DoEvents

'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 55995
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 55996

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 55997
    
    'preenche o sMes para que seja usado no select
    iMes = objEstoque.iMes
    sMes = CStr(iMes)

    'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE do status
    iMes2 = iMes + 1
    sMes2 = CStr(iMes2)
    
    lErro = Comando_Executar(lComando2, "UPDATE SldMesEstAlm SET Status" + sMes2 + " = ?, Status" + sMes + " = ? WHERE Ano = ? AND Almoxarifado IN (SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?)", SLDMESEST_STATUS_ABERTO_NAO_ALTERADO, SLDMESEST_STATUS_FECHADO, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60506
    
    DoEvents

    'Le os Almoxarifados da Filial em questão
'    lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?", iAlmoxarifado, objSldMesEst.iFilialEmpresa)
'    If lErro <> AD_SQL_SUCESSO Then Error 55998
'
'    lErro = Comando_BuscarPrimeiro(lComando1)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55999
'
'    Do While lErro = AD_SQL_SUCESSO
'
'        lErro = Comando_LockExclusive(lComando1)
'        If lErro <> AD_SQL_SUCESSO Then Error 60501
'
'        sProduto = String(STRING_PRODUTO, 0)
'
'        'Le os SldMesEstAlm do Almoxarifado em questão
'        lErro = Comando_ExecutarPos(lComando, "SELECT Produto FROM SldMesEstAlm Where Ano=? And Almoxarifado=?", 0, sProduto, objSldMesEst.iAno, iAlmoxarifado)
'        If lErro <> AD_SQL_SUCESSO Then Error 60502
'
'        'ler o registro
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60503
'
'        'enquanto existir um produto
'        Do While lErro = AD_SQL_SUCESSO
'
''            'lock do registro em questão
''            lErro = Comando_LockExclusive(lComando)
''            If lErro <> AD_SQL_SUCESSO Then Error 60505
'
'            'Altera os dados no BD
'            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEstAlm SET Status" + sMes2 + " = ?, Status" + sMes + " = ?", lComando, SLDMESEST_STATUS_ABERTO_NAO_ALTERADO, SLDMESEST_STATUS_FECHADO)
'            If lErro <> AD_SQL_SUCESSO Then Error 60506
'
'            'Joga o contador na tela
'            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
'
'            DoEvents
'
'            'verifica se foi cancelado o fechamento do mes
'            If iCancela = CANCELA Then
'
'                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES", iMes)
'
'                If vbMesRes = vbYes Then Error 60507
'
'                iCancela = CANCELA_BATCH
'
'            End If
'
'            'Busca o o proximo produto
'            lErro = Comando_BuscarProximo(lComando)
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60504
'
'        Loop
'
'        'Busca o o proximo produto
'        lErro = Comando_BuscarProximo(lComando1)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60500
'
'    Loop
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    SldMesEstAlm_Atualiza_Mes = SUCESSO

    Exit Function

Erro_SldMesEstAlm_Atualiza_Mes:

    SldMesEstAlm_Atualiza_Mes = Err

    Select Case Err
            
        Case 55995, 55996, 55997
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 55998, 55999, 60500
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", Err, objSldMesEst.iFilialEmpresa)

        Case 60501
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO1", Err, iAlmoxarifado)

        Case 60502, 60503, 60504
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM1", Err, objSldMesEst.iAno, iAlmoxarifado)

        Case 60505
            lErro = lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESESTALM", Err, objSldMesEst.iAno, iAlmoxarifado, sProduto)

        Case 60506
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOMES_SLDMESESTALM", Err, objSldMesEst.iAno, iMes, iAlmoxarifado, sProduto)
        
        Case 60507
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151811)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function SldMesEstAlm_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos/almoxarifado da Filial em questao

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst As typeSldMesEst
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult
Dim iAlmoxarifado As Integer

On Error GoTo Erro_SldMesEstAlm_Atualiza_Ano

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 60508

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60509
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 60510
'
'    lComando3 = Comando_Abrir()
'    If lComando3 = 0 Then Error 60511
    
    sComando_SQL = "INSERT INTO SldMesEstAlm (Ano, Almoxarifado, Produto, Status1, QuantInicial, QuantInicialCusto, ValorInicialCusto, "
    sComando_SQL = sComando_SQL & "QuantInicialRecIndl, ValorInicialRecIndl) "
    sComando_SQL = sComando_SQL & "(SELECT S.Ano + 1, S.Almoxarifado, S.Produto, 0 AS Status, "
    sComando_SQL = sComando_SQL & "QuantInicial + QuantEnt1 - QuantSai1 + QuantEnt2 - QuantSai2 + QuantEnt3 - QuantSai3 + QuantEnt4 - QuantSai4 + "
    sComando_SQL = sComando_SQL & "QuantEnt5 - QuantSai5 + QuantEnt6 - QuantSai6 + QuantEnt7 - QuantSai7 + QuantEnt8 - QuantSai8 + QuantEnt9 - QuantSai9 + "
    sComando_SQL = sComando_SQL & "QuantEnt10 - QuantSai10 + QuantEnt11 - QuantSai11 + QuantEnt12 - QuantSai12 AS Quantidade, "
    sComando_SQL = sComando_SQL & "QuantInicialCusto + SaldoQuantCusto1 + SaldoQuantCusto2 + SaldoQuantCusto3 + SaldoQuantCusto4 + SaldoQuantCusto5 + "
    sComando_SQL = sComando_SQL & "SaldoQuantCusto6  + SaldoQuantCusto7 + SaldoQuantCusto8 + SaldoQuantCusto9 + SaldoQuantCusto10 + "
    sComando_SQL = sComando_SQL & "SaldoQuantCusto11 + SaldoQuantCusto12 AS SaldoQuantCusto, "
    sComando_SQL = sComando_SQL & "ValorInicialCusto + SaldoValorCusto1 + SaldoValorCusto2 + SaldoValorCusto3 + SaldoValorCusto4 + SaldoValorCusto5 + "
    sComando_SQL = sComando_SQL & "SaldoValorCusto6 + SaldoValorCusto7 + SaldoValorCusto8 + SaldoValorCusto9 + SaldoValorCusto10 + "
    sComando_SQL = sComando_SQL & "SaldoValorCusto11 + SaldoValorCusto12 AS SaldoValorCusto, "
    sComando_SQL = sComando_SQL & "QuantInicialRecIndl + SaldoQuantRecIndl1 + SaldoQuantRecIndl2 + SaldoQuantRecIndl3 + SaldoQuantRecIndl4 + "
    sComando_SQL = sComando_SQL & "SaldoQuantRecIndl5 + SaldoQuantRecIndl6 + SaldoQuantRecIndl7 + SaldoQuantRecIndl8 + SaldoQuantRecIndl9 + "
    sComando_SQL = sComando_SQL & "SaldoQuantRecIndl10 + SaldoQuantRecIndl11 + SaldoQuantRecIndl12 AS SaldoQuantRecIndl, "
    sComando_SQL = sComando_SQL & "ValorInicialRecIndl + SaldoValorRecIndl1 + SaldoValorRecIndl2 + SaldoValorRecIndl3 + SaldoValorRecIndl4 + "
    sComando_SQL = sComando_SQL & "SaldoValorRecIndl5 + SaldoValorRecIndl6 + SaldoValorRecIndl7 + SaldoValorRecIndl8 + SaldoValorRecIndl9 + "
    sComando_SQL = sComando_SQL & "SaldoValorRecIndl10 + SaldoValorRecIndl11 + SaldoValorRecIndl12 AS SaldoValorRecIndl "
    sComando_SQL = sComando_SQL & "FROM SldMesEstAlm As S, Almoxarifado As A "
    sComando_SQL = sComando_SQL & "WHERE S.Ano =? And S.Almoxarifado = A.Codigo AND A.FilialEmpresa = ?) "

    'Insere todos registros de uma vez só para o próximo ano
    lErro = Comando_Executar(lComando1, sComando_SQL, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60520
    
    sComando_SQL = "UPDATE SldMesEstAlm SET Status12 = ? WHERE Ano = ? AND Almoxarifado IN (SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa = ?)"
    
    'Altera o status do mês fechado
    lErro = Comando_Executar(lComando2, sComando_SQL, SLDMESEST_STATUS_FECHADO, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60521

'    'Le os Almoxarifados da Filial em questão
'    lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?", iAlmoxarifado, objSldMesEst.iFilialEmpresa)
'    If lErro <> AD_SQL_SUCESSO Then Error 60512
'
'    lErro = Comando_BuscarPrimeiro(lComando1)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60513
'
'    Do While lErro = AD_SQL_SUCESSO
'
'        lErro = Comando_LockExclusive(lComando1)
'        If lErro <> AD_SQL_SUCESSO Then Error 60515
'
'        tSldMesEst.sProduto = String(STRING_PRODUTO, 0)
'
'        'forma o comando do SQL
'        sComando_SQL = "SELECT Ano, Produto, QuantInicial, ValorInicial, QuantEnt1, QuantSai1, QuantEnt2, QuantSai2, QuantEnt3, QuantSai3, QuantEnt4, QuantSai4, QuantEnt5, QuantSai5, QuantEnt6, QuantSai6, QuantEnt7, QuantSai7, QuantEnt8, QuantSai8, QuantEnt9, QuantSai9, QuantEnt10, QuantSai10, QuantEnt11, QuantSai11, QuantEnt12, QuantSai12, ValorEnt1, ValorSai1, ValorEnt2, ValorSai2, ValorEnt3, ValorSai3, ValorEnt4, ValorSai4, ValorEnt5, ValorSai5, ValorEnt6, ValorSai6, ValorEnt7, ValorSai7, ValorEnt8, ValorSai8, ValorEnt9, ValorSai9, ValorEnt10, ValorSai10, ValorEnt11, ValorSai11, ValorEnt12, ValorSai12, " & _
'        "QuantInicialCusto, ValorInicialCusto, SaldoQuantCusto1, SaldoQuantCusto2, SaldoQuantCusto3, SaldoQuantCusto4, SaldoQuantCusto5, SaldoQuantCusto6, SaldoQuantCusto7, SaldoQuantCusto8, SaldoQuantCusto9, SaldoQuantCusto10, SaldoQuantCusto11, SaldoQuantCusto12, SaldoValorCusto1, SaldoValorCusto2, SaldoValorCusto3, SaldoValorCusto4, SaldoValorCusto5, SaldoValorCusto6, SaldoValorCusto7, SaldoValorCusto8, SaldoValorCusto9, SaldoValorCusto10, SaldoValorCusto11, SaldoValorCusto12, " & _
'                    "QuantInicialRecIndl, ValorInicialRecIndl, SaldoQuantRecIndl1, SaldoQuantRecIndl2, SaldoQuantRecIndl3, SaldoQuantRecIndl4, SaldoQuantRecIndl5, SaldoQuantRecIndl6, SaldoQuantRecIndl7, SaldoQuantRecIndl8, SaldoQuantRecIndl9, SaldoQuantRecIndl10, SaldoQuantRecIndl11, SaldoQuantRecIndl12, " & _
'                    "SaldoValorRecIndl1, SaldoValorRecIndl2, SaldoValorRecIndl3, SaldoValorRecIndl4, SaldoValorRecIndl5, SaldoValorRecIndl6, SaldoValorRecIndl7, SaldoValorRecIndl8, SaldoValorRecIndl9, SaldoValorRecIndl10, SaldoValorRecIndl11, SaldoValorRecIndl12 " & _
'                    " FROM SldMesEstAlm WHERE Ano =? And Almoxarifado =? "
'
'        'Le os registros do ano que está sendo fechado
'        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst.iAno, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.adQuantEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adQuantEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adQuantEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adQuantEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adQuantSai(12), _
'                                tSldMesEst.adValorEnt(1), tSldMesEst.adValorSai(1), tSldMesEst.adValorEnt(2), tSldMesEst.adValorSai(2), tSldMesEst.adValorEnt(3), tSldMesEst.adValorSai(3), tSldMesEst.adValorEnt(4), tSldMesEst.adValorSai(4), tSldMesEst.adValorEnt(5), tSldMesEst.adValorSai(5), tSldMesEst.adValorEnt(6), tSldMesEst.adValorSai(6), tSldMesEst.adValorEnt(7), tSldMesEst.adValorSai(7), tSldMesEst.adValorEnt(8), tSldMesEst.adValorSai(8), tSldMesEst.adValorEnt(9), tSldMesEst.adValorSai(9), tSldMesEst.adValorEnt(10), tSldMesEst.adValorSai(10), tSldMesEst.adValorEnt(11), tSldMesEst.adValorSai(11), tSldMesEst.adValorEnt(12), tSldMesEst.adValorSai(12), _
'                                tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoQuantCusto(12), _
'                                tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adSaldoValorCusto(12), _
'                                tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl, tSldMesEst.adSaldoQuantRecIndl(1), tSldMesEst.adSaldoQuantRecIndl(2), tSldMesEst.adSaldoQuantRecIndl(3), tSldMesEst.adSaldoQuantRecIndl(4), tSldMesEst.adSaldoQuantRecIndl(5), tSldMesEst.adSaldoQuantRecIndl(6), tSldMesEst.adSaldoQuantRecIndl(7), tSldMesEst.adSaldoQuantRecIndl(8), tSldMesEst.adSaldoQuantRecIndl(9), tSldMesEst.adSaldoQuantRecIndl(10), tSldMesEst.adSaldoQuantRecIndl(11), tSldMesEst.adSaldoQuantRecIndl(12), _
'                                tSldMesEst.adSaldoValorRecIndl(1), tSldMesEst.adSaldoValorRecIndl(2), tSldMesEst.adSaldoValorRecIndl(3), tSldMesEst.adSaldoValorRecIndl(4), tSldMesEst.adSaldoValorRecIndl(5), tSldMesEst.adSaldoValorRecIndl(6), tSldMesEst.adSaldoValorRecIndl(7), tSldMesEst.adSaldoValorRecIndl(8), tSldMesEst.adSaldoValorRecIndl(9), tSldMesEst.adSaldoValorRecIndl(10), tSldMesEst.adSaldoValorRecIndl(11), tSldMesEst.adSaldoValorRecIndl(12), _
'                                objSldMesEst.iAno, iAlmoxarifado)
'
'        If lErro <> AD_SQL_SUCESSO Then Error 60516
'
'        'Busca o primeiro produto
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60517
'
'        Do While lErro = AD_SQL_SUCESSO
'
''            'lock do registro em questão
''            lErro = Comando_LockExclusive(lComando)
''            If lErro <> AD_SQL_SUCESSO Then Error 60519
'
'            'soma um a ano para que seja criado outro ano
'            tSldMesEst.iAno = tSldMesEst.iAno + 1
'
'            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
'            For iIndice = 1 To 12
'
'                tSldMesEst.dQuantInicial = tSldMesEst.dQuantInicial + tSldMesEst.adQuantEnt(iIndice) - tSldMesEst.adQuantSai(iIndice)
'                tSldMesEst.dQuantInicialCusto = tSldMesEst.dQuantInicialCusto + tSldMesEst.adSaldoQuantCusto(iIndice)
'                tSldMesEst.dValorInicialCusto = tSldMesEst.dValorInicialCusto + tSldMesEst.adSaldoValorCusto(iIndice)
'                tSldMesEst.dQuantInicialRecIndl = tSldMesEst.dQuantInicialRecIndl + tSldMesEst.adSaldoQuantRecIndl(iIndice)
'                tSldMesEst.dValorInicialRecIndl = tSldMesEst.dValorInicialRecIndl + tSldMesEst.adSaldoValorRecIndl(iIndice)
'            Next
'
'            'Altera o status do mes 12 no Bd
'            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEstAlm SET Status12 = ?", lComando, SLDMESEST_STATUS_FECHADO)
'            If lErro <> AD_SQL_SUCESSO Then Error 60521
'
'            'Insere os dados no BD
'            lErro = Comando_Executar(lComando3, "INSERT INTO SldMesEstAlm (Ano, Almoxarifado, Produto, QuantInicial, QuantInicialCusto, ValorInicialCusto, Status1, QuantInicialRecIndl, ValorInicialRecIndl) VALUES (?,?,?,?,?,?,?,?,?)", tSldMesEst.iAno, iAlmoxarifado, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, SLDMESEST_STATUS_ABERTO_NAO_ALTERADO, tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl)
'            If lErro <> AD_SQL_SUCESSO Then Error 60520
'
'            'Joga o contador na tela
'            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
'
'            DoEvents
'
'            'verifica se foi cancelado o fechamento do mes
'            If iCancela = CANCELA Then
'
'                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
'
'                If vbMesRes = vbYes Then Error 60522
'
'                iCancela = CANCELA_BATCH
'
'            End If
'
'            'Busca o proximo produto
'            lErro = Comando_BuscarProximo(lComando)
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60518
'
'        Loop
'
'        'Busca o o proximo produto
'        lErro = Comando_BuscarProximo(lComando1)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60514
'
'    Loop
            
    'Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    'Call Comando_Fechar(lComando3)

    SldMesEstAlm_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEstAlm_Atualiza_Ano:

    SldMesEstAlm_Atualiza_Ano = Err

    Select Case Err
            
        Case 60508, 60509, 60510, 60511
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60512, 60513, 60514
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", Err, objSldMesEst.iFilialEmpresa)

        Case 60515
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO1", Err, iAlmoxarifado)

        Case 60516, 60517, 60518
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM1", Err, objSldMesEst.iAno, iAlmoxarifado)

        Case 60519
            lErro = lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESESTALM", Err, tSldMesEst.iAno, iAlmoxarifado, tSldMesEst.sProduto)

        Case 60520
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOANO_SDLMESESTALM", Err, tSldMesEst.iAno, tSldMesEst.sProduto, iAlmoxarifado)

        Case 60521
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESESTALM", Err, tSldMesEst.iAno, iAlmoxarifado, tSldMesEst.sProduto)
        
        Case 60522
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151812)

    End Select

    'Fechamento comando
    'Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    'Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function SldMesEstAlm_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Acerta os saldos iniciais do proximo ano para os produtos/almoxarifado da Filial em questao

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst As typeSldMesEst
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult
Dim iAlmoxarifado As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesEstAlm_Atualiza_Ano_Reproc

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 83697

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 83698
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 83699

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 83700

    'Le os Almoxarifados da Filial em questão
    lErro = Comando_Executar(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?", iAlmoxarifado, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 83701

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83702

    Do While lErro = AD_SQL_SUCESSO

        tSldMesEst.sProduto = String(STRING_PRODUTO, 0)
        
        If objSldMesEst.sProduto = "" Then
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicial, ValorInicial, QuantEnt1, QuantSai1, QuantEnt2, QuantSai2, QuantEnt3, QuantSai3, QuantEnt4, QuantSai4, QuantEnt5, QuantSai5, QuantEnt6, QuantSai6, QuantEnt7, QuantSai7, QuantEnt8, QuantSai8, QuantEnt9, QuantSai9, QuantEnt10, QuantSai10, QuantEnt11, QuantSai11, QuantEnt12, QuantSai12, ValorEnt1, ValorSai1, ValorEnt2, ValorSai2, ValorEnt3, ValorSai3, ValorEnt4, ValorSai4, ValorEnt5, ValorSai5, ValorEnt6, ValorSai6, ValorEnt7, ValorSai7, ValorEnt8, ValorSai8, ValorEnt9, ValorSai9, ValorEnt10, ValorSai10, ValorEnt11, ValorSai11, ValorEnt12, ValorSai12, " & _
            "QuantInicialCusto, ValorInicialCusto, SaldoQuantCusto1, SaldoQuantCusto2, SaldoQuantCusto3, SaldoQuantCusto4, SaldoQuantCusto5, SaldoQuantCusto6, SaldoQuantCusto7, SaldoQuantCusto8, SaldoQuantCusto9, SaldoQuantCusto10, SaldoQuantCusto11, SaldoQuantCusto12, SaldoValorCusto1, SaldoValorCusto2, SaldoValorCusto3, SaldoValorCusto4, SaldoValorCusto5, SaldoValorCusto6, SaldoValorCusto7, SaldoValorCusto8, SaldoValorCusto9, SaldoValorCusto10, SaldoValorCusto11, SaldoValorCusto12, " & _
            "QuantInicialRecIndl, ValorInicialRecIndl, SaldoQuantRecIndl1, SaldoQuantRecIndl2, SaldoQuantRecIndl3, SaldoQuantRecIndl4, SaldoQuantRecIndl5, SaldoQuantRecIndl6, SaldoQuantRecIndl7, SaldoQuantRecIndl8, SaldoQuantRecIndl9, SaldoQuantRecIndl10, SaldoQuantRecIndl11, SaldoQuantRecIndl12, " & _
            "SaldoValorRecIndl1, SaldoValorRecIndl2, SaldoValorRecIndl3, SaldoValorRecIndl4, SaldoValorRecIndl5, SaldoValorRecIndl6, SaldoValorRecIndl7, SaldoValorRecIndl8, SaldoValorRecIndl9, SaldoValorRecIndl10, SaldoValorRecIndl11, SaldoValorRecIndl12 " & _
            " FROM SldMesEstAlm WHERE Ano =? And Almoxarifado =? "
            
            'Le os registros do ano que está sendo fechado
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst.iAno, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.adQuantEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adQuantEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adQuantEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adQuantEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adQuantSai(12), _
                                    tSldMesEst.adValorEnt(1), tSldMesEst.adValorSai(1), tSldMesEst.adValorEnt(2), tSldMesEst.adValorSai(2), tSldMesEst.adValorEnt(3), tSldMesEst.adValorSai(3), tSldMesEst.adValorEnt(4), tSldMesEst.adValorSai(4), tSldMesEst.adValorEnt(5), tSldMesEst.adValorSai(5), tSldMesEst.adValorEnt(6), tSldMesEst.adValorSai(6), tSldMesEst.adValorEnt(7), tSldMesEst.adValorSai(7), tSldMesEst.adValorEnt(8), tSldMesEst.adValorSai(8), tSldMesEst.adValorEnt(9), tSldMesEst.adValorSai(9), tSldMesEst.adValorEnt(10), tSldMesEst.adValorSai(10), tSldMesEst.adValorEnt(11), tSldMesEst.adValorSai(11), tSldMesEst.adValorEnt(12), tSldMesEst.adValorSai(12), _
                                    tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoQuantCusto(12), _
                                    tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adSaldoValorCusto(12), _
                                    tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl, tSldMesEst.adSaldoQuantRecIndl(1), tSldMesEst.adSaldoQuantRecIndl(2), tSldMesEst.adSaldoQuantRecIndl(3), tSldMesEst.adSaldoQuantRecIndl(4), tSldMesEst.adSaldoQuantRecIndl(5), tSldMesEst.adSaldoQuantRecIndl(6), tSldMesEst.adSaldoQuantRecIndl(7), tSldMesEst.adSaldoQuantRecIndl(8), tSldMesEst.adSaldoQuantRecIndl(9), tSldMesEst.adSaldoQuantRecIndl(10), tSldMesEst.adSaldoQuantRecIndl(11), tSldMesEst.adSaldoQuantRecIndl(12), _
                                    tSldMesEst.adSaldoValorRecIndl(1), tSldMesEst.adSaldoValorRecIndl(2), tSldMesEst.adSaldoValorRecIndl(3), tSldMesEst.adSaldoValorRecIndl(4), tSldMesEst.adSaldoValorRecIndl(5), tSldMesEst.adSaldoValorRecIndl(6), tSldMesEst.adSaldoValorRecIndl(7), tSldMesEst.adSaldoValorRecIndl(8), tSldMesEst.adSaldoValorRecIndl(9), tSldMesEst.adSaldoValorRecIndl(10), tSldMesEst.adSaldoValorRecIndl(11), tSldMesEst.adSaldoValorRecIndl(12), _
                                    objSldMesEst.iAno, iAlmoxarifado)
        Else
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicial, ValorInicial, QuantEnt1, QuantSai1, QuantEnt2, QuantSai2, QuantEnt3, QuantSai3, QuantEnt4, QuantSai4, QuantEnt5, QuantSai5, QuantEnt6, QuantSai6, QuantEnt7, QuantSai7, QuantEnt8, QuantSai8, QuantEnt9, QuantSai9, QuantEnt10, QuantSai10, QuantEnt11, QuantSai11, QuantEnt12, QuantSai12, ValorEnt1, ValorSai1, ValorEnt2, ValorSai2, ValorEnt3, ValorSai3, ValorEnt4, ValorSai4, ValorEnt5, ValorSai5, ValorEnt6, ValorSai6, ValorEnt7, ValorSai7, ValorEnt8, ValorSai8, ValorEnt9, ValorSai9, ValorEnt10, ValorSai10, ValorEnt11, ValorSai11, ValorEnt12, ValorSai12, " & _
            "QuantInicialCusto, ValorInicialCusto, SaldoQuantCusto1, SaldoQuantCusto2, SaldoQuantCusto3, SaldoQuantCusto4, SaldoQuantCusto5, SaldoQuantCusto6, SaldoQuantCusto7, SaldoQuantCusto8, SaldoQuantCusto9, SaldoQuantCusto10, SaldoQuantCusto11, SaldoQuantCusto12, SaldoValorCusto1, SaldoValorCusto2, SaldoValorCusto3, SaldoValorCusto4, SaldoValorCusto5, SaldoValorCusto6, SaldoValorCusto7, SaldoValorCusto8, SaldoValorCusto9, SaldoValorCusto10, SaldoValorCusto11, SaldoValorCusto12, " & _
            "QuantInicialRecIndl, ValorInicialRecIndl, SaldoQuantRecIndl1, SaldoQuantRecIndl2, SaldoQuantRecIndl3, SaldoQuantRecIndl4, SaldoQuantRecIndl5, SaldoQuantRecIndl6, SaldoQuantRecIndl7, SaldoQuantRecIndl8, SaldoQuantRecIndl9, SaldoQuantRecIndl10, SaldoQuantRecIndl11, SaldoQuantRecIndl12, " & _
            "SaldoValorRecIndl1, SaldoValorRecIndl2, SaldoValorRecIndl3, SaldoValorRecIndl4, SaldoValorRecIndl5, SaldoValorRecIndl6, SaldoValorRecIndl7, SaldoValorRecIndl8, SaldoValorRecIndl9, SaldoValorRecIndl10, SaldoValorRecIndl11, SaldoValorRecIndl12 " & _
            " FROM SldMesEstAlm WHERE Ano =? And Almoxarifado =? AND Produto = ?"
            
            'Le os registros do ano que está sendo fechado
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst.iAno, tSldMesEst.sProduto, tSldMesEst.dQuantInicial, tSldMesEst.dValorInicial, tSldMesEst.adQuantEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adQuantEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adQuantEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adQuantEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adQuantSai(12), _
                                    tSldMesEst.adValorEnt(1), tSldMesEst.adValorSai(1), tSldMesEst.adValorEnt(2), tSldMesEst.adValorSai(2), tSldMesEst.adValorEnt(3), tSldMesEst.adValorSai(3), tSldMesEst.adValorEnt(4), tSldMesEst.adValorSai(4), tSldMesEst.adValorEnt(5), tSldMesEst.adValorSai(5), tSldMesEst.adValorEnt(6), tSldMesEst.adValorSai(6), tSldMesEst.adValorEnt(7), tSldMesEst.adValorSai(7), tSldMesEst.adValorEnt(8), tSldMesEst.adValorSai(8), tSldMesEst.adValorEnt(9), tSldMesEst.adValorSai(9), tSldMesEst.adValorEnt(10), tSldMesEst.adValorSai(10), tSldMesEst.adValorEnt(11), tSldMesEst.adValorSai(11), tSldMesEst.adValorEnt(12), tSldMesEst.adValorSai(12), _
                                    tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoQuantCusto(12), _
                                    tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adSaldoValorCusto(12), _
                                    tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl, tSldMesEst.adSaldoQuantRecIndl(1), tSldMesEst.adSaldoQuantRecIndl(2), tSldMesEst.adSaldoQuantRecIndl(3), tSldMesEst.adSaldoQuantRecIndl(4), tSldMesEst.adSaldoQuantRecIndl(5), tSldMesEst.adSaldoQuantRecIndl(6), tSldMesEst.adSaldoQuantRecIndl(7), tSldMesEst.adSaldoQuantRecIndl(8), tSldMesEst.adSaldoQuantRecIndl(9), tSldMesEst.adSaldoQuantRecIndl(10), tSldMesEst.adSaldoQuantRecIndl(11), tSldMesEst.adSaldoQuantRecIndl(12), _
                                    tSldMesEst.adSaldoValorRecIndl(1), tSldMesEst.adSaldoValorRecIndl(2), tSldMesEst.adSaldoValorRecIndl(3), tSldMesEst.adSaldoValorRecIndl(4), tSldMesEst.adSaldoValorRecIndl(5), tSldMesEst.adSaldoValorRecIndl(6), tSldMesEst.adSaldoValorRecIndl(7), tSldMesEst.adSaldoValorRecIndl(8), tSldMesEst.adSaldoValorRecIndl(9), tSldMesEst.adSaldoValorRecIndl(10), tSldMesEst.adSaldoValorRecIndl(11), tSldMesEst.adSaldoValorRecIndl(12), _
                                    objSldMesEst.iAno, iAlmoxarifado, objSldMesEst.sProduto)
        
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 83703
        
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83704
        
        Do While lErro = AD_SQL_SUCESSO
        
            'soma um a ano para que seja criado outro ano
            tSldMesEst.iAno = tSldMesEst.iAno + 1
            
            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
            For iIndice = 1 To 12
        
                tSldMesEst.dQuantInicial = tSldMesEst.dQuantInicial + tSldMesEst.adQuantEnt(iIndice) - tSldMesEst.adQuantSai(iIndice)
                tSldMesEst.dQuantInicialCusto = tSldMesEst.dQuantInicialCusto + tSldMesEst.adSaldoQuantCusto(iIndice)
                tSldMesEst.dValorInicialCusto = tSldMesEst.dValorInicialCusto + tSldMesEst.adSaldoValorCusto(iIndice)
                tSldMesEst.dQuantInicialRecIndl = tSldMesEst.dQuantInicialRecIndl + tSldMesEst.adSaldoQuantRecIndl(iIndice)
                tSldMesEst.dValorInicialRecIndl = tSldMesEst.dValorInicialRecIndl + tSldMesEst.adSaldoValorRecIndl(iIndice)
        
            Next
            
            'Le os registros do ano que está sendo fechado
            lErro = Comando_ExecutarPos(lComando2, "SELECT Ano FROM SldMesEstAlm WHERE Ano =? AND Almoxarifado =? AND Produto = ?", 0, iAno, tSldMesEst.iAno, iAlmoxarifado, tSldMesEst.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 83705
            
            'Busca o primeiro produto
            lErro = Comando_BuscarPrimeiro(lComando2)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83706
        
            If lErro = AD_SQL_SUCESSO Then
        
                'Insere os dados no BD
                lErro = Comando_ExecutarPos(lComando3, "UPDATE SldMesEstAlm SET QuantInicial = ?, QuantInicialCusto = ?, ValorInicialCusto = ?, QuantInicialRecIndl = ?, ValorInicialRecIndl = ?", lComando2, tSldMesEst.dQuantInicial, tSldMesEst.dQuantInicialCusto, tSldMesEst.dValorInicialCusto, tSldMesEst.dQuantInicialRecIndl, tSldMesEst.dValorInicialRecIndl)
                If lErro <> AD_SQL_SUCESSO Then gError 83707
            
            End If
            
            'Busca o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83708
        
        Loop
            
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83709
            
    Loop
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    SldMesEstAlm_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEstAlm_Atualiza_Ano_Reproc:

    SldMesEstAlm_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83697, 83698, 83699, 83700
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83701, 83702, 83709
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", gErr, objSldMesEst.iFilialEmpresa)

        Case 83703, 83704, 83708
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM1", gErr, objSldMesEst.iAno, iAlmoxarifado)

        Case 83705, 83706
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM", gErr, tSldMesEst.iAno, iAlmoxarifado, tSldMesEst.sProduto)

        Case 83707
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESESTALM", gErr, tSldMesEst.iAno, iAlmoxarifado, tSldMesEst.sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151813)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function TabelaPrecoItem_Atualiza_TabelaPadrao(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objTabelaPrecoItem As ClassTabelaPrecoItem, ByVal iStatusOpItem As Integer) As Long
'Atualiza o campo que guarda a Tabela preco default.

Dim lErro As Long
Dim iTabelaDefault As Integer
Dim iTabelaPadrao As Integer
Dim objProduto As New ClassProduto

On Error GoTo Erro_TabelaPrecoItem_Atualiza_TabelaPadrao
    
    'Se o usuário não estiver a nível de empresa toda
    If objTabelaPrecoItem.iFilialEmpresa <> EMPRESA_TODA Then
        'Busca na tabela produtos Filial a Tabela default
        lErro = Comando_ExecutarPos(lComando, "SELECT TabelaPreco FROM ProdutosFilial WHERE FilialEmpresa = ? AND Produto = ?", 0, iTabelaDefault, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.sCodProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 62082
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62083
'        If lErro <> AD_SQL_SUCESSO Then Error 62084

        If lErro = AD_SQL_SUCESSO Then
        
            'Se ele foi selecionado p\ ser o padrão
            If objTabelaPrecoItem.iTabelaDefault = Padrao Then
                'Guarda o seu código
                iTabelaPadrao = objTabelaPrecoItem.iCodTabela
            'SEnão
            ElseIf objTabelaPrecoItem.iTabelaDefault = NAO_PADRAO Then
                'Zera o código
                iTabelaPadrao = 0
            End If
            
            If iStatusOpItem = EXCLUIDO Then iTabelaPadrao = 0
            
            'Atualiza a tabela de preço default
            lErro = Comando_ExecutarPos(lComando1, "UPDATE ProdutosFilial SET TabelaPreco = ?", lComando, iTabelaPadrao)
            If lErro <> AD_SQL_SUCESSO Then Error 62085
            
        End If
        
    Else
        
        objProduto.sCodigo = objTabelaPrecoItem.sCodProduto
        'Faz o lock no produto
        lErro = CF("Produto_Lock1", lComando, objProduto)
        If lErro <> SUCESSO Then Error 62086
        
        'Se a tab foi selecionada como padrão
        If (objTabelaPrecoItem.iTabelaDefault = Padrao And iStatusOpItem = NAO_EXCLUIDO) Or (objProduto.iTabelaPreco = 0 And iStatusOpItem = NAO_EXCLUIDO) Then
            iTabelaPadrao = objTabelaPrecoItem.iCodTabela
'            If objProduto.iTabelaPreco = 0 And objTabelaPrecoItem.iTabelaDefault = NAO_PADRAO Then Call Rotina_Aviso(vbOKOnly, "AVISO_TABELA_TELA_PADRAO")
        'Se foi desselecionada
        ElseIf objProduto.iTabelaPreco = objTabelaPrecoItem.iCodTabela And iStatusOpItem = NAO_EXCLUIDO And objTabelaPrecoItem.iTabelaDefault = NAO_PADRAO Then
            'Erro. Não se pode demarcar a tabela padrão sem escolher outra.
            iTabelaPadrao = 0
        ElseIf objProduto.iTabelaPreco = objTabelaPrecoItem.iCodTabela And iStatusOpItem = EXCLUIDO Then
            
            lErro = Comando_Executar(lComando1, "SELECT CodTabela FROM TabelasDePrecoItens WHERE FilialEmpresa = ? AND CodProduto = ? AND CodTabela <> ?", iTabelaDefault, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.iCodTabela)
            If lErro <> AD_SQL_SUCESSO Then Error 62089
        
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62090
            If lErro = AD_SQL_SUCESSO Then
                iTabelaPadrao = iTabelaDefault
            Else
                iTabelaPadrao = 0
            End If
              
        End If
            
        lErro = Comando_ExecutarPos(lComando1, "UPDATE Produtos SET TabelaPreco = ? ", lComando, iTabelaPadrao)
        If lErro <> AD_SQL_SUCESSO Then Error 62088
    End If
        
    TabelaPrecoItem_Atualiza_TabelaPadrao = SUCESSO
    
    Exit Function
    
Erro_TabelaPrecoItem_Atualiza_TabelaPadrao:

    TabelaPrecoItem_Atualiza_TabelaPadrao = Err
    
    Select Case Err
    
        Case 62082, 62083
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", Err, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.sCodProduto)
        
        Case 62084 '??? Perguntar ao Jaques
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILIAL_INEXISTENTE", Err, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.iFilialEmpresa)
            
        Case 62085
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", Err, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.sCodProduto)
        
        Case 62086
        
        Case 62087
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TABELAPRECO_PADRAO", Err)
        
        Case 62088
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOS", Err, objTabelaPrecoItem.sCodProduto)
        
        Case 62089, 62090
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151814)
            
    End Select
        
    Exit Function
        
End Function


Function Preenche_ProdutoFilial_Default(ByVal objProduto As ClassProduto, ByVal objProdutoFilial As ClassProdutoFilial, iControleEstoque As Integer) As Long
'Preenche valores default para Insercao do Produto em ProdutoFilial

Dim lErro As Long
Dim objTipoProduto As New ClassTipoDeProduto

On Error GoTo Erro_Preenche_ProdutoFilial_Default
    
    objProdutoFilial.sProduto = objProduto.sCodigo
    objProdutoFilial.dEstoqueMaximo = 0
    objProdutoFilial.dEstoqueSeguranca = 0
    objProdutoFilial.dLoteEconomico = 0
    objProdutoFilial.dPontoPedido = 0
    objProdutoFilial.iFilialEmpresa = giFilialEmpresa
    objProdutoFilial.sSituacaoTribECF = objProduto.sSituacaoTribECF
    objProdutoFilial.sICMSAliquota = objProduto.sICMSAliquota
    
    If objProduto.iControleEstoque = 0 Then
        
        If objProduto.iTipo <> 0 Then
    
            objTipoProduto.iTipo = objProduto.iTipo
            'ler e bloquear o tipo de produto
            lErro = CF("TipoDeProduto_Lock", objTipoProduto)
            If lErro <> SUCESSO Then Error 26972
            
            lErro = CF("TipoDeProduto_Le", objTipoProduto)
            If lErro <> SUCESSO Then Error 26972
    
            iControleEstoque = objTipoProduto.iControleEstoque
            objProdutoFilial.dTempoRessupMax = objTipoProduto.dTempoRessupMax
            objProdutoFilial.dConsumoMedioMax = objTipoProduto.dConsumoMedioMax
            objProdutoFilial.iIntRessup = objTipoProduto.iIntRessup
            objProdutoFilial.iMesesConsumoMedio = objTipoProduto.iMesesConsumoMedio
            
        End If
        
        If iControleEstoque = 0 Then iControleEstoque = PRODUTO_CONTROLE_RESERVA
    
    Else
        iControleEstoque = objProduto.iControleEstoque
    End If
    
    If objProduto.iCompras = PRODUTO_PRODUZIVEL Then objProdutoFilial.iProdNaFilial = MARCADO
    
    If objProduto.iGerencial = PRODUTO_GERENCIAL Then iControleEstoque = PRODUTO_CONTROLE_SEM_ESTOQUE

    Preenche_ProdutoFilial_Default = SUCESSO
    
    Exit Function
    
Erro_Preenche_ProdutoFilial_Default:

    Preenche_ProdutoFilial_Default = Err
    
    Select Case Err
        
        Case 26972
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151815)

    End Select
                
    Exit Function

End Function

Function Produto_Grava_Light(ByVal objProduto As ClassProduto, ByVal colTabelaPrecoItem As Collection, ByVal objProdutoFilial As ClassProdutoFilial, iControleEstoque As Integer) As Long
'Grava ou Alterar o Produto da versão light passado

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Produto_Grava_Light

    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61203
    
    'Grava o Produto
    lErro = CF("Produto_Grava_Trans", objProduto, colTabelaPrecoItem)
    If lErro <> SUCESSO Then Error 61204
        
    'Se o Produto não for Gerencial
    If objProduto.iGerencial <> PRODUTO_GERENCIAL Then
        
        'Grava o controle de Estoque
        lErro = CF("Estoque_Grava1", objProdutoFilial, iControleEstoque)
        If lErro <> SUCESSO Then Error 61205
    
    End If
    
    'Faz o commit da transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61206
    
    Produto_Grava_Light = SUCESSO

    Exit Function

Erro_Produto_Grava_Light:

    Produto_Grava_Light = Err

    Select Case Err

        Case 61203
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 61204, 61205 'Tratado na rotina chamada

        Case 61206
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151816)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function Rotina_FechamentoMes(ByVal objEstoque As ClassEstoqueMes, iCancela As Integer, ByVal objTela As Object) As Long
'Rotina que fecha o mes que está aberto do estoque

Dim lErro As Long
Dim lTransacao As Long
Dim objSldMesEst As New ClassSldMesEst
Dim iMes As Integer
Dim objEstoqueMes As New ClassEstoqueMes
Dim objFiliais As AdmFiliais

On Error GoTo Erro_Rotina_FechamentoMes

    lTransacao = 0

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 40679
    
    'desativa os locks dos comandos a seguir
    lErro = Conexao_DesativarLocks(DESATIVAR_LOCKS)
    If lErro <> SUCESSO Then gError 193959
    
    If giFilialEmpresa <> EMPRESA_TODA Then

        lErro = Rotina_FechamentoMes1(objEstoque, iCancela, objTela)
        If lErro <> SUCESSO Then gError 199434

    Else
    
        For Each objFiliais In gcolFiliais
    
            If objFiliais.iCodFilial <> EMPRESA_TODA Then
    
                objEstoque.iFilialEmpresa = objFiliais.iCodFilial
        
                lErro = Rotina_FechamentoMes1(objEstoque, iCancela, objTela)
                If lErro <> SUCESSO Then gError 199435
        
            End If
            
        Next
        
    End If
    
    'reativa os locks
    lErro = Conexao_DesativarLocks(REATIVAR_LOCKS)
    If lErro <> SUCESSO Then gError 193960
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 40682

    Rotina_FechamentoMes = SUCESSO

    Exit Function

Erro_Rotina_FechamentoMes:

    Rotina_FechamentoMes = gErr

    Select Case gErr

        Case 40679
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 199434, 199435

        Case 40682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 193959
            lErro = Rotina_Erro(vbOKOnly, "ERRO_DESATIVACAO_LOCKS", gErr)
             
        Case 193960
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REATIVACAO_LOCKS", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151817)

    End Select

    'reativa os locks
    Call Conexao_DesativarLocks(REATIVAR_LOCKS)
    
    Call Transacao_Rollback

  Exit Function

End Function

Private Function SldMesEst1_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst1 As typeSldMesEst1
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig3 As Double
Dim dValorInicialConsig3 As Double
Dim dQuantInicialDemo3 As Double
Dim dValorInicialDemo3 As Double
Dim dQuantInicialConserto3 As Double
Dim dValorInicialConserto3 As Double
Dim dQuantInicialOutros3 As Double
Dim dValorInicialOutros3 As Double
Dim dQuantInicialBenef3 As Double
Dim dValorInicialBenef3 As Double

On Error GoTo Erro_SldMesEst1_Atualiza_Ano

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60940

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60941

    tSldMesEst1.sProduto = String(STRING_PRODUTO, 0)

    'forma o comando do SQL
    sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                    "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                    "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312," & _
                    " CustoMedioConsig312, CustoMedioDemo312, CustoMedioConserto312, CustoMedioOutros312, CustoMedioBenef312 FROM SldMesEst1 WHERE Ano =? And FilialEmpresa =?"
    
    'Le os dados de SldMesEst1 para o ano em questão
    lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst1.iAno, tSldMesEst1.sProduto, tSldMesEst1.dQuantInicialConsig3, tSldMesEst1.dValorInicialConsig3, tSldMesEst1.dQuantInicialDemo3, tSldMesEst1.dValorInicialDemo3, tSldMesEst1.dQuantInicialConserto3, tSldMesEst1.dValorInicialConserto3, tSldMesEst1.dQuantInicialOutros3, tSldMesEst1.dValorInicialOutros3, tSldMesEst1.dQuantInicialBenef3, tSldMesEst1.dValorInicialBenef3, tSldMesEst1.adSaldoQuantConsig3(1), tSldMesEst1.adSaldoValorConsig3(1), tSldMesEst1.adSaldoQuantDemo3(1), tSldMesEst1.adSaldoValorDemo3(1), tSldMesEst1.adSaldoQuantConserto3(1), tSldMesEst1.adSaldoValorConserto3(1), tSldMesEst1.adSaldoQuantOutros3(1), tSldMesEst1.adSaldoValorOutros3(1), tSldMesEst1.adSaldoQuantBenef3(1), tSldMesEst1.adSaldoValorBenef3(1), _
                                tSldMesEst1.adSaldoQuantConsig3(2), tSldMesEst1.adSaldoValorConsig3(2), tSldMesEst1.adSaldoQuantDemo3(2), tSldMesEst1.adSaldoValorDemo3(2), tSldMesEst1.adSaldoQuantConserto3(2), tSldMesEst1.adSaldoValorConserto3(2), tSldMesEst1.adSaldoQuantOutros3(2), tSldMesEst1.adSaldoValorOutros3(2), tSldMesEst1.adSaldoQuantBenef3(2), tSldMesEst1.adSaldoValorBenef3(2), tSldMesEst1.adSaldoQuantConsig3(3), tSldMesEst1.adSaldoValorConsig3(3), tSldMesEst1.adSaldoQuantDemo3(3), tSldMesEst1.adSaldoValorDemo3(3), tSldMesEst1.adSaldoQuantConserto3(3), tSldMesEst1.adSaldoValorConserto3(3), tSldMesEst1.adSaldoQuantOutros3(3), tSldMesEst1.adSaldoValorOutros3(3), tSldMesEst1.adSaldoQuantBenef3(3), tSldMesEst1.adSaldoValorBenef3(3), _
                                tSldMesEst1.adSaldoQuantConsig3(4), tSldMesEst1.adSaldoValorConsig3(4), tSldMesEst1.adSaldoQuantDemo3(4), tSldMesEst1.adSaldoValorDemo3(4), tSldMesEst1.adSaldoQuantConserto3(4), tSldMesEst1.adSaldoValorConserto3(4), tSldMesEst1.adSaldoQuantOutros3(4), tSldMesEst1.adSaldoValorOutros3(4), tSldMesEst1.adSaldoQuantBenef3(4), tSldMesEst1.adSaldoValorBenef3(4), tSldMesEst1.adSaldoQuantConsig3(5), tSldMesEst1.adSaldoValorConsig3(5), tSldMesEst1.adSaldoQuantDemo3(5), tSldMesEst1.adSaldoValorDemo3(5), tSldMesEst1.adSaldoQuantConserto3(5), tSldMesEst1.adSaldoValorConserto3(5), tSldMesEst1.adSaldoQuantOutros3(5), tSldMesEst1.adSaldoValorOutros3(5), tSldMesEst1.adSaldoQuantBenef3(5), tSldMesEst1.adSaldoValorBenef3(5), _
                                tSldMesEst1.adSaldoQuantConsig3(6), tSldMesEst1.adSaldoValorConsig3(6), tSldMesEst1.adSaldoQuantDemo3(6), tSldMesEst1.adSaldoValorDemo3(6), tSldMesEst1.adSaldoQuantConserto3(6), tSldMesEst1.adSaldoValorConserto3(6), tSldMesEst1.adSaldoQuantOutros3(6), tSldMesEst1.adSaldoValorOutros3(6), tSldMesEst1.adSaldoQuantBenef3(6), tSldMesEst1.adSaldoValorBenef3(6), tSldMesEst1.adSaldoQuantConsig3(7), tSldMesEst1.adSaldoValorConsig3(7), tSldMesEst1.adSaldoQuantDemo3(7), tSldMesEst1.adSaldoValorDemo3(7), tSldMesEst1.adSaldoQuantConserto3(7), tSldMesEst1.adSaldoValorConserto3(7), tSldMesEst1.adSaldoQuantOutros3(7), tSldMesEst1.adSaldoValorOutros3(7), tSldMesEst1.adSaldoQuantBenef3(7), tSldMesEst1.adSaldoValorBenef3(7), _
                                tSldMesEst1.adSaldoQuantConsig3(8), tSldMesEst1.adSaldoValorConsig3(8), tSldMesEst1.adSaldoQuantDemo3(8), tSldMesEst1.adSaldoValorDemo3(8), tSldMesEst1.adSaldoQuantConserto3(8), tSldMesEst1.adSaldoValorConserto3(8), tSldMesEst1.adSaldoQuantOutros3(8), tSldMesEst1.adSaldoValorOutros3(8), tSldMesEst1.adSaldoQuantBenef3(8), tSldMesEst1.adSaldoValorBenef3(8), tSldMesEst1.adSaldoQuantConsig3(9), tSldMesEst1.adSaldoValorConsig3(9), tSldMesEst1.adSaldoQuantDemo3(9), tSldMesEst1.adSaldoValorDemo3(9), tSldMesEst1.adSaldoQuantConserto3(9), tSldMesEst1.adSaldoValorConserto3(9), tSldMesEst1.adSaldoQuantOutros3(9), tSldMesEst1.adSaldoValorOutros3(9), tSldMesEst1.adSaldoQuantBenef3(9), tSldMesEst1.adSaldoValorBenef3(9), _
                                tSldMesEst1.adSaldoQuantConsig3(10), tSldMesEst1.adSaldoValorConsig3(10), tSldMesEst1.adSaldoQuantDemo3(10), tSldMesEst1.adSaldoValorDemo3(10), tSldMesEst1.adSaldoQuantConserto3(10), tSldMesEst1.adSaldoValorConserto3(10), tSldMesEst1.adSaldoQuantOutros3(10), tSldMesEst1.adSaldoValorOutros3(10), tSldMesEst1.adSaldoQuantBenef3(10), tSldMesEst1.adSaldoValorBenef3(10), tSldMesEst1.adSaldoQuantConsig3(11), tSldMesEst1.adSaldoValorConsig3(11), tSldMesEst1.adSaldoQuantDemo3(11), tSldMesEst1.adSaldoValorDemo3(11), tSldMesEst1.adSaldoQuantConserto3(11), tSldMesEst1.adSaldoValorConserto3(11), tSldMesEst1.adSaldoQuantOutros3(11), tSldMesEst1.adSaldoValorOutros3(11), tSldMesEst1.adSaldoQuantBenef3(11), tSldMesEst1.adSaldoValorBenef3(11), _
                                tSldMesEst1.adSaldoQuantConsig3(12), tSldMesEst1.adSaldoValorConsig3(12), tSldMesEst1.adSaldoQuantDemo3(12), tSldMesEst1.adSaldoValorDemo3(12), tSldMesEst1.adSaldoQuantConserto3(12), tSldMesEst1.adSaldoValorConserto3(12), tSldMesEst1.adSaldoQuantOutros3(12), tSldMesEst1.adSaldoValorOutros3(12), tSldMesEst1.adSaldoQuantBenef3(12), tSldMesEst1.adSaldoValorBenef3(12), tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60943

    'Busca o primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60944

    Do While lErro = AD_SQL_SUCESSO

'        'lock do registro em questão
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 60945
        
        'soma um a ano para que seja criado outro ano
        tSldMesEst1.iAno = tSldMesEst1.iAno + 1
        
        dQuantInicialConsig3 = tSldMesEst1.dQuantInicialConsig3
        dValorInicialConsig3 = tSldMesEst1.dValorInicialConsig3
        dQuantInicialDemo3 = tSldMesEst1.dQuantInicialDemo3
        dValorInicialDemo3 = tSldMesEst1.dValorInicialDemo3
        dQuantInicialConserto3 = tSldMesEst1.dQuantInicialConserto3
        dValorInicialConserto3 = tSldMesEst1.dValorInicialConserto3
        dQuantInicialOutros3 = tSldMesEst1.dQuantInicialOutros3
        dValorInicialOutros3 = tSldMesEst1.dValorInicialOutros3
        dQuantInicialBenef3 = tSldMesEst1.dQuantInicialBenef3
        dValorInicialBenef3 = tSldMesEst1.dValorInicialBenef3
        
        'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
        For iIndice = 1 To 12

            dQuantInicialConsig3 = dQuantInicialConsig3 + tSldMesEst1.adSaldoQuantConsig3(iIndice)
            dValorInicialConsig3 = dValorInicialConsig3 + tSldMesEst1.adSaldoValorConsig3(iIndice)
            dQuantInicialDemo3 = dQuantInicialDemo3 + tSldMesEst1.adSaldoQuantDemo3(iIndice)
            dValorInicialDemo3 = dValorInicialDemo3 + tSldMesEst1.adSaldoValorDemo3(iIndice)
            dQuantInicialConserto3 = dQuantInicialConserto3 + tSldMesEst1.adSaldoQuantConserto3(iIndice)
            dValorInicialConserto3 = dValorInicialConserto3 + tSldMesEst1.adSaldoValorConserto3(iIndice)
            dQuantInicialOutros3 = dQuantInicialOutros3 + tSldMesEst1.adSaldoQuantOutros3(iIndice)
            dValorInicialOutros3 = dValorInicialOutros3 + tSldMesEst1.adSaldoValorOutros3(iIndice)
            dQuantInicialBenef3 = dQuantInicialBenef3 + tSldMesEst1.adSaldoQuantBenef3(iIndice)
            dValorInicialBenef3 = dValorInicialBenef3 + tSldMesEst1.adSaldoValorBenef3(iIndice)

        Next
        
        'Insere os dados no BD
        lErro = Comando_Executar(lComando1, "INSERT INTO SldMesEst1 (Ano, FilialEmpresa, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, CustoMedioConsig31, CustoMedioDemo31, CustoMedioConserto31, CustoMedioOutros31, CustoMedioBenef31) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto, dQuantInicialConsig3, dValorInicialConsig3, dQuantInicialDemo3, dValorInicialDemo3, dQuantInicialConserto3, dValorInicialConserto3, dQuantInicialOutros3, dValorInicialOutros3, dQuantInicialBenef3, dValorInicialBenef3, tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12))
        If lErro <> AD_SQL_SUCESSO Then Error 60946
        
        'Joga o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
        
        DoEvents
        
        'verifica se foi cancelado o fechamento do mes
        If iCancela = CANCELA Then
            
            vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
                
            If vbMesRes = vbYes Then Error 60947
            
            iCancela = CANCELA_BATCH
                
        End If
        
        'Busca o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60948

    Loop
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEst1_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEst1_Atualiza_Ano:

    SldMesEst1_Atualiza_Ano = Err

    Select Case Err
            
        Case 60940, 60941
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60943, 60944, 60948
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", Err, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 40695
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST1", Err, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto)

        Case 60946
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST1", Err, tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto)
            
        Case 60947
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151818)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function SldMesEst1_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Atualiza as quantidades e valores iniciais do proximo Ano para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst1 As typeSldMesEst1
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig3 As Double
Dim dValorInicialConsig3 As Double
Dim dQuantInicialDemo3 As Double
Dim dValorInicialDemo3 As Double
Dim dQuantInicialConserto3 As Double
Dim dValorInicialConserto3 As Double
Dim dQuantInicialOutros3 As Double
Dim dValorInicialOutros3 As Double
Dim dQuantInicialBenef3 As Double
Dim dValorInicialBenef3 As Double
Dim iAno As Integer

On Error GoTo Erro_SldMesEst1_Atualiza_Ano_Reproc

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 83679

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 83680

    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 83681

    tSldMesEst1.sProduto = String(STRING_PRODUTO, 0)

    If objSldMesEst.sProduto = "" Then
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                        "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                        "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312," & _
                        " CustoMedioConsig312, CustoMedioDemo312, CustoMedioConserto312, CustoMedioOutros312, CustoMedioBenef312 FROM SldMesEst1 WHERE Ano =? And FilialEmpresa =?"
        
        'Le os dados de SldMesEst1 para o ano em questão
        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst1.iAno, tSldMesEst1.sProduto, tSldMesEst1.dQuantInicialConsig3, tSldMesEst1.dValorInicialConsig3, tSldMesEst1.dQuantInicialDemo3, tSldMesEst1.dValorInicialDemo3, tSldMesEst1.dQuantInicialConserto3, tSldMesEst1.dValorInicialConserto3, tSldMesEst1.dQuantInicialOutros3, tSldMesEst1.dValorInicialOutros3, tSldMesEst1.dQuantInicialBenef3, tSldMesEst1.dValorInicialBenef3, tSldMesEst1.adSaldoQuantConsig3(1), tSldMesEst1.adSaldoValorConsig3(1), tSldMesEst1.adSaldoQuantDemo3(1), tSldMesEst1.adSaldoValorDemo3(1), tSldMesEst1.adSaldoQuantConserto3(1), tSldMesEst1.adSaldoValorConserto3(1), tSldMesEst1.adSaldoQuantOutros3(1), tSldMesEst1.adSaldoValorOutros3(1), tSldMesEst1.adSaldoQuantBenef3(1), tSldMesEst1.adSaldoValorBenef3(1), _
                                    tSldMesEst1.adSaldoQuantConsig3(2), tSldMesEst1.adSaldoValorConsig3(2), tSldMesEst1.adSaldoQuantDemo3(2), tSldMesEst1.adSaldoValorDemo3(2), tSldMesEst1.adSaldoQuantConserto3(2), tSldMesEst1.adSaldoValorConserto3(2), tSldMesEst1.adSaldoQuantOutros3(2), tSldMesEst1.adSaldoValorOutros3(2), tSldMesEst1.adSaldoQuantBenef3(2), tSldMesEst1.adSaldoValorBenef3(2), tSldMesEst1.adSaldoQuantConsig3(3), tSldMesEst1.adSaldoValorConsig3(3), tSldMesEst1.adSaldoQuantDemo3(3), tSldMesEst1.adSaldoValorDemo3(3), tSldMesEst1.adSaldoQuantConserto3(3), tSldMesEst1.adSaldoValorConserto3(3), tSldMesEst1.adSaldoQuantOutros3(3), tSldMesEst1.adSaldoValorOutros3(3), tSldMesEst1.adSaldoQuantBenef3(3), tSldMesEst1.adSaldoValorBenef3(3), _
                                    tSldMesEst1.adSaldoQuantConsig3(4), tSldMesEst1.adSaldoValorConsig3(4), tSldMesEst1.adSaldoQuantDemo3(4), tSldMesEst1.adSaldoValorDemo3(4), tSldMesEst1.adSaldoQuantConserto3(4), tSldMesEst1.adSaldoValorConserto3(4), tSldMesEst1.adSaldoQuantOutros3(4), tSldMesEst1.adSaldoValorOutros3(4), tSldMesEst1.adSaldoQuantBenef3(4), tSldMesEst1.adSaldoValorBenef3(4), tSldMesEst1.adSaldoQuantConsig3(5), tSldMesEst1.adSaldoValorConsig3(5), tSldMesEst1.adSaldoQuantDemo3(5), tSldMesEst1.adSaldoValorDemo3(5), tSldMesEst1.adSaldoQuantConserto3(5), tSldMesEst1.adSaldoValorConserto3(5), tSldMesEst1.adSaldoQuantOutros3(5), tSldMesEst1.adSaldoValorOutros3(5), tSldMesEst1.adSaldoQuantBenef3(5), tSldMesEst1.adSaldoValorBenef3(5), _
                                    tSldMesEst1.adSaldoQuantConsig3(6), tSldMesEst1.adSaldoValorConsig3(6), tSldMesEst1.adSaldoQuantDemo3(6), tSldMesEst1.adSaldoValorDemo3(6), tSldMesEst1.adSaldoQuantConserto3(6), tSldMesEst1.adSaldoValorConserto3(6), tSldMesEst1.adSaldoQuantOutros3(6), tSldMesEst1.adSaldoValorOutros3(6), tSldMesEst1.adSaldoQuantBenef3(6), tSldMesEst1.adSaldoValorBenef3(6), tSldMesEst1.adSaldoQuantConsig3(7), tSldMesEst1.adSaldoValorConsig3(7), tSldMesEst1.adSaldoQuantDemo3(7), tSldMesEst1.adSaldoValorDemo3(7), tSldMesEst1.adSaldoQuantConserto3(7), tSldMesEst1.adSaldoValorConserto3(7), tSldMesEst1.adSaldoQuantOutros3(7), tSldMesEst1.adSaldoValorOutros3(7), tSldMesEst1.adSaldoQuantBenef3(7), tSldMesEst1.adSaldoValorBenef3(7), _
                                    tSldMesEst1.adSaldoQuantConsig3(8), tSldMesEst1.adSaldoValorConsig3(8), tSldMesEst1.adSaldoQuantDemo3(8), tSldMesEst1.adSaldoValorDemo3(8), tSldMesEst1.adSaldoQuantConserto3(8), tSldMesEst1.adSaldoValorConserto3(8), tSldMesEst1.adSaldoQuantOutros3(8), tSldMesEst1.adSaldoValorOutros3(8), tSldMesEst1.adSaldoQuantBenef3(8), tSldMesEst1.adSaldoValorBenef3(8), tSldMesEst1.adSaldoQuantConsig3(9), tSldMesEst1.adSaldoValorConsig3(9), tSldMesEst1.adSaldoQuantDemo3(9), tSldMesEst1.adSaldoValorDemo3(9), tSldMesEst1.adSaldoQuantConserto3(9), tSldMesEst1.adSaldoValorConserto3(9), tSldMesEst1.adSaldoQuantOutros3(9), tSldMesEst1.adSaldoValorOutros3(9), tSldMesEst1.adSaldoQuantBenef3(9), tSldMesEst1.adSaldoValorBenef3(9), _
                                    tSldMesEst1.adSaldoQuantConsig3(10), tSldMesEst1.adSaldoValorConsig3(10), tSldMesEst1.adSaldoQuantDemo3(10), tSldMesEst1.adSaldoValorDemo3(10), tSldMesEst1.adSaldoQuantConserto3(10), tSldMesEst1.adSaldoValorConserto3(10), tSldMesEst1.adSaldoQuantOutros3(10), tSldMesEst1.adSaldoValorOutros3(10), tSldMesEst1.adSaldoQuantBenef3(10), tSldMesEst1.adSaldoValorBenef3(10), tSldMesEst1.adSaldoQuantConsig3(11), tSldMesEst1.adSaldoValorConsig3(11), tSldMesEst1.adSaldoQuantDemo3(11), tSldMesEst1.adSaldoValorDemo3(11), tSldMesEst1.adSaldoQuantConserto3(11), tSldMesEst1.adSaldoValorConserto3(11), tSldMesEst1.adSaldoQuantOutros3(11), tSldMesEst1.adSaldoValorOutros3(11), tSldMesEst1.adSaldoQuantBenef3(11), tSldMesEst1.adSaldoValorBenef3(11), _
                                    tSldMesEst1.adSaldoQuantConsig3(12), tSldMesEst1.adSaldoValorConsig3(12), tSldMesEst1.adSaldoQuantDemo3(12), tSldMesEst1.adSaldoValorDemo3(12), tSldMesEst1.adSaldoQuantConserto3(12), tSldMesEst1.adSaldoValorConserto3(12), tSldMesEst1.adSaldoQuantOutros3(12), tSldMesEst1.adSaldoValorOutros3(12), tSldMesEst1.adSaldoQuantBenef3(12), tSldMesEst1.adSaldoValorBenef3(12), tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    Else
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                        "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                        "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312," & _
                        " CustoMedioConsig312, CustoMedioDemo312, CustoMedioConserto312, CustoMedioOutros312, CustoMedioBenef312 FROM SldMesEst1 WHERE Ano =? And FilialEmpresa =? AND Produto = ?"
        
        'Le os dados de SldMesEst1 para o ano em questão
        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst1.iAno, tSldMesEst1.sProduto, tSldMesEst1.dQuantInicialConsig3, tSldMesEst1.dValorInicialConsig3, tSldMesEst1.dQuantInicialDemo3, tSldMesEst1.dValorInicialDemo3, tSldMesEst1.dQuantInicialConserto3, tSldMesEst1.dValorInicialConserto3, tSldMesEst1.dQuantInicialOutros3, tSldMesEst1.dValorInicialOutros3, tSldMesEst1.dQuantInicialBenef3, tSldMesEst1.dValorInicialBenef3, tSldMesEst1.adSaldoQuantConsig3(1), tSldMesEst1.adSaldoValorConsig3(1), tSldMesEst1.adSaldoQuantDemo3(1), tSldMesEst1.adSaldoValorDemo3(1), tSldMesEst1.adSaldoQuantConserto3(1), tSldMesEst1.adSaldoValorConserto3(1), tSldMesEst1.adSaldoQuantOutros3(1), tSldMesEst1.adSaldoValorOutros3(1), tSldMesEst1.adSaldoQuantBenef3(1), tSldMesEst1.adSaldoValorBenef3(1), _
                                    tSldMesEst1.adSaldoQuantConsig3(2), tSldMesEst1.adSaldoValorConsig3(2), tSldMesEst1.adSaldoQuantDemo3(2), tSldMesEst1.adSaldoValorDemo3(2), tSldMesEst1.adSaldoQuantConserto3(2), tSldMesEst1.adSaldoValorConserto3(2), tSldMesEst1.adSaldoQuantOutros3(2), tSldMesEst1.adSaldoValorOutros3(2), tSldMesEst1.adSaldoQuantBenef3(2), tSldMesEst1.adSaldoValorBenef3(2), tSldMesEst1.adSaldoQuantConsig3(3), tSldMesEst1.adSaldoValorConsig3(3), tSldMesEst1.adSaldoQuantDemo3(3), tSldMesEst1.adSaldoValorDemo3(3), tSldMesEst1.adSaldoQuantConserto3(3), tSldMesEst1.adSaldoValorConserto3(3), tSldMesEst1.adSaldoQuantOutros3(3), tSldMesEst1.adSaldoValorOutros3(3), tSldMesEst1.adSaldoQuantBenef3(3), tSldMesEst1.adSaldoValorBenef3(3), _
                                    tSldMesEst1.adSaldoQuantConsig3(4), tSldMesEst1.adSaldoValorConsig3(4), tSldMesEst1.adSaldoQuantDemo3(4), tSldMesEst1.adSaldoValorDemo3(4), tSldMesEst1.adSaldoQuantConserto3(4), tSldMesEst1.adSaldoValorConserto3(4), tSldMesEst1.adSaldoQuantOutros3(4), tSldMesEst1.adSaldoValorOutros3(4), tSldMesEst1.adSaldoQuantBenef3(4), tSldMesEst1.adSaldoValorBenef3(4), tSldMesEst1.adSaldoQuantConsig3(5), tSldMesEst1.adSaldoValorConsig3(5), tSldMesEst1.adSaldoQuantDemo3(5), tSldMesEst1.adSaldoValorDemo3(5), tSldMesEst1.adSaldoQuantConserto3(5), tSldMesEst1.adSaldoValorConserto3(5), tSldMesEst1.adSaldoQuantOutros3(5), tSldMesEst1.adSaldoValorOutros3(5), tSldMesEst1.adSaldoQuantBenef3(5), tSldMesEst1.adSaldoValorBenef3(5), _
                                    tSldMesEst1.adSaldoQuantConsig3(6), tSldMesEst1.adSaldoValorConsig3(6), tSldMesEst1.adSaldoQuantDemo3(6), tSldMesEst1.adSaldoValorDemo3(6), tSldMesEst1.adSaldoQuantConserto3(6), tSldMesEst1.adSaldoValorConserto3(6), tSldMesEst1.adSaldoQuantOutros3(6), tSldMesEst1.adSaldoValorOutros3(6), tSldMesEst1.adSaldoQuantBenef3(6), tSldMesEst1.adSaldoValorBenef3(6), tSldMesEst1.adSaldoQuantConsig3(7), tSldMesEst1.adSaldoValorConsig3(7), tSldMesEst1.adSaldoQuantDemo3(7), tSldMesEst1.adSaldoValorDemo3(7), tSldMesEst1.adSaldoQuantConserto3(7), tSldMesEst1.adSaldoValorConserto3(7), tSldMesEst1.adSaldoQuantOutros3(7), tSldMesEst1.adSaldoValorOutros3(7), tSldMesEst1.adSaldoQuantBenef3(7), tSldMesEst1.adSaldoValorBenef3(7), _
                                    tSldMesEst1.adSaldoQuantConsig3(8), tSldMesEst1.adSaldoValorConsig3(8), tSldMesEst1.adSaldoQuantDemo3(8), tSldMesEst1.adSaldoValorDemo3(8), tSldMesEst1.adSaldoQuantConserto3(8), tSldMesEst1.adSaldoValorConserto3(8), tSldMesEst1.adSaldoQuantOutros3(8), tSldMesEst1.adSaldoValorOutros3(8), tSldMesEst1.adSaldoQuantBenef3(8), tSldMesEst1.adSaldoValorBenef3(8), tSldMesEst1.adSaldoQuantConsig3(9), tSldMesEst1.adSaldoValorConsig3(9), tSldMesEst1.adSaldoQuantDemo3(9), tSldMesEst1.adSaldoValorDemo3(9), tSldMesEst1.adSaldoQuantConserto3(9), tSldMesEst1.adSaldoValorConserto3(9), tSldMesEst1.adSaldoQuantOutros3(9), tSldMesEst1.adSaldoValorOutros3(9), tSldMesEst1.adSaldoQuantBenef3(9), tSldMesEst1.adSaldoValorBenef3(9), _
                                    tSldMesEst1.adSaldoQuantConsig3(10), tSldMesEst1.adSaldoValorConsig3(10), tSldMesEst1.adSaldoQuantDemo3(10), tSldMesEst1.adSaldoValorDemo3(10), tSldMesEst1.adSaldoQuantConserto3(10), tSldMesEst1.adSaldoValorConserto3(10), tSldMesEst1.adSaldoQuantOutros3(10), tSldMesEst1.adSaldoValorOutros3(10), tSldMesEst1.adSaldoQuantBenef3(10), tSldMesEst1.adSaldoValorBenef3(10), tSldMesEst1.adSaldoQuantConsig3(11), tSldMesEst1.adSaldoValorConsig3(11), tSldMesEst1.adSaldoQuantDemo3(11), tSldMesEst1.adSaldoValorDemo3(11), tSldMesEst1.adSaldoQuantConserto3(11), tSldMesEst1.adSaldoValorConserto3(11), tSldMesEst1.adSaldoQuantOutros3(11), tSldMesEst1.adSaldoValorOutros3(11), tSldMesEst1.adSaldoQuantBenef3(11), tSldMesEst1.adSaldoValorBenef3(11), _
                                    tSldMesEst1.adSaldoQuantConsig3(12), tSldMesEst1.adSaldoValorConsig3(12), tSldMesEst1.adSaldoQuantDemo3(12), tSldMesEst1.adSaldoValorDemo3(12), tSldMesEst1.adSaldoQuantConserto3(12), tSldMesEst1.adSaldoValorConserto3(12), tSldMesEst1.adSaldoQuantOutros3(12), tSldMesEst1.adSaldoValorOutros3(12), tSldMesEst1.adSaldoQuantBenef3(12), tSldMesEst1.adSaldoValorBenef3(12), tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto)
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 83682

    'Busca o primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83683

    Do While lErro = AD_SQL_SUCESSO

        'soma um a ano para que seja criado outro ano
        tSldMesEst1.iAno = tSldMesEst1.iAno + 1
        
        dQuantInicialConsig3 = tSldMesEst1.dQuantInicialConsig3
        dValorInicialConsig3 = tSldMesEst1.dValorInicialConsig3
        dQuantInicialDemo3 = tSldMesEst1.dQuantInicialDemo3
        dValorInicialDemo3 = tSldMesEst1.dValorInicialDemo3
        dQuantInicialConserto3 = tSldMesEst1.dQuantInicialConserto3
        dValorInicialConserto3 = tSldMesEst1.dValorInicialConserto3
        dQuantInicialOutros3 = tSldMesEst1.dQuantInicialOutros3
        dValorInicialOutros3 = tSldMesEst1.dValorInicialOutros3
        dQuantInicialBenef3 = tSldMesEst1.dQuantInicialBenef3
        dValorInicialBenef3 = tSldMesEst1.dValorInicialBenef3
        
        'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
        For iIndice = 1 To 12

            dQuantInicialConsig3 = dQuantInicialConsig3 + tSldMesEst1.adSaldoQuantConsig3(iIndice)
            dValorInicialConsig3 = dValorInicialConsig3 + tSldMesEst1.adSaldoValorConsig3(iIndice)
            dQuantInicialDemo3 = dQuantInicialDemo3 + tSldMesEst1.adSaldoQuantDemo3(iIndice)
            dValorInicialDemo3 = dValorInicialDemo3 + tSldMesEst1.adSaldoValorDemo3(iIndice)
            dQuantInicialConserto3 = dQuantInicialConserto3 + tSldMesEst1.adSaldoQuantConserto3(iIndice)
            dValorInicialConserto3 = dValorInicialConserto3 + tSldMesEst1.adSaldoValorConserto3(iIndice)
            dQuantInicialOutros3 = dQuantInicialOutros3 + tSldMesEst1.adSaldoQuantOutros3(iIndice)
            dValorInicialOutros3 = dValorInicialOutros3 + tSldMesEst1.adSaldoValorOutros3(iIndice)
            dQuantInicialBenef3 = dQuantInicialBenef3 + tSldMesEst1.adSaldoQuantBenef3(iIndice)
            dValorInicialBenef3 = dValorInicialBenef3 + tSldMesEst1.adSaldoValorBenef3(iIndice)

        Next
        
        'Le os dados de SldMesEst1 para o ano em questão
        lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEst1 WHERE Ano =? AND FilialEmpresa =? AND Produto = ?", 0, iAno, tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 83684
    
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83685
        
        If lErro = AD_SQL_SUCESSO Then
        
            'Insere os dados no BD
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1 SET QuantInicialConsig3 = ?, ValorInicialConsig3 = ?, QuantInicialDemo3 = ?, ValorInicialDemo3 = ?, QuantInicialConserto3 = ?, ValorInicialConserto3 = ?, QuantInicialOutros3 = ?, ValorInicialOutros3 = ?, QuantInicialBenef3 = ?, ValorInicialBenef3 = ?, CustoMedioConsig31 = ?, CustoMedioDemo31 = ?, CustoMedioConserto31 = ?, CustoMedioOutros31 = ?, CustoMedioBenef31 = ?", lComando1, dQuantInicialConsig3, dValorInicialConsig3, dQuantInicialDemo3, dValorInicialDemo3, dQuantInicialConserto3, dValorInicialConserto3, dQuantInicialOutros3, dValorInicialOutros3, dQuantInicialBenef3, dValorInicialBenef3, tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12))
            If lErro <> AD_SQL_SUCESSO Then gError 83686
        
        End If
        
        'Busca o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83687

    Loop
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    SldMesEst1_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst1_Atualiza_Ano_Reproc:

    SldMesEst1_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83679, 83680, 83681
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83682, 83683, 83687
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 83684, 83685
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", gErr, tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto)

        Case 83686
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST1_1", gErr, tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151819)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst2_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst2 As typeSldMesEst2
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig As Double
Dim dValorInicialConsig As Double
Dim dQuantInicialDemo As Double
Dim dValorInicialDemo As Double
Dim dQuantInicialConserto As Double
Dim dValorInicialConserto As Double
Dim dQuantInicialOutros As Double
Dim dValorInicialOutros As Double
Dim dQuantInicialBenef As Double
Dim dValorInicialBenef As Double

On Error GoTo Erro_SldMesEst2_Atualiza_Ano

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60981

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60982

    tSldMesEst2.sProduto = String(STRING_PRODUTO, 0)

    'forma o comando do SQL
    sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                    "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                    "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12," & _
                    " CustoMedioConsig12, CustoMedioDemo12, CustoMedioConserto12, CustoMedioOutros12, CustoMedioBenef12 FROM SldMesEst2 WHERE Ano =? And FilialEmpresa =?"
    
    'Le os dados de SldMesEst2 para o ano em questão
    lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst2.iAno, tSldMesEst2.sProduto, tSldMesEst2.dQuantInicialConsig, tSldMesEst2.dValorInicialConsig, tSldMesEst2.dQuantInicialDemo, tSldMesEst2.dValorInicialDemo, tSldMesEst2.dQuantInicialConserto, tSldMesEst2.dValorInicialConserto, tSldMesEst2.dQuantInicialOutros, tSldMesEst2.dValorInicialOutros, tSldMesEst2.dQuantInicialBenef, tSldMesEst2.dValorInicialBenef, tSldMesEst2.adSaldoQuantConsig(1), tSldMesEst2.adSaldoValorConsig(1), tSldMesEst2.adSaldoQuantDemo(1), tSldMesEst2.adSaldoValorDemo(1), tSldMesEst2.adSaldoQuantConserto(1), tSldMesEst2.adSaldoValorConserto(1), tSldMesEst2.adSaldoQuantOutros(1), tSldMesEst2.adSaldoValorOutros(1), tSldMesEst2.adSaldoQuantBenef(1), tSldMesEst2.adSaldoValorBenef(1), _
                                tSldMesEst2.adSaldoQuantConsig(2), tSldMesEst2.adSaldoValorConsig(2), tSldMesEst2.adSaldoQuantDemo(2), tSldMesEst2.adSaldoValorDemo(2), tSldMesEst2.adSaldoQuantConserto(2), tSldMesEst2.adSaldoValorConserto(2), tSldMesEst2.adSaldoQuantOutros(2), tSldMesEst2.adSaldoValorOutros(2), tSldMesEst2.adSaldoQuantBenef(2), tSldMesEst2.adSaldoValorBenef(2), tSldMesEst2.adSaldoQuantConsig(3), tSldMesEst2.adSaldoValorConsig(3), tSldMesEst2.adSaldoQuantDemo(3), tSldMesEst2.adSaldoValorDemo(3), tSldMesEst2.adSaldoQuantConserto(3), tSldMesEst2.adSaldoValorConserto(3), tSldMesEst2.adSaldoQuantOutros(3), tSldMesEst2.adSaldoValorOutros(3), tSldMesEst2.adSaldoQuantBenef(3), tSldMesEst2.adSaldoValorBenef(3), _
                                tSldMesEst2.adSaldoQuantConsig(4), tSldMesEst2.adSaldoValorConsig(4), tSldMesEst2.adSaldoQuantDemo(4), tSldMesEst2.adSaldoValorDemo(4), tSldMesEst2.adSaldoQuantConserto(4), tSldMesEst2.adSaldoValorConserto(4), tSldMesEst2.adSaldoQuantOutros(4), tSldMesEst2.adSaldoValorOutros(4), tSldMesEst2.adSaldoQuantBenef(4), tSldMesEst2.adSaldoValorBenef(4), tSldMesEst2.adSaldoQuantConsig(5), tSldMesEst2.adSaldoValorConsig(5), tSldMesEst2.adSaldoQuantDemo(5), tSldMesEst2.adSaldoValorDemo(5), tSldMesEst2.adSaldoQuantConserto(5), tSldMesEst2.adSaldoValorConserto(5), tSldMesEst2.adSaldoQuantOutros(5), tSldMesEst2.adSaldoValorOutros(5), tSldMesEst2.adSaldoQuantBenef(5), tSldMesEst2.adSaldoValorBenef(5), _
                                tSldMesEst2.adSaldoQuantConsig(6), tSldMesEst2.adSaldoValorConsig(6), tSldMesEst2.adSaldoQuantDemo(6), tSldMesEst2.adSaldoValorDemo(6), tSldMesEst2.adSaldoQuantConserto(6), tSldMesEst2.adSaldoValorConserto(6), tSldMesEst2.adSaldoQuantOutros(6), tSldMesEst2.adSaldoValorOutros(6), tSldMesEst2.adSaldoQuantBenef(6), tSldMesEst2.adSaldoValorBenef(6), tSldMesEst2.adSaldoQuantConsig(7), tSldMesEst2.adSaldoValorConsig(7), tSldMesEst2.adSaldoQuantDemo(7), tSldMesEst2.adSaldoValorDemo(7), tSldMesEst2.adSaldoQuantConserto(7), tSldMesEst2.adSaldoValorConserto(7), tSldMesEst2.adSaldoQuantOutros(7), tSldMesEst2.adSaldoValorOutros(7), tSldMesEst2.adSaldoQuantBenef(7), tSldMesEst2.adSaldoValorBenef(7), _
                                tSldMesEst2.adSaldoQuantConsig(8), tSldMesEst2.adSaldoValorConsig(8), tSldMesEst2.adSaldoQuantDemo(8), tSldMesEst2.adSaldoValorDemo(8), tSldMesEst2.adSaldoQuantConserto(8), tSldMesEst2.adSaldoValorConserto(8), tSldMesEst2.adSaldoQuantOutros(8), tSldMesEst2.adSaldoValorOutros(8), tSldMesEst2.adSaldoQuantBenef(8), tSldMesEst2.adSaldoValorBenef(8), tSldMesEst2.adSaldoQuantConsig(9), tSldMesEst2.adSaldoValorConsig(9), tSldMesEst2.adSaldoQuantDemo(9), tSldMesEst2.adSaldoValorDemo(9), tSldMesEst2.adSaldoQuantConserto(9), tSldMesEst2.adSaldoValorConserto(9), tSldMesEst2.adSaldoQuantOutros(9), tSldMesEst2.adSaldoValorOutros(9), tSldMesEst2.adSaldoQuantBenef(9), tSldMesEst2.adSaldoValorBenef(9), _
                                tSldMesEst2.adSaldoQuantConsig(10), tSldMesEst2.adSaldoValorConsig(10), tSldMesEst2.adSaldoQuantDemo(10), tSldMesEst2.adSaldoValorDemo(10), tSldMesEst2.adSaldoQuantConserto(10), tSldMesEst2.adSaldoValorConserto(10), tSldMesEst2.adSaldoQuantOutros(10), tSldMesEst2.adSaldoValorOutros(10), tSldMesEst2.adSaldoQuantBenef(10), tSldMesEst2.adSaldoValorBenef(10), tSldMesEst2.adSaldoQuantConsig(11), tSldMesEst2.adSaldoValorConsig(11), tSldMesEst2.adSaldoQuantDemo(11), tSldMesEst2.adSaldoValorDemo(11), tSldMesEst2.adSaldoQuantConserto(11), tSldMesEst2.adSaldoValorConserto(11), tSldMesEst2.adSaldoQuantOutros(11), tSldMesEst2.adSaldoValorOutros(11), tSldMesEst2.adSaldoQuantBenef(11), tSldMesEst2.adSaldoValorBenef(11), _
                                tSldMesEst2.adSaldoQuantConsig(12), tSldMesEst2.adSaldoValorConsig(12), tSldMesEst2.adSaldoQuantDemo(12), tSldMesEst2.adSaldoValorDemo(12), tSldMesEst2.adSaldoQuantConserto(12), tSldMesEst2.adSaldoValorConserto(12), tSldMesEst2.adSaldoQuantOutros(12), tSldMesEst2.adSaldoValorOutros(12), tSldMesEst2.adSaldoQuantBenef(12), tSldMesEst2.adSaldoValorBenef(12), tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60983

    'Busca o primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60984

    Do While lErro = AD_SQL_SUCESSO

'        'lock do registro em questão
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 60985
        
        'soma um a ano para que seja criado outro ano
        tSldMesEst2.iAno = tSldMesEst2.iAno + 1
        
        dQuantInicialConsig = tSldMesEst2.dQuantInicialConsig
        dValorInicialConsig = tSldMesEst2.dValorInicialConsig
        dQuantInicialDemo = tSldMesEst2.dQuantInicialDemo
        dValorInicialDemo = tSldMesEst2.dValorInicialDemo
        dQuantInicialConserto = tSldMesEst2.dQuantInicialConserto
        dValorInicialConserto = tSldMesEst2.dValorInicialConserto
        dQuantInicialOutros = tSldMesEst2.dQuantInicialOutros
        dValorInicialOutros = tSldMesEst2.dValorInicialOutros
        dQuantInicialBenef = tSldMesEst2.dQuantInicialBenef
        dValorInicialBenef = tSldMesEst2.dValorInicialBenef
        
        'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
        For iIndice = 1 To 12

            dQuantInicialConsig = dQuantInicialConsig + tSldMesEst2.adSaldoQuantConsig(iIndice)
            dValorInicialConsig = dValorInicialConsig + tSldMesEst2.adSaldoValorConsig(iIndice)
            dQuantInicialDemo = dQuantInicialDemo + tSldMesEst2.adSaldoQuantDemo(iIndice)
            dValorInicialDemo = dValorInicialDemo + tSldMesEst2.adSaldoValorDemo(iIndice)
            dQuantInicialConserto = dQuantInicialConserto + tSldMesEst2.adSaldoQuantConserto(iIndice)
            dValorInicialConserto = dValorInicialConserto + tSldMesEst2.adSaldoValorConserto(iIndice)
            dQuantInicialOutros = dQuantInicialOutros + tSldMesEst2.adSaldoQuantOutros(iIndice)
            dValorInicialOutros = dValorInicialOutros + tSldMesEst2.adSaldoValorOutros(iIndice)
            dQuantInicialBenef = dQuantInicialBenef + tSldMesEst2.adSaldoQuantBenef(iIndice)
            dValorInicialBenef = dValorInicialBenef + tSldMesEst2.adSaldoValorBenef(iIndice)

        Next
        
        'Insere os dados no BD
        lErro = Comando_Executar(lComando1, "INSERT INTO SldMesEst2 (Ano, FilialEmpresa, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, CustoMedioConsig1, CustoMedioDemo1, CustoMedioConserto1, CustoMedioOutros1, CustoMedioBenef1) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto, dQuantInicialConsig, dValorInicialConsig, dQuantInicialDemo, dValorInicialDemo, dQuantInicialConserto, dValorInicialConserto, dQuantInicialOutros, dValorInicialOutros, dQuantInicialBenef, dValorInicialBenef, tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12))
        If lErro <> AD_SQL_SUCESSO Then Error 60986
        
        'Joga o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
        
        DoEvents
        
        'verifica se foi cancelado o fechamento do mes
        If iCancela = CANCELA Then
            
            vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
                
            If vbMesRes = vbYes Then Error 60987
            
            iCancela = CANCELA_BATCH
                
        End If
        
        'Busca o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60988

    Loop
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEst2_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEst2_Atualiza_Ano:

    SldMesEst2_Atualiza_Ano = Err

    Select Case Err
            
        Case 60981, 60982
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60983, 60984, 60988
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST21", Err, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 60985
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST2", Err, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto)

        Case 60986
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST2", Err, tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto)
            
        Case 60987
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151820)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function SldMesEst2_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Atualiza os Saldos Iniciais do ano seguinte para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst2 As typeSldMesEst2
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig As Double
Dim dValorInicialConsig As Double
Dim dQuantInicialDemo As Double
Dim dValorInicialDemo As Double
Dim dQuantInicialConserto As Double
Dim dValorInicialConserto As Double
Dim dQuantInicialOutros As Double
Dim dValorInicialOutros As Double
Dim dQuantInicialBenef As Double
Dim dValorInicialBenef As Double
Dim iAno As Integer

On Error GoTo Erro_SldMesEst2_Atualiza_Ano_Reproc

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 83688

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 83689

    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 83690

    tSldMesEst2.sProduto = String(STRING_PRODUTO, 0)

    If objSldMesEst.sProduto = "" Then
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                        "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                        "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12," & _
                        " CustoMedioConsig12, CustoMedioDemo12, CustoMedioConserto12, CustoMedioOutros12, CustoMedioBenef12 FROM SldMesEst2 WHERE Ano =? And FilialEmpresa =?"
        
        'Le os dados de SldMesEst2 para o ano em questão
        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst2.iAno, tSldMesEst2.sProduto, tSldMesEst2.dQuantInicialConsig, tSldMesEst2.dValorInicialConsig, tSldMesEst2.dQuantInicialDemo, tSldMesEst2.dValorInicialDemo, tSldMesEst2.dQuantInicialConserto, tSldMesEst2.dValorInicialConserto, tSldMesEst2.dQuantInicialOutros, tSldMesEst2.dValorInicialOutros, tSldMesEst2.dQuantInicialBenef, tSldMesEst2.dValorInicialBenef, tSldMesEst2.adSaldoQuantConsig(1), tSldMesEst2.adSaldoValorConsig(1), tSldMesEst2.adSaldoQuantDemo(1), tSldMesEst2.adSaldoValorDemo(1), tSldMesEst2.adSaldoQuantConserto(1), tSldMesEst2.adSaldoValorConserto(1), tSldMesEst2.adSaldoQuantOutros(1), tSldMesEst2.adSaldoValorOutros(1), tSldMesEst2.adSaldoQuantBenef(1), tSldMesEst2.adSaldoValorBenef(1), _
                                    tSldMesEst2.adSaldoQuantConsig(2), tSldMesEst2.adSaldoValorConsig(2), tSldMesEst2.adSaldoQuantDemo(2), tSldMesEst2.adSaldoValorDemo(2), tSldMesEst2.adSaldoQuantConserto(2), tSldMesEst2.adSaldoValorConserto(2), tSldMesEst2.adSaldoQuantOutros(2), tSldMesEst2.adSaldoValorOutros(2), tSldMesEst2.adSaldoQuantBenef(2), tSldMesEst2.adSaldoValorBenef(2), tSldMesEst2.adSaldoQuantConsig(3), tSldMesEst2.adSaldoValorConsig(3), tSldMesEst2.adSaldoQuantDemo(3), tSldMesEst2.adSaldoValorDemo(3), tSldMesEst2.adSaldoQuantConserto(3), tSldMesEst2.adSaldoValorConserto(3), tSldMesEst2.adSaldoQuantOutros(3), tSldMesEst2.adSaldoValorOutros(3), tSldMesEst2.adSaldoQuantBenef(3), tSldMesEst2.adSaldoValorBenef(3), _
                                    tSldMesEst2.adSaldoQuantConsig(4), tSldMesEst2.adSaldoValorConsig(4), tSldMesEst2.adSaldoQuantDemo(4), tSldMesEst2.adSaldoValorDemo(4), tSldMesEst2.adSaldoQuantConserto(4), tSldMesEst2.adSaldoValorConserto(4), tSldMesEst2.adSaldoQuantOutros(4), tSldMesEst2.adSaldoValorOutros(4), tSldMesEst2.adSaldoQuantBenef(4), tSldMesEst2.adSaldoValorBenef(4), tSldMesEst2.adSaldoQuantConsig(5), tSldMesEst2.adSaldoValorConsig(5), tSldMesEst2.adSaldoQuantDemo(5), tSldMesEst2.adSaldoValorDemo(5), tSldMesEst2.adSaldoQuantConserto(5), tSldMesEst2.adSaldoValorConserto(5), tSldMesEst2.adSaldoQuantOutros(5), tSldMesEst2.adSaldoValorOutros(5), tSldMesEst2.adSaldoQuantBenef(5), tSldMesEst2.adSaldoValorBenef(5), _
                                    tSldMesEst2.adSaldoQuantConsig(6), tSldMesEst2.adSaldoValorConsig(6), tSldMesEst2.adSaldoQuantDemo(6), tSldMesEst2.adSaldoValorDemo(6), tSldMesEst2.adSaldoQuantConserto(6), tSldMesEst2.adSaldoValorConserto(6), tSldMesEst2.adSaldoQuantOutros(6), tSldMesEst2.adSaldoValorOutros(6), tSldMesEst2.adSaldoQuantBenef(6), tSldMesEst2.adSaldoValorBenef(6), tSldMesEst2.adSaldoQuantConsig(7), tSldMesEst2.adSaldoValorConsig(7), tSldMesEst2.adSaldoQuantDemo(7), tSldMesEst2.adSaldoValorDemo(7), tSldMesEst2.adSaldoQuantConserto(7), tSldMesEst2.adSaldoValorConserto(7), tSldMesEst2.adSaldoQuantOutros(7), tSldMesEst2.adSaldoValorOutros(7), tSldMesEst2.adSaldoQuantBenef(7), tSldMesEst2.adSaldoValorBenef(7), _
                                    tSldMesEst2.adSaldoQuantConsig(8), tSldMesEst2.adSaldoValorConsig(8), tSldMesEst2.adSaldoQuantDemo(8), tSldMesEst2.adSaldoValorDemo(8), tSldMesEst2.adSaldoQuantConserto(8), tSldMesEst2.adSaldoValorConserto(8), tSldMesEst2.adSaldoQuantOutros(8), tSldMesEst2.adSaldoValorOutros(8), tSldMesEst2.adSaldoQuantBenef(8), tSldMesEst2.adSaldoValorBenef(8), tSldMesEst2.adSaldoQuantConsig(9), tSldMesEst2.adSaldoValorConsig(9), tSldMesEst2.adSaldoQuantDemo(9), tSldMesEst2.adSaldoValorDemo(9), tSldMesEst2.adSaldoQuantConserto(9), tSldMesEst2.adSaldoValorConserto(9), tSldMesEst2.adSaldoQuantOutros(9), tSldMesEst2.adSaldoValorOutros(9), tSldMesEst2.adSaldoQuantBenef(9), tSldMesEst2.adSaldoValorBenef(9), _
                                    tSldMesEst2.adSaldoQuantConsig(10), tSldMesEst2.adSaldoValorConsig(10), tSldMesEst2.adSaldoQuantDemo(10), tSldMesEst2.adSaldoValorDemo(10), tSldMesEst2.adSaldoQuantConserto(10), tSldMesEst2.adSaldoValorConserto(10), tSldMesEst2.adSaldoQuantOutros(10), tSldMesEst2.adSaldoValorOutros(10), tSldMesEst2.adSaldoQuantBenef(10), tSldMesEst2.adSaldoValorBenef(10), tSldMesEst2.adSaldoQuantConsig(11), tSldMesEst2.adSaldoValorConsig(11), tSldMesEst2.adSaldoQuantDemo(11), tSldMesEst2.adSaldoValorDemo(11), tSldMesEst2.adSaldoQuantConserto(11), tSldMesEst2.adSaldoValorConserto(11), tSldMesEst2.adSaldoQuantOutros(11), tSldMesEst2.adSaldoValorOutros(11), tSldMesEst2.adSaldoQuantBenef(11), tSldMesEst2.adSaldoValorBenef(11), _
                                    tSldMesEst2.adSaldoQuantConsig(12), tSldMesEst2.adSaldoValorConsig(12), tSldMesEst2.adSaldoQuantDemo(12), tSldMesEst2.adSaldoValorDemo(12), tSldMesEst2.adSaldoQuantConserto(12), tSldMesEst2.adSaldoValorConserto(12), tSldMesEst2.adSaldoQuantOutros(12), tSldMesEst2.adSaldoValorOutros(12), tSldMesEst2.adSaldoQuantBenef(12), tSldMesEst2.adSaldoValorBenef(12), tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    Else
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                        "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                        "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12," & _
                        " CustoMedioConsig12, CustoMedioDemo12, CustoMedioConserto12, CustoMedioOutros12, CustoMedioBenef12 FROM SldMesEst2 WHERE Ano =? And FilialEmpresa =? AND Produto = ?"
        
        'Le os dados de SldMesEst2 para o ano em questão
        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst2.iAno, tSldMesEst2.sProduto, tSldMesEst2.dQuantInicialConsig, tSldMesEst2.dValorInicialConsig, tSldMesEst2.dQuantInicialDemo, tSldMesEst2.dValorInicialDemo, tSldMesEst2.dQuantInicialConserto, tSldMesEst2.dValorInicialConserto, tSldMesEst2.dQuantInicialOutros, tSldMesEst2.dValorInicialOutros, tSldMesEst2.dQuantInicialBenef, tSldMesEst2.dValorInicialBenef, tSldMesEst2.adSaldoQuantConsig(1), tSldMesEst2.adSaldoValorConsig(1), tSldMesEst2.adSaldoQuantDemo(1), tSldMesEst2.adSaldoValorDemo(1), tSldMesEst2.adSaldoQuantConserto(1), tSldMesEst2.adSaldoValorConserto(1), tSldMesEst2.adSaldoQuantOutros(1), tSldMesEst2.adSaldoValorOutros(1), tSldMesEst2.adSaldoQuantBenef(1), tSldMesEst2.adSaldoValorBenef(1), _
                                    tSldMesEst2.adSaldoQuantConsig(2), tSldMesEst2.adSaldoValorConsig(2), tSldMesEst2.adSaldoQuantDemo(2), tSldMesEst2.adSaldoValorDemo(2), tSldMesEst2.adSaldoQuantConserto(2), tSldMesEst2.adSaldoValorConserto(2), tSldMesEst2.adSaldoQuantOutros(2), tSldMesEst2.adSaldoValorOutros(2), tSldMesEst2.adSaldoQuantBenef(2), tSldMesEst2.adSaldoValorBenef(2), tSldMesEst2.adSaldoQuantConsig(3), tSldMesEst2.adSaldoValorConsig(3), tSldMesEst2.adSaldoQuantDemo(3), tSldMesEst2.adSaldoValorDemo(3), tSldMesEst2.adSaldoQuantConserto(3), tSldMesEst2.adSaldoValorConserto(3), tSldMesEst2.adSaldoQuantOutros(3), tSldMesEst2.adSaldoValorOutros(3), tSldMesEst2.adSaldoQuantBenef(3), tSldMesEst2.adSaldoValorBenef(3), _
                                    tSldMesEst2.adSaldoQuantConsig(4), tSldMesEst2.adSaldoValorConsig(4), tSldMesEst2.adSaldoQuantDemo(4), tSldMesEst2.adSaldoValorDemo(4), tSldMesEst2.adSaldoQuantConserto(4), tSldMesEst2.adSaldoValorConserto(4), tSldMesEst2.adSaldoQuantOutros(4), tSldMesEst2.adSaldoValorOutros(4), tSldMesEst2.adSaldoQuantBenef(4), tSldMesEst2.adSaldoValorBenef(4), tSldMesEst2.adSaldoQuantConsig(5), tSldMesEst2.adSaldoValorConsig(5), tSldMesEst2.adSaldoQuantDemo(5), tSldMesEst2.adSaldoValorDemo(5), tSldMesEst2.adSaldoQuantConserto(5), tSldMesEst2.adSaldoValorConserto(5), tSldMesEst2.adSaldoQuantOutros(5), tSldMesEst2.adSaldoValorOutros(5), tSldMesEst2.adSaldoQuantBenef(5), tSldMesEst2.adSaldoValorBenef(5), _
                                    tSldMesEst2.adSaldoQuantConsig(6), tSldMesEst2.adSaldoValorConsig(6), tSldMesEst2.adSaldoQuantDemo(6), tSldMesEst2.adSaldoValorDemo(6), tSldMesEst2.adSaldoQuantConserto(6), tSldMesEst2.adSaldoValorConserto(6), tSldMesEst2.adSaldoQuantOutros(6), tSldMesEst2.adSaldoValorOutros(6), tSldMesEst2.adSaldoQuantBenef(6), tSldMesEst2.adSaldoValorBenef(6), tSldMesEst2.adSaldoQuantConsig(7), tSldMesEst2.adSaldoValorConsig(7), tSldMesEst2.adSaldoQuantDemo(7), tSldMesEst2.adSaldoValorDemo(7), tSldMesEst2.adSaldoQuantConserto(7), tSldMesEst2.adSaldoValorConserto(7), tSldMesEst2.adSaldoQuantOutros(7), tSldMesEst2.adSaldoValorOutros(7), tSldMesEst2.adSaldoQuantBenef(7), tSldMesEst2.adSaldoValorBenef(7), _
                                    tSldMesEst2.adSaldoQuantConsig(8), tSldMesEst2.adSaldoValorConsig(8), tSldMesEst2.adSaldoQuantDemo(8), tSldMesEst2.adSaldoValorDemo(8), tSldMesEst2.adSaldoQuantConserto(8), tSldMesEst2.adSaldoValorConserto(8), tSldMesEst2.adSaldoQuantOutros(8), tSldMesEst2.adSaldoValorOutros(8), tSldMesEst2.adSaldoQuantBenef(8), tSldMesEst2.adSaldoValorBenef(8), tSldMesEst2.adSaldoQuantConsig(9), tSldMesEst2.adSaldoValorConsig(9), tSldMesEst2.adSaldoQuantDemo(9), tSldMesEst2.adSaldoValorDemo(9), tSldMesEst2.adSaldoQuantConserto(9), tSldMesEst2.adSaldoValorConserto(9), tSldMesEst2.adSaldoQuantOutros(9), tSldMesEst2.adSaldoValorOutros(9), tSldMesEst2.adSaldoQuantBenef(9), tSldMesEst2.adSaldoValorBenef(9), _
                                    tSldMesEst2.adSaldoQuantConsig(10), tSldMesEst2.adSaldoValorConsig(10), tSldMesEst2.adSaldoQuantDemo(10), tSldMesEst2.adSaldoValorDemo(10), tSldMesEst2.adSaldoQuantConserto(10), tSldMesEst2.adSaldoValorConserto(10), tSldMesEst2.adSaldoQuantOutros(10), tSldMesEst2.adSaldoValorOutros(10), tSldMesEst2.adSaldoQuantBenef(10), tSldMesEst2.adSaldoValorBenef(10), tSldMesEst2.adSaldoQuantConsig(11), tSldMesEst2.adSaldoValorConsig(11), tSldMesEst2.adSaldoQuantDemo(11), tSldMesEst2.adSaldoValorDemo(11), tSldMesEst2.adSaldoQuantConserto(11), tSldMesEst2.adSaldoValorConserto(11), tSldMesEst2.adSaldoQuantOutros(11), tSldMesEst2.adSaldoValorOutros(11), tSldMesEst2.adSaldoQuantBenef(11), tSldMesEst2.adSaldoValorBenef(11), _
                                    tSldMesEst2.adSaldoQuantConsig(12), tSldMesEst2.adSaldoValorConsig(12), tSldMesEst2.adSaldoQuantDemo(12), tSldMesEst2.adSaldoValorDemo(12), tSldMesEst2.adSaldoQuantConserto(12), tSldMesEst2.adSaldoValorConserto(12), tSldMesEst2.adSaldoQuantOutros(12), tSldMesEst2.adSaldoValorOutros(12), tSldMesEst2.adSaldoQuantBenef(12), tSldMesEst2.adSaldoValorBenef(12), tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 83691

    'Busca o primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83692

    Do While lErro = AD_SQL_SUCESSO

        'soma um a ano para que seja criado outro ano
        tSldMesEst2.iAno = tSldMesEst2.iAno + 1
        
        dQuantInicialConsig = tSldMesEst2.dQuantInicialConsig
        dValorInicialConsig = tSldMesEst2.dValorInicialConsig
        dQuantInicialDemo = tSldMesEst2.dQuantInicialDemo
        dValorInicialDemo = tSldMesEst2.dValorInicialDemo
        dQuantInicialConserto = tSldMesEst2.dQuantInicialConserto
        dValorInicialConserto = tSldMesEst2.dValorInicialConserto
        dQuantInicialOutros = tSldMesEst2.dQuantInicialOutros
        dValorInicialOutros = tSldMesEst2.dValorInicialOutros
        dQuantInicialBenef = tSldMesEst2.dQuantInicialBenef
        dValorInicialBenef = tSldMesEst2.dValorInicialBenef
        
        'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
        For iIndice = 1 To 12

            dQuantInicialConsig = dQuantInicialConsig + tSldMesEst2.adSaldoQuantConsig(iIndice)
            dValorInicialConsig = dValorInicialConsig + tSldMesEst2.adSaldoValorConsig(iIndice)
            dQuantInicialDemo = dQuantInicialDemo + tSldMesEst2.adSaldoQuantDemo(iIndice)
            dValorInicialDemo = dValorInicialDemo + tSldMesEst2.adSaldoValorDemo(iIndice)
            dQuantInicialConserto = dQuantInicialConserto + tSldMesEst2.adSaldoQuantConserto(iIndice)
            dValorInicialConserto = dValorInicialConserto + tSldMesEst2.adSaldoValorConserto(iIndice)
            dQuantInicialOutros = dQuantInicialOutros + tSldMesEst2.adSaldoQuantOutros(iIndice)
            dValorInicialOutros = dValorInicialOutros + tSldMesEst2.adSaldoValorOutros(iIndice)
            dQuantInicialBenef = dQuantInicialBenef + tSldMesEst2.adSaldoQuantBenef(iIndice)
            dValorInicialBenef = dValorInicialBenef + tSldMesEst2.adSaldoValorBenef(iIndice)

        Next
        
        'Le os dados de SldMesEst2 para o ano em questão
        lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEst2 WHERE Ano =? AND FilialEmpresa =? AND Produto = ?", 0, iAno, tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 83693
        
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83694
        
        If lErro = AD_SQL_SUCESSO Then
        
            'Insere os dados no BD
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2 SET QuantInicialConsig = ?, ValorInicialConsig = ?, QuantInicialDemo = ?, ValorInicialDemo = ?, QuantInicialConserto = ?, ValorInicialConserto = ?, QuantInicialOutros = ?, ValorInicialOutros = ?, QuantInicialBenef = ?, ValorInicialBenef = ?, CustoMedioConsig12 = ?, CustoMedioDemo12 = ?, CustoMedioConserto12 = ?, CustoMedioOutros12 = ?, CustoMedioBenef12 = ?", lComando1, dQuantInicialConsig, dValorInicialConsig, dQuantInicialDemo, dValorInicialDemo, dQuantInicialConserto, dValorInicialConserto, dQuantInicialOutros, dValorInicialOutros, dQuantInicialBenef, dValorInicialBenef, tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12))
            If lErro <> AD_SQL_SUCESSO Then gError 83695
        
        End If
        
        'Busca o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83696

    Loop
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    SldMesEst2_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst2_Atualiza_Ano_Reproc:

    SldMesEst2_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83688, 83689, 83690
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83691, 83692, 83696
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2_2", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 83693, 83694
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST21", gErr, tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto)

        Case 83695
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST2_1", gErr, tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151821)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEstAlm1_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEstAlm1 As typeSldMesEstAlm1
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim vbMesRes As VbMsgBoxResult
Dim iAlmoxarifado As Integer

On Error GoTo Erro_SldMesEstAlm1_Atualiza_Ano

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60951
    
    sComando_SQL = "INSERT INTO SldMesEstAlm1 (Ano, Almoxarifado, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialBenef3, ValorInicialBenef3)"
    sComando_SQL = sComando_SQL & " " & "(SELECT S.Ano + 1, S.Almoxarifado, S.Produto,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialConsig3 + SaldoQuantConsig31 + SaldoQuantConsig32 + SaldoQuantConsig33 + SaldoQuantConsig34"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConsig35 + SaldoQuantConsig36 + SaldoQuantConsig37 + SaldoQuantConsig38"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConsig39 + SaldoQuantConsig310 + SaldoQuantConsig311 + SaldoQuantConsig312 AS SaldoQuantConsig3,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialConsig3 + SaldoValorConsig31 + SaldoValorConsig32 + SaldoValorConsig33 + SaldoValorConsig34"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConsig35 + SaldoValorConsig36 + SaldoValorConsig37 + SaldoValorConsig38"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConsig39 + SaldoValorConsig310 + SaldoValorConsig311 + SaldoValorConsig312 AS SaldoValorConsig3,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialDemo3 + SaldoQuantDemo31 + SaldoQuantDemo32 + SaldoQuantDemo33 + SaldoQuantDemo34"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantDemo35 + SaldoQuantDemo36 + SaldoQuantDemo37 + SaldoQuantDemo38 + SaldoQuantDemo39"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantDemo310 + SaldoQuantDemo311 + SaldoQuantDemo312 AS SaldoQuantDemo3,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialDemo3 + SaldoValorDemo31 + SaldoValorDemo32 + SaldoValorDemo33 + SaldoValorDemo34"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorDemo35 + SaldoValorDemo36 + SaldoValorDemo37 + SaldoValorDemo38 + SaldoValorDemo39"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorDemo310 + SaldoValorDemo311 + SaldoValorDemo312 AS SaldoValorDemo3,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialConserto3 + SaldoQuantConserto31 + SaldoQuantConserto32 + SaldoQuantConserto33 + SaldoQuantConserto34"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConserto35 + SaldoQuantConserto36 + SaldoQuantConserto37 + SaldoQuantConserto38"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConserto39 + SaldoQuantConserto310 + SaldoQuantConserto311 + SaldoQuantConserto312 AS SaldoQuantConserto3,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialConserto3 + SaldoValorConserto31 + SaldoValorConserto32 + SaldoValorConserto33 + SaldoValorConserto34"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConserto35 + SaldoValorConserto36 + SaldoValorConserto37 + SaldoValorConserto38"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConserto39 + SaldoValorConserto310 + SaldoValorConserto311 + SaldoValorConserto312 AS SaldoValorConserto3,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialOutros3 + SaldoQuantOutros31 + SaldoQuantOutros32 + SaldoQuantOutros33 + SaldoQuantOutros34"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantOutros35 + SaldoQuantOutros36 + SaldoQuantOutros37 + SaldoQuantOutros38"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantOutros39 + SaldoQuantOutros310 + SaldoQuantOutros311 + SaldoQuantOutros312 AS SaldoQuantOutros3,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialOutros3 + SaldoValorOutros31 + SaldoValorOutros32 + SaldoValorOutros33 + SaldoValorOutros34"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorOutros35 + SaldoValorOutros36 + SaldoValorOutros37 + SaldoValorOutros38"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorOutros39 + SaldoValorOutros310 + SaldoValorOutros311 + SaldoValorOutros312 AS SaldoValorOutros3,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialBenef3 + SaldoQuantBenef31 + SaldoQuantBenef32 + SaldoQuantBenef33 + SaldoQuantBenef34"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantBenef35 + SaldoQuantBenef36 + SaldoQuantBenef37 + SaldoQuantBenef38"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantBenef39 + SaldoQuantBenef310 + SaldoQuantBenef311 + SaldoQuantBenef312 AS SaldoQuantBenef3,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialBenef3 + SaldoValorBenef31 + SaldoValorBenef32 + SaldoValorBenef33 + SaldoValorBenef34"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorBenef35 + SaldoValorBenef36 + SaldoValorBenef37 + SaldoValorBenef38"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorBenef39 + SaldoValorBenef310 + SaldoValorBenef311 + SaldoValorBenef312 AS SaldoValorBenef3"
    sComando_SQL = sComando_SQL & " " & "FROM SldMesEstAlm1 AS S, Almoxarifado As A"
    sComando_SQL = sComando_SQL & " " & "WHERE S.Ano =? And S.Almoxarifado = A.Codigo AND A.FilialEmpresa = ?)"

    'Insere os dados no BD
    lErro = Comando_Executar(lComando, sComando_SQL, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60946

'    'Inicializa comandos
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 60952
'
'    'Inicializa comandos
'    lComando2 = Comando_Abrir()
'    If lComando2 = 0 Then Error 60953
'
'    'Le os Almoxarifados da Filial em questão
'    lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?", iAlmoxarifado, objSldMesEst.iFilialEmpresa)
'    If lErro <> AD_SQL_SUCESSO Then Error 60954
'
'    lErro = Comando_BuscarPrimeiro(lComando1)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60955
'
'    Do While lErro = AD_SQL_SUCESSO
'
'        lErro = Comando_LockExclusive(lComando1)
'        If lErro <> AD_SQL_SUCESSO Then Error 60956
'
'        tSldMesEstAlm1.sProduto = String(STRING_PRODUTO, 0)
'
'        'forma o comando do SQL
'        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
'                        "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
'                        "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312" & _
'                        " FROM SldMesEstAlm1 WHERE Ano =? And Almoxarifado =?"
'
'        'Le os dados de SldMesEstAlm1 para o ano em questão
'        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEstAlm1.iAno, tSldMesEstAlm1.sProduto, tSldMesEstAlm1.dQuantInicialConsig3, tSldMesEstAlm1.dValorInicialConsig3, tSldMesEstAlm1.dQuantInicialDemo3, tSldMesEstAlm1.dValorInicialDemo3, tSldMesEstAlm1.dQuantInicialConserto3, tSldMesEstAlm1.dValorInicialConserto3, tSldMesEstAlm1.dQuantInicialOutros3, tSldMesEstAlm1.dValorInicialOutros3, tSldMesEstAlm1.dQuantInicialBenef3, tSldMesEstAlm1.dValorInicialBenef3, tSldMesEstAlm1.adSaldoQuantConsig3(1), tSldMesEstAlm1.adSaldoValorConsig3(1), tSldMesEstAlm1.adSaldoQuantDemo3(1), tSldMesEstAlm1.adSaldoValorDemo3(1), tSldMesEstAlm1.adSaldoQuantConserto3(1), tSldMesEstAlm1.adSaldoValorConserto3(1), tSldMesEstAlm1.adSaldoQuantOutros3(1), tSldMesEstAlm1.adSaldoValorOutros3(1), tSldMesEstAlm1.adSaldoQuantBenef3(1), tSldMesEstAlm1.adSaldoValorBenef3(1), _
'                                    tSldMesEstAlm1.adSaldoQuantConsig3(2), tSldMesEstAlm1.adSaldoValorConsig3(2), tSldMesEstAlm1.adSaldoQuantDemo3(2), tSldMesEstAlm1.adSaldoValorDemo3(2), tSldMesEstAlm1.adSaldoQuantConserto3(2), tSldMesEstAlm1.adSaldoValorConserto3(2), tSldMesEstAlm1.adSaldoQuantOutros3(2), tSldMesEstAlm1.adSaldoValorOutros3(2), tSldMesEstAlm1.adSaldoQuantBenef3(2), tSldMesEstAlm1.adSaldoValorBenef3(2), tSldMesEstAlm1.adSaldoQuantConsig3(3), tSldMesEstAlm1.adSaldoValorConsig3(3), tSldMesEstAlm1.adSaldoQuantDemo3(3), tSldMesEstAlm1.adSaldoValorDemo3(3), tSldMesEstAlm1.adSaldoQuantConserto3(3), tSldMesEstAlm1.adSaldoValorConserto3(3), tSldMesEstAlm1.adSaldoQuantOutros3(3), tSldMesEstAlm1.adSaldoValorOutros3(3), tSldMesEstAlm1.adSaldoQuantBenef3(3), tSldMesEstAlm1.adSaldoValorBenef3(3), _
'                                    tSldMesEstAlm1.adSaldoQuantConsig3(4), tSldMesEstAlm1.adSaldoValorConsig3(4), tSldMesEstAlm1.adSaldoQuantDemo3(4), tSldMesEstAlm1.adSaldoValorDemo3(4), tSldMesEstAlm1.adSaldoQuantConserto3(4), tSldMesEstAlm1.adSaldoValorConserto3(4), tSldMesEstAlm1.adSaldoQuantOutros3(4), tSldMesEstAlm1.adSaldoValorOutros3(4), tSldMesEstAlm1.adSaldoQuantBenef3(4), tSldMesEstAlm1.adSaldoValorBenef3(4), tSldMesEstAlm1.adSaldoQuantConsig3(5), tSldMesEstAlm1.adSaldoValorConsig3(5), tSldMesEstAlm1.adSaldoQuantDemo3(5), tSldMesEstAlm1.adSaldoValorDemo3(5), tSldMesEstAlm1.adSaldoQuantConserto3(5), tSldMesEstAlm1.adSaldoValorConserto3(5), tSldMesEstAlm1.adSaldoQuantOutros3(5), tSldMesEstAlm1.adSaldoValorOutros3(5), tSldMesEstAlm1.adSaldoQuantBenef3(5), tSldMesEstAlm1.adSaldoValorBenef3(5), _
'                                    tSldMesEstAlm1.adSaldoQuantConsig3(6), tSldMesEstAlm1.adSaldoValorConsig3(6), tSldMesEstAlm1.adSaldoQuantDemo3(6), tSldMesEstAlm1.adSaldoValorDemo3(6), tSldMesEstAlm1.adSaldoQuantConserto3(6), tSldMesEstAlm1.adSaldoValorConserto3(6), tSldMesEstAlm1.adSaldoQuantOutros3(6), tSldMesEstAlm1.adSaldoValorOutros3(6), tSldMesEstAlm1.adSaldoQuantBenef3(6), tSldMesEstAlm1.adSaldoValorBenef3(6), tSldMesEstAlm1.adSaldoQuantConsig3(7), tSldMesEstAlm1.adSaldoValorConsig3(7), tSldMesEstAlm1.adSaldoQuantDemo3(7), tSldMesEstAlm1.adSaldoValorDemo3(7), tSldMesEstAlm1.adSaldoQuantConserto3(7), tSldMesEstAlm1.adSaldoValorConserto3(7), tSldMesEstAlm1.adSaldoQuantOutros3(7), tSldMesEstAlm1.adSaldoValorOutros3(7), tSldMesEstAlm1.adSaldoQuantBenef3(7), tSldMesEstAlm1.adSaldoValorBenef3(7), _
'                                    tSldMesEstAlm1.adSaldoQuantConsig3(8), tSldMesEstAlm1.adSaldoValorConsig3(8), tSldMesEstAlm1.adSaldoQuantDemo3(8), tSldMesEstAlm1.adSaldoValorDemo3(8), tSldMesEstAlm1.adSaldoQuantConserto3(8), tSldMesEstAlm1.adSaldoValorConserto3(8), tSldMesEstAlm1.adSaldoQuantOutros3(8), tSldMesEstAlm1.adSaldoValorOutros3(8), tSldMesEstAlm1.adSaldoQuantBenef3(8), tSldMesEstAlm1.adSaldoValorBenef3(8), tSldMesEstAlm1.adSaldoQuantConsig3(9), tSldMesEstAlm1.adSaldoValorConsig3(9), tSldMesEstAlm1.adSaldoQuantDemo3(9), tSldMesEstAlm1.adSaldoValorDemo3(9), tSldMesEstAlm1.adSaldoQuantConserto3(9), tSldMesEstAlm1.adSaldoValorConserto3(9), tSldMesEstAlm1.adSaldoQuantOutros3(9), tSldMesEstAlm1.adSaldoValorOutros3(9), tSldMesEstAlm1.adSaldoQuantBenef3(9), tSldMesEstAlm1.adSaldoValorBenef3(9), _
'                                    tSldMesEstAlm1.adSaldoQuantConsig3(10), tSldMesEstAlm1.adSaldoValorConsig3(10), tSldMesEstAlm1.adSaldoQuantDemo3(10), tSldMesEstAlm1.adSaldoValorDemo3(10), tSldMesEstAlm1.adSaldoQuantConserto3(10), tSldMesEstAlm1.adSaldoValorConserto3(10), tSldMesEstAlm1.adSaldoQuantOutros3(10), tSldMesEstAlm1.adSaldoValorOutros3(10), tSldMesEstAlm1.adSaldoQuantBenef3(10), tSldMesEstAlm1.adSaldoValorBenef3(10), tSldMesEstAlm1.adSaldoQuantConsig3(11), tSldMesEstAlm1.adSaldoValorConsig3(11), tSldMesEstAlm1.adSaldoQuantDemo3(11), tSldMesEstAlm1.adSaldoValorDemo3(11), tSldMesEstAlm1.adSaldoQuantConserto3(11), tSldMesEstAlm1.adSaldoValorConserto3(11), tSldMesEstAlm1.adSaldoQuantOutros3(11), tSldMesEstAlm1.adSaldoValorOutros3(11), tSldMesEstAlm1.adSaldoQuantBenef3(11), tSldMesEstAlm1.adSaldoValorBenef3(11), _
'                                    tSldMesEstAlm1.adSaldoQuantConsig3(12), tSldMesEstAlm1.adSaldoValorConsig3(12), tSldMesEstAlm1.adSaldoQuantDemo3(12), tSldMesEstAlm1.adSaldoValorDemo3(12), tSldMesEstAlm1.adSaldoQuantConserto3(12), tSldMesEstAlm1.adSaldoValorConserto3(12), tSldMesEstAlm1.adSaldoQuantOutros3(12), tSldMesEstAlm1.adSaldoValorOutros3(12), tSldMesEstAlm1.adSaldoQuantBenef3(12), tSldMesEstAlm1.adSaldoValorBenef3(12), objSldMesEst.iAno, iAlmoxarifado)
'        If lErro <> AD_SQL_SUCESSO Then Error 60957
'
'        'Busca o primeiro produto
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60958
'
'        Do While lErro = AD_SQL_SUCESSO
'
''            'lock do registro em questão
''            lErro = Comando_LockExclusive(lComando)
''            If lErro <> AD_SQL_SUCESSO Then Error 60959
'
'            'soma um a ano para que seja criado outro ano
'            tSldMesEstAlm1.iAno = tSldMesEstAlm1.iAno + 1
'
'            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
'            For iIndice = 1 To 12
'
'                tSldMesEstAlm1.dQuantInicialConsig3 = tSldMesEstAlm1.dQuantInicialConsig3 + tSldMesEstAlm1.adSaldoQuantConsig3(iIndice)
'                tSldMesEstAlm1.dValorInicialConsig3 = tSldMesEstAlm1.dValorInicialConsig3 + tSldMesEstAlm1.adSaldoValorConsig3(iIndice)
'                tSldMesEstAlm1.dQuantInicialDemo3 = tSldMesEstAlm1.dQuantInicialDemo3 + tSldMesEstAlm1.adSaldoQuantDemo3(iIndice)
'                tSldMesEstAlm1.dValorInicialDemo3 = tSldMesEstAlm1.dValorInicialDemo3 + tSldMesEstAlm1.adSaldoValorDemo3(iIndice)
'                tSldMesEstAlm1.dQuantInicialConserto3 = tSldMesEstAlm1.dQuantInicialConserto3 + tSldMesEstAlm1.adSaldoQuantConserto3(iIndice)
'                tSldMesEstAlm1.dValorInicialConserto3 = tSldMesEstAlm1.dValorInicialConserto3 + tSldMesEstAlm1.adSaldoValorConserto3(iIndice)
'                tSldMesEstAlm1.dQuantInicialOutros3 = tSldMesEstAlm1.dQuantInicialOutros3 + tSldMesEstAlm1.adSaldoQuantOutros3(iIndice)
'                tSldMesEstAlm1.dValorInicialOutros3 = tSldMesEstAlm1.dValorInicialOutros3 + tSldMesEstAlm1.adSaldoValorOutros3(iIndice)
'                tSldMesEstAlm1.dQuantInicialBenef3 = tSldMesEstAlm1.dQuantInicialBenef3 + tSldMesEstAlm1.adSaldoQuantBenef3(iIndice)
'                tSldMesEstAlm1.dValorInicialBenef3 = tSldMesEstAlm1.dValorInicialBenef3 + tSldMesEstAlm1.adSaldoValorBenef3(iIndice)
'
'            Next
'
'            'Insere os dados no BD
'            lErro = Comando_Executar(lComando2, "INSERT INTO SldMesEstAlm1 (Ano, Almoxarifado, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEstAlm1.iAno, iAlmoxarifado, tSldMesEstAlm1.sProduto, tSldMesEstAlm1.dQuantInicialConsig3, tSldMesEstAlm1.dValorInicialConsig3, tSldMesEstAlm1.dQuantInicialDemo3, tSldMesEstAlm1.dValorInicialDemo3, tSldMesEstAlm1.dQuantInicialConserto3, tSldMesEstAlm1.dValorInicialConserto3, tSldMesEstAlm1.dQuantInicialOutros3, tSldMesEstAlm1.dValorInicialOutros3, tSldMesEstAlm1.dQuantInicialBenef3, tSldMesEstAlm1.dValorInicialBenef3)
'            If lErro <> AD_SQL_SUCESSO Then Error 60960
'
'            'Joga o contador na tela
'            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
'
'            DoEvents
'
'            'verifica se foi cancelado o fechamento do mes
'            If iCancela = CANCELA Then
'
'                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
'
'                If vbMesRes = vbYes Then Error 60961
'
'                iCancela = CANCELA_BATCH
'
'            End If
'
'            'Busca o proximo produto
'            lErro = Comando_BuscarProximo(lComando)
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60962
'
'        Loop
'
'        'Busca o o proximo produto
'        lErro = Comando_BuscarProximo(lComando1)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60963
'
'    Loop
'
    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'    Call Comando_Fechar(lComando2)

    SldMesEstAlm1_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEstAlm1_Atualiza_Ano:

    SldMesEstAlm1_Atualiza_Ano = Err

    Select Case Err
            
        Case 60951, 60952, 60953
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60954, 60955
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", Err, objSldMesEst.iFilialEmpresa)

        Case 60956
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO1", Err, iAlmoxarifado)

        Case 60516, 60517, 60518
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM11", Err, objSldMesEst.iAno, iAlmoxarifado)

        Case 60519
            lErro = lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESESTALM1", Err, tSldMesEstAlm1.iAno, iAlmoxarifado, tSldMesEstAlm1.sProduto)

        Case 60946
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM1", Err, tSldMesEstAlm1.iAno, iAlmoxarifado, tSldMesEstAlm1.sProduto)
            
        Case 60947
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151822)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEstAlm1_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Acerta os saldos iniciais do proximo ano para os produtos/almoxarifado da Filial em questao

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEstAlm1 As typeSldMesEstAlm1
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult
Dim iAlmoxarifado As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesEstAlm1_Atualiza_Ano_Reproc

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 83710

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 83711

    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 83712

    'Inicializa comandos
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 83713

    'Le os Almoxarifados da Filial em questão
    lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?", iAlmoxarifado, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 83714

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83715

    Do While lErro = AD_SQL_SUCESSO

        tSldMesEstAlm1.sProduto = String(STRING_PRODUTO, 0)

        If objSldMesEst.sProduto = "" Then
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                            "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                            "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312" & _
                            " FROM SldMesEstAlm1 WHERE Ano =? And Almoxarifado =?"
            
            'Le os dados de SldMesEstAlm1 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEstAlm1.iAno, tSldMesEstAlm1.sProduto, tSldMesEstAlm1.dQuantInicialConsig3, tSldMesEstAlm1.dValorInicialConsig3, tSldMesEstAlm1.dQuantInicialDemo3, tSldMesEstAlm1.dValorInicialDemo3, tSldMesEstAlm1.dQuantInicialConserto3, tSldMesEstAlm1.dValorInicialConserto3, tSldMesEstAlm1.dQuantInicialOutros3, tSldMesEstAlm1.dValorInicialOutros3, tSldMesEstAlm1.dQuantInicialBenef3, tSldMesEstAlm1.dValorInicialBenef3, tSldMesEstAlm1.adSaldoQuantConsig3(1), tSldMesEstAlm1.adSaldoValorConsig3(1), tSldMesEstAlm1.adSaldoQuantDemo3(1), tSldMesEstAlm1.adSaldoValorDemo3(1), tSldMesEstAlm1.adSaldoQuantConserto3(1), tSldMesEstAlm1.adSaldoValorConserto3(1), tSldMesEstAlm1.adSaldoQuantOutros3(1), tSldMesEstAlm1.adSaldoValorOutros3(1), tSldMesEstAlm1.adSaldoQuantBenef3(1), tSldMesEstAlm1.adSaldoValorBenef3(1), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(2), tSldMesEstAlm1.adSaldoValorConsig3(2), tSldMesEstAlm1.adSaldoQuantDemo3(2), tSldMesEstAlm1.adSaldoValorDemo3(2), tSldMesEstAlm1.adSaldoQuantConserto3(2), tSldMesEstAlm1.adSaldoValorConserto3(2), tSldMesEstAlm1.adSaldoQuantOutros3(2), tSldMesEstAlm1.adSaldoValorOutros3(2), tSldMesEstAlm1.adSaldoQuantBenef3(2), tSldMesEstAlm1.adSaldoValorBenef3(2), tSldMesEstAlm1.adSaldoQuantConsig3(3), tSldMesEstAlm1.adSaldoValorConsig3(3), tSldMesEstAlm1.adSaldoQuantDemo3(3), tSldMesEstAlm1.adSaldoValorDemo3(3), tSldMesEstAlm1.adSaldoQuantConserto3(3), tSldMesEstAlm1.adSaldoValorConserto3(3), tSldMesEstAlm1.adSaldoQuantOutros3(3), tSldMesEstAlm1.adSaldoValorOutros3(3), tSldMesEstAlm1.adSaldoQuantBenef3(3), tSldMesEstAlm1.adSaldoValorBenef3(3), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(4), tSldMesEstAlm1.adSaldoValorConsig3(4), tSldMesEstAlm1.adSaldoQuantDemo3(4), tSldMesEstAlm1.adSaldoValorDemo3(4), tSldMesEstAlm1.adSaldoQuantConserto3(4), tSldMesEstAlm1.adSaldoValorConserto3(4), tSldMesEstAlm1.adSaldoQuantOutros3(4), tSldMesEstAlm1.adSaldoValorOutros3(4), tSldMesEstAlm1.adSaldoQuantBenef3(4), tSldMesEstAlm1.adSaldoValorBenef3(4), tSldMesEstAlm1.adSaldoQuantConsig3(5), tSldMesEstAlm1.adSaldoValorConsig3(5), tSldMesEstAlm1.adSaldoQuantDemo3(5), tSldMesEstAlm1.adSaldoValorDemo3(5), tSldMesEstAlm1.adSaldoQuantConserto3(5), tSldMesEstAlm1.adSaldoValorConserto3(5), tSldMesEstAlm1.adSaldoQuantOutros3(5), tSldMesEstAlm1.adSaldoValorOutros3(5), tSldMesEstAlm1.adSaldoQuantBenef3(5), tSldMesEstAlm1.adSaldoValorBenef3(5), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(6), tSldMesEstAlm1.adSaldoValorConsig3(6), tSldMesEstAlm1.adSaldoQuantDemo3(6), tSldMesEstAlm1.adSaldoValorDemo3(6), tSldMesEstAlm1.adSaldoQuantConserto3(6), tSldMesEstAlm1.adSaldoValorConserto3(6), tSldMesEstAlm1.adSaldoQuantOutros3(6), tSldMesEstAlm1.adSaldoValorOutros3(6), tSldMesEstAlm1.adSaldoQuantBenef3(6), tSldMesEstAlm1.adSaldoValorBenef3(6), tSldMesEstAlm1.adSaldoQuantConsig3(7), tSldMesEstAlm1.adSaldoValorConsig3(7), tSldMesEstAlm1.adSaldoQuantDemo3(7), tSldMesEstAlm1.adSaldoValorDemo3(7), tSldMesEstAlm1.adSaldoQuantConserto3(7), tSldMesEstAlm1.adSaldoValorConserto3(7), tSldMesEstAlm1.adSaldoQuantOutros3(7), tSldMesEstAlm1.adSaldoValorOutros3(7), tSldMesEstAlm1.adSaldoQuantBenef3(7), tSldMesEstAlm1.adSaldoValorBenef3(7), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(8), tSldMesEstAlm1.adSaldoValorConsig3(8), tSldMesEstAlm1.adSaldoQuantDemo3(8), tSldMesEstAlm1.adSaldoValorDemo3(8), tSldMesEstAlm1.adSaldoQuantConserto3(8), tSldMesEstAlm1.adSaldoValorConserto3(8), tSldMesEstAlm1.adSaldoQuantOutros3(8), tSldMesEstAlm1.adSaldoValorOutros3(8), tSldMesEstAlm1.adSaldoQuantBenef3(8), tSldMesEstAlm1.adSaldoValorBenef3(8), tSldMesEstAlm1.adSaldoQuantConsig3(9), tSldMesEstAlm1.adSaldoValorConsig3(9), tSldMesEstAlm1.adSaldoQuantDemo3(9), tSldMesEstAlm1.adSaldoValorDemo3(9), tSldMesEstAlm1.adSaldoQuantConserto3(9), tSldMesEstAlm1.adSaldoValorConserto3(9), tSldMesEstAlm1.adSaldoQuantOutros3(9), tSldMesEstAlm1.adSaldoValorOutros3(9), tSldMesEstAlm1.adSaldoQuantBenef3(9), tSldMesEstAlm1.adSaldoValorBenef3(9), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(10), tSldMesEstAlm1.adSaldoValorConsig3(10), tSldMesEstAlm1.adSaldoQuantDemo3(10), tSldMesEstAlm1.adSaldoValorDemo3(10), tSldMesEstAlm1.adSaldoQuantConserto3(10), tSldMesEstAlm1.adSaldoValorConserto3(10), tSldMesEstAlm1.adSaldoQuantOutros3(10), tSldMesEstAlm1.adSaldoValorOutros3(10), tSldMesEstAlm1.adSaldoQuantBenef3(10), tSldMesEstAlm1.adSaldoValorBenef3(10), tSldMesEstAlm1.adSaldoQuantConsig3(11), tSldMesEstAlm1.adSaldoValorConsig3(11), tSldMesEstAlm1.adSaldoQuantDemo3(11), tSldMesEstAlm1.adSaldoValorDemo3(11), tSldMesEstAlm1.adSaldoQuantConserto3(11), tSldMesEstAlm1.adSaldoValorConserto3(11), tSldMesEstAlm1.adSaldoQuantOutros3(11), tSldMesEstAlm1.adSaldoValorOutros3(11), tSldMesEstAlm1.adSaldoQuantBenef3(11), tSldMesEstAlm1.adSaldoValorBenef3(11), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(12), tSldMesEstAlm1.adSaldoValorConsig3(12), tSldMesEstAlm1.adSaldoQuantDemo3(12), tSldMesEstAlm1.adSaldoValorDemo3(12), tSldMesEstAlm1.adSaldoQuantConserto3(12), tSldMesEstAlm1.adSaldoValorConserto3(12), tSldMesEstAlm1.adSaldoQuantOutros3(12), tSldMesEstAlm1.adSaldoValorOutros3(12), tSldMesEstAlm1.adSaldoQuantBenef3(12), tSldMesEstAlm1.adSaldoValorBenef3(12), objSldMesEst.iAno, iAlmoxarifado)
        Else
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                            "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                            "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312" & _
                            " FROM SldMesEstAlm1 WHERE Ano =? And Almoxarifado =? AND Produto = ?"
            
            'Le os dados de SldMesEstAlm1 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEstAlm1.iAno, tSldMesEstAlm1.sProduto, tSldMesEstAlm1.dQuantInicialConsig3, tSldMesEstAlm1.dValorInicialConsig3, tSldMesEstAlm1.dQuantInicialDemo3, tSldMesEstAlm1.dValorInicialDemo3, tSldMesEstAlm1.dQuantInicialConserto3, tSldMesEstAlm1.dValorInicialConserto3, tSldMesEstAlm1.dQuantInicialOutros3, tSldMesEstAlm1.dValorInicialOutros3, tSldMesEstAlm1.dQuantInicialBenef3, tSldMesEstAlm1.dValorInicialBenef3, tSldMesEstAlm1.adSaldoQuantConsig3(1), tSldMesEstAlm1.adSaldoValorConsig3(1), tSldMesEstAlm1.adSaldoQuantDemo3(1), tSldMesEstAlm1.adSaldoValorDemo3(1), tSldMesEstAlm1.adSaldoQuantConserto3(1), tSldMesEstAlm1.adSaldoValorConserto3(1), tSldMesEstAlm1.adSaldoQuantOutros3(1), tSldMesEstAlm1.adSaldoValorOutros3(1), tSldMesEstAlm1.adSaldoQuantBenef3(1), tSldMesEstAlm1.adSaldoValorBenef3(1), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(2), tSldMesEstAlm1.adSaldoValorConsig3(2), tSldMesEstAlm1.adSaldoQuantDemo3(2), tSldMesEstAlm1.adSaldoValorDemo3(2), tSldMesEstAlm1.adSaldoQuantConserto3(2), tSldMesEstAlm1.adSaldoValorConserto3(2), tSldMesEstAlm1.adSaldoQuantOutros3(2), tSldMesEstAlm1.adSaldoValorOutros3(2), tSldMesEstAlm1.adSaldoQuantBenef3(2), tSldMesEstAlm1.adSaldoValorBenef3(2), tSldMesEstAlm1.adSaldoQuantConsig3(3), tSldMesEstAlm1.adSaldoValorConsig3(3), tSldMesEstAlm1.adSaldoQuantDemo3(3), tSldMesEstAlm1.adSaldoValorDemo3(3), tSldMesEstAlm1.adSaldoQuantConserto3(3), tSldMesEstAlm1.adSaldoValorConserto3(3), tSldMesEstAlm1.adSaldoQuantOutros3(3), tSldMesEstAlm1.adSaldoValorOutros3(3), tSldMesEstAlm1.adSaldoQuantBenef3(3), tSldMesEstAlm1.adSaldoValorBenef3(3), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(4), tSldMesEstAlm1.adSaldoValorConsig3(4), tSldMesEstAlm1.adSaldoQuantDemo3(4), tSldMesEstAlm1.adSaldoValorDemo3(4), tSldMesEstAlm1.adSaldoQuantConserto3(4), tSldMesEstAlm1.adSaldoValorConserto3(4), tSldMesEstAlm1.adSaldoQuantOutros3(4), tSldMesEstAlm1.adSaldoValorOutros3(4), tSldMesEstAlm1.adSaldoQuantBenef3(4), tSldMesEstAlm1.adSaldoValorBenef3(4), tSldMesEstAlm1.adSaldoQuantConsig3(5), tSldMesEstAlm1.adSaldoValorConsig3(5), tSldMesEstAlm1.adSaldoQuantDemo3(5), tSldMesEstAlm1.adSaldoValorDemo3(5), tSldMesEstAlm1.adSaldoQuantConserto3(5), tSldMesEstAlm1.adSaldoValorConserto3(5), tSldMesEstAlm1.adSaldoQuantOutros3(5), tSldMesEstAlm1.adSaldoValorOutros3(5), tSldMesEstAlm1.adSaldoQuantBenef3(5), tSldMesEstAlm1.adSaldoValorBenef3(5), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(6), tSldMesEstAlm1.adSaldoValorConsig3(6), tSldMesEstAlm1.adSaldoQuantDemo3(6), tSldMesEstAlm1.adSaldoValorDemo3(6), tSldMesEstAlm1.adSaldoQuantConserto3(6), tSldMesEstAlm1.adSaldoValorConserto3(6), tSldMesEstAlm1.adSaldoQuantOutros3(6), tSldMesEstAlm1.adSaldoValorOutros3(6), tSldMesEstAlm1.adSaldoQuantBenef3(6), tSldMesEstAlm1.adSaldoValorBenef3(6), tSldMesEstAlm1.adSaldoQuantConsig3(7), tSldMesEstAlm1.adSaldoValorConsig3(7), tSldMesEstAlm1.adSaldoQuantDemo3(7), tSldMesEstAlm1.adSaldoValorDemo3(7), tSldMesEstAlm1.adSaldoQuantConserto3(7), tSldMesEstAlm1.adSaldoValorConserto3(7), tSldMesEstAlm1.adSaldoQuantOutros3(7), tSldMesEstAlm1.adSaldoValorOutros3(7), tSldMesEstAlm1.adSaldoQuantBenef3(7), tSldMesEstAlm1.adSaldoValorBenef3(7), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(8), tSldMesEstAlm1.adSaldoValorConsig3(8), tSldMesEstAlm1.adSaldoQuantDemo3(8), tSldMesEstAlm1.adSaldoValorDemo3(8), tSldMesEstAlm1.adSaldoQuantConserto3(8), tSldMesEstAlm1.adSaldoValorConserto3(8), tSldMesEstAlm1.adSaldoQuantOutros3(8), tSldMesEstAlm1.adSaldoValorOutros3(8), tSldMesEstAlm1.adSaldoQuantBenef3(8), tSldMesEstAlm1.adSaldoValorBenef3(8), tSldMesEstAlm1.adSaldoQuantConsig3(9), tSldMesEstAlm1.adSaldoValorConsig3(9), tSldMesEstAlm1.adSaldoQuantDemo3(9), tSldMesEstAlm1.adSaldoValorDemo3(9), tSldMesEstAlm1.adSaldoQuantConserto3(9), tSldMesEstAlm1.adSaldoValorConserto3(9), tSldMesEstAlm1.adSaldoQuantOutros3(9), tSldMesEstAlm1.adSaldoValorOutros3(9), tSldMesEstAlm1.adSaldoQuantBenef3(9), tSldMesEstAlm1.adSaldoValorBenef3(9), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(10), tSldMesEstAlm1.adSaldoValorConsig3(10), tSldMesEstAlm1.adSaldoQuantDemo3(10), tSldMesEstAlm1.adSaldoValorDemo3(10), tSldMesEstAlm1.adSaldoQuantConserto3(10), tSldMesEstAlm1.adSaldoValorConserto3(10), tSldMesEstAlm1.adSaldoQuantOutros3(10), tSldMesEstAlm1.adSaldoValorOutros3(10), tSldMesEstAlm1.adSaldoQuantBenef3(10), tSldMesEstAlm1.adSaldoValorBenef3(10), tSldMesEstAlm1.adSaldoQuantConsig3(11), tSldMesEstAlm1.adSaldoValorConsig3(11), tSldMesEstAlm1.adSaldoQuantDemo3(11), tSldMesEstAlm1.adSaldoValorDemo3(11), tSldMesEstAlm1.adSaldoQuantConserto3(11), tSldMesEstAlm1.adSaldoValorConserto3(11), tSldMesEstAlm1.adSaldoQuantOutros3(11), tSldMesEstAlm1.adSaldoValorOutros3(11), tSldMesEstAlm1.adSaldoQuantBenef3(11), tSldMesEstAlm1.adSaldoValorBenef3(11), _
                                        tSldMesEstAlm1.adSaldoQuantConsig3(12), tSldMesEstAlm1.adSaldoValorConsig3(12), tSldMesEstAlm1.adSaldoQuantDemo3(12), tSldMesEstAlm1.adSaldoValorDemo3(12), tSldMesEstAlm1.adSaldoQuantConserto3(12), tSldMesEstAlm1.adSaldoValorConserto3(12), tSldMesEstAlm1.adSaldoQuantOutros3(12), tSldMesEstAlm1.adSaldoValorOutros3(12), tSldMesEstAlm1.adSaldoQuantBenef3(12), tSldMesEstAlm1.adSaldoValorBenef3(12), objSldMesEst.iAno, iAlmoxarifado, objSldMesEst.sProduto)
        
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 83716

        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83717

        Do While lErro = AD_SQL_SUCESSO

            'soma um a ano para que seja criado outro ano
            tSldMesEstAlm1.iAno = tSldMesEstAlm1.iAno + 1
        
            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
            For iIndice = 1 To 12
    
                tSldMesEstAlm1.dQuantInicialConsig3 = tSldMesEstAlm1.dQuantInicialConsig3 + tSldMesEstAlm1.adSaldoQuantConsig3(iIndice)
                tSldMesEstAlm1.dValorInicialConsig3 = tSldMesEstAlm1.dValorInicialConsig3 + tSldMesEstAlm1.adSaldoValorConsig3(iIndice)
                tSldMesEstAlm1.dQuantInicialDemo3 = tSldMesEstAlm1.dQuantInicialDemo3 + tSldMesEstAlm1.adSaldoQuantDemo3(iIndice)
                tSldMesEstAlm1.dValorInicialDemo3 = tSldMesEstAlm1.dValorInicialDemo3 + tSldMesEstAlm1.adSaldoValorDemo3(iIndice)
                tSldMesEstAlm1.dQuantInicialConserto3 = tSldMesEstAlm1.dQuantInicialConserto3 + tSldMesEstAlm1.adSaldoQuantConserto3(iIndice)
                tSldMesEstAlm1.dValorInicialConserto3 = tSldMesEstAlm1.dValorInicialConserto3 + tSldMesEstAlm1.adSaldoValorConserto3(iIndice)
                tSldMesEstAlm1.dQuantInicialOutros3 = tSldMesEstAlm1.dQuantInicialOutros3 + tSldMesEstAlm1.adSaldoQuantOutros3(iIndice)
                tSldMesEstAlm1.dValorInicialOutros3 = tSldMesEstAlm1.dValorInicialOutros3 + tSldMesEstAlm1.adSaldoValorOutros3(iIndice)
                tSldMesEstAlm1.dQuantInicialBenef3 = tSldMesEstAlm1.dQuantInicialBenef3 + tSldMesEstAlm1.adSaldoQuantBenef3(iIndice)
                tSldMesEstAlm1.dValorInicialBenef3 = tSldMesEstAlm1.dValorInicialBenef3 + tSldMesEstAlm1.adSaldoValorBenef3(iIndice)
    
            Next
            
            'Le os dados de SldMesEstAlm1 para o ano em questão
            lErro = Comando_ExecutarPos(lComando2, "SELECT Ano FROM SldMesEstAlm1 WHERE Ano =? AND Almoxarifado =? AND Produto = ?", 0, iAno, tSldMesEstAlm1.iAno, iAlmoxarifado, tSldMesEstAlm1.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 83718
            
            'Busca o primeiro produto
            lErro = Comando_BuscarPrimeiro(lComando2)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83719
            
            If lErro = AD_SQL_SUCESSO Then
            
                'Insere os dados no BD
                lErro = Comando_ExecutarPos(lComando3, "UPDATE SldMesEstAlm1 SET QuantInicialConsig3 = ?, ValorInicialConsig3 = ?, QuantInicialDemo3 = ?, ValorInicialDemo3 = ?, QuantInicialConserto3 = ?, ValorInicialConserto3 = ?, QuantInicialOutros3 = ?, ValorInicialOutros3 = ?, QuantInicialBenef3 = ?, ValorInicialBenef3 = ?", lComando2, tSldMesEstAlm1.dQuantInicialConsig3, tSldMesEstAlm1.dValorInicialConsig3, tSldMesEstAlm1.dQuantInicialDemo3, tSldMesEstAlm1.dValorInicialDemo3, tSldMesEstAlm1.dQuantInicialConserto3, tSldMesEstAlm1.dValorInicialConserto3, tSldMesEstAlm1.dQuantInicialOutros3, tSldMesEstAlm1.dValorInicialOutros3, tSldMesEstAlm1.dQuantInicialBenef3, tSldMesEstAlm1.dValorInicialBenef3)
                If lErro <> AD_SQL_SUCESSO Then gError 83720
            
            End If
            
            'Busca o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83721
    
        Loop
            
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83722
            
    Loop
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    SldMesEstAlm1_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEstAlm1_Atualiza_Ano_Reproc:

    SldMesEstAlm1_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83710, 83711, 83712, 83713
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83714, 83715, 83722
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", gErr, objSldMesEst.iFilialEmpresa)

        Case 83716, 83717, 83721
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM1_1", gErr, objSldMesEst.iAno, iAlmoxarifado)

        Case 83718, 83719
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM11", gErr, tSldMesEstAlm1.iAno, iAlmoxarifado, tSldMesEstAlm1.sProduto)
            
        Case 83720
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESESTALM1", gErr, tSldMesEstAlm1.iAno, iAlmoxarifado, tSldMesEstAlm1.sProduto)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151823)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Private Function SldMesEstAlm2_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEstAlm2 As typeSldMesEstAlm2
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim vbMesRes As VbMsgBoxResult
Dim iAlmoxarifado As Integer

On Error GoTo Erro_SldMesEstAlm2_Atualiza_Ano

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 60989
    
    sComando_SQL = "INSERT INTO SldMesEstAlm2 (Ano, Almoxarifado, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialBenef, ValorInicialBenef)"
    sComando_SQL = sComando_SQL & " " & "(SELECT S.Ano + 1, S.Almoxarifado, S.Produto,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialConsig + SaldoQuantConsig1 + SaldoQuantConsig2 + SaldoQuantConsig3 + SaldoQuantConsig4"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConsig5 + SaldoQuantConsig6 + SaldoQuantConsig7 + SaldoQuantConsig8"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConsig9 + SaldoQuantConsig10 + SaldoQuantConsig11 + SaldoQuantConsig12 AS SaldoQuantConsig,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialConsig + SaldoValorConsig1 + SaldoValorConsig2 + SaldoValorConsig3 + SaldoValorConsig4"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConsig5 + SaldoValorConsig6 + SaldoValorConsig7 + SaldoValorConsig8"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConsig9 + SaldoValorConsig10 + SaldoValorConsig11 + SaldoValorConsig12 AS SaldoValorConsig,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialDemo + SaldoQuantDemo1 + SaldoQuantDemo2 + SaldoQuantDemo3 + SaldoQuantDemo4"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantDemo5 + SaldoQuantDemo6 + SaldoQuantDemo7 + SaldoQuantDemo8 + SaldoQuantDemo9"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantDemo10 + SaldoQuantDemo11 + SaldoQuantDemo12 AS SaldoQuantDemo,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialDemo + SaldoValorDemo1 + SaldoValorDemo2 + SaldoValorDemo3 + SaldoValorDemo4"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorDemo5 + SaldoValorDemo6 + SaldoValorDemo7 + SaldoValorDemo8 + SaldoValorDemo9"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorDemo10 + SaldoValorDemo11 + SaldoValorDemo12 AS SaldoValorDemo,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialConserto + SaldoQuantConserto1 + SaldoQuantConserto2 + SaldoQuantConserto3 + SaldoQuantConserto4"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConserto5 + SaldoQuantConserto6 + SaldoQuantConserto7 + SaldoQuantConserto8"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantConserto9 + SaldoQuantConserto10 + SaldoQuantConserto11 + SaldoQuantConserto12 AS SaldoQuantConserto,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialConserto + SaldoValorConserto1 + SaldoValorConserto2 + SaldoValorConserto3 + SaldoValorConserto4"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConserto5 + SaldoValorConserto6 + SaldoValorConserto7 + SaldoValorConserto8"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorConserto9 + SaldoValorConserto10 + SaldoValorConserto11 + SaldoValorConserto12 AS SaldoValorConserto,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialOutros + SaldoQuantOutros1 + SaldoQuantOutros2 + SaldoQuantOutros3 + SaldoQuantOutros4"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantOutros5 + SaldoQuantOutros6 + SaldoQuantOutros7 + SaldoQuantOutros8"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantOutros9 + SaldoQuantOutros10 + SaldoQuantOutros11 + SaldoQuantOutros12 AS SaldoQuantOutros,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialOutros + SaldoValorOutros1 + SaldoValorOutros2 + SaldoValorOutros3 + SaldoValorOutros4"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorOutros5 + SaldoValorOutros6 + SaldoValorOutros7 + SaldoValorOutros8"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorOutros9 + SaldoValorOutros10 + SaldoValorOutros11 + SaldoValorOutros12 AS SaldoValorOutros,"
    sComando_SQL = sComando_SQL & " " & "QuantInicialBenef + SaldoQuantBenef1 + SaldoQuantBenef2 + SaldoQuantBenef3 + SaldoQuantBenef4"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantBenef5 + SaldoQuantBenef6 + SaldoQuantBenef7 + SaldoQuantBenef8"
    sComando_SQL = sComando_SQL & " " & " + SaldoQuantBenef9 + SaldoQuantBenef10 + SaldoQuantBenef11 + SaldoQuantBenef12 AS SaldoQuantBenef,"
    sComando_SQL = sComando_SQL & " " & "ValorInicialBenef + SaldoValorBenef1 + SaldoValorBenef2 + SaldoValorBenef3 + SaldoValorBenef4"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorBenef5 + SaldoValorBenef6 + SaldoValorBenef7 + SaldoValorBenef8"
    sComando_SQL = sComando_SQL & " " & " + SaldoValorBenef9 + SaldoValorBenef10 + SaldoValorBenef11 + SaldoValorBenef12 AS SaldoValorBenef"
    sComando_SQL = sComando_SQL & " " & "FROM SldMesEstAlm2 AS S, Almoxarifado As A"
    sComando_SQL = sComando_SQL & " " & "WHERE S.Ano =? And S.Almoxarifado = A.Codigo AND A.FilialEmpresa = ?)"

    'Insere os dados no BD
    lErro = Comando_Executar(lComando, sComando_SQL, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60997
    

'    'Inicializa comandos
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then gError 60990
'
'    'Inicializa comandos
'    lComando2 = Comando_Abrir()
'    If lComando2 = 0 Then gError 60991
'
'    'Le os Almoxarifados da Filial em questão
'    lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?", iAlmoxarifado, objSldMesEst.iFilialEmpresa)
'    If lErro <> AD_SQL_SUCESSO Then gError 60992
'
'    lErro = Comando_BuscarPrimeiro(lComando1)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60993
'
'    Do While lErro = AD_SQL_SUCESSO
'
'        lErro = Comando_LockExclusive(lComando1)
'        If lErro <> AD_SQL_SUCESSO Then gError 60994
'
'        tSldMesEstAlm2.sProduto = String(STRING_PRODUTO, 0)
'
'        'forma o comando do SQL
'        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
'                        "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
'                        "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12" & _
'                        " FROM SldMesEstAlm2 WHERE Ano =? And Almoxarifado =?"
'
'        'Le os dados de SldMesEstAlm2 para o ano em questão
'        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEstAlm2.iAno, tSldMesEstAlm2.sProduto, tSldMesEstAlm2.dQuantInicialConsig, tSldMesEstAlm2.dValorInicialConsig, tSldMesEstAlm2.dQuantInicialDemo, tSldMesEstAlm2.dValorInicialDemo, tSldMesEstAlm2.dQuantInicialConserto, tSldMesEstAlm2.dValorInicialConserto, tSldMesEstAlm2.dQuantInicialOutros, tSldMesEstAlm2.dValorInicialOutros, tSldMesEstAlm2.dQuantInicialBenef, tSldMesEstAlm2.dValorInicialBenef, tSldMesEstAlm2.adSaldoQuantConsig(1), tSldMesEstAlm2.adSaldoValorConsig(1), tSldMesEstAlm2.adSaldoQuantDemo(1), tSldMesEstAlm2.adSaldoValorDemo(1), tSldMesEstAlm2.adSaldoQuantConserto(1), tSldMesEstAlm2.adSaldoValorConserto(1), tSldMesEstAlm2.adSaldoQuantOutros(1), tSldMesEstAlm2.adSaldoValorOutros(1), tSldMesEstAlm2.adSaldoQuantBenef(1), tSldMesEstAlm2.adSaldoValorBenef(1), _
'                                    tSldMesEstAlm2.adSaldoQuantConsig(2), tSldMesEstAlm2.adSaldoValorConsig(2), tSldMesEstAlm2.adSaldoQuantDemo(2), tSldMesEstAlm2.adSaldoValorDemo(2), tSldMesEstAlm2.adSaldoQuantConserto(2), tSldMesEstAlm2.adSaldoValorConserto(2), tSldMesEstAlm2.adSaldoQuantOutros(2), tSldMesEstAlm2.adSaldoValorOutros(2), tSldMesEstAlm2.adSaldoQuantBenef(2), tSldMesEstAlm2.adSaldoValorBenef(2), tSldMesEstAlm2.adSaldoQuantConsig(3), tSldMesEstAlm2.adSaldoValorConsig(3), tSldMesEstAlm2.adSaldoQuantDemo(3), tSldMesEstAlm2.adSaldoValorDemo(3), tSldMesEstAlm2.adSaldoQuantConserto(3), tSldMesEstAlm2.adSaldoValorConserto(3), tSldMesEstAlm2.adSaldoQuantOutros(3), tSldMesEstAlm2.adSaldoValorOutros(3), tSldMesEstAlm2.adSaldoQuantBenef(3), tSldMesEstAlm2.adSaldoValorBenef(3), _
'                                    tSldMesEstAlm2.adSaldoQuantConsig(4), tSldMesEstAlm2.adSaldoValorConsig(4), tSldMesEstAlm2.adSaldoQuantDemo(4), tSldMesEstAlm2.adSaldoValorDemo(4), tSldMesEstAlm2.adSaldoQuantConserto(4), tSldMesEstAlm2.adSaldoValorConserto(4), tSldMesEstAlm2.adSaldoQuantOutros(4), tSldMesEstAlm2.adSaldoValorOutros(4), tSldMesEstAlm2.adSaldoQuantBenef(4), tSldMesEstAlm2.adSaldoValorBenef(4), tSldMesEstAlm2.adSaldoQuantConsig(5), tSldMesEstAlm2.adSaldoValorConsig(5), tSldMesEstAlm2.adSaldoQuantDemo(5), tSldMesEstAlm2.adSaldoValorDemo(5), tSldMesEstAlm2.adSaldoQuantConserto(5), tSldMesEstAlm2.adSaldoValorConserto(5), tSldMesEstAlm2.adSaldoQuantOutros(5), tSldMesEstAlm2.adSaldoValorOutros(5), tSldMesEstAlm2.adSaldoQuantBenef(5), tSldMesEstAlm2.adSaldoValorBenef(5), _
'                                    tSldMesEstAlm2.adSaldoQuantConsig(6), tSldMesEstAlm2.adSaldoValorConsig(6), tSldMesEstAlm2.adSaldoQuantDemo(6), tSldMesEstAlm2.adSaldoValorDemo(6), tSldMesEstAlm2.adSaldoQuantConserto(6), tSldMesEstAlm2.adSaldoValorConserto(6), tSldMesEstAlm2.adSaldoQuantOutros(6), tSldMesEstAlm2.adSaldoValorOutros(6), tSldMesEstAlm2.adSaldoQuantBenef(6), tSldMesEstAlm2.adSaldoValorBenef(6), tSldMesEstAlm2.adSaldoQuantConsig(7), tSldMesEstAlm2.adSaldoValorConsig(7), tSldMesEstAlm2.adSaldoQuantDemo(7), tSldMesEstAlm2.adSaldoValorDemo(7), tSldMesEstAlm2.adSaldoQuantConserto(7), tSldMesEstAlm2.adSaldoValorConserto(7), tSldMesEstAlm2.adSaldoQuantOutros(7), tSldMesEstAlm2.adSaldoValorOutros(7), tSldMesEstAlm2.adSaldoQuantBenef(7), tSldMesEstAlm2.adSaldoValorBenef(7), _
'                                    tSldMesEstAlm2.adSaldoQuantConsig(8), tSldMesEstAlm2.adSaldoValorConsig(8), tSldMesEstAlm2.adSaldoQuantDemo(8), tSldMesEstAlm2.adSaldoValorDemo(8), tSldMesEstAlm2.adSaldoQuantConserto(8), tSldMesEstAlm2.adSaldoValorConserto(8), tSldMesEstAlm2.adSaldoQuantOutros(8), tSldMesEstAlm2.adSaldoValorOutros(8), tSldMesEstAlm2.adSaldoQuantBenef(8), tSldMesEstAlm2.adSaldoValorBenef(8), tSldMesEstAlm2.adSaldoQuantConsig(9), tSldMesEstAlm2.adSaldoValorConsig(9), tSldMesEstAlm2.adSaldoQuantDemo(9), tSldMesEstAlm2.adSaldoValorDemo(9), tSldMesEstAlm2.adSaldoQuantConserto(9), tSldMesEstAlm2.adSaldoValorConserto(9), tSldMesEstAlm2.adSaldoQuantOutros(9), tSldMesEstAlm2.adSaldoValorOutros(9), tSldMesEstAlm2.adSaldoQuantBenef(9), tSldMesEstAlm2.adSaldoValorBenef(9), _
'                                    tSldMesEstAlm2.adSaldoQuantConsig(10), tSldMesEstAlm2.adSaldoValorConsig(10), tSldMesEstAlm2.adSaldoQuantDemo(10), tSldMesEstAlm2.adSaldoValorDemo(10), tSldMesEstAlm2.adSaldoQuantConserto(10), tSldMesEstAlm2.adSaldoValorConserto(10), tSldMesEstAlm2.adSaldoQuantOutros(10), tSldMesEstAlm2.adSaldoValorOutros(10), tSldMesEstAlm2.adSaldoQuantBenef(10), tSldMesEstAlm2.adSaldoValorBenef(10), tSldMesEstAlm2.adSaldoQuantConsig(11), tSldMesEstAlm2.adSaldoValorConsig(11), tSldMesEstAlm2.adSaldoQuantDemo(11), tSldMesEstAlm2.adSaldoValorDemo(11), tSldMesEstAlm2.adSaldoQuantConserto(11), tSldMesEstAlm2.adSaldoValorConserto(11), tSldMesEstAlm2.adSaldoQuantOutros(11), tSldMesEstAlm2.adSaldoValorOutros(11), tSldMesEstAlm2.adSaldoQuantBenef(11), tSldMesEstAlm2.adSaldoValorBenef(11), _
'                                    tSldMesEstAlm2.adSaldoQuantConsig(12), tSldMesEstAlm2.adSaldoValorConsig(12), tSldMesEstAlm2.adSaldoQuantDemo(12), tSldMesEstAlm2.adSaldoValorDemo(12), tSldMesEstAlm2.adSaldoQuantConserto(12), tSldMesEstAlm2.adSaldoValorConserto(12), tSldMesEstAlm2.adSaldoQuantOutros(12), tSldMesEstAlm2.adSaldoValorOutros(12), tSldMesEstAlm2.adSaldoQuantBenef(12), tSldMesEstAlm2.adSaldoValorBenef(12), objSldMesEst.iAno, iAlmoxarifado)
'        If lErro <> AD_SQL_SUCESSO Then gError 60994
'
'        'Busca o primeiro produto
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60995
'
'        Do While lErro = AD_SQL_SUCESSO
'
''            'lock do registro em questão
''            lErro = Comando_LockExclusive(lComando)
''            If lErro <> AD_SQL_SUCESSO Then gError 60996
'
'            'soma um a ano para que seja criado outro ano
'            tSldMesEstAlm2.iAno = tSldMesEstAlm2.iAno + 1
'
'            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
'            For iIndice = 1 To 12
'
'                tSldMesEstAlm2.dQuantInicialConsig = tSldMesEstAlm2.dQuantInicialConsig + tSldMesEstAlm2.adSaldoQuantConsig(iIndice)
'                tSldMesEstAlm2.dValorInicialConsig = tSldMesEstAlm2.dValorInicialConsig + tSldMesEstAlm2.adSaldoValorConsig(iIndice)
'                tSldMesEstAlm2.dQuantInicialDemo = tSldMesEstAlm2.dQuantInicialDemo + tSldMesEstAlm2.adSaldoQuantDemo(iIndice)
'                tSldMesEstAlm2.dValorInicialDemo = tSldMesEstAlm2.dValorInicialDemo + tSldMesEstAlm2.adSaldoValorDemo(iIndice)
'                tSldMesEstAlm2.dQuantInicialConserto = tSldMesEstAlm2.dQuantInicialConserto + tSldMesEstAlm2.adSaldoQuantConserto(iIndice)
'                tSldMesEstAlm2.dValorInicialConserto = tSldMesEstAlm2.dValorInicialConserto + tSldMesEstAlm2.adSaldoValorConserto(iIndice)
'                tSldMesEstAlm2.dQuantInicialOutros = tSldMesEstAlm2.dQuantInicialOutros + tSldMesEstAlm2.adSaldoQuantOutros(iIndice)
'                tSldMesEstAlm2.dValorInicialOutros = tSldMesEstAlm2.dValorInicialOutros + tSldMesEstAlm2.adSaldoValorOutros(iIndice)
'                tSldMesEstAlm2.dQuantInicialBenef = tSldMesEstAlm2.dQuantInicialBenef + tSldMesEstAlm2.adSaldoQuantBenef(iIndice)
'                tSldMesEstAlm2.dValorInicialBenef = tSldMesEstAlm2.dValorInicialBenef + tSldMesEstAlm2.adSaldoValorBenef(iIndice)
'
'            Next
'
'            'Insere os dados no BD
'            lErro = Comando_Executar(lComando2, "INSERT INTO SldMesEstAlm2 (Ano, Almoxarifado, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEstAlm2.iAno, iAlmoxarifado, tSldMesEstAlm2.sProduto, tSldMesEstAlm2.dQuantInicialConsig, tSldMesEstAlm2.dValorInicialConsig, tSldMesEstAlm2.dQuantInicialDemo, tSldMesEstAlm2.dValorInicialDemo, tSldMesEstAlm2.dQuantInicialConserto, tSldMesEstAlm2.dValorInicialConserto, tSldMesEstAlm2.dQuantInicialOutros, tSldMesEstAlm2.dValorInicialOutros, tSldMesEstAlm2.dQuantInicialBenef, tSldMesEstAlm2.dValorInicialBenef)
'            If lErro <> AD_SQL_SUCESSO Then gError 60997
'
'            'Joga o contador na tela
'            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
'
'            DoEvents
'
'            'verifica se foi cancelado o fechamento do mes
'            If iCancela = CANCELA Then
'
'                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
'
'                If vbMesRes = vbYes Then gError 60998
'
'                iCancela = CANCELA_BATCH
'
'            End If
'
'            'Busca o proximo produto
'            lErro = Comando_BuscarProximo(lComando)
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60999
'
'        Loop
'
'        'Busca o o proximo produto
'        lErro = Comando_BuscarProximo(lComando1)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71500
'
'    Loop
'
    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'    Call Comando_Fechar(lComando2)

    SldMesEstAlm2_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEstAlm2_Atualiza_Ano:

    SldMesEstAlm2_Atualiza_Ano = gErr

    Select Case gErr
            
        Case 60989, 60990, 60991
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 60992, 60993, 71500
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", gErr, objSldMesEst.iFilialEmpresa)

        Case 60994
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO1", gErr, iAlmoxarifado)

        Case 60995, 60996, 60999
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM21", gErr, objSldMesEst.iAno, iAlmoxarifado)

        Case 60996
            lErro = lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESESTALM2", gErr, tSldMesEstAlm2.iAno, iAlmoxarifado, tSldMesEstAlm2.sProduto)

        Case 60997
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESESTALM2", gErr, tSldMesEstAlm2.iAno, iAlmoxarifado, tSldMesEstAlm2.sProduto)
            
        Case 60998
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151824)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEstAlm2_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEstAlm2 As typeSldMesEstAlm2
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult
Dim iAlmoxarifado As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesEstAlm2_Atualiza_Ano_Reproc

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 83723

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 83724

    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 83725

    'Inicializa comandos
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 83726

    'Le os Almoxarifados da Filial em questão
    lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa=?", iAlmoxarifado, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 83727

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83728

    Do While lErro = AD_SQL_SUCESSO

        tSldMesEstAlm2.sProduto = String(STRING_PRODUTO, 0)

        If objSldMesEst.sProduto = "" Then
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                            "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                            "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12" & _
                            " FROM SldMesEstAlm2 WHERE Ano =? And Almoxarifado =?"
            
            'Le os dados de SldMesEstAlm2 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEstAlm2.iAno, tSldMesEstAlm2.sProduto, tSldMesEstAlm2.dQuantInicialConsig, tSldMesEstAlm2.dValorInicialConsig, tSldMesEstAlm2.dQuantInicialDemo, tSldMesEstAlm2.dValorInicialDemo, tSldMesEstAlm2.dQuantInicialConserto, tSldMesEstAlm2.dValorInicialConserto, tSldMesEstAlm2.dQuantInicialOutros, tSldMesEstAlm2.dValorInicialOutros, tSldMesEstAlm2.dQuantInicialBenef, tSldMesEstAlm2.dValorInicialBenef, tSldMesEstAlm2.adSaldoQuantConsig(1), tSldMesEstAlm2.adSaldoValorConsig(1), tSldMesEstAlm2.adSaldoQuantDemo(1), tSldMesEstAlm2.adSaldoValorDemo(1), tSldMesEstAlm2.adSaldoQuantConserto(1), tSldMesEstAlm2.adSaldoValorConserto(1), tSldMesEstAlm2.adSaldoQuantOutros(1), tSldMesEstAlm2.adSaldoValorOutros(1), tSldMesEstAlm2.adSaldoQuantBenef(1), tSldMesEstAlm2.adSaldoValorBenef(1), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(2), tSldMesEstAlm2.adSaldoValorConsig(2), tSldMesEstAlm2.adSaldoQuantDemo(2), tSldMesEstAlm2.adSaldoValorDemo(2), tSldMesEstAlm2.adSaldoQuantConserto(2), tSldMesEstAlm2.adSaldoValorConserto(2), tSldMesEstAlm2.adSaldoQuantOutros(2), tSldMesEstAlm2.adSaldoValorOutros(2), tSldMesEstAlm2.adSaldoQuantBenef(2), tSldMesEstAlm2.adSaldoValorBenef(2), tSldMesEstAlm2.adSaldoQuantConsig(3), tSldMesEstAlm2.adSaldoValorConsig(3), tSldMesEstAlm2.adSaldoQuantDemo(3), tSldMesEstAlm2.adSaldoValorDemo(3), tSldMesEstAlm2.adSaldoQuantConserto(3), tSldMesEstAlm2.adSaldoValorConserto(3), tSldMesEstAlm2.adSaldoQuantOutros(3), tSldMesEstAlm2.adSaldoValorOutros(3), tSldMesEstAlm2.adSaldoQuantBenef(3), tSldMesEstAlm2.adSaldoValorBenef(3), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(4), tSldMesEstAlm2.adSaldoValorConsig(4), tSldMesEstAlm2.adSaldoQuantDemo(4), tSldMesEstAlm2.adSaldoValorDemo(4), tSldMesEstAlm2.adSaldoQuantConserto(4), tSldMesEstAlm2.adSaldoValorConserto(4), tSldMesEstAlm2.adSaldoQuantOutros(4), tSldMesEstAlm2.adSaldoValorOutros(4), tSldMesEstAlm2.adSaldoQuantBenef(4), tSldMesEstAlm2.adSaldoValorBenef(4), tSldMesEstAlm2.adSaldoQuantConsig(5), tSldMesEstAlm2.adSaldoValorConsig(5), tSldMesEstAlm2.adSaldoQuantDemo(5), tSldMesEstAlm2.adSaldoValorDemo(5), tSldMesEstAlm2.adSaldoQuantConserto(5), tSldMesEstAlm2.adSaldoValorConserto(5), tSldMesEstAlm2.adSaldoQuantOutros(5), tSldMesEstAlm2.adSaldoValorOutros(5), tSldMesEstAlm2.adSaldoQuantBenef(5), tSldMesEstAlm2.adSaldoValorBenef(5), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(6), tSldMesEstAlm2.adSaldoValorConsig(6), tSldMesEstAlm2.adSaldoQuantDemo(6), tSldMesEstAlm2.adSaldoValorDemo(6), tSldMesEstAlm2.adSaldoQuantConserto(6), tSldMesEstAlm2.adSaldoValorConserto(6), tSldMesEstAlm2.adSaldoQuantOutros(6), tSldMesEstAlm2.adSaldoValorOutros(6), tSldMesEstAlm2.adSaldoQuantBenef(6), tSldMesEstAlm2.adSaldoValorBenef(6), tSldMesEstAlm2.adSaldoQuantConsig(7), tSldMesEstAlm2.adSaldoValorConsig(7), tSldMesEstAlm2.adSaldoQuantDemo(7), tSldMesEstAlm2.adSaldoValorDemo(7), tSldMesEstAlm2.adSaldoQuantConserto(7), tSldMesEstAlm2.adSaldoValorConserto(7), tSldMesEstAlm2.adSaldoQuantOutros(7), tSldMesEstAlm2.adSaldoValorOutros(7), tSldMesEstAlm2.adSaldoQuantBenef(7), tSldMesEstAlm2.adSaldoValorBenef(7), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(8), tSldMesEstAlm2.adSaldoValorConsig(8), tSldMesEstAlm2.adSaldoQuantDemo(8), tSldMesEstAlm2.adSaldoValorDemo(8), tSldMesEstAlm2.adSaldoQuantConserto(8), tSldMesEstAlm2.adSaldoValorConserto(8), tSldMesEstAlm2.adSaldoQuantOutros(8), tSldMesEstAlm2.adSaldoValorOutros(8), tSldMesEstAlm2.adSaldoQuantBenef(8), tSldMesEstAlm2.adSaldoValorBenef(8), tSldMesEstAlm2.adSaldoQuantConsig(9), tSldMesEstAlm2.adSaldoValorConsig(9), tSldMesEstAlm2.adSaldoQuantDemo(9), tSldMesEstAlm2.adSaldoValorDemo(9), tSldMesEstAlm2.adSaldoQuantConserto(9), tSldMesEstAlm2.adSaldoValorConserto(9), tSldMesEstAlm2.adSaldoQuantOutros(9), tSldMesEstAlm2.adSaldoValorOutros(9), tSldMesEstAlm2.adSaldoQuantBenef(9), tSldMesEstAlm2.adSaldoValorBenef(9), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(10), tSldMesEstAlm2.adSaldoValorConsig(10), tSldMesEstAlm2.adSaldoQuantDemo(10), tSldMesEstAlm2.adSaldoValorDemo(10), tSldMesEstAlm2.adSaldoQuantConserto(10), tSldMesEstAlm2.adSaldoValorConserto(10), tSldMesEstAlm2.adSaldoQuantOutros(10), tSldMesEstAlm2.adSaldoValorOutros(10), tSldMesEstAlm2.adSaldoQuantBenef(10), tSldMesEstAlm2.adSaldoValorBenef(10), tSldMesEstAlm2.adSaldoQuantConsig(11), tSldMesEstAlm2.adSaldoValorConsig(11), tSldMesEstAlm2.adSaldoQuantDemo(11), tSldMesEstAlm2.adSaldoValorDemo(11), tSldMesEstAlm2.adSaldoQuantConserto(11), tSldMesEstAlm2.adSaldoValorConserto(11), tSldMesEstAlm2.adSaldoQuantOutros(11), tSldMesEstAlm2.adSaldoValorOutros(11), tSldMesEstAlm2.adSaldoQuantBenef(11), tSldMesEstAlm2.adSaldoValorBenef(11), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(12), tSldMesEstAlm2.adSaldoValorConsig(12), tSldMesEstAlm2.adSaldoQuantDemo(12), tSldMesEstAlm2.adSaldoValorDemo(12), tSldMesEstAlm2.adSaldoQuantConserto(12), tSldMesEstAlm2.adSaldoValorConserto(12), tSldMesEstAlm2.adSaldoQuantOutros(12), tSldMesEstAlm2.adSaldoValorOutros(12), tSldMesEstAlm2.adSaldoQuantBenef(12), tSldMesEstAlm2.adSaldoValorBenef(12), objSldMesEst.iAno, iAlmoxarifado)
        Else
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                            "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                            "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12" & _
                            " FROM SldMesEstAlm2 WHERE Ano =? And Almoxarifado =? AND Produto = ?"
            
            'Le os dados de SldMesEstAlm2 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEstAlm2.iAno, tSldMesEstAlm2.sProduto, tSldMesEstAlm2.dQuantInicialConsig, tSldMesEstAlm2.dValorInicialConsig, tSldMesEstAlm2.dQuantInicialDemo, tSldMesEstAlm2.dValorInicialDemo, tSldMesEstAlm2.dQuantInicialConserto, tSldMesEstAlm2.dValorInicialConserto, tSldMesEstAlm2.dQuantInicialOutros, tSldMesEstAlm2.dValorInicialOutros, tSldMesEstAlm2.dQuantInicialBenef, tSldMesEstAlm2.dValorInicialBenef, tSldMesEstAlm2.adSaldoQuantConsig(1), tSldMesEstAlm2.adSaldoValorConsig(1), tSldMesEstAlm2.adSaldoQuantDemo(1), tSldMesEstAlm2.adSaldoValorDemo(1), tSldMesEstAlm2.adSaldoQuantConserto(1), tSldMesEstAlm2.adSaldoValorConserto(1), tSldMesEstAlm2.adSaldoQuantOutros(1), tSldMesEstAlm2.adSaldoValorOutros(1), tSldMesEstAlm2.adSaldoQuantBenef(1), tSldMesEstAlm2.adSaldoValorBenef(1), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(2), tSldMesEstAlm2.adSaldoValorConsig(2), tSldMesEstAlm2.adSaldoQuantDemo(2), tSldMesEstAlm2.adSaldoValorDemo(2), tSldMesEstAlm2.adSaldoQuantConserto(2), tSldMesEstAlm2.adSaldoValorConserto(2), tSldMesEstAlm2.adSaldoQuantOutros(2), tSldMesEstAlm2.adSaldoValorOutros(2), tSldMesEstAlm2.adSaldoQuantBenef(2), tSldMesEstAlm2.adSaldoValorBenef(2), tSldMesEstAlm2.adSaldoQuantConsig(3), tSldMesEstAlm2.adSaldoValorConsig(3), tSldMesEstAlm2.adSaldoQuantDemo(3), tSldMesEstAlm2.adSaldoValorDemo(3), tSldMesEstAlm2.adSaldoQuantConserto(3), tSldMesEstAlm2.adSaldoValorConserto(3), tSldMesEstAlm2.adSaldoQuantOutros(3), tSldMesEstAlm2.adSaldoValorOutros(3), tSldMesEstAlm2.adSaldoQuantBenef(3), tSldMesEstAlm2.adSaldoValorBenef(3), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(4), tSldMesEstAlm2.adSaldoValorConsig(4), tSldMesEstAlm2.adSaldoQuantDemo(4), tSldMesEstAlm2.adSaldoValorDemo(4), tSldMesEstAlm2.adSaldoQuantConserto(4), tSldMesEstAlm2.adSaldoValorConserto(4), tSldMesEstAlm2.adSaldoQuantOutros(4), tSldMesEstAlm2.adSaldoValorOutros(4), tSldMesEstAlm2.adSaldoQuantBenef(4), tSldMesEstAlm2.adSaldoValorBenef(4), tSldMesEstAlm2.adSaldoQuantConsig(5), tSldMesEstAlm2.adSaldoValorConsig(5), tSldMesEstAlm2.adSaldoQuantDemo(5), tSldMesEstAlm2.adSaldoValorDemo(5), tSldMesEstAlm2.adSaldoQuantConserto(5), tSldMesEstAlm2.adSaldoValorConserto(5), tSldMesEstAlm2.adSaldoQuantOutros(5), tSldMesEstAlm2.adSaldoValorOutros(5), tSldMesEstAlm2.adSaldoQuantBenef(5), tSldMesEstAlm2.adSaldoValorBenef(5), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(6), tSldMesEstAlm2.adSaldoValorConsig(6), tSldMesEstAlm2.adSaldoQuantDemo(6), tSldMesEstAlm2.adSaldoValorDemo(6), tSldMesEstAlm2.adSaldoQuantConserto(6), tSldMesEstAlm2.adSaldoValorConserto(6), tSldMesEstAlm2.adSaldoQuantOutros(6), tSldMesEstAlm2.adSaldoValorOutros(6), tSldMesEstAlm2.adSaldoQuantBenef(6), tSldMesEstAlm2.adSaldoValorBenef(6), tSldMesEstAlm2.adSaldoQuantConsig(7), tSldMesEstAlm2.adSaldoValorConsig(7), tSldMesEstAlm2.adSaldoQuantDemo(7), tSldMesEstAlm2.adSaldoValorDemo(7), tSldMesEstAlm2.adSaldoQuantConserto(7), tSldMesEstAlm2.adSaldoValorConserto(7), tSldMesEstAlm2.adSaldoQuantOutros(7), tSldMesEstAlm2.adSaldoValorOutros(7), tSldMesEstAlm2.adSaldoQuantBenef(7), tSldMesEstAlm2.adSaldoValorBenef(7), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(8), tSldMesEstAlm2.adSaldoValorConsig(8), tSldMesEstAlm2.adSaldoQuantDemo(8), tSldMesEstAlm2.adSaldoValorDemo(8), tSldMesEstAlm2.adSaldoQuantConserto(8), tSldMesEstAlm2.adSaldoValorConserto(8), tSldMesEstAlm2.adSaldoQuantOutros(8), tSldMesEstAlm2.adSaldoValorOutros(8), tSldMesEstAlm2.adSaldoQuantBenef(8), tSldMesEstAlm2.adSaldoValorBenef(8), tSldMesEstAlm2.adSaldoQuantConsig(9), tSldMesEstAlm2.adSaldoValorConsig(9), tSldMesEstAlm2.adSaldoQuantDemo(9), tSldMesEstAlm2.adSaldoValorDemo(9), tSldMesEstAlm2.adSaldoQuantConserto(9), tSldMesEstAlm2.adSaldoValorConserto(9), tSldMesEstAlm2.adSaldoQuantOutros(9), tSldMesEstAlm2.adSaldoValorOutros(9), tSldMesEstAlm2.adSaldoQuantBenef(9), tSldMesEstAlm2.adSaldoValorBenef(9), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(10), tSldMesEstAlm2.adSaldoValorConsig(10), tSldMesEstAlm2.adSaldoQuantDemo(10), tSldMesEstAlm2.adSaldoValorDemo(10), tSldMesEstAlm2.adSaldoQuantConserto(10), tSldMesEstAlm2.adSaldoValorConserto(10), tSldMesEstAlm2.adSaldoQuantOutros(10), tSldMesEstAlm2.adSaldoValorOutros(10), tSldMesEstAlm2.adSaldoQuantBenef(10), tSldMesEstAlm2.adSaldoValorBenef(10), tSldMesEstAlm2.adSaldoQuantConsig(11), tSldMesEstAlm2.adSaldoValorConsig(11), tSldMesEstAlm2.adSaldoQuantDemo(11), tSldMesEstAlm2.adSaldoValorDemo(11), tSldMesEstAlm2.adSaldoQuantConserto(11), tSldMesEstAlm2.adSaldoValorConserto(11), tSldMesEstAlm2.adSaldoQuantOutros(11), tSldMesEstAlm2.adSaldoValorOutros(11), tSldMesEstAlm2.adSaldoQuantBenef(11), tSldMesEstAlm2.adSaldoValorBenef(11), _
                                        tSldMesEstAlm2.adSaldoQuantConsig(12), tSldMesEstAlm2.adSaldoValorConsig(12), tSldMesEstAlm2.adSaldoQuantDemo(12), tSldMesEstAlm2.adSaldoValorDemo(12), tSldMesEstAlm2.adSaldoQuantConserto(12), tSldMesEstAlm2.adSaldoValorConserto(12), tSldMesEstAlm2.adSaldoQuantOutros(12), tSldMesEstAlm2.adSaldoValorOutros(12), tSldMesEstAlm2.adSaldoQuantBenef(12), tSldMesEstAlm2.adSaldoValorBenef(12), objSldMesEst.iAno, iAlmoxarifado, objSldMesEst.sProduto)
        
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 83729

        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83730

        Do While lErro = AD_SQL_SUCESSO

            'soma um a ano para que seja criado outro ano
            tSldMesEstAlm2.iAno = tSldMesEstAlm2.iAno + 1
        
            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
            For iIndice = 1 To 12
    
                tSldMesEstAlm2.dQuantInicialConsig = tSldMesEstAlm2.dQuantInicialConsig + tSldMesEstAlm2.adSaldoQuantConsig(iIndice)
                tSldMesEstAlm2.dValorInicialConsig = tSldMesEstAlm2.dValorInicialConsig + tSldMesEstAlm2.adSaldoValorConsig(iIndice)
                tSldMesEstAlm2.dQuantInicialDemo = tSldMesEstAlm2.dQuantInicialDemo + tSldMesEstAlm2.adSaldoQuantDemo(iIndice)
                tSldMesEstAlm2.dValorInicialDemo = tSldMesEstAlm2.dValorInicialDemo + tSldMesEstAlm2.adSaldoValorDemo(iIndice)
                tSldMesEstAlm2.dQuantInicialConserto = tSldMesEstAlm2.dQuantInicialConserto + tSldMesEstAlm2.adSaldoQuantConserto(iIndice)
                tSldMesEstAlm2.dValorInicialConserto = tSldMesEstAlm2.dValorInicialConserto + tSldMesEstAlm2.adSaldoValorConserto(iIndice)
                tSldMesEstAlm2.dQuantInicialOutros = tSldMesEstAlm2.dQuantInicialOutros + tSldMesEstAlm2.adSaldoQuantOutros(iIndice)
                tSldMesEstAlm2.dValorInicialOutros = tSldMesEstAlm2.dValorInicialOutros + tSldMesEstAlm2.adSaldoValorOutros(iIndice)
                tSldMesEstAlm2.dQuantInicialBenef = tSldMesEstAlm2.dQuantInicialBenef + tSldMesEstAlm2.adSaldoQuantBenef(iIndice)
                tSldMesEstAlm2.dValorInicialBenef = tSldMesEstAlm2.dValorInicialBenef + tSldMesEstAlm2.adSaldoValorBenef(iIndice)
    
            Next
            
            'Le os dados de SldMesEstAlm2 para o ano em questão
            lErro = Comando_ExecutarPos(lComando2, "SELECT Ano FROM SldMesEstAlm2 WHERE Ano =? AND Almoxarifado =? AND Produto =?", 0, iAno, tSldMesEstAlm2.iAno, iAlmoxarifado, tSldMesEstAlm2.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 83731
    
            'Busca o primeiro produto
            lErro = Comando_BuscarPrimeiro(lComando2)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83732
            
            If lErro = AD_SQL_SUCESSO Then
            
                'Insere os dados no BD
                lErro = Comando_ExecutarPos(lComando3, "UPDATE SldMesEstAlm2 SET QuantInicialConsig = ?, ValorInicialConsig = ?, QuantInicialDemo = ?, ValorInicialDemo = ?, QuantInicialConserto = ?, ValorInicialConserto = ?, QuantInicialOutros = ?, ValorInicialOutros = ?, QuantInicialBenef = ?, ValorInicialBenef = ?", lComando2, tSldMesEstAlm2.dQuantInicialConsig, tSldMesEstAlm2.dValorInicialConsig, tSldMesEstAlm2.dQuantInicialDemo, tSldMesEstAlm2.dValorInicialDemo, tSldMesEstAlm2.dQuantInicialConserto, tSldMesEstAlm2.dValorInicialConserto, tSldMesEstAlm2.dQuantInicialOutros, tSldMesEstAlm2.dValorInicialOutros, tSldMesEstAlm2.dQuantInicialBenef, tSldMesEstAlm2.dValorInicialBenef)
                If lErro <> AD_SQL_SUCESSO Then gError 83733
            
            End If
            
            'Busca o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83734
    
        Loop
            
        'Busca o o proximo almoxarifado
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83735
            
    Loop
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    SldMesEstAlm2_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEstAlm2_Atualiza_Ano_Reproc:

    SldMesEstAlm2_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83723, 83724, 83725, 83726
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83727, 83728, 83735
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", gErr, objSldMesEst.iFilialEmpresa)

        Case 83729, 83730, 83734
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM2_1", gErr, objSldMesEst.iAno, iAlmoxarifado)

        Case 83731, 83732
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM21", gErr, tSldMesEstAlm2.iAno, iAlmoxarifado, tSldMesEstAlm2.sProduto)
            
        Case 83733
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESESTALM2", gErr, tSldMesEstAlm2.iAno, iAlmoxarifado, tSldMesEstAlm2.sProduto)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151825)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

''Transferir para ClassMATSelect - Ao transferir avisar ao Mário pois tem que fazer uma alteração no codigo
'Function SldMesEst1_Le_CustoMedioConsig3(ByVal lComando As Long, ByVal iFilialEmpresa As Integer, ByVal iAno As Integer, sProduto As String, ByVal iMes As Integer, dCustoMedio As Double) As Long
'
'Dim tSldMesEst1 As typeSldMesEst1
'Dim lErro As Long
'Dim iIndice As Integer
'Dim dQuant As Double
'Dim dValor As Double
'
'On Error GoTo Erro_SldMesEst1_Le_CustoMedioConsig3
'
'    'seleciona o registro de SldMesEst relativo ao Ano, FilialEmpresa e Produto passados como parametro
'    lErro = Comando_Executar(lComando, "SELECT QuantInicialConsig3, ValorInicialConsig3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantConsig312, SaldoValorConsig312  FROM SldMesEst1 WHERE Ano=? AND FilialEmpresa=? AND Produto=?", _
'                              tSldMesEst1.dQuantInicialConsig3, tSldMesEst1.dValorInicialConsig3, tSldMesEst1.adSaldoQuantConsig3(1), tSldMesEst1.adSaldoValorConsig3(1), tSldMesEst1.adSaldoQuantConsig3(2), tSldMesEst1.adSaldoValorConsig3(2), tSldMesEst1.adSaldoQuantConsig3(3), tSldMesEst1.adSaldoValorConsig3(3), tSldMesEst1.adSaldoQuantConsig3(4), tSldMesEst1.adSaldoValorConsig3(4), tSldMesEst1.adSaldoQuantConsig3(5), tSldMesEst1.adSaldoValorConsig3(5), tSldMesEst1.adSaldoQuantConsig3(6), tSldMesEst1.adSaldoValorConsig3(6), tSldMesEst1.adSaldoQuantConsig3(7), tSldMesEst1.adSaldoValorConsig3(7), tSldMesEst1.adSaldoQuantConsig3(8), tSldMesEst1.adSaldoValorConsig3(8), tSldMesEst1.adSaldoQuantConsig3(9), tSldMesEst1.adSaldoValorConsig3(9), _
'                              tSldMesEst1.adSaldoQuantConsig3(10), tSldMesEst1.adSaldoValorConsig3(10), tSldMesEst1.adSaldoQuantConsig3(11), tSldMesEst1.adSaldoValorConsig3(11), tSldMesEst1.adSaldoQuantConsig3(12), tSldMesEst1.adSaldoValorConsig3(12), iAno, iFilialEmpresa, sProduto)
'    If lErro <> AD_SQL_SUCESSO Then Error 60922
'
'    'le o SldMesEst
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO Then Error 60923
'
'    dQuant = tSldMesEst1.dQuantInicialConsig3
'    dValor = tSldMesEst1.dValorInicialConsig3
'
'    For iIndice = 1 To iMes
'
'        dQuant = dQuant + tSldMesEst1.adSaldoQuantConsig3(iIndice)
'        dValor = dValor + tSldMesEst1.adSaldoValorConsig3(iIndice)
'
'    Next
'
'    dCustoMedio = dValor / dQuant
'
'    SldMesEst1_Le_CustoMedioConsig3 = SUCESSO
'
'    Exit Function
'
'Erro_SldMesEst1_Le_CustoMedioConsig3:
'
'    SldMesEst1_Le_CustoMedioConsig3 = Err
'
'    Select Case Err
'
'        Case 60922, 60923
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", Err, iAno, iFilialEmpresa, sProduto)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151826)
'
'    End Select
'
'    Exit Function
'
'End Function

Function SldMesEst1_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal objTipoMovEstoque As ClassTipoMovEst, ByVal dCustoMedioConsig3 As Double, ByVal dCustoMedioDemo3 As Double, ByVal dCustoMedioConserto3 As Double, ByVal dCustoMedioOutros3 As Double, ByVal dCustoMedioBenef3 As Double) As Long
'Atualiza a tabela de SldMesEst1 utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer
Dim dCustoMedioConsig3Int As Double
Dim dCustoMedioDemo3Int As Double
Dim dCustoMedioConserto3Int As Double
Dim dCustoMedioOutros3Int As Double
Dim dCustoMedioBenef3Int As Double

On Error GoTo Erro_SldMesEst1_Atualiza
    
    'se é produto de terceiros
    If objTipoMovEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTODETERCEIROS Then
    
        iMes = Month(objSldDiaEst.dtData)
        sMes = CStr(iMes)
        
        'Le a tabela de SldMesEst1 para o Ano/filial/produto em questão
        lErro = Comando_ExecutarPos(lComando1, "SELECT Ano, CustoMedioConsig3" & sMes & ", CustoMedioDemo3" & sMes & ", CustoMedioConserto3" & sMes & ", CustoMedioOutros3" & sMes & ", CustoMedioBenef3" & sMes & " FROM SldMesEst1 WHERE Ano=? AND FilialEmpresa=? AND Produto=?", 0, iAno, dCustoMedioConsig3Int, dCustoMedioDemo3Int, dCustoMedioConserto3Int, dCustoMedioOutros3Int, dCustoMedioBenef3Int, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 60924
    
        'leitura do registro referente ao Ano/filial/produto em questão
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO Then gError 60925
        
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then gError 60926
    
        If dCustoMedioConsig3 = 0 Then dCustoMedioConsig3 = dCustoMedioConsig3Int
        If dCustoMedioDemo3 = 0 Then dCustoMedioDemo3 = dCustoMedioDemo3Int
        If dCustoMedioConserto3 = 0 Then dCustoMedioConserto3 = dCustoMedioConserto3Int
        If dCustoMedioOutros3 = 0 Then dCustoMedioOutros3 = dCustoMedioOutros3Int
        If dCustoMedioBenef3 = 0 Then dCustoMedioBenef3 = dCustoMedioBenef3Int
    
        'Atualiza a tabela de SldMesEst1 para o Ano/filial/produto em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1 SET SaldoQuantConsig3" + sMes + " = SaldoQuantConsig3" + sMes + " + ?, SaldoValorConsig3" + sMes + " = SaldoValorConsig3" + sMes + " + ?, SaldoQuantDemo3" + sMes + " = SaldoQuantDemo3" + sMes + " + ?, SaldoValorDemo3" + sMes + " = SaldoValorDemo3" + sMes + " + ?, SaldoQuantConserto3" + sMes + " = SaldoQuantConserto3" + sMes + " + ?, SaldoValorConserto3" + sMes + " = SaldoValorConserto3" + sMes + " + ?, SaldoQuantOutros3" + sMes + " = SaldoQuantOutros3" + sMes + " + ?, SaldoValorOutros3" + sMes + " = SaldoValorOutros3" + sMes + " + ?, SaldoQuantBenef3" + sMes + " = SaldoQuantBenef3" + sMes + " + ?, SaldoValorBenef3" + sMes + " = SaldoValorBenef3" + sMes + " + ?, CustoMedioConsig3" + sMes + " = ?, CustoMedioDemo3" + sMes + " = ?, CustoMedioConserto3" + sMes + " = ?, CustoMedioOutros3" + sMes + " = ?, CustoMedioBenef3" + sMes + " = ?", _
        lComando1, objSldDiaEst.dQuantEntConsig3 - objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorEntConsig3 - objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3 - objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorEntDemo3 - objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3 - objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorEntConserto3 - objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3 - objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorEntOutros3 - objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3 - objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorEntBenef3 - objSldDiaEst.dValorSaiBenef3, dCustoMedioConsig3, dCustoMedioDemo3, dCustoMedioConserto3, dCustoMedioOutros3, dCustoMedioBenef3)
        If lErro <> AD_SQL_SUCESSO Then gError 71578
        
            
    End If
        
    SldMesEst1_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEst1_Atualiza:

    SldMesEst1_Atualiza = gErr

    Select Case gErr

        Case 60924, 60925
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case 60926
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST1", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case 60927, 71578
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST1", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151827)

    End Select

    Exit Function

End Function

Function SldMesEstAlm1_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal iAlmoxarifado As Integer, ByVal objTipoMovEstoque As ClassTipoMovEst) As Long
'Atualiza a tabela de SldMesEstAlm1 utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesEstAlm1_Atualiza
    
    'se é produto de terceiros
    If objTipoMovEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTODETERCEIROS Then
    
        iMes = Month(objSldDiaEst.dtData)
        sMes = CStr(iMes)
        
        'Le a tabela de SldMesEstAlm1 para o Ano/almoxarifado/produto em questão
        lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEstAlm1 WHERE Ano=? AND Almoxarifado=? AND Produto=?", 0, iAno, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 60928
    
        'leitura do registro referente ao Ano/almoxarifado/produto em questão
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 60929
        
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 60930
    
        'Atualiza a tabela de SldMesEstAlm1 para o Ano/almoxarifado/produto em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEstAlm1 SET SaldoQuantConsig3" + sMes + " = SaldoQuantConsig3" + sMes + " + ?, SaldoValorConsig3" + sMes + " = SaldoValorConsig3" + sMes + " + ?, SaldoQuantDemo3" + sMes + " = SaldoQuantDemo3" + sMes + " + ?, SaldoValorDemo3" + sMes + " = SaldoValorDemo3" + sMes + " + ?, SaldoQuantConserto3" + sMes + " = SaldoQuantConserto3" + sMes + " + ?, SaldoValorConserto3" + sMes + " = SaldoValorConserto3" + sMes + " + ?, SaldoQuantOutros3" + sMes + " = SaldoQuantOutros3" + sMes + " + ?, SaldoValorOutros3" + sMes + " = SaldoValorOutros3" + sMes + " + ?, SaldoQuantBenef3" + sMes + " = SaldoQuantBenef3" + sMes + " + ?, SaldoValorBenef3" + sMes + " = SaldoValorBenef3" + sMes + " + ?", _
        lComando1, objSldDiaEst.dQuantEntConsig3 - objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorEntConsig3 - objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3 - objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorEntDemo3 - objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3 - objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorEntConserto3 - objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3 - objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorEntOutros3 - objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3 - objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorEntBenef3 - objSldDiaEst.dValorSaiBenef3)
        If lErro <> AD_SQL_SUCESSO Then Error 60931
        
    End If
        
    SldMesEstAlm1_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEstAlm1_Atualiza:

    SldMesEstAlm1_Atualiza = Err

    Select Case Err

        Case 60928, 60929
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM11", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case 60930
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESESTALM1", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case 60931
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESESTALM1", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151828)

    End Select

    Exit Function

End Function

Function SldMesEst2_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal objTipoMovEstoque As ClassTipoMovEst, ByVal dCustoMedioConsig As Double, ByVal dCustoMedioDemo As Double, ByVal dCustoMedioConserto As Double, ByVal dCustoMedioOutros As Double, ByVal dCustoMedioBenef As Double) As Long
'Atualiza a tabela de SldMesEst1 utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer
Dim tSldMesEst As typeSldMesEst
Dim dCustoMedioConsigInt As Double
Dim dCustoMedioDemoInt As Double
Dim dCustoMedioConsertoInt As Double
Dim dCustoMedioOutrosInt As Double
Dim dCustoMedioBenefInt As Double

On Error GoTo Erro_SldMesEst2_Atualiza
    
    'se é produto nosso em poder de terceiros (entrando ou saindo)
    If objTipoMovEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTONOSSO And (objTipoMovEstoque.iAtualizaBenef <> TIPOMOV_EST_NAOATUALIZABENEF Or objTipoMovEstoque.iAtualizaConserto <> TIPOMOV_EST_NAOATUALIZACONSERTO Or _
       objTipoMovEstoque.iAtualizaConsig <> TIPOMOV_EST_NAOATUALIZACONSIGNACAO Or objTipoMovEstoque.iAtualizaDemo <> TIPOMOV_EST_NAOATUALIZADEMO Or objTipoMovEstoque.iAtualizaOutras <> TIPOMOV_EST_NAOATUALIZAOUTRAS) Then
    
        iMes = Month(objSldDiaEst.dtData)
        sMes = CStr(iMes)
        
        'Le a tabela de SldMesEst2 para o Ano/filial/produto em questão
        lErro = Comando_ExecutarPos(lComando1, "SELECT Ano, CustoMedioConsig" & sMes & ", CustoMedioDemo" & sMes & ", CustoMedioConserto" & sMes & ", CustoMedioOutros" & sMes & ", CustoMedioBenef" & sMes & " FROM SldMesEst2 WHERE Ano=? AND FilialEmpresa=? AND Produto=?", 0, iAno, dCustoMedioConsigInt, dCustoMedioDemoInt, dCustoMedioConsertoInt, dCustoMedioOutrosInt, dCustoMedioBenefInt, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 60954
    
        'leitura do registro referente ao Ano/filial/produto em questão
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO Then gError 60955
        
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then gError 60956
    
        If dCustoMedioConsig = 0 Then dCustoMedioConsig = dCustoMedioConsigInt
        If dCustoMedioDemo = 0 Then dCustoMedioDemo = dCustoMedioDemoInt
        If dCustoMedioConserto = 0 Then dCustoMedioConserto = dCustoMedioConsertoInt
        If dCustoMedioOutros = 0 Then dCustoMedioOutros = dCustoMedioOutrosInt
        If dCustoMedioBenef = 0 Then dCustoMedioBenef = dCustoMedioBenefInt
    
        'Atualiza a tabela de SldMesEst2 para o Ano/filial/produto em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2 SET SaldoQuantConsig" + sMes + " = SaldoQuantConsig" + sMes + " + ?, SaldoValorConsig" + sMes + " = SaldoValorConsig" + sMes + " + ?, SaldoQuantDemo" + sMes + " = SaldoQuantDemo" + sMes + " + ?, SaldoValorDemo" + sMes + " = SaldoValorDemo" + sMes + " + ?, SaldoQuantConserto" + sMes + " = SaldoQuantConserto" + sMes + " + ?, SaldoValorConserto" + sMes + " = SaldoValorConserto" + sMes + " + ?, SaldoQuantOutros" + sMes + " = SaldoQuantOutros" + sMes + " + ?, SaldoValorOutros" + sMes + " = SaldoValorOutros" + sMes + " + ?, SaldoQuantBenef" + sMes + " = SaldoQuantBenef" + sMes + " + ?, SaldoValorBenef" + sMes + " = SaldoValorBenef" + sMes + " + ?, CustoMedioConsig" + sMes + " = ?, CustoMedioDemo" + sMes + " = ?, CustoMedioConserto" + sMes + " = ?, CustoMedioOutros" + sMes + " = ?, CustoMedioBenef" + sMes + " = ?", _
                                    lComando1, objSldDiaEst.dQuantEntConsig - objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorEntConsig - objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo - objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorEntDemo - objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto - objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorEntConserto - objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros - objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorEntOutros - objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef - objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorEntBenef - objSldDiaEst.dValorSaiBenef, dCustoMedioConsig, dCustoMedioDemo, dCustoMedioConserto, dCustoMedioOutros, dCustoMedioBenef)
        If lErro <> AD_SQL_SUCESSO Then gError 71583
        
        
    End If
        
    SldMesEst2_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEst2_Atualiza:

    SldMesEst2_Atualiza = gErr

    Select Case gErr

        Case 60954, 60955
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST21", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case 60956
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST2", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case 60957, 71583, 71584, 71585, 71586, 71587
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST2", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151829)

    End Select

    Exit Function

End Function

Function SldMesEstAlm2_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal iAlmoxarifado As Integer, ByVal objTipoMovEstoque As ClassTipoMovEst) As Long
'Atualiza a tabela de SldMesEstAlm1 utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesEstAlm2_Atualiza
    
    'se é produto nosso em poder de terceiros (entrando ou saindo)
    If objTipoMovEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTONOSSO And (objTipoMovEstoque.iAtualizaBenef <> TIPOMOV_EST_NAOATUALIZABENEF Or objTipoMovEstoque.iAtualizaConserto <> TIPOMOV_EST_NAOATUALIZACONSERTO Or _
       objTipoMovEstoque.iAtualizaConsig <> TIPOMOV_EST_NAOATUALIZACONSIGNACAO Or objTipoMovEstoque.iAtualizaDemo <> TIPOMOV_EST_NAOATUALIZADEMO Or objTipoMovEstoque.iAtualizaOutras <> TIPOMOV_EST_NAOATUALIZAOUTRAS) Then
    
        iMes = Month(objSldDiaEst.dtData)
        sMes = CStr(iMes)
        
        'Le a tabela de SldMesEstAlm1 para o Ano/almoxarifado/produto em questão
        lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEstAlm2 WHERE Ano=? AND Almoxarifado=? AND Produto=?", 0, iAno, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 60960
    
        'leitura do registro referente ao Ano/almoxarifado/produto em questão
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 60961
        
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 60962
    
        'Atualiza a tabela de SldMesEstAlm1 para o Ano/almoxarifado/produto em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEstAlm2 SET SaldoQuantConsig" + sMes + " = SaldoQuantConsig" + sMes + " + ?, SaldoValorConsig" + sMes + " = SaldoValorConsig" + sMes + " + ?, SaldoQuantDemo" + sMes + " = SaldoQuantDemo" + sMes + " + ?, SaldoValorDemo" + sMes + " = SaldoValorDemo" + sMes + " + ?, SaldoQuantConserto" + sMes + " = SaldoQuantConserto" + sMes + " + ?, SaldoValorConserto" + sMes + " = SaldoValorConserto" + sMes + " + ?, SaldoQuantOutros" + sMes + " = SaldoQuantOutros" + sMes + " + ?, SaldoValorOutros" + sMes + " = SaldoValorOutros" + sMes + " + ?, SaldoQuantBenef" + sMes + " = SaldoQuantBenef" + sMes + " + ?, SaldoValorBenef" + sMes + " = SaldoValorBenef" + sMes + " + ?", _
        lComando1, objSldDiaEst.dQuantEntConsig - objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorEntConsig - objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo - objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorEntDemo - objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto - objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorEntConserto - objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros - objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorEntOutros - objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef - objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorEntBenef - objSldDiaEst.dValorSaiBenef)
        If lErro <> AD_SQL_SUCESSO Then Error 60963
        
    End If
        
    SldMesEstAlm2_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEstAlm2_Atualiza:

    SldMesEstAlm2_Atualiza = Err

    Select Case Err

        Case 60960, 60961
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESESTALM21", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case 60962
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESESTALM2", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case 60963
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESESTALM2", Err, Year(objSldDiaEst.dtData), iAlmoxarifado, objSldDiaEst.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151830)

    End Select

    Exit Function

End Function

Function Estoque_Grava_Trans(ByVal objProdutoFilial As ClassProdutoFilial, ByVal iControleEstoque As Integer) As Long
'Grava o Estoque do Produto da Filial

Dim lErro As Long
Dim iIndice As Integer
Dim tProdutoFilial As typeProdutoFilial
Dim alComando(5) As Long
Dim iContrEst As Integer
Dim sNomeReduzido As String, iFilialEmpresa As Integer

On Error GoTo Erro_Estoque_Grava_Trans

    'Abre os comandos

    For iIndice = 0 To 4
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 33256
    Next

    If objProdutoFilial.iFilialEmpresa = 0 Then gError 105130

    'Pesquisar o produto por código
    lErro = Comando_ExecutarPos(alComando(0), "SELECT ControleEstoque FROM Produtos WHERE Codigo = ?", 0, iContrEst, objProdutoFilial.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 33258

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 33259

    'Não encontrou o produto ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 33260

    '"Lock" no produto
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 33261

    'Lê o Produto Filial
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Almoxarifado, ESAuto, PPAuto, TRAuto, CMAuto FROM ProdutosFilial WHERE FilialEmpresa = ? AND Produto = ?", 0, tProdutoFilial.iAlmoxarifado, tProdutoFilial.iESAuto, tProdutoFilial.iPPAuto, tProdutoFilial.iTRAuto, tProdutoFilial.iCMAuto, objProdutoFilial.iFilialEmpresa, objProdutoFilial.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 33262

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 33263

    If lErro = AD_SQL_SUCESSO Then 'MODIFICAÇÃO

        '"Lock" do Produto da Filial
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 33265
    
        'Se Manteve o Valor Calculado então não altera o BD
        If tProdutoFilial.iCMAuto = PRODUTOFILIAL_CALCULA_VALORES And tProdutoFilial.iCMAuto = objProdutoFilial.iCMCalculado Then
            objProdutoFilial.dConsumoMedio = tProdutoFilial.dConsumoMedio
        End If
        
        If tProdutoFilial.iESAuto = PRODUTOFILIAL_CALCULA_VALORES And tProdutoFilial.iESAuto = objProdutoFilial.iESCalculado Then
            objProdutoFilial.dEstoqueSeguranca = tProdutoFilial.dEstoqueSeguranca
        End If
        
        If tProdutoFilial.iPPAuto = PRODUTOFILIAL_CALCULA_VALORES And tProdutoFilial.iPPAuto = objProdutoFilial.iPPCalculado Then
            objProdutoFilial.dPontoPedido = tProdutoFilial.dPontoPedido
        End If
        
        If tProdutoFilial.iTRAuto = PRODUTOFILIAL_CALCULA_VALORES And tProdutoFilial.iTRAuto = objProdutoFilial.iTRCalculado Then
            objProdutoFilial.iTempoRessup = tProdutoFilial.iTempoRessup
        End If
        
        'Cria o registro na tabela ProdutosFilial se ainda não existe
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ProdutosFilial SET ConsumoMedio = ?, ConsumoMedioMax = ?,  MesesConsumoMedio = ?,CMAuto = ?, TempoRessup = ?,IntRessup =?, TRAuto = ?,TempoRessupMax = ?, PontoPedido = ?, EstoqueSeguranca = ?, EstoqueMaximo = ?, LoteEconomico = ?, PPAuto = ?, ESAuto=?, ClasseABC = ?, SituacaoTRibECF= ?, ICMSAliquota = ?, LoteMinimo = ? , ProdNaFilial = ?", alComando(1), objProdutoFilial.dConsumoMedio, objProdutoFilial.dConsumoMedioMax, objProdutoFilial.iMesesConsumoMedio, objProdutoFilial.iCMCalculado, objProdutoFilial.iTempoRessup, objProdutoFilial.iIntRessup, objProdutoFilial.iTRCalculado, objProdutoFilial.dTempoRessupMax, objProdutoFilial.dPontoPedido, objProdutoFilial.dEstoqueSeguranca, objProdutoFilial.dEstoqueMaximo, objProdutoFilial.dLoteEconomico, objProdutoFilial.iPPCalculado, objProdutoFilial.iESCalculado, objProdutoFilial.sClasseABC, objProdutoFilial.sSituacaoTribECF, objProdutoFilial.sICMSAliquota, objProdutoFilial.dLoteMinimo, _
            objProdutoFilial.iProdNaFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 33268

    Else 'CRIAÇÃO

        'Cria o registro na tabela ProdutosFilial se ainda não existe
        lErro = Comando_Executar(alComando(1), "INSERT INTO ProdutosFilial(FilialEmpresa,Produto,ConsumoMedio,ConsumoMedioMax,MesesConsumoMedio,CMAuto,TempoRessup,IntRessup,TRAuto,TempoRessupMax,PontoPedido,EstoqueSeguranca, EstoqueMaximo, LoteEconomico,PPAuto,ESAuto, ClasseABC, SituacaoTribECF, ICMSAliquota , LoteMinimo, ProdNaFilial ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", IIf(objProdutoFilial.iFilialEmpresa = 0, giFilialEmpresa, objProdutoFilial.iFilialEmpresa), objProdutoFilial.sProduto, objProdutoFilial.dConsumoMedio, objProdutoFilial.dConsumoMedioMax, objProdutoFilial.iMesesConsumoMedio, objProdutoFilial.iCMCalculado, objProdutoFilial.iTempoRessup, objProdutoFilial.iIntRessup, objProdutoFilial.iTRCalculado, objProdutoFilial.dTempoRessupMax, objProdutoFilial.dPontoPedido, objProdutoFilial.dEstoqueSeguranca, objProdutoFilial.dEstoqueMaximo, objProdutoFilial.dLoteEconomico, objProdutoFilial.iPPCalculado, objProdutoFilial.iESCalculado, objProdutoFilial.sClasseABC, _
            objProdutoFilial.sSituacaoTribECF, objProdutoFilial.sICMSAliquota, objProdutoFilial.dLoteMinimo, objProdutoFilial.iProdNaFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 33271

    End If

    'Verifica se Controle de Estoque foi modificado
    If iControleEstoque <> iContrEst Then
    
        'se vai passar a nao controlar estoque
        If iControleEstoque <> PRODUTO_CONTROLE_RESERVA Then
        
            lErro = Comando_Executar(alComando(4), "SELECT FilialEmpresa FROM Reserva WHERE Produto = ?", iFilialEmpresa, objProdutoFilial.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 201216
            
            lErro = Comando_BuscarProximo(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201214
            If lErro <> AD_SQL_SEM_DADOS Then gError 201215
            
        End If

        'Atualiza o Controle de Estoque na tabela de Produtos
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE Produtos SET  ControleEstoque = ?", alComando(0), iControleEstoque)
        If lErro <> AD_SQL_SUCESSO Then gError 33271

    End If
    
    'Fecha os comandos
    For iIndice = 0 To 4
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Estoque_Grava_Trans = SUCESSO

    Exit Function

Erro_Estoque_Grava_Trans:

    Estoque_Grava_Trans = gErr

    Select Case gErr

        Case 33201 'Erro tratado na rotina chamada
            'OK ??? O tratamento desse erro está incorreto.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 33256
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 33257
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 33258, 33259, 201214, 201216
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objProdutoFilial.sProduto)

        Case 33260
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProdutoFilial.sProduto)

        Case 33261
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", gErr, objProdutoFilial.sProduto)

        Case 33262, 33263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", gErr, objProdutoFilial.iFilialEmpresa, objProdutoFilial.sProduto)

        Case 33265
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOSFILIAL", gErr)

        Case 33268
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", gErr, objProdutoFilial.iFilialEmpresa, objProdutoFilial.sProduto)

        Case 33271
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOS", gErr, objProdutoFilial.sProduto)

        Case 33270
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOSFILIAL", gErr, objProdutoFilial.iFilialEmpresa, objProdutoFilial.sProduto)

        Case 105130
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALEMPRESA_ZERADA", gErr, objProdutoFilial.iFilialEmpresa)

        Case 201215
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRECISA_EXCLUIR_RESERVAS_PROD", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151831)

    End Select

    'Fecha os comandos
    For iIndice = 0 To 4
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Estoque_Grava(ByVal objProdutoFilial As ClassProdutoFilial, ByVal iControleEstoque As Integer) As Long
'Grava o Estoque do Produto da Filial

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Estoque_Grava

    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 33257

    lErro = CF("Estoque_Grava1", objProdutoFilial, iControleEstoque)
    If lErro <> SUCESSO Then Error 62660

    'Faz o commit da transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 33201

    Estoque_Grava = SUCESSO

    Exit Function

Erro_Estoque_Grava:

    Estoque_Grava = Err

    Select Case Err

        Case 33201
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case 33257
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 62660
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151832)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function Estoque_Grava1(ByVal objProdutoFilial As ClassProdutoFilial, ByVal iControleEstoque As Integer) As Long
'Grava o Estoque do Produto da Filial

Dim lErro As Long

On Error GoTo Erro_Estoque_Grava1

    lErro = CF("Estoque_Grava_Trans", objProdutoFilial, iControleEstoque)
    If lErro <> SUCESSO Then gError 105127

    Estoque_Grava1 = SUCESSO

    Exit Function

Erro_Estoque_Grava1:

    Estoque_Grava1 = gErr

    Select Case gErr

        Case 105127
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151833)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function TipoDeProduto_Grava(ByVal objTipoDeProduto As ClassTipoDeProduto) As Long
'Inclui ou altera um Tipo de Produto
'Tabelas:TiposDeProduto e TipoDeProdutoCategoria

Dim lErro As Long
Dim iIndice As Integer
Dim colCategoriaItemCopia As New Collection
Dim tTipoDeProduto As typeTipoDeProduto
Dim sCategoria As String, sItem As String
Dim objTipoDeProdutoCategoria As ClassTipoDeProdutoCategoria
Dim lTransacao As Long, alComando(1 To 6) As Long

On Error GoTo Erro_TipoDeProduto_Grava

    'Cria uma cópia "de trabalho" da coleção passada como parametro
    For Each objTipoDeProdutoCategoria In objTipoDeProduto.colCategoriaItem
        colCategoriaItemCopia.Add objTipoDeProdutoCategoria
    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 22575
    Next

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 22576

    tTipoDeProduto.sDescricao = String(STRING_TIPODEPRODUTO_DESCRICAO, 0)
    tTipoDeProduto.sSiglaUMCompra = String(STRING_UM_SIGLA, 0)
    tTipoDeProduto.sSiglaUMEstoque = String(STRING_UM_SIGLA, 0)
    tTipoDeProduto.sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
    tTipoDeProduto.sSigla = String(STRING_TIPODEPRODUTO_SIGLA, 0)
    tTipoDeProduto.sIPICodDIPI = String(STRING_PRODUTO_IPI_COD_DIPI, 0)
    tTipoDeProduto.sIPICodigo = String(STRING_PRODUTO_IPI_CODIGO, 0)
    tTipoDeProduto.sISSCodigo = String(STRING_PRODUTO_ISS_CODIGO, 0)

    'Faz "locks" nas tabelas dos objetos relacionados ao Tipo de Produto
    lErro = TipoDeProduto_Grava_Tabelas_Lock(objTipoDeProduto)
    If lErro <> SUCESSO Then Error 22590

    'Pesquisa no BD o Tipo de Produto em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Descricao, Sigla, ClasseUM, SiglaUMEstoque, SiglaUMCompra, SiglaUMVenda, ControleEstoque, Faturamento, Compras, PCP, KitBasico, KitInt, IPIAliquota, IPICodigo, IPICodDIPI, Natureza, Apropriacao, MesesConsumoMedio, ConsumoMedioMax, TempoRessupMax, IntRessup, PercentMaisQuantCotAnt, PercentMenosQuantCotAnt, PercentMaisReceb, PercentMenosReceb, Residuo, ConsideraQuantCotAnt, TemFaixaReceb, RecebForaFaixa FROM TiposDeProduto WHERE TipoDeProduto = ?", 0, tTipoDeProduto.sDescricao, tTipoDeProduto.sSigla, tTipoDeProduto.iClasseUM, tTipoDeProduto.sSiglaUMEstoque, tTipoDeProduto.sSiglaUMCompra, tTipoDeProduto.sSiglaUMVenda, tTipoDeProduto.iControleEstoque, tTipoDeProduto.iFaturamento, tTipoDeProduto.iCompras, tTipoDeProduto.iPCP, tTipoDeProduto.iKitBasico, tTipoDeProduto.iKitInt, tTipoDeProduto.dIPIAliquota, tTipoDeProduto.sIPICodigo, tTipoDeProduto.sIPICodDIPI, _
    tTipoDeProduto.iNatureza, tTipoDeProduto.iApropriacaoCusto, tTipoDeProduto.iMesesConsumoMedio, tTipoDeProduto.dConsumoMedioMax, tTipoDeProduto.dTempoRessupMax, tTipoDeProduto.iIntRessup, tTipoDeProduto.dPercentMaisQuantCotAnt, tTipoDeProduto.dPercentMenosQuantCotAnt, tTipoDeProduto.dPercentMaisReceb, tTipoDeProduto.dPercentMenosReceb, tTipoDeProduto.dResiduo, tTipoDeProduto.iConsideraQuantCotAnt, tTipoDeProduto.iTemFaixaReceb, tTipoDeProduto.iRecebFaixaFora, objTipoDeProduto.iTipo)
    If lErro <> AD_SQL_SUCESSO Then Error 22577

    'Lê o Tipo de Produto, se estiver no BD
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22578

    'Se o Tipo de produto já existe - MODIFICAÇÃO
    If lErro = AD_SQL_SUCESSO Then

        'Alterar o Tipo de Produto
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE TiposDeProduto SET Descricao = ?, Sigla = ?, ClasseUM = ?, SiglaUMEstoque = ?, SiglaUMCompra = ?, SiglaUMVenda = ?, ControleEstoque = ?, Faturamento = ?, Compras = ?, PCP = ?, KitBasico = ?, KitInt = ?, IPIAliquota = ?, IPICodigo = ?, IPICodDIPI = ?, Natureza = ?, Apropriacao = ?, MesesConsumoMedio = ?, ConsumoMedioMax = ?, TempoRessupMax = ?, IntRessup = ?, PercentMaisQuantCotAnt = ?,PercentMenosQuantCotAnt = ?, PercentMaisReceb = ?, PercentMenosReceb = ?, Residuo = ?, ConsideraQuantCotAnt = ?, TemFaixaReceb = ?, RecebForaFaixa = ?, ContaContabil = ?, ContaContabilProducao = ?, KitVendaComp = ? " & _
                                                ", Origem = ?, SiglaUMTrib = ?, ExTIPI = ?, ProdutoEspecifico = ?, Genero = ?, ISSQN = ?, CEST = ? ", alComando(1), objTipoDeProduto.sDescricao, objTipoDeProduto.sSigla, objTipoDeProduto.iClasseUM, objTipoDeProduto.sSiglaUMEstoque, objTipoDeProduto.sSiglaUMCompra, objTipoDeProduto.sSiglaUMVenda, objTipoDeProduto.iControleEstoque, objTipoDeProduto.iFaturamento, objTipoDeProduto.iCompras, objTipoDeProduto.iPCP, objTipoDeProduto.iKitBasico, _
        objTipoDeProduto.iKitInt, objTipoDeProduto.dIPIAliquota, objTipoDeProduto.sIPICodigo, objTipoDeProduto.sIPICodDIPI, objTipoDeProduto.iNatureza, objTipoDeProduto.iApropriacaoCusto, objTipoDeProduto.iMesesConsumoMedio, objTipoDeProduto.dConsumoMedioMax, objTipoDeProduto.dTempoRessupMax, objTipoDeProduto.iIntRessup, objTipoDeProduto.dPercentMaisQuantCotAnt, objTipoDeProduto.dPercentMenosQuantCotAnt, objTipoDeProduto.dPercentMaisReceb, objTipoDeProduto.dPercentMenosReceb, objTipoDeProduto.dResiduo, objTipoDeProduto.iConsideraQuantCotAnt, objTipoDeProduto.iTemFaixaReceb, objTipoDeProduto.iRecebForaFaixa, objTipoDeProduto.sContaContabil, objTipoDeProduto.sContaProducao, objTipoDeProduto.iKitVendaComp _
        , objTipoDeProduto.iOrigem, objTipoDeProduto.sSiglaUMTrib, objTipoDeProduto.iExTIPI, objTipoDeProduto.iProdutoEspecifico, objTipoDeProduto.sGenero, objTipoDeProduto.sISSQN, objTipoDeProduto.sCEST)
        
        If lErro <> AD_SQL_SUCESSO Then Error 22579

        sCategoria = String(STRING_CATEGORIAPRODUTO_CATEGORIA, 0)
        sItem = String(STRING_CATEGORIAPRODUTOITEM_ITEM, 0)

        'Percorre as Categorias do Tipo de Produto no BD
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Categoria, Item FROM TipoDeProdutoCategorias WHERE TipoDeProduto = ?", 0, sCategoria, sItem, objTipoDeProduto.iTipo)
        If lErro <> AD_SQL_SUCESSO Then Error 22580

        'Lê a Categoria do Tipo de Produto, se estiver no BD
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22581

        Do While lErro <> AD_SQL_SEM_DADOS

            'Procura a Categoria na coleção correspondente ao grid
            iIndice = TipoDeProduto_Grava_CategoriaNaColecao(colCategoriaItemCopia, sCategoria)

            If iIndice <> 0 Then

                Set objTipoDeProdutoCategoria = colCategoriaItemCopia.Item(iIndice)

                'Se houver sido alterado o Item
                If objTipoDeProdutoCategoria.sItem <> sItem Then

                    'Altera a Tabela TipoDeProdutoCategorias
                    lErro = Comando_ExecutarPos(alComando(4), "UPDATE TipoDeProdutoCategorias SET Categoria = ?, Item = ?", alComando(3), objTipoDeProdutoCategoria.sCategoria, objTipoDeProdutoCategoria.sItem)
                    If lErro <> AD_SQL_SUCESSO Then Error 22583

                End If

                'Retira da coleção
                colCategoriaItemCopia.Remove (iIndice)

            Else

                'Excluir registro em TipoDeProdutoCategorias
                lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM TipoDeProdutoCategorias", alComando(3))
                If lErro <> AD_SQL_SUCESSO Then Error 22584

            End If

            'Lê a Categoria do Tipo de Produto, se estiver no BD
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22582

        Loop

    Else 'O Tipo de Produto não existe

        'Insere em TiposDeProduto, criando um novo Tipo
        lErro = Comando_Executar(alComando(6), "INSERT INTO TiposDeProduto (TipoDeProduto, Descricao, Sigla, ClasseUM, SiglaUMEstoque, SiglaUMCompra, SiglaUMVenda, ControleEstoque, Faturamento, Compras, PCP, KitBasico, KitInt, IPIAliquota, IPICodigo, IPICodDIPI, Natureza, Apropriacao, MesesConsumoMedio, ConsumoMedioMax, TempoRessupMax, IntRessup, PercentMaisQuantCotAnt, PercentMenosQuantCotAnt, PercentMaisReceb, PercentMenosReceb, Residuo, ConsideraQuantCotAnt, TemFaixaReceb, RecebForaFaixa, ContaContabil, ContaContabilProducao, KitVendaComp " & _
        ", Origem, SiglaUMTrib, ExTIPI, ProdutoEspecifico, Genero, ISSQN, CEST) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objTipoDeProduto.iTipo, objTipoDeProduto.sDescricao, objTipoDeProduto.sSigla, objTipoDeProduto.iClasseUM, objTipoDeProduto.sSiglaUMEstoque, objTipoDeProduto.sSiglaUMCompra, objTipoDeProduto.sSiglaUMVenda, objTipoDeProduto.iControleEstoque, objTipoDeProduto.iFaturamento, objTipoDeProduto.iCompras, objTipoDeProduto.iPCP, objTipoDeProduto.iKitBasico, _
        objTipoDeProduto.iKitInt, objTipoDeProduto.dIPIAliquota, objTipoDeProduto.sIPICodigo, objTipoDeProduto.sIPICodDIPI, objTipoDeProduto.iNatureza, objTipoDeProduto.iApropriacaoCusto, objTipoDeProduto.iMesesConsumoMedio, objTipoDeProduto.dConsumoMedioMax, objTipoDeProduto.dTempoRessupMax, objTipoDeProduto.iIntRessup, objTipoDeProduto.dPercentMaisQuantCotAnt, objTipoDeProduto.dPercentMenosQuantCotAnt, objTipoDeProduto.dPercentMaisReceb, objTipoDeProduto.dPercentMenosReceb, objTipoDeProduto.dResiduo, objTipoDeProduto.iConsideraQuantCotAnt, objTipoDeProduto.iTemFaixaReceb, objTipoDeProduto.iRecebForaFaixa, objTipoDeProduto.sContaContabil, objTipoDeProduto.sContaProducao, objTipoDeProduto.iKitVendaComp _
        , objTipoDeProduto.iOrigem, objTipoDeProduto.sSiglaUMTrib, objTipoDeProduto.iExTIPI, objTipoDeProduto.iProdutoEspecifico, objTipoDeProduto.sGenero, objTipoDeProduto.sISSQN, objTipoDeProduto.sCEST)
        If lErro <> AD_SQL_SUCESSO Then Error 22585

    End If

    'Grava as Categorias que ainda não faziam parte do Tipo de Produto
    lErro = TipoDeProduto_Grava_NovasCategorias(objTipoDeProduto, colCategoriaItemCopia)
    If lErro <> SUCESSO Then Error 22586

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 22587

    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TipoDeProduto_Grava = SUCESSO

    Exit Function

Erro_TipoDeProduto_Grava:

    TipoDeProduto_Grava = Err

    Select Case Err

        Case 22575
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22576
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 22577, 22578
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEPRODUTO", Err, objTipoDeProduto.iTipo)

        Case 22579
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_TIPOSDEPRODUTO", Err, objTipoDeProduto.iTipo)

        Case 22580, 22581, 22582
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEPRODUTOCATEGORIAS", Err, objTipoDeProduto.iTipo)

        Case 22583
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_TIPODEPRODUTOCATEGORIAS", Err)

        Case 22584
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPODEPRODUTOCATEGORIAS", Err, objTipoDeProduto.iTipo)

        Case 22585
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOPRODUTO", Err, objTipoDeProduto.iTipo)

        Case 22586, 22590
        'Erros já tratados
        
        Case 22587
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151834)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'##################################################################
'Inserido por Wagner 12/06/2006
Function FornecedorProdutoFF_Grava(ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF, iPadrao As Integer) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_FornecedorProdutoFF_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 180196
    
    lErro = FornecedorProdutoFF_Grava_EmTrans(objFornecedorProdutoFF, iPadrao)
    If lErro <> SUCESSO Then gError 180197
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 180198

    FornecedorProdutoFF_Grava = SUCESSO

    Exit Function

Erro_FornecedorProdutoFF_Grava:

    FornecedorProdutoFF_Grava = gErr

    Select Case gErr

        Case 180196
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 180197

        Case 180198
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180199)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function
'##################################################################

Function FornecedorProdutoFF_Grava_EmTrans(ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF, iPadrao As Integer) As Long
'Grava a associação Produto X Fornecedor

Dim lErro As Long
Dim alComando(4) As Long
Dim iIndice As Integer
'Dim lTransacao As Long
Dim lCodigo As Long
Dim lFornecedor As Long
Dim lFornecedorPadrao As Long
Dim sDescricao As String
Dim sDescFornProd As String
Dim objProduto As New ClassProduto

On Error GoTo Erro_FornecedorProdutoFF_Grava_EmTrans

    'Abertura comandos
    For iIndice = 0 To 4
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 54223
    Next

'    'Abertura transação
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 54224

    sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    sDescFornProd = String(STRING_FORNECEDORPRODUTO_DESCRICAO, 0)

    'Pesquisa no BD o Fornecedor passado como parâmetro
    lErro = Comando_ExecutarLockado(alComando(0), "SELECT Codigo FROM Fornecedores WHERE Codigo = ?", lCodigo, objFornecedorProdutoFF.lFornecedor)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54225

    'Verifica se Fornecedor existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54226

    'Não encontrou o Fornecedor no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 54227

    lErro = Comando_LockShared(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 54228

    objProduto.sCodigo = objFornecedorProdutoFF.sProduto

    lErro = CF("Produto_Lock", objProduto)
    If lErro <> SUCESSO And lErro <> 26962 Then Error 54242

    'Pesquisa no BD o Produto passado como parâmetro
    lErro = Comando_ExecutarLockado(alComando(1), "SELECT Descricao FROM Produtos WHERE Codigo = ?", sDescricao, objFornecedorProdutoFF.sProduto)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54229

    'Verifica se Produto existe
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54230

    'Não encontrou o Produto no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 54235

    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 54222

    'Pesquisa no BD o FornecedorProdutoFF passado como parâmetro
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Fornecedor FROM FornecedorProdutoFF WHERE Fornecedor = ? AND Produto = ? AND FilialEmpresa = ? AND FilialForn = ?", 0, lFornecedor, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto, objFornecedorProdutoFF.iFilialEmpresa, objFornecedorProdutoFF.iFilialForn)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54236

    'Verifica se FornecedorProdutoFF existe
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54237

    'Encontrou o FornecedorProdutoFF no BD
    If lErro = AD_SQL_SUCESSO Then

        'Lock do FornecedorProdutoFF
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then Error 54299
        
        'Atualiza a tabela FornecedorProdutoFF
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE FornecedorProdutoFF SET ProdutoFornecedor = ?, LoteMinimo = ?, Nota = ?, Descricao = ?", _
            alComando(2), objFornecedorProdutoFF.sProdutoFornecedor, objFornecedorProdutoFF.dLoteMinimo, objFornecedorProdutoFF.iNota, objFornecedorProdutoFF.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 54238
        
    Else
        'Não encontrou o FornecedorProdutoFF no BD

        lErro = CF("FilialFornecedor_Lock", objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.iFilialForn)
        If lErro <> SUCESSO And lErro <> 42870 Then Error 54300
        
        'Insere o FornecedorProdutoFF na tabela FornecedorProdutoFF
        lErro = Comando_Executar(alComando(4), "INSERT INTO FornecedorProdutoFF (FilialEmpresa, Produto, Fornecedor, FilialForn, ProdutoFornecedor, LoteMinimo, Nota, Descricao) VALUES (?,?,?,?,?,?,?,?)", _
            objFornecedorProdutoFF.iFilialEmpresa, objFornecedorProdutoFF.sProduto, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.iFilialForn, objFornecedorProdutoFF.sProdutoFornecedor, objFornecedorProdutoFF.dLoteMinimo, objFornecedorProdutoFF.iNota, objFornecedorProdutoFF.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 54239
        
    End If

    'Atualiza Fornecedor Padrão
    lErro = CF("ProdutoFilial_AtualizaFilialFornPadrao", objFornecedorProdutoFF, iPadrao)
    If lErro <> SUCESSO And lErro <> 54279 And lErro <> 54280 And lErro <> 54281 Then Error 54240

'    'Confirma transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 54241

    'Fechamento comandos
    For iIndice = 0 To 4
        Call Comando_Fechar(alComando(iIndice))
    Next

    FornecedorProdutoFF_Grava_EmTrans = SUCESSO

    Exit Function

Erro_FornecedorProdutoFF_Grava_EmTrans:

    FornecedorProdutoFF_Grava_EmTrans = Err

    Select Case Err

        Case 54222
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS1", Err, objFornecedorProdutoFF.sProduto)

        Case 54223
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 54224
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 54225, 54226
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err, objFornecedorProdutoFF.lFornecedor)

        Case 54227
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_CADASTRADO", Err, objFornecedorProdutoFF.lFornecedor)

        Case 54228
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORES", Err, objFornecedorProdutoFF.lFornecedor)

        Case 54229, 54230
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", Err, objFornecedorProdutoFF.sProduto)

        Case 54235
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objFornecedorProdutoFF.sProduto)

        Case 54236, 54237
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF", Err, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto)

        Case 54238
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FORNECEDORPRODUTOFF", Err, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto)

        Case 54239
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FORNECEDORPRODUTOFF", Err, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto)

'        Case 54241
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 54240, 54242, 54300

        Case 54299 'Erro na tentativa de fazer 'lock' na tabela FornecedorProdutoFF
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORPRODUTOFF", Err, lFornecedor, objFornecedorProdutoFF.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151835)

    End Select
'
'    'Fechamento transação
'    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = 0 To 4
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'###############################################################
'Inserido por Wagner 12/06/2006
Function FornecedorProdutoFF_Exclui(ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_FornecedorProdutoFF_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 180229
    
    lErro = FornecedorProdutoFF_Exclui_EmTrans(objFornecedorProdutoFF)
    If lErro <> SUCESSO Then gError 180230
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 180231
    
    FornecedorProdutoFF_Exclui = SUCESSO

    Exit Function

Erro_FornecedorProdutoFF_Exclui:
    
    FornecedorProdutoFF_Exclui = gErr

    Select Case gErr

        Case 180229
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 180230

        Case 180231
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180232)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function
    
End Function

Function FornecedorProdutoFF_Exclui_EmTrans(ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF) As Long
'Exclui a Associação Produto X Fornecedor da tabela FornecedorProdutoFF a partir da Filial, Filial Empresa, Produto e Fornecedor
'passados por objFornecedorProdutoFF

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 2) As Long
'Dim lTransacao As Long
Dim lFornecedor As Long
Dim lFornecedorPadrao As Long
Dim lFornecedorExcluir As Long
Dim colPedCotacao As New Collection
Dim colCotacao As New Collection

On Error GoTo Erro_FornecedorProdutoFF_Exclui_EmTrans

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 54243
    Next

'    'Inicia a Transacao
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 54244

    'Pesquisa o FornecedorProdutoFF no BD
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Fornecedor FROM FornecedorProdutoFF WHERE Fornecedor = ? AND Produto = ? AND FilialForn = ? AND FilialEmpresa = ?", 0, lFornecedor, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto, objFornecedorProdutoFF.iFilialForn, objFornecedorProdutoFF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54245

    'Verifica se FornecedorProdutoFF existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54246

    'Não encontrou o FornecedorProdutoFF ==> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 54247

    'Lock do FornecedorProdutoFF
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 54251

    'Verifica se existe relacionamento com outras tabelas
    lErro = CF("FornecedorProdutoFF_Existe_Relacionamento", objFornecedorProdutoFF)
    If lErro <> SUCESSO Then Error 54250

    'Faz Baixa de Itens Pedidos de Cotação
    lErro = CF("ItensPedCotacao_Baixa", objFornecedorProdutoFF, colPedCotacao)
    If lErro <> SUCESSO Then Error 54301

    'Baixa PedidoCotação se todos os Itens Pedidos Cotação foram baixados
    lErro = CF("PedsCotacao_Baixa", objFornecedorProdutoFF, colPedCotacao, colCotacao)
    If lErro <> SUCESSO Then Error 54302

    'Baixa Cotação se todos os PedidosCotação ligados foram baixados
    lErro = CF("Cotacoes_Baixa", colCotacao)
    If lErro <> SUCESSO Then Error 54303

    'Exclui FornecedorProdutoFF
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FornecedorProdutoFF", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 54248

    'Atualiza Fornecedor padrão
    lErro = CF("ProdutoFilial_AtualizaFilialFornPadrao", objFornecedorProdutoFF, FORN_PROD_NAO_PADRAO)
    If lErro <> SUCESSO And lErro <> 54279 And lErro <> 54280 And lErro <> 54281 Then Error 54249

'    'Confirma a transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 54252

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FornecedorProdutoFF_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_FornecedorProdutoFF_Exclui_EmTrans:
    
    FornecedorProdutoFF_Exclui_EmTrans = Err

    Select Case Err

        Case 54243
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

'        Case 54244
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 54245, 54246
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF", Err, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto)

        Case 54247
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECEDORPRODUTOFF_NAO_ENCONTRADO", Err, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto)

        Case 54248
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FORNECEDORPRODUTO", Err)

        Case 54249, 54250, 54301, 54302, 54303

        Case 54251
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORPRODUTOFF", Err, lFornecedor)

'        Case 54252
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151836)

    End Select

'    'Fechamento transação
'    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensPedCotacao_Baixa(ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF, ByVal colPedCotacao As Collection) As Long
'Faz Baixa de Itens Pedidos de Cotação

Dim lErro As Long
Dim alComando(7) As Long
Dim tItemPedCotacao As typeItemPedCotacao
Dim tItensCotacao As typeItemCotacao
Dim objPedCotacao As New ClassPedidoCotacao
Dim lNumIntDoc As Long
Dim lCotacaoProduto As Long
Dim iIndice As Integer
Dim lCodigo As Long
Dim lItemConcorrencia As Long

On Error GoTo Erro_ItensPedCotacao_Baixa

    'Abertura comandos
    For iIndice = 0 To 7
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 54167
    Next

    'Lê no BD o PedidoCotação e o Item Pedido de Cotação
    lErro = Comando_Executar(alComando(0), "SELECT PedidoCotacao.NumIntDoc, ItemPedCotacao.NumIntDoc, ItemPedCotacao.CotacaoProduto FROM PedidoCotacao, ItemPedCotacao, CotacaoProduto WHERE PedidoCotacao.NumIntDoc = ItemPedCotacao.PedidoCotacao AND CotacaoProduto.NumIntDoc = ItemPedCotacao.CotacaoProduto AND PedidoCotacao.Fornecedor = ? AND CotacaoProduto.Produto = ? AND PedidoCotacao.FilialEmpresa = ? AND PedidoCotacao.Filial = ?", _
        lNumIntDoc, tItemPedCotacao.lNumIntDoc, tItemPedCotacao.lCotacaoProduto, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.sProduto, objFornecedorProdutoFF.iFilialEmpresa, objFornecedorProdutoFF.iFilialForn)
    If lErro <> AD_SQL_SUCESSO Then Error 54321

    'Verifica se existe o Item Pedido de Cotação
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54322

    'Enquanto econtrar pedido/item
    Do While lErro = AD_SQL_SUCESSO
    
        'Preenche o objPedCotacao
        objPedCotacao.lNumIntDoc = lNumIntDoc

        'Seleciona o Item Pedido Cotação em questão
        lErro = Comando_ExecutarPos(alComando(1), "SELECT CotacaoProduto FROM ItemPedCotacaoN WHERE PedidoCotacao = ? AND Status=?", 0, lCotacaoProduto, lNumIntDoc, ITEMPEDCOTACAO_STATUS_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then Error 54309

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54305

        'Faz LockExclusive em ItemPedCotação
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 54326

        'Pesquisa no BD se existe relacionamento entre as tabelas ItemPedCotacao, ItensCotacao
        lErro = Comando_ExecutarPos(alComando(3), "SELECT NumIntDoc, CondPagto, DataReferencia, PrecoUnitario, OutrasDespesas, ValorFrete, ValorSeguro, ValorDesconto, ValorTotal, ValorIPI, AliquotaIPI, AliquotaICMS, PrazoEntrega, QuantEntrega, Observacao FROM ItensCotacaoN WHERE ItemPedCotacao = ? AND Status = ? ", 0, _
            tItensCotacao.lNumIntDoc, tItensCotacao.iCondPagto, tItensCotacao.dtDataReferencia, tItensCotacao.dPrecoUnitario, tItensCotacao.dOutrasDespesas, tItensCotacao.dValorFrete, tItensCotacao.dValorSeguro, tItensCotacao.dValorDesconto, tItensCotacao.dValorTotal, tItensCotacao.dValorIPI, tItensCotacao.dAliquotaIPI, tItensCotacao.dAliquotaICMS, tItensCotacao.iPrazoEntrega, tItensCotacao.dQuantEntrega, tItensCotacao.lObservacao, tItemPedCotacao.lNumIntDoc, ITENSCOTACAO_STATUS_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then Error 54313
        
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54308
        
        'Enquanto encontrar
        Do While lErro = AD_SQL_SUCESSO
            
            'Faz LockExclusive em ItensCotação
            lErro = Comando_LockExclusive(alComando(3))
            If lErro <> AD_SQL_SUCESSO Then Error 54304
            
            'Verifica se ItensCotação tem vínculo com CotaçãoItemConcorrência
            lErro = Comando_Executar(alComando(4), "SELECT CotacaoItemConcorrencia.ItemConcorrencia FROM CotacaoItemConcorrencia, ItensCotacao WHERE ItensCotacao.NumIntDoc = CotacaoItemConcorrencia.ItemCotacao ", lItemConcorrencia)
            If lErro <> AD_SQL_SUCESSO Then Error 54187
            
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54258
            
            'Se tiver --> Erro
            If lErro = AD_SQL_SUCESSO Then Error 54323
            
            'Exclui o ItemCotação do BD
            lErro = Comando_ExecutarPos(alComando(6), "UPDATE ItensCotacaoN SET Status = ?", alComando(3), ITENSCOTACAO_STATUS_BAIXADO)
            If lErro <> AD_SQL_SUCESSO Then Error 54325
            
            'Busca o próximo ItemCotação
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54263
            
        Loop
        
    'Exclui o ItemPedCotação
    lErro = Comando_ExecutarPos(alComando(7), "UPDATE ItemPedCotacaoN Set Status=?", alComando(1), ITEMPEDCOTACAO_STATUS_BAIXADO)
    If lErro <> AD_SQL_SUCESSO Then Error 54316

    'Guarda Pedido lido na coleção
    colPedCotacao.Add objPedCotacao
    
    'Busca o próximo PedidoCotação
    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54259
    
    Loop
        
    'Fechamento comandos
    For iIndice = 0 To 7
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensPedCotacao_Baixa = SUCESSO

    Exit Function

Erro_ItensPedCotacao_Baixa:

    ItensPedCotacao_Baixa = Err

    Select Case Err

        Case 54167
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 54263, 54259, 54321, 54322
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOTACAO", Err)

        Case 54187, 54258
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOITEMCONCORRENCIA", Err)
        
        Case 54304
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSCOTACAO", Err)

        Case 54305, 54309
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMPEDCOTACAO", Err)

        Case 54308, 54313
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSCOTACAO", Err)

        Case 54315
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMPEDCOTACAOBAIXADO", Err)

        Case 54316
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITEMPEDCOTACAO", Err)

        Case 54323
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMCOTACAO_VINCULADO_COTACAOITEMCONCORRENCIA", Err, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.iFilialForn, objFornecedorProdutoFF.sProduto)
        
        Case 54324
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSCOTACAOBAIXADOS", Err)

        Case 54325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITENSCOTACAO1", Err)

        Case 54326
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMPEDCOTACAO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151837)

    End Select

    'Fechamento comandos
    For iIndice = 0 To 7
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function PedsCotacao_Baixa(ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF, ByVal colPedCotacao As Collection, ByVal colCotacao As Collection) As Long
'Se Baixar todos os Itens Pedido Cotação de algum Pedido Cotação --> Baixa o Pedido Cotação

Dim lErro As Long
Dim iIndice As Integer
Dim objCotacao As ClassCotacao
Dim objPedCotacao As ClassPedidoCotacao
Dim tCotacao As typePedidoCotacao
Dim tItemPedCotacao As typeItemPedCotacao
Dim lCodigo As Long
Dim alComando(6) As Long
Dim lCotacaoProduto As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_PedsCotacao_Baixa

    'Abertura comandos
    For iIndice = 0 To 5
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 54307
    Next

    'Para cada Pedido de Cotação
    For Each objPedCotacao In colPedCotacao

        'Pesquisa no BD se existe relacionamento entre as tabelas PedidoCotação, ItemPedCotação
        lErro = Comando_Executar(alComando(0), "SELECT ItemPedCotacao.NumIntDoc FROM PedidoCotacao, ItemPedCotacao WHERE PedidoCotacao.NumIntDoc = ItemPedCotacao.PedidoCotacao AND PedidoCotacao.NumIntDoc = ? AND PedidoCotacao.Fornecedor = ? AND PedidoCotacao.FilialEmpresa = ? AND PedidoCotacao.Filial = ? ", _
            lCodigo, objPedCotacao.lNumIntDoc, objFornecedorProdutoFF.lFornecedor, objFornecedorProdutoFF.iFilialEmpresa, objFornecedorProdutoFF.iFilialForn)
        If lErro <> AD_SQL_SUCESSO Then Error 54311
    
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54312
        
        'Se o ItemPedidoCotação em questão está sem dados
        If lErro = AD_SQL_SEM_DADOS Then
            
            tCotacao.sContato = String(STRING_PEDIDOCOTACAO_CONTATO, 0)
            
            'Lê os registros da tabela PedidoCotação
            lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, FilialEmpresa, Fornecedor, Filial, Contato, DataEmissao, Data, DataValidade, TipoFrete, Status FROM PedidoCotacaoN WHERE NumIntDoc = ? AND StatusBaixa = ?", 0, _
                tCotacao.lNumIntDoc, tCotacao.iFilialEmpresa, tCotacao.lFornecedor, tCotacao.iFilial, tCotacao.sContato, tCotacao.dtDataEmissao, tCotacao.dtData, tCotacao.dtDataValidade, tCotacao.iTipoFrete, tCotacao.iStatus, objPedCotacao.lNumIntDoc, PEDIDOCOTACAO_STATUS_ATIVO)
            If lErro <> AD_SQL_SUCESSO Then Error 54146

            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54205

            'Faz "LockExclusive" em PedidoCotação
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 54202
            
' falar com Shirley. Era o codigo original
            
            'Insere na tabela PedidoCotaçãoBaixado os registros lidos de PedidoCotação
'            lErro = Comando_Executar(alComando(2), "INSERT INTO PedidoCotacaoBaixado (NumIntDoc, FilialEmpresa, Codigo, Fornecedor, Filial, Contato, DataEmissao, Data, DataValidade, TipoFrete, Status) VALUES (?,?,?,?,?,?,?,?,?,?,?) ", _
'                tCotacao.lNumIntDoc, tCotacao.iFilialEmpresa, tCotacao.lCodigo, tCotacao.lFornecedor, tCotacao.iFilial, tCotacao.sContato, tCotacao.dtDataEmissao, tCotacao.dtData, tCotacao.dtDataValidade, tCotacao.iTipoFrete, tCotacao.iStatus)
'            If lErro <> AD_SQL_SUCESSO Then Error 54319
'
'            'Exclui PedidoCotação
'            lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ItensPedCotacao", alComando(1))
'            If lErro <> AD_SQL_SUCESSO Then Error 54320
            
'o codigo abaixo substitui o codigo acima
            
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE PedidoCotacaoN SET StatusBaixa = ?", alComando(1), PEDIDOCOTACAO_STATUS_BAIXADO)
            If lErro <> AD_SQL_SUCESSO Then Error 54320
            
            'Busca em ItemPedCotaçãoBaixado, CotaçãoProduto o número da Cotação
            lErro = Comando_Executar(alComando(4), "SELECT Cotacao.NumIntDoc FROM Cotacao, ItemPedCotacaoBaixado, CotacaoProduto WHERE Cotacao.NumIntDoc = CotacaoProduto.Cotacao AND CotacaoProduto.NumIntDoc = ItemPedCotacaoBaixado.CotacaoProduto", lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then Error 54323
            
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54314
            
            Set objCotacao = New ClassCotacao
            
            objCotacao.lNumIntDoc = lNumIntDoc

            colCotacao.Add objCotacao

        End If
    
    Next

    'Fechamento comandos
    For iIndice = 0 To 5
        Call Comando_Fechar(alComando(iIndice))
    Next

    PedsCotacao_Baixa = SUCESSO

    Exit Function

Erro_PedsCotacao_Baixa:

    PedsCotacao_Baixa = Err

    Select Case Err

        Case 54146, 54205
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOTACAO", Err)
        
        Case 54202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PEDIDOCOTACAO", Err)

        Case 54307
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 54311, 54312, 54314, 54323
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOTACAO", Err)

        Case 54319
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PEDIDOCOTACAOBAIXADO", Err)

        Case 54320
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PEDIDOCOTACAO", Err, objPedCotacao.lNumIntDoc)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151838)

    End Select

    'Fechamento comandos
    For iIndice = 0 To 5
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Cotacoes_Baixa(ByVal colCotacao As Collection) As Long
'Se Baixar todos os PedidosCotação ligados a uma cotação, baixa a Cotação

Dim lErro As Long
Dim iIndice As Integer
Dim objCotacao As ClassCotacao
Dim alComando(8) As Long
Dim lCodigo As Long
Dim tCotacao As typeCotacao
Dim dQuantidade As Double
Dim tCotacaoProduto As typeCotacaoProduto

On Error GoTo Erro_Cotacoes_Baixa

    'Abertura comandos
    For iIndice = 0 To 7
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 54161
    Next

    'Para cada Cotação
    For Each objCotacao In colCotacao
        
        'Pesquisa no BD se existe relacionamento entre as tabelas CotaçãoProduto, ItemPedCotação
        lErro = Comando_Executar(alComando(0), "SELECT CotacaoProduto.Fornecedor FROM CotacaoProduto, ItemPedCotacao WHERE CotacaoProduto.NumIntDoc = ItemPedCotacao.CotacaoProduto AND CotacaoProduto.Cotacao = ?", _
            lCodigo, objCotacao.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 54184
    
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54185
    
        'Se não encontrou
        If lErro = AD_SQL_SEM_DADOS Then
                
            tCotacao.sDescricao = String(STRING_COTACAO_DESCRICAO, 0)
            
            'Lê os registros da tabela Cotação
            lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, FilialEmpresa, Codigo, Descricao, Data, TipoDestino, FornCliDestino, FilialDestino, Comprador FROM CotacaoN WHERE Cotacao.NumIntDoc = ? AND Status = ?", 0, _
                tCotacao.lNumIntDoc, tCotacao.iFilialEmpresa, tCotacao.lCodigo, tCotacao.sDescricao, tCotacao.dtData, tCotacao.iTipoDestino, tCotacao.lFornCliDestino, tCotacao.iFilialDestino, tCotacao.iComprador, objCotacao.lNumIntDoc, COTACAO_STATUS_ATIVO)
            If lErro <> AD_SQL_SUCESSO Then Error 54160

            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54203

            'Faz "LockExclusive" em Cotação
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 54206

            'Insere na tabela CotaçãoBaixada os registros lidos da tabela Cotação
            lErro = Comando_Executar(alComando(2), "UPDATE CotacaoN SET Status = ?", alComando(1), COTACAO_STATUS_BAIXADO)
            If lErro <> AD_SQL_SUCESSO Then Error 54277
            
            'Pesquisa se existe CotaçãoProduto ligada a Cotação
            lErro = Comando_Executar(alComando(3), "SELECT CotacaoProduto.Quantidade FROM CotacaoProduto, Cotacao WHERE Cotacao.NumIntDoc = CotacaoProduto.Cotacao AND Cotacao.NumIntDoc = ?", dQuantidade, objCotacao.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then Error 54306
            
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54298
            
            'Para cada CotaçãoProduto ligada a Cotação
            Do While lErro = AD_SQL_SUCESSO
                
                tCotacaoProduto.sProduto = String(STRING_COTACAOPRODUTO_PRODUTO, 0)
                tCotacaoProduto.sUM = String(STRING_COTACAOPRODUTO_UM, 0)
                
                'Lê CotaçãoProduto
                lErro = Comando_ExecutarPos(alComando(4), "SELECT NumIntDoc, Cotacao, Produto, Quantidade, UM, Fornecedor, Filial FROM CotacaoProdutoN WHERE CotacaoProduto.lNumIntDoc = ? AND Status = ?", 0, _
                    tCotacaoProduto.lNumIntDoc, tCotacaoProduto.lCotacao, tCotacaoProduto.sProduto, tCotacaoProduto.dQuantidade, tCotacaoProduto.sUM, tCotacaoProduto.lFornecedor, tCotacaoProduto.iFilial, objCotacao.lNumIntDoc, COTACAOPRODUTO_STATUS_ATIVO)
                If lErro <> AD_SQL_SUCESSO Then Error 54278
            
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54289
                
                'Faz "LockExclusive" em CotaçãoProduto
                lErro = Comando_LockExclusive(alComando(4))
                If lErro <> AD_SQL_SUCESSO Then Error 54273
            
                'Exclui CotaçãoProduto
                lErro = Comando_ExecutarPos(alComando(6), "UPDATE FROM CotacaoProdutoN SET Status=?", alComando(4), COTACAOPRODUTO_STATUS_BAIXADO)
                If lErro <> AD_SQL_SUCESSO Then Error 54274
            
                'Busca próxima CotaçãoProduto
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54318
            
            Loop
            
        End If
        
    Next
    
    'Fechamento comandos
    For iIndice = 0 To 7
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cotacoes_Baixa = SUCESSO

    Exit Function

Erro_Cotacoes_Baixa:

    Cotacoes_Baixa = Err

    Select Case Err

        Case 54161
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 54184, 54185, 54298, 54306
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOPRODUTO", Err)
        
        Case 54160, 54203
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAO", Err)
        
        Case 54206
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_COTACAO", Err)
            
        Case 54271
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COTACAOPRODUTOBAIXADO", Err)
            
        Case 54273
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_COTACAOPRODUTO", Err)
            
        Case 54274
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_COTACAOPRODUTO", Err)
            
        Case 54277
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_COTACAO", Err, tCotacao.lCodigo)
            
        Case 54278, 54289, 54318
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOPRODUTO", Err)
        
        Case 54317
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COTACAO", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151839)

    End Select

    'Fechamento comandos
    For iIndice = 0 To 7
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ProdutoFilial_AtualizaFilialFornPadrao(ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF, ByVal iPadrao As Integer) As Long
'iPadrao indica se o fornecedor identificado por lForn está sendo atualizado para se tornar o fornecedor padrao ou nao.

Dim lFornecedorPadraoAnterior As Long
Dim lFornecedorPadraoNovo As Long
Dim iFilialPadraoAnterior As Integer
Dim iFilialPadraoNova As Integer
Dim lErro As Long
Dim alComando(2) As Long
Dim iIndice As Integer

On Error GoTo Erro_ProdutoFilial_AtualizaFilialFornPadrao

    'Abertura comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 54223
    Next

    'Pesquisa no BD o Produto Filial
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Fornecedor, FilialForn FROM ProdutosFilial WHERE FilialEmpresa = ? AND Produto = ?", 0, lFornecedorPadraoAnterior, iFilialPadraoAnterior, objFornecedorProdutoFF.iFilialEmpresa, objFornecedorProdutoFF.sProduto)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54279

    'Verifica se Produto Filial existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 54280

    'Se não encontrou o Produto na Filial == > Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 54282

    'Guarda a Filial Fornecedor Padrao Atual
    lFornecedorPadraoNovo = lFornecedorPadraoAnterior
    iFilialPadraoNova = iFilialPadraoAnterior
        
        
    'Se a Filial Fornecedor era Padrão e não é mais
    If (lFornecedorPadraoAnterior = objFornecedorProdutoFF.lFornecedor) And (iFilialPadraoAnterior = objFornecedorProdutoFF.iFilialForn) And iPadrao = FORN_PROD_NAO_PADRAO Then
        'Zera o fornecdor e a filial padrão
        lFornecedorPadraoNovo = 0
        iFilialPadraoNova = 0
    
    'Se alguma filial se tornou padrão
    ElseIf iPadrao = FORN_PROD_PADRAO Then
        'Guarda a novca filial fornecedor
        lFornecedorPadraoNovo = objFornecedorProdutoFF.lFornecedor
        iFilialPadraoNova = objFornecedorProdutoFF.iFilialForn
    
    End If
        
    'Atualiza a filial e o fornecdor padrão
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ProdutosFilial SET Fornecedor = ?, FilialForn = ?", alComando(0), lFornecedorPadraoNovo, iFilialPadraoNova)
    If lErro <> AD_SQL_SUCESSO Then Error 54281

    'Fechamento comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ProdutoFilial_AtualizaFilialFornPadrao = SUCESSO

    Exit Function

Erro_ProdutoFilial_AtualizaFilialFornPadrao:

    ProdutoFilial_AtualizaFilialFornPadrao = Err

    Select Case Err

        Case 54279, 54280, 54281

        Case 54282
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILIAL_INEXISTENTE", Err, objFornecedorProdutoFF.sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151840)

    End Select

    'Fechamento comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function Produto_Exclui(ByVal objProduto As ClassProduto) As Long
'Exclui no BD o Produto passado

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Produto_Exclui

    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 70403

    lErro = CF("Produto_Exclui_EmTrans", objProduto)
    If lErro <> SUCESSO Then gError 124047
    
    'Faz o commit
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 70419

    Produto_Exclui = SUCESSO

    Exit Function

Erro_Produto_Exclui:

    Produto_Exclui = gErr

    Select Case gErr

        Case 124047
        
        Case 70403
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 70419
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
     
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151841)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Private Function FornecedorProdutoFF_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui de FornecedorProdutoFF os registros ligados ao Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lFornecedor As Long

On Error GoTo Erro_FornecedorProdutoFF_Exclui_Produto

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 70420

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 70421

    'Faz a leitura dos registros
    lErro = Comando_ExecutarPos(lComando, "SELECT Fornecedor FROM FornecedorProdutoFF WHERE Produto = ? ", 0, lFornecedor, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 70422

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 70423

    Do While lErro <> AD_SQL_SEM_DADOS

        'Exclui na tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM FornecedorProdutoFF", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 70425

        'Lê o próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 70424

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    FornecedorProdutoFF_Exclui_Produto = SUCESSO

    Exit Function

Erro_FornecedorProdutoFF_Exclui_Produto:

    FornecedorProdutoFF_Exclui_Produto = gErr

    Select Case gErr

        Case 70420, 70421
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 70422, 70423, 70424
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF", gErr)

        Case 70425
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FORNECEDORPRODUTOFF", gErr, sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151842)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Produto_Valida_Exclusao(ByVal sProduto1 As String) As Long
'Lê dados do BD para validar a exclusão do Produto passado

Dim lErro As Long
Dim sProduto As String
Dim lComando As Long
Dim lComando2 As Long
Dim objProduto As New ClassProduto
Dim iCodigo As Integer

On Error GoTo Erro_Produto_Valida_Exclusao

    'Abrir o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 31057
    
    'Abrir o comando
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 103126
    
    sProduto = String(STRING_PRODUTO, 0)

    'verifica se o produto que está sendo excluido é substituto de outro
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM Produtos WHERE Substituto1 = ? OR Substituto2 = ?", sProduto, sProduto1, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31022

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31023
    If lErro = SUCESSO Then Error 31024 'Se for --> Erro

    'Verifica se o Produto que está sendo excluido está envolvido em algum Movimento de Estoque
    lErro = Comando_Executar(lComando, "SELECT Produto FROM MovimentoEstoque WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31058

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31059
    If lErro = AD_SQL_SUCESSO Then gError 31060 'Se estiver --> Erro

    'Verifica se o Produto que está sendo excluido está envolvido com algum ítem de ordem de produção
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensOrdemProducao WHERE Produto = ? ", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31025

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31026
    If lErro = AD_SQL_SUCESSO Then gError 31027 'Se estiver--> Erro

    'Verifica se o Produto que está sendo excluido está envolvido com algum ítem de ordem de produção baixado
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensOrdemProducaoBaixadas WHERE Produto = ? ", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31028

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31061
    If lErro = AD_SQL_SUCESSO Then gError 31029 'Se estiver -->Erro

    'Verifica se o Produto que está sendo excluido está envolvido em algum Empenho
    lErro = Comando_Executar(lComando, "SELECT Produto FROM Empenho WHERE Produto = ? ", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31030

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31031
    If lErro = SUCESSO Then gError 31032 'Se estiver -->Erro

    'Verifica se o Produto que está sendo excluido faz parte de um Kit como componente
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ProdutoKit WHERE ProdutoRaiz <> ? AND Produto=? ", sProduto, sProduto1, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31033

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31062
    If lErro = SUCESSO Then gError 31034 'Se fizer --> Erro

    'Verifica se o Produto que está sendo excluido está relacionado com algum item de Pedido de Venda
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensPedidoDeVenda WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31035

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31036
    If lErro = AD_SQL_SUCESSO Then gError 31037 'Se estiver -->Erro

    'Verifica se o Produto que está sendo excluido está relacionado com algum item de Pedido de Venda Baixado
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensPedidoDeVendaBaixados WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31038

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31042
    If lErro = AD_SQL_SUCESSO Then gError 31039 'Se estiver --> Erro

    'Verifica se o Produto que está sendo excluido está relacionado com algum item de requisicao de compra
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensReqCompra WHERE Produto = ?", sProduto, sProduto1) 'William
    If lErro <> AD_SQL_SUCESSO Then gError 31040

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31043
    If lErro = AD_SQL_SUCESSO Then gError 31041 'Se estiver --> Erro

    'Verifica se o Produto que está sendo excluido está relacionado com algum inventário
    lErro = Comando_Executar(lComando, "SELECT Produto FROM Inventario WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31045

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31044
    If lErro = AD_SQL_SUCESSO Then gError 31046 'Se estiver --> Erro

    'Verifica se o Produto que está sendo excluido está relacionado com algum inventário pendente
    lErro = Comando_Executar(lComando, "SELECT Produto FROM InventarioPendente WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31047

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31048
    If lErro = AD_SQL_SUCESSO Then gError 31049 'Se estiver --> Erro

    'Verifica se o Produto que está sendo excluido está envolvido em alguma reserva
    lErro = Comando_Executar(lComando, "SELECT Produto FROM Reserva WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 31050

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31051
    If lErro = AD_SQL_SUCESSO Then gError 31052 'Se estiver --> Erro

    'Verifica se o Produto que está sendo excluido está envolvido em alguma nota fiscal
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensNFiscal WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 18907

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18700
    If lErro = AD_SQL_SUCESSO Then gError 18699 'Se estiver --> Erro
    
'mario 2/7/99 Remover NFiscalBaixada
'    'Verifica se o Produto que está sendo excluido está envolvido em alguma nota fiscal baixada
'    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensNFiscalBaixadas WHERE Produto = ?", sProduto, sProduto1)
'    If lErro <> AD_SQL_SUCESSO Then Error 20763
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20764
'    If lErro = AD_SQL_SUCESSO Then Error 20765 'Se estiver --> Erro
    
    'Verifica se o Produto que está sendo excluido está envolvido em algum lançamento pendente
    lErro = Comando_Executar(lComando, "SELECT Produto FROM LanPendente WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 19468

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 19469
    If lErro = AD_SQL_SUCESSO Then gError 19470 'Se estiver --> Erro
    
    'Verifica se o Produto que está sendo excluido está envolvido com FornecedorProdutoFF
    lErro = Comando_Executar(lComando, "SELECT Produto FROM FornecedorProdutoFF WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 72473

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72474
    If lErro = AD_SQL_SUCESSO Then gError 72475 'Se estiver --> Erro
    
    'Verifica se o Produto que está sendo excluido está envolvido com ItensConcorrencia
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensConcorrencia WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 72476

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72477
    If lErro = AD_SQL_SUCESSO Then gError 72478 'Se estiver --> Erro
    
    'Verifica se o Produto que está sendo excluido está envolvido com CotacaoProduto
    lErro = Comando_Executar(lComando, "SELECT Produto FROM CotacaoProduto WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 72479

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72480
    If lErro = AD_SQL_SUCESSO Then gError 72481 'Se estiver --> Erro
    
    'Verifica se o Produto que está sendo excluido está envolvido com ItensPedCompra
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensPedCompra WHERE Produto = ?", sProduto, sProduto1)
    If lErro <> AD_SQL_SUCESSO Then gError 72482

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72483
    If lErro = AD_SQL_SUCESSO Then gError 72484 'Se estiver --> Erro
    
'    'Verifica se o Produto que está sendo excluido está envolvido com ItensReqCompra
'    lErro = Comando_Executar(lComando, "SELECT Produto FROM ItensReqCompra WHERE Produto = ?", sProduto, sProduto1) 'William
'    If lErro <> AD_SQL_SUCESSO Then gError 72485
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72486
'    If lErro = AD_SQL_SUCESSO Then gError 72487 'Se estiver --> Erro
    
'    'Verifica se o Produto que está sendo excluido está envolvido com SldMesForn
'    lErro = Comando_Executar(lComando, "SELECT Produto FROM SldMesForn WHERE Produto = ?", sProduto, sProduto1)
'    If lErro <> AD_SQL_SUCESSO Then gError 72488
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72489
'    If lErro = AD_SQL_SUCESSO Then gError 72490 'Se estiver --> Erro
'
'    'Verifica se o Produto que está sendo excluido está envolvido com SldDiaForn
'    lErro = Comando_Executar(lComando, "SELECT Produto FROM SldDiaForn WHERE Produto = ?", sProduto, sProduto1)
'    If lErro <> AD_SQL_SUCESSO Then gError 72491

    'Guarda o Código do Produto
    objProduto.sCodigo = sProduto1
    
    'Faz a Crítica do uso do Produto em Tabelas específicas (Nomes das tebelas podem ser encontradas dentro da função)
    lErro = CF("Produto_Critica_Usu", objProduto)
    If lErro <> SUCESSO Then gError 97931
    
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72492
'    If lErro = AD_SQL_SUCESSO Then gError 72493 'Se estiver --> Erro
    
'    'Verifica se o Produto que está sendo excluido está envolvido com LivRegESCadProd
'    lErro = Comando_Executar(lComando, "SELECT Produto FROM LivRegESCadProd WHERE Produto = ?", sProduto, sProduto1)
'    If lErro <> AD_SQL_SUCESSO Then gError 78129
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 78130
'    If lErro = AD_SQL_SUCESSO Then gError 78131
    
    'Verifica se o produto está vinculado a alguma embalagem
    lErro = Comando_Executar(lComando2, "SELECT Codigo FROM Embalagens WHERE Produto = ?", iCodigo, objProduto.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 103127
    
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103128
    
    'Se o produto estiver vinculado a alguma embalagem, Erro.
    If lErro = AD_SQL_SUCESSO Then gError 103129
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    Produto_Valida_Exclusao = SUCESSO

    Exit Function

Erro_Produto_Valida_Exclusao:

    Produto_Valida_Exclusao = gErr

    Select Case gErr
        
        Case 18699
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSNFISCAL", gErr)

        Case 18700, 18907
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL2", gErr)
        
        Case 19468, 19469
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LANPENDENTE3", gErr)
        
        Case 19470
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_LANPENDENTE", gErr)
        
        Case 20763, 20764
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCALBAIXADAS2", gErr)
        
        Case 20765
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSNFISCALBAIXADAS", gErr)
        
        Case 31022, 31023
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", gErr)

        Case 31024
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_SUBSTITUTO", gErr)

        Case 31025, 31026
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDEMPRODUCAO3", gErr)

        Case 31027
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSORDEMPRODUCAO", gErr)

        Case 31028, 31061
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSORDEMPRODUCAOBAIXADAS", gErr)

        Case 31029
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSORDEMPRODUCAOBAIXADAS", gErr)

        Case 31030, 31031
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMPENHO2", gErr)

        Case 31032
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_EMPENHO", gErr)

        Case 31033, 31062
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT", gErr)

        Case 31034
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_KIT_EXCLUSAO", gErr)

        Case 31035, 31036
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA1", gErr)

        Case 31037, 31039
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITEMPV", gErr)

        Case 31038, 31042
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDABAIXADOS1", gErr)

        Case 31040, 31043
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQCOMPRA", gErr)

        Case 31041
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSREQCOMPRA", gErr)

        Case 31044, 31045
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO", gErr)

        Case 31046, 31049
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INVENTARIO", gErr)

        Case 31047, 31048
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIOPENDENTE", gErr)

        Case 31050, 31051
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", gErr)

        Case 31052
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_RESERVA", gErr)

        Case 31057, 103126
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 31058, 31059
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

        Case 31060
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_MOVIMENTOESTOQUE", gErr)

        Case 72473, 72474
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF", gErr)
            
        Case 72475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FORNECEDORPRODUTOFF", gErr)
            
        Case 72476, 72477
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSCONCORRENCIA1", gErr)
            
        Case 72478
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSCONCORRENCIA", gErr)
            
        Case 72479, 72480
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOPRODUTO", gErr)
            
        Case 72481
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_COTACAOPRODUTO", gErr)
            
        Case 72482, 72483
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDCOMPRA", gErr)
            
        Case 72484
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSPEDCOMPRA", gErr)
            
'        Case 72485, 72486
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQCOMPRA", gErr)
'
'        Case 72487
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_ITENSREQCOMPRA", gErr)
            
'        Case 72488, 72489
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFORN", gErr)
'
'        Case 72490
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_SLDMESFORN", gErr)
'
'        Case 72491, 72492
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFORN", gErr)
'
'        Case 72493
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_SLDDIAFORN", gErr)
                    
        Case 78129, 78130
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIVREGESCADPROD", gErr)
        
        Case 78131
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_LIVREGCADPROD", gErr)
            
        Case 97931
                
        Case 103127, 103128
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMBALAGENS", gErr)
                    
        Case 103129
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_VINCULADO_EMBALAGEM", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151843)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Private Function Produto_Grava_BD(ByVal objProduto As ClassProduto) As Long
'Insere um novo Produto no BD
Dim lErro As Long
Dim lComando2 As Long
Dim lComando1 As Long
Dim lComando3 As Long
Dim objProdutoBD As New ClassProduto
Dim objTipoProduto As New ClassTipoDeProduto
Dim objUM As New ClassUnidadeDeMedida
Dim objProdutoSubst As New ClassProduto
Dim objProdutoHistorico As New ClassProdutoHistorico
Dim iTipo As Integer, iIndice2 As Integer
Dim iIndice As Integer
Dim sCodigo As String
Dim sCodigo1 As String
Dim sProdutoPai As String
Dim colItensRomaneioGrade As New Collection
Dim objItemRomaneioGrade As ClassItemRomaneioGrade
Dim bAchou  As Boolean
Dim dCodigoNumerico As Double

On Error GoTo Erro_Produto_Grava_BD

    'Abre o comando
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 67004
    
    'Abre o comando
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 112539
    
    'Abre o comando
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 112546
    
    objProdutoBD.sNomeReduzido = objProduto.sNomeReduzido
    
    'verificar se existe algum produto com o nome reduzido
    lErro = CF("Produto_Le_NomeReduzido", objProdutoBD)
    If lErro <> SUCESSO And lErro <> 26927 Then gError 67005
    
    'se houver => erro
    If lErro = SUCESSO Then gError 67006
    
'********************* GRADE ************************
    Set objProdutoBD = Nothing
    Set objProdutoBD = New ClassProduto
    
    'Verificar se ele possui um pai de grade
    'Busca, caso exista, o produto pai de grade o prod em questão
    lErro = CF("Produto_Le_ProdutoPai", objProduto.sCodigo, objProdutoBD)
    If lErro <> SUCESSO And lErro <> 86412 Then gError 86401
    If lErro <> SUCESSO Then gError 86403
    
    If Len(Trim(objProdutoBD.sCodigo)) > 0 And Len(Trim(objProdutoBD.sGrade)) > 0 Then
    
        'Lê os filhos analíticos do produto pai de grade passado
        lErro = CF("Produto_Le_Filhos_Grade", objProdutoBD, colItensRomaneioGrade)
        If lErro <> SUCESSO And lErro <> 86304 Then gError 86404
            
        For Each objItemRomaneioGrade In colItensRomaneioGrade
            
            If objItemRomaneioGrade.sProduto <> objProduto.sCodigo Then
                
                For iIndice = 1 To objItemRomaneioGrade.colCategoria.Count
                    bAchou = False
                    For iIndice2 = 1 To objProduto.colCategoriaItem.Count
                        If (objItemRomaneioGrade.colCategoria(iIndice).sCategoria = objProduto.colCategoriaItem(iIndice2).sCategoria) And (objItemRomaneioGrade.colCategoria(iIndice).sItem = objProduto.colCategoriaItem(iIndice2).sItem) Then
                            bAchou = True
                            Exit For
                        End If
                    Next
                    If Not bAchou Then Exit For
                Next
                
                If bAchou Then gError 86405
                
            End If
        
        Next
    
    End If
'*************** GRADE *********************
    
    'Se trocou a referencia
    If Len(Trim(objProduto.sReferencia)) > 0 Then
        If UCase(objProdutoBD.sReferencia) <> UCase(objProduto.sReferencia) Then
    
            'verificar se ele participa de algum outro produto
            lErro = Comando_Executar(lComando1, "SELECT Tipo FROM Produtos WHERE Referencia = ? AND Codigo<> ?", iTipo, objProduto.sReferencia, objProduto.sCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 112536
            
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112537
            
            'se ele encontrar, significa erro ( referencia não pode ser duplicada devido ao módulo Loja)
            If lErro = AD_SQL_SUCESSO Then gError 112538
       End If
    End If
    
    If gobjMAT.iAceitaEANRepetido = 0 Then
    
        'se tem o código de barras
        If objProduto.colCodBarras.Count > 0 Then
            For iIndice = 1 To objProduto.colCodBarras.Count
              sCodigo = objProduto.colCodBarras.Item(iIndice)
              
              sCodigo1 = String(STRING_PRODUTO, 0)
              
              'verificar se ele participa de algum outro produto
              lErro = Comando_Executar(lComando3, "SELECT CodProduto FROM ProdutoCodBarras WHERE CodBarras = ? AND CodProduto <> ?", sCodigo1, sCodigo, objProduto.sCodigo)
              If lErro <> AD_SQL_SUCESSO Then gError 112547
              
              lErro = Comando_BuscarPrimeiro(lComando3)
              If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112548
              
              'se ele encontrar, significa erro ( Código não pode ser duplicado)
              If lErro = AD_SQL_SUCESSO Then gError 112549
            Next
        End If
    
    End If
    
    objProdutoBD.sDescricao = objProduto.sDescricao

''    'verificar se existe algum produto com a mesma descricao
''    lErro = CF("Produto_Le_Descricao",objProdutoBD)
''    If lErro <> SUCESSO And lErro <> 67018 Then gError 67007
''
''    'se houver => erro
''    If lErro = SUCESSO Then gError 67008
''
    'ler e bloquear os produtos substitutos, se houverem
    If Len(Trim(objProduto.sSubstituto1)) > 0 Then

        objProdutoSubst.sCodigo = objProduto.sSubstituto1

        lErro = CF("Produto_Lock", objProdutoSubst)
        If lErro <> SUCESSO Then gError 67009

    End If

    If Len(Trim(objProduto.sSubstituto2)) > 0 Then

        objProdutoSubst.sCodigo = objProduto.sSubstituto2

        lErro = CF("Produto_Lock", objProdutoSubst)
        If lErro <> SUCESSO Then gError 67010

    End If

    '??? sugestao p/otimizacao: fazer apenas um SELECT para bloquear todas as siglas
    objUM.iClasse = objProduto.iClasseUM
    objUM.sSigla = objProduto.sSiglaUMCompra

    lErro = CF("UM_Le_Lock", objUM)
    If lErro <> SUCESSO Then gError 67011

    objUM.sSigla = objProduto.sSiglaUMEstoque

    lErro = CF("UM_Le_Lock", objUM)
    If lErro <> SUCESSO Then gError 67012

    objUM.sSigla = objProduto.sSiglaUMVenda

    lErro = CF("UM_Le_Lock", objUM)
    If lErro <> SUCESSO Then gError 67013

    'Alteracao Daniel
    'Atualiza os dados para futura gravacao de histórico
    With objProdutoHistorico
    
        .dtDataAtualizacao = gdtDataHoje
        .sCodProduto = objProduto.sCodigo
        .sDescProduto = objProduto.sDescricao
        
    End With
    
    'FAZ A GRAVACAO DO HISTORICO
    lErro = ProdutoHistorico_Grava(objProdutoHistorico)
    If lErro <> SUCESSO Then gError 97684
    
    'Inclui o Produto
    With objProduto

        If IsNumeric(.sCodigo) Then
            dCodigoNumerico = StrParaDbl(.sCodigo)
        End If
    
        '########################################################
        'Alterado por Wagner 08/03/2006
        '''05/09/01 Marcelo eliminação do campo embalagem
        lErro = Comando_Executar(lComando2, "INSERT INTO Produtos (Codigo, Tipo, Descricao, NomeReduzido, Modelo, Gerencial, Nivel, Substituto1, Substituto2, PrazoValidade, CodigoBarras, EtiquetasCodBarras, PesoLiq, PesoBruto, Comprimento, Espessura, Largura, Cor, ObsFisica, ClasseUM, SiglaUMEstoque, SiglaUMCompra, SiglaUMVenda, Ativo, Faturamento, Compras, PCP, KitBasico, KitInt, IPIAliquota, IPICodigo, IPICodDIPI, ControleEstoque, Apropriacao, ContaContabil, ContaContabilProducao, Residuo, Natureza, CustoReposicao, OrigemMercadoria, PercentMaisQuantCotAnt, PercentMenosQuantCotAnt, ConsideraQuantCotAnt, TemFaixaReceb, PercentMaisReceb," & _
        "PercentMenosReceb, RecebForaFaixa,TempoProducao,Rastro,HorasMaquina,PesoEspecifico, Referencia, Figura, INSSPercBase, KitVendaComp, Grade, UsaBalanca, SerieProx, SerieParteNum, CodigoNumerico, SiglaUMTrib, Genero, ProdutoEspecifico, PrecoMaxConsumidor, EXTIPI, ISSQN, Fabricante, IPIIncide,QtdeEmbBase, FatorAjuste, FCI, PercComissao, MetaComissao, CEST, ProdEmEscalaRelev, cProdANVISA) " & _
                                            "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) " _
            , .sCodigo, .iTipo, .sDescricao, .sNomeReduzido, .sModelo, .iGerencial, .iNivel, .sSubstituto1, .sSubstituto2, .iPrazoValidade, .sCodigoBarras, .iEtiquetasCodBarras, .dPesoLiq, .dPesoBruto, .dComprimento, .dEspessura, .dLargura, .sCor, .sObsFisica, .iClasseUM, .sSiglaUMEstoque, .sSiglaUMCompra, .sSiglaUMVenda, .iAtivo, .iFaturamento, .iCompras, .iPCP, .iKitBasico, .iKitInt, .dIPIAliquota, .sIPICodigo, .sIPICodDIPI, .iControleEstoque, .iApropriacaoCusto, .sContaContabil, .sContaContabilProducao, .dResiduo, .iNatureza, .dCustoReposicao, .iOrigemMercadoria, .dPercentMaisQuantCotAnt, .dPercentMenosQuantCotAnt, .iConsideraQuantCotAnt, .iTemFaixaReceb, .dPercentMaisReceb, .dPercentMenosReceb, .iRecebForaFaixa, .iTempoProducao, .iRastro, .lHorasMaquina, .dPesoEspecifico, .sReferencia, .sFigura, .dINSSPercBase, .iKitVendaComp, .sGrade, .iUsaBalanca, .sSerieProx, .iSerieParteNum, dCodigoNumerico, .sSiglaUMTrib, .sGenero, .iProdutoEspecifico, .dPrecoMaxConsumidor, .iExTIPI, "", .lFabricante, .iIPIIncide, _
            .dQtdeEmbBase, .dFatorAjuste, .sFCI, .dPercComissao, .dMetaComissao, .sCEST, .iProdEmEscalaRelev, .scProdANVISA)
        If lErro <> AD_SQL_SUCESSO Then gError 67014
        '########################################################
        
    End With

    'Fecha o comando
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando3)
    
    
    Produto_Grava_BD = SUCESSO

    Exit Function

Erro_Produto_Grava_BD:

    Produto_Grava_BD = gErr

    Select Case gErr

        Case 67004, 112539, 112546
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 67005, 67007, 67011, 67012, 97684
        
        Case 67006
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_MESMO_NOME_REDUZIDO", gErr, objProdutoBD.sNomeReduzido)

        Case 67008
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_MESMA_DESCRICAO", gErr, objProdutoBD.sDescricao)

        Case 67009, 67010
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", gErr)
        
        Case 67011, 67012, 67013
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_UNIDADESDEMEDIDA", gErr)
        
        Case 67014
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOS", gErr, objProduto.sCodigo)
        
        Case 86401, 86402, 86404
            
        Case 86403
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProdutoBD.sCodigo)
        
        Case 86405
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILHOS_GRADES_IGUAIS", gErr, objItemRomaneioGrade.sProduto, objProduto.sCodigo)
        
        Case 112536, 112537
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objProduto.sCodigo)
        
        Case 112538
            Call Rotina_Erro(vbOKOnly, "ERRO_REFERENCIA_JA_EXISTENTE", gErr)
        
        Case 112547, 112548
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOCODBARRAS", gErr)
        
        Case 112549
            Call Rotina_Erro(vbOKOnly, "ERRO_CODBARRAS_EXISTENTE", gErr, sCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151844)

    End Select

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando3)
    
    Exit Function

End Function

Function Produto_Grava_Trans(ByVal objProduto As ClassProduto, ByVal colTabelaPrecoItem As Collection) As Long
'Grava ou Alterar o Produto passado
'ATENÇÃO: Tem que ser chamado dentro de Transação

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim tProdutoBD As typeProduto
Dim objProdutoBD As New ClassProduto
Dim colCategoriaItem As New Collection
Dim colTabPrecoItemAux As New Collection
Dim iIndice As Integer
Dim objProdutoFilial As New ClassProdutoFilial
Dim iControleEstoque As Integer
Dim X As New ClassMATGrava
Dim objProdutoHistorico As New ClassProdutoHistorico
Dim objLog As New ClassLog

On Error GoTo Erro_Produto_Grava_Trans

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 64490

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 64491
    
    lErro = Produto_Valida(objProduto)
    If lErro <> SUCESSO Then gError 187428
    
    lErro = CF("Produto_Valida_Customizado", objProduto)
    If lErro <> SUCESSO Then gError 187428

    If Len(Trim(objProduto.sIPICodigo)) <> 0 Then
    
        'Verifica se o IPICódigo está cadastrado na Tabela de ClassificacaoFiscal
        'Se estiver realiza o lock
        lErro = CF("ClassificacaoFiscal_Lock", objProduto.sIPICodigo)
        If lErro <> SUCESSO And lErro <> 125062 Then gError 125065
    
        If lErro = 125062 Then gError 125066

    End If
    
    'criar uma colecao de trabalho com uma copia da colecao (categoria,item)
    'Faz uma copia da coleção colCategoriaItem e da coleção colTabelaPrecoItem
    For iIndice = 1 To objProduto.colCategoriaItem.Count
        colCategoriaItem.Add objProduto.colCategoriaItem.Item(iIndice)
    Next

    For iIndice = 1 To colTabelaPrecoItem.Count
        colTabPrecoItemAux.Add colTabelaPrecoItem.Item(iIndice)
    Next

    tProdutoBD.sSiglaUMEstoque = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
    tProdutoBD.sSiglaUMCompra = String(STRING_PRODUTO_SIGLAUMCOMPRA, 0)
    tProdutoBD.sSiglaUMVenda = String(STRING_PRODUTO_SIGLAUMVENDA, 0)
    tProdutoBD.sSubstituto1 = String(STRING_PRODUTO_SUBSTITUTO1, 0)
    tProdutoBD.sSubstituto2 = String(STRING_PRODUTO_SUBSTITUTO2, 0)
    tProdutoBD.sNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
    tProdutoBD.sReferencia = String(STRING_PRODUTO_REFERENCIA, 0)
    tProdutoBD.sFigura = String(STRING_NOME_ARQ_COMPLETO, 0)
    tProdutoBD.sGrade = String(STRING_GRADE_CODIGO, 0)
    
    With tProdutoBD
        'Pesquisar o produto por código
        lErro = Comando_ExecutarPos(lComando, "SELECT ClasseUM, SiglaUMEstoque, SiglaUMCompra, SiglaUMVenda, Substituto1, Substituto2, Tipo, NomeReduzido, KitBasico, KitInt, Compras, Apropriacao, Gerencial,Rastro,Grade FROM Produtos WHERE Codigo = ?", 0, .iClasseUM, .sSiglaUMEstoque, .sSiglaUMCompra, .sSiglaUMVenda, .sSubstituto1, .sSubstituto2, .iTipo, .sNomeReduzido, .iKitBasico, .iKitInt, .iCompras, .iApropriacaoCusto, .iGerencial, .iRastro, .sGrade, objProduto.sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 64492
    End With

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 64493

    'Se encontrar (alteração)
    If lErro = SUCESSO Then

        lErro = Comando_LockExclusive(lComando)
        If lErro <> SUCESSO Then gError 64494

        objProdutoBD.sNomeReduzido = tProdutoBD.sNomeReduzido
        objProdutoBD.iKitBasico = tProdutoBD.iKitBasico
        objProdutoBD.iKitInt = tProdutoBD.iKitInt
        objProdutoBD.iClasseUM = tProdutoBD.iClasseUM
        objProdutoBD.sSiglaUMEstoque = tProdutoBD.sSiglaUMEstoque
        objProdutoBD.sSiglaUMCompra = tProdutoBD.sSiglaUMCompra
        objProdutoBD.sSiglaUMVenda = tProdutoBD.sSiglaUMVenda
        objProdutoBD.iTipo = tProdutoBD.iTipo
        objProdutoBD.sSubstituto1 = tProdutoBD.sSubstituto1
        objProdutoBD.sSubstituto2 = tProdutoBD.sSubstituto2
        objProdutoBD.iCompras = tProdutoBD.iCompras
        objProdutoBD.iApropriacaoCusto = tProdutoBD.iApropriacaoCusto
        objProdutoBD.iGerencial = tProdutoBD.iGerencial
        objProdutoBD.iRastro = tProdutoBD.iRastro
        objProdutoBD.sReferencia = tProdutoBD.sReferencia
        objProdutoBD.sFigura = tProdutoBD.sFigura
        objProdutoBD.sGrade = tProdutoBD.sGrade
        objProdutoBD.sCodigo = objProduto.sCodigo
        objProdutoBD.iNivel = objProduto.iNivel
    
        '''objProdutoBD.iEmbalagem = tProdutoBD.iEmbalagem 05/09/01 Marcelo
        
        'Valida os dados recolhidos da tela para a alteração
        lErro = X.Produto_Valida_Alteracao(objProduto, objProdutoBD)
        If lErro <> SUCESSO Then gError 64495

        'Faz as alterações na Tabela ProdutoCategoria
        lErro = X.Produto_Altera_CategoriaItem(objProduto.sCodigo, colCategoriaItem)
        If lErro <> SUCESSO Then gError 64496

'        If giTipoVersao = VERSAO_LIGHT Then
'            'Faz as alterações na Tabela TabelasDePrecoItens
'            lErro = X.Produto_Altera_TabelaPrecoItens(objProduto.sCodigo, colTabelaPrecoItem)
'            If lErro <> SUCESSO Then gError 64497
'        End If
    
        'Alteracao Daniel
        'Atualiza os dados para futura gravacao de histórico
        With objProdutoHistorico
        
            .dtDataAtualizacao = gdtDataHoje
            .sCodProduto = objProduto.sCodigo
            .sDescProduto = objProduto.sDescricao
            
        End With
       
        'FAZ A GRAVACAO DO HISTORICO
        lErro = ProdutoHistorico_Grava(objProdutoHistorico)
        If lErro <> SUCESSO Then gError 97685
            
        'Altera o reg na tabela de produtos
        With objProduto
        
            '###################################################
            'Alterado por Wagner 08/03/2006
            '''05/09/01 Marcelo eliminação do campo embalagem
            lErro = Comando_ExecutarPos(lComando1, "UPDATE Produtos SET Tipo= ?, Descricao= ?, NomeReduzido= ?, Modelo= ?, Gerencial= ?, Nivel= ?, Substituto1= ?, Substituto2= ?, PrazoValidade= ?, CodigoBarras= ?, EtiquetasCodBarras= ?, PesoLiq= ?, PesoBruto= ?, Comprimento= ?, Espessura= ?, Largura= ?, Cor= ?, ObsFisica= ?, ClasseUM= ?, SiglaUMEstoque= ?, SiglaUMCompra= ?, SiglaUMVenda= ?, Ativo = ?, Faturamento= ?, Compras= ?, PCP= ?, KitBasico= ?, KitInt= ?, IPIAliquota= ?, IPICodigo= ?, IPICodDIPI= ?, Apropriacao= ?, ContaContabil= ?, ContaContabilProducao = ?, Residuo = ?, Natureza=?, CustoReposicao=?, OrigemMercadoria = ?, PercentMaisQuantCotAnt = ?, PercentMenosQuantCotAnt = ?, ConsideraQuantCotAnt = ?, TemFaixaReceb = ?, PercentMaisReceb = ?, PercentMenosReceb = ?, RecebForaFaixa = ?,TempoProducao=?,Rastro=?,HorasMaquina=?,PesoEspecifico=?, Referencia = ?, Figura =?, INSSPercBase = ?, KitVendaComp = ?, Grade = ?, UsaBalanca = ?, SerieProx = ?, SerieParteNum = ?, SiglaUMTrib = ?, " & _
                                                    "Genero = ?, ProdutoEspecifico = ?, PrecoMaxConsumidor = ?, EXTIPI = ?, Fabricante = ?, IPIIncide = ?, QtdeEmbBase = ?, FatorAjuste = ?, FCI = ?, PercComissao =?, MetaComissao=?, CEST = ?, ProdEmEscalaRelev = ?, cProdANVISA = ?", lComando, _
            .iTipo, .sDescricao, .sNomeReduzido, .sModelo, .iGerencial, .iNivel, .sSubstituto1, .sSubstituto2, .iPrazoValidade, .sCodigoBarras, .iEtiquetasCodBarras, .dPesoLiq, .dPesoBruto, .dComprimento, .dEspessura, .dLargura, .sCor, .sObsFisica, .iClasseUM, .sSiglaUMEstoque, .sSiglaUMCompra, .sSiglaUMVenda, .iAtivo, .iFaturamento, .iCompras, .iPCP, .iKitBasico, .iKitInt, .dIPIAliquota, .sIPICodigo, .sIPICodDIPI, .iApropriacaoCusto, .sContaContabil, .sContaContabilProducao, .dResiduo, .iNatureza, .dCustoReposicao, .iOrigemMercadoria, .dPercentMaisQuantCotAnt, .dPercentMenosQuantCotAnt, .iConsideraQuantCotAnt, .iTemFaixaReceb, .dPercentMaisReceb, .dPercentMenosReceb, .iRecebForaFaixa, .iTempoProducao, .iRastro, .lHorasMaquina, .dPesoEspecifico, .sReferencia, .sFigura, .dINSSPercBase, .iKitVendaComp, .sGrade, .iUsaBalanca, .sSerieProx, .iSerieParteNum, .sSiglaUMTrib, _
                                                    .sGenero, .iProdutoEspecifico, .dPrecoMaxConsumidor, .iExTIPI, .lFabricante, .iIPIIncide, .dQtdeEmbBase, .dFatorAjuste, .sFCI, .dPercComissao, .dMetaComissao, .sCEST, .iProdEmEscalaRelev, .scProdANVISA)
            If lErro <> AD_SQL_SUCESSO Then gError 64498
            '###################################################
            
        End With
        
        'Se está alterando o produto de final para gerencial
        If objProduto.iGerencial <> objProdutoBD.iGerencial And objProduto.iGerencial = GERENCIAL Then
        
            lErro = X.EstoqueProduto_Exclui_Produto(objProduto.sCodigo)
            If lErro <> SUCESSO Then gError 64499
            'Exclui o Produto em SldMesEst
            lErro = SldMesEst_Exclui_Produto(objProduto.sCodigo)
            If lErro <> SUCESSO Then gError 64499
            'Exclui o Produto em SldMesEst1
            lErro = SldMesEst1_Exclui_Produto(objProduto.sCodigo)
            If lErro <> SUCESSO Then gError 64499
            'Exclui o Produto em SldMesEst2
            lErro = SldMesEst2_Exclui_Produto(objProduto.sCodigo)
            If lErro <> SUCESSO Then gError 64499
            'Exclui o Produto em SldMesEstAlm
            lErro = SldMesEstAlm_Exclui_Produto(objProduto.sCodigo)
            If lErro <> SUCESSO Then gError 64499
            'Exclui o Produto em SldMesEstAlm1
            lErro = SldMesEstAlm1_Exclui_Produto(objProduto.sCodigo)
            If lErro <> SUCESSO Then gError 64499
            'Exclui o Produto em SldMesEstAlm2
            lErro = SldMesEstAlm2_Exclui_Produto(objProduto.sCodigo)
            If lErro <> SUCESSO Then gError 64499
        
        ElseIf objProduto.iGerencial <> objProdutoBD.iGerencial And objProduto.iGerencial <> GERENCIAL Then
            
            lErro = X.Preenche_ProdutoFilial_Default(objProduto, objProdutoFilial, iControleEstoque)
            If lErro <> SUCESSO Then gError 62647
            
            'Grava o Estoque default
            lErro = CF("Estoque_Grava1", objProdutoFilial, iControleEstoque)
            If lErro <> SUCESSO Then gError 62648
        
        End If
        
        'Verifica se o modulo de Loja está Ativo
        If gcolModulo.Ativo(MODULO_LOJA) = MODULO_ATIVO And objProduto.iGerencial = PRODUTO_FINAL Or objProduto.iKitVendaComp = MARCADO Then
                            
            lErro = Produto_Altera_Loja(objProduto)
            If lErro <> SUCESSO Then gError 81216
        
        End If
        
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava as alterações de Produto no módulo Fiscal
            lErro = Produto_Altera_LivRegESCadProd(objProduto)
            If lErro <> SUCESSO Then gError 78128
        
        End If

'        'Tulio -> alteracao loja 5/6/02
'        If gcolModulo.Ativo(MODULO_LOJA) = MODULO_ATIVO Then
'
'            Call Produto_Carrega_Log(objLog, objProduto, ALTERACAO_PRODUTO_CAIXA_CENTRAL)
'            lErro = CF("Log_Grava", objLog)
'            If lErro <> SUCESSO Then gError 101744
'
'        End If
    
    'Senão (inclusão)
    Else
        'Inclui um novo Produto
        lErro = Produto_Grava_BD(objProduto)
        If lErro <> SUCESSO Then gError 67000
        
        If objProduto.iGerencial <> PRODUTO_GERENCIAL Or objProduto.iKitVendaComp = MARCADO Then
            
            lErro = X.Preenche_ProdutoFilial_Default(objProduto, objProdutoFilial, iControleEstoque)
            If lErro <> SUCESSO Then gError 67001
            
            'Grava o Estoque default
            lErro = CF("Estoque_Grava1", objProdutoFilial, iControleEstoque)
            If lErro <> SUCESSO Then gError 67002
        
        End If
        
'        If gcolModulo.Ativo(MODULO_LOJA) = MODULO_ATIVO Then
'
'            'Tulio -> alteracao loja 5/6/02
'            Call Produto_Carrega_Log(objLog, objProduto, INCLUSAO_PRODUTO_CAIXA_CENTRAL)
'            lErro = CF("Log_Grava", objLog)
'            If lErro <> SUCESSO Then gError 101745
'
'        End If
        
    End If

    lErro = objProduto.objIdiomaTela.Associar("Produtos", 0, objProduto.sCodigo, 0, 0)
    If lErro <> SUCESSO Then gError 67003
    
    lErro = CF("IdiomaTextos_Grava", objProduto.objIdiomaTela)
    If lErro <> SUCESSO Then gError 67003
    
    'Insere os novos registros e ProdutoCategoria
    lErro = X.Produto_Grava_CategoriaItem(objProduto.sCodigo, colCategoriaItem)
    If lErro <> SUCESSO Then gError 67003
    
    'por tulio
    lErro = Produto_Grava_ProdutoCodBarras(objProduto.sCodigo, objProduto.colCodBarras)
    If lErro <> SUCESSO Then gError 101737
    
    lErro = CF("Produto_Grava_Usu", objProduto, colTabelaPrecoItem)
    If lErro <> SUCESSO Then gError 64488
    
    lErro = CF("Produto_Grava_Customizado", objProduto)
    If lErro <> SUCESSO Then gError 198566
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Produto_Grava_Trans = SUCESSO

    Exit Function

Erro_Produto_Grava_Trans:

    Produto_Grava_Trans = gErr

    Select Case gErr

        Case 64490, 64491
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 64492, 64493
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objProduto.sCodigo)

        Case 64494
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", gErr, objProduto.sCodigo)

        Case 64488, 64495, 64496, 64497, 64499, 67000, 67001, 67002, 67003, 62647, 62648, 78128, 81216, 97685, 101737, 101744, 101745, 125065, 187428, 198566

        Case 64498
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOS", gErr, objProduto.sCodigo)
        
        Case 125066
            Call Rotina_Erro(vbOKOnly, "ERRO_CODIGO_CLASSIFICACAOFISCAL_NAO_EXISTENTE", gErr, objProduto.sIPICodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151845)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Produto_Altera_LivRegESCadProd(ByVal objProduto As ClassProduto) As Long
'Altera o Cadastro de Produto no modulo fiscal
'Campos: CodigoNCM, Descricao, SiglaUM, SituacaoTrib

Dim lErro As Long
Dim lNumIntDoc As Long
Dim sCodigoNCM As String
Dim sDescricao As String
Dim sSiglaUM As String
Dim sSituacaoTrib As String
Dim sProduto As String, dtDataInicial As Date, dtDataFinal As Date
Dim dAliquotaIPI As Double
Dim dAliquotaICMS As Double
Dim dReducaoBaseCalculoICMS As Double
Dim dBaseCalculoICMSSubst As Double
Dim alComando(1 To 3) As Long
Dim iIndice As Integer

On Error GoTo Erro_Produto_Altera_LivRegESCadProd
    
    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 78122
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    sSiglaUM = String(STRING_UM_SIGLA, 0)
    sCodigoNCM = String(STRING_CODIGO_NCM, 0)
    sSituacaoTrib = String(STRING_SITUACAOTRIB, 0)
    
    'Verifica se o Produto já exite no cadastro de LivRegESCadProd
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Produto, CodigoNCM, Descricao, SiglaUM, SituacaoTrib, AliquotaIPI, AliquotaICMS, ReducaoBaseCalculoICMS, BaseCalculoICMSSubst, DataInicial, DataFinal FROM LivRegESCadProd WHERE Produto = ? ORDER BY DataInicial DESC", 0, sProduto, sCodigoNCM, sDescricao, sSiglaUM, sSituacaoTrib, dAliquotaIPI, dAliquotaICMS, dReducaoBaseCalculoICMS, dBaseCalculoICMSSubst, dtDataInicial, dtDataFinal, objProduto.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 78123
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 78124

    'Se existir verifica se o cadastro foi alterado
    If lErro = AD_SQL_SUCESSO Then
        
        If left(objProduto.sIPICodigo, STRING_CODIGO_NCM) <> sCodigoNCM Or sDescricao <> objProduto.sDescricao Or objProduto.iOrigemMercadoria <> Mid(sSituacaoTrib, 1, 1) Then
                                    
            If dtDataFinal <> DATA_NULA Then gError 130535
            If dtDataInicial > gdtDataHoje Then gError 130536
            
            If dtDataInicial < gdtDataHoje Then
            
                'Atualiza a Data Final do Produto no cadastro de Produtos
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE LivRegESCadProd SET DataFinal = ?", alComando(1), gdtDataHoje)
                If lErro <> AD_SQL_SUCESSO Then gError 78125
                                        
                'Gera número automático para o Item de apuração ICMS
                lErro = CF("Config_ObterNumInt", "FISConfig", "FISC_NUM_INT_LIVREGES_CADPROD", lNumIntDoc)
                If lErro <> SUCESSO Then gError 78126
                
                sSituacaoTrib = CStr(objProduto.iOrigemMercadoria) & Mid(sSituacaoTrib, 2, 1)
                sCodigoNCM = Mid(objProduto.sIPICodigo, 1, 8)
            
                'Faz a inserção na Tabela de LivResESCadProd
                lErro = Comando_Executar(alComando(3), "INSERT INTO LivRegESCadProd (NumIntDoc, Produto, CodigoNCM, Descricao, SiglaUM, SituacaoTrib, AliquotaIPI, AliquotaICMS, ReducaoBaseCalculoICMS, BaseCalculoICMSSubst, DataInicial) VALUES (?,?,?,?,?,?,?,?,?,?,?)", lNumIntDoc, sProduto, sCodigoNCM, objProduto.sDescricao, sSiglaUM, sSituacaoTrib, dAliquotaIPI, dAliquotaICMS, dReducaoBaseCalculoICMS, dBaseCalculoICMSSubst, gdtDataHoje)
                If lErro <> AD_SQL_SUCESSO Then gError 78127
                        
            Else
                
                'sobrepor alteracao no mesmo dia para evitar erro de duplicidade do validador
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE LivRegESCadProd SET CodigoNCM = ?, Descricao = ?, SiglaUM = ?, SituacaoTrib = ?, AliquotaIPI = ?, AliquotaICMS = ?, ReducaoBaseCalculoICMS = ?, BaseCalculoICMSSubst = ?", alComando(1), _
                    sCodigoNCM, objProduto.sDescricao, sSiglaUM, sSituacaoTrib, dAliquotaIPI, dAliquotaICMS, dReducaoBaseCalculoICMS, dBaseCalculoICMSSubst)
                If lErro <> AD_SQL_SUCESSO Then gError 130537
            
            End If
            
        End If
    
    End If
    
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Produto_Altera_LivRegESCadProd = SUCESSO
    
    Exit Function
    
Erro_Produto_Altera_LivRegESCadProd:

    Produto_Altera_LivRegESCadProd = gErr
    
    Select Case gErr
    
        Case 78122
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 78123, 78124
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIVREGESCADPROD", gErr)
        
        Case 78125, 130535, 130536, 130537
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LIVREGCADPROD", gErr)
        
        Case 78126
        
        Case 78127
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_LIVREGESCADPROD", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151846)
        
    End Select
    
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Produto_Grava(ByVal objProduto As ClassProduto, ByVal colTabelaPrecoItem As Collection) As Long
'Grava ou Alterar o Produto passado

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Produto_Grava

    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 64487

    lErro = CF("Produto_Grava_Trans", objProduto, colTabelaPrecoItem)
    If lErro <> SUCESSO Then Error 64488
    
    'Faz o commit da transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 64489
    
    Produto_Grava = SUCESSO

    Exit Function

Erro_Produto_Grava:

    Produto_Grava = Err

    Select Case Err

        Case 64487
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 64488 'Tratado na rotina chamada
        
        Case 64489
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151847)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Friend Function ProdutoGerencial_Exclui(ByVal sProduto As String) As Long
'Faz a exclusão de um Produto do Tipo Gerencial

Dim lErro As Long
Dim lErro1 As Integer
Dim objProduto As New ClassProduto
Dim sProduto1 As String
Dim iGerencial As Integer
Dim lComando As Long
Dim iNivel As Integer
Dim iNivel1 As Integer
Dim X As New ClassMATGrava

On Error GoTo Erro_ProdutoGerencial_Exclui

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 31133

    sProduto1 = String(STRING_PRODUTO, 0)

    'Lê os Produtos maiores que o Produto passado
    lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, Gerencial FROM Produtos WHERE Codigo > ? ORDER BY Codigo", 0, sProduto1, iGerencial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 31134

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31135

    If lErro = AD_SQL_SUCESSO Then

        'Pega o Nível do Produto passado
        lErro1 = Mascara_Produto_ObterNivel(sProduto, iNivel)
        If lErro1 <> SUCESSO Then Error 31136
        'Pega o Nível do Produto lido
        lErro1 = Mascara_Produto_ObterNivel(sProduto1, iNivel1)
        If lErro1 <> SUCESSO Then Error 31137

    End If

    'Se o Produto lido for "filho"  do Produto passado
    Do While lErro = AD_SQL_SUCESSO And iNivel < iNivel1

        'Faz o "lock" no Produto lido
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 31138

        'Valida a exclusão do Produto
        lErro = CF("Produto_Valida_Exclusao", sProduto1)
        If lErro <> SUCESSO Then Error 31139

        'Lê o Próximo Produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31140

        If lErro = AD_SQL_SUCESSO Then

            'Pega o nível do Produto lido
            lErro1 = Mascara_Produto_ObterNivel(sProduto1, iNivel1)
            If lErro1 <> SUCESSO Then Error 31141

        End If

    Loop

    'Exclui do BD o Produto passado e seus filhos
    lErro = X.ProdutoGerencial_Exclui_BD(sProduto)
    If lErro <> SUCESSO Then Error 31142

    'Fecha o comando
    Call Comando_Fechar(lComando)

    ProdutoGerencial_Exclui = SUCESSO

    Exit Function

Erro_ProdutoGerencial_Exclui:

    ProdutoGerencial_Exclui = Err

    Select Case Err

        Case 31133
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 31134, 31135, 31140
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", Err, sProduto)

        Case 31136
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MASCARA_PRODUTO_OBTERNIVEL", sProduto)

        Case 31137, 31141
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MASCARA_PRODUTO_OBTERNIVEL", sProduto1)

        Case 31138
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", Err, sProduto1)

        Case 31139, 31142

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151848)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function MatConfig_Atualiza_IntervaloProducao(ByVal sIntervaloProducao As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sCodigo As String
Dim sDescricao As String
Dim sConteudo As String
Dim iFilialEmpresa As Integer
Dim iTipo As Integer

On Error GoTo Erro_MatConfig_Atualiza_IntervaloProducao

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 76008

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 76009

    lComando2 = Comando_Abrir()
    If lComando = 0 Then gError 76010

    sCodigo = String(STRING_COMCONFIG_CODIGO, 0)
    sDescricao = String(STRING_COMCONFIG_DESCRICAO, 0)
    sConteudo = String(STRING_CONTEUDO, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, FilialEmpresa,Descricao,Tipo,Conteudo FROM MATConfig WHERE Codigo=? AND FilialEmpresa=?", 0, sCodigo, iFilialEmpresa, sDescricao, iTipo, sConteudo, "INTERVALO_INSUMO_INIC_PRODUCAO", giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 76011

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76012

    lErro = Comando_ExecutarPos(lComando2, "UPDATE MATConfig SET Codigo=?,FilialEmpresa=?,Descricao=?,Tipo=?,Conteudo=?", lComando, "INTERVALO_INSUMO_INIC_PRODUCAO", giFilialEmpresa, "Intervalo entre a produção dos insumos e a produção da mercadoria que utiliza os insumos produzidos.", 1, sIntervaloProducao)
    If lErro <> AD_SQL_SUCESSO Then gError 76013

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 76014

    MatConfig_Atualiza_IntervaloProducao = SUCESSO
    
    Exit Function
    
Erro_MatConfig_Atualiza_IntervaloProducao:
    
    MatConfig_Atualiza_IntervaloProducao = gErr

    Select Case gErr

        Case 76008
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 76009, 76010
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 76011, 76012
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMPRASCONFIG", gErr, INTERVALO_INSUMO_INIC_PRODUCAO)
            
        Case 76013
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_COMPRASCONFIG", gErr, INTERVALO_INSUMO_INIC_PRODUCAO)
        
        Case 76014
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151849)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    'Fechamento transação
    Call Transacao_Rollback

    Exit Function
    
End Function

Private Function SldMesEst1_Atualiza_Mes(ByVal objTela As Object, ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer, ByVal objEstoque As ClassEstoqueMes) As Long
'Passa os Custo Medios de Produtos de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim vbMesRes As VbMsgBoxResult

On Error GoTo Erro_SldMesEst1_Atualiza_Mes

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 71588

    'Inicializa comando2
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 71589
    
    'preenche o sMes para que seja usado no select
    iMes = objEstoque.iMes
    sMes = CStr(iMes)

    'Le o CustoMedio de cada escaninho
    lErro = Comando_ExecutarPos(lComando, "SELECT Ano FROM SldMesEst1 Where Ano=? And FilialEmpresa=?", 0, iAno, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 71590

    'Busca o primeiro Custo Medio e Standard do primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71591

    'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
    iMes2 = iMes + 1
    sMes2 = CStr(iMes2)
    
    'enquanto existir um produto
    Do While lErro = AD_SQL_SUCESSO

'        'lock do registro em questão
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then gError 71593

        
        'Altera os dados no BD
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1 SET CustoMedioConsig3" + sMes2 + " = CustoMedioConsig3" + sMes + ", CustoMedioDemo3" + sMes2 + " = CustoMedioDemo3" + sMes + ", CustoMedioConserto3" + sMes2 + " = CustoMedioConserto3" + sMes + ", CustoMedioOutros3" + sMes2 + " = CustoMedioOutros3" + sMes + ", CustoMedioBenef3" + sMes2 + " = CustoMedioBenef3" + sMes, lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 71594
         
         
        'Joga o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
        
        DoEvents
        
        'verifica se foi cancelado o fechamento do mes
        If iCancela = CANCELA Then
            
            vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES", iMes)
                
            If vbMesRes = vbYes Then gError 71595
                
            iCancela = CANCELA_BATCH
        
        End If
        
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71592

    Loop

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    SldMesEst1_Atualiza_Mes = SUCESSO

    Exit Function

Erro_SldMesEst1_Atualiza_Mes:

    SldMesEst1_Atualiza_Mes = gErr

    Select Case gErr
            
        Case 71588, 71589
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 71590, 71591, 71592
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1_2", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71593
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST1_1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71594
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOMES_SLDMESEST1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, iMes)
        
        Case 71595
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151850)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst1_Atualiza_Mes_Reproc(ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst) As Long
'Passa os Custo Medios de Produtos de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim sProduto As String

On Error GoTo Erro_SldMesEst1_Atualiza_Mes_Reproc

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 89195

    'Inicializa comando2
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 89196
    
    sMes = CStr(iMes)

    sProduto = String(STRING_PRODUTO, 0)

    'Le o CustoMedio de cada escaninho
    lErro = Comando_ExecutarPos(lComando, "SELECT Produto FROM SldMesEst1 Where Ano=? And FilialEmpresa=?", 0, sProduto, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 89197

    'Busca o primeiro Custo Medio e Standard do primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89198

    'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
    iMes2 = iMes + 1
    sMes2 = CStr(iMes2)
    
    'enquanto existir um produto
    Do While lErro = AD_SQL_SUCESSO

        'Altera os dados no BD
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1 SET CustoMedioConsig3" + sMes2 + " = CustoMedioConsig3" + sMes + ", CustoMedioDemo3" + sMes2 + " = CustoMedioDemo3" + sMes + ", CustoMedioConserto3" + sMes2 + " = CustoMedioConserto3" + sMes + ", CustoMedioOutros3" + sMes2 + " = CustoMedioOutros3" + sMes + ", CustoMedioBenef3" + sMes2 + " = CustoMedioBenef3" + sMes, lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 89199
         
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89200

    Loop

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    SldMesEst1_Atualiza_Mes_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst1_Atualiza_Mes_Reproc:

    SldMesEst1_Atualiza_Mes_Reproc = gErr

    Select Case gErr
            
        Case 89195, 89196
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89197, 89198, 89200
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1_2", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 89199
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST1_1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151851)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst2_Atualiza_Mes(ByVal objTela As Object, ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer, ByVal objEstoque As ClassEstoqueMes) As Long
'Passa os Custo Medios de Produtos Nossos em Poder de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim vbMesRes As VbMsgBoxResult

On Error GoTo Erro_SldMesEst2_Atualiza_Mes

    'limpa o contador na tela
    objTela.Controls("ProdutosProcessados").Caption = "0"

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 71596

    'Inicializa comando2
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 71597
    
    'preenche o sMes para que seja usado no select
    iMes = objEstoque.iMes
    sMes = CStr(iMes)

    'Le o CustoMedio de cada escaninho
    lErro = Comando_ExecutarPos(lComando, "SELECT Ano FROM SldMesEst2 Where Ano=? And FilialEmpresa=?", 0, iAno, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 71598

    'Busca o primeiro Custo Medio e Standard do primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71599

    'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
    iMes2 = iMes + 1
    sMes2 = CStr(iMes2)
    
    'enquanto existir um produto
    Do While lErro = AD_SQL_SUCESSO

'        'lock do registro em questão
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then gError 71601

        
        'Altera os dados no BD
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2 SET CustoMedioConsig" + sMes2 + " = CustoMedioConsig" + sMes + ", CustoMedioDemo" + sMes2 + " = CustoMedioDemo" + sMes + ", CustoMedioConserto" + sMes2 + " = CustoMedioConserto" + sMes + ", CustoMedioOutros" + sMes2 + " = CustoMedioOutros" + sMes + ", CustoMedioBenef" + sMes2 + " = CustoMedioBenef" + sMes, lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 71602
         
         
        'Joga o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
        
        DoEvents
        
        'verifica se foi cancelado o fechamento do mes
        If iCancela = CANCELA Then
            
            vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES", iMes)
                
            If vbMesRes = vbYes Then gError 71603
                
            iCancela = CANCELA_BATCH
        
        End If
        
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71600

    Loop

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    SldMesEst2_Atualiza_Mes = SUCESSO

    Exit Function

Erro_SldMesEst2_Atualiza_Mes:

    SldMesEst2_Atualiza_Mes = gErr

    Select Case gErr
            
        Case 71596, 71597
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 71598, 71599, 71600
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2_2", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71601
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST2_1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71602
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOMES_SLDMESEST2", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, iMes)
        
        Case 71603
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151852)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst2_Atualiza_Mes_Reproc(ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst) As Long
'Passa os Custo Medios de Produtos Nossos em Poder de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim sProduto As String

On Error GoTo Erro_SldMesEst2_Atualiza_Mes_Reproc

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 89201

    'Inicializa comando2
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 89202
    
    'preenche o sMes para que seja usado no select
    sMes = CStr(iMes)

    sProduto = String(STRING_PRODUTO, 0)

    'Le o CustoMedio de cada escaninho
    lErro = Comando_ExecutarPos(lComando, "SELECT Produto FROM SldMesEst2 Where Ano=? And FilialEmpresa=?", 0, sProduto, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 89203

    'Busca o primeiro Custo Medio e Standard do primeiro produto
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89204

    'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
    iMes2 = iMes + 1
    sMes2 = CStr(iMes2)
    
    'enquanto existir um produto
    Do While lErro = AD_SQL_SUCESSO

        'Altera os dados no BD
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2 SET CustoMedioConsig" + sMes2 + " = CustoMedioConsig" + sMes + ", CustoMedioDemo" + sMes2 + " = CustoMedioDemo" + sMes + ", CustoMedioConserto" + sMes2 + " = CustoMedioConserto" + sMes + ", CustoMedioOutros" + sMes2 + " = CustoMedioOutros" + sMes + ", CustoMedioBenef" + sMes2 + " = CustoMedioBenef" + sMes, lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 89205
         
        'Busca o o proximo produto
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89206

    Loop

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    SldMesEst2_Atualiza_Mes_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst2_Atualiza_Mes_Reproc:

    SldMesEst2_Atualiza_Mes_Reproc = gErr

    Select Case gErr
            
        Case 89201, 89202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89203, 89204, 89206
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2_2", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 89205
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST2_1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151853)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function Importa_Produtos() As Long
'Importa os dados referentes aos Produtos (Tabelas: ImportProd,ImportProdAux,ImportProdDesc)

Dim lErro As Long
Dim tImportProd As typeImportProd
Dim objProduto As New ClassProduto
Dim objProdutoPai As New ClassProduto
Dim lComando As Long
Dim lTransacao As Long
Dim lTamanho As Long
Dim iCreditoICMS As Integer
Dim iCreditoIPI As Integer
Dim sCodProduto As String
Dim colTabelaPrecoItem As New Collection
Dim sProdutoPai As String

On Error GoTo Erro_Importa_Produtos
    
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 76348
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 76349
    
    tImportProd.sCodigo = String(STRING_PRODUTO, 0)
    tImportProd.sCodigoBarras = String(STRING_PRODUTO_CODIGO_BARRAS, 0)
    tImportProd.sContaContabil = String(STRING_CONTA, 0)
    tImportProd.sContaContabilProducao = String(STRING_CONTA, 0)
    tImportProd.sCor = String(STRING_PRODUTO_COR, 0)
    tImportProd.sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    tImportProd.sIPICodDIPI = String(STRING_PRODUTO_IPI_COD_DIPI, 0)
    tImportProd.sIPICodigo = String(STRING_PRODUTO_IPI_CODIGO, 0)
    tImportProd.sModelo = String(STRING_PRODUTO_MODELO, 0)
    tImportProd.sNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
    tImportProd.sObsFisica = String(STRING_PRODUTO_OBS_FISICA, 0)
    tImportProd.sSiglaUMCompra = String(STRING_PRODUTO_SIGLAUMCOMPRA, 0)
    tImportProd.sSiglaUMEstoque = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
    tImportProd.sSiglaUMVenda = String(STRING_PRODUTO_SIGLAUMVENDA, 0)
    tImportProd.sSubstituto1 = String(STRING_PRODUTO_SUBSTITUTO1, 0)
    tImportProd.sSubstituto2 = String(STRING_PRODUTO_SUBSTITUTO2, 0)
    tImportProd.sffl_CodClasse = String(STRING_CATEGORIAPRODUTO_DESCRICAO, 0)
    tImportProd.sffl_DescrClasse = String(STRING_CATEGORIAPRODUTO_DESCRICAO, 0)
    tImportProd.sffl_ONU = String(STRING_CATEGORIAPRODUTO_DESCRICAO, 0)
    
    'Lê os registros da tabela ImportProd
    With tImportProd
    lErro = Comando_Executar(lComando, "SELECT Codigo,Tipo,Descricao,NomeReduzido,Modelo,Gerencial,Nivel,Substituto1,Substituto2,PrazoValidade,CodigoBarras,EtiquetasCodBarras,PesoLiq,PesoBruto," _
        & "Comprimento,Espessura,Largura,Cor,ObsFisica,ClasseUM,SiglaUMEstoque,SiglaUMCompra,SiglaUMVenda,Ativo,Faturamento,Compras,PCP," _
        & "KitBasico,KitInt,IPIAliquota,IPICodigo,IPICodDIPI,ControleEstoque,ICMSAgregaCusto,IPIAgregaCusto,FreteAgregaCusto,Apropriacao,ContaContabil,ContaContabilProducao,PercentMaisQuantCotAnt,PercentMenosQuantCotAnt,ConsideraQuantCotAnt,TemFaixaReceb,PercentMaisReceb,PercentMenosReceb,RecebForaFaixa,CreditoICMS,CreditoIPI,Residuo,Natureza," _
        & "CustoReposicao,OrigemMercadoria,TabelaPreco,TempoProducao,Rastro,HorasMaquina,PesoEspecifico,Linha,Grupo,SubGrupo,ffl_CodClasse,ffl_DescrClasse,ffl_ONU,ffl_R FROM ImportProd ORDER BY Codigo", .sCodigo, .iTipo, .sDescricao, .sNomeReduzido, .sModelo, .iGerencial, .iNivel, .sSubstituto1, .sSubstituto2, .iPrazoValidade, .sCodigoBarras, .iEtiquetasCodBarras, .dPesoLiq, .dPesoBruto, .dComprimento, .dEspessura, .dLargura, .sCor, _
        .sObsFisica, .iClasseUM, .sSiglaUMEstoque, .sSiglaUMCompra, .sSiglaUMVenda, .iAtivo, .iFaturamento, .iCompras, .iPCP, .iKitBasico, .iKitInt, .dIPIAliquota, .sIPICodigo, .sIPICodDIPI, .iControleEstoque, .iICMSAgregaCusto, .iIPIAgregaCusto, .iFreteAgregaCusto, .iApropriacaoCusto, .sContaContabil, .sContaContabilProducao, .dPercentMaisQuantCotAnt, _
        .dPercentMenosQuantCotAnt, .iConsideraQuantCotAnt, .iTemFaixaReceb, .dPercentMaisReceb, .dPercentMenosReceb, .iRecebForaFaixa, .iCreditoICMS, .iCreditoIPI, .dResiduo, .iNatureza, .dCustoReposicao, .iOrigemMercadoria, .iTabelaPreco, .iTempoProducao, .iRastro, .lHorasMaquina, .dPesoEspecifico, .iLinha, .iGrupo, .iSubGrupo, .sffl_CodClasse, .sffl_DescrClasse, .sffl_ONU, .iffl_R)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 76350
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76351
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objProduto = New ClassProduto

        '??? CODIGO ESPECIFICO P/INPAL
        'Verifica o tamanho do código do produto
        lTamanho = Len(Trim(tImportProd.sCodigo))
        'retira o primeiro caracter do código do produto
        sCodProduto = right(tImportProd.sCodigo, lTamanho - 1)
        'guarda o código do produto
        tImportProd.sCodigo = sCodProduto
        
        objProduto.sCodigo = tImportProd.sCodigo
        
        objProduto.iNatureza = tImportProd.iNatureza
        objProduto.iTipo = tImportProd.iTipo

        '??? CODIGO ESPECIFICO P/INPAL
        'define a natureza e o tipo do produto
        lErro = Produto_DefineNatureza(objProduto, tImportProd)
        If lErro <> SUCESSO Then gError 76400
        
        'Verifica se o Produto já está cadastrado
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 76352
    
        'Se não existe o Produto na tabela Produtos
        If lErro = 28030 Then
        
            'Busca o código do produto "pai"
            sProdutoPai = left(objProduto.sCodigo, 4)
            
            Set objProdutoPai = New ClassProduto
            
            objProdutoPai.sCodigo = sProdutoPai
            
            'Busca em ImportProdAux o produto "pai" e verifica se
            'já está cadastrado em Produtos. Se não estiver, grava o produto "pai"
            lErro = Produto_Define_ProdutoPai(objProdutoPai, tImportProd)
            If lErro <> SUCESSO Then gError 76411
                        
            'Preenche objProduto a partir de tImportProd
            lErro = Produto_PreencheObjetos(tImportProd, objProduto)
            If lErro <> SUCESSO Then gError 76353
                  
            '??? CODIGO ESPECIFICO P/INPAL
            'Preenche colCategoriaItem de objProduto
            lErro = Produto_Preenche_ColCategoria(tImportProd, objProduto)
            If lErro <> SUCESSO Then gError 76373
                  
            'Grava o Produto
            lErro = CF("Produto_Grava_Trans", objProduto, colTabelaPrecoItem)
            If lErro <> SUCESSO Then gError 76354

        End If
        
        'Busca o proximo registro de ImportProd
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76355
        
    Loop
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 76356
        
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Importa_Produtos = SUCESSO
    
    Exit Function
    
Erro_Importa_Produtos:

    Importa_Produtos = gErr
    
    Select Case gErr
    
        Case 76348
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 76349
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 76350, 76351, 76355
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPORTPROD", gErr)
        
        Case 76352, 76353, 76354, 76373, 76400, 76411
            'Erros tratados nas rotinas chamadas
            
        Case 76356
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151854)
            
    End Select
    
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function Produto_Define_ProdutoPai(ByVal objProdutoPai As ClassProduto, tImportProd As typeImportProd) As Long
'Busca em ImportProdAux o produto "pai" e verifica se já está cadastrado em Produtos. Se não estiver, grava o
'produto "pai" na tabela de Produtos
            
Dim lErro As Long
Dim lComando As Long
Dim sCodProduto2 As String
Dim sCodigo As String
Dim sDescricao As String
Dim sProdutoPai As String
Dim colTabelaPrecoItem As New Collection

On Error GoTo Erro_Produto_Define_ProdutoPai

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 76399

    sProdutoPai = objProdutoPai.sCodigo
    
    'Lê o Produto "Pai"
    lErro = CF("Produto_Le", objProdutoPai)
    If lErro <> SUCESSO And lErro <> 28030 Then gError 76398
    
    'Se o produto "pai" não estiver cadastrado
    If lErro = 28030 Then
    
        '??? CODIGO ESPECIFICO P/INPAL
        sCodProduto2 = "Z" & objProdutoPai.sCodigo
        
        sCodigo = String(STRING_CODIGO_IMPORTPRODAUX, 0)
        sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
        
        'Busca em ImportProdAux os dados do produto "pai"
        lErro = Comando_Executar(lComando, "SELECT Codigo,Descricao FROM ImportProdAux WHERE Codigo=?", sCodigo, sDescricao, sCodProduto2)
        If lErro <> AD_SQL_SUCESSO Then gError 76401
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76402
        
        objProdutoPai.sDescricao = sDescricao
        
        If lErro = AD_SQL_SUCESSO Then
        
            sDescricao = objProdutoPai.sDescricao
            
            'Preenche Produto "Pai" com os mesmos dados do Produto "Filho" que estão em tImportProd
            lErro = Produto_PreencheObjetos(tImportProd, objProdutoPai)
            If lErro <> SUCESSO Then gError 76410
            
            'Altera os dados específicos do produto "pai", que não são iguais ao "filho"
            objProdutoPai.sDescricao = Trim(sDescricao)
            objProdutoPai.iGerencial = 1
            objProdutoPai.sCodigo = sProdutoPai
            objProdutoPai.sNomeReduzido = "P" & objProdutoPai.sCodigo
            objProdutoPai.iNivel = 1
            
            'Grava o "produto pai" no BD
            lErro = CF("Produto_Grava_Trans", objProdutoPai, colTabelaPrecoItem)
            If lErro <> SUCESSO Then gError 76403
            
        End If
    
    End If

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Produto_Define_ProdutoPai = SUCESSO
    
    Exit Function
    
Erro_Produto_Define_ProdutoPai:

    Produto_Define_ProdutoPai = gErr
    
    Select Case gErr
    
        Case 76399
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 76398, 76403, 76410
            'Erros tratados nas rotinas chamadas
            
        Case 76401, 76402
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPORTPRODAUX", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151855)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Produto_PreencheObjetos(tImportProd As typeImportProd, ByVal objProduto As ClassProduto) As Long
'Preenche objProduto a partir dos dados existentes em tImportProd

Dim lErro As Long

On Error GoTo Erro_Produto_PreencheObjetos
        
    objProduto.sCodigo = tImportProd.sCodigo
    objProduto.sNomeReduzido = "P" & tImportProd.sCodigo
    objProduto.dComprimento = tImportProd.dComprimento
    objProduto.dCustoReposicao = tImportProd.dCustoReposicao
    objProduto.dEspessura = tImportProd.dEspessura
    objProduto.dIPIAliquota = tImportProd.dIPIAliquota
    objProduto.dLargura = tImportProd.dLargura
    objProduto.dPercentMaisQuantCotAnt = tImportProd.dPercentMaisQuantCotAnt
    objProduto.dPercentMaisReceb = tImportProd.dPercentMaisReceb
    objProduto.dPercentMenosQuantCotAnt = tImportProd.dPercentMenosQuantCotAnt
    objProduto.dPercentMenosReceb = tImportProd.dPercentMenosReceb
    objProduto.dPesoBruto = tImportProd.dPesoBruto
    objProduto.dPesoEspecifico = tImportProd.dPesoEspecifico
    objProduto.dPesoLiq = tImportProd.dPesoLiq
    objProduto.dResiduo = tImportProd.dResiduo
    objProduto.iAtivo = tImportProd.iAtivo
    objProduto.iControleEstoque = tImportProd.iControleEstoque
    objProduto.iCreditoICMS = tImportProd.iCreditoICMS
    objProduto.iCreditoIPI = tImportProd.iCreditoIPI
    objProduto.iEtiquetasCodBarras = tImportProd.iEtiquetasCodBarras
    objProduto.iFreteAgregaCusto = tImportProd.iFreteAgregaCusto
    objProduto.iGerencial = tImportProd.iGerencial
    objProduto.iICMSAgregaCusto = tImportProd.iICMSAgregaCusto
    objProduto.iIPIAgregaCusto = tImportProd.iIPIAgregaCusto
    objProduto.iKitBasico = tImportProd.iKitBasico
    objProduto.iKitInt = tImportProd.iKitInt
    
    objProduto.iFaturamento = PRODUTO_VENDAVEL
    
    'Verifica se o produto pode ser comprado
    If objProduto.iNatureza = NATUREZA_PROD_PRODUTO_ACABADO Or objProduto.iNatureza = NATUREZA_PROD_PRODUTO_INTERMEDIARIO Then
        objProduto.iCompras = PRODUTO_NAO_COMPRAVEL
    Else
        objProduto.iCompras = PRODUTO_COMPRAVEL
    End If
    
    'Verifica a Apropriacao de Custo do Produto
    If objProduto.iNatureza = NATUREZA_PROD_PRODUTO_ACABADO Or objProduto.iNatureza = NATUREZA_PROD_PRODUTO_INTERMEDIARIO Then
        objProduto.iApropriacaoCusto = APROPR_CUSTO_REAL
    Else
        objProduto.iApropriacaoCusto = tImportProd.iApropriacaoCusto
    End If
    
    objProduto.iNivel = tImportProd.iNivel
    
    'Verifica se Produto pode participar da producao
    If objProduto.iNatureza = NATUREZA_PROD_MATERIA_PRIMA Or objProduto.iNatureza = NATUREZA_PROD_PRODUTO_INTERMEDIARIO Then
        objProduto.iPCP = PRODUTO_PCP_PODE
    Else
        objProduto.iPCP = PRODUTO_PCP_NAOPODE
    End If
    
    objProduto.iPrazoValidade = tImportProd.iPrazoValidade
    objProduto.iRastro = tImportProd.iRastro
    objProduto.iTabelaPreco = tImportProd.iTabelaPreco
    objProduto.iTempoProducao = tImportProd.iTempoProducao
    objProduto.iTipo = tImportProd.iTipo
    objProduto.lHorasMaquina = tImportProd.lHorasMaquina
    objProduto.sCodigoBarras = tImportProd.sCodigoBarras
    objProduto.sContaContabil = tImportProd.sContaContabil
    objProduto.sContaContabilProducao = tImportProd.sContaContabilProducao
    objProduto.sCor = tImportProd.sCor
    objProduto.sDescricao = Trim(tImportProd.sDescricao)
    objProduto.sIPICodDIPI = tImportProd.sIPICodDIPI
    objProduto.sIPICodigo = tImportProd.sIPICodigo
    objProduto.sModelo = tImportProd.sModelo
    
    'Define a Classe de UM do Produto
    lErro = Produto_Define_ClasseUM(tImportProd)
    If lErro <> SUCESSO Then gError 76435
    
    objProduto.iClasseUM = tImportProd.iClasseUM
    objProduto.sSiglaUMCompra = tImportProd.sSiglaUMCompra
    objProduto.sSiglaUMEstoque = tImportProd.sSiglaUMEstoque
    'UMVenda ficará igual a UMEstoque
    objProduto.sSiglaUMVenda = tImportProd.sSiglaUMEstoque
    
    objProduto.sSubstituto1 = tImportProd.sSubstituto1
    objProduto.sSubstituto2 = tImportProd.sSubstituto2
    
    'Todo produto tem Origem= Nacional
    objProduto.iOrigemMercadoria = 0
    
    'Informações referentes a Compras
    objProduto.iConsideraQuantCotAnt = 1
    objProduto.dPercentMenosQuantCotAnt = 0
    objProduto.dPercentMaisQuantCotAnt = 0
    objProduto.iTemFaixaReceb = 0
    objProduto.dPercentMaisReceb = 0
    objProduto.dPercentMenosReceb = 0
    objProduto.iRecebForaFaixa = 1
    
    objProduto.sObsFisica = tImportProd.sObsFisica
    
    'Define a ObsFisica do produto, a partir da leitura de ImportProdDesc
    lErro = Produto_Define_ObsFisica(objProduto, tImportProd)
    If lErro <> SUCESSO Then gError 76404
        
    Produto_PreencheObjetos = SUCESSO
    
    Exit Function
    
Erro_Produto_PreencheObjetos:

    Produto_PreencheObjetos = gErr
    
    Select Case gErr
    
        Case 76404, 76435
            'Erros tratados nas rotinas chamadas
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151856)
            
    End Select
    
    Exit Function
    
End Function

Function Produto_Define_ClasseUM(tImportProd As typeImportProd) As Long
'Define ClasseUM e SiglaUM do Produto, a partir dos dados lidos em ImportProd

Dim lErro As Long
Dim objClasseUM As New ClassClasseUM
Dim objUM As New ClassUnidadeDeMedida
Dim dQuantidade As Double
Dim bClasseDefinida As Boolean

On Error GoTo Erro_Produto_Define_ClasseUM

    tImportProd.iClasseUM = 0
    
    If tImportProd.sSiglaUMCompra = "" Then tImportProd.sSiglaUMCompra = tImportProd.sSiglaUMEstoque
    
    If tImportProd.sSiglaUMEstoque <> tImportProd.sSiglaUMCompra Then
    
        Select Case Trim(tImportProd.sSiglaUMEstoque)
        
            Case "FL"
            
                tImportProd.iClasseUM = 10
                Select Case Trim(tImportProd.sSiglaUMCompra)
                    Case "CX", "MIL", "RM"
                    Case "ML"
                        tImportProd.sSiglaUMCompra = "MIL"
                End Select
            Case "GL"
                tImportProd.iClasseUM = 129
                   
            Case "GR"
                tImportProd.sSiglaUMEstoque = "G"
                tImportProd.iClasseUM = 12
    
            Case "KG"
                Select Case Trim(tImportProd.sSiglaUMCompra)
                    Case "G", "TON", "LB"
                        tImportProd.iClasseUM = 12
                    Case "GR"
                        tImportProd.iClasseUM = 12
                        tImportProd.sSiglaUMCompra = "G"
                    Case "M3"
                        tImportProd.iClasseUM = 112
                                        
                    Case "TB"
                        tImportProd.iClasseUM = 163
                        
                    Case "SC"
                        Select Case tImportProd.sCodigo
                        
                            Case "D000034"
                                tImportProd.iClasseUM = 160
                                
                            Case "H000014", "D000013", "D000012", "D000010"
                                tImportProd.iClasseUM = 161
                        
                            Case "R000069"
                                tImportProd.iClasseUM = 162
                            
                        End Select
                        
                    Case "L", "LT"
                        If Trim(tImportProd.sSiglaUMCompra) = "LT" Then tImportProd.sSiglaUMCompra = "L"
                        Select Case tImportProd.sCodigo
                        
                            Case "O000015"
                                tImportProd.iClasseUM = 101
                            Case "V000021", "O000118"
                                tImportProd.iClasseUM = 102
                            Case "E000027"
                                tImportProd.iClasseUM = 103
                            Case "V000011"
                                tImportProd.iClasseUM = 104
                            Case "V000014"
                                tImportProd.iClasseUM = 106
                            Case "V000010", "V000047"
                                tImportProd.iClasseUM = 107
                            Case "V000050"
                                tImportProd.iClasseUM = 110
                            Case "V000019"
                                tImportProd.iClasseUM = 109
                            Case "V000031"
                                tImportProd.iClasseUM = 111
                            
                        End Select
                        
                End Select
        
            Case "PC"
                Select Case Trim(tImportProd.sSiglaUMCompra)
                    Case "CT", "MIL"
                        tImportProd.iClasseUM = 13
                    Case "ML", "MLH"
                        tImportProd.iClasseUM = 13
                        tImportProd.sSiglaUMCompra = "MIL"
                    Case "%"
                        tImportProd.iClasseUM = 13
                        tImportProd.sSiglaUMCompra = "CT"
                    Case "CX"
                        Select Case tImportProd.sCodigo
                            Case "5208025", "5208026", "5208027", "5208069"
                                tImportProd.iClasseUM = 119
                            Case "5209020", "5209021", "5209022"
                                tImportProd.iClasseUM = 120
                            Case "5207001"
                                tImportProd.iClasseUM = 121
                            Case "4110017"
                                tImportProd.iClasseUM = 122
                        End Select
                    Case "KG"
                        tImportProd.iClasseUM = 123
                    
                End Select
            
            Case "L", "LT"
                If Trim(tImportProd.sSiglaUMEstoque) = "LT" Then tImportProd.sSiglaUMEstoque = "L"
                Select Case Trim(tImportProd.sSiglaUMCompra)
                    Case "BB"
                        tImportProd.iClasseUM = 113
                    Case "BD"
                        tImportProd.iClasseUM = 114
                    Case "BLD"
                        tImportProd.sSiglaUMCompra = "BD"
                        Select Case tImportProd.sCodigo
                            Case "1105039"
                                tImportProd.iClasseUM = 114
                            Case "6120030", "1105037"
                                tImportProd.iClasseUM = 116
                        End Select
                        
                End Select
            Case "LAT"
                tImportProd.iClasseUM = 117
            Case "M2"
                tImportProd.iClasseUM = 118
            Case "RL"
                Select Case tImportProd.sCodigo
                    Case "2124007"
                        tImportProd.sSiglaUMCompra = "FRD"
                        tImportProd.iClasseUM = 124
                    Case "4110007"
                        tImportProd.iClasseUM = 124
                    Case "4110010"
                        tImportProd.iClasseUM = 125
                    Case "6120001"
                        tImportProd.iClasseUM = 126
                End Select
            
            Case "SC"
                tImportProd.iClasseUM = 127
            Case "TUB"
                tImportProd.iClasseUM = 128
            
        End Select
    
    Else 'se as siglas sao iguais

        Select Case Trim(tImportProd.sSiglaUMEstoque)
        
            Case "%"
                tImportProd.sSiglaUMEstoque = "CT"
                tImportProd.sSiglaUMCompra = "CT"
                tImportProd.iClasseUM = 13
                
            Case "BB"
                tImportProd.iClasseUM = 130
            Case "BD"
                tImportProd.iClasseUM = 131
            Case "BL"
                tImportProd.iClasseUM = 132
            Case "BLD"
                tImportProd.sSiglaUMEstoque = "BD"
                tImportProd.sSiglaUMCompra = "BD"
                tImportProd.iClasseUM = 132
            Case "CL"
                tImportProd.iClasseUM = 133
            Case "CIL"
                tImportProd.iClasseUM = 134
            Case "CJ", "CJT"
                tImportProd.iClasseUM = 135
            Case "CRT"
                tImportProd.iClasseUM = 136
            Case "CT"
                tImportProd.iClasseUM = 13
            Case "CX"
                tImportProd.iClasseUM = 137
            Case "FD"
                tImportProd.iClasseUM = 138
            Case "FL"
                tImportProd.iClasseUM = 10
            Case "FR"
                tImportProd.iClasseUM = 139
            Case "G"
                tImportProd.iClasseUM = 12
            Case "GR"
                tImportProd.sSiglaUMEstoque = "G"
                tImportProd.sSiglaUMCompra = "G"
                tImportProd.iClasseUM = 12
            Case "GL"
                tImportProd.iClasseUM = 140
            Case "JG"
                tImportProd.iClasseUM = 141
            Case "KG"
                tImportProd.iClasseUM = 12
            Case "L"
                tImportProd.iClasseUM = 142
            Case "LT"
                tImportProd.sSiglaUMEstoque = "L"
                tImportProd.sSiglaUMCompra = "L"
                tImportProd.iClasseUM = 143
            Case "LAT"
                tImportProd.iClasseUM = 144
            Case "LB"
                tImportProd.iClasseUM = 12
            Case "M2"
                tImportProd.iClasseUM = 145
            Case "M3"
                tImportProd.iClasseUM = 146
            Case "MIL"
                tImportProd.iClasseUM = 13
            Case "ML"
                tImportProd.iClasseUM = 147
            Case "MLH"
                tImportProd.iClasseUM = 148
            Case "MT"
                tImportProd.iClasseUM = 149
            Case "PAR"
                tImportProd.iClasseUM = 150
            Case "PC"
                tImportProd.iClasseUM = 13
            Case "PC1"
                tImportProd.iClasseUM = 151
            Case "PCT"
                tImportProd.iClasseUM = 152
            Case "PG"
                tImportProd.iClasseUM = 153
            Case "RL"
                tImportProd.iClasseUM = 154
            Case "RM"
                tImportProd.iClasseUM = 10
            Case "SC"
                tImportProd.iClasseUM = 155
            Case "SER"
                tImportProd.iClasseUM = 156
            Case "TB"
                tImportProd.iClasseUM = 157
            Case "TON"
                tImportProd.iClasseUM = 12
            Case "TUB"
                tImportProd.iClasseUM = 158
            Case "UN"
                tImportProd.iClasseUM = 159
            Case "UN."
                tImportProd.sSiglaUMEstoque = "UN"
                tImportProd.sSiglaUMCompra = "UN"
                tImportProd.iClasseUM = 159
            Case Else
                tImportProd.sSiglaUMEstoque = "UN"
                tImportProd.sSiglaUMCompra = "UN"
                tImportProd.iClasseUM = 159
            
        End Select
        
    End If
    
    If tImportProd.iClasseUM = 0 Then gError 99999
    
    Produto_Define_ClasseUM = SUCESSO
    
    Exit Function
    
Erro_Produto_Define_ClasseUM:

    Produto_Define_ClasseUM = gErr
    
    Select Case gErr
        
        Case 76471
            'Erro tratado na rotina chamada
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151857)
            
    End Select
    
    Exit Function

            
        
End Function

Function ClasseUM_Verifica_BD(ByVal objClasseUM As ClassClasseUM, tImportProd As typeImportProd, ByVal dQuantidade As Double) As Long
'Verifica se a ClasseUM já está cadastrada no BD

Dim lErro As Long
Dim objUM As New ClassUnidadeDeMedida
Dim colSiglas As New Collection

On Error GoTo Erro_ClasseUM_Verifica_BD

    objClasseUM.iClasse = tImportProd.iClasseUM
    
    'Verifica se a Classe já está cadastrada
    lErro = CF("ClasseUM_Le", objClasseUM)
    If lErro <> SUCESSO And lErro <> 22537 Then gError 76436
                
    
    If lErro <> SUCESSO Then
        
        Set colSiglas = New Collection
        Set objUM = New ClassUnidadeDeMedida
        
        objUM.sSiglaUMBase = tImportProd.sSiglaUMEstoque
        objUM.sSigla = tImportProd.sSiglaUMEstoque
        objUM.iClasse = objClasseUM.iClasse
        objUM.dQuantidade = 1
        colSiglas.Add objUM
        
        Set objUM = New ClassUnidadeDeMedida
        
        objUM.sSiglaUMBase = tImportProd.sSiglaUMEstoque
        objUM.sSigla = tImportProd.sSiglaUMCompra
        objUM.iClasse = objClasseUM.iClasse
        objUM.dQuantidade = dQuantidade
        colSiglas.Add objUM
        
        'Grava ClasseUM
        lErro = ClasseUM_Grava_EmTrans(objClasseUM, colSiglas)
        If lErro <> SUCESSO Then gError 76437
    End If
            
    ClasseUM_Verifica_BD = SUCESSO
    
    Exit Function
    
Erro_ClasseUM_Verifica_BD:

    ClasseUM_Verifica_BD = gErr
    
    Select Case gErr
        
        Case 76436, 76437
            'Erros tratados nas rotinas chamadas
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151858)
            
    End Select
    
    Exit Function
    
End Function

Function Produto_Define_ObsFisica(ByVal objProduto As ClassProduto, tImportProd As typeImportProd) As Long
'Define a ObsFisica do produto a partir da leitura da tabela ImportProdDesc

Dim lErro As Long
Dim lComando As Long
Dim sFFL_R As String
Dim sDescricao As String
Dim iNum_R As Integer

On Error GoTo Erro_Produto_Define_ObsFisica

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 76405
    
    sFFL_R = String(STRING_FFL_R, 0)
    sDescricao = String(STRING_DESCRICAO_ITEM, 0)
    
    'Busca em ImportProdDesc a descricao do Produto de acordo com o FFL_R passado como parametro
    lErro = Comando_Executar(lComando, "SELECT FFL_R,Descricao,NUM_R FROM ImportProdDesc WHERE  FFL_R=? ORDER BY NUM_R", sFFL_R, sDescricao, iNum_R, CStr(tImportProd.iffl_R))
    If lErro <> AD_SQL_SUCESSO Then gError 76406
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76407
    
    Do While lErro = AD_SQL_SUCESSO
    
        'Se a descricao lida for diferente da descricao do produto
        If sDescricao <> tImportProd.sDescricao Then
        
            'Armazena a Descricao em ObsFisica
            tImportProd.sObsFisica = tImportProd.sObsFisica & sDescricao
            
        End If
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76408
        
    Loop
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Produto_Define_ObsFisica = SUCESSO
    
    Exit Function
    
Erro_Produto_Define_ObsFisica:

    Produto_Define_ObsFisica = gErr
    
    Select Case gErr
        
        Case 76405
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 76406, 76407, 76408
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPORTPRODDESC", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151859)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Produto_Preenche_ColCategoria(tImportProd As typeImportProd, ByVal objProduto As ClassProduto) As Long
'Preenche colCategoriaItem de objProduto

Dim lErro As Long
Dim iItem As Integer
Dim objCategoriaProduto As New ClassCategoriaProduto
Dim objProdutoCategoria As New ClassProdutoCategoria
Dim colItensCategoria As New Collection
Dim objCategoriaItem As New ClassCategoriaProdutoItem

On Error GoTo Erro_Produto_Preenche_ColCategoria

    Set objProduto.colCategoriaItem = New Collection
    Set objProdutoCategoria = New ClassProdutoCategoria
    
    'Verifica se Linha está preenchida
    If tImportProd.iLinha > 0 Then
    
        'Preenche o objCategoriaProduto com a Categoria
        objCategoriaProduto.sCategoria = "Linha"

        'Verifica se a Categoria Produto existe. Se nao existir, insere no BD
        lErro = Valida_CategoriaProduto(objCategoriaProduto, colItensCategoria, tImportProd.iLinha, tImportProd.sCodigo, objProduto)
        If lErro <> SUCESSO Then gError 76378
        
    End If
    
    'Verifica se ffl_CodClasse está preenchido
    If Len(Trim(tImportProd.sffl_CodClasse)) <> 0 Then
    
        'Preenche o objCategoriaProduto com a Categoria
        objCategoriaProduto.sCategoria = "CodClasse"

        'Verifica se a Categoria Produto existe. Se nao existir, insere no BD
        lErro = Valida_CategoriaProduto(objCategoriaProduto, colItensCategoria, tImportProd.sffl_CodClasse, tImportProd.sCodigo, objProduto)
        If lErro <> SUCESSO Then gError 76391
        
    End If
    
    'Verifica se ffl_DescrClasse está preenchido
    If Len(Trim(tImportProd.sffl_DescrClasse)) <> 0 Then
        
        'Preenche o objCategoriaProduto com a Categoria
        objCategoriaProduto.sCategoria = "DescrClasse"

        'Verifica se a Categoria Produto existe. Se nao existir, insere no BD
        lErro = Valida_CategoriaProduto(objCategoriaProduto, colItensCategoria, tImportProd.sffl_DescrClasse, tImportProd.sCodigo, objProduto)
        If lErro <> SUCESSO Then gError 76393
        
    End If
    
    'Verifica se ffl_ONU está preenchido
    If Len(Trim(tImportProd.sffl_ONU)) <> 0 Then
        
        'Preenche o objCategoriaProduto com a Categoria
        objCategoriaProduto.sCategoria = "ONU"

        'Verifica se a Categoria Produto existe. Se nao existir, insere no BD
        lErro = Valida_CategoriaProduto(objCategoriaProduto, colItensCategoria, tImportProd.sffl_ONU, tImportProd.sCodigo, objProduto)
        If lErro <> SUCESSO Then gError 76395
        
    End If
    
    'Verifica se o Grupo está preenchido
    If tImportProd.iGrupo > 0 Then

        'Preenche o objCategoriaProduto com a Categoria
        objCategoriaProduto.sCategoria = "Grupo"

        objProdutoCategoria.sItem = Format(tImportProd.iGrupo, "00")
        
        'Verifica se a Categoria Produto existe. Se nao existir, insere no BD
        lErro = Valida_CategoriaProduto(objCategoriaProduto, colItensCategoria, tImportProd.iGrupo, tImportProd.sCodigo, objProduto)
        If lErro <> SUCESSO Then gError 76380
        
    End If
    '???Esta condicao já basta/??
    If tImportProd.iSubGrupo > 0 Then
    
        'Preenche o objCategoriaProduto com a Categoria
        objCategoriaProduto.sCategoria = "Subgrupo"

        'Cria o Item a partir do par Grupo/SubGrupo
        iItem = (tImportProd.iGrupo * 100) + tImportProd.iSubGrupo
    
        If iItem < 1000 Then
            objProdutoCategoria.sItem = "0" & iItem
        Else
            objProdutoCategoria.sItem = iItem
        End If
        
        'Verifica se a Categoria Produto existe. Se nao existir, insere no BD
        lErro = Valida_CategoriaProduto(objCategoriaProduto, colItensCategoria, objProdutoCategoria.sItem, tImportProd.sCodigo, objProduto)
        If lErro <> SUCESSO Then gError 76381
        
    End If
    
    Produto_Preenche_ColCategoria = SUCESSO
    
    Exit Function
    
Erro_Produto_Preenche_ColCategoria:

    Produto_Preenche_ColCategoria = gErr
    
    Select Case gErr
    
        Case 76378, 76380, 76381, 76391, 76393, 76395
            'Erros tratados nas rotinas chamadas
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151860)
            
    End Select
    
    Exit Function
    
End Function

Function Valida_CategoriaProdutoItem(ByVal objCategoriaProduto As ClassCategoriaProduto, ByVal objCategoriaItem As ClassCategoriaProdutoItem, ByVal colItensCategoria As Collection) As Long
'Verifica se o Item da Categoria existe. Se nao existir, insere no BD

Dim lErro As Long

On Error GoTo Erro_Valida_CategoriaProdutoItem

    'Le o Item da Categoria
    lErro = CF("CategoriaProduto_Le_Item", objCategoriaItem)
    If lErro <> SUCESSO And lErro <> 22603 Then gError 76382
    
    'Se nao encontrou o Item ==> inclusao
    If lErro <> SUCESSO Then
    
        lErro = CF("CategoriaProduto_Grava_NovosItens", objCategoriaProduto, colItensCategoria)
        If lErro <> SUCESSO Then gError 76383
    
    End If
    
    Valida_CategoriaProdutoItem = SUCESSO
    
    Exit Function
    
Erro_Valida_CategoriaProdutoItem:

    Valida_CategoriaProdutoItem = gErr
    
    Select Case gErr
        
        Case 76382, 76383
            'Erros tratados nas rotinas chamadas
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151861)
            
    End Select
    
    Exit Function
            
End Function

Function Valida_CategoriaProduto(ByVal objCategoriaProduto As ClassCategoriaProduto, colItensCategoria As Collection, Item As Variant, ByVal sCodigo As String, ByVal objProduto As ClassProduto) As Long
'Verifica se a CategoriaProduto já está cadastrada. Se não estiver, grava a categoria no BD

Dim lErro As Long
Dim objCategoriaItem As New ClassCategoriaProdutoItem
Dim objProdutoCategoria As New ClassProdutoCategoria

On Error GoTo Erro_Valida_CategoriaProduto

    Set colItensCategoria = New Collection
    Set objCategoriaItem = New ClassCategoriaProdutoItem
    Set objProdutoCategoria = New ClassProdutoCategoria
        
    'Lê Categoria de Produto no BD
    lErro = CF("CategoriaProduto_Le", objCategoriaProduto)
    If lErro <> SUCESSO And lErro <> 22540 Then gError 76374
    
    'Se a Categoria não está cadastrada
    If lErro <> SUCESSO Then
        
        'Grava a Categoria no BD
        lErro = CategoriaProduto_Grava_EmTrans(objCategoriaProduto, colItensCategoria)
        If lErro <> SUCESSO Then gError 76375
        
    End If
    
    Set colItensCategoria = New Collection
    Set objCategoriaItem = New ClassCategoriaProdutoItem
    
    objCategoriaItem.sCategoria = objCategoriaProduto.sCategoria
    objCategoriaItem.sItem = Item
    colItensCategoria.Add objCategoriaItem
    
    'Verifica se o Item da Categoria existe. Se nao existir, insere no BD
    lErro = Valida_CategoriaProdutoItem(objCategoriaProduto, objCategoriaItem, colItensCategoria)
    If lErro <> SUCESSO Then gError 76379
    
    Set objProdutoCategoria = New ClassProdutoCategoria
    
    objProdutoCategoria.sCategoria = objCategoriaProduto.sCategoria
    objProdutoCategoria.sProduto = sCodigo
    objProdutoCategoria.sItem = objCategoriaItem.sItem
    objProduto.colCategoriaItem.Add objProdutoCategoria
    
    Valida_CategoriaProduto = SUCESSO
    
    Exit Function
    
Erro_Valida_CategoriaProduto:

    Valida_CategoriaProduto = gErr
    
    Select Case gErr
    
        Case 76374, 76375, 76379
            'Erros tratados nas rotinas chamadas
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151862)
            
    End Select
    
    Exit Function
    
End Function

Function Produto_DefineNatureza(ByVal objProduto As ClassProduto, tImportProd As typeImportProd) As Long
'Define a natureza e o tipo do Produto a partir do código do produto informado

Dim lErro As Long
Dim lTamanho As Long

On Error GoTo Erro_Produto_DefineNatureza

    'Se o código do produto comeca por letra
    If Not (IsNumeric(left(objProduto.sCodigo, 1))) Then
    
        'se o código do produto começa com "Z"
        If left(objProduto.sCodigo, 1) = "Z" Then
        
            objProduto.iNatureza = NATUREZA_PROD_PRODUTO_INTERMEDIARIO
            objProduto.iTipo = 11
            
        'se começa com qualquer outra letra
        Else
            objProduto.iNatureza = NATUREZA_PROD_MATERIA_PRIMA
            objProduto.iTipo = 12
            
        End If
        
    'Se o código do produto comeca por número
    Else
    
        'se o código tem 7 dígitos
        If Len(Trim(objProduto.sCodigo)) = 7 Then
        
            'se o produto comeca com 1 ==> manutenção
            If left(objProduto.sCodigo, 1) = 1 Then
                objProduto.iNatureza = NATUREZA_PROD_PRODUTO_MANUTENCAO
                objProduto.iTipo = 1
            'se o produto começa com 2 ==> material de laboratório
            ElseIf left(objProduto.sCodigo, 1) = 2 Then
                objProduto.iNatureza = NATUREZA_PROD_OUTROS
                objProduto.iTipo = 2
            'se o produto começa com 3 ==> segurança
            ElseIf left(objProduto.sCodigo, 1) = 3 Then
                objProduto.iNatureza = NATUREZA_PROD_OUTROS
                objProduto.iTipo = 3
            'se o produto começa com 4 ==> limpeza
            ElseIf left(objProduto.sCodigo, 1) = 4 Then
                objProduto.iNatureza = NATUREZA_PROD_OUTROS
                objProduto.iTipo = 4
            'se o produto começa com 5 ==> expediente p/ papelaria
            ElseIf left(objProduto.sCodigo, 1) = 5 Then
                objProduto.iNatureza = NATUREZA_PROD_OUTROS
                objProduto.iTipo = 5
            'se o produto começa com 6 ==> embalagem
            ElseIf left(objProduto.sCodigo, 1) = 6 Then
                objProduto.iNatureza = NATUREZA_PROD_EMBALAGENS
                objProduto.iTipo = 6
            'se o produto começa com 7 ==> material para industrialização
            ElseIf left(objProduto.sCodigo, 1) = 7 Then
                objProduto.iNatureza = NATUREZA_PROD_OUTROS
                objProduto.iTipo = 7
            'se o produto começa com 8 ==> outros
            ElseIf left(objProduto.sCodigo, 1) = 8 Then
                objProduto.iNatureza = NATUREZA_PROD_OUTROS
                objProduto.iTipo = 8
            'se o produto começa com 9 ==> outros
            ElseIf left(objProduto.sCodigo, 1) = 9 Then
                objProduto.iNatureza = NATUREZA_PROD_OUTROS
                objProduto.iTipo = 9
            End If
            
        'se o código tem até 4 dígitos
        ElseIf Len(Trim(objProduto.sCodigo)) <= 4 Then
            
            lTamanho = Len(Trim(objProduto.sCodigo))
            '???Confirmar formatacao
            'coloca o código do produto no formato de 7 dígitos
            objProduto.sCodigo = Format(objProduto.sCodigo, "0000000")
            tImportProd.sCodigo = objProduto.sCodigo
            objProduto.iNatureza = NATUREZA_PROD_PRODUTO_ACABADO
            objProduto.iTipo = 10
            
        End If
            
    End If
    
    Produto_DefineNatureza = SUCESSO
    
    Exit Function
    
Erro_Produto_DefineNatureza:

    Produto_DefineNatureza = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151863)
            
    End Select
    
    Exit Function
    
End Function

Private Function EstoqueInicial_Rastreamento_Grava(ByVal lComando As Long, ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal lComando3 As Long, ByVal colRastreamento As Collection, ByVal sProduto As String, ByVal iAlmoxarifado As Integer) As Long
'grava os rastreamentos associados ao estoque inicial

Dim colRastroEstIni As New Collection
Dim lErro As Long
Dim colRastreamentoLoteSaldo As Collection

On Error GoTo Erro_EstoqueInicial_Rastreamento_Grava

    'le os rastreamentos de estoque inicial para poder atualizar a tabela de rastreamentolotesaldo
    lErro = CF("RastroEstIni_Le", sProduto, iAlmoxarifado, colRastroEstIni)
    If lErro <> SUCESSO Then gError 71891
    
    'Exclui os Rastreamentos referentes ao EstoqueInicial do Produto/Almoxarifado passado como parametro
    lErro = RastroEstIni_Exclui(sProduto, iAlmoxarifado)
    If lErro <> SUCESSO Then gError 71897
    
    Set colRastreamentoLoteSaldo = New Collection
    
    'coloca os valores do lote dentro de escaninho totalizador apropriado
    lErro = RastroLoteSaldo_Atualiza_EstIni(lComando, colRastreamento, RASTRO_ADICAO, colRastreamentoLoteSaldo)
    If lErro <> SUCESSO Then gError 71922
    
    'atualiza a tabela de rastreamentolotesaldo
    lErro = RastroLoteSaldo_Atualiza_EstIni1(lComando1, lComando2, lComando3, colRastreamentoLoteSaldo)
    If lErro <> SUCESSO Then gError 71923
    
    'insere os novos rastreamentos referentes ao EstoqueInicial
    lErro = RastroEstIni_Inserir(colRastreamento)
    If lErro <> SUCESSO Then gError 71924
    
    Set colRastreamentoLoteSaldo = New Collection
    
    'coloca os valores do lote dentro de escaninho totalizador apropriado
    lErro = RastroLoteSaldo_Atualiza_EstIni(lComando, colRastroEstIni, RASTRO_SUBTRACAO, colRastreamentoLoteSaldo)
    If lErro <> SUCESSO Then gError 71904
    
    'atualiza a tabela de rastreamentolotesaldo retirando os saldos dos lotes de rastreamento
    lErro = RastroLoteSaldo_Atualiza_EstIni1(lComando1, lComando2, lComando3, colRastreamentoLoteSaldo)
    If lErro <> SUCESSO Then gError 71921
    
    EstoqueInicial_Rastreamento_Grava = SUCESSO
    
    Exit Function
    
Erro_EstoqueInicial_Rastreamento_Grava:

    EstoqueInicial_Rastreamento_Grava = gErr

    Select Case gErr
    
        Case 71891, 71897, 71904, 71921, 71922, 71923, 71924

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151864)
    
    End Select

    Exit Function

End Function

'???? Transferir para classMATSelect
Function RastroEstIni_Le(ByVal sProduto As String, ByVal iAlmoxarifado As Integer, ByVal colRastreamento As Collection) As Long

Dim lErro As Long
Dim objRastroEstIni As ClassRastroEstIni
Dim lComando As Long
Dim tRastroEstIni As typeRastroEstIni

On Error GoTo Erro_RastroEstIni_Le

    With tRastroEstIni
    
        .sLote = String(STRING_LOTE_RASTREAMENTO, 0)

        lComando = Comando_Abrir()
        If lComando = 0 Then gError 71831
    
        'Selecionar registros na tabela de RastroEstIni associados ao produto, almoxarifado  em questão
        lErro = Comando_Executar(lComando, "SELECT RastroEstIni.Escaninho, RastroEstIni.Quantidade, RastroEstIni.NumIntDocLote, RastreamentoLote.Lote, RastreamentoLote.FilialOP, RastreamentoLote.DataEntrada FROM RastroEstIni, RastreamentoLote WHERE RastroEstIni.NumIntDocLote = RastreamentoLote.NumIntDoc AND RastroEstIni.Produto=? AND RastroEstIni.Almoxarifado=?", .iEscaninho, .dQuantidade, .lNumIntDocLote, .sLote, .iFilialOP, .dtDataEntrada, sProduto, iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then gError 71832
    
        'leitura do registro referente ao RastreamentoMovto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71833
    
        Do While lErro = AD_SQL_SUCESSO
            
            Set objRastroEstIni = New ClassRastroEstIni
            
            objRastroEstIni.sProduto = sProduto
            objRastroEstIni.iAlmoxarifado = iAlmoxarifado
            objRastroEstIni.iEscaninho = .iEscaninho
            objRastroEstIni.lNumIntDocLote = .lNumIntDocLote
            objRastroEstIni.dQuantidade = .dQuantidade
            objRastroEstIni.dtDataEntrada = .dtDataEntrada
            objRastroEstIni.iFilialOP = .iFilialOP
            objRastroEstIni.sLote = .sLote
            
            colRastreamento.Add objRastroEstIni
            
            'leitura do proximo registro referente ao RastreamentoMovto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71834
    
        Loop

    End With

    Call Comando_Fechar(lComando)

    RastroEstIni_Le = SUCESSO
    
    Exit Function
    
Erro_RastroEstIni_Le:

    Select Case gErr
    
        Case 71831
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 71832, 71833, 71834
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTROESTINI", gErr, sProduto, iAlmoxarifado)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151865)
    
    End Select

    Call Comando_Fechar(lComando)

    Exit Function
    
End Function


Function RastroEstIni_Exclui(ByVal sProduto As String, ByVal iAlmoxarifado As Integer) As Long
'Exclui os Rastreamentos referentes ao EstoqueInicial referente ao Produto/Almoxarifado passado como parametro

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iEscaninho As Integer
Dim lNumIntDocLote As Long
Dim iIndice As Integer

On Error GoTo Erro_RastroEstIni_Exclui

    'Abre os comandos
     For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 71892
    Next

    'Lê RastroEstIni
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDocLote, Escaninho FROM RastroEstIni WHERE Produto = ? AND Almoxarifado = ?", 0, lNumIntDocLote, iEscaninho, sProduto, iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 71893

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71894

    Do While lErro = AD_SQL_SUCESSO

        'Exclui RastroEstIni
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM RastroEstIni", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 71895

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71896

    Loop

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RastroEstIni_Exclui = SUCESSO

    Exit Function

Erro_RastroEstIni_Exclui:

    RastroEstIni_Exclui = gErr

    Select Case gErr

        Case 71892
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 71893, 71894, 71896
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTROESTINI", gErr, sProduto, iAlmoxarifado)

        Case 71895
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RASTROESTINI", gErr, sProduto, iAlmoxarifado, iEscaninho, lNumIntDocLote)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151866)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function RastroEstIni_Inserir(ByVal colRastroEstIni As Collection) As Long
'Inclui os Rastreamentos referentes ao EstoqueInicial passados através de colRastroEstIni

Dim lErro As Long
Dim lComando As Long
Dim objRastroEstIni As ClassRastroEstIni

On Error GoTo Erro_RastroEstIni_Inserir

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 71899

    For Each objRastroEstIni In colRastroEstIni

        'Insere novo RastreamentoLote
        lErro = Comando_Executar(lComando, "INSERT INTO RastroEstIni (Produto, Almoxarifado, Escaninho, NumIntDocLote, Quantidade) VALUES (?,?,?,?,?)", objRastroEstIni.sProduto, objRastroEstIni.iAlmoxarifado, objRastroEstIni.iEscaninho, objRastroEstIni.lNumIntDocLote, objRastroEstIni.dQuantidade)
        If lErro <> AD_SQL_SUCESSO Then gError 71900

    Next

    Call Comando_Fechar(lComando)
    
    RastroEstIni_Inserir = SUCESSO

    Exit Function

Erro_RastroEstIni_Inserir:

    RastroEstIni_Inserir = gErr

    Select Case gErr

        Case 71899
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 71900
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RASTROESTINI", gErr, objRastroEstIni.sProduto, objRastroEstIni.iAlmoxarifado, objRastroEstIni.iEscaninho, objRastroEstIni.lNumIntDocLote)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151867)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function RastroLoteSaldo_Atualiza_EstIni(ByVal lComando As Long, ByVal colRastreamento As Collection, ByVal iOperacao As Integer, ByVal colRastreamentoLoteSaldo As Collection) As Long
'coloca os valores do lote dentro de escaninho totalizador apropriado

Dim objRastroEstIni As ClassRastroEstIni
Dim objRastreamentoLoteSaldo As ClassRastreamentoLoteSaldo
Dim objRastreamentoLote As New ClassRastreamentoLote
Dim lErro As Long

On Error GoTo Erro_RastroLoteSaldo_Atualiza_EstIni

    If Not (colRastreamento Is Nothing) Then
    
        For Each objRastroEstIni In colRastreamento
            
            Set objRastreamentoLoteSaldo = New ClassRastreamentoLoteSaldo
            
            objRastreamentoLoteSaldo.iAlmoxarifado = objRastroEstIni.iAlmoxarifado
            objRastreamentoLoteSaldo.sProduto = objRastroEstIni.sProduto
            objRastreamentoLoteSaldo.sLote = objRastroEstIni.sLote
            objRastreamentoLoteSaldo.iFilialOP = objRastroEstIni.iFilialOP
            
            objRastreamentoLote.sProduto = objRastroEstIni.sProduto
            objRastreamentoLote.sCodigo = objRastroEstIni.sLote
            objRastreamentoLote.iFilialOP = objRastroEstIni.iFilialOP
            
            'traz os dados do lote e loca o lote
            lErro = CF("RastreamentoLote_Le1", lComando, objRastreamentoLote)
            If lErro <> SUCESSO And lErro <> 71889 Then gError 71900
            
            'se o lote não estiver cadastrado ==> erro
            If lErro = 71889 Then gError 71903
            
            'Se o Lote está baixado, erro
            If objRastreamentoLote.iStatus = RATREAMENTOLOTE_STATUS_BAIXADO Then gError 71902
            
            objRastreamentoLoteSaldo.lNumIntDocLote = objRastreamentoLote.lNumIntDoc
            objRastroEstIni.lNumIntDocLote = objRastreamentoLote.lNumIntDoc
            
            Select Case objRastroEstIni.iEscaninho
            
                Case ESCANINHO_DISPONIVEL
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantDispNossa = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantDispNossa = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_CONSERTO_NOSSO
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantConserto = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantConserto = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_CONSIG_NOSSO
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantConsig = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantConsig = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_DEMO_NOSSO
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantDemo = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantDemo = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_OUTROS_NOSSO
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantOutras = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantOutras = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_BENEF_NOSSO
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantBenef = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantBenef = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_CONSERTO_3
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantConserto3 = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantConserto3 = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_CONSIG_3
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantConsig3 = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantConsig3 = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_DEMO_3
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantDemo3 = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantDemo3 = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_OUTROS_3
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantOutras3 = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantOutras3 = -objRastroEstIni.dQuantidade
                    End If
                    
                Case ESCANINHO_BENEF_3
                    
                    If iOperacao = RASTRO_ADICAO Then
                        objRastreamentoLoteSaldo.dQuantBenef3 = objRastroEstIni.dQuantidade
                    Else
                        objRastreamentoLoteSaldo.dQuantBenef3 = -objRastroEstIni.dQuantidade
                    End If
            
            
            End Select
            
            colRastreamentoLoteSaldo.Add objRastreamentoLoteSaldo
            
        Next

    End If

    RastroLoteSaldo_Atualiza_EstIni = SUCESSO
    
    Exit Function
    
Erro_RastroLoteSaldo_Atualiza_EstIni:

    RastroLoteSaldo_Atualiza_EstIni = gErr
    
    Select Case gErr
    
        Case 71900
    
        Case 71902
            Call Rotina_Erro(vbOKOnly, "ERRO_LOTE_BAIXADO", gErr, objRastreamentoLote.sCodigo)
    
        Case 71903
            Call Rotina_Erro(vbOKOnly, "ERRO_LOTE_NAO_CADASTRADO_RASTREAMENTO", gErr, objRastreamentoLote.sCodigo, objRastreamentoLote.sProduto, objRastreamentoLote.iFilialOP)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151868)
        
    End Select
        
    Exit Function

End Function

Private Function RastroLoteSaldo_Atualiza_EstIni1(ByVal lComando As Long, ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal colRastreamentoLoteSaldo As Collection) As Long
'coloca os valores do lote dentro de escaninho totalizador apropriado

Dim lErro As Long
Dim objRastreamentoLoteSaldo As ClassRastreamentoLoteSaldo
Dim tRastreamentoLoteSaldo As typeRastreamentoLoteSaldo

On Error GoTo Erro_RastroLoteSaldo_Atualiza_EstIni1

    For Each objRastreamentoLoteSaldo In colRastreamentoLoteSaldo

        'Le a tabela de rastreamentolotesaldo para o produto/almoxarifado/lote em questão
        lErro = Comando_ExecutarPos(lComando, "SELECT QuantDispNossa, QuantRecIndl, QuantIndOutras, QuantDefeituosa, QuantConsig3, QuantConsig, QuantDemo3, QuantDemo, QuantConserto3, QuantConserto, QuantOutras3, QuantOutras, QuantBenef, QuantBenef3, QuantOP FROM RastreamentoLoteSaldo WHERE Produto = ? AND Almoxarifado = ? AND NumIntDocLote=?", 0, tRastreamentoLoteSaldo.dQuantDispNossa, tRastreamentoLoteSaldo.dQuantRecIndl, tRastreamentoLoteSaldo.dQuantIndOutras, tRastreamentoLoteSaldo.dQuantDefeituosa, tRastreamentoLoteSaldo.dQuantConsig3, tRastreamentoLoteSaldo.dQuantConsig, tRastreamentoLoteSaldo.dQuantDemo3, tRastreamentoLoteSaldo.dQuantDemo, tRastreamentoLoteSaldo.dQuantConserto3, tRastreamentoLoteSaldo.dQuantConserto, tRastreamentoLoteSaldo.dQuantOutras3, tRastreamentoLoteSaldo.dQuantOutras, tRastreamentoLoteSaldo.dQuantBenef, tRastreamentoLoteSaldo.dQuantBenef3, tRastreamentoLoteSaldo.dQuantOP, _
                                        objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.lNumIntDocLote)
        If lErro <> AD_SQL_SUCESSO Then gError 71905
    
        'leitura do registro referente ao estoque/almoxarifado em questão
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71906
        
        If lErro = AD_SQL_SUCESSO Then
        
            'lock do estoque/almoxarifado
            lErro = Comando_LockExclusive(lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 71907
            
            If tRastreamentoLoteSaldo.dQuantConserto + objRastreamentoLoteSaldo.dQuantConserto < 0 Then gError 71908
            
            If tRastreamentoLoteSaldo.dQuantConserto3 + objRastreamentoLoteSaldo.dQuantConserto3 < 0 Then gError 71909
            
            If tRastreamentoLoteSaldo.dQuantConsig + objRastreamentoLoteSaldo.dQuantConsig < 0 Then gError 71910
            
            If tRastreamentoLoteSaldo.dQuantConsig3 + objRastreamentoLoteSaldo.dQuantConsig3 < 0 Then gError 71911
            
            If tRastreamentoLoteSaldo.dQuantDemo + objRastreamentoLoteSaldo.dQuantDemo < 0 Then gError 71912
            
            If tRastreamentoLoteSaldo.dQuantDemo3 + objRastreamentoLoteSaldo.dQuantDemo3 < 0 Then gError 71913
            
            If tRastreamentoLoteSaldo.dQuantDispNossa + objRastreamentoLoteSaldo.dQuantDispNossa < 0 Then gError 71914
                
            If tRastreamentoLoteSaldo.dQuantOutras + objRastreamentoLoteSaldo.dQuantOutras < 0 Then gError 71915
            
            If tRastreamentoLoteSaldo.dQuantOutras3 + objRastreamentoLoteSaldo.dQuantOutras3 < 0 Then gError 71916
            
            If tRastreamentoLoteSaldo.dQuantBenef + objRastreamentoLoteSaldo.dQuantBenef < 0 Then gError 71917
            
            If tRastreamentoLoteSaldo.dQuantBenef3 + objRastreamentoLoteSaldo.dQuantBenef3 < 0 Then gError 71918
                
            'Atualiza a tabela de rastreamentosaldolote para o produto/almoxarifado/NumIntDocLote em questão
            lErro = Comando_ExecutarPos(lComando1, "UPDATE RastreamentoLoteSaldo SET QuantDispNossa = QuantDispNossa + ?, QuantRecIndl = QuantRecIndl + ?, QuantIndOutras = QuantIndOutras + ?, QuantDefeituosa = QuantDefeituosa + ?, QuantConsig3 = QuantConsig3 + ?, QuantConsig = QuantConsig + ?, QuantDemo3 = QuantDemo3 + ?, QuantDemo = QuantDemo + ?, QuantConserto3 = QuantConserto3 + ?, QuantConserto = QuantConserto + ?, QuantOutras3 = QuantOutras3 + ?, QuantOutras = QuantOutras + ?, QuantReservada = QuantReservada + ?, QuantReservadaConsig = QuantReservadaConsig + ?, QuantBenef = QuantBenef + ?, QuantBenef3 = QuantBenef3 + ?, QuantOP = QuantOP + ?", lComando, _
            objRastreamentoLoteSaldo.dQuantDispNossa, objRastreamentoLoteSaldo.dQuantRecIndl, objRastreamentoLoteSaldo.dQuantIndOutras, objRastreamentoLoteSaldo.dQuantDefeituosa, objRastreamentoLoteSaldo.dQuantConsig3, objRastreamentoLoteSaldo.dQuantConsig, objRastreamentoLoteSaldo.dQuantDemo3, objRastreamentoLoteSaldo.dQuantDemo, objRastreamentoLoteSaldo.dQuantConserto3, objRastreamentoLoteSaldo.dQuantConserto, objRastreamentoLoteSaldo.dQuantOutras3, objRastreamentoLoteSaldo.dQuantOutras, objRastreamentoLoteSaldo.dQuantReservada, objRastreamentoLoteSaldo.dQuantReservadaConsig, objRastreamentoLoteSaldo.dQuantBenef, objRastreamentoLoteSaldo.dQuantBenef3, objRastreamentoLoteSaldo.dQuantOP)
            If lErro <> AD_SQL_SUCESSO Then gError 71919
        
        Else
        
            lErro = Comando_Executar(lComando2, "INSERT INTO RastreamentoLoteSaldo (Produto, Almoxarifado, NumIntDocLote, QuantDispNossa, QuantRecIndl, QuantIndOutras, QuantDefeituosa, QuantConsig3, QuantConsig, QuantDemo3, QuantDemo, QuantConserto3, QuantConserto, QuantOutras3, QuantOutras, QuantReservada, QuantReservadaConsig, QuantBenef, QuantBenef3, QuantOP) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.lNumIntDocLote, objRastreamentoLoteSaldo.dQuantDispNossa, objRastreamentoLoteSaldo.dQuantRecIndl, objRastreamentoLoteSaldo.dQuantIndOutras, objRastreamentoLoteSaldo.dQuantDefeituosa, objRastreamentoLoteSaldo.dQuantConsig3, objRastreamentoLoteSaldo.dQuantConsig, objRastreamentoLoteSaldo.dQuantDemo3, objRastreamentoLoteSaldo.dQuantDemo, objRastreamentoLoteSaldo.dQuantConserto3, objRastreamentoLoteSaldo.dQuantConserto, objRastreamentoLoteSaldo.dQuantOutras3, objRastreamentoLoteSaldo.dQuantOutras, objRastreamentoLoteSaldo.dQuantReservada, objRastreamentoLoteSaldo.dQuantReservadaConsig, objRastreamentoLoteSaldo.dQuantBenef, objRastreamentoLoteSaldo.dQuantBenef3, objRastreamentoLoteSaldo.dQuantOP)
            If lErro <> AD_SQL_SUCESSO Then gError 71920
    
        End If

    Next

    RastroLoteSaldo_Atualiza_EstIni1 = SUCESSO

    Exit Function

Erro_RastroLoteSaldo_Atualiza_EstIni1:

    RastroLoteSaldo_Atualiza_EstIni1 = gErr

    Select Case gErr

        Case 71702, 71703
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTE2", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.sLote, objRastreamentoLoteSaldo.iFilialOP)

        Case 71704
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RASTREAMENTOLOTE", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.sLote, objRastreamentoLoteSaldo.iFilialOP)

        Case 71705
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOTE_RASTREAMENTOLOTE_NAO_ABERTO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.sLote, objRastreamentoLoteSaldo.iFilialOP)

        Case 71706
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RASTREAMENTOLOTE_MOV_NAO_PRODUCAO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.sLote, objRastreamentoLoteSaldo.iFilialOP)

        Case 71707
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RASTREAMENTOLOTE", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.sLote, objRastreamentoLoteSaldo.iFilialOP)

        Case 71905, 71906
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTESALDO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote)

        Case 71907
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RASTREAMENTOLOTESALDO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote)

        Case 71908
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSERTO_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantConserto)
            
        Case 71909
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSERTO3_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantConserto3)
            
        Case 71910
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSIG_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantConsig)
            
        Case 71911
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_CONSIG3_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantConsig3)
            
        Case 71912
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DEMO_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantDemo)
            
        Case 71913
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DEMO3_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantDemo3)
            
        Case 71914
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_DISPONIVEL_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantDispNossa)
            
        Case 71915
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_OUTRAS_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantOutras)
            
        Case 71916
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_OUTRAS3_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantOutras3)
            
        Case 71917
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_BENEF_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantBenef)
            
        Case 71918
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SALDO_MAT_BENEF3_RASTRO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote, tRastreamentoLoteSaldo.dQuantBenef3)
        
        Case 71919
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RASTREAMENTOLOTESALDO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote)
        
        Case 71920
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RASTREAMENTOLOTESALDO", gErr, objRastreamentoLoteSaldo.sProduto, objRastreamentoLoteSaldo.iAlmoxarifado, objRastreamentoLoteSaldo.sLote)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151869)

    End Select

    Exit Function

End Function

Function Produto_Altera_Loja(ByVal objProduto As ClassProduto) As Long

Dim lErro As Long
Dim sICMSAliquota As String
Dim iIndice As Integer
Dim alComando(0 To 1) As Long

On Error GoTo Erro_Produto_Altera_Loja

    'Abre os comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 81217
    Next
    
    'Inicializa a variável
    sICMSAliquota = String(STRING_PRODUTOFILIAL_ICMS, 0)
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT ICMSAliquota FROM ProdutosFilial WHERE Produto= ? AND FilialEmpresa = ?", 0, sICMSAliquota, objProduto.sCodigo, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 81218

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 81219

    If lErro = AD_SQL_SEM_DADOS Then gError 81220
    
    '"Lock" no Estoque Produto
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 81221
    
    'Atualiza dados
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ProdutosFilial  SET ICMSAliquota = ?, SituacaoTribECF = ?", alComando(0), objProduto.sICMSAliquota, objProduto.sSituacaoTribECF)
    If lErro <> AD_SQL_SUCESSO Then gError 81122
    
    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Produto_Altera_Loja = SUCESSO

    Exit Function

Erro_Produto_Altera_Loja:

    Produto_Altera_Loja = gErr

    Select Case gErr

        Case 81217
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 81218, 81219
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", gErr)
            
        Case 81220
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOSFILIAL_INEXISTENTE", gErr, objProduto.sCodigo, giFilialEmpresa)
            
        Case 81221
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOSFILIAL", gErr)

        Case 81222
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", gErr, giFilialEmpresa, objProduto.sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151870)

    End Select

    'Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function EstoqueProduto_Atualiza_QuantOP(ByVal sProduto As String, ByVal iAlmoxarifado As Integer, ByVal dQuantOP As Double) As Long
'Atualiza a Quantidade em OP em Estoque Produto
'OBS: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim dQuantOP1 As Double
Dim sComando_SQL As String


On Error GoTo Erro_EstoqueProduto_Atualiza_QuantOP

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 83489
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 83490
    
    sComando_SQL = "SELECT QuantOP FROM EstoqueProduto WHERE Produto = ? AND Almoxarifado = ? "
    
    lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, dQuantOP1, sProduto, iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 83491
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83492
    
    If lErro = AD_SQL_SUCESSO Then
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 83493
    
        sComando_SQL = "UPDATE EstoqueProduto SET QuantOP = QuantOP + ?, DataUltAtualizacao = ?, Exportado = ? "
        
        lErro = Comando_ExecutarPos(lComando1, sComando_SQL, lComando, dQuantOP, Date, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 83494
        
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    EstoqueProduto_Atualiza_QuantOP = SUCESSO
    
    Exit Function
    
Erro_EstoqueProduto_Atualiza_QuantOP:

    EstoqueProduto_Atualiza_QuantOP = gErr
    
    Select Case gErr
        
        Case 83489, 83490
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 83491, 83492
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO", gErr, sProduto, iAlmoxarifado)
        
        Case 83493
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEPRODUTO", gErr)
        
        Case 83494
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEPRODUTO", gErr, sProduto, iAlmoxarifado)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151871)

    End Select
        
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
            
    Exit Function
    
End Function

Function MATConfig_Grava(ByVal objMATConfig As ClassMATConfig) As Long
'Insere ou Atualiza registro em MATConfig.

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer

On Error GoTo Erro_MATConfig_Grava
    
    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 89110

    lErro = CF("MATConfig_Grava_Trans", objMATConfig)
    If lErro <> SUCESSO Then gError 89111
    
    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 89112
    
    MATConfig_Grava = SUCESSO
    
    Exit Function

Erro_MATConfig_Grava:

    MATConfig_Grava = gErr
    
    Select Case gErr
    
        Case 89110
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89111

        Case 89112
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151872)
        
    End Select
    
    Exit Function

End Function

Function Rotina_FechamentoAno_Reproc(ByVal iAno As Integer, ByVal iFilialEmpresa As Integer, Optional ByVal sProduto As String = "") As Long
'Rotina que transfere os saldos de um ano para outro para fins de reprocessamento.
'iAno é o ano que está terminando.

Dim lErro As Long
Dim objSldMesEst As New ClassSldMesEst

On Error GoTo Erro_Rotina_FechamentoAno_Reproc

    'preenche o objeto
    objSldMesEst.iAno = iAno
    objSldMesEst.iFilialEmpresa = iFilialEmpresa
    objSldMesEst.sProduto = sProduto
    
    'atualiza valor inicial, quantidade da tabela SldMesEst
    lErro = SldMesEst_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83736
                            
    'atualiza valores e quantidades iniciais da tabela SldMesEst1
    lErro = SldMesEst1_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83737
                            
    'atualiza valores e quantidades iniciais da tabela SldMesEst2
    lErro = SldMesEst2_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83738

    'atualiza valores e quantidades iniciais da tabela SldMesEst1
    lErro = SldMesEst1Terc_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83737
                            
    'atualiza valores e quantidades iniciais da tabela SldMesEst2
    lErro = SldMesEst2Terc_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83738
                            
    'atualiza valor inicial, quantidade da tabela SldMesEstAlm
    lErro = SldMesEstAlm_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83739
                            
    'atualiza valor inicial, quantidade da tabela SldMesEstAlm1
    lErro = SldMesEstAlm1_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83740
                            
    'atualiza valor inicial, quantidade da tabela SldMesEstAlm2
    lErro = SldMesEstAlm2_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83741
                            
    Rotina_FechamentoAno_Reproc = SUCESSO

    Exit Function

Erro_Rotina_FechamentoAno_Reproc:

    Rotina_FechamentoAno_Reproc = gErr

    Select Case gErr

        Case 83736, 83737, 83738, 83739, 83740, 83741

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151873)

    End Select

    Exit Function

End Function

Function RastreamentoLote_Grava(ByVal objRastroLote As ClassRastreamentoLote) As Long
'Grava o RastreamentoLote

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim iStatus As Integer
Dim lNumIntDoc As Long
Dim sLocAux As String

On Error GoTo Erro_RastreamentoLote_Grava

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 75755

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 75756
    Next
    
    If Len(Trim(objRastroLote.sLocalizacao)) <> 0 Then
    
        sLocAux = String(STRING_RASTRO_LOCALIZACAO, 0)
    
        'Verifica se o RastreamentoLoteLoc já está cadastrado
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Localizacao FROM RastreamentoLoteLoc WHERE Localizacao = ?", 0, sLocAux, objRastroLote.sLocalizacao)
        If lErro <> AD_SQL_SUCESSO Then gError 198725
    
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198726
        
        'Não achou a Localização
        If lErro <> AD_SQL_SUCESSO Then gError 198727
           
        'Faz "lock" no RastreamentoLoteLoc
        lErro = Comando_LockShared(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then gError 198728
        
    End If

    'Verifica se o RastreamentoLote já está cadastrado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc, Status FROM RastreamentoLote WHERE Produto = ? AND Lote = ? AND FilialOP = ?", 0, lNumIntDoc, iStatus, objRastroLote.sProduto, objRastroLote.sCodigo, objRastroLote.iFilialOP)
    If lErro <> AD_SQL_SUCESSO Then gError 75758

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75759

    'Se o Lote está baixado, erro
    If iStatus = RATREAMENTOLOTE_STATUS_BAIXADO Then gError 75760

    'Se encontrou o RastreamentoLote, ALTERAÇÃO
    If lErro = AD_SQL_SUCESSO Then

        'Faz "lock" no RastreamentoLote
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 75761

        objRastroLote.lNumIntDoc = lNumIntDoc
        
        'Altera dados do RastreamentoLote
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE RastreamentoLote Set DataValidade = ?, DataEntrada = ?, DataFabricacao = ?, Observacao = ?, Localizacao = ?, Cliente = ?, FilialCli = ?", alComando(0), objRastroLote.dtDataValidade, objRastroLote.dtDataEntrada, objRastroLote.dtDataFabricacao, objRastroLote.sObservacao, objRastroLote.sLocalizacao, objRastroLote.lCliente, objRastroLote.iFilialCli)
        If lErro <> AD_SQL_SUCESSO Then gError 75762

        lErro = RastreamentoLote_ExcluiTestes(objRastroLote)
        If lErro <> AD_SQL_SUCESSO Then gError 130305
    
        lErro = RastreamentoLote_GravaTestes(objRastroLote)
        If lErro <> AD_SQL_SUCESSO Then gError 130306

    'Se não encontrou, INSERÇÃO
    Else

        'Obtem próximo NumIntDoc disponível
        lErro = CF("RastreamentoLote_Automatico", lNumIntDoc)
        If lErro <> SUCESSO Then gError 75764

        objRastroLote.lNumIntDoc = lNumIntDoc
        
        'Insere novo RastreamentoLote
        lErro = Comando_Executar(alComando(2), "INSERT INTO RastreamentoLote (NumIntDoc, Produto, Lote, FilialOP, Status, DataValidade, DataEntrada, DataFabricacao, Observacao, Localizacao, Cliente, FilialCli) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumIntDoc, objRastroLote.sProduto, objRastroLote.sCodigo, objRastroLote.iFilialOP, RATREAMENTOLOTE_STATUS_ABERTO, objRastroLote.dtDataValidade, objRastroLote.dtDataEntrada, objRastroLote.dtDataFabricacao, objRastroLote.sObservacao, objRastroLote.sLocalizacao, objRastroLote.lCliente, objRastroLote.iFilialCli)
        If lErro <> AD_SQL_SUCESSO Then gError 75765

        lErro = RastreamentoLote_GravaTestes(objRastroLote)
        If lErro <> AD_SQL_SUCESSO Then gError 130307

    End If
    
    lErro = CF("RastreamentoLote_Grava_Customizado", objRastroLote)
    If lErro <> SUCESSO Then gError 185921

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 75757

    'Fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RastreamentoLote_Grava = SUCESSO

    Exit Function

Erro_RastreamentoLote_Grava:

    RastreamentoLote_Grava = gErr

    Select Case gErr
        
        Case 75755
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 75756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 75757
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 75758, 75759
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTE", gErr)

        Case 75760
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOTE_BAIXADO", gErr, objRastroLote.sCodigo)

        Case 75761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RASTREAMENTOLOTE", gErr, objRastroLote.sCodigo)

        Case 75762
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RASTREAMENTOLOTE", gErr, objRastroLote.sCodigo)

        Case 75764, 130305, 130306, 130307, 185921

        Case 75765
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RASTREAMENTOLOTE", gErr, objRastroLote.sCodigo)
            
        Case 1987125, 198726
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTELOC", gErr)

        Case 198727
            Call Rotina_Erro(vbOKOnly, "ERRO_RASTREAMENTOLOTELOC_NAO_CADASTRADO", gErr, objRastroLote.sLocalizacao)

        Case 198728
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RASTREAMENTOLOTELOC", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151874)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function RastreamentoLote_Automatico(lNumIntDoc As Long) As Long
'Devolve o proximo número interno de RastreamentoLote disponível

Dim lErro As Long

On Error GoTo Erro_RastreamentoLote_Automatico

    'Obtem o próximo número interno de RastreamentoLote disponivel
    lErro = CF("Config_ObterNumInt", "MatConfig", "NUM_PROX_RASTREAMENTOLOTE", lNumIntDoc)
    If lErro <> SUCESSO Then gError 75763

    RastreamentoLote_Automatico = SUCESSO

    Exit Function

Erro_RastreamentoLote_Automatico:

    RastreamentoLote_Automatico = gErr

    Select Case gErr

        Case 75763
            'Erro tratado na rotina chamada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151875)

    End Select

    Exit Function

End Function

Function RastreamentoLote_Exclui(ByVal objRastroLote As ClassRastreamentoLote) As Long
'Exclui RastreamentoLote

Dim lErro As Long
Dim alComando(0 To 4) As Long
Dim iIndice As Integer
Dim iStatus As Integer
Dim lNumIntDoc As Long
Dim iAlmoxarifado As Integer
Dim iTipoDocOrigem As Integer
Dim lTransacao As Long
Dim adQtdeRLS(1 To 19) As Double

On Error GoTo Erro_RastreamentoLote_Exclui

    'Abre os comandos
     For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 75773
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 75774

    'Lê RastreamentoLote passado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc, Status FROM RastreamentoLote WHERE Produto = ? AND Lote = ? AND FilialOP = ?", 0, lNumIntDoc, iStatus, objRastroLote.sProduto, objRastroLote.sCodigo, objRastroLote.iFilialOP)
    If lErro <> AD_SQL_SUCESSO Then gError 75776

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75777

    'Se não encontrou o produto, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 75778

    'Se o RastreamentoLote já foi baixado, erro
    If iStatus = RATREAMENTOLOTE_STATUS_BAIXADO Then gError 75779

    'Verifica se RastreamentoLote possui vínculos com RastreamentoLoteSaldo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Almoxarifado, QuantDispNossa,QuantReservada,QuantReservadaConsig,QuantEmpenhada,QuantPedida,QuantRecIndl,QuantIndOutras,QuantDefeituosa,QuantConsig3,QuantConsig,QuantDemo3,QuantDemo,QuantConserto3,QuantConserto,QuantOutras3,QuantOutras,QuantOP,QuantBenef,QuantBenef3 FROM RastreamentoLoteSaldo WHERE NumIntDocLote = ?", 0, iAlmoxarifado, adQtdeRLS(1), adQtdeRLS(2), adQtdeRLS(3), adQtdeRLS(4), adQtdeRLS(5), adQtdeRLS(6), adQtdeRLS(7), adQtdeRLS(8), adQtdeRLS(9), adQtdeRLS(10), adQtdeRLS(11), adQtdeRLS(12), adQtdeRLS(13), adQtdeRLS(14), adQtdeRLS(15), adQtdeRLS(16), adQtdeRLS(17), adQtdeRLS(18), adQtdeRLS(19), lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 75780

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75781

    'Se encontrou vínculo
    'If lErro = AD_SQL_SUCESSO Then
    Do While lErro = AD_SQL_SUCESSO
        'gError 75782
        
        'Só dá erro se tiver saldo
        For iIndice = 1 To 19
            If Abs(adQtdeRLS(iIndice)) > QTDE_ESTOQUE_DELTA Then gError 75782
        Next
        
        'Se não tiver saldo exclui
        lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM RastreamentoLoteSaldo ", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 75780
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75781
       
    Loop
    'End If

    'Verifica se RastreamentoLote possui vínculos com RastreamentoMovto
    lErro = Comando_Executar(alComando(2), "SELECT TipoDocOrigem FROM RastreamentoMovto WHERE NumIntDocLote = ?", iTipoDocOrigem, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 75783

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75784

    'Se encontrou vínculo, erro
    If lErro = AD_SQL_SUCESSO Then gError 75785

    'Faz "lock" no Lote
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 75786

    'Exclui RastreamentoLote
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM RastreamentoLote", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 75787

    lErro = RastreamentoLote_ExcluiTestes(objRastroLote)
    If lErro <> AD_SQL_SUCESSO Then gError 130304
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 75775

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RastreamentoLote_Exclui = SUCESSO

    Exit Function

Erro_RastreamentoLote_Exclui:

    RastreamentoLote_Exclui = gErr

    Select Case gErr

        Case 130304
        
        Case 75773
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 75774
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 75775
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 75776, 75777
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTE", gErr)

        Case 75778
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RASTREAMENTOLOTE_NAO_CADASTRADO", gErr, objRastroLote.sProduto, objRastroLote.sCodigo)

        Case 75779
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOTE_BAIXADO", gErr, objRastroLote.sCodigo)

        Case 75780, 75781
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTESALDO", gErr)

        Case 75782
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOTE_VINCULADO_RASTREAMENTOLOTESALDO", gErr, objRastroLote.sProduto, objRastroLote.sCodigo)

        Case 75783, 75784
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTEMOVTO", gErr)

        Case 75785
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOTE_VINCULADO_RASTREAMENTOLOTEMOVTO", gErr, objRastroLote.sProduto, objRastroLote.sCodigo)

        Case 75786
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RASTREAMENTOLOTE", gErr, objRastroLote.sCodigo)

        Case 75787
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RASTREAMENTOLOTE", gErr, objRastroLote.sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151876)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


'William 14/03/01
Public Function ItensReq_Le_ProdAlmCritica(ByVal objEstoqueProduto As ClassEstoqueProduto) As Long
'Faz leitura nas Tabelas / Views onde é possivel haver relacionamentos
'de Estoque x Produto

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim iReqCompra As Integer
Dim iReqModelo As Integer

On Error GoTo Erro_ItensReq_Le_ProdAlmCritica

    'Abre Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 87338
    Next
    
    'Faz leitura na View ItensReqCompraTodos a fim de identificar presenca de Produto x Almoxarifado de acordo com a Condição passada
    lErro = Comando_Executar(alComando(1), "SELECT ReqCompra FROM ItensReqCompraTodos WHERE Produto = ? AND Almoxarifado = ?", iReqCompra, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 87339
    
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 87440
    
    'Caso exista Produto x Almoxarifado ===> Erro
    If lErro = AD_SQL_SUCESSO Then gError 87441
    
    'Faz leitura na tabela ItensReqModelo a fim de identificar presenca de Produto x Almoxarifado de acordo com a Condição passada
    lErro = Comando_Executar(alComando(2), "SELECT ReqModelo FROM ItensReqModelo WHERE Produto = ? AND Almoxarifado = ?", iReqModelo, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then gError 87442
    
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 87443
    
    'Caso exista Produto x Almoxarifado ===> Erro
    If lErro = AD_SQL_SUCESSO Then gError 87444

    'Fecha Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

ItensReq_Le_ProdAlmCritica = SUCESSO

    Exit Function
    
Erro_ItensReq_Le_ProdAlmCritica:

    ItensReq_Le_ProdAlmCritica = gErr
    
    Select Case gErr
    
        Case 87338
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr, Error)
    
        Case 87339, 87440
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQCOMPRA", gErr, Error)
            
        Case 87441
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RELACIONAMENTO_ITENSREQCOMPRAS", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
    
        Case 87442, 87443
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQMODELO1", gErr, Error)
            
        Case 87444
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RELACIONAMENTO_ITENSREQMODELO", gErr, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151877)
            
    End Select
    
    'Fecha Comando saida por erro
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function MATConfig_Grava_Trans(ByVal objMATConfig As ClassMATConfig) As Long
'Insere ou Atualiza registro em MATConfig.
'IMPORTANTE: Precisa ser chamado em transação

Dim sConteudo As String
Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_MATConfig_Grava_Trans

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 83548
    Next

    sConteudo = String(STRING_CONFIG_CONTEUDO, 0)

    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM MATConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, sConteudo, objMATConfig.sCodigo, objMATConfig.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 83549
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83550
    
    If lErro = AD_SQL_SUCESSO Then
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE MATConfig SET Conteudo = ?", alComando(1), objMATConfig.sConteudo)
        If lErro <> AD_SQL_SUCESSO Then gError 83551
    
    Else
    
        lErro = Comando_Executar(alComando(2), "INSERT INTO MATConfig (Codigo, FilialEmpresa, Descricao, Tipo, Conteudo) VALUES (?,?,?,?,?)", objMATConfig.sCodigo, objMATConfig.iFilialEmpresa, objMATConfig.sDescricao, objMATConfig.iTipo, objMATConfig.sConteudo)
        If lErro <> AD_SQL_SUCESSO Then gError 83552
        
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    MATConfig_Grava_Trans = SUCESSO
    
    Exit Function

Erro_MATConfig_Grava_Trans:

    MATConfig_Grava_Trans = gErr
    
    Select Case gErr
    
        Case 83548
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 83549, 83550
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MATCONFIG1", gErr, objMATConfig.sCodigo, objMATConfig.iFilialEmpresa)
        
        Case 83551
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MATCONFIG1", gErr, objMATConfig.sCodigo, objMATConfig.iFilialEmpresa)
        
        Case 83552
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MATCONFIG", gErr, objMATConfig.sCodigo, objMATConfig.iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151878)
        
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Rotina_FechamentoMes_Reproc(ByVal iFilialEmpresa As Integer, ByVal iAno As Integer, ByVal iMes As Integer) As Long
'Rotina que fecha o mes passado como parametro para a rotina de reprocessamento

Dim lErro As Long
Dim objSldMesEst As New ClassSldMesEst

On Error GoTo Erro_Rotina_FechamentoMes_Reproc

    'preenche o objeto
    objSldMesEst.iAno = iAno
    objSldMesEst.iFilialEmpresa = iFilialEmpresa
    
    'Atualiza CustoMedio, CustoStandard
    lErro = SldMesEst_Atualiza_Mes_Reproc(iMes, objSldMesEst)
    If lErro <> SUCESSO Then gError 89207
            
    'Atualiza os Custo Medios de Produtos de Terceiros
    lErro = SldMesEst1_Atualiza_Mes_Reproc(iMes, objSldMesEst)
    If lErro <> SUCESSO Then gError 89208
                        
    'Atualiza os Custo Medios de Produtos Nossos em Poder de Terceiros
    lErro = SldMesEst2_Atualiza_Mes_Reproc(iMes, objSldMesEst)
    If lErro <> SUCESSO Then gError 89209
    
    'Atualiza os Custo Medios de Produtos de Terceiros
    lErro = SldMesEst1Terc_Atualiza_Mes_Reproc(iMes, objSldMesEst)
    If lErro <> SUCESSO Then gError 89208
                        
    'Atualiza os Custo Medios de Produtos Nossos em Poder de Terceiros
    lErro = SldMesEst2Terc_Atualiza_Mes_Reproc(iMes, objSldMesEst)
    If lErro <> SUCESSO Then gError 89209

    Rotina_FechamentoMes_Reproc = SUCESSO

    Exit Function

Erro_Rotina_FechamentoMes_Reproc:

    Rotina_FechamentoMes_Reproc = gErr

    Select Case gErr

        Case 89207, 89208, 89209

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151879)

    End Select

    Exit Function

End Function

Function MovimentoEstoque_Excluir(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objItemMovEst As ClassItemMovEstoque) As Long
'exclui o movimento apontado por lComando2
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long

On Error GoTo Erro_MovimentoEstoque_Excluir

    lErro = Comando_ExecutarPos(lComando1, "DELETE FROM MovimentoEstoque", lComando2)
    If lErro <> AD_SQL_SUCESSO Then gError 20434
    
    lErro = CF("Movimento_Verifica_Bloqueio_Data", objItemMovEst.dtData, 1, gobjMAT.iMovEstVerificaBloqData, gobjMAT.dtMovEstBloqDataLimite)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    MovimentoEstoque_Excluir = SUCESSO
    
    Exit Function

Erro_MovimentoEstoque_Excluir:

    MovimentoEstoque_Excluir = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 20434
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOESTOQUE", Err, objItemMovEst.iFilialEmpresa, objItemMovEst.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151880)

    End Select

    Exit Function

End Function

Public Function MovEstoque_Exclui(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'trata a exclusão do movimento de estoque

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MovEstoque_Exclui

    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 89891

    'Lê os ítens do Movimento de Estoque
    lErro = CF("MovEstoque_Exclui0", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105183

    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 89892

    MovEstoque_Exclui = SUCESSO
    
    Exit Function

Erro_MovEstoque_Exclui:

    MovEstoque_Exclui = gErr
    
    Select Case gErr

        Case 89891
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 89892
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 105183
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151881)
    
    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function MovimentoEstoque_Trata_Exclusao_Trans(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'trata a exclusão do movimento de estoque
'IMPORTANTE: TEM QUE SER CHAMADO EM TRANSACAO

Dim objItemMovEst As New ClassItemMovEstoque
Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MovimentoEstoque_Trata_Exclusao_Trans

    'Lê os movimento dos itens de nota fiscal
    lErro = CF("MovEstoqueItens_Le_Desc1", objMovEstoque)
    If lErro <> SUCESSO And lErro <> 89050 Then gError 89877

    If lErro = 89050 Then gError 89876

    'traz o primeiro movimento de estoque que foi cadastrado associado ao codigo em questão. Este movimento está associado a contabilidade.
    Set objItemMovEst = objMovEstoque.colItens(objMovEstoque.colItens.Count)

    'Redefine os movimento para fazer o cancelamento
    objMovEstoque.iOperacao = EXCLUSAO_MOVIMENTO
    
    If Not (objContabil Is Nothing) Then

        'exclui os dados contábeis pendentes ou atualizados (se houverem) relativos a lNumIntDocOrigem
        lErro = objContabil.Contabil_Exclui(objItemMovEst.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
        If lErro <> SUCESSO Then gError 89879
        
    End If
    
    'Grava o movimento de estoque
    lErro = CF("MovEstoque_Grava", objMovEstoque)
    If lErro <> SUCESSO Then gError 89878
    
    MovimentoEstoque_Trata_Exclusao_Trans = SUCESSO
    
    Exit Function

Erro_MovimentoEstoque_Trata_Exclusao_Trans:

    MovimentoEstoque_Trata_Exclusao_Trans = gErr
    
    Select Case gErr

        Case 89876
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO2", gErr, objMovEstoque.iFilialEmpresa, objMovEstoque.lCodigo)

        Case 89877, 89878, 89879

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151882)
    
    End Select

    Exit Function

End Function

Public Function MovEstoque_Producao_Exclui(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MovEstoque_Producao_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = SUCESSO Then gError 89896

    'Testa a producao do movimento de estoque
    lErro = CF("MovEstoque_Producao_Exclui0", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105159
        
    'Confirmacao da transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 89900

    MovEstoque_Producao_Exclui = SUCESSO

    Exit Function

Erro_MovEstoque_Producao_Exclui:

    MovEstoque_Producao_Exclui = gErr

    Select Case gErr

        Case 89896
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89900
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 105159

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151883)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function MovEstoque_ReqProducao_Exclui(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a Requisição de producao

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MovEstoque_ReqProducao_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = SUCESSO Then gError 89907

    'Testa a producao do movimento de estoque
    lErro = CF("MovEstoque_ReqProducao_Exclui0", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105148
        
    'Confirmacao da transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 89911

    MovEstoque_ReqProducao_Exclui = SUCESSO

    Exit Function

Erro_MovEstoque_ReqProducao_Exclui:

    MovEstoque_ReqProducao_Exclui = gErr

    Select Case gErr

        Case 89907
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89911
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 105148

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151884)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function MovimentoEstoque_Trata_Exclusao(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MovimentoEstoque_Trata_Exclusao

    lTransacao = Transacao_Abrir()
    If lTransacao = SUCESSO Then gError 89918

    'trata a exclusão do movimento de estoque
    lErro = CF("MovimentoEstoque_Trata_Exclusao1", objMovEstoque, objContabil)
    If lErro <> AD_SQL_SUCESSO Then gError 89919

    'Confirmacao da transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 89920

    MovimentoEstoque_Trata_Exclusao = SUCESSO

    Exit Function

Erro_MovimentoEstoque_Trata_Exclusao:

    MovimentoEstoque_Trata_Exclusao = gErr

    Select Case gErr

        Case 89918
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89919

        Case 89920
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151885)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Inventario_Exclui(ByVal objInventario As ClassInventario, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Inventario_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = SUCESSO Then gError 89932

    lErro = CF("Inventario_Exclui0", objInventario, objContabil)
    If lErro <> SUCESSO Then gError 105201

    'Confirmacao da transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 89940

    Inventario_Exclui = SUCESSO

    Exit Function

Erro_Inventario_Exclui:

    Inventario_Exclui = gErr

    Select Case gErr

        Case 89932
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89940
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 105201

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151886)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function


'Function FilialFornFilEmp_Cancela_NF(objNFiscal As ClassNFiscal, objFilFornFilEmp As ClassFilFornFilEmp) As Long
''Atualiza a Estatistica de Compras
''Tem que ser chamado dentro de Transacao
'
'Dim lErro As Long
'Dim dtDataEmissao As Date
'Dim lComando As Long
'Dim lComando1 As Long
'Dim lComando2 As Long
'Dim objFilFornFilEmp1 As New ClassFilFornFilEmp
'
'On Error GoTo Erro_FilialFornFilEmp_Cancela_NF
'
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 64153
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 64154
'
'    lComando2 = Comando_Abrir()
'    If lComando2 = 0 Then Error 64155
'
'    objFilFornFilEmp.iFilialEmpresa = objNFiscal.iFilialEmpresa
'    objFilFornFilEmp.lCodFornecedor = objNFiscal.lFornecedor
'    objFilFornFilEmp.iCodFilial = objNFiscal.iFilialForn
'
'    objFilFornFilEmp1.iFilialEmpresa = objNFiscal.iFilialEmpresa
'    objFilFornFilEmp1.lCodFornecedor = objNFiscal.lFornecedor
'    objFilFornFilEmp1.iCodFilial = objNFiscal.iFilialForn
'
'    lErro = CF("FilFornFilEmp_Le_Lock",lComando, objFilFornFilEmp1)
'    If lErro <> SUCESSO Then Error 64156
'
'    objFilFornFilEmp.lAtrasoAcumulado = objFilFornFilEmp.lAtrasoAcumulado + objFilFornFilEmp1.lAtrasoAcumulado
'    objFilFornFilEmp.lItensPedidosRecebidos = objFilFornFilEmp.lItensPedidosRecebidos + objFilFornFilEmp1.lItensPedidosRecebidos
'    objFilFornFilEmp.lPedidosEmAberto = objFilFornFilEmp.lPedidosEmAberto + objFilFornFilEmp1.lPedidosEmAberto
'    objFilFornFilEmp.lPedidosRecebidos = objFilFornFilEmp.lPedidosRecebidos + objFilFornFilEmp1.lPedidosRecebidos
'    objFilFornFilEmp.dValorAcumuladoCompras = objFilFornFilEmp.dValorAcumuladoCompras + objFilFornFilEmp1.dValorAcumuladoCompras
'    objFilFornFilEmp.lNumeroCompras = objFilFornFilEmp.lNumeroCompras + objFilFornFilEmp1.lNumeroCompras
'    objFilFornFilEmp.lNumTotalDevolucoes = objFilFornFilEmp.lNumTotalDevolucoes + objFilFornFilEmp1.lNumTotalDevolucoes
'    objFilFornFilEmp.dValorAcumuladoDevolucoes = objFilFornFilEmp.dValorAcumuladoDevolucoes + objFilFornFilEmp1.dValorAcumuladoDevolucoes
'
'    'Atualiza a tabela de FilialFornFilEmp
'    lErro = Comando_ExecutarPos(lComando1, "UPDATE FilialFornFilEmp SET NumeroCompras =?,ValorAcumuladoCompras=?, PedidosEmAberto=?, AtrasoAcumulado=?, PedidosRecebidos=?, ItensPedidosRecebidos=?, NumTotalDevolucoes=?, ValorAcumuladoDevolucoes=?", lComando, objFilFornFilEmp.lNumeroCompras, objFilFornFilEmp.dValorAcumuladoCompras, objFilFornFilEmp.lPedidosEmAberto, objFilFornFilEmp.lAtrasoAcumulado, objFilFornFilEmp.lPedidosRecebidos, objFilFornFilEmp.lItensPedidosRecebidos, objFilFornFilEmp.lNumTotalDevolucoes, objFilFornFilEmp.dValorAcumuladoDevolucoes)
'    If lErro <> AD_SQL_SUCESSO Then Error 64161
'
'    'Fecha o comando
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'    Call Comando_Fechar(lComando2)
'
'    FilialFornFilEmp_Cancela_NF = SUCESSO
'
'    Exit Function
'
'Erro_FilialFornFilEmp_Cancela_NF:
'
'    FilialFornFilEmp_Cancela_NF = Err
'
'    Select Case Err
'
'        Case 64153, 64154, 64155
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 64156
'
'        Case 64157, 64158, 64159, 64160
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
'
'        Case 64161
'             lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FILIALFORNFILEMP", Err)
'
'        Case 64162
'             lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIALFORNFILEMP", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151887)
'
'    End Select
'
'    'Fecha o comando
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'    Call Comando_Fechar(lComando2)
'
'    Exit Function
'
'End Function

Function ReservasOPPV_Grava(ByVal colReservaProd As Collection) As Long
'grava/atualiza a reserva se a produção estiver associada a um pedido de venda

Dim lErro As Long
Dim alComando(1 To 6) As Long
Dim objReserva As New ClassReserva
Dim lNumIntDoc As Long
Dim lCodigo As Long
Dim dFator As Double
Dim dQuantDisp As Double
Dim sUM As String
Dim lNumIntDocItemPV As Long
Dim dQuantReservada1 As Double
Dim dQuantFalta As Double
Dim objItemMovEst1 As New ClassItemMovEstoque
Dim lCodigo1 As Long
Dim objMovEstoque As ClassMovEstoque
Dim iIndice As Integer
Dim objItemOP As ClassItemOP
Dim objItemMovEst As ClassItemMovEstoque
Dim objProduto As ClassProduto
Dim objReservaProd As ClassReservaProd
Dim dQuantidade As Double
Dim dQuantCancelada As Double
Dim dQuantReservada As Double
Dim dQuantFaturada As Double
Dim objItemOPItemPV As New ClassItemOPItemPV
Dim objPV As ClassPedidoDeVenda

On Error GoTo Erro_ReservasOPPV_Grava

    For Each objReservaProd In colReservaProd

        Set objItemOP = objReservaProd.objItemOP
        Set objItemMovEst = objReservaProd.objItemMovEst
        Set objProduto = objReservaProd.objProduto
        Set objPV = New ClassPedidoDeVenda
        
        objPV.lCodigo = objItemOP.lCodPedido
        objPV.iFilialEmpresa = objItemOP.iFilialPedido

        '#######################################
        'Alterado por Wagner 12/05/2006
        'se a op associdada ao movimento de estoque estiver associada a um pedido de venda ==> tenta fazer/desfazer reserva do produto
        'e o produto controla reserva
        If objItemOP.lCodPedido <> 0 And objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
        '#######################################
    
            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_Abrir()
                If alComando(iIndice) = 0 Then gError 92140
            Next
    
            'Converte as unidades de medida
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemMovEst.sSiglaUM, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 92141
        
            'Quantidade produzida convertida para a UM de Estoque
            dQuantReservada1 = objItemMovEst.dQuantidade * dFator
        
            sUM = String(STRING_UM_SIGLA, 0)

            lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade, QuantCancelada, QuantReservada, QuantFaturada, UnidadeMed, NumIntDoc FROM ItensPedidoDeVenda WHERE FilialEmpresa =? AND CodPedido = ? AND Produto = ?", 0, dQuantidade, dQuantCancelada, dQuantReservada, dQuantFaturada, sUM, lNumIntDocItemPV, objItemMovEst.iFilialEmpresa, objItemOP.lCodPedido, objItemMovEst.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 92142
            
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92143
            
            If lErro = AD_SQL_SEM_DADOS Then gError 92144
            
            dQuantDisp = dQuantidade - dQuantCancelada - dQuantReservada - dQuantFaturada
            
            'Converte a unidades de medida
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 92145
                    
            'Quantidade do pedido convertida para a UM de Estoque
            dQuantDisp = dQuantDisp * dFator
        
            'se a quantidade produzida ultrapassar a quantidade pedida - a quantidade reservada - a cancelada - a faturada ==> só reserva a quantidade que falta para completar o pedido
            If dQuantReservada1 > dQuantDisp Then dQuantReservada1 = dQuantDisp
                
            'transforma a quantidade reservada para a UM de PV
            dQuantReservada = dQuantReservada1 / dFator
                
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensPedidoDeVenda SET QuantReservada = QuantReservada + ?", alComando(1), dQuantReservada)
            If lErro <> AD_SQL_SUCESSO Then gError 92146
                
            lErro = Comando_ExecutarPos(alComando(3), "SELECT Codigo FROM Reserva WHERE FilialEmpresa =? AND DocOrigem = ? AND Produto = ? AND Almoxarifado = ?", 0, lCodigo, objItemMovEst.iFilialEmpresa, objItemOP.lCodPedido, objItemMovEst.sProduto, objItemMovEst.iAlmoxarifado)
            If lErro <> AD_SQL_SUCESSO Then gError 92147
            
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92148
            
            If lErro = AD_SQL_SUCESSO Then
            
                lErro = Comando_ExecutarPos(alComando(4), "UPDATE Reserva SET Quantidade = Quantidade + ?", alComando(3), dQuantReservada1)
                If lErro <> AD_SQL_SUCESSO Then gError 92149
                                    
            Else
            
                'Zera a variável de número interno
                lNumIntDoc = 0
        
                'Gera o numero internos para as reservas
                lErro = CF("Config_ObterNumInt", "MATConfig", "NUM_PROX_INT_RESERVA", lNumIntDoc)
                If lErro <> SUCESSO Then gError 92150
        
                'Obtém o Código Automático
                lErro = CF("Reserva_Automatico_Trans", lCodigo)
                If lErro <> SUCESSO Then gError 92151
        
                'Insere a reserva no Banco de Dados
                lErro = Comando_Executar(alComando(5), "INSERT INTO Reserva (FilialEmpresa,Codigo,Produto,Almoxarifado,TipoDoc,DocOrigem,NumIntOrigem,Quantidade,DataReserva,DataValidade,CodUsuario,Responsavel,NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objItemMovEst.iFilialEmpresa, lCodigo, objItemMovEst.sProduto, objItemMovEst.iAlmoxarifado, PEDIDO_DE_VENDA, objItemOP.lCodPedido, lNumIntDocItemPV, dQuantReservada1, gdtDataHoje, DATA_NULA, gsUsuario, RESERVA_AUTO_RESP & " PRODUÇÃO CODIGO = " & CStr(objItemMovEst.lCodigo), lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then gError 92152
    
            End If
        
            objItemMovEst1.iAlmoxarifado = objItemMovEst.iAlmoxarifado
            objItemMovEst1.dQuantidade = dQuantReservada1
            objItemMovEst1.sSiglaUM = objProduto.sSiglaUMEstoque
            objItemMovEst1.iFilialEmpresa = objItemMovEst.iFilialEmpresa
            objItemMovEst1.iControleEstoque = objProduto.iControleEstoque
            objItemMovEst1.sSiglaUMEst = objProduto.sSiglaUMEstoque
            objItemMovEst1.sAlmoxarifadoNomeRed = objItemMovEst.sAlmoxarifadoNomeRed
            objItemMovEst1.lNumIntDocOrigem = lNumIntDoc
            objItemMovEst1.iClasseUM = objProduto.iClasseUM
            objItemMovEst1.iApropriacaoProd = objItemMovEst.iApropriacaoProd
            objItemMovEst1.sProduto = objItemMovEst.sProduto
        
            'Gera o número interno do movimento
            lErro = CF("MovEstoque_Automatico_EmTransacao", giFilialEmpresa, lCodigo)
            If lErro <> SUCESSO Then gError 92153
        
            'Preenche o objMovEstoque
            Set objMovEstoque = New ClassMovEstoque
            objMovEstoque.dtData = gdtDataHoje
            objMovEstoque.iFilialEmpresa = giFilialEmpresa
            objMovEstoque.iTipoMov = MOV_EST_INCLUI_RESERVA
            objMovEstoque.lCodigo = lCodigo
        
            'Adiciona ítem de MovEstoque
            Call objMovEstoque.colItens.Add1(objItemMovEst1)
        
            'Grava o Movimento de Estoque
            lErro = CF("MovEstoque_Grava", objMovEstoque)
            If lErro <> SUCESSO Then gError 92154
        
            lErro = CF("PV_Andamento_Auto", objPV, PV_STATUS_ANDAMENTO_TIPO_RESERVA_GRAVA)
            If lErro <> SUCESSO Then gError 92154
        
            'Fechamento comando
             For iIndice = LBound(alComando) To UBound(alComando)
                 Call Comando_Fechar(alComando(iIndice))
             Next
        
        ElseIf objItemOP.colItemPV.Count <> 0 And objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
    
            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_Abrir()
                If alComando(iIndice) = 0 Then gError 92140
            Next
            
            'Converte as unidades de medida
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemMovEst.sSiglaUM, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 92141
        
            'Quantidade produzida convertida para a UM de Estoque
            dQuantFalta = objItemMovEst.dQuantidade * dFator
            
            For Each objItemOPItemPV In objItemOP.colItemPV
            
                If objItemOPItemPV.dQuantidade - objItemOPItemPV.dQuantidadeProd <= dQuantFalta + QTDE_ESTOQUE_DELTA Then
                    dQuantReservada1 = objItemOPItemPV.dQuantidade - objItemOPItemPV.dQuantidadeProd
                Else
                    dQuantReservada1 = dQuantFalta
                End If
            
                sUM = String(STRING_UM_SIGLA, 0)
    
                lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade, QuantCancelada, QuantReservada, QuantFaturada, UnidadeMed, NumIntDoc FROM ItensPedidoDeVenda WHERE FilialEmpresa =? AND CodPedido = ? AND Produto = ?", 0, dQuantidade, dQuantCancelada, dQuantReservada, dQuantFaturada, sUM, lNumIntDocItemPV, objItemMovEst.iFilialEmpresa, objItemOPItemPV.lCodigoPV, objItemMovEst.sProduto)
                If lErro <> AD_SQL_SUCESSO Then gError 92142
                
                lErro = Comando_BuscarPrimeiro(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92143
                
                If lErro = AD_SQL_SEM_DADOS Then gError 92144
                
                dQuantDisp = dQuantidade - dQuantCancelada - dQuantReservada - dQuantFaturada
                
                'Converte a unidades de medida
                lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 92145
                        
                'Quantidade do pedido convertida para a UM de Estoque
                dQuantDisp = dQuantDisp * dFator
            
                'se a quantidade produzida ultrapassar a quantidade pedida - a quantidade reservada - a cancelada - a faturada ==> só reserva a quantidade que falta para completar o pedido
                If dQuantReservada1 > dQuantDisp Then dQuantReservada1 = dQuantDisp
                dQuantFalta = dQuantFalta - dQuantReservada1
                    
                'transforma a quantidade reservada para a UM de PV
                dQuantReservada = dQuantReservada1 / dFator
                
                If dQuantReservada > QTDE_ESTOQUE_DELTA Then
                    
                    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensPedidoDeVenda SET QuantReservada = QuantReservada + ?", alComando(1), dQuantReservada)
                    If lErro <> AD_SQL_SUCESSO Then gError 92146
                        
                    lErro = Comando_ExecutarPos(alComando(3), "SELECT Codigo FROM Reserva WHERE FilialEmpresa =? AND DocOrigem = ? AND Produto = ? AND Almoxarifado = ?", 0, lCodigo, objItemOPItemPV.iFilialEmpresa, objItemOPItemPV.lCodigoPV, objItemOPItemPV.sProduto, objItemMovEst.iAlmoxarifado)
                    If lErro <> AD_SQL_SUCESSO Then gError 92147
                    
                    lErro = Comando_BuscarPrimeiro(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92148
                    
                    If lErro = AD_SQL_SUCESSO Then
                    
                        lErro = Comando_ExecutarPos(alComando(4), "UPDATE Reserva SET Quantidade = Quantidade + ?", alComando(3), dQuantReservada1)
                        If lErro <> AD_SQL_SUCESSO Then gError 92149
                                            
                    Else
                    
                        'Zera a variável de número interno
                        lNumIntDoc = 0
                
                        'Gera o numero internos para as reservas
                        lErro = CF("Config_ObterNumInt", "MATConfig", "NUM_PROX_INT_RESERVA", lNumIntDoc)
                        If lErro <> SUCESSO Then gError 92150
                
                        'Obtém o Código Automático
                        lErro = CF("Reserva_Automatico_Trans", lCodigo)
                        If lErro <> SUCESSO Then gError 92151
                
                        'Insere a reserva no Banco de Dados
                        lErro = Comando_Executar(alComando(5), "INSERT INTO Reserva (FilialEmpresa,Codigo,Produto,Almoxarifado,TipoDoc,DocOrigem,NumIntOrigem,Quantidade,DataReserva,DataValidade,CodUsuario,Responsavel,NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objItemMovEst.iFilialEmpresa, lCodigo, objItemMovEst.sProduto, objItemMovEst.iAlmoxarifado, PEDIDO_DE_VENDA, objItemOPItemPV.lCodigoPV, lNumIntDocItemPV, dQuantReservada1, gdtDataHoje, DATA_NULA, gsUsuario, RESERVA_AUTO_RESP & " PRODUÇÃO CODIGO = " & CStr(objItemMovEst.lCodigo), lNumIntDoc)
                        If lErro <> AD_SQL_SUCESSO Then gError 92152
            
                    End If
                
                    lErro = Comando_Executar(alComando(6), "UPDATE ItemOPItemPV SET QuantidadeProd = QuantidadeProd + ? WHERE NumIntDocItemOP = ? AND NumIntDocItemPV = ?", dQuantReservada1, objItemOPItemPV.lNumIntDocItemOP, objItemOPItemPV.lNumIntDocItemPV)
                    If lErro <> AD_SQL_SUCESSO Then gError 92149
                
                    objItemMovEst1.iAlmoxarifado = objItemMovEst.iAlmoxarifado
                    objItemMovEst1.dQuantidade = dQuantReservada1
                    objItemMovEst1.sSiglaUM = objProduto.sSiglaUMEstoque
                    objItemMovEst1.iFilialEmpresa = objItemMovEst.iFilialEmpresa
                    objItemMovEst1.iControleEstoque = objProduto.iControleEstoque
                    objItemMovEst1.sSiglaUMEst = objProduto.sSiglaUMEstoque
                    objItemMovEst1.sAlmoxarifadoNomeRed = objItemMovEst.sAlmoxarifadoNomeRed
                    objItemMovEst1.lNumIntDocOrigem = lNumIntDoc
                    objItemMovEst1.iClasseUM = objProduto.iClasseUM
                    objItemMovEst1.iApropriacaoProd = objItemMovEst.iApropriacaoProd
                    objItemMovEst1.sProduto = objItemMovEst.sProduto
                
                    'Gera o número interno do movimento
                    lErro = CF("MovEstoque_Automatico_EmTransacao", giFilialEmpresa, lCodigo)
                    If lErro <> SUCESSO Then gError 92153
                
                    'Preenche o objMovEstoque
                    Set objMovEstoque = New ClassMovEstoque
                    objMovEstoque.dtData = gdtDataHoje
                    objMovEstoque.iFilialEmpresa = giFilialEmpresa
                    objMovEstoque.iTipoMov = MOV_EST_INCLUI_RESERVA
                    objMovEstoque.lCodigo = lCodigo
                
                    'Adiciona ítem de MovEstoque
                    Call objMovEstoque.colItens.Add1(objItemMovEst1)
                
                    'Grava o Movimento de Estoque
                    lErro = CF("MovEstoque_Grava", objMovEstoque)
                    If lErro <> SUCESSO Then gError 92154
                    
                End If
                
            Next
        
            'Fechamento comando
            For iIndice = LBound(alComando) To UBound(alComando)
                Call Comando_Fechar(alComando(iIndice))
            Next
            
        End If
    
    Next
    
    ReservasOPPV_Grava = SUCESSO

    Exit Function

Erro_ReservasOPPV_Grava:

    ReservasOPPV_Grava = gErr

    Select Case gErr

        Case 92140
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92141, 92145, 92150, 92151, 92153, 92154

        Case 92142, 92143
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA3", gErr, objItemMovEst.iFilialEmpresa, objItemOP.lCodPedido, objItemMovEst.sProduto)
    
        Case 92144
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPEDIDO_INEXISTENTE1", gErr, objItemOP.lCodPedido, objItemMovEst.iFilialEmpresa, objItemMovEst.sProduto)

        Case 92146
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ITENSPV", gErr, objItemMovEst.iFilialEmpresa, objItemOP.lCodPedido, objItemMovEst.sProduto)

        Case 92147, 92148
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA2", gErr, objItemMovEst.iFilialEmpresa, objItemOP.lCodPedido, objItemMovEst.sProduto, objItemMovEst.iAlmoxarifado)

        Case 92149
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_RESERVA", gErr, objItemMovEst.iFilialEmpresa, objItemOP.lCodPedido, objItemMovEst.sProduto, objItemMovEst.iAlmoxarifado)

        Case 92152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RESERVA", gErr, objItemMovEst.iFilialEmpresa, objItemOP.lCodPedido, objItemMovEst.sProduto, objItemMovEst.iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151888)

    End Select

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Rotina criada por Daniel
'Revisão: Luiz G.F.Nogueira
'Data da inclusão no MATGrava: 17/09/01
'Pendências:
Function ProdutoEmbalagem_Exclui(ByVal objProduto As ClassProduto) As Long
'Chama uma função para excluir as associações de embalagem para o produto com código passado em objProduto

Dim lErro As Long
Dim lTransacao As Long
Dim iExclusao As Integer

On Error GoTo Erro_ProdutoEmbalagem_Exclui

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 95060
    
    'Indica que é uma exclusao, portanto deve testar os relacionamentos.
    iExclusao = 1
    
    'Exclui a relacao Produto x Embalagem
    lErro = CF("ProdutoEmbalagem_Exclui_EmTrans", objProduto, iExclusao)
    If lErro <> SUCESSO And lErro <> 95055 Then gError 95061
    
    'Se nao encontrou => erro
    If lErro = 95055 Then gError 95062
    
    'Confirma a Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 95063
    
    ProdutoEmbalagem_Exclui = SUCESSO
    
    Exit Function
    
Erro_ProdutoEmbalagem_Exclui:
    
    ProdutoEmbalagem_Exclui = gErr
    
    Select Case gErr
    
        Case 95060
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 95061
        
        Case 95062
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOEMBALAGEM_INEXISTENTE", gErr, objProduto.sCodigo)
     
        Case 95063
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151889)
    
    End Select
    
    'Fechamento transação
    Call Transacao_Rollback
    
    Exit Function

End Function

'Rotina criada por Daniel
'Revisão: Luiz G.F.Nogueira
'Data da inclusão no MATGrava: 17/09/01
'Pendências: não
Function ProdutoEmbalagem_Exclui_EmTrans(ByVal objProduto As ClassProduto, ByVal iExclusao As Integer) As Long
'Exclui as associações de embalagem para o produto com código passado em objProduto
'ATENÇÃO: ESTA FUNÇÃO SÓ DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim objProdutoEmbalagem As ClassProdutoEmbalagem
Dim alComando(1) As Long
Dim iIndice As Integer
Dim sCodigoProduto As String
Dim iCodigoEmbalagem As Integer
    
On Error GoTo Erro_ProdutoEmbalagem_Exclui_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 95053
    Next
    
    'Inicializa a string
    sCodigoProduto = String(STRING_PRODUTOEMBALAGEM_PRODUTO, 0)
    
    'Lê na tabela ProdutoEmbalagem o produto com código passado em objProduto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto, Embalagem FROM ProdutoEmbalagem WHERE Produto = ?", 0, sCodigoProduto, iCodigoEmbalagem, objProduto.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 95052
        
    'Buscar o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95054

    'Se não encontrou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 95055
    
    'Para cada embalagem relacionada ao produto
    Do While lErro = AD_SQL_SUCESSO
    
        'Faz o lock exclusivo do produto
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 95056
                        
        'Instacia o Obj
        Set objProdutoEmbalagem = New ClassProdutoEmbalagem
        
        'Guarda o Código do Produto e da Embalagem no Obj
        objProdutoEmbalagem.sProduto = sCodigoProduto
        objProdutoEmbalagem.iEmbalagem = iCodigoEmbalagem
                
        'Verifica se pode excluir
        If iExclusao = 1 Then
            'Verifica em outras tabelas se a embalagem está vinculada ao produto
            lErro = CF("ProdutoEmbalagem_Testa_Relacionamentos", objProdutoEmbalagem)
            If lErro <> SUCESSO Then gError 95057
        End If
        
        'Exclui a relação da embalagem com o produto
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ProdutoEmbalagem", alComando(0))
        If lErro <> SUCESSO Then gError 95059
        
        'Buscar o Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95114

    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ProdutoEmbalagem_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_ProdutoEmbalagem_Exclui_EmTrans:

    ProdutoEmbalagem_Exclui_EmTrans = gErr

    Select Case gErr
    
        Case 95053
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 95052, 95054, 95114
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOEMBALAGEM", gErr)
        
        Case 95057
        
        Case 95055
            'Erro tratado na rotina chamadora
                    
        Case 95059
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOEMBALAGEM", gErr)
            
        Case 95056
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOEMBALAGEM", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151890)
    
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

'Rotina criada por Daniel
'Revisão: Luiz G.F.Nogueira
'Data da inclusão no MATGrava: 17/09/01
'Pendências: não
Function ProdutoEmbalagem_Grava(ByVal objProduto As ClassProduto) As Long
'Grava as associacoes de Produto x Embalagens na tabela ProdutoEmbalagem
'OBS. Caso já exista Embalagens associadas a esse Produto as mesmas são DELETADAS e inseridas novamente

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim objProdutoAux As New ClassProduto 'Esse obj é utilizado apenas para lockar o produto
Dim objProdutoEmbalagem As New ClassProdutoEmbalagem
Dim lTransacao As Long
Dim iIndice As Integer
Dim iCodigoEmb As Integer
Dim iExclusao As Integer
Dim sCodigoProduto As String
Dim iCodigoEmbalagem As Integer

On Error GoTo Erro_ProdutoEmbalagem_Grava
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 95024
    Next
    
    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 95025

    'Guarda o código do Produto que será lockado
    objProdutoAux.sCodigo = objProduto.sCodigo
        
    'Faz lock do produto com código passado em objProdutoAux
    'A função abaixo, além de fazer o lock, faz a leitura do produto
    'Portanto, para evitar que os dados lidos sobreponham os dados recebidos
    'em objProduto o obj utilizado na função é um obj auxiliar (objProdutoAux)
    lErro = CF("Produto_Lock_Shared", alComando(0), objProdutoAux)
    If lErro <> SUCESSO And lErro <> 55235 Then gError 95026
    
    'Se não encontrou o produto => erro
    If lErro = 55235 Then gError 95037
    
    'Indica que é uma gravacao, portanto nao deve testar os relacionamentos.
    iExclusao = 0
    
    'Apaga as relacoes Produto x Embalagens para esse produto
    'Se não encontrar nenhuma embalagem relacionada ao produto
    'a função retorna o erro 95055, que não dever ser tratado,
    'pois a função deve seguir em frente
    lErro = CF("ProdutoEmbalagem_Exclui_EmTrans", objProduto, iExclusao)
    If lErro <> SUCESSO And lErro <> 95055 Then gError 95031
    
    'Para cada embalagem na coleção
    For Each objProdutoEmbalagem In objProduto.colProdutoEmbalagem
        
        'Lê o código na embalagem na tabela Embalagens
        'Essa leitura serve é feita para verificar se a embalagem
        'existe e para permitir efetuar o lock dela
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM Embalagens WHERE Codigo = ?", 0, iCodigoEmb, objProdutoEmbalagem.iEmbalagem)
        If lErro <> AD_SQL_SUCESSO Then gError 95027
        
        'Busca a embalagem
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95028
        
        'Se nao encontrou => erro
        If lErro = AD_SQL_SEM_DADOS Then gError 95029
        
        'lock compartilhado da embalagem
        lErro = Comando_LockShared(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 95030
        
        'Insere a combinacao de Produto x Embalagem na tabela ProdutoEmbalagem
        With objProdutoEmbalagem
        
            lErro = Comando_Executar(alComando(2), "INSERT INTO ProdutoEmbalagem (Produto, Embalagem, SeqGrid, Padrao, NomeProdEmb, UMEmbalagem, Capacidade, UMPeso, PesoLiqTotal, PesoBruto) VALUES (?,?,?,?,?,?,?,?,?,?)", objProduto.sCodigo, .iEmbalagem, .iSeqGrid, .iPadrao, .sNomeProdEmb, .sUMEmbalagem, .dCapacidade, .sUMPeso, .dPesoLiqTotal, .dPesoBruto)
            If lErro <> AD_SQL_SUCESSO Then gError 95032
        
        End With
                   
    Next
        
    'Verifica se não ficou algum registro "órfão" em EmbalagensItem
    
    'Inicializa a variável
    iCodigoEmbalagem = 0
    
    'Inicializa a string
    sCodigoProduto = String(STRING_PRODUTOEMBALAGEM_PRODUTO, 0)

    'Lê na view ProdutoEmbalagem_Integridade a embalagem e o produto
    lErro = Comando_Executar(alComando(3), "SELECT Produto, Embalagem FROM ProdutoEmbalagem_Integridade", sCodigoProduto, iCodigoEmbalagem)
    If lErro <> AD_SQL_SUCESSO Then gError 95130
        
    'Buscar o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95131

    'Se encontrou => erro - pq. se achou significa que foi excluida uma embalagem que nao poderia ter sido excluida, pois está em EmbalagensItem
    If lErro = AD_SQL_SUCESSO Then gError 95132
    
    'Confirma a Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 95033
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ProdutoEmbalagem_Grava = SUCESSO
    
    Exit Function

Erro_ProdutoEmbalagem_Grava:

    ProdutoEmbalagem_Grava = gErr
    
    Select Case gErr
    
        Case 95024
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 95025
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 95026, 95031
            
        Case 95037
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)
        
        Case 95027, 95028
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMBALAGENS", gErr)
        
        Case 95029
            Call Rotina_Erro(vbOKOnly, "ERRO_EMBALAGEM_INEXISTENTE", gErr, objProdutoEmbalagem.iEmbalagem)
            
        Case 95030
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EMBALAGENS", gErr, objProdutoEmbalagem.iEmbalagem)
            
        Case 95032
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOEMBALAGEM", gErr)
            
        Case 95033
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 95130, 95131
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOEMBALAGEM_INTEGRIDADE", gErr)
            
        Case 95132
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOEMBALAGEM_RELACIONADO_EMBALAGENSITEM", gErr, iCodigoEmbalagem, sCodigoProduto)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151891)
        
    End Select
    
    'Fechamento transação
    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
'Janaina
Function EmbalagensItem_Grava(ByVal colEmbalagensItem As Collection, Optional ByVal iTipoDocOrigem As Integer = 0, Optional ByVal lNumIntDocItem As Long = 0) As Long
'Insere as no BD os Itens da Embalagem

Dim lErro As Long
Dim lComando As Long
Dim objEmbalagensItem As ClassEmbalagensItem

On Error GoTo Erro_EmbalagensItem_Grava

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 96104

    'Para cada embalagem da coleção
    For Each objEmbalagensItem In colEmbalagensItem
    
        If iTipoDocOrigem <> 0 Then objEmbalagensItem.iTipoDocOrigem = iTipoDocOrigem
        If lNumIntDocItem <> 0 Then objEmbalagensItem.lNumIntDocItem = lNumIntDocItem

        'Insere em EmbalagensItemPV
        lErro = Comando_Executar(lComando, "INSERT INTO EmbalagensItem (TipoDocOrigem, NumIntDocItem, Embalagem, QuantEmb, QuantProduto, Produto) VALUES (?,?,?,?,?,?)", objEmbalagensItem.iTipoDocOrigem, objEmbalagensItem.lNumIntDocItem, objEmbalagensItem.iEmbalagem, objEmbalagensItem.dQuantEmb, objEmbalagensItem.dQuantProduto, objEmbalagensItem.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 96105

    Next

    'Fecha o comando
    Call Comando_Fechar(lComando)

    EmbalagensItem_Grava = SUCESSO

    Exit Function

Erro_EmbalagensItem_Grava:

    EmbalagensItem_Grava = gErr

    Select Case gErr

        Case 96104
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 96105
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_EMBALAGENSITEM", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151892)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function
'Janaina
End Function
'Janaina
Function EmbalagensItem_Exclui(ByVal colEmbalagensItem As Collection) As Long
'Exclui os itens da coleção de itens do Pedido de venda embalagem

Dim lErro As Long
Dim lNumIntDocItem As Long
Dim iEmbalagem As Integer
Dim iIndice As Integer
Dim dQuantProduto As Double
Dim alComando(0 To 2) As Long
Dim objEmbalagensItem As ClassEmbalagensItem

On Error GoTo Erro_EmbalagensItem_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96106
    Next

    'Para cada embalagem da coleção
    For Each objEmbalagensItem In colEmbalagensItem

        'Busca o ítem no BD
        lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDocItem, Embalagem, QuantProduto FROM EmbalagensItem WHERE TipoDocOrigem = ? AND NumIntDocItem = ? AND Embalagem = ?", 0, lNumIntDocItem, iEmbalagem, dQuantProduto, objEmbalagensItem.iTipoDocOrigem, objEmbalagensItem.lNumIntDocItem, objEmbalagensItem.iEmbalagem)
        If lErro <> AD_SQL_SUCESSO Then gError 96107

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96108

        'Exclui o item da tabela de EmbalagemItemPV
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM EmbalagensItem ", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 96110

    Next

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    EmbalagensItem_Exclui = SUCESSO

    Exit Function

Erro_EmbalagensItem_Exclui:

    EmbalagensItem_Exclui = gErr

    Select Case gErr

        Case 96106
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 96107, 96108
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMBALAGENSITEM", gErr)

        Case 96110
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_EMBALAGENSITEM", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151893)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
'Janaina
End Function

Function EmbalagensItem_Exclui2(ByVal iTipoDocOrigem As Integer, ByVal lNumIntDocItem As Long) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 2) As Long
Dim objEmbalagensItem As ClassEmbalagensItem, iEmbalagem As Integer

On Error GoTo Erro_EmbalagensItem_Exclui2

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96106
    Next

    'Busca o ítem no BD
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Embalagem FROM EmbalagensItem WHERE TipoDocOrigem = ? AND NumIntDocItem = ? ", 0, iEmbalagem, iTipoDocOrigem, lNumIntDocItem)
    If lErro <> AD_SQL_SUCESSO Then gError 96107

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96108
    
    Do While lErro <> AD_SQL_SEM_DADOS

        'Exclui o item da tabela de EmbalagemItemPV
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM EmbalagensItem ", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 96110

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96108

    Loop

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    EmbalagensItem_Exclui2 = SUCESSO

    Exit Function

Erro_EmbalagensItem_Exclui2:

    EmbalagensItem_Exclui2 = gErr

    Select Case gErr

        Case 96106
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 96107, 96108
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMBALAGENSITEM", gErr)

        Case 96110
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_EMBALAGENSITEM", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151893)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
'Janaina
End Function

Function EstoqueMes_Grava(ByVal colEstoqueMes As Collection, Optional ByVal bReproc As Boolean = False) As Long
'Atualiza EstoqueMes com o total horas maquina, custo materia prima e a flag CUSTO_APURADO
'Chamada EM TRANSAÇÃO.

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objEstoqueMes As ClassEstoqueMes
Dim iAno As Integer

On Error GoTo Erro_EstoqueMes_Grava
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92541
    Next
    
    For Each objEstoqueMes In colEstoqueMes
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Ano FROM EstoqueMes WHERE FilialEmpresa = ? AND Ano = ? AND Mes = ?", 0, iAno, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
        If lErro <> AD_SQL_SUCESSO Then gError 92542
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92543
    
        If lErro = AD_SQL_SEM_DADOS Then gError 92544
    
        'Atualiza tabela SaldoMesEst, campos ValEnt e ValSai de iMes
        If bReproc Then
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE EstoqueMes SET HorasMaquina = ?, CustoMatPrim = ?, QuantFator1 = ?, QuantFator2 = ?, QuantFator3 = ?, QuantFator4 = ?, QuantFator5 = ?, QuantFator6 = ?", alComando(1), objEstoqueMes.lHorasMaquina, objEstoqueMes.dCustoMatPrim, objEstoqueMes.dQuantFator1, objEstoqueMes.dQuantFator2, objEstoqueMes.dQuantFator3, objEstoqueMes.dQuantFator4, objEstoqueMes.dQuantFator5, objEstoqueMes.dQuantFator6)
        Else
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE EstoqueMes SET CustoProdApurado = ?, HorasMaquina = ?, CustoMatPrim = ?, QuantFator1 = ?, QuantFator2 = ?, QuantFator3 = ?, QuantFator4 = ?, QuantFator5 = ?, QuantFator6 = ?", alComando(1), CUSTO_APURADO, objEstoqueMes.lHorasMaquina, objEstoqueMes.dCustoMatPrim, objEstoqueMes.dQuantFator1, objEstoqueMes.dQuantFator2, objEstoqueMes.dQuantFator3, objEstoqueMes.dQuantFator4, objEstoqueMes.dQuantFator5, objEstoqueMes.dQuantFator6)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 92545
    
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    EstoqueMes_Grava = SUCESSO

    Exit Function

Erro_EstoqueMes_Grava:

    EstoqueMes_Grava = gErr

    Select Case gErr
        
        Case 92541
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92542, 92543
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEMES", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
        
        Case 92544
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEMES_INEXISTENTE", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)

        Case 92545
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEMES", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
  
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151894)
    
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function EstoqueMes_Grava1(ByVal colEstoqueMes As Collection, ByVal colEstoqueMesProduto As Collection) As Long
'Atualiza EstoqueMes com os gastos diretos e indiretos e EstoqueMesProduto com os gastos dos produtos em questão

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objEstoqueMes As ClassEstoqueMes
Dim iAno As Integer
Dim lTransacao As Long
Dim objEstoqueMesProduto As ClassEstoqueMesProduto

On Error GoTo Erro_EstoqueMes_Grava1
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92585
    Next
    
    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 92609
    
    For Each objEstoqueMes In colEstoqueMes
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Ano FROM EstoqueMes WHERE FilialEmpresa = ? AND Ano = ? AND Mes = ?", 0, iAno, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
        If lErro <> AD_SQL_SUCESSO Then gError 92586
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92587
    
        If lErro = AD_SQL_SEM_DADOS Then gError 92588
    
        'Atualiza tabela SaldoMesEst, campos ValEnt e ValSai de iMes
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE EstoqueMes SET GastosDiretos = ?, GastosIndiretos = ?, CustoFator1 = ?, CustoFator2 = ?, CustoFator3 = ?, CustoFator4 = ?, CustoFator5 = ?, CustoFator6 = ?", alComando(1), objEstoqueMes.dGastosDiretos, objEstoqueMes.dGastosIndiretos, objEstoqueMes.dCustoFator1, objEstoqueMes.dCustoFator2, objEstoqueMes.dCustoFator3, objEstoqueMes.dCustoFator4, objEstoqueMes.dCustoFator5, objEstoqueMes.dCustoFator6)
        If lErro <> AD_SQL_SUCESSO Then gError 92589
    
    Next
        
    If colEstoqueMes.Count <> 0 Then
    
        Set objEstoqueMes = colEstoqueMes.Item(1)
        
        lErro = EstoqueMesProduto_Exclui(objEstoqueMes.iAno, objEstoqueMes.iMes)
        If lErro <> SUCESSO Then gError 92873
    
        For Each objEstoqueMesProduto In colEstoqueMesProduto
            
            'Insere os registros na tabela estoquemesproduto
            lErro = Comando_Executar(alComando(3), "INSERT INTO EstoqueMesProduto (FilialEmpresa, Ano, Mes, Produto, CustoProdApurado, Gasto) VALUES (?,?,?,?,?,?)", objEstoqueMesProduto.iFilialEmpresa, objEstoqueMesProduto.iAno, objEstoqueMesProduto.iMes, objEstoqueMesProduto.sProduto, CUSTO_NAO_APURADO, objEstoqueMesProduto.dGasto)
            If lErro <> AD_SQL_SUCESSO Then gError 92874
        
        Next
    
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 92610
    
    EstoqueMes_Grava1 = SUCESSO

    Exit Function

Erro_EstoqueMes_Grava1:

    EstoqueMes_Grava1 = gErr

    Select Case gErr
        
        Case 92585
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92586, 92587
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEMES", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
        
        Case 92588
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEMES_INEXISTENTE", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)

        Case 92589
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEMES", gErr, objEstoqueMes.iFilialEmpresa, objEstoqueMes.iAno, objEstoqueMes.iMes)
            
        Case 92609
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 92610
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
  
        Case 92873
  
        Case 92874
6            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ESTOQUEMESPRODUTO", gErr, objEstoqueMesProduto.iFilialEmpresa, objEstoqueMesProduto.iAno, objEstoqueMesProduto.iMes, objEstoqueMesProduto.sProduto)
  
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151895)
    
    End Select
    
    'Fechamento transação
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
    
Private Function EstoqueMesProduto_Exclui(ByVal iAno As Integer, ByVal iMes As Integer) As Long
'Exclui os registros de estoquemesproduto referentes ao iAno/iMes em questão
'IMPORTANTE: Tem que ser Chamada EM TRANSAÇÃO.

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim iIndice As Integer

On Error GoTo Erro_EstoqueMesProduto_Exclui
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92867
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Produto FROM EstoqueMesProduto WHERE Ano = ? AND Mes = ?", 0, iFilialEmpresa, sProduto, iAno, iMes)
    If lErro <> AD_SQL_SUCESSO Then gError 92868

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92869

    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 92870
    
        'Atualiza tabela SaldoMesEst, campos ValEnt e ValSai de iMes
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM EstoqueMesProduto", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 92871
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92872
    
    Loop
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    EstoqueMesProduto_Exclui = SUCESSO

    Exit Function

Erro_EstoqueMesProduto_Exclui:

    EstoqueMesProduto_Exclui = gErr

    Select Case gErr
        
        Case 92867
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92868, 92869, 92872
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEMESPRODUTO", gErr, iAno, iMes)
        
        Case 92870
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEMESPRODUTO", gErr, iFilialEmpresa, iAno, iMes, sProduto)
        
        Case 92871
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ESTOQUEMESPRODUTO", gErr, iFilialEmpresa, iAno, iMes, sProduto)
  
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151896)
    
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
    
    
Function APROPRIACAOINSUMOSPROD_AUTOMATICO(lNumIntDoc As Long) As Long
'Devolve o proximo número interno de ApropriacaoInsumosProd disponível
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long

On Error GoTo Erro_ApropriacaoInsumosProd_Automatico

    'Obtem o próximo número interno de RastreamentoLote disponivel
    lErro = CF("Config_ObterNumInt", "MatConfig", "NUM_PROX_APROPRIACAOINSUMOSPROD", lNumIntDoc)
    If lErro <> SUCESSO Then gError 92676

    APROPRIACAOINSUMOSPROD_AUTOMATICO = SUCESSO

    Exit Function

Erro_ApropriacaoInsumosProd_Automatico:

    APROPRIACAOINSUMOSPROD_AUTOMATICO = gErr

    Select Case gErr

        Case 92676
            'Erro tratado na rotina chamada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151897)

    End Select

    Exit Function

End Function
    
Function ApropriacaoInsumosProd_Inserir1(ByVal objApropriacaoInsumosProd As ClassApropriacaoInsumosProd) As Long
'inserir na tabela ApropriacaoInsumosprod e RastreamentoMovto a movimentação dos insumos
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_ApropriacaoInsumosProd_Inserir1

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 92677

    'devolve o proximo numintdoc disponivel
    lErro = CF("ApropriacaoInsumosProd_Automatico", lNumIntDoc)
    If lErro <> SUCESSO Then gError 92678
            
    objApropriacaoInsumosProd.lNumIntDoc = lNumIntDoc
    
    'Insere um registro na tabela de Apropriacao de Insumos
    lErro = Comando_Executar(lComando, "INSERT INTO ApropriacaoInsumosProd (NumIntDoc, NumIntDocOrigem, NumIntReqProd, Produto, Quantidade,Automatico) VALUES (?,?,?,?,?,?)", lNumIntDoc, objApropriacaoInsumosProd.lNumIntDocOrigem, objApropriacaoInsumosProd.lNumIntReqProd, objApropriacaoInsumosProd.sProduto, objApropriacaoInsumosProd.dQuantidade, APROPINSUMOSPROD_AUTOMATICO)
    If lErro <> AD_SQL_SUCESSO Then gError 92679

    Call Comando_Fechar(lComando)
    
    ApropriacaoInsumosProd_Inserir1 = SUCESSO

    Exit Function

Erro_ApropriacaoInsumosProd_Inserir1:

    ApropriacaoInsumosProd_Inserir1 = gErr

    Select Case gErr

        Case 92677
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92678

        Case 92679
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_APROPRIACAOINSUMOSPROD", gErr, objApropriacaoInsumosProd.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151898)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function EstoqueMesProduto_Grava(ByVal colEstoqueMesProduto As Collection) As Long
'Atualiza EstoqueMes com o total horas maquina, custo materia prima e a flag CUSTO_APURADO
'Chamada EM TRANSAÇÃO.

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objEstoqueMesProduto As ClassEstoqueMesProduto
Dim iAno As Integer

On Error GoTo Erro_EstoqueMesProduto_Grava
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92897
    Next
    
    For Each objEstoqueMesProduto In colEstoqueMesProduto
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Ano FROM EstoqueMesProduto WHERE FilialEmpresa = ? AND Ano = ? AND Mes = ? AND Produto = ?", 0, iAno, objEstoqueMesProduto.iFilialEmpresa, objEstoqueMesProduto.iAno, objEstoqueMesProduto.iMes, objEstoqueMesProduto.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 92898
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92899
    
        If lErro = AD_SQL_SEM_DADOS Then gError 92900
    
        'Atualiza tabela SaldoMesEst, campos ValEnt e ValSai de iMes
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE EstoqueMesProduto SET Quantidade = ?", alComando(1), objEstoqueMesProduto.dQuantidade)
        If lErro <> AD_SQL_SUCESSO Then gError 92901
    
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    EstoqueMesProduto_Grava = SUCESSO

    Exit Function

Erro_EstoqueMesProduto_Grava:

    EstoqueMesProduto_Grava = gErr

    Select Case gErr
        
        Case 92897
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92898, 92899
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEMESPRODUTO", gErr, objEstoqueMesProduto.iAno, objEstoqueMesProduto.iMes)
        
        Case 92900
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEMESPRODUTO_INEXISTENTE", gErr, objEstoqueMesProduto.iFilialEmpresa, objEstoqueMesProduto.iAno, objEstoqueMesProduto.iMes, objEstoqueMesProduto.sProduto)

        Case 92901
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ESTOQUEMESPRODUTO", gErr, objEstoqueMesProduto.iFilialEmpresa, objEstoqueMesProduto.iAno, objEstoqueMesProduto.iMes, objEstoqueMesProduto.sProduto)
  
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151899)
    
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ProdutoHistorico_Grava(objProdutoHistorico As ClassProdutoHistorico) As Long
'Grava o Historico do Produto a partir dos dados passados no objProdutoHistorico

Dim lErro As Long
Dim iSituacao As Integer
Dim lComando As Long

On Error GoTo Erro_ProdutoHistorico_Grava

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97661
    
    'Inicializa a Situacao
    iSituacao = -1
        
    'Verifica se é um novo registro ou uma alteracao dos campos da ProdutoHistorico
    lErro = ProdutoHistorico_Verifica_Alteracao(objProdutoHistorico, iSituacao)
    If lErro <> SUCESSO Then gError 97662
    
    'Se foi alterado algum campo válido (vide ProdutoHistorico) ou é um novo reg. => GRAVA
    If ((iSituacao = REGISTRO_INEXISTENTE) Or (iSituacao = REGISTRO_ALTERADO)) Then
    
        'Faz a Gravacao na Tabela de ProdutoHistorico
        lErro = ProdutoHistorico_Grava1(objProdutoHistorico)
        If lErro <> SUCESSO Then gError 97663
            
    End If

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    ProdutoHistorico_Grava = SUCESSO
    
    Exit Function

Erro_ProdutoHistorico_Grava:

    ProdutoHistorico_Grava = gErr
    
    Select Case gErr
    
        Case 97662, 97663
        
        Case 97661
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151900)
    
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

End Function

Private Function ProdutoHistorico_Verifica_Alteracao(objProdutoHistorico As ClassProdutoHistorico, iSituacao As Integer) As Long
'Verifica se está sendo feita alguma alteracao nos campos presentes da tabela ProdutoHistorico

Dim lErro As Long
Dim lComando As Long
Dim sSelect As String
Dim tProdutoHistorico As typeProdutoHistorico

On Error GoTo Erro_ProdutoHistorico_Verifica_Alteracao

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97670

    'Carrega sSelect com a Expressão SQL
    sSelect = "SELECT Produtos.Codigo, Produtos.Descricao FROM Produtos WHERE Produtos.Codigo=?"
    
    With tProdutoHistorico
        
        'Inicializa as Strings do Type
        .sCodigoProd = String(STRING_PRODUTO, 0)
        .sDescProduto = String(STRING_PRODUTO_DESCRICAO, 0)
    
        'Executa o Comando SQL
        lErro = Comando_Executar(lComando, sSelect, .sCodigoProd, .sDescProduto, objProdutoHistorico.sCodProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 97671
    
        'Busca o Primeiro Registro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97672
    
        'Se existe o registro => Verificar se houve alteracao considerável
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Verifica se houve alguma alteracao nos dados já existentes
            Call ProdutoHistorico_Verifica_Alteracao1(objProdutoHistorico, tProdutoHistorico, iSituacao)
               
        ElseIf lErro = AD_SQL_SEM_DADOS Then
            
            iSituacao = REGISTRO_INEXISTENTE
            
        End If
        
    End With
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)
    
    ProdutoHistorico_Verifica_Alteracao = SUCESSO
    
    Exit Function

Erro_ProdutoHistorico_Verifica_Alteracao:

    ProdutoHistorico_Verifica_Alteracao = gErr
    
    Select Case gErr
    
        Case 97671, 97672
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOHISTORICO", gErr)
        
        Case 97670
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151901)
            
    End Select
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function

Private Sub ProdutoHistorico_Verifica_Alteracao1(objProdutoHistorico As ClassProdutoHistorico, tProdutoHistorico As typeProdutoHistorico, iSituacao As Integer)
'Verifica se houve alguma alteracao nos dados já existentes

On Error GoTo Erro_ProdutoHistorico_Verifica_Alteracao1

    'Se houver alguma alteração => iSituacao = REGISTRO_ALTERADO
    With objProdutoHistorico
    
        If .sDescProduto <> tProdutoHistorico.sDescProduto Then gError 97673
        
        iSituacao = REGISTRO_INALTERADO
            
    End With
    
    Exit Sub

Erro_ProdutoHistorico_Verifica_Alteracao1:

    Select Case gErr
        
        Case 97673
            iSituacao = REGISTRO_ALTERADO
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151902)
            
    End Select
    
    Exit Sub

End Sub

Function ProdutoHistorico_Grava1(objProdutoHistorico As ClassProdutoHistorico) As Long

Dim lErro As Long
Dim lNumIntDoc As Long
Dim lComando As Long
Dim sInsert As String

On Error GoTo Erro_ProdutoHistorico_Grava1
    
    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97674
    
    'Busca o Novo Codigo para insercao
    lErro = CF("Config_ObterAutomatico_EmTrans", "MATConfig", "NUM_PROX_PRODUTOHISTORICO", "ProdutoHistorico", "NumIntDoc", lNumIntDoc)
    If lErro <> SUCESSO Then gError 97675
    
    With objProdutoHistorico
    
        .lNumIntDoc = lNumIntDoc
        
        'Guarda a expressão SQL
        sInsert = "INSERT INTO ProdutoHistorico (NumIntDoc, DataAtualizacao, CodProduto, DescProduto) VALUES (?,?,?,?)"
                
        'Grava historico na tabela de ProdutoHistorico
        lErro = Comando_Executar(lComando, sInsert, .lNumIntDoc, .dtDataAtualizacao, .sCodProduto, .sDescProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 97676
        
    End With
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)

    ProdutoHistorico_Grava1 = SUCESSO
    
    Exit Function

Erro_ProdutoHistorico_Grava1:

    ProdutoHistorico_Grava1 = gErr
    
    Select Case gErr
    
        Case 97675
        
        Case 97676
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOHISTORICO", gErr)
            
        Case 97674
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151903)
    
    End Select

    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function

Public Function ProdutoHistorico_Grava_Retroativos(ByVal dtDataAtualizacao As Date) As Long
'Grava o historico de Produtos já existentes no banco de dados
'dtDataAtualizacao (input): passa a data que será inserida na tabela ProdutoHistorico como data de gravação

'ATENÇÃO: NÃO RETIRE O COMENTÁRIO ABAIXO
'Para chamar esta funcao pelo immediate ...
'call callbyname(createobject("RotinasMAT.ClassMATGrava"),"ProdutoHistorico_Grava_Retroativos",VbMethod,cdate("01/01/02"))

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ProdutoHistorico_Grava_Retroativos

    'Abre o Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 94904
    
    'Chama a função que faz a gravação
    lErro = CF("ProdutoHistorico_Grava_Retroativos_EmTrans ", dtDataAtualizacao)
    If lErro <> SUCESSO Then gError 94905
    
    'Faz o commit da transação
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 94906
    
    ProdutoHistorico_Grava_Retroativos = SUCESSO
    
    Exit Function
    
Erro_ProdutoHistorico_Grava_Retroativos:

    ProdutoHistorico_Grava_Retroativos = gErr

    Select Case gErr
        
        Case 94905
        
        Case 94904
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 94906
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151904)
    
    End Select

    'Faz o rollback da transação
    Call Transacao_Rollback

End Function

Public Function ProdutoHistorico_Grava_Retroativos_EmTrans(ByVal dtDataAtualizacao As Date) As Long
'Grava o historico de Produtoes já existentes no banco de dados
'dtDataAtualizacao (input): passa a data que será inserida na tabela ProdutoHistorico como data de gravação
'ATENÇÃO: ESTA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO !!

Dim lErro As Long
Dim lComando As Long
Dim sSelect As String
Dim tProdutoHistorico As typeProdutoHistorico
Dim objProdutoHistorico As New ClassProdutoHistorico

On Error GoTo Erro_ProdutoHistorico_Grava_Retroativos_EmTrans

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97677
    
    'Carrega sSelect com a Expressão SQL
    sSelect = "SELECT Produtos.Codigo, Produtos.Descricao FROM Produtos"
    
    With tProdutoHistorico
        
        'Inicializa as Strings do Type
        .sCodigoProd = String(STRING_PRODUTO, 0)
        .sDescProduto = String(STRING_PRODUTO_DESCRICAO, 0)
        
        'Executa o Comando SQL
        lErro = Comando_Executar(lComando, sSelect, .sCodigoProd, .sDescProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 97679
    
    End With
        
        'Busca o Primeiro Registro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97680
    
        'Enquanto tem Produto => grava o registro
        Do While lErro <> AD_SQL_SEM_DADOS
                                        
            'Atualiza os dados para futura gravacao de histórico
            With objProdutoHistorico
        
                .dtDataAtualizacao = dtDataAtualizacao
                .sCodProduto = tProdutoHistorico.sCodigoProd
                .sDescProduto = tProdutoHistorico.sDescProduto
                
            End With
        
            'FAZ A GRAVACAO DO HISTORICO
            lErro = ProdutoHistorico_Grava1(objProdutoHistorico)
            If lErro <> SUCESSO Then gError 97681
        
            'Busca o Próximo Registro
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97682
            
    Loop
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)
    
    ProdutoHistorico_Grava_Retroativos_EmTrans = SUCESSO
    
    Exit Function
    
Erro_ProdutoHistorico_Grava_Retroativos_EmTrans:

    ProdutoHistorico_Grava_Retroativos_EmTrans = gErr

    Select Case gErr
        
        Case 97677
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 97679, 97680, 97682
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOHISTORICO", gErr)
            
        Case 97681
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151905)
    
    End Select

    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function

Public Function Retorna_CustoUnitario(ByVal iTransacao As Integer, ByVal lNumIntDoc As Long, ByVal sProduto As String, dCustoUnitario As Double) As Long
'devolve o custo unitario do produto passado como parametro que é descoberto atraves do movimento de estoque vinculado ao documento de origem da contabilizacao.

Dim objItemNFiscal As New ClassItemNF
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iOrigemLcto As Integer
Dim iIndice As Integer
Dim dCusto As Double
Dim dQuantidade As Double
Dim sSiglaUM As String
Dim sSiglaUMEstoque As String
Dim iClasseUM As Integer
Dim dFator As Double
Dim iTipoMovtoEstoque As Integer

On Error GoTo Erro_Retorna_CustoUnitario

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92980
    Next
    
    lErro = Comando_Executar(alComando(1), "SELECT OrigemLcto FROM TransacaoCTB WHERE TransacaoCTB.Codigo = ? ", iOrigemLcto, iTransacao)
    If lErro <> AD_SQL_SUCESSO Then gError 92981
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 92982
    
    sSiglaUM = String(STRING_UM_SIGLA, 0)
    sSiglaUMEstoque = String(STRING_UM_SIGLA, 0)
    
    Select Case iOrigemLcto
    
        Case TRANSACAOCTBORIGEM_NFISCAL
    
            lErro = Comando_Executar(alComando(2), "SELECT MovimentoEstoque.Custo, MovimentoEstoque.Quantidade, MovimentoEstoque.SiglaUM, ClasseUM, SiglaUMEstoque FROM ItensNFiscal, MovimentoEstoque, Produtos WHERE ItensNFiscal.NumIntNF = ? AND ItensNFiscal.Produto = ? AND MovimentoEstoque.TipoNumIntDocOrigem = ? AND MovimentoEstoque.NumIntDocOrigem = ItensNFiscal.NumIntDoc AND Produtos.Codigo = MovimentoEstoque.Produto ", dCusto, dQuantidade, sSiglaUM, iClasseUM, sSiglaUMEstoque, lNumIntDoc, sProduto, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL)
            If lErro <> AD_SQL_SUCESSO Then gError 92983
                
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92984
            
            If lErro = AD_SQL_SEM_DADOS Then
            
                lErro = Comando_Executar(alComando(3), "SELECT TipoMovtoEstoque FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NumIntDoc = ?", iTipoMovtoEstoque, lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then gError 103287
                
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103288
                
                'se é uma nota fiscal que não movimenta estoque
                If iTipoMovtoEstoque = 0 Then
                    dQuantidade = 0
                    dCustoUnitario = 0
                Else
                    gError 92985
                End If
                
            End If
            
            If dQuantidade <> 0 Then
        
                'Converte a unidade de medida da quantidade do Movimento de Estoque para a UM de Estoque
                lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUM, sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 92986
                
                dQuantidade = dQuantidade * dFator
                
                dCustoUnitario = dCusto / dQuantidade
    
            End If
            
        Case TRANSACAOCTBORIGEM_MOVIMENTOESTOQUE
    
            lErro = Comando_Executar(alComando(2), "SELECT MVE2.Custo, MVE2.Quantidade, MVE2.SiglaUM, ClasseUM, SiglaUMEstoque FROM MovimentoEstoque As MVE1, Produtos, MovimentoEstoque As MVE2 WHERE MVE1.NumIntDoc = ? AND MVE1.FilialEmpresa = MVE2.FilialEmpresa AND MVE1.Codigo = MVE2.Codigo AND MVE2.Produto = ? AND Produtos.Codigo = MVE2.Produto", dCusto, dQuantidade, sSiglaUM, iClasseUM, sSiglaUMEstoque, lNumIntDoc, sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 92987
                
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92988
            
            If lErro = AD_SQL_SEM_DADOS Then gError 92989
            
            'Converte a unidade de medida da quantidade do Movimento de Estoque para a UM de Estoque
            lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUM, sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 92990
            
            dQuantidade = dQuantidade * dFator
            
            dCustoUnitario = dCusto / dQuantidade

        Case Else
            gError 92991
        
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Retorna_CustoUnitario = SUCESSO
    
    Exit Function
    
Erro_Retorna_CustoUnitario:

    Retorna_CustoUnitario = gErr

    Select Case gErr
    
        Case 92980
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92981, 92982
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRANSACAOCTB2", gErr, iTransacao)

        Case 92983, 92984
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL3", gErr, lNumIntDoc, sProduto)
            
        Case 92985
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNF_NAO_CADASTRADO", gErr, lNumIntDoc, sProduto)
            
        Case 92986, 92990, 103287, 103288
            
        Case 92987, 92988
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE7", gErr, lNumIntDoc, sProduto)

        Case 92989
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO3", gErr, lNumIntDoc, sProduto)

        Case 92991
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_ORIGEM_CTB_INEX", gErr, iTransacao)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151906)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'***ALTERACAO POR TULIO EM 29/05***'
Public Function Produto_Grava_ProdutoCodBarras(ByVal sProduto As String, ByVal colCodBarras As Collection) As Long
'Exclui os ProdutoCodBarras do produto sProduto
'Insere em ProdutoCodBarras os registros passados como parâmetro na colecao
'sProduto eh parametro de INPUT e traz o codigo do produto
'colCodBarras eh parametro de INPUT e traz os codigos de barra associados ao
'codigo do produto em questao
'DEVE SER CHAMADA EM TRANSACAO!!!!!!

Dim lErro As Long

On Error GoTo Erro_Produto_Grava_ProdutoCodBarras

    'Exclui os codigos de barra do produto em questao
    lErro = Produto_Exclui_ProdutoCodBarras(sProduto)
    If lErro <> SUCESSO Then gError 101715

    'Insere os codigos de barra do produto em questao
    lErro = Produto_Insere_ProdutoCodBarras(sProduto, colCodBarras)
    If lErro <> SUCESSO Then gError 101716

    Produto_Grava_ProdutoCodBarras = SUCESSO

    Exit Function

Erro_Produto_Grava_ProdutoCodBarras:

    Produto_Grava_ProdutoCodBarras = gErr

    Select Case gErr

        Case 101715, 101716
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151907)

    End Select

    Exit Function

End Function

Public Function Produto_Exclui_ProdutoCodBarras(ByVal sProduto As String) As Long
'Exclui todos os registros que possuem codproduto = sproduto
'sproduto eh parametro de INPUT que traz o filtro para a exclusao, no caso, o
'produto..
'DEVE SER CHAMADA EM TRANSACAO!!!!!!!!!

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim sCodBarras As String

On Error GoTo Erro_Produto_Exclui_ProdutoCodBarras

    'abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 101724
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 101725
    
    'inicializa buffer de recebimento
    sCodBarras = String(STRING_PRODUTO_CODIGO_BARRAS, 0)

    'inicializa buffer de recebimento
    sCodBarras = String(STRING_PRODUTO_CODIGO_BARRAS, 0)

    'obtem o conjunto de registros que possuem codproduto = sproduto
    lErro = Comando_ExecutarPos(lComando, "SELECT CodBarras FROM ProdutoCodBarras WHERE CodProduto = ?", 0, sCodBarras, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 101719

    'tenta se posicionar no 1o registro, nao faz sentido tratar sem dados nesse caso.. logo, esse evento de "nao haver dados"
    'eh tratado como exclusao bem sucedida
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 101720

    'enquanto houverem registros a serem varridos no conjunto
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'deleta o registro apontado por lcomando
        lErro = Comando_ExecutarPos(lComando2, "DELETE FROM ProdutoCodBarras", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 101721
        
        'se posiciona no proximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 101722

    Loop

    'fecha comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Produto_Exclui_ProdutoCodBarras = SUCESSO

    Exit Function

Erro_Produto_Exclui_ProdutoCodBarras:

    Produto_Exclui_ProdutoCodBarras = gErr
        
    Select Case gErr

        Case 101719, 101720, 101722
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", gErr, "ProdutoCodBarras")
            
        Case 101721
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOCODBARRAS", gErr, sCodBarras, sProduto)
            
        Case 101724, 101725
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151908)
            
    End Select
    
    'fecha comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Public Function Produto_Insere_ProdutoCodBarras(ByVal sProduto As String, ByVal colCodBarras As Collection) As Long
'Insere os registros que estao na colecao + sproduto
'sproduto eh parametro de INPUT que traz o produto que sera relacionado com os codigos de barra
'colCodBarras eh parametro de INPUT que traz os codigos de barra a serem relacionados com o produto
'em questao
'DEVE SER CHAMADA EM TRANSACAO!!!!!!!!!

Dim lErro As Long
Dim lComando As Long
Dim vCodBarras As Variant

On Error GoTo Erro_Produto_Insere_ProdutoCodBarras

    'abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 101726
    
    'Para  cada registro da coleção
    For Each vCodBarras In colCodBarras

        'Insere o registro na tabela produtocodbarras
        lErro = Comando_Executar(lComando, "INSERT INTO ProdutoCodBarras (CodProduto,CodBarras) values (?,?)", sProduto, CStr(vCodBarras))
        If lErro <> AD_SQL_SUCESSO Then gError 101727
        
    Next

    Call Comando_Fechar(lComando)

    Produto_Insere_ProdutoCodBarras = SUCESSO

    Exit Function

Erro_Produto_Insere_ProdutoCodBarras:

    Produto_Insere_ProdutoCodBarras = gErr
        
    Select Case gErr

        Case 101726
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 101727
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOCODBARRAS", gErr, CStr(vCodBarras), sProduto)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151909)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function
'***FIM ALTERACAO POR TULIO EM 29/05***'

'inserida por tulio em 5/6/02
Sub Produto_Carrega_Log(objLog As ClassLog, objProduto As ClassProduto, iTipoLog As Integer)
'rotina para preencher um objlog de acordo com as informacoes de um produto
'objLog eh parametro de OUTPUT que retorna as informacoes do log
'objProduto eh parametro de INPUT que sera utilizado como insumo para a construcao do log
    
Dim vCodBarras As Variant
Dim objCategoriaItem As ClassProdutoCategoria
    
    'monta a string que representa o objProduto
    objLog.sLog = CStr(objProduto.dComprimento) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dCustoReposicao) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dEspessura) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dINSSPercBase) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dIPIAliquota) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dLargura) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dPercentMaisQuantCotAnt) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dPercentMaisReceb) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dPercentMenosQuantCotAnt) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dPercentMenosReceb) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dPesoBruto) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dPesoEspecifico) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dPesoLiq) & Chr(vbKeyEscape) & _
                  CStr(objProduto.dResiduo) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iApropriacaoCusto) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iAtivo) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iClasseUM) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iCompras) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iConsideraQuantCotAnt) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iControleEstoque) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iCreditoICMS) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iCreditoIPI) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iEmbalagem) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iEtiquetasCodBarras) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iFaturamento) & Chr(vbKeyEscape)
        
    objLog.sLog = objLog.sLog & _
                  CStr(objProduto.iFreteAgregaCusto) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iGerencial) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iICMSAgregaCusto) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iIPIAgregaCusto) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iKitBasico) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iKitInt) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iKitVendaComp) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iNatureza) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iNivel) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iOrigemMercadoria) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iPCP) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iPrazoValidade) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iRastro) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iRecebForaFaixa) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iTabelaPreco) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iTemFaixaReceb) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iTempoProducao) & Chr(vbKeyEscape) & _
                  CStr(objProduto.iTipo) & Chr(vbKeyEscape) & _
                  CStr(objProduto.lHorasMaquina) & Chr(vbKeyEscape) & _
                  objProduto.sCodigo & Chr(vbKeyEscape) & _
                  objProduto.sCodigoBarras & Chr(vbKeyEscape) & _
                  objProduto.sContaContabil & Chr(vbKeyEscape) & _
                  objProduto.sContaContabilProducao & Chr(vbKeyEscape)

    objLog.sLog = objLog.sLog & _
                  objProduto.sCor & Chr(vbKeyEscape) & _
                  objProduto.sDescricao & Chr(vbKeyEscape) & _
                  objProduto.sFigura & Chr(vbKeyEscape) & _
                  objProduto.sICMSAliquota & Chr(vbKeyEscape) & _
                  objProduto.sIPICodDIPI & Chr(vbKeyEscape) & _
                  objProduto.sIPICodigo & Chr(vbKeyEscape) & _
                  objProduto.sModelo & Chr(vbKeyEscape) & _
                  objProduto.sNomeReduzido & Chr(vbKeyEscape) & _
                  objProduto.sObsFisica & Chr(vbKeyEscape) & _
                  objProduto.sReferencia & Chr(vbKeyEscape) & _
                  objProduto.sSiglaUMCompra & Chr(vbKeyEscape) & _
                  objProduto.sSiglaUMEstoque & Chr(vbKeyEscape) & _
                  objProduto.sSiglaUMVenda & Chr(vbKeyEscape) & _
                  objProduto.sSituacaoTribECF & Chr(vbKeyEscape) & _
                  objProduto.sSubstituto1 & Chr(vbKeyEscape) & _
                  objProduto.sSubstituto2 & Chr(vbKeyEscape) & Chr(vbKeyControl)
                  
                  
    'Para cada codigo de barra na colecao de codigos de barra
    For Each vCodBarras In objProduto.colCodBarras
    
        'agrega na string os codigos de barra
        objLog.sLog = objLog.sLog & CStr(vCodBarras) & Chr(vbKeyEscape)

    Next
    
    'coloca o shift no final para delimitar o fim do codigo de barras
    objLog.sLog = objLog.sLog & Chr(vbKeyShift)
                  
    'Para cada item de categoria na colecao de itens de categoria
    For Each objCategoriaItem In objProduto.colCategoriaItem
    
        'agrega na string os itens de categoria
        objLog.sLog = objLog.sLog & Chr(vbKeyEscape) & _
                      objCategoriaItem.sCategoria & Chr(vbKeyEscape) & _
                      objCategoriaItem.sItem & Chr(vbKeyEscape) & _
                      objCategoriaItem.sProduto & Chr(vbKeyShift)
    Next
        
    'coloca o end no fim
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)
        
    'atribui o tipo de operacao ao objlog
    objLog.iOperacao = iTipoLog

    Exit Sub

End Sub

Public Function Kit_Muda_Situacao_Versao(ByVal sProdutoRaiz As String, ByVal sProxVersao As String, ByVal iNovaSituacao As Integer) As Long
'Altera a Situacao Do Kit com produtoRaiz = sProdutoRaiz e Versao = sVersao para Situacao = "iNovaSituacao"

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim sSelect As String
Dim sProdTemp As String
Dim sUpdate As String

On Error GoTo Erro_Kit_Muda_Situacao_Versao

    'Abertura dos comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 106230
    Next
    
    'Inicializa a string
    sProdTemp = String(STRING_PRODUTO, 0)
    
    'Guarda a Selecao SQL
    sSelect = "SELECT ProdutoRaiz FROM Kit WHERE ProdutoRaiz = ? AND Versao = ?"
    
    'Prepara a execucao do comando SQL
    lErro = Comando_ExecutarPos(alComando(0), sSelect, 0, sProdTemp, sProdutoRaiz, sProxVersao)
    If lErro <> AD_SQL_SUCESSO Then gError 106231
    
    'Buscar o Primeiro Registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106232
    
    'Se nao encontrou => Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 106233
    
    'Guarda o Comando SQL
    sUpdate = "UPDATE Kit SET Situacao = ?"
    
    'Executa a atualizacao
    lErro = Comando_ExecutarPos(alComando(1), sUpdate, alComando(0), iNovaSituacao)
    If lErro <> AD_SQL_SUCESSO Then gError 106234
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Kit_Muda_Situacao_Versao = SUCESSO
    
    Exit Function
    
Erro_Kit_Muda_Situacao_Versao:

    Kit_Muda_Situacao_Versao = gErr
    
    Select Case gErr
    
        Case 106230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 106231, 106232
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KIT", gErr)
            
        Case 106233
            
        Case 106234
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_KIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151910)
        
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Function SldDiaForn_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui os registros do produto fisicamente da tabela de SldDiaForn

Dim lErro As Long
Dim iIndice As Integer
Dim sProdutoBD As String
Dim alComando(1) As Long

On Error GoTo Erro_SldDiaForn_Exclui_Produto

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 108770
    Next
    
    'Inicializa o buffer
    sProdutoBD = String(STRING_PRODUTO, 0)
        
    'Prepara a execucao
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto FROM SldDiaForn WHERE Produto = ?", 0, sProdutoBD, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 108771
    
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108772
    
    'Enquanto encontrar ... exclui
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Apaga o registro
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM SldDiaForn", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 108773
        
        'Busca o proximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108774
    
    Loop

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldDiaForn_Exclui_Produto = SUCESSO

    Exit Function
    
Erro_SldDiaForn_Exclui_Produto:

    SldDiaForn_Exclui_Produto = gErr

    Select Case gErr
    
        Case 108770
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108771, 108772, 108774
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFORN", gErr, sProduto)

        Case 108773
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDDIAFORN", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151911)
    
    End Select
    
    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Function SldMesForn_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui os registros do produto fisicamente da tabela de SldMesForn

Dim lErro As Long
Dim iIndice As Integer
Dim sProdutoBD As String
Dim alComando(1) As Long

On Error GoTo Erro_SldMesForn_Exclui_Produto

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 108770
    Next
    
    'Inicializa o buffer
    sProdutoBD = String(STRING_PRODUTO, 0)
        
    'Prepara a execucao
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto FROM SldMesForn WHERE Produto = ?", 0, sProdutoBD, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 108771
    
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108772
    
    'Enquanto encontrar ... exclui
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Apaga o registro
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM SldMesForn", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 108773
        
        'Busca o proximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108774
    
    Loop

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesForn_Exclui_Produto = SUCESSO

    Exit Function
    
Erro_SldMesForn_Exclui_Produto:

    SldMesForn_Exclui_Produto = gErr

    Select Case gErr
    
        Case 108770
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108771, 108772, 108774
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SldMesForn", gErr, sProduto)

        Case 108773
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SldMesForn", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151912)
    
    End Select
    
    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Public Function MovEstoque_Grava_Generico1(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Grava o movimento de estoque

Dim lErro As Long
Dim objItemMovEstoque As ClassItemMovEstoque

On Error GoTo Erro_MovEstoque_Grava_Generico1

    lErro = CF("MovEstoque_Grava", objMovEstoque)
    If lErro <> SUCESSO Then gError 36493

    Set objItemMovEstoque = objMovEstoque.colItens.Item(1)

    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objItemMovEstoque.lNumIntDoc, 0, 0, objItemMovEstoque.dtData)
    If lErro <> SUCESSO Then gError 36494

    MovEstoque_Grava_Generico1 = SUCESSO

    Exit Function

Erro_MovEstoque_Grava_Generico1:

    MovEstoque_Grava_Generico1 = gErr

    Select Case gErr

        Case 36493, 36494

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151913)

    End Select

    Exit Function

End Function

Public Function MovimentoEstoque_Trata_Exclusao1(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long

On Error GoTo Erro_MovimentoEstoque_Trata_Exclusao1

    'trata a exclusão do movimento de estoque
    lErro = CF("MovimentoEstoque_Trata_Exclusao_Trans", objMovEstoque, objContabil)
    If lErro <> AD_SQL_SUCESSO Then gError 105134

    MovimentoEstoque_Trata_Exclusao1 = SUCESSO

    Exit Function

Erro_MovimentoEstoque_Trata_Exclusao1:

    MovimentoEstoque_Trata_Exclusao1 = gErr

    Select Case gErr

        Case 105134

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151914)

    End Select

    Exit Function

End Function

Public Function MovEstoque_ReqProducao_Exclui_Trans0(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a Requisição de producao

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim objItemMovEstoque As ClassItemMovEstoque
Dim iIndice As Integer

On Error GoTo Erro_MovEstoque_ReqProducao_Exclui_Trans0

    'Abertura comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 89906
    Next

    objMovEstoque1.iFilialEmpresa = objMovEstoque.iFilialEmpresa
    objMovEstoque1.lCodigo = objMovEstoque.lCodigo

    'Lê os ítens do Movimento de Estoque
    lErro = CF("MovEstoqueItens_Le1", objMovEstoque1, MOV_EST_REQ_PRODUCAO)
    If lErro <> SUCESSO And lErro <> 30116 Then gError 89908

    lErro = CF("MovEstoque_Trata_Grade", objMovEstoque1)
    If lErro <> SUCESSO Then gError 117636

    'Leitura e lock Item OP
    For Each objItemMovEstoque In objMovEstoque1.colItens

        objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO

        'Testa a producao do movimento de estoque
        lErro = CF("MovEstoque_ReqProducao_Grava1", alComando(1), alComando(2), alComando(3), objItemMovEstoque)
        If lErro <> SUCESSO Then gError 89909
        
    Next

    'trata a exclusão do movimento de estoque
    lErro = CF("MovimentoEstoque_Trata_Exclusao_Trans", objMovEstoque, objContabil)
    If lErro <> AD_SQL_SUCESSO Then gError 89910

    lErro = MovimentoEstoqueGrade_Exclui_Trans(objMovEstoque.iFilialEmpresa, objMovEstoque.lCodigo, MOV_EST_REQ_PRODUCAO)
    If lErro <> AD_SQL_SUCESSO Then gError 126674

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_REQPROD, objMovEstoque.lCodigo, "", objMovEstoque.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 185852
    '############################################

    'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovEstoque_ReqProducao_Exclui_Trans0 = SUCESSO

    Exit Function

Erro_MovEstoque_ReqProducao_Exclui_Trans0:

    MovEstoque_ReqProducao_Exclui_Trans0 = gErr

    Select Case gErr

        Case 89906
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89907
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89908, 89909, 89910, 117636, 126674, 185852

        Case 89911
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151915)

    End Select

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MovEstoque_ReqProducao_Exclui0(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a Requisição de producao

Dim lErro As Long

On Error GoTo Erro_MovEstoque_ReqProducao_Exclui0

    'Testa a producao do movimento de estoque
    lErro = CF("MovEstoque_ReqProducao_Exclui_Trans0", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105149
        
    MovEstoque_ReqProducao_Exclui0 = SUCESSO

    Exit Function

Erro_MovEstoque_ReqProducao_Exclui0:

    MovEstoque_ReqProducao_Exclui0 = gErr

    Select Case gErr

        Case 105148

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151916)

    End Select

    Exit Function

End Function

Public Function MovEstoque_Producao_Grava_Trans(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Grava a producao do movimento de estoque

Dim sComando_SQL As String
Dim lErro As Long
Dim alComando(0 To 12) As Long
Dim alComando1(1 To 8) As Long
Dim objItemMovEstoque As ClassItemMovEstoque
Dim tItemOP As typeItemOP
Dim iIndice As Integer
Dim dFator As Double
Dim dQuantConv As Double
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim objProduto As New ClassProduto
Dim objReservaProd As ClassReservaProd
Dim colReservaProd As New Collection

On Error GoTo Erro_MovEstoque_Producao_Grava_Trans

    'Abertura comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 34678
    Next

    'Abertura comando
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 55298
    Next

    lErro = CF("MovEstoque_Trata_Grade", objMovEstoque)
    If lErro <> SUCESSO Then gError 126677

    'Leitura e lock Item OP
    For Each objItemMovEstoque In objMovEstoque.colItens

        objItemMovEstoque.lCodigo = objMovEstoque.lCodigo
        objItemMovEstoque.iFilialEmpresa = objMovEstoque.iFilialEmpresa

        Set objReservaProd = Nothing

        'Testa a producao do movimento de estoque
        lErro = MovEstoque_Producao_Grava1(alComando, objItemMovEstoque, objMovEstoque.colItens, objReservaProd)
        If lErro <> SUCESSO Then gError 55313

        If Not objReservaProd Is Nothing Then colReservaProd.Add objReservaProd

    Next

    lErro = CF("MovEstoque_Grava", objMovEstoque)
    If lErro <> SUCESSO Then gError 34700

    'grava/atualiza a reserva se a produção estiver associada a um pedido de venda
    lErro = CF("ReservasOPPV_Grava", colReservaProd)
    If lErro <> SUCESSO Then gError 92144

    For Each objItemMovEstoque In objMovEstoque.colItens

        'Verifica se todos os itens da OP estão baixados, se tiverem ==> baixa a OP
        lErro = CF("OrdemDeProducao_Baixa1", alComando1, objItemMovEstoque.sOPCodigo)
        If lErro <> SUCESSO Then gError 55299

    Next
    
    '####################################################################
    'Inserido por Wagner 14/03/2006
    lErro = MovEstoque_Producao_Atualiza_SerieProx_Produto(objMovEstoque)
    If lErro <> SUCESSO Then gError 141935
    '####################################################################

    Set objItemMovEstoque = objMovEstoque.colItens(1)

    If Not (objContabil Is Nothing) Then

        'Grava os dados contábeis (contabilidade)
        lErro = objContabil.Contabil_Gravar_Registro(objItemMovEstoque.lNumIntDoc, 0, 0, objItemMovEstoque.dtData, LANPENDENTE_APROPR_CRPROD)
        If lErro <> SUCESSO Then gError 36490
        
    End If

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Grava", objMovEstoque.objProjetoInfo, PRJ_CR_TIPO_PRODENTRADA, objMovEstoque.lCodigo, "", objMovEstoque.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 185856
    '############################################

    'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechamento comando
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    MovEstoque_Producao_Grava_Trans = SUCESSO

    Exit Function

Erro_MovEstoque_Producao_Grava_Trans:

    MovEstoque_Producao_Grava_Trans = gErr

    Select Case gErr

        Case 34678, 55298
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 34700, 36490, 55299, 55313, 92144, 126677, 141935, 185856

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151917)

    End Select

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechamento comando
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Exit Function

End Function

Public Function MovEstoque_Producao_Grava0(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Grava a producao do movimento de estoque

Dim lErro As Long

On Error GoTo Erro_MovEstoque_Producao_Grava0

    'Testa a producao do movimento de estoque
    lErro = CF("MovEstoque_Producao_Grava_Trans", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105156

    MovEstoque_Producao_Grava0 = SUCESSO

    Exit Function

Erro_MovEstoque_Producao_Grava0:

    MovEstoque_Producao_Grava0 = gErr

    Select Case gErr

        Case 105156

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151918)

    End Select

    Exit Function

End Function

Public Function MovEstoque_Producao_Exclui_Trans(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long
Dim alComando(0 To 11) As Long
Dim lTransacao As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim objItemMovEstoque As ClassItemMovEstoque
Dim iIndice As Integer

On Error GoTo Erro_MovEstoque_Producao_Exclui_Trans

    'Abertura comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 89895
    Next

    objMovEstoque1.iFilialEmpresa = objMovEstoque.iFilialEmpresa
    objMovEstoque1.lCodigo = objMovEstoque.lCodigo

    'Lê os ítens do Movimento de Estoque
    lErro = CF("MovEstoqueItens_Le1", objMovEstoque1, MOV_EST_PRODUCAO)
    If lErro <> SUCESSO And lErro <> 30116 Then gError 89897

    lErro = CF("MovEstoque_Trata_Grade", objMovEstoque1)
    If lErro <> SUCESSO Then gError 126678

    'Leitura e lock Item OP
    For Each objItemMovEstoque In objMovEstoque1.colItens

        objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_PRODUCAO
        
        'Testa a producao do movimento de estoque
        lErro = MovEstoque_Producao_Grava1(alComando, objItemMovEstoque, objMovEstoque1.colItens)
        If lErro <> SUCESSO Then gError 89898
        
    Next

    'trata a exclusão do movimento de estoque
    lErro = MovimentoEstoque_Trata_Exclusao_Trans(objMovEstoque, objContabil)
    If lErro <> AD_SQL_SUCESSO Then gError 89899

    lErro = MovimentoEstoqueGrade_Exclui_Trans(objMovEstoque.iFilialEmpresa, objMovEstoque.lCodigo, MOV_EST_PRODUCAO)
    If lErro <> AD_SQL_SUCESSO Then gError 126679

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_PRODENTRADA, objMovEstoque.lCodigo, "", objMovEstoque.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 185853
    '############################################

    'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovEstoque_Producao_Exclui_Trans = SUCESSO

    Exit Function

Erro_MovEstoque_Producao_Exclui_Trans:

    MovEstoque_Producao_Exclui_Trans = gErr

    Select Case gErr

        Case 89895
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89896
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89897, 89898, 89899, 126678, 126679, 185853

        Case 89900
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151919)

    End Select

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MovEstoque_Producao_Exclui0(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long

On Error GoTo Erro_MovEstoque_Producao_Exclui0

    'Testa a producao do movimento de estoque
    lErro = CF("MovEstoque_Producao_Exclui_Trans", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105160
        
    MovEstoque_Producao_Exclui0 = SUCESSO

    Exit Function

Erro_MovEstoque_Producao_Exclui0:

    MovEstoque_Producao_Exclui0 = gErr

    Select Case gErr

        Case 105160

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151920)

    End Select

    Exit Function

End Function

Function MovEstoque_Interno_Grava_Trans(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lComando As Long
Dim alComando(0 To 12) As Long
Dim alComando1(1 To 8) As Long
Dim objItemMovEstoque As ClassItemMovEstoque
Dim iIndice As Integer
Dim tItemOP As typeItemOP
Dim dQuantConv As Double, dFator As Double
Dim sComando_SQL As String
Dim iSituacao As Integer
Dim objReservaProd As ClassReservaProd
Dim colReservaProd As New Collection

On Error GoTo Erro_MovEstoque_Interno_Grava_Trans

    'Abre os comandos de Transação
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 19486
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 30891
    Next
        
    'Abertura comando
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 55301
    Next
        
    For Each objItemMovEstoque In objMovEstoque.colItens

        'Para Cada Item de colItens que se refere a uma requisiacao de producao ou devolucao de material requisitado ou estorno destes movimentos
        If objItemMovEstoque.iTipoMov = MOV_EST_REQ_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_DEV_MATERIAL_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_DEV_MATERIAL_PRODUCAO Then

            'Testa o Movimento de Estoque de Requisição de Produção
            lErro = CF("MovEstoque_ReqProducao_Grava1", lComando, alComando(11), alComando(12), objItemMovEstoque)
            If lErro <> SUCESSO Then gError 55311

        'Para Cada Item de colItens que se refere a producao
        ElseIf objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO Then
        
            objItemMovEstoque.lCodigo = objMovEstoque.lCodigo
        
            Set objReservaProd = Nothing
        
            'Testa a producao do movimento de estoque
            lErro = MovEstoque_Producao_Grava1(alComando, objItemMovEstoque, objMovEstoque.colItens, objReservaProd)
            If lErro <> SUCESSO Then gError 55312
            
            If Not objReservaProd Is Nothing Then colReservaProd.Add objReservaProd
            
        ElseIf objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_PRODUCAO Then
            
            'Testa a producao do movimento de estoque
            lErro = MovEstoque_Producao_Grava1(alComando, objItemMovEstoque, objMovEstoque.colItens)
            If lErro <> SUCESSO Then gError 92142
            
        End If
        
    Next
    
    lErro = CF("MovEstoque_Grava", objMovEstoque)
    If lErro <> SUCESSO Then gError 30897

    'grava/atualiza a reserva se a produção estiver associada a um pedido de venda
    lErro = CF("ReservasOPPV_Grava", colReservaProd)
    If lErro <> SUCESSO Then gError 92143

    For Each objItemMovEstoque In objMovEstoque.colItens

        If objItemMovEstoque.iTipoMov = MOV_EST_PRODUCAO Then
        
            'Verifica se todos os itens da OP estão baixados, se tiverem ==> baixa a OP
            lErro = CF("OrdemDeProducao_Baixa1", alComando1, objItemMovEstoque.sOPCodigo)
            If lErro <> SUCESSO Then gError 55300
            
        End If

    Next
    
    Set objItemMovEstoque = objMovEstoque.colItens(1)

    If Not (objContabil Is Nothing) Then

        'Grava os dados contábeis (contabilidade)
        lErro = objContabil.Contabil_Gravar_Registro(objItemMovEstoque.lNumIntDoc, 0, 0, objItemMovEstoque.dtData)
        If lErro <> SUCESSO Then gError 36489

    End If
    
    'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
   
    'Fechamento comando
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
   
    Call Comando_Fechar(lComando)

    MovEstoque_Interno_Grava_Trans = SUCESSO

    Exit Function

Erro_MovEstoque_Interno_Grava_Trans:

    MovEstoque_Interno_Grava_Trans = gErr

    Select Case gErr

        Case 30897, 36489, 55300, 55311, 55312, 92142, 92143

        Case 19486, 30891, 55301
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151921)

    End Select

    'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Fechamento comando
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function MovEstoque_Interno_Grava0(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long

On Error GoTo Erro_MovEstoque_Interno_Grava0

    'Testa o Movimento de Estoque de Requisição de Produção
    lErro = CF("MovEstoque_Interno_Grava_Trans", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105180

    MovEstoque_Interno_Grava0 = SUCESSO

    Exit Function

Erro_MovEstoque_Interno_Grava0:

    MovEstoque_Interno_Grava0 = gErr

    Select Case gErr

        Case 105180

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151922)

    End Select

    Exit Function

End Function

Public Function MovEstoque_Exclui_Trans(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'trata a exclusão do movimento de estoque
'IMPORTANTE: Tem que ser chamda dentro de transacao

Dim objItemMovEstoque As ClassItemMovEstoque
Dim lErro As Long
Dim alComando(0 To 13) As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim objMovEstoque2 As New ClassMovEstoque
Dim objItemMovEstoqueAux As ClassItemMovEstoque
Dim iIndice As Integer

On Error GoTo Erro_MovEstoque_Exclui_Trans

    'Abertura comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 89895
    Next

    objMovEstoque1.iFilialEmpresa = objMovEstoque.iFilialEmpresa
    objMovEstoque1.lCodigo = objMovEstoque.lCodigo

    'Lê os ítens do Movimento de Estoque
    lErro = CF("MovEstoqueItens_Le", objMovEstoque1)
    If lErro <> SUCESSO And lErro <> 30116 Then gError 89915

    For Each objItemMovEstoque In objMovEstoque1.colItens
    
        '################################################################
        'Inserido do Wagner 14/09/2006
        'Leitura necessária para obter as informações necessárias para
        'tratar movimentos ligados a produção
        Set objMovEstoque2 = New ClassMovEstoque

        objMovEstoque2.iFilialEmpresa = objMovEstoque.iFilialEmpresa
        objMovEstoque2.lCodigo = objMovEstoque.lCodigo

        'Lê os ítens do Movimento de Estoque
        lErro = CF("MovEstoqueItens_Le1", objMovEstoque2, objItemMovEstoque.iTipoMov)
        If lErro <> SUCESSO And lErro <> 55387 Then gError 89915
        
        For Each objItemMovEstoqueAux In objMovEstoque2.colItens
            If objItemMovEstoqueAux.lNumIntDoc = objItemMovEstoque.lNumIntDoc Then
                objItemMovEstoque.sOPCodigo = objItemMovEstoqueAux.sOPCodigo
                objItemMovEstoque.sProdutoOP = objItemMovEstoqueAux.sProdutoOP
                Exit For
            End If
        Next
        '################################################################
        
        'Seleciona o TipoMov correspondente ao Estorno
        Select Case objItemMovEstoque.iTipoMov

            Case MOV_EST_REQ_PRODUCAO
                objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO

            Case MOV_EST_PRODUCAO
                objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_PRODUCAO

            Case MOV_EST_DEV_MATERIAL_PRODUCAO
                objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_DEV_MATERIAL_PRODUCAO

        End Select

        'Para Cada Item de colItens que se refere a uma requisiacao de producao ou devolucao de material requisitado ou estorno destes movimentos
        If objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_REQ_PRODUCAO Or objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_DEV_MATERIAL_PRODUCAO Then

            'Testa o Movimento de Estoque de Requisição de Produção
            lErro = CF("MovEstoque_ReqProducao_Grava1", alComando(13), alComando(11), alComando(12), objItemMovEstoque)
            If lErro <> SUCESSO Then gError 89913

        'Para Cada Item de colItens que se refere a producao
        ElseIf objItemMovEstoque.iTipoMov = MOV_EST_ESTORNO_PRODUCAO Then
        
            'Testa a producao do movimento de estoque
            lErro = MovEstoque_Producao_Grava1(alComando, objItemMovEstoque, objMovEstoque1.colItens)
            If lErro <> SUCESSO Then gError 89914
            
        End If
        
    Next

    'trata a exclusão do movimento de estoque
    lErro = MovimentoEstoque_Trata_Exclusao_Trans(objMovEstoque, objContabil)
    If lErro <> AD_SQL_SUCESSO Then gError 89894

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovEstoque_Exclui_Trans = SUCESSO
    
    Exit Function

Erro_MovEstoque_Exclui_Trans:

    MovEstoque_Exclui_Trans = gErr
    
    Select Case gErr

        Case 89894, 89913, 89914, 89915
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151923)
    
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MovEstoque_Exclui0(ByVal objMovEstoque As ClassMovEstoque, ByVal objContabil As ClassContabil) As Long
'trata a exclusão do movimento de estoque

Dim lErro As Long

On Error GoTo Erro_MovEstoque_Exclui0

    'Lê os ítens do Movimento de Estoque
    lErro = CF("MovEstoque_Exclui_Trans", objMovEstoque, objContabil)
    If lErro <> SUCESSO Then gError 105184

    MovEstoque_Exclui0 = SUCESSO
    
    Exit Function

Erro_MovEstoque_Exclui0:

    MovEstoque_Exclui0 = gErr
    
    Select Case gErr

        Case 105184
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151924)
    
    End Select

    Exit Function

End Function

Function Inventario_Grava_Trans(ByVal objInventario As ClassInventario, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lCodAuto As Long
Dim sComando_SQL As String
Dim lItemCodigo As Long
Dim iIndice As Integer
Dim dFator As Double
Dim objItemInventario As ClassItemInventario
Dim objMovEstoque As New ClassMovEstoque
Dim tEstoqueProduto As typeEstoqueProduto
Dim objProduto As New ClassProduto
Dim dQuantConv As Double
Dim objItemMovEstoque As ClassItemMovEstoque
Dim dDiferencaQuantidade As Double
Dim dQuantUltrapassaDisp As Double
Dim dQuantUltrapassaConsig As Double
Dim lNumIntDocOrigem As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim iLinha As Integer
Dim iTemp As Integer
Dim dCusto As Double
Dim dCodigoNumerico As Double

On Error GoTo Erro_Inventario_Grava_Trans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 41018
    Next

    objMovEstoque.iFilialEmpresa = objInventario.iFilialEmpresa
    objMovEstoque.dtData = objInventario.dtData
    objMovEstoque.dtHora = objInventario.dtHora
    objMovEstoque.iTipoMov = 0

    'verifica se o codigo de inventario já foi utilizado anteriormente
    lErro = Inventario_TestaExistencia(objInventario.sCodigo, objInventario.iFilialEmpresa, lNumIntDocOrigem)
    If lErro <> SUCESSO And lErro <> 41023 And lErro <> 41026 And lErro <> 89845 Then gError 41027

    If lErro = 41023 Then gError 41028
    If lErro = 41026 Then gError 41029

    'Se for uma alteração de data/hora
    If lErro = 89845 Then

        'altera os dados do Inventário
        lErro = Inventario_Altera(objInventario)
        If lErro <> SUCESSO Then gError 89925

        objMovEstoque1.iFilialEmpresa = objInventario.iFilialEmpresa

        'Lê o movimento de estoque associado ao NumIntDocOrigem, TipoNumIntDocOrigem em questão para descobrir o codigo do movimento de estoque associado ao inventário
        lErro = CF("MovEstoque_Le_NumIntDocOrigem", objMovEstoque1, MOVEST_TIPONUMINTDOCORIGEM_INVENTARIO, lNumIntDocOrigem)
        If lErro <> SUCESSO And lErro <> 89850 Then gError 89852

        'se não tiver nenhum movimento de estoque associado ao inventario ==> erro
        If lErro = 89850 Then gError 89853

        Set objItemMovEstoque = objMovEstoque1.colItens(1)

        objMovEstoque.lCodigo = objItemMovEstoque.lCodigo

        'Lê os ítens do Movimento de Estoque
        lErro = CF("MovEstoqueItens_Le", objMovEstoque)
        If lErro <> SUCESSO And lErro <> 30116 Then gError 89915

        'faz a alteração de data/hora e rastreamento
        lErro = CF("MovEstoque_Grava", objMovEstoque)
        If lErro <> SUCESSO Then gError 89854

        If Not (objContabil Is Nothing) Then
            'faz a alteração dos dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objItemMovEstoque.lNumIntDoc, 0, 0, objItemMovEstoque.dtData)
            If lErro <> SUCESSO Then gError 89855
        End If
    Else

        lErro = CF("ItemInventario_Automatico_EmTrans", lItemCodigo, objInventario.colItens.Count)
        If lErro <> SUCESSO Then gError 41031

        lErro = CF("MovEstoque_Automatico_EmTransacao", giFilialEmpresa, lCodAuto)
        If lErro <> SUCESSO Then gError 41030

        objMovEstoque.lCodigo = lCodAuto

        For Each objItemInventario In objInventario.colItens

            iLinha = iLinha + 1

            objItemInventario.lNumIntDoc = lItemCodigo

            tEstoqueProduto.sProduto = String(STRING_PRODUTO, 0)

            sComando_SQL = "SELECT Produto, Almoxarifado, DataInventario, SaldoInicial, DataInicial, QuantidadeInicial, QuantDispNossa, QuantReservada, QuantEmpenhada, QuantRecIndl, QuantIndOutras, " & _
            "QuantDefeituosa, QuantConsig3, QuantConsig, QuantDemo3, QuantDemo, QuantConserto3, QuantConserto, QuantOutras3, QuantOutras, QuantBenef, QuantBenef3 FROM EstoqueProduto WHERE Produto = ? AND Almoxarifado = ?"

            lErro = Comando_ExecutarPos(alComando(1), sComando_SQL, 0, tEstoqueProduto.sProduto, tEstoqueProduto.iAlmoxarifado, tEstoqueProduto.dtDataInventario, tEstoqueProduto.dSaldoInicial, tEstoqueProduto.dtDataInicial, tEstoqueProduto.dQuantidadeInicial, tEstoqueProduto.dQuantDispNossa, tEstoqueProduto.dQuantReservada, tEstoqueProduto.dQuantEmpenhada, tEstoqueProduto.dQuantRecIndl, tEstoqueProduto.dQuantInd, tEstoqueProduto.dQuantDefeituosa, tEstoqueProduto.dQuantConsig3, tEstoqueProduto.dQuantConsig, tEstoqueProduto.dQuantDemo3, tEstoqueProduto.dQuantDemo, tEstoqueProduto.dQuantConserto3, tEstoqueProduto.dQuantConserto, tEstoqueProduto.dQuantOutras3, tEstoqueProduto.dQuantOutras, tEstoqueProduto.dQuantBenef, tEstoqueProduto.dQuantBenef3, objItemInventario.sProduto, objItemInventario.iAlmoxarifado)
            If lErro <> AD_SQL_SUCESSO Then gError 41033

            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 41034

            If lErro = AD_SQL_SEM_DADOS Then gError 41035

            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 41036

'            If tEstoqueProduto.dtDataInventario > objInventario.dtData Then gError 55454

            objProduto.sCodigo = objItemInventario.sProduto

            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 41037

            If lErro = 28030 Then gError 41038

            dQuantConv = objItemInventario.dQuantidade - objItemInventario.dQuantEst

            If objItemInventario.sSiglaUM <> objProduto.sSiglaUMEstoque Then

                lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemInventario.sSiglaUM, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 41039

                dQuantConv = dQuantConv * dFator

            Else
                dFator = 1
            End If
            
            'se não mencionar o lote ==> verificar se a quantidade encontrada é menor do que a quantidade em reserva, se for ==> erro (ou seja, tem que abrir mão das reservas antes).
            'se mencionar lote, não pode verificar a quantidade vs a quantidade reservada pois o produto pode estar distribuido por varios lotes. Para isto, existe um relatório que lista os produtos que tem no estoque quantidade abaixo da reservada.
            'o usuário poderá acertar esta situação pelo inventário que permite alterar só o estoque, o estoque junto com o lote ou só o lote.
            If Len(Trim(objItemInventario.sLote)) = 0 Then
                If objItemInventario.iTipo = TIPO_QUANT_DISPONIVEL_NOSSA Or objItemInventario.iTipo = TIPO_QUANT_DISPONIVEL_NOSSA_CI Or (objInventario.dtData = gdtDataHoje And objItemInventario.iTipo = TIPO_QUANT_DISPONIVEL_NOSSA_CI2P) Then
                    If (objItemInventario.dQuantidade * dFator) - tEstoqueProduto.dQuantReservada < 0 Then gError 90828
                ElseIf objItemInventario.iTipo = TIPO_QUANT_3_CONSIG Or objItemInventario.iTipo = TIPO_QUANT_3_CONSIG_CI Then
                    If (objItemInventario.dQuantidade * dFator) - tEstoqueProduto.dQuantReservadaConsig < 0 Then gError 92475
                End If
            End If
            
            'o custo em item inventario é o custo unitário na unidade informada pelo usuario no inventario
'            dCusto = Abs(objItemInventario.dCusto * (objItemInventario.dQuantidade - objItemInventario.dQuantEst))
            
            dCusto = objItemInventario.dCusto
            
            lErro = Inventario_Grava1(objMovEstoque, objItemInventario, tEstoqueProduto, dQuantConv, objProduto, dCusto, dFator)
            If lErro <> SUCESSO Then gError 41640

            lItemCodigo = lItemCodigo + 1

            'Atualiza a data do inventario
            sComando_SQL = "UPDATE EstoqueProduto SET DataInventario = ?, DataUltAtualizacao = ?, Exportado = ? "
            lErro = Comando_ExecutarPos(alComando(2), sComando_SQL, alComando(1), objInventario.dtData, Date, 0)
            If lErro <> AD_SQL_SUCESSO Then gError 41042

        Next

        If objMovEstoque.colItens.Count > 0 Then

            lErro = CF("MovEstoque_Grava", objMovEstoque)
            If lErro <> SUCESSO Then gError 41040

            Set objItemMovEstoque = objMovEstoque.colItens(1)

            If Not (objContabil Is Nothing) Then

                'Grava os dados contábeis (contabilidade)
                lErro = objContabil.Contabil_Gravar_Registro(objItemMovEstoque.lNumIntDoc, 0, 0, objItemMovEstoque.dtData)
                If lErro <> SUCESSO Then gError 36497
                
            End If

        End If

        For iIndice = 1 To objInventario.colItens.Count

            Set objItemInventario = objInventario.colItens(iIndice)
            Set objItemMovEstoque = objMovEstoque.colItens(iIndice)
            
            If IsNumeric(objInventario.sCodigo) Then
                dCodigoNumerico = Round(StrParaDbl(objInventario.sCodigo))
            Else
                dCodigoNumerico = 0
            End If

            sComando_SQL = "INSERT INTO Inventario (NumIntDoc, FilialEmpresa, Codigo, Data, Produto, SiglaUM, Quantidade, QuantEst, Custo, Almoxarifado, Etiqueta, Tipo, ContaContabilEst, ContaContabilInv, Hora, AtualizaSoLote,CodigoNumerico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
            With objItemInventario
                lErro = Comando_Executar(alComando(0), sComando_SQL, .lNumIntDoc, objInventario.iFilialEmpresa, objInventario.sCodigo, objInventario.dtData, .sProduto, .sSiglaUM, .dQuantidade, .dQuantEst, .dCusto, .iAlmoxarifado, .sEtiqueta, .iTipo, .sContaContabilEst, .sContaContabilInv, CDbl(objInventario.dtHora), objItemInventario.iAtualizaSoLote, dCodigoNumerico)
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 41032

        Next

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Inventario_Grava_Trans = SUCESSO

    Exit Function

Erro_Inventario_Grava_Trans:

    Inventario_Grava_Trans = gErr

    Select Case gErr

        Case 36497, 41027, 41029, 41030, 41031, 41037, 41039, 41040, 41640, 89852, 89854, 89855, 89925
        
        Case 41018
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 41028
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INVENTARIO_PENDENTE_CADASTRADO", gErr, objInventario.sCodigo)

        Case 41032
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_INVENTARIO", gErr, objInventario.sCodigo)

        Case 41033, 41034
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO", gErr, objItemInventario.sProduto, objItemInventario.iAlmoxarifado)

        Case 41035
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUE_PRODUTO_NAO_CADASTRADO", gErr, objItemInventario.sProduto, objItemInventario.iAlmoxarifado)

        Case 41036
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ESTOQUEPRODUTO", gErr, objItemInventario.sProduto, objItemInventario.iAlmoxarifado)

        Case 41038
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)

        Case 41042
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_INVENTARIO", gErr, objInventario.dtData)

'        Case 55454
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_DATA_INVENTARIO_MENOR", gErr, objItemInventario.sProduto, objItemInventario.sAlmoxarifadoNomeRed, CStr(tEstoqueProduto.dtDataInventario), CStr(objInventario.dtData))

'        Case 61377
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERAR_QUANTIDADE_RESERVADA", gErr, iLinha, dQuantUltrapassaDisp)
            
        Case 61381
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERAR_QUANTIDADE_RESERVADA_CONSIG", gErr, iLinha, dQuantUltrapassaConsig)

        Case 89853
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INVENTARIO_SEM_MOVESTOQUE", gErr, objMovEstoque.iFilialEmpresa, MOVEST_TIPONUMINTDOCORIGEM_INVENTARIO, lNumIntDocOrigem)

        Case 90828
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_RESERVADA_MENOR_ESTOQUE", gErr, iLinha, objItemInventario.dQuantidade * dFator, tEstoqueProduto.dQuantReservada)
        
        Case 92475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_RESERVADA_MENOR_ESTOQUE", gErr, iLinha, objItemInventario.dQuantidade * dFator, tEstoqueProduto.dQuantReservadaConsig)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151925)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Inventario_Grava0(ByVal objInventario As ClassInventario, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long

On Error GoTo Erro_Inventario_Grava0

    'altera os dados do Inventário
    lErro = CF("Inventario_Grava_Trans", objInventario, objContabil)
    If lErro <> SUCESSO Then gError 105188

    Inventario_Grava0 = SUCESSO

    Exit Function

Erro_Inventario_Grava0:

    Inventario_Grava0 = gErr

    Select Case gErr

        Case 105188

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151926)

    End Select

    Exit Function

End Function

Public Function Inventario_Exclui_Trans(ByVal objInventario As ClassInventario, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumIntDocOrigem As Long
Dim objMovEstoque As New ClassMovEstoque
Dim objMovEstoque1 As New ClassMovEstoque
Dim objItemMovEstoque As ClassItemMovEstoque

On Error GoTo Erro_Inventario_Exclui_Trans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 89931
    Next

    'Tenta ler na tabela de Inventarios
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM Inventario WHERE Codigo = ? AND FilialEmpresa = ?", 0, lNumIntDoc, objInventario.sCodigo, objInventario.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 89933

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89934

    If lErro = SUCESSO Then lNumIntDocOrigem = lNumIntDoc
    
    Do While lErro = SUCESSO

        'Tenta ler na tabela de Inventarios
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Inventario", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 89935

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89936

    Loop
    
    objMovEstoque1.iFilialEmpresa = objInventario.iFilialEmpresa
    
    'Lê o movimento de estoque associado ao NumIntDocOrigem, TipoNumIntDocOrigem em questão para descobrir o codigo do movimento de estoque associado ao inventário
    lErro = CF("MovEstoque_Le_NumIntDocOrigem", objMovEstoque1, MOVEST_TIPONUMINTDOCORIGEM_INVENTARIO, lNumIntDocOrigem)
    If lErro <> SUCESSO And lErro <> 89850 Then gError 89937

    'se não tiver nenhum movimento de estoque associado ao inventario ==> erro
    If lErro = 89850 Then gError 89938

    Set objItemMovEstoque = objMovEstoque1.colItens(1)

    objMovEstoque.lCodigo = objItemMovEstoque.lCodigo
    objMovEstoque.iFilialEmpresa = objInventario.iFilialEmpresa

    'trata a exclusão do movimento de estoque
    lErro = MovimentoEstoque_Trata_Exclusao_Trans(objMovEstoque, objContabil)
    If lErro <> AD_SQL_SUCESSO Then gError 89939

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Inventario_Exclui_Trans = SUCESSO

    Exit Function

Erro_Inventario_Exclui_Trans:

    Inventario_Exclui_Trans = gErr

    Select Case gErr

        Case 89931
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89932
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 89933, 89934, 89936
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVENTARIO1", gErr, objInventario.iFilialEmpresa, objInventario.sCodigo)

        Case 89935
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_INVENTARIO", gErr, objInventario.iFilialEmpresa, objInventario.sCodigo)

        Case 89937, 89939

        Case 89938
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INVENTARIO_SEM_MOVESTOQUE", gErr, objMovEstoque1.iFilialEmpresa, MOVEST_TIPONUMINTDOCORIGEM_INVENTARIO, lNumIntDocOrigem)

        Case 89940
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151927)

    End Select

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Inventario_Exclui0(ByVal objInventario As ClassInventario, ByVal objContabil As ClassContabil) As Long
'Exclui a producao

Dim lErro As Long

On Error GoTo Erro_Inventario_Exclui0

    lErro = CF("Inventario_Exclui_Trans", objInventario, objContabil)
    If lErro <> SUCESSO Then gError 105200

    Inventario_Exclui0 = SUCESSO

    Exit Function

Erro_Inventario_Exclui0:

    Inventario_Exclui0 = gErr

    Select Case gErr

        Case 105200

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151928)

    End Select

    Exit Function

End Function

Function PrecoCalculado_Grava_EmTrans(ByVal objPrecoCalculado As ClassPrecoCalculado) As Long
'Rotina que grava Tabela de Preço Item

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim sCodProduto  As String
Dim dPreco As Double
Dim objProduto As New ClassProduto
Dim objTabelaPrecoItem As New ClassTabelaPrecoItem

On Error GoTo Erro_PrecoCalculado_Grava_EmTrans

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116893
    Next

    sCodProduto = String(STRING_PRODUTO, 0)

    'Pesquisa no BD a Tabela passada como parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT CodProduto FROM PrecoCalculado WHERE FilialEmpresa = ? AND CodProduto = ? AND DataReferencia = ?", 0, sCodProduto, objPrecoCalculado.iFilialEmpresa, objPrecoCalculado.sCodProduto, objPrecoCalculado.dtDataReferencia)
    If lErro <> AD_SQL_SUCESSO Then gError 116894

    'Verifica se Tabela existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116895

    'Não encontrou o Preco Calculado no BD
    If lErro = AD_SQL_SEM_DADOS Then gError 116896

    'Faz lock na Tabela
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116897
    
    'guarda o produto no objproduto
    objProduto.sCodigo = objPrecoCalculado.sCodProduto

    'Faz lock no Produto
    lErro = CF("Produto_Lock", objProduto)
    If lErro <> SUCESSO Then gError 116898
        
    'Atualizado o Preco Informado na tabela Preco Calculo
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE PrecoCalculado SET DataVigencia = ?, PrecoInformado = ?", alComando(0), objPrecoCalculado.dtDataVigencia, objPrecoCalculado.dPrecoInformado)
    If lErro <> AD_SQL_SUCESSO Then gError 116899
        
    With objTabelaPrecoItem
        .iCodTabela = objPrecoCalculado.iCodTabela
        .iFilialEmpresa = objPrecoCalculado.iFilialEmpresa
        .dPreco = objPrecoCalculado.dPrecoInformado
        .dtDataVigencia = objPrecoCalculado.dtDataVigencia
        .iTabelaDefault = NAO_ATUALIZAR_TABELA_PADRAO
        .sCodProduto = objPrecoCalculado.sCodProduto
    End With
        
    'Chama função que grava na tabela : TabelaDePrecoItens
    lErro = CF("TabelaPrecoItem_Grava_EmTrans", objTabelaPrecoItem)
    If lErro <> SUCESSO Then gError 116906

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PrecoCalculado_Grava_EmTrans = SUCESSO

    Exit Function

Erro_PrecoCalculado_Grava_EmTrans:

    PrecoCalculado_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 116906, 116898, 62081 'Tratado na rotina chamada

        Case 116893
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 116894, 116895
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRECOCALCULADO", gErr, objPrecoCalculado.iFilialEmpresa, objPrecoCalculado.sCodProduto)

        Case 116896
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRECOCALCULADO_INEXISTENTE ", gErr, objPrecoCalculado.sCodProduto, objPrecoCalculado.iFilialEmpresa)

        Case 116897
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRECOCALCULADO", gErr)

        Case 116899
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRECOCALCULADO", gErr, objPrecoCalculado.sCodProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151929)

    End Select
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TabelaPrecoItem_Grava_EmTrans(ByVal objTabelaPrecoItem As ClassTabelaPrecoItem) As Long
'Rotina que grava Tabela de Preço Item
'Rotina incluida por Mauricio MAciel em 16/04/03

Dim lErro As Long
Dim alComando(10) As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim iCodigo As Integer
Dim dPreco As Double
Dim objProduto As New ClassProduto
Dim iTabelaDefault As Integer
Dim tProduto As typeProduto
Dim sProduto As String
Dim sProduto1 As String
Dim objTabPrecoItem As New ClassTabelaPrecoItem

On Error GoTo Erro_TabelaPrecoItem_Grava_EmTrans

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116878
    Next
    
        
    objTabPrecoItem.iCodTabela = objTabelaPrecoItem.iCodTabela
    objTabPrecoItem.iFilialEmpresa = objTabelaPrecoItem.iFilialEmpresa
    objTabPrecoItem.sCodProduto = objTabelaPrecoItem.sCodProduto

    'serve para pegar o preco atual para o workflow
    lErro = CF("TabelaPrecoItem_Le", objTabPrecoItem)
    If lErro <> SUCESSO And lErro <> 28014 Then gError 197736
    
    objTabelaPrecoItem.dPrecoAtual = objTabPrecoItem.dPreco
    
    'Pesquisa no BD a Tabela passada como parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM TabelasDePreco WHERE Codigo = ?", 0, iCodigo, objTabelaPrecoItem.iCodTabela)
    If lErro <> AD_SQL_SUCESSO Then gError 116879

    'Verifica se Tabela existe
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116880

    'Não encontrou a Tabela no BD
    If lErro = AD_SQL_SEM_DADOS Then gError 116881

    'Faz lock na Tabela
    lErro = Comando_LockShared(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116882
    
    'Não encontrou o item no BD
    objProduto.sCodigo = objTabelaPrecoItem.sCodProduto

    'Faz lock no Produto
    lErro = CF("Produto_Lock", objProduto)
    If lErro <> SUCESSO Then gError 116886
    
    sProduto = String(STRING_PRODUTO, 0)
    
    Call Mascara_RetornaItemNoNivel("Produto", objProduto.iNivel, objProduto.sCodigo, sProduto)
    
    If objProduto.iGerencial = PRODUTO_GERENCIAL And objProduto.iKitVendaComp <> MARCADO And Len(Trim(objProduto.sGrade)) = 0 Then
    
        tProduto.sCodigo = String(STRING_PRODUTO, 0)
    
        'Pesquisa no BD o ítem passado como parâmetro
        lErro = Comando_Executar(alComando(7), "SELECT Codigo, Gerencial, Ativo, Faturamento FROM Produtos WHERE Codigo > ? And Nivel > ? ORDER BY Codigo", tProduto.sCodigo, tProduto.iGerencial, tProduto.iAtivo, tProduto.iFaturamento, objProduto.sCodigo, objProduto.iNivel)
        If lErro <> AD_SQL_SUCESSO Then gError 126836
    
        'Verifica se ítem existe
        lErro = Comando_BuscarPrimeiro(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126837
    
        Do While lErro = AD_SQL_SUCESSO
    
            sProduto1 = String(STRING_PRODUTO, 0)
            
            Call Mascara_RetornaItemNoNivel("Produto", objProduto.iNivel, tProduto.sCodigo, sProduto1)
    
            If sProduto <> sProduto1 Then Exit Do
    
            'Se for um produto ATIVO, analitico e vendavel
            If tProduto.iAtivo = Ativo And tProduto.iGerencial = PRODUTO_FINAL And tProduto.iFaturamento = PRODUTO_VENDAVEL Then
        
                objTabelaPrecoItem.sCodProduto = tProduto.sCodigo
        
                'Pesquisa no BD o ítem passado como parâmetro
                lErro = Comando_ExecutarPos(alComando(8), "SELECT Preco FROM TabelasDePrecoItens WHERE FilialEmpresa = ? AND CodTabela = ? AND CodProduto = ? AND DataVigencia = ?", 0, dPreco, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.dtDataVigencia)
                If lErro <> AD_SQL_SUCESSO Then gError 126939
            
                'Verifica se ítem existe
                lErro = Comando_BuscarPrimeiro(alComando(8))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126840
        
                'Encontrou o item no BD
                If lErro = AD_SQL_SUCESSO Then
            
                    'Atualiza a tabela TabelasdePrecoItens
                    lErro = Comando_ExecutarPos(alComando(9), "UPDATE TabelasDePrecoItens SET Preco = ?, Observacao = ?, PercDesconto = ?, PrecoComDesconto = ?", alComando(8), objTabelaPrecoItem.dPreco, objTabelaPrecoItem.sObservacao, objTabelaPrecoItem.dPercDesconto, objTabelaPrecoItem.dPrecoComDesconto)
                    If lErro <> AD_SQL_SUCESSO Then gError 126841
            
                Else
        
                    'Insere o item tabela TabelasdePrecoItens
                    lErro = Comando_Executar(alComando(10), "INSERT INTO TabelasDePrecoItens (FilialEmpresa, CodTabela, CodProduto, DataVigencia, Preco, Observacao,PercDesconto,PrecoComDesconto) VALUES (?,?,?,?,?,?,?,?)", objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.dtDataVigencia, objTabelaPrecoItem.dPreco, objTabelaPrecoItem.sObservacao, objTabelaPrecoItem.dPercDesconto, objTabelaPrecoItem.dPrecoComDesconto)
                    If lErro <> AD_SQL_SUCESSO Then gError 126842
        
                End If
        
        
                If objTabelaPrecoItem.iTabelaDefault <> NAO_ATUALIZAR_TABELA_PADRAO Then
                
                    'Atualiza a informação de tabela padrão para o produto
                    lErro = CF("TabelaPrecoItem_Atualiza_TabelaPadrao", alComando(5), alComando(6), objTabelaPrecoItem, NAO_EXCLUIDO)
                    If lErro <> SUCESSO Then gError 126843
                
                End If
        
        
            End If
    
            'Verifica se ítem existe
            lErro = Comando_BuscarProximo(alComando(7))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126838
    
        Loop
    
    Else
    
        'Pesquisa no BD o ítem passado como parâmetro
        lErro = Comando_ExecutarPos(alComando(2), "SELECT Preco FROM TabelasDePrecoItens WHERE FilialEmpresa = ? AND CodTabela = ? AND CodProduto = ? AND DataVigencia = ?", 0, dPreco, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.dtDataVigencia)
        If lErro <> AD_SQL_SUCESSO Then gError 116883
    
        'Verifica se ítem existe
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116884
    
        'Encontrou o item no BD
        If lErro = AD_SQL_SUCESSO Then
    
            'Atualiza a tabela TabelasdePrecoItens
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE TabelasDePrecoItens SET Preco = ?, Observacao = ?, PercDesconto = ?, PrecoComDesconto = ?", alComando(2), objTabelaPrecoItem.dPreco, objTabelaPrecoItem.sObservacao, objTabelaPrecoItem.dPercDesconto, objTabelaPrecoItem.dPrecoComDesconto)
            If lErro <> AD_SQL_SUCESSO Then gError 116885
    
        Else
            
            'Insere o item tabela TabelasdePrecoItens
            lErro = Comando_Executar(alComando(2), "INSERT INTO TabelasDePrecoItens (FilialEmpresa, CodTabela, CodProduto, DataVigencia, Preco, Observacao,PercDesconto,PrecoComDesconto) VALUES (?,?,?,?,?,?,?,?)", objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto, objTabelaPrecoItem.dtDataVigencia, objTabelaPrecoItem.dPreco, objTabelaPrecoItem.sObservacao, objTabelaPrecoItem.dPercDesconto, objTabelaPrecoItem.dPrecoComDesconto)
            If lErro <> AD_SQL_SUCESSO Then gError 116887
            
        End If
    
        If objTabelaPrecoItem.iTabelaDefault <> NAO_ATUALIZAR_TABELA_PADRAO Then
        
            'Atualiza a informação de tabela padrão para o produto
            lErro = CF("TabelaPrecoItem_Atualiza_TabelaPadrao", alComando(5), alComando(6), objTabelaPrecoItem, NAO_EXCLUIDO)
            If lErro <> SUCESSO Then gError 116888
        
        End If
    
    End If
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TabelaPrecoItem_Grava_EmTrans = SUCESSO

    Exit Function

Erro_TabelaPrecoItem_Grava_EmTrans:

    TabelaPrecoItem_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 116886, 116888, 126843

        Case 116878
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116879, 116880
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECO1", gErr, objTabelaPrecoItem.iCodTabela)

        Case 116881
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TABELAPRECO_INEXISTENTE", gErr, objTabelaPrecoItem.iCodTabela)

        Case 116882
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TABELASDEPRECO", gErr, objTabelaPrecoItem.iCodTabela)

        Case 28088, 28089
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objTabelaPrecoItem.sCodProduto)

        Case 28090
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objTabelaPrecoItem.sCodProduto)

        Case 116883, 116884, 126839, 126840
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS2", gErr, objTabelaPrecoItem.iFilialEmpresa, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case 116885, 126841
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TABELASDEPRECOITENS1", gErr, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case 116887, 126842
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TABELASDEPRECOITENS", gErr, objTabelaPrecoItem.iCodTabela, objTabelaPrecoItem.sCodProduto)

        Case 126836, 126837, 126838
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objProduto.sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151930)

    End Select

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function PrecoCalculado_Grava(ByVal objPrecoCalculado As ClassPrecoCalculado) As Long
'Rotina que grava Tabela de Preço Item

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim iCodigo As Integer

On Error GoTo Erro_PrecoCalculado_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 116891

    'Chama a função que grava na tabela PrecoCalculado
    lErro = PrecoCalculado_Grava_EmTrans(objPrecoCalculado)
    If lErro <> SUCESSO Then gError 116907
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116908
    
    PrecoCalculado_Grava = SUCESSO

    Exit Function

Erro_PrecoCalculado_Grava:

    PrecoCalculado_Grava = gErr

    Select Case gErr
    
        Case 116907

        Case 116891
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116908
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151931)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Produto_Exclui_EmTrans(ByVal objProduto As ClassProduto) As Long
'Exclui no BD o Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim sProduto As String
Dim iTipoProduto As Integer
Dim X As New ClassMATGrava
Dim iExclusao As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_Produto_Exclui_EmTrans

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 70404

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 70405

    'Lê o Produto passado
    lErro = Comando_ExecutarPos(lComando, "SELECT Gerencial FROM Produtos WHERE Codigo = ?", 0, iTipoProduto, objProduto.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 70406

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 70407

    'Se não encontrar --> Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 70409

    'Faz o "lock" no Produto
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 70410

    'Valida a exclusão do Produto passado
    lErro = CF("Produto_Valida_Exclusao", objProduto.sCodigo)
    If lErro <> SUCESSO Then gError 70411
        
    lErro = Produto_Valida_Exclusao_Grade(objProduto)
    If lErro <> SUCESSO Then gError 70411
    
    '################################################################
    'Inserido por Wagner 26/05/2006
    lErro = CF("Exclusao_Valida", VALIDAEXCLUSAO_CODIGO_PRODUTO, objProduto.sCodigo)
    If lErro <> SUCESSO Then gError 177944
    '################################################################
   
    'Indica que é uma exclusao, portanto deve testar relacionamentos
    iExclusao = 1
    
    '''05/09/01 Marcelo
    'Exclui as associações ProdutoXEmbalagem
    lErro = CF("ProdutoEmbalagem_Exclui_EmTrans", objProduto, iExclusao)
    If lErro <> AD_SQL_SUCESSO And lErro <> 95055 Then gError 93580
            
    'Se o Produto não for Gerencial
    If iTipoProduto = NAO_GERENCIAL Then

        lErro = Produto_Exclui_Todas(objProduto.sCodigo)
        If lErro <> SUCESSO Then gError 70412

        'Faz a exclusão do produto na tabela de Produtos
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM Produtos", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 70408

    'Se o Produto for Gerencial
    Else
        
        'Faz a exclusão do Produto Gerencial
        lErro = ProdutoGerencial_Exclui(objProduto.sCodigo)
        If lErro <> SUCESSO Then gError 70418

    End If
    
    lErro = CF("IdiomaTextos_Exclui", "Produtos", objProduto.sCodigo, 0, 0)
    If lErro <> SUCESSO Then gError 70418

    If gcolModulo.Ativo(MODULO_LOJA) = MODULO_ATIVO Then
        Call Produto_Carrega_Log(objLog, objProduto, EXCLUSAO_PRODUTO_CAIXA_CENTRAL)
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 101743
    End If

    'Fecha os Comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Produto_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_Produto_Exclui_EmTrans:

    Produto_Exclui_EmTrans = gErr

    Select Case gErr

        Case 70404, 70405
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 70406, 70407
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objProduto.sCodigo)

        Case 70408
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOS", gErr, objProduto.sCodigo)

        Case 70409
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)

        Case 70410
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", gErr, objProduto.sCodigo)

        Case 70411, 70412, 70418, 93580, 101743, 177944

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151932)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function


Function ProdutoGrade_Valida_Utilizacao(objProduto As ClassProduto) As Long

Dim lErro As Long
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim colItensRomaneioGrade As New Collection

On Error GoTo Erro_ProdutoGrade_Valida_Utilizacao

    'Lê os filhos analíticos do produto pai de grade passado
    lErro = CF("Produto_Le_Filhos_Grade", objProduto, colItensRomaneioGrade)
    If lErro <> SUCESSO And lErro <> 86304 Then gError 86386
    
'    'O produto não tem filhos de grade ou seus filhos são analíticos
'    If lErro = 86304 Then gError 86387
    
    For Each objItemRomaneio In colItensRomaneioGrade
    
        lErro = ProdutoItemGrade_Valida_Utilizacao(objItemRomaneio.sProduto)
        If lErro <> SUCESSO Then gError 86386
        
    Next
   
    ProdutoGrade_Valida_Utilizacao = SUCESSO
    
    Exit Function
    
Erro_ProdutoGrade_Valida_Utilizacao:

    ProdutoGrade_Valida_Utilizacao = gErr
    
    Select Case gErr
    
        Case 86386
        
        Case 86387
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_PAI_GRADE_SEM_FILHOS", gErr, objProduto.sCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151933)

    End Select

    Exit Function

End Function

Function ProdutoItemGrade_Valida_Utilizacao(sProduto As String) As Long

Dim lNumero As Long
Dim iFilialEmpresa As Integer
Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_ProdutoItemGrade_Valida_Utilizacao

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86385

    lErro = Comando_Executar(lComando, "SELECT CodPedido, FilialEmpresa FROM ItensPedidoDeVenda, ItensPedidoDeVendaGrade WHERE NumIntItemPV = ItensPedidoDeVenda.NumIntDoc AND ItensPedidoDeVendaGrade.Produto = ?", lNumero, iFilialEmpresa, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 86388
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86389
    
    If lErro = AD_SQL_SUCESSO Then gError 86390

    lErro = Comando_Executar(lComando, "SELECT CodOrcamento, FilialEmpresa FROM ItensOrcamentoVenda, ItensOrcamentoVendaGrade WHERE NumIntItemOV = ItensOrcamentoVenda.NumIntDoc AND ItensOrcamentoVendaGrade.Produto = ?", lNumero, iFilialEmpresa, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 86391
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86392
    
    If lErro = AD_SQL_SUCESSO Then gError 86393
    
    lErro = Comando_Executar(lComando, "SELECT NumNotaFiscal, FilialEmpresa FROM NFiscal,ItensNFiscal, ItensNFiscalGrade WHERE NFiscal.NumIntDoc = ItensNfiscal.NumIntNF AND NumIntItemNF = ItensNFiscal.NumIntDoc AND ItensNFiscalGrade.Produto = ?", lNumero, iFilialEmpresa, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 86394
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86395
    
    If lErro = AD_SQL_SUCESSO Then gError 86396

    Call Comando_Fechar(lComando)
    
    ProdutoItemGrade_Valida_Utilizacao = SUCESSO
    
    Exit Function
    
Erro_ProdutoItemGrade_Valida_Utilizacao:

    ProdutoItemGrade_Valida_Utilizacao = gErr
    
    Select Case gErr
    
        Case 86385
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            

        Case 86388, 86389
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPVGRADE", gErr)
            
        Case 86390
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOFILHOGRADE_UTILIZADO_PV", gErr, sProduto, lNumero, iFilialEmpresa)
        
        Case 86391, 86392
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSOVGRADE", gErr)
        
        Case 86393
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOFILHOGRADE_UTILIZADO_NF", gErr, sProduto, lNumero, iFilialEmpresa)
        
        Case 86394, 86395
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFGRADE", gErr)
        
        Case 86396
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOFILHOGRADE_UTILIZADO_NF", gErr, sProduto, lNumero, iFilialEmpresa)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151934)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Produto_Valida_Exclusao_Grade(objProduto As ClassProduto) As Long

Dim lErro As Long

On Error GoTo Erro_Produto_Valida_Exclusao_Grade

    If objProduto.iGerencial = GERENCIAL Then
        If Len(Trim(objProduto.sGrade)) > 0 Then
            lErro = ProdutoGrade_Valida_Utilizacao(objProduto)
        End If
    Else
        lErro = ProdutoItemGrade_Valida_Utilizacao(objProduto.sCodigo)
    End If
        
    If lErro <> SUCESSO Then gError 86408
    
    Produto_Valida_Exclusao_Grade = SUCESSO
    
    Exit Function
    
Erro_Produto_Valida_Exclusao_Grade:

    Produto_Valida_Exclusao_Grade = gErr
    
    Select Case gErr
    
        Case 86408
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151935)

    End Select

    Exit Function

End Function

Function CategoriaProdutoItem_Altera(ByVal objCategoriaProdutoItem As ClassCategoriaProdutoItem, ByVal sCategoria As String, ByVal lComando2 As Long, ByVal lComando1 As Long) As Long

Dim lErro As Long

On Error GoTo Erro_CategoriaProdutoItem_Altera

    'Alterar o registro no Bd
     With objCategoriaProdutoItem
        lErro = Comando_ExecutarPos(lComando2, "UPDATE CategoriaProdutoItem SET Ordem = ?, Descricao = ?, Valor1 = ?, Valor2 = ?, Valor3 = ?, Valor4 = ?, Valor5 = ?, Valor6 = ?, Valor7 = ?, Valor8 = ?", lComando1, _
            .iOrdem, .sDescricao, .dvalor1, .dvalor2, .dvalor3, .dvalor4, .dvalor5, .dvalor6, .dvalor7, .dvalor8)
     End With
     If lErro <> AD_SQL_SUCESSO Then gError 27129

    CategoriaProdutoItem_Altera = SUCESSO
    
    Exit Function
    
Erro_CategoriaProdutoItem_Altera:

    CategoriaProdutoItem_Altera = gErr
    
    Select Case gErr
    
        Case 27129
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CATEGORIAPRODUTOITEM", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151936)

    End Select

    Exit Function


End Function

Function MovimentoEstoqueGrade_Exclui_Trans(ByVal iFilialEmpresa As Integer, ByVal lCodigo As Long, ByVal iTipoMov As Integer) As Long
'exclui todos os movimentos de movimentoestoquegrade com a chave passada como parametro

Dim alComando(1 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_MovimentoEstoqueGrade_Exclui_Trans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126669
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM MovimentoEstoqueGrade WHERE FilialEmpresa = ? AND Codigo = ? AND TipoMov =? ", 0, _
    lNumIntDoc, iFilialEmpresa, lCodigo, iTipoMov)
    If lErro <> AD_SQL_SUCESSO Then gError 126670

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126671

    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentoEstoqueGrade", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 126672

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126673

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentoEstoqueGrade_Exclui_Trans = SUCESSO
    
    Exit Function
    
Erro_MovimentoEstoqueGrade_Exclui_Trans:

    MovimentoEstoqueGrade_Exclui_Trans = gErr
    
    Select Case gErr
    
        Case 126669
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126670, 126671, 126673
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUEGRADE", gErr, iFilialEmpresa, lCodigo, iTipoMov)

        Case 126672
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOESTOQUEGRADE", gErr, lNumIntDoc)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151937)

    End Select

    Exit Function

End Function

Function ProdutoCategoria_Exclui_Trans() As Long
'Exclui a tabela ProdutoCategoria
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_ProdutoCategoria_Exclui_Trans

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 126770

    'Exclui a tabela
    lErro = Comando_Executar(lComando, "DELETE FROM ProdutoCategoria")
    If lErro <> AD_SQL_SUCESSO Then gError 126771

    'Fechar o comando
    Call Comando_Fechar(lComando)
    
    ProdutoCategoria_Exclui_Trans = SUCESSO

    Exit Function

Erro_ProdutoCategoria_Exclui_Trans:

    ProdutoCategoria_Exclui_Trans = gErr

    Select Case gErr

        Case 126770
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 126771
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOCATEGORIA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151938)

    End Select

    Exit Function

End Function

Function ProdutoCategoria_Insere_Trans(ByVal objProdutoCategoria As ClassProdutoCategoria) As Long
'Insere em ProdutoCaregoria o objeto passado como parâmetro

Dim lErro As Long
Dim lComando1 As Long

On Error GoTo Erro_ProdutoCategoria_Insere_Trans

    'Abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 126773

    'Insere os registros em ProdutoCategoria
    lErro = Comando_Executar(lComando1, "INSERT INTO ProdutoCategoria (Produto, Categoria, Item) VALUES (?,?,?)", objProdutoCategoria.sProduto, objProdutoCategoria.sCategoria, objProdutoCategoria.sItem)
    If lErro <> AD_SQL_SUCESSO Then gError 126774

    'Fecha os comandos
    Call Comando_Fechar(lComando1)

    ProdutoCategoria_Insere_Trans = SUCESSO

    Exit Function

Erro_ProdutoCategoria_Insere_Trans:

    ProdutoCategoria_Insere_Trans = gErr

    Select Case gErr

        Case 126773
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126774
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOCATEGORIA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151939)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'###########################################################
'INSERIDO POR WAGNER
Public Function Produto_Grava_Equivalente(ByVal objProduto As ClassProduto, ByVal sCodigoAntigo As String) As Long
'Cria um produto equivalente

Dim lErro As Long
Dim lTransacao As Long
Dim sCodigo As String
Dim objKit As New ClassKit
Dim iIndice As Integer
Dim colTabelaPrecoItem As New Collection

On Error GoTo Erro_Produto_Grava_Equivalente
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 131003
    
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then gError 131006
    
    objProduto.sCodigoBarras = ""
    objProduto.sGrade = ""
    
    'Produto já cadastrado com o código criado
    If lErro <> 28030 Then gError 131007

    lErro = CF("Produto_Grava_Trans", objProduto, colTabelaPrecoItem)
    If lErro <> SUCESSO Then gError 131008
    
    objKit.sProdutoRaiz = sCodigoAntigo
    
    'Le o kit Padrão
    lErro = CF("Kit_Le_Padrao", objKit)
    If lErro <> SUCESSO And lErro <> 106304 Then gError 131009
    
    'Se existe kit padrão
    If lErro <> 106304 Then
        
        lErro = CF("Kit_Le_Componentes", objKit)
        If lErro <> SUCESSO And lErro <> 21831 Then gError 131010
        
        objKit.sProdutoRaiz = objProduto.sCodigo
        
        For iIndice = 1 To objKit.colComponentes.Count
        
            objKit.colComponentes.Item(iIndice).sProdutoRaiz = objProduto.sCodigo

            If objKit.colComponentes.Item(iIndice).iNivel = KIT_NIVEL_RAIZ Then
            
                objKit.colComponentes.Item(iIndice).sProduto = objProduto.sCodigo
            
            End If
        
        Next
    
        lErro = CF("Kit_Grava_EmTrans", objKit)
        If lErro <> SUCESSO Then gError 131011
    
    End If

    'Faz o commit da transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 131012

    Produto_Grava_Equivalente = SUCESSO
    
    Exit Function
    
Erro_Produto_Grava_Equivalente:

    Produto_Grava_Equivalente = gErr
    
    Select Case gErr
    
        Case 131003
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 131006, 131008, 131009, 131010, 131011
        
        Case 131007
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_JA_EXISTENTE_EQUI", gErr, objProduto.sCodigo)
        
        Case 131012
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151940)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

'############################################
'Inserido por Wagner
Function Kit_Verifica_Kit(ByVal objKit As ClassKit) As Long

Dim lErro As Long
Dim lComando As Long
Dim objKitPai As New ClassKit
Dim sProduto As String
Dim sVersao As String

On Error GoTo Erro_Kit_Verifica_Kit
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 131310

    sProduto = String(STRING_PRODUTO, 0)
    sVersao = String(STRING_KIT_VERSAO, 0)

    'Insere os registros em ProdutoCategoria
    lErro = Comando_Executar(lComando, "SELECT ProdutoRaiz, Versao FROM ProdutoKit WHERE VersaoKitComp = ? AND Produto = ? AND NOT (Versao = ? AND ProdutoRaiz= ?) ", sProduto, sVersao, objKit.sVersao, objKit.sProdutoRaiz, objKit.sVersao, objKit.sProdutoRaiz)
    If lErro <> AD_SQL_SUCESSO Then gError 131311

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131312
    
    If lErro = SUCESSO Then gError 131313
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)

    Kit_Verifica_Kit = SUCESSO
    
    Exit Function
    
Erro_Kit_Verifica_Kit:

    Kit_Verifica_Kit = gErr
    
    Select Case gErr
 
        Case 131310
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 131311, 131312
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT", gErr)
        
        Case 131313
            Call Rotina_Erro(vbOKOnly, "ERRO_KIT_COMPONENTE_KIT", gErr, objKit.sProdutoRaiz, objKit.sVersao, sProduto, sVersao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151941)

    End Select

    Exit Function
    
    Call Comando_Fechar(lComando)
    
End Function
'############################################

Function Customiza_MovEst_Prod_Grava1(sProduto As String, ByVal iIndice As Integer, colItemMovEst As colItensMovEstoque) As Long

    Customiza_MovEst_Prod_Grava1 = SUCESSO

End Function

Function Customiza_RomaneioGrade_TrataParam(objProduto As ClassProduto) As Long

    Customiza_RomaneioGrade_TrataParam = SUCESSO
        
End Function

Function Customiza_ProducaoEnt_SaidaCel(objProduto As ClassProduto) As Long

    Customiza_ProducaoEnt_SaidaCel = SUCESSO

End Function

Function Cust_RomaneioGrade_PreencheAlmox(sProduto As String, objRomaneioGrade As ClassRomaneioGrade) As Long

    Cust_RomaneioGrade_PreencheAlmox = SUCESSO
        
End Function

Function LogMovEstoque_Inserir(ByVal objItemMovEst As ClassItemMovEstoque, ByVal iOperacao As Integer) As Long
'insere um movimento de estoque na tabela LogMovEstoque
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_LogMovEstoque_Inserir


    LogMovEstoque_Inserir = SUCESSO

    Exit Function

Erro_LogMovEstoque_Inserir:

    LogMovEstoque_Inserir = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151942)

    End Select

    Exit Function

End Function

Public Function Kit_Muda_FormPreco_Versao(ByVal sProdutoRaiz As String, ByVal sProxVersao As String, ByVal iNovaSituacao As Integer) As Long
'Altera o flag VersaoFormPreco Do Kit com produtoRaiz = sProdutoRaiz e Versao = sVersao para Situacao = "iNovaSituacao"

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim sSelect As String
Dim sProdTemp As String
Dim sUpdate As String

On Error GoTo Erro_Kit_Muda_FormPreco_Versao

    'Abertura dos comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 106230
    Next
    
    'Inicializa a string
    sProdTemp = String(STRING_PRODUTO, 0)
    
    'Guarda a Selecao SQL
    sSelect = "SELECT ProdutoRaiz FROM Kit WHERE ProdutoRaiz = ? AND Versao = ?"
    
    'Prepara a execucao do comando SQL
    lErro = Comando_ExecutarPos(alComando(0), sSelect, 0, sProdTemp, sProdutoRaiz, sProxVersao)
    If lErro <> AD_SQL_SUCESSO Then gError 106231
    
    'Buscar o Primeiro Registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106232
    
    'Se nao encontrou => Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 106233
    
    'Guarda o Comando SQL
    sUpdate = "UPDATE Kit SET VersaoFormPreco = ?"
    
    'Executa a atualizacao
    lErro = Comando_ExecutarPos(alComando(1), sUpdate, alComando(0), iNovaSituacao)
    If lErro <> AD_SQL_SUCESSO Then gError 106234
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Kit_Muda_FormPreco_Versao = SUCESSO
    
    Exit Function
    
Erro_Kit_Muda_FormPreco_Versao:

    Kit_Muda_FormPreco_Versao = gErr
    
    Select Case gErr
    
        Case 106230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 106231, 106232
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KIT", gErr)
            
        Case 106233
            
        Case 106234
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_KIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151943)
        
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Public Function TestesQualidade_Grava(ByVal objTestesQualidade As ClassTestesQualidade) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TestesQualidade_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130119

    lErro = CF("TestesQualidade_Grava_EmTrans", objTestesQualidade)
    If lErro <> SUCESSO Then gError 130120

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130121

    TestesQualidade_Grava = SUCESSO

    Exit Function

Erro_TestesQualidade_Grava:

    TestesQualidade_Grava = gErr

    Select Case gErr

        Case 130119
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 130120

        Case 130121
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151944)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function TestesQualidade_Grava_EmTrans(ByVal objTestesQualidade As ClassTestesQualidade) As Long

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer, iCodNomeRed As Integer
Dim iAux As Integer

On Error GoTo Erro_TestesQualidade_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130122
    Next

    'verificar se existe registro com mesmo nome reduzido mas outro codigo
    lErro = Comando_Executar(alComando(3), "SELECT Codigo FROM TestesQualidade WHERE Codigo <> ? AND NomeReduzido = ?", iCodNomeRed, objTestesQualidade.iCodigo, objTestesQualidade.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then gError 130255

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130256
    If lErro = AD_SQL_SUCESSO Then gError 130257
    
    'Le a tabelaTestesQualidade
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM TestesQualidade WHERE Codigo= ? ", _
                0, iAux, objTestesQualidade.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 130123

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130124

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 130125

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE TestesQualidade SET NomeReduzido= ? , Especificacao= ? , TipoResultado= ? , LimiteDe= ? , " & _
                "LimiteAte= ? , MetodoUsado= ? , Observacao= ? , NoCertificado= ? ", alComando(0), _
                objTestesQualidade.sNomeReduzido, objTestesQualidade.sEspecificacao, objTestesQualidade.iTipoResultado, objTestesQualidade.dLimiteDe, _
                objTestesQualidade.dLimiteAte, objTestesQualidade.sMetodoUsado, objTestesQualidade.sObservacao, objTestesQualidade.iNoCertificado)
        If lErro <> AD_SQL_SUCESSO Then gError 130126

    Else


        lErro = Comando_Executar(alComando(2), "INSERT INTO TestesQualidade( Codigo, NomeReduzido, Especificacao, TipoResultado, " & _
                "LimiteDe, LimiteAte, MetodoUsado, Observacao, NoCertificado) VALUES (?,?,?,?,?,?,?,?,?)", _
                objTestesQualidade.iCodigo, objTestesQualidade.sNomeReduzido, objTestesQualidade.sEspecificacao, objTestesQualidade.iTipoResultado, _
                objTestesQualidade.dLimiteDe, objTestesQualidade.dLimiteAte, objTestesQualidade.sMetodoUsado, objTestesQualidade.sObservacao, objTestesQualidade.iNoCertificado)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130127

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TestesQualidade_Grava_EmTrans = SUCESSO

    Exit Function

Erro_TestesQualidade_Grava_EmTrans:

    TestesQualidade_Grava_EmTrans = gErr

    Select Case gErr

        Case 130122
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 130123, 130124, 130255, 130256
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TESTESQUALIDADE", gErr)

        Case 130257
            Call Rotina_Erro(vbOKOnly, "ERRO_TESTESQUALIDADE_NOMERED_REPETIDO", gErr, objTestesQualidade.sNomeReduzido, iCodNomeRed)
        
        Case 130125
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TESTESQUALIDADE", gErr)

        Case 130126
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_TESTESQUALIDADE", gErr)

        Case 130127
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TESTESQUALIDADE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151945)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function TestesQualidade_Exclui(ByVal objTestesQualidade As ClassTestesQualidade) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TestesQualidade_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130110

    lErro = CF("TestesQualidade_Exclui_EmTrans", objTestesQualidade)
    If lErro <> SUCESSO Then gError 130111

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130112

    TestesQualidade_Exclui = SUCESSO

    Exit Function

Erro_TestesQualidade_Exclui:

    TestesQualidade_Exclui = gErr

    Select Case gErr

        Case 130110
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 130111

        Case 130112
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151946)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function TestesQualidade_Exclui_EmTrans(ByVal objTestesQualidade As ClassTestesQualidade) As Long

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_TestesQualidade_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130113
    Next

    'Le a tabelaTestesQualidade
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM TestesQualidade WHERE Codigo= ? ", _
                0, iAux, objTestesQualidade.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 130114

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130115

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 130116

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 130117

    'testar se o teste é usado (produtoteste e rastreamentoloteteste)
    '######################################################
    'Inserido por Wagner 17/02/2006
    'Le Produto Teste
    lErro = Comando_Executar(alComando(2), "SELECT 1 FROM ProdutoTeste WHERE TesteCodigo = ? ", _
                 iAux, objTestesQualidade.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 141779

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141780

    'Se não existir => ERRO
    If lErro <> AD_SQL_SEM_DADOS Then gError 141781
    
    'Le Produto Teste
    lErro = Comando_Executar(alComando(3), "SELECT TesteCodigo FROM RastreamentoLoteTeste WHERE TesteCodigo = ? ", _
                 iAux, objTestesQualidade.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 141782

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141783

    'Se não existir => ERRO
    If lErro <> AD_SQL_SEM_DADOS Then gError 141784
    '######################################################
    
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TestesQualidade", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 130118

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TestesQualidade_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_TestesQualidade_Exclui_EmTrans:

    TestesQualidade_Exclui_EmTrans = gErr

    Select Case gErr

        Case 130113
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 130114, 130115
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TESTESQUALIDADE", gErr)

        Case 130116
            Call Rotina_Erro(vbOKOnly, "ERRO_TESTESQUALIDADE_NAO_CADASTRADO", gErr, objTestesQualidade.iCodigo)

        Case 130117
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TESTESQUALIDADE", gErr)

        Case 130118
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TESTESQUALIDADE", gErr)

        Case 141779, 141780
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOTESTE", gErr)
        
        Case 141781
            Call Rotina_Erro(vbOKOnly, "ERRO_TESTE_COM_PRODUTOTESTE", gErr)
        
        Case 141782, 141783
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTETESTE", gErr)
        
        Case 141784
            Call Rotina_Erro(vbOKOnly, "ERRO_TESTE_COM_RASTREAMENTOLOTETESTE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151947)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ProdutoTeste_Exclui(ByVal objProduto As ClassProduto) As Long
'Chama uma função para excluir as associações de testes para o produto com código passado em objProduto

Dim lErro As Long
Dim lTransacao As Long
Dim iExclusao As Integer

On Error GoTo Erro_ProdutoTeste_Exclui

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130259
    
    'Indica que é uma exclusao, portanto deve testar os relacionamentos.
    iExclusao = 1
    
    'Exclui a relacao Produto x Teste
    lErro = CF("ProdutoTeste_Exclui_EmTrans", objProduto, iExclusao)
    If lErro <> SUCESSO Then gError 130260
    
    'Se nao encontrou => erro
    If lErro = 95055 Then gError 130261
    
    'Confirma a Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130262
    
    ProdutoTeste_Exclui = SUCESSO
    
    Exit Function
    
Erro_ProdutoTeste_Exclui:
    
    ProdutoTeste_Exclui = gErr
    
    Select Case gErr
    
        Case 130259
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 130260
        
        Case 130261
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOTESTE_INEXISTENTE", gErr, objProduto.sCodigo)
     
        Case 130262
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151948)
    
    End Select
    
    'Fechamento transação
    Call Transacao_Rollback
    
    Exit Function

End Function

Function ProdutoTeste_Exclui_EmTrans(ByVal objProduto As ClassProduto, ByVal iExclusao As Integer) As Long
'Exclui as associações de teste para o produto com código passado em objProduto
'ATENÇÃO: ESTA FUNÇÃO SÓ DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim objProdutoTeste As ClassProdutoTeste
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim sCodigoProduto As String
Dim iCodigoTeste As Integer
    
On Error GoTo Erro_ProdutoTeste_Exclui_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130264
    Next
    
    'Inicializa a string
    sCodigoProduto = String(STRING_PRODUTO, 0)
    
    'Lê na tabela ProdutoTeste os testes do produto com código passado em objProduto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto, TesteCodigo FROM ProdutoTeste WHERE Produto = ?", 0, sCodigoProduto, iCodigoTeste, objProduto.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 130265
        
    'Buscar o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130266

    'Para cada teste relacionada ao produto
    Do While lErro = AD_SQL_SUCESSO
    
        'Faz o lock exclusivo do produto
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 130268
                        
        'Instacia o Obj
        Set objProdutoTeste = New ClassProdutoTeste
        
        'Guarda o Código do Produto e da Teste no Obj
        objProdutoTeste.sProduto = sCodigoProduto
        objProdutoTeste.iTesteCodigo = iCodigoTeste
                
        'Verifica se pode excluir
        If iExclusao = 1 Then
            'Verifica em outras tabelas se o teste está vinculada ao produto
            lErro = CF("ProdutoTeste_Testa_Relacionamentos", objProdutoTeste)
            If lErro <> SUCESSO Then gError 130269
        End If
        
        'Exclui a relação da teste com o produto
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ProdutoTeste", alComando(0))
        If lErro <> SUCESSO Then gError 130270
        
        'Buscar o Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130267

    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ProdutoTeste_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_ProdutoTeste_Exclui_EmTrans:

    ProdutoTeste_Exclui_EmTrans = gErr

    Select Case gErr
    
        Case 130264
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 130265, 130266, 130267
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOTESTE", gErr)
        
        Case 130269
        
        Case 130270
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOTESTE", gErr)
            
        Case 130268
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOTESTE", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151949)
    
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function ProdutoTeste_Grava(ByVal objProduto As ClassProduto) As Long
'Grava as associacoes de Produto x Testes na tabela ProdutoTeste
'OBS. Caso já existam testes associados a esse Produto os mesmos são DELETADOS e inseridos novamente

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim objProdutoAux As New ClassProduto 'Esse obj é utilizado apenas para lockar o produto
Dim objProdutoTeste As New ClassProdutoTeste
Dim lTransacao As Long
Dim iIndice As Integer
Dim iCodigoTes As Integer
Dim iExclusao As Integer
Dim sCodigoProduto As String
Dim iCodigoTeste As Integer

On Error GoTo Erro_ProdutoTeste_Grava
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130271
    Next
    
    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130272

    'Guarda o código do Produto que será lockado
    objProdutoAux.sCodigo = objProduto.sCodigo
        
    'Faz lock do produto com código passado em objProdutoAux
    'A função abaixo, além de fazer o lock, faz a leitura do produto
    'Portanto, para evitar que os dados lidos sobreponham os dados recebidos
    'em objProduto o obj utilizado na função é um obj auxiliar (objProdutoAux)
    lErro = CF("Produto_Lock_Shared", alComando(0), objProdutoAux)
    If lErro <> SUCESSO And lErro <> 55235 Then gError 130273
    
    'Se não encontrou o produto => erro
    If lErro = 55235 Then gError 130274
    
    'Indica que é uma gravacao, portanto nao deve testar os relacionamentos.
    iExclusao = 0
    
    'Apaga as relacoes Produto x Embalagens para esse produto
    'Se não encontrar nenhuma teste relacionada ao produto
    'a função retorna o erro 130263, que não dever ser tratado,
    'pois a função deve seguir em frente
    lErro = CF("ProdutoTeste_Exclui_EmTrans", objProduto, iExclusao)
    If lErro <> SUCESSO Then gError 130275
    
    'Para cada teste na coleção
    For Each objProdutoTeste In objProduto.colProdutoTeste
        
        'Lê o código na teste na tabela TestesQualidade
        'Essa leitura serve é feita para verificar se o teste
        'existe e para permitir efetuar o lock dela
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM TestesQualidade WHERE Codigo = ?", 0, iCodigoTes, objProdutoTeste.iTesteCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 130276
        
        'Busca o teste
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130277
        
        'Se nao encontrou => erro
        If lErro = AD_SQL_SEM_DADOS Then gError 130278
        
        'lock compartilhado do teste
        lErro = Comando_LockShared(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 130279
        
        'Insere a combinacao de Produto x Teste na tabela ProdutoTeste
        With objProdutoTeste
        
            lErro = Comando_Executar(alComando(2), "INSERT INTO ProdutoTeste (Produto, TesteCodigo, SeqGrid, TesteEspecificacao, TesteTipoResultado, TesteLimiteDe, TesteLimiteAte, TesteMetodoUsado, TesteObservacao, TesteNoCertificado) VALUES (?,?,?,?,?,?,?,?,?,?)", objProduto.sCodigo, .iTesteCodigo, .iSeqGrid, .sTesteEspecificacao, .iTesteTipoResultado, .dTesteLimiteDe, .dTesteLimiteAte, .sTesteMetodoUsado, .sTesteObservacao, .iTesteNoCertificado)
            If lErro <> AD_SQL_SUCESSO Then gError 130280
        
        End With
                   
    Next
        
    'Verifica se não ficou algum registro "órfão" em EmbalagensItem
    
    'Inicializa a variável
    iCodigoTeste = 0
    
    'Lê na view ProdutoTeste_Integridade se ficou algum uso do teste para o produto que ficou "órfão"
    lErro = Comando_Executar(alComando(3), "SELECT TesteCodigo FROM ProdutoTeste_Integridade WHERE Produto = ?", iCodigoTeste, sCodigoProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 130281
        
    'Buscar o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130282

    'Se encontrou => erro - pq. se achou significa que foi excluido um teste que nao poderia ter sido excluido, pois foi utilizado para o produto
    If lErro = AD_SQL_SUCESSO Then gError 130284
    
    'Confirma a Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130283
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ProdutoTeste_Grava = SUCESSO
    
    Exit Function

Erro_ProdutoTeste_Grava:

    ProdutoTeste_Grava = gErr
    
    Select Case gErr
    
        Case 130271
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 130272
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 130273, 130275
            
        Case 130274
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)
        
        Case 130276, 130277
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMBALAGENS", gErr)
        
        Case 130278
            Call Rotina_Erro(vbOKOnly, "ERRO_TESTE_INEXISTENTE", gErr, objProdutoTeste.iTesteCodigo)
            
        Case 130279
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TESTEQUALIDADE", gErr, objProdutoTeste.iTesteCodigo)
            
        Case 130280
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOTESTE", gErr)
            
        Case 130283
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 130281, 130282
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOTESTE_INTEGRIDADE", gErr)
            
        Case 130284
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOTESTE_RELACIONADO_TABELA", gErr, iCodigoTeste, sCodigoProduto)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151950)
        
    End Select
    
    'Fechamento transação
    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RastreamentoLote_ExcluiTestes(ByVal objRastroLote As ClassRastreamentoLote) As Long
'exclui os resultados dos testes do lote de rastreamento

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer, iCodigoTeste As Integer

On Error GoTo Erro_RastreamentoLote_ExcluiTestes

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130298
    Next
    
    'Lê os resultados de testes do lote
    lErro = Comando_ExecutarPos(alComando(0), "SELECT TesteCodigo FROM RastreamentoLoteTeste WHERE NumIntRastroLote = ?", 0, iCodigoTeste, objRastroLote.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 130299
        
    'Buscar o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130300

    'Para cada teste relacionado ao lote
    Do While lErro = AD_SQL_SUCESSO
    
        'Exclui a relação da teste com o produto
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM RastreamentoLoteTeste", alComando(0))
        If lErro <> SUCESSO Then gError 130302
        
        'Buscar o Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130303

    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RastreamentoLote_ExcluiTestes = SUCESSO
     
    Exit Function
    
Erro_RastreamentoLote_ExcluiTestes:

    RastreamentoLote_ExcluiTestes = gErr
     
    Select Case gErr
          
        Case 130298
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 130299, 130300, 130303
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOTESTE", gErr)
        
        Case 130302
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RASTROLOTETESTE", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151951)
     
    End Select
     
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RastreamentoLote_GravaTestes(ByVal objRastroLote As ClassRastreamentoLote) As Long
'grava os resultados dos testes de um lote em RastreamentoLoteTeste
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, lComando As Long, objTeste As ClassRastreamentoLoteTeste

On Error GoTo Erro_RastreamentoLote_GravaTestes

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 130308

    For Each objTeste In objRastroLote.colTeste
    
        With objTeste
            lErro = Comando_Executar(lComando, "INSERT INTO RastreamentoLoteTeste (NumIntRastroLote, TesteCodigo, SeqGrid, TesteEspecificacao, TesteTipoResultado, TesteLimiteDe, TesteLimiteAte, " & _
                "TesteMetodoUsado, TesteObservacao, RegistroAnaliseID, RegistroAnaliseData, ResultadoNaoConforme, ResultadoValor, ResultadoObservacao, TesteNoCertificado) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objRastroLote.lNumIntDoc, .iTesteCodigo, .iSeqGrid, .sTesteEspecificacao, .iTesteTipoResultado, .dTesteLimiteDe, .dTesteLimiteAte, _
                .sTesteMetodoUsado, .sTesteObservacao, .sRegistroAnaliseID, .dtRegistroAnaliseData, .iResultadoNaoConforme, .sResultadoValor, .sResultadoObservacao, .iTesteNoCertificado)
            If lErro <> AD_SQL_SUCESSO Then gError 130309
        End With
        
    Next
    
    Call Comando_Fechar(lComando)
    
    RastreamentoLote_GravaTestes = SUCESSO
     
    Exit Function
    
Erro_RastreamentoLote_GravaTestes:

    RastreamentoLote_GravaTestes = gErr
     
    Select Case gErr
          
        Case 130308
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 130309
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RASTROLOTETESTE", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151952)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'########################################################
'Inserido por Wagner
Function TestesQualidade_Automatico(lCodigo As Long) As Long
'retorna o número do proximo código disponivel

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String
Dim sTabelaConfig As String
Dim sTabelaObjeto As String
Dim sCampo As String

On Error GoTo Erro_TestesQualidade_Automatico

    sCodigo = "NUM_PROX_TESTE_QUALIDADE"
    sTabelaConfig = "MATConfig"
    sTabelaObjeto = "TestesQualidade"
    sCampo = "Codigo"

    lErro = CF("Config_ObterAutomatico", sTabelaConfig, sCodigo, sTabelaObjeto, sCampo, lCodigo)
    If lErro <> SUCESSO Then gError 138302

    TestesQualidade_Automatico = SUCESSO

    Exit Function

Erro_TestesQualidade_Automatico:

    TestesQualidade_Automatico = gErr

    Select Case gErr

        Case 138302

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151953)

    End Select

    Exit Function

End Function
'########################################################

'########################################################
'Inserido por Wagner 14/03/2006
Private Function MovEstoque_Producao_Atualiza_SerieProx_Produto(ByVal objMovEstoque As ClassMovEstoque) As Long
'Atualiza a última série produzida na tabela de produtos

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 1) As Long
Dim objRastreamentoMovto As ClassRastreamentoMovto
Dim objItemMovEstoque As ClassItemMovEstoque
Dim objItemMovEstoqueAux As ClassItemMovEstoque
Dim sSerieProx As String
Dim iParteNumerica As Integer
Dim iRastro As Integer

On Error GoTo Erro_MovEstoque_Producao_Atualiza_SerieProx_Produto

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 141941
    Next

    For Each objItemMovEstoque In objMovEstoque.colItens
        
        sSerieProx = ""

        For Each objItemMovEstoqueAux In objMovEstoque.colItens

            If objItemMovEstoqueAux.sProduto = objItemMovEstoque.sProduto Then
            
                If Not (objItemMovEstoqueAux.colRastreamentoMovto Is Nothing) Then
            
                    For Each objRastreamentoMovto In objItemMovEstoqueAux.colRastreamentoMovto
                    
                        If Len(Trim(sSerieProx)) = 0 Or sSerieProx < objRastreamentoMovto.sLote Then
                            sSerieProx = objRastreamentoMovto.sLote
                        End If
                    
                    Next
                    
                End If
            
            End If
            
        Next
                 
        If Len(Trim(sSerieProx)) <> 0 Then
        
            lErro = Comando_ExecutarPos(alComando(0), "SELECT SerieParteNum, Rastro FROM Produtos WHERE Codigo= ? ", 0, iParteNumerica, iRastro, objItemMovEstoque.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 141942
        
            'Tenta ler
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141943
        
            If lErro <> AD_SQL_SEM_DADOS Then
            
                If iRastro = PRODUTO_RASTRO_NUM_SERIE Then
            
                    '"Lock" no Estoque Produto
                    lErro = Comando_LockExclusive(alComando(0))
                    If lErro <> SUCESSO Then gError 141944
                    
                    sSerieProx = left(sSerieProx, Len(sSerieProx) - iParteNumerica) & FormataCpoNum(1 + StrParaLong(right(sSerieProx, iParteNumerica)), iParteNumerica)
                    
                    'Atualiza dados
                    lErro = Comando_ExecutarPos(alComando(1), "UPDATE Produtos  SET SerieProx = ?", alComando(0), sSerieProx)
                    If lErro <> AD_SQL_SUCESSO Then gError 141945
                    
                End If
                
            End If
            
        End If
    
    Next
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovEstoque_Producao_Atualiza_SerieProx_Produto = SUCESSO
     
    Exit Function
    
Erro_MovEstoque_Producao_Atualiza_SerieProx_Produto:

    MovEstoque_Producao_Atualiza_SerieProx_Produto = gErr
     
    Select Case gErr
          
        Case 141941
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 141942, 141943
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr)
            
        Case 141944
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOS", gErr)
            
        Case 141945
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PRODUTOS", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 141946)
     
    End Select
     
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
'########################################################

'########################################################
'Inserido por Wagner 12/06/2006
Function ProdutoFornecedor_Grava(ByVal iFilialEmpresa As Integer, ByVal colProduto As Collection, ByVal colFilialFornecedor As Collection, ByVal iAcao As Integer, ByVal iOrigem As Integer) As Long
'Grava a associação Produto X Fornecedor

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ProdutoFornecedor_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 180200
    
    Select Case iAcao
    
        Case PRODUTOFORNECEDOR_ACAO_ADICIONAR
        
            lErro = ProdutoFornecedor_Adicionar(iFilialEmpresa, colProduto, colFilialFornecedor)
            If lErro <> SUCESSO Then gError 180201
        
        Case PRODUTOFORNECEDOR_ACAO_SOBREPOR
        
            Select Case iOrigem
            
                Case PRODUTOFORNECEDOR_ORIGEM_PRODUTO
                
                    lErro = ProdutoFornecedor_Sobrepor_Produto(iFilialEmpresa, colProduto, colFilialFornecedor)
                    If lErro <> SUCESSO Then gError 180202
                
                Case PRODUTOFORNECEDOR_ORIGEM_FORNECEDOR
                
                    lErro = ProdutoFornecedor_Sobrepor_Fornecedor(iFilialEmpresa, colProduto, colFilialFornecedor)
                    If lErro <> SUCESSO Then gError 180203
                
                Case Else
                    gError 180204
                
            End Select
        
        Case Else
            gError 180205
        
    End Select
 
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 180206

    ProdutoFornecedor_Grava = SUCESSO

    Exit Function

Erro_ProdutoFornecedor_Grava:

    ProdutoFornecedor_Grava = gErr

    Select Case gErr

        Case 180200
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 180201 To 180203
        
        Case 180204
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOFORNECEDOR_ORIGEM_DESCONHECIDA", gErr, iOrigem)
        
        Case 180205
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOFORNECEDOR_ACAO_DESCONHECIDA", gErr, iAcao)

        Case 180206
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180207)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function ProdutoFornecedor_Adicionar(ByVal iFilialEmpresa As Integer, ByVal colProduto As Collection, ByVal colFilialFornecedor As Collection) As Long

Dim lErro As Long
Dim objFornFilialProdFF As ClassFornecedorProdutoFF
Dim objFilialFornecedor As ClassFilialFornecedor
Dim objProduto As ClassProduto
Dim iPadrao As Integer

On Error GoTo Erro_ProdutoFornecedor_Adicionar

    For Each objProduto In colProduto
    
        For Each objFilialFornecedor In colFilialFornecedor
        
            Set objFornFilialProdFF = New ClassFornecedorProdutoFF
            
            objFornFilialProdFF.iFilialEmpresa = giFilialEmpresa
            objFornFilialProdFF.iFilialForn = objFilialFornecedor.iCodFilial
            objFornFilialProdFF.lFornecedor = objFilialFornecedor.lCodFornecedor
            objFornFilialProdFF.sProduto = objProduto.sCodigo
            
            lErro = CF("FornecedorProdutoFF_Le", objFornFilialProdFF)
            If lErro <> SUCESSO And lErro <> 54217 Then gError 180228
            
            'Se a associação ainda não existe
            If lErro <> SUCESSO Then
                lErro = FornecedorProdutoFF_Grava_EmTrans(objFornFilialProdFF, iPadrao)
                If lErro <> SUCESSO Then gError 180208
            End If
        
        Next
        
    Next
    
    ProdutoFornecedor_Adicionar = SUCESSO

    Exit Function

Erro_ProdutoFornecedor_Adicionar:

    ProdutoFornecedor_Adicionar = gErr

    Select Case gErr
    
        Case 180208, 180228
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180209)

    End Select

    Exit Function
    
End Function

Function ProdutoFornecedor_Sobrepor_Produto(ByVal iFilialEmpresa As Integer, ByVal colProduto As Collection, ByVal colFilialFornecedor As Collection) As Long

Dim lErro As Long
Dim objProduto As ClassProduto

On Error GoTo Erro_ProdutoFornecedor_Sobrepor_Produto

    For Each objProduto In colProduto
    
        lErro = ProdutoFornecedor_Exclui_Produto(iFilialEmpresa, objProduto.sCodigo, colFilialFornecedor)
        If lErro <> SUCESSO Then gError 180210

    Next
    
    lErro = ProdutoFornecedor_Adicionar(iFilialEmpresa, colProduto, colFilialFornecedor)
    If lErro <> SUCESSO Then gError 180211

    ProdutoFornecedor_Sobrepor_Produto = SUCESSO

    Exit Function

Erro_ProdutoFornecedor_Sobrepor_Produto:

    ProdutoFornecedor_Sobrepor_Produto = gErr

    Select Case gErr
    
        Case 180210, 180211
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180212)

    End Select

    Exit Function
    
End Function

Function ProdutoFornecedor_Sobrepor_Fornecedor(ByVal iFilialEmpresa As Integer, ByVal colProduto As Collection, ByVal colFilialFornecedor As Collection) As Long

Dim lErro As Long
Dim objFilialFornecedor As ClassFilialFornecedor

On Error GoTo Erro_ProdutoFornecedor_Sobrepor_Fornecedor

    For Each objFilialFornecedor In colFilialFornecedor
    
        lErro = ProdutoFornecedor_Exclui_Fornecedor(iFilialEmpresa, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, colProduto)
        If lErro <> SUCESSO Then gError 180213

    Next
    
    lErro = ProdutoFornecedor_Adicionar(iFilialEmpresa, colProduto, colFilialFornecedor)
    If lErro <> SUCESSO Then gError 180214
    
    ProdutoFornecedor_Sobrepor_Fornecedor = SUCESSO
    
    Exit Function

Erro_ProdutoFornecedor_Sobrepor_Fornecedor:

    ProdutoFornecedor_Sobrepor_Fornecedor = gErr

    Select Case gErr
    
        Case 180213, 180214
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180215)

    End Select

    Exit Function
    
End Function

Private Function ProdutoFornecedor_Exclui_Fornecedor(ByVal iFilialEmpresa As Integer, ByVal lFornecedor As Long, ByVal iFilialFornecedor As Integer, ByVal colProduto As Collection) As Long
'Exclui de FornecedorProdutoFF os registros ligados ao Produto passado

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 1) As Long
Dim sProduto As String
Dim objFornFilialProdFF As ClassFornecedorProdutoFF
Dim objProduto As ClassProduto
Dim bAchou As Boolean

On Error GoTo Erro_ProdutoFornecedor_Exclui_Fornecedor

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 180216
    Next
    
    sProduto = String(STRING_PRODUTO, 0)

    'Faz a leitura dos registros
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto FROM FornecedorProdutoFF WHERE FilialEmpresa=? AND Fornecedor=? AND FilialForn = ? ", 0, sProduto, iFilialEmpresa, lFornecedor, iFilialFornecedor)
    If lErro <> AD_SQL_SUCESSO Then gError 180217

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180218

    Do While lErro <> AD_SQL_SEM_DADOS

        bAchou = False
        
        'Para cada Filial do Fornecedor associada
        For Each objProduto In colProduto
        
            If objProduto.sCodigo = sProduto Then
                bAchou = True
                Exit For
            End If
            
        Next

        'Se a associação não estava na tela -> Exclui
        If Not bAchou Then
        
            Set objFornFilialProdFF = New ClassFornecedorProdutoFF
            
            objFornFilialProdFF.iFilialEmpresa = iFilialEmpresa
            objFornFilialProdFF.iFilialForn = iFilialFornecedor
            objFornFilialProdFF.sProduto = sProduto
            objFornFilialProdFF.lFornecedor = lFornecedor
    
            lErro = FornecedorProdutoFF_Exclui_EmTrans(objFornFilialProdFF)
            If lErro <> SUCESSO Then gError 180234
            
        End If

        'Lê o próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180220

    Loop

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ProdutoFornecedor_Exclui_Fornecedor = SUCESSO

    Exit Function

Erro_ProdutoFornecedor_Exclui_Fornecedor:

    ProdutoFornecedor_Exclui_Fornecedor = gErr

    Select Case gErr

        Case 180216
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 180217, 180218, 180220
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF", gErr)

        Case 180219
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FORNECEDORPRODUTOFF", gErr, sProduto)
            
        Case 180234

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180221)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ProdutoFornecedor_Exclui_Produto(ByVal iFilialEmpresa As Integer, ByVal sProduto As String, ByVal colFilialFornecedor As Collection) As Long
'Exclui de FornecedorProdutoFF os registros ligados ao Produto passado

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 1) As Long
Dim lFornecedor As Long
Dim iFilial As Integer
Dim objFornFilialProdFF As ClassFornecedorProdutoFF
Dim objFilialFornecedor As ClassFilialFornecedor
Dim bAchou As Boolean

On Error GoTo Erro_ProdutoFornecedor_Exclui_Produto

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 180222
    Next

    'Faz a leitura dos registros
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Fornecedor,FilialForn FROM FornecedorProdutoFF WHERE FilialEmpresa=? AND Produto = ? ", 0, lFornecedor, iFilial, iFilialEmpresa, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 180223

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180224

    Do While lErro <> AD_SQL_SEM_DADOS

        bAchou = False
        
        'Para cada Filial do Fornecedor associada
        For Each objFilialFornecedor In colFilialFornecedor
        
            If objFilialFornecedor.iCodFilial = iFilial And objFilialFornecedor.lCodFornecedor = lFornecedor Then
                bAchou = True
                Exit For
            End If
            
        Next

        'Se a associação não estava na tela -> Exclui
        If Not bAchou Then
        
            Set objFornFilialProdFF = New ClassFornecedorProdutoFF
            
            objFornFilialProdFF.iFilialEmpresa = iFilialEmpresa
            objFornFilialProdFF.iFilialForn = iFilial
            objFornFilialProdFF.sProduto = sProduto
            objFornFilialProdFF.lFornecedor = lFornecedor
    
            lErro = FornecedorProdutoFF_Exclui_EmTrans(objFornFilialProdFF)
            If lErro <> SUCESSO Then gError 180233
        
        End If
        
        'Lê o próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180226

    Loop

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ProdutoFornecedor_Exclui_Produto = SUCESSO

    Exit Function

Erro_ProdutoFornecedor_Exclui_Produto:

    ProdutoFornecedor_Exclui_Produto = gErr

    Select Case gErr

        Case 180221
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 180223, 180224, 180226
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF", gErr)

        Case 180233

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180227)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'########################################################

Function Produto_Customiza_Form_Load() As Long

Dim lErro As Long
Dim lComando As Long
Dim tMovEstoque As typeMovEst
Dim dHora As Double

On Error GoTo Erro_Produto_Customiza_Form_Load

    Produto_Customiza_Form_Load = SUCESSO

    Exit Function

Erro_Produto_Customiza_Form_Load:

    Produto_Customiza_Form_Load = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 178506)

    End Select

    Exit Function

End Function

Function Produto_Valida_Customizado(ByVal objProduto As ClassProduto) As Long

Dim lErro As Long

On Error GoTo Erro_Produto_Valida_Customizado

    Produto_Valida_Customizado = SUCESSO

    Exit Function

Erro_Produto_Valida_Customizado:

    Produto_Valida_Customizado = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 187429)

    End Select

    Exit Function

End Function

Function Produto_Grava_Usu(ByVal objProduto As ClassProduto, ByVal colTabelaPrecoItem As Collection) As Long
'para gravar parte customizada do produto

    Produto_Grava_Usu = SUCESSO
    
End Function

Public Function ProdutoKit_Insere(ByVal objKit As ClassKit, ByVal objProdutoKit As ClassProdutoKit, lComando As Long) As Long

Dim lErro As Long

On Error GoTo Erro_ProdutoKit_Insere

    '################################################
    'Alterado por Wagner 23/11/04
    lErro = Comando_Executar(lComando, "INSERT INTO ProdutoKit (ProdutoRaiz, Nivel, Seq, Versao, Produto, SeqPai, Quantidade, UnidadeMed, Composicao,PosicaoArvore, PercentualPerda, CustoStandard, VersaoKitComp) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objKit.sProdutoRaiz, objProdutoKit.iNivel, objProdutoKit.iSeq, objKit.sVersao, objProdutoKit.sProduto, objProdutoKit.iSeqPai, objProdutoKit.dQuantidade, objProdutoKit.sUnidadeMed, objProdutoKit.iComposicao, objProdutoKit.iPosicaoArvore, objProdutoKit.dPercentualPerda, objProdutoKit.dCustoStandard, objProdutoKit.sVersaoKitComp)
    If lErro <> AD_SQL_SUCESSO Then gError 21771
    '################################################
        
    ProdutoKit_Insere = SUCESSO
    
    Exit Function
    
Erro_ProdutoKit_Insere:

    ProdutoKit_Insere = gErr

    Select Case gErr

        Case 21771
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOKIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 184295)

    End Select
    
    Exit Function

End Function

'##################################################################
'Inserido por Wagner 23/02/07
Function RastreamentoLote_Grava_Customizado(ByVal objRastroLote As ClassRastreamentoLote) As Long
    RastreamentoLote_Grava_Customizado = SUCESSO
End Function

Function Inventario_Automatico(sCodigo As String, ByVal iFilialEmpresa As Integer) As Long
'retorna o número da proxima OP

Dim lTransacao As Long
Dim lErro As Long
Dim dNumProx As Double

On Error GoTo Erro_Inventario_Automatico

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico3", "ESTConfig", "NUM_PROX_INVENTARIO", "InventarioTodos", "CodigoNumerico", dNumProx)
    If lErro <> SUCESSO Then gError 185932
    
    sCodigo = CStr(Round(dNumProx))
    
    Inventario_Automatico = SUCESSO

    Exit Function

Erro_Inventario_Automatico:

    Inventario_Automatico = gErr

    Select Case gErr

        Case 185932

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 185933)

    End Select
    
    'Desfaz a transação
    Call Transacao_Rollback
    
    Exit Function

End Function

Public Function Excel_Le_Planilha_Inv(ByVal iFilialEmpresa As Integer, ByVal sArquivo As String, ByVal objMsg As Object, ByVal objProgresso As Object, ByVal objTela As Object, sCodInv As String) As Long

Dim lErro As Long

'Declarações para manipulação do Excel
Dim objImportacaoInv As New ClassImportacaoInv
Dim iLinhas As Integer
Dim lNumIntDoc As Long
Dim lTransacao As Long
Dim sArq As String
'Dim objPastaTrabalho As Object 'Excel.Workbook
'Dim objPlanilhaExcel As Object 'Excel.Worksheet
Dim iIndice As Integer
Dim objInventario As New ClassInventario
Dim sCodBarras As String
Dim objProduto As New ClassProduto
Dim sProdutoMascarado As String
Dim dQuant As Double
Dim objTelaInv As Object
Dim lNum As Long
Dim iIDProduto As Integer, sProduto As String, iProdutoPreenchido As Integer
Dim sLote As String, dCusto As String, iFilialOP As Integer
Dim iSoLote As Integer, iTipoEst As Integer, iPosicao As Integer
Dim objRastroLote As New ClassRastreamentoLote
Dim iAlmoxarifado As Integer
Dim objExcelApp As New ClassExcelApp

On Error GoTo Erro_Excel_Le_Planilha_Inv
   
    sArq = sArquivo

    'chama a tela passada como parametro criando uma nova instancia sem mostra-la
    lErro = Chama_Tela_Nova_Instancia1("Inventario", objTelaInv)
    If lErro <> SUCESSO Then gError 193968
        
'    'Abre o excel
'    lErro = CF("Excel_Abrir")
'    If lErro <> 0 Then gError 193969
'
'    'Desabilita as mensagens do Excel
'    GL_objExcelSist.DisplayAlerts = False
    
    objMsg.AddItem "Abrindo a planilha " & sArq
'
'    Set objPastaTrabalho = GL_objExcelSist.Workbooks.Open(sArq)
    
    DoEvents
        
    If objTela.giStop = 1 Then gError 193970
    
    objMsg.AddItem "Planilha aberta, iniciando importação"
    
'    'Seleciona a planilha ativa na pasta de trabalho criada
'    Set objPlanilhaExcel = objPastaTrabalho.ActiveSheet

    'Abre o excel
    lErro = objExcelApp.Abrir()
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = objExcelApp.Abrir_Planilha(sArq)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    iIndice = 0
    iLinhas = 0
        
    'sCodBarras = objPlanilhaExcel.Cells(1, 1).Value
     sCodBarras = objExcelApp.Obtem_Valor_Celula(1, 1)
        
    Do While sCodBarras <> ""
        iLinhas = iLinhas + 1
        'sCodBarras = objPlanilhaExcel.Cells(iLinhas, 1).Value
        sCodBarras = objExcelApp.Obtem_Valor_Celula(iLinhas, 1)
    Loop
            
    iLinhas = iLinhas - 1
        
    If iLinhas > 3000 Then gError 193971
    
    Call DateParaMasked(objTelaInv.objCT.Data, StrParaDate(objTela.Controls("Data").Text))
    Call objTelaInv.objCT.Data_Validate(bSGECancelDummy)
    
    objTelaInv.objCT.HORA.PromptInclude = False
    objTelaInv.objCT.HORA.Text = objTela.Controls(HORA).Text
    objTelaInv.objCT.HORA.PromptInclude = True
    
    iIDProduto = Codigo_Extrai(objTela.Controls("IDProd").Text)
                
    objTelaInv.objCT.GridItens.Rows = iLinhas + 1
    
    iTipoEst = objTela.Controls("Tipo").ItemData(objTela.Controls("Tipo").ListIndex)
    
    If objTela.Controls("optSoLote") = vbChecked Then
        iSoLote = MARCADO
    Else
        iSoLote = DESMARCADO
    End If
    
    iAlmoxarifado = Codigo_Extrai(objTela.Controls("Almoxarifado").Text)
        
    objProgresso.Max = iLinhas
    objProgresso.Min = 0
    objProgresso.Value = 0
        
    objInventario.iFilialEmpresa = iFilialEmpresa
    
    Do While lErro = SUCESSO

        lErro = CF("Config_ObterNumInt_Trans", "MATConfig", "CODIGO_PROX_INVENTARIO_IMP", lNum)
        If lErro <> SUCESSO Then gError 193985
    
        objInventario.iFilialEmpresa = iFilialEmpresa
        objInventario.sCodigo = "imp" & CStr(lNum)
    
        lErro = CF("Inventario_Le", objInventario)
        If lErro <> SUCESSO And lErro <> 41011 Then gError 193986
        
    Loop
    
    sCodInv = objInventario.sCodigo
    
    objTelaInv.objCT.Codigo = objInventario.sCodigo
    
    'sCodBarras = objPlanilhaExcel.Cells(1, 1).Value
    sCodBarras = objExcelApp.Obtem_Valor_Celula(1, 1)
    
    objTelaInv.objCT.Opcao.Tabs.Item(2).Selected = True
    
    Do While sCodBarras <> ""
    
        If left(sCodBarras, 1) = "|" Then sCodBarras = Mid(sCodBarras, 2)
        
        iIndice = iIndice + 1
    
        If iIDProduto = 1 Then
            If Len(sCodBarras) < 13 Then sCodBarras = String(13 - Len(sCodBarras), "0") & sCodBarras
            
            lErro = CF("ProdutoCodBarras_Le", sCodBarras, objProduto)
            If lErro <> SUCESSO And lErro <> 193965 Then gError 193974
        
            'se o codigo de barras nao existir
            If lErro <> SUCESSO Then gError 193975
        
        Else
            lErro = CF("Produto_Formata", sCodBarras, sProduto, iProdutoPreenchido)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objProduto.sCodigo = sProduto
        
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
            
            If lErro <> SUCESSO Then gError 211702
        End If
        
        'se o codigo de barras nao existir
        If lErro <> SUCESSO Then gError 193975
        
        'If Not (IsNumeric(objPlanilhaExcel.Cells(iIndice, 2).Value) And IsNumeric(objPlanilhaExcel.Cells(iIndice, 3).Value) And IsNumeric(objPlanilhaExcel.Cells(iIndice, 5).Value)) Then
        If Not (IsNumeric(objExcelApp.Obtem_Valor_Celula(iIndice, 2)) And (IsNumeric(objExcelApp.Obtem_Valor_Celula(iIndice, 3)) Or objExcelApp.Obtem_Valor_Celula(iIndice, 3) = "") And (IsNumeric(objExcelApp.Obtem_Valor_Celula(iIndice, 5)) Or objExcelApp.Obtem_Valor_Celula(iIndice, 5) = "")) Then
            gError 211703
        End If
        
        'dQuant = StrParaDbl(objPlanilhaExcel.Cells(iIndice, 2).Value)
        dQuant = StrParaDbl(objExcelApp.Obtem_Valor_Celula(iIndice, 2))
    
        objTelaInv.objCT.GridItens.Row = iIndice
        objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_Produto_Col
        
        Call objTelaInv.objCT.GridItens_Click
    
        sProdutoMascarado = String(STRING_PRODUTO, 0)
    
        lErro = Mascara_MascararProduto(objProduto.sCodigo, sProdutoMascarado)
        If lErro <> SUCESSO Then gError 193976
    
        objTelaInv.objCT.Produto.PromptInclude = False
        objTelaInv.objCT.Produto.Text = sProdutoMascarado
        objTelaInv.objCT.Produto.PromptInclude = True
            
        objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_Tipo_Col
        
        Call objTelaInv.objCT.GridItens_Click
        
        For iPosicao = 0 To objTelaInv.objCT.Tipo.ListCount - 1
            If objTelaInv.objCT.Tipo.ItemData(iPosicao) = iTipoEst Then
                objTelaInv.objCT.Tipo.ListIndex = iPosicao
                Exit For
            End If
        Next
        
        objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_Almoxarifado_Col
        
        Call objTelaInv.objCT.GridItens_Click
    
        sProdutoMascarado = String(STRING_PRODUTO, 0)
    
        objTelaInv.objCT.Almoxarifado.Text = CStr(iAlmoxarifado)
                    
        objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_Quantidade_Col
        
        Call objTelaInv.objCT.GridItens_Click
    
        objTelaInv.objCT.Quantidade.Text = dQuant
    
        objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_QuantEstoque_Col
    
        Call objTelaInv.objCT.GridItens_Click
        
'        dCusto = StrParaDbl(objPlanilhaExcel.Cells(iIndice, 3).Value)
'        sLote = Trim(objPlanilhaExcel.Cells(iIndice, 4).Value)
'        iFilialOP = StrParaInt(objPlanilhaExcel.Cells(iIndice, 5).Value)
        
        dCusto = StrParaDbl(objExcelApp.Obtem_Valor_Celula(iIndice, 3))
        sLote = Trim(objExcelApp.Obtem_Valor_Celula(iIndice, 4))
        iFilialOP = StrParaInt(objExcelApp.Obtem_Valor_Celula(iIndice, 5))
       
        If dCusto > 0 Then
        
            objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_CustoUnitario_Col
        
            Call objTelaInv.objCT.GridItens_Click
            
            objTelaInv.objCT.CustoUnitario.Text = dCusto
        
            objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_QuantEstoque_Col
        
            Call objTelaInv.objCT.GridItens_Click
            
        End If

        If Len(Trim(sLote)) > 0 Then
        
            objRastroLote.sCodigo = sLote
            objRastroLote.sProduto = objProduto.sCodigo
    
            'Se o produto e Lote estão preenchidos verifica se o Produto pertence ao Lote
            lErro = CF("RastreamentoLote_Le", objRastroLote)
            If lErro <> SUCESSO And lErro <> 75710 Then gError ERRO_SEM_MENSAGEM
    
            'Se não encontrou --> Erro
            If lErro = 75710 Then gError 211704
        
            objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_LoteProduto_Col
        
            Call objTelaInv.objCT.GridItens_Click
            
            objTelaInv.objCT.LoteProduto.Text = sLote
        
            objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_QuantEstoque_Col
        
            Call objTelaInv.objCT.GridItens_Click
            
            If iFilialOP <> 0 Then
            
                objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_FilialOP_Col
            
                Call objTelaInv.objCT.GridItens_Click
                
                objTelaInv.objCT.FilialOP.Text = CStr(iFilialOP)
            
                objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_QuantEstoque_Col
            
                Call objTelaInv.objCT.GridItens_Click
            
            End If
            
            objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_Atualiza_Col
            
            Call objTelaInv.objCT.GridItens_Click
            
            For iPosicao = 0 To objTelaInv.objCT.Atualiza.ListCount - 1
                If objTelaInv.objCT.Atualiza.ItemData(iPosicao) = iSoLote Then
                    objTelaInv.objCT.Atualiza.ListIndex = iPosicao
                    Exit For
                End If
            Next
            
            objTelaInv.objCT.GridItens.TextMatrix(objTelaInv.objCT.GridItens.Row, objTelaInv.objCT.iGrid_Atualiza_Col) = objTelaInv.objCT.Atualiza.Text
            
            objTelaInv.objCT.GridItens.Col = objTelaInv.objCT.iGrid_QuantEstoque_Col
        
            Call objTelaInv.objCT.GridItens_Click
        
        End If
    
        'sCodBarras = objPlanilhaExcel.Cells(iIndice + 1, 1).Value
        sCodBarras = objExcelApp.Obtem_Valor_Celula(iIndice + 1, 1)
        
        objProgresso.Value = objProgresso.Value + 1
        
        DoEvents
        
        If objTela.giStop = 1 Then gError 193977
    
    Loop
    
    DoEvents
        
    If objTela.giStop = 1 Then gError 193978
    
    lErro = objTelaInv.objCT.Gravar_Registro()
    If lErro <> SUCESSO Then gError 193979
    
    objTelaInv.objCT.iAlterado = 0
    
    Call objTelaInv.objCT.BotaoFechar_Click
    
    'Call CF("Excel_Fechar")
    
    lErro = objExcelApp.Fechar()
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 193980

    objImportacaoInv.iFilialEmpresa = iFilialEmpresa
    
    objImportacaoInv.sArquivo = Dir(sArq)
    
    objImportacaoInv.lNumIntDoc = lNum
    
    objImportacaoInv.dtData = gdtDataAtual
    
    objImportacaoInv.dtHora = Time
    
    objImportacaoInv.sUsuario = gsUsuario
    
    lErro = CF("ImportacaoInv_Grava", objImportacaoInv)
    If lErro <> SUCESSO Then gError 193981
    
    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 193982
    
    objMsg.AddItem "Arquivo " & sArq & " importado com sucesso."
    
    Excel_Le_Planilha_Inv = SUCESSO
    
    Exit Function
    
Erro_Excel_Le_Planilha_Inv:

    Excel_Le_Planilha_Inv = gErr
    
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 193968, 193969, 193972, 193973, 193974, 193979, 193981, 193984, 193985, 193986

        Case 193970, 193977, 193978
            Call Rotina_Erro(vbOKOnly, "ERRO_IMPORTACAO_INTERROMPIDA_USUARIO", gErr)

        Case 193971
            Call Rotina_Erro(vbOKOnly, "ERRO_PLANILHA_EXCEDEU_LIMITE", gErr)

        Case 193975
            Call Rotina_Erro(vbOKOnly, "ERRO_CODIGO_BARRAS_NAO_ENCONTRADO", gErr, sCodBarras, iIndice)

        Case 193976
            Call Rotina_Erro(vbOKOnly, "ERRO_MASCARA_MASCARARPRODUTO", gErr, objProduto.sCodigo)

        Case 193980
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 193982
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 211702
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, sCodBarras)

        Case 211703
            Call Rotina_Erro(vbOKOnly, "ERRO_IMP_INV_FORA_LAYOUT", gErr)
        
        Case 211704 'ERRO_LOTE_NAO_CADASTRADO_RASTREAMENTO
            Call Rotina_Erro(vbOKOnly, "ERRO_LOTE_NAO_CADASTRADO_RASTREAMENTO", gErr, objProduto.sCodigo, sLote, iFilialOP)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 193983)

    End Select

    Call Transacao_Rollback

    'Fecha o Excel
    'Call CF("Excel_Fechar")

    Call objExcelApp.Fechar

    If Not objTelaInv.objCT Is Nothing Then
        objTelaInv.objCT.iAlterado = 0
    
        Call objTelaInv.objCT.BotaoFechar_Click
    End If

    Exit Function

End Function

Function ImportacaoInv_Grava(objImportacaoInv As ClassImportacaoInv) As Long
'Insere o registro na tabela ImportacaoInv

Dim lErro As Long
Dim lComando As Long
Dim sInsert As String

On Error GoTo Erro_ImportacaoInv_Grava
    
    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 193987
    
    'Guarda a expressão SQL
    sInsert = "INSERT INTO ImportacaoInv (FilialEmpresa, Arquivo, NumIntDoc, Data, Hora, Usuario) VALUES (?,?,?,?,?,?)"
            
    'Grava historico na tabela de CclHistorico
    lErro = Comando_Executar(lComando, sInsert, objImportacaoInv.iFilialEmpresa, objImportacaoInv.sArquivo, objImportacaoInv.lNumIntDoc, objImportacaoInv.dtData, CDbl(objImportacaoInv.dtHora), objImportacaoInv.sUsuario)
    If lErro <> AD_SQL_SUCESSO Then gError 193988
        
    'Fecha o Comando
    Call Comando_Fechar(lComando)

    ImportacaoInv_Grava = SUCESSO
    
    Exit Function

Erro_ImportacaoInv_Grava:

    ImportacaoInv_Grava = gErr
    
    Select Case gErr
    
        Case 193987
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 193988
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_IMPORTACAOINV", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 193989)
    
    End Select

    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function

Function Produto_Exclui_Usu(ByVal sProduto As String) As Long
'para excluir parte customizada do produto

    Produto_Exclui_Usu = SUCESSO
    
End Function

Public Function Produto_Grava_Customizado(ByVal objProduto As ClassProduto) As Long
    Produto_Grava_Customizado = SUCESSO
End Function

Public Function Almoxarifado_Grava_Customizado(ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
    Almoxarifado_Grava_Customizado = SUCESSO
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function RastreamentoLoteLoc_Grava(ByVal objRastreamentoLoteLoc As ClassRastreamentoLoteLoc) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_RastreamentoLoteLoc_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198722

    lErro = CF("RastreamentoLoteLoc_Grava_EmTrans", objRastreamentoLoteLoc)
    If lErro <> SUCESSO Then gError 198723

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198724

    RastreamentoLoteLoc_Grava = SUCESSO

    Exit Function

Erro_RastreamentoLoteLoc_Grava:

    RastreamentoLoteLoc_Grava = gErr

    Select Case gErr

        Case 198722
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198723

        Case 198724
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198725)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function RastreamentoLoteLoc_Grava_EmTrans(ByVal objRastreamentoLoteLoc As ClassRastreamentoLoteLoc) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_RastreamentoLoteLoc_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198726
    Next

    'Le a tabelaRastreamentoLoteLoc
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM RastreamentoLoteLoc WHERE Localizacao= ? ", _
                0, iAux, objRastreamentoLoteLoc.sLocalizacao)
    If lErro <> AD_SQL_SUCESSO Then gError 198727

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198728

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 198729

        'Por enquanto não tem outros campos
'        lErro = Comando_ExecutarPos(alComando(1), "UPDATE RastreamentoLoteLoc SET ", alComando(0))
'        If lErro <> AD_SQL_SUCESSO Then gError 198730

    Else


        lErro = Comando_Executar(alComando(1), "INSERT INTO RastreamentoLoteLoc( Localizacao) VALUES (?)", _
                objRastreamentoLoteLoc.sLocalizacao)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198731

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RastreamentoLoteLoc_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RastreamentoLoteLoc_Grava_EmTrans:

    RastreamentoLoteLoc_Grava_EmTrans = gErr

    Select Case gErr

        Case 198726
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198727, 198728
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTELOC", gErr)

        Case 198729
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RASTREAMENTOLOTELOC", gErr)

        Case 198730
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_RASTREAMENTOLOTELOC", gErr)

        Case 198731
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RASTREAMENTOLOTELOC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198732)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function RastreamentoLoteLoc_Exclui(ByVal objRastreamentoLoteLoc As ClassRastreamentoLoteLoc) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_RastreamentoLoteLoc_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198711

    lErro = CF("RastreamentoLoteLoc_Exclui_EmTrans", objRastreamentoLoteLoc)
    If lErro <> SUCESSO Then gError 198712

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198713

    RastreamentoLoteLoc_Exclui = SUCESSO

    Exit Function

Erro_RastreamentoLoteLoc_Exclui:

    RastreamentoLoteLoc_Exclui = gErr

    Select Case gErr

        Case 198711
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198712

        Case 198713
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198714)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function RastreamentoLoteLoc_Exclui_EmTrans(ByVal objRastreamentoLoteLoc As ClassRastreamentoLoteLoc) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim sProduto As String
Dim sLote As String

On Error GoTo Erro_RastreamentoLoteLoc_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198715
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    sLote = String(STRING_LOTE_RASTREAMENTO, 0)

    'Le a tabelaRastreamentoLoteLoc
    lErro = Comando_Executar(alComando(2), "SELECT Produto, Lote FROM RastreamentoLote WHERE Localizacao= ? ", _
                sProduto, sLote, objRastreamentoLoteLoc.sLocalizacao)
    If lErro <> AD_SQL_SUCESSO Then gError 198722
    
    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198723
    
    If lErro = AD_SQL_SUCESSO Then gError 198724

    'Le a tabelaRastreamentoLoteLoc
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM RastreamentoLoteLoc WHERE Localizacao= ? ", _
                0, iAux, objRastreamentoLoteLoc.sLocalizacao)
    If lErro <> AD_SQL_SUCESSO Then gError 198716

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198717

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 198718

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 198719

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM RastreamentoLoteLoc", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 198720

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RastreamentoLoteLoc_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_RastreamentoLoteLoc_Exclui_EmTrans:

    RastreamentoLoteLoc_Exclui_EmTrans = gErr

    Select Case gErr

        Case 198715
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198716, 198717
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTELOC", gErr)

        Case 198718
            Call Rotina_Erro(vbOKOnly, "ERRO_RASTREAMENTOLOTELOC_NAO_CADASTRADO", gErr, objRastreamentoLoteLoc.sLocalizacao)

        Case 198719
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RASTREAMENTOLOTELOC", gErr)

        Case 198720
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RASTREAMENTOLOTELOC", gErr)

        Case 198722, 198723
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RASTREAMENTOLOTE", gErr)

        Case 198724
            Call Rotina_Erro(vbOKOnly, "ERRO_RASTRO_LOC_UTILIZADA", gErr, sLote, sProduto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198721)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Produto_Exclui_Tabela(ByVal sProduto As String, ByVal sTabela As String, ByVal sNomeCampo As String) As Long
'Exclui os registros do produto fisicamente da tabela informada

Dim lErro As Long
Dim iIndice As Integer
Dim sProdutoBD As String
Dim alComando(0 To 1) As Long

On Error GoTo Erro_Produto_Exclui_Tabela

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 108770
    Next
    
    'Inicializa o buffer
    sProdutoBD = String(STRING_PRODUTO, 0)
        
    'Prepara a execucao
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto FROM " & sTabela & " WHERE " & sNomeCampo & " = ?", 0, sProdutoBD, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 108771
    
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108772
    
    'Enquanto encontrar ... exclui
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Apaga o registro
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM " & sTabela, alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 108773
        
        'Busca o proximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108774
    
    Loop

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Produto_Exclui_Tabela = SUCESSO

    Exit Function
    
Erro_Produto_Exclui_Tabela:

    Produto_Exclui_Tabela = gErr

    Select Case gErr
    
        Case 108770
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108771, 108772, 108774
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SldMesForn", gErr, sProduto)

        Case 108773
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SldMesForn", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151912)
    
    End Select
    
    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Function TabPrecoItem_Grava_Customizado(ByVal objTabelaPrecoItem As ClassTabelaPrecoItem) As Long
'Rotina que grava Tabela de Preço Item Customizado

    TabPrecoItem_Grava_Customizado = SUCESSO

End Function

Function Trata_Segmento_Produto(sProduto As String) As Long

    Trata_Segmento_Produto = SUCESSO

End Function

Private Function Rotina_FechamentoMes1(ByVal objEstoque As ClassEstoqueMes, iCancela As Integer, ByVal objTela As Object) As Long
'Rotina que fecha o mes que está aberto do estoque

Dim lErro As Long
Dim objSldMesEst As New ClassSldMesEst
Dim iMes As Integer
Dim objEstoqueMes As New ClassEstoqueMes

On Error GoTo Erro_Rotina_FechamentoMes1

    'preenche o objeto
    objEstoqueMes.iFilialEmpresa = objEstoque.iFilialEmpresa
    objEstoqueMes.iFechamento = ESTOQUEMES_FECHAMENTO_ABERTO

    'Ler o mês e o ano que esta aberto passando como parametro filialEmpresa  e Fechamento
    lErro = CF("EstoqueMes_Le_Mes", objEstoqueMes)
    If lErro <> SUCESSO And lErro <> 40673 Then gError 60856

    If lErro = 40673 Then gError 60857
    
    'preenche o objeto
    objSldMesEst.iAno = objEstoque.iAno
    objSldMesEst.iFilialEmpresa = objEstoque.iFilialEmpresa
    iMes = objEstoque.iMes
    
    'se no estoque for o mes 12(DEZEMBRO) então fechará o ano e iniciará um novo ano
    If objEstoque.iMes = 12 Then

        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 1 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valor inicial, quantidade da tabela SldMesEst
        lErro = CF("SldMesEst_Atualiza_Ano", objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 40680
                                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 2 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valores e quantidades iniciais da tabela SldMesEst1
        lErro = SldMesEst1_Atualiza_Ano(objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 60949
                                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 3 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valores e quantidades iniciais da tabela SldMesEst2
        lErro = SldMesEst2_Atualiza_Ano(objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 60949
                                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 4 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valor inicial, quantidade da tabela SldMesEstAlm
        lErro = CF("SldMesEstAlm_Atualiza_Ano", objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 60523
                                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 5 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valor inicial, quantidade da tabela SldMesEstAlm1
        lErro = SldMesEstAlm1_Atualiza_Ano(objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 71501
                                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 6 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valor inicial, quantidade da tabela SldMesEstAlm2
        lErro = SldMesEstAlm2_Atualiza_Ano(objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 71502
        
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 7 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valor inicial, quantidade da tabela SldMesEstAlm1
        lErro = SldMesEst1Terc_Atualiza_Ano(objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 71501
                                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 8 de 8 Filial " & objSldMesEst.iFilialEmpresa
    
        'atualiza valor inicial, quantidade da tabela SldMesEstAlm2
        lErro = SldMesEst2Terc_Atualiza_Ano(objTela, objSldMesEst, iCancela)
        If lErro <> SUCESSO Then gError 71502
                                
    'se o estoque for qualquer outro mes que nao seja o mes 12
    Else
               
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 1 de 6 Filial " & objSldMesEst.iFilialEmpresa
    
        'Atualiza CustoMedio, CustoStandard, Status
        lErro = CF("SldMesEst_Atualiza_Mes", objTela, objEstoque.iMes, objSldMesEst, iCancela, objEstoque)
        If lErro <> SUCESSO Then gError 40681
                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 2 de 6 Filial " & objSldMesEst.iFilialEmpresa
    
        'Atualiza CustoMedio, CustoStandard, Status
        lErro = CF("SldMesEstAlm_Atualiza_Mes", objTela, objEstoque.iMes, objSldMesEst, iCancela, objEstoque)
        If lErro <> SUCESSO Then gError 60524
                 
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 3 de 6 Filial " & objSldMesEst.iFilialEmpresa
                           
        'Passa os Custo Medios de Produtos de Terceiros do mes que está sendo fechado para o mes seguinte
        lErro = SldMesEst1_Atualiza_Mes(objTela, objEstoque.iMes, objSldMesEst, iCancela, objEstoque)
        If lErro <> SUCESSO Then gError 71604
                            
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 4 de 6 Filial " & objSldMesEst.iFilialEmpresa
    
        'Passa os Custo Medios de Produtos Nossos em Poder de Terceiros do mes que está sendo fechado para o mes seguinte
        lErro = SldMesEst2_Atualiza_Mes(objTela, objEstoque.iMes, objSldMesEst, iCancela, objEstoque)
        If lErro <> SUCESSO Then gError 71605
                
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 5 de 6 Filial " & objSldMesEst.iFilialEmpresa
                           
        'Passa os Custo Medios de Produtos de Terceiros do mes que está sendo fechado para o mes seguinte
        lErro = SldMesEst1Terc_Atualiza_Mes(objTela, objEstoque.iMes, objSldMesEst, iCancela, objEstoque)
        If lErro <> SUCESSO Then gError 71604
                            
        'acerta o indicador do passo na tela
        objTela.Controls("labelPasso").Caption = "Passo 6 de 6 Filial " & objSldMesEst.iFilialEmpresa
    
        'Passa os Custo Medios de Produtos Nossos em Poder de Terceiros do mes que está sendo fechado para o mes seguinte
        lErro = SldMesEst2Terc_Atualiza_Mes(objTela, objEstoque.iMes, objSldMesEst, iCancela, objEstoque)
        If lErro <> SUCESSO Then gError 71605
                
    End If
    
    'Atualiza o mes ou o ano na tabela de EstoqueMes
    lErro = CF("EstoqueMes_Atualiza", objSldMesEst, iMes)
    If lErro <> SUCESSO Then gError 40771
    
    
    Rotina_FechamentoMes1 = SUCESSO

    Exit Function

Erro_Rotina_FechamentoMes1:

    Rotina_FechamentoMes1 = gErr

    Select Case gErr

        Case 40680, 40681, 40771, 60523, 60524, 60856, 60949, 71501, 71502, 71604, 71605

        Case 60857
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NAOEXISTE_MES_ABERTO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199433)

    End Select

  Exit Function

End Function

Public Function Reserva_Testa_Integridade() As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 2) As Long
Dim iAlmoxarifado As Integer
Dim dQuantidadeReservada As Double
Dim dQuantReservadaEst As Double
Dim sProduto As String
Dim sConteudo As String

On Error GoTo Erro_Reserva_Testa_Integridade

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198367
    Next
    
    sConteudo = String(STRING_CONTEUDO, 0)
    
    'Verifica se é para testar a reserva
    lErro = Comando_Executar(alComando(2), "SELECT Conteudo FROM FATConfig WHERE Codigo = ?", sConteudo, "TESTA_RESERVA")
    If lErro <> AD_SQL_SUCESSO Then gError 198375

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198376
    
    If lErro <> AD_SQL_SUCESSO Then sConteudo = "0"
    
    If StrParaInt(sConteudo) = MARCADO Then
    
        sProduto = String(STRING_PRODUTO, 0)
    
        'Faz a leitura dos registros das reservas
        lErro = Comando_Executar(alComando(0), "SELECT R.Almoxarifado, R.Produto, SUM(R.Quantidade) FROM Reserva AS R GROUP BY R.Almoxarifado, R.Produto", iAlmoxarifado, sProduto, dQuantidadeReservada)
        If lErro <> AD_SQL_SUCESSO Then gError 198368
    
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198369
    
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'Faz a leitura dos registros das reservas
            lErro = Comando_Executar(alComando(1), "SELECT QuantReservada FROM EstoqueProduto WHERE Produto = ? AND Almoxarifado = ? ", dQuantReservadaEst, sProduto, iAlmoxarifado)
            If lErro <> AD_SQL_SUCESSO Then gError 198370
        
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198371
        
            If Abs(dQuantidadeReservada - dQuantReservadaEst) > QTDE_ESTOQUE_DELTA Then gError 198372
        
            lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198373
        
        Loop
        
    End If

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Reserva_Testa_Integridade = SUCESSO

    Exit Function

Erro_Reserva_Testa_Integridade:

    Reserva_Testa_Integridade = gErr

    Select Case gErr

        Case 198367
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198368, 198369, 198373
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA", gErr)

        Case 198370, 198371
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTOQUEPRODUTO", gErr)

        Case 198372
            Call Rotina_Erro(vbOKOnly, "ERRO_QUANTRESERVA_ERRADA", gErr, sProduto, iAlmoxarifado, Formata_Estoque(dQuantidadeReservada), Formata_Estoque(dQuantReservadaEst))

        Case 198375, 198376
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATCONFIG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198374)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Produto_Valida(ByVal objProduto As ClassProduto) As Long

Dim lErro As Long
Dim objSegmento As New ClassSegmento
Dim colSegmentos As New Collection
Dim iNivel As Integer
Dim sProduto As String

On Error GoTo Erro_Produto_Valida

    'Le quantosa segmentos tem o produto
    objSegmento.sCodigo = SEGMENTO_PRODUTO

    lErro = CF("Segmento_Le_Codigo", objSegmento, colSegmentos)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Obtém o nível do que está sendo gravado
    sProduto = objProduto.sCodigo
    
    Call Mascara_Produto_ObterNivel(sProduto, iNivel)
    
    'Não deixa gravar um produto pai de grade como também sendo kit de venda
    If Len(Trim(objProduto.sGrade)) > 0 Then objProduto.iKitVendaComp = DESMARCADO
    
    'Se o último nível do produto está preenchido e ele está marcado como gerencial e não é um kit de venda dá erro
    If iNivel = colSegmentos.Count And objProduto.iGerencial = PRODUTO_GERENCIAL And objProduto.iKitVendaComp = DESMARCADO Then gError 208410

    Produto_Valida = SUCESSO

    Exit Function

Erro_Produto_Valida:

    Produto_Valida = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
        
        Case 208410
            Call Rotina_Erro(vbOKOnly, "ERRO_PROD_ULTNIVEL_GERENCIAL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208411)

    End Select

    Exit Function

End Function

Public Function ImportarTabelaPrecoItem() As Long

Dim lErro As Long
Dim colTabelaPrecoItem As New Collection
Dim objTabelaPrecoItem As ClassTabelaPrecoItem

On Error GoTo Erro_ImportarTabelaPrecoItem

    lErro = CF("ImportTabelaPrecoItem_Le", colTabelaPrecoItem)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    For Each objTabelaPrecoItem In colTabelaPrecoItem

        If objTabelaPrecoItem.dtDataVigencia = DATA_NULA Then objTabelaPrecoItem.dtDataVigencia = Date

        lErro = CF("TabelaPrecoItem_Grava", objTabelaPrecoItem)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    Next
    
    ImportarTabelaPrecoItem = SUCESSO
    
    Exit Function

Erro_ImportarTabelaPrecoItem:

    ImportarTabelaPrecoItem = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208974)

    End Select

    Exit Function

End Function

Function SldDiaEstTerc_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal lCliente As Long, ByVal iFilialCli As Integer, ByVal lFornecedor As Long, ByVal iFilialForn As Integer) As Long
'Atualiza a tabela de SldDiaEst utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim dtData As Date
Dim bNossoEmTerc As Boolean
Dim bTercConosco As Boolean

On Error GoTo Erro_SldDiaEstTerc_Atualiza

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
    
        bNossoEmTerc = False
        bTercConosco = False

        bNossoEmTerc = Abs(objSldDiaEst.dQuantEntConsig) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiConsig) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntConsig) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiConsig) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntDemo) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiDemo) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntDemo) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiDemo) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntConserto) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiConserto) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntConserto) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiConserto) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntOutros) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiOutros) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntOutros) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiOutros) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntBenef) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiBenef) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntBenef) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiBenef) > QTDE_ESTOQUE_DELTA

        bTercConosco = Abs(objSldDiaEst.dQuantEntConsig3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiConsig3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntConsig3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiConsig3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntDemo3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiDemo3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntDemo3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiDemo3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntConserto3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiConserto3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntConserto3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiConserto3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntOutros3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiOutros3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntOutros3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiOutros3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantEntBenef3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dQuantSaiBenef3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorEntBenef3) > QTDE_ESTOQUE_DELTA Or _
            Abs(objSldDiaEst.dValorSaiBenef3) > QTDE_ESTOQUE_DELTA
                
        If bNossoEmTerc Or bTercConosco Then
    
            'Le a tabela de SldDiaEst para a filial/produto/data em questão
            lErro = Comando_ExecutarPos(lComando1, "SELECT Data FROM SldDiaEstTerc WHERE FilialEmpresa = ? AND Produto = ? AND Data = ? AND Cliente = ? AND FilialCli = ? AND Fornecedor = ? AND FilialForn = ?", 0, dtData, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, objSldDiaEst.dtData, lCliente, iFilialCli, lFornecedor, iFilialForn)
            If lErro <> AD_SQL_SUCESSO Then gError 20396
        
            'leitura do registro referente a filial/produto/data em questão
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 20397
            
            'se não encontrou um registro para a data em questão ==> insere um registro
            If lErro = AD_SQL_SEM_DADOS Then
            
                'Insere um registro na tabela de SldDiaEst para a filial/produto/data em questão
                lErro = Comando_Executar(lComando2, "INSERT INTO SldDiaEstTerc (FilialEmpresa, Produto, Data, QuantEntConsig3, ValorEntConsig3, QuantSaiConsig3, ValorSaiConsig3, QuantEntDemo3, ValorEntDemo3, QuantSaiDemo3, ValorSaiDemo3, QuantEntConserto3, ValorEntConserto3, QuantSaiConserto3, ValorSaiConserto3, QuantEntOutros3, ValorEntOutros3, QuantSaiOutros3, ValorSaiOutros3, QuantEntBenef3, ValorEntBenef3, QuantSaiBenef3, ValorSaiBenef3," & _
                "QuantEntConsig, ValorEntConsig, QuantSaiConsig, ValorSaiConsig, QuantEntDemo, ValorEntDemo, QuantSaiDemo, ValorSaiDemo, QuantEntConserto, ValorEntConserto, QuantSaiConserto, ValorSaiConserto, QuantEntOutros, ValorEntOutros, QuantSaiOutros, ValorSaiOutros, QuantEntBenef, ValorEntBenef, QuantSaiBenef, ValorSaiBenef,  Cliente, FilialCli, Fornecedor, FilialForn) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, objSldDiaEst.dtData, _
                objSldDiaEst.dQuantEntConsig3, objSldDiaEst.dValorEntConsig3, objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3, objSldDiaEst.dValorEntDemo3, objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3, objSldDiaEst.dValorEntConserto3, objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3, objSldDiaEst.dValorEntOutros3, objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3, objSldDiaEst.dValorEntBenef3, objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorSaiBenef3, _
                objSldDiaEst.dQuantEntConsig, objSldDiaEst.dValorEntConsig, objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo, objSldDiaEst.dValorEntDemo, objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto, objSldDiaEst.dValorEntConserto, objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros, objSldDiaEst.dValorEntOutros, objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef, objSldDiaEst.dValorEntBenef, objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorSaiBenef, _
                lCliente, iFilialCli, lFornecedor, iFilialForn)
                If lErro <> AD_SQL_SUCESSO Then gError 20398
            
            
            Else
                'se encontrou ==> atualiza o registro
            
                'lock do registro em questão
                lErro = Comando_LockExclusive(lComando1)
                If lErro <> AD_SQL_SUCESSO Then gError 20399
            
                'Atualiza a tabela de SldDiaEst para a filial/produto/data em questão
                lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaEstTerc SET QuantEntConsig3 = QuantEntConsig3 + ?, ValorEntConsig3 = ValorEntConsig3 + ?, QuantSaiConsig3 = QuantSaiConsig3 + ?, ValorSaiConsig3 = ValorSaiConsig3 + ?, QuantEntDemo3 = QuantEntDemo3 + ?, ValorEntDemo3 = ValorEntDemo3 + ?, QuantSaiDemo3 = QuantSaiDemo3 + ?, ValorSaiDemo3 = ValorSaiDemo3 + ?, " & _
                                            "QuantEntConserto3 = QuantEntConserto3 + ?, ValorEntConserto3 = ValorEntConserto3 + ?, QuantSaiConserto3 = QuantSaiConserto3 + ?, ValorSaiConserto3 = ValorSaiConserto3 + ?, QuantEntOutros3 = QuantEntOutros3 + ?, ValorEntOutros3 = ValorEntOutros3 + ?, QuantSaiOutros3 = QuantSaiOutros3 + ?, ValorSaiOutros3 = ValorSaiOutros3 + ?, QuantEntBenef3 = QuantEntBenef3 + ?, ValorEntBenef3 = ValorEntBenef3 + ?, QuantSaiBenef3 = QuantSaiBenef3 + ?, ValorSaiBenef3 = ValorSaiBenef3 + ?, " & _
                                            "QuantEntConsig = QuantEntConsig + ?, ValorEntConsig = ValorEntConsig + ?, QuantSaiConsig = QuantSaiConsig + ?, ValorSaiConsig = ValorSaiConsig + ?, QuantEntDemo = QuantEntDemo + ?, ValorEntDemo = ValorEntDemo + ?, QuantSaiDemo = QuantSaiDemo + ?, ValorSaiDemo = ValorSaiDemo + ?, QuantEntConserto = QuantEntConserto + ?, ValorEntConserto = ValorEntConserto + ?, QuantSaiConserto = QuantSaiConserto + ?, ValorSaiConserto = ValorSaiConserto + ?, QuantEntOutros = QuantEntOutros + ?, ValorEntOutros = ValorEntOutros + ?, QuantSaiOutros = QuantSaiOutros + ?, ValorSaiOutros = ValorSaiOutros + ?, QuantEntBenef = QuantEntBenef + ?, ValorEntBenef = ValorEntBenef + ?, QuantSaiBenef = QuantSaiBenef + ?, ValorSaiBenef = ValorSaiBenef + ?", _
                                            lComando1, objSldDiaEst.dQuantEntConsig3, objSldDiaEst.dValorEntConsig3, objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3, objSldDiaEst.dValorEntDemo3, objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3, objSldDiaEst.dValorEntConserto3, objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3, objSldDiaEst.dValorEntOutros3, objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorSaiOutros3, _
                                            objSldDiaEst.dQuantEntBenef3, objSldDiaEst.dValorEntBenef3, objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorSaiBenef3, objSldDiaEst.dQuantEntConsig, objSldDiaEst.dValorEntConsig, objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo, objSldDiaEst.dValorEntDemo, objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto, objSldDiaEst.dValorEntConserto, objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros, objSldDiaEst.dValorEntOutros, objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef, objSldDiaEst.dValorEntBenef, objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorSaiBenef)
                If lErro <> AD_SQL_SUCESSO Then gError 20400
                
            End If
            
        End If
    
    End If

    SldDiaEstTerc_Atualiza = SUCESSO

    Exit Function

Erro_SldDiaEstTerc_Atualiza:

    SldDiaEstTerc_Atualiza = gErr

    Select Case gErr

        Case 20396, 20397
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAESTTERC", gErr, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, Format(objSldDiaEst.dtData, "dd/mm/yyyy"), lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case 20398
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAESTTERC", gErr, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, Format(objSldDiaEst.dtData, "dd/mm/yyyy"), lCliente, iFilialCli, lFornecedor, iFilialForn)
        
        Case 20399
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDDIAESTTERC", gErr, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, Format(objSldDiaEst.dtData, "dd/mm/yyyy"), lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case 20400
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAESTTERC", gErr, objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, Format(objSldDiaEst.dtData, "dd/mm/yyyy"), lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151724)

    End Select

    Exit Function

End Function

Friend Function SldDiaEstTerc_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui da tabela SldDiaEstTerc os registros relacionados com o Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_SldDiaEstTerc_Exclui_Produto

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 31094

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 31095

    'Lê os registros
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM SldDiaEstTerc WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 31096

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31097

    Do While lErro <> AD_SQL_SEM_DADOS

        'faz a exclusão da tabela.
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldDiaEstTerc", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 31100

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 31098

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldDiaEstTerc_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldDiaEstTerc_Exclui_Produto:

    SldDiaEstTerc_Exclui_Produto = gErr

    Select Case gErr

        Case 31094, 31095
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 31096, 31097, 31098
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAESTTERC", gErr)

        Case 31100
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDDIAESTTERC", gErr, sProduto, giFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151691)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function SldMesEst1Terc_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal lComando3 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal objTipoMovEstoque As ClassTipoMovEst, ByVal lCliente As Long, ByVal iFilialCli As Integer, ByVal lFornecedor As Long, ByVal iFilialForn As Integer, ByVal dCustoMedioConsig3 As Double, ByVal dCustoMedioDemo3 As Double, ByVal dCustoMedioConserto3 As Double, ByVal dCustoMedioOutros3 As Double, ByVal dCustoMedioBenef3 As Double) As Long
'Atualiza a tabela de SldMesEst1 utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer
Dim dCustoMedioConsig3Int As Double
Dim dCustoMedioDemo3Int As Double
Dim dCustoMedioConserto3Int As Double
Dim dCustoMedioOutros3Int As Double
Dim dCustoMedioBenef3Int As Double

On Error GoTo Erro_SldMesEst1Terc_Atualiza
    
    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
    
        'se é produto de terceiros
        If objTipoMovEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTODETERCEIROS Then
        
            If Abs(objSldDiaEst.dQuantEntConsig3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiConsig3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntConsig3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiConsig3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntDemo3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiDemo3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntDemo3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiDemo3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntConserto3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiConserto3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntConserto3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiConserto3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntOutros3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiOutros3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntOutros3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiOutros3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntBenef3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiBenef3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntBenef3) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiBenef3) > QTDE_ESTOQUE_DELTA Then
            
                iMes = Month(objSldDiaEst.dtData)
                sMes = CStr(iMes)
                
                'Le a tabela de SldMesEst1 para o Ano/filial/produto em questão
                lErro = Comando_ExecutarPos(lComando1, "SELECT Ano, CustoMedioConsig3" & sMes & ", CustoMedioDemo3" & sMes & ", CustoMedioConserto3" & sMes & ", CustoMedioOutros3" & sMes & ", CustoMedioBenef3" & sMes & " FROM SldMesEst1Terc WHERE FilialEmpresa=? AND Ano=? AND Produto=? AND Fornecedor = ? AND FilialForn = ? AND Cliente = ? AND FilialCli = ? ", 0, iAno, dCustoMedioConsig3Int, dCustoMedioDemo3Int, dCustoMedioConserto3Int, dCustoMedioOutros3Int, dCustoMedioBenef3Int, objSldDiaEst.iFilialEmpresa, Year(objSldDiaEst.dtData), objSldDiaEst.sProduto, lFornecedor, iFilialForn, lCliente, iFilialCli)
                If lErro <> AD_SQL_SUCESSO Then gError 60924
            
                'leitura do registro referente ao Ano/filial/produto em questão
                lErro = Comando_BuscarPrimeiro(lComando1)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60925
                
                If lErro = AD_SQL_SUCESSO Then
                
                    'lock do registro em questão
                    lErro = Comando_LockExclusive(lComando1)
                    If lErro <> AD_SQL_SUCESSO Then gError 60926
                
                    If dCustoMedioConsig3 = 0 Then dCustoMedioConsig3 = dCustoMedioConsig3Int
                    If dCustoMedioDemo3 = 0 Then dCustoMedioDemo3 = dCustoMedioDemo3Int
                    If dCustoMedioConserto3 = 0 Then dCustoMedioConserto3 = dCustoMedioConserto3Int
                    If dCustoMedioOutros3 = 0 Then dCustoMedioOutros3 = dCustoMedioOutros3Int
                    If dCustoMedioBenef3 = 0 Then dCustoMedioBenef3 = dCustoMedioBenef3Int
                
                    'Atualiza a tabela de SldMesEst1 para o Ano/filial/produto em questão
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1Terc SET SaldoQuantConsig3" + sMes + " = SaldoQuantConsig3" + sMes + " + ?, SaldoValorConsig3" + sMes + " = SaldoValorConsig3" + sMes + " + ?, SaldoQuantDemo3" + sMes + " = SaldoQuantDemo3" + sMes + " + ?, SaldoValorDemo3" + sMes + " = SaldoValorDemo3" + sMes + " + ?, SaldoQuantConserto3" + sMes + " = SaldoQuantConserto3" + sMes + " + ?, SaldoValorConserto3" + sMes + " = SaldoValorConserto3" + sMes + " + ?, SaldoQuantOutros3" + sMes + " = SaldoQuantOutros3" + sMes + " + ?, SaldoValorOutros3" + sMes + " = SaldoValorOutros3" + sMes + " + ?, SaldoQuantBenef3" + sMes + " = SaldoQuantBenef3" + sMes + " + ?, SaldoValorBenef3" + sMes + " = SaldoValorBenef3" + sMes + " + ?, CustoMedioConsig3" + sMes + " = ?, CustoMedioDemo3" + sMes + " = ?, CustoMedioConserto3" + sMes + " = ?, CustoMedioOutros3" + sMes + " = ?, CustoMedioBenef3" + sMes + " = ?", _
                    lComando1, objSldDiaEst.dQuantEntConsig3 - objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorEntConsig3 - objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3 - objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorEntDemo3 - objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3 - objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorEntConserto3 - objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3 - objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorEntOutros3 - objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3 - objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorEntBenef3 - objSldDiaEst.dValorSaiBenef3, dCustoMedioConsig3, dCustoMedioDemo3, dCustoMedioConserto3, dCustoMedioOutros3, dCustoMedioBenef3)
                    If lErro <> AD_SQL_SUCESSO Then gError 71578
                
                Else
    
                    'Cria dinamicamente
                    lErro = Comando_Executar(lComando3, "INSERT INTO SldMesEst1Terc (Ano, FilialEmpresa, Produto, SaldoQuantConsig3" + sMes + ", SaldoValorConsig3" + sMes + ", SaldoQuantDemo3" + sMes + ", SaldoValorDemo3" + sMes + ", SaldoQuantConserto3" + sMes + ", SaldoValorConserto3" + sMes + ", SaldoQuantOutros3" + sMes + ", SaldoValorOutros3" + sMes + ", SaldoQuantBenef3" + sMes + ", SaldoValorBenef3" + sMes + ", CustoMedioConsig3" + sMes + ", CustoMedioDemo3" + sMes + ", CustoMedioConserto3" + sMes + ", CustoMedioOutros3" + sMes + " , CustoMedioBenef3" + sMes + "  , Cliente, FilialCli, Fornecedor, FilialForn) " & _
                    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, objSldDiaEst.dQuantEntConsig3 - objSldDiaEst.dQuantSaiConsig3, objSldDiaEst.dValorEntConsig3 - objSldDiaEst.dValorSaiConsig3, objSldDiaEst.dQuantEntDemo3 - objSldDiaEst.dQuantSaiDemo3, objSldDiaEst.dValorEntDemo3 - objSldDiaEst.dValorSaiDemo3, objSldDiaEst.dQuantEntConserto3 - objSldDiaEst.dQuantSaiConserto3, objSldDiaEst.dValorEntConserto3 - objSldDiaEst.dValorSaiConserto3, objSldDiaEst.dQuantEntOutros3 - objSldDiaEst.dQuantSaiOutros3, objSldDiaEst.dValorEntOutros3 - objSldDiaEst.dValorSaiOutros3, objSldDiaEst.dQuantEntBenef3 - objSldDiaEst.dQuantSaiBenef3, objSldDiaEst.dValorEntBenef3 - objSldDiaEst.dValorSaiBenef3, dCustoMedioConsig3, dCustoMedioDemo3, dCustoMedioConserto3, dCustoMedioOutros3, dCustoMedioBenef3, lCliente, iFilialCli, lFornecedor, iFilialForn)
                    If lErro <> AD_SQL_SUCESSO Then gError 71583
                    
                End If
                
            End If
                
        End If
    
    End If
        
    SldMesEst1Terc_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEst1Terc_Atualiza:

    SldMesEst1Terc_Atualiza = gErr

    Select Case gErr

        Case 60924, 60925
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1TERC", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case 60926
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST1TERC", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case 60927, 71578
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST1TERC", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case 71583
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_SLDMESEST1TERC", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151827)

    End Select

    Exit Function

End Function

Function SldMesEst2Terc_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal lComando3 As Long, ByVal objSldDiaEst As ClassSldDiaEst, ByVal objTipoMovEstoque As ClassTipoMovEst, ByVal lCliente As Long, ByVal iFilialCli As Integer, ByVal lFornecedor As Long, ByVal iFilialForn As Integer, ByVal dCustoMedioConsig As Double, ByVal dCustoMedioDemo As Double, ByVal dCustoMedioConserto As Double, ByVal dCustoMedioOutros As Double, ByVal dCustoMedioBenef As Double) As Long
'Atualiza a tabela de SldMesEst1 utilizando os valores passados atraves de objSldDiaEst.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer
Dim tSldMesEst As typeSldMesEst
Dim dCustoMedioConsigInt As Double
Dim dCustoMedioDemoInt As Double
Dim dCustoMedioConsertoInt As Double
Dim dCustoMedioOutrosInt As Double
Dim dCustoMedioBenefInt As Double

On Error GoTo Erro_SldMesEst2Terc_Atualiza
    
    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
        
        'se é produto nosso em poder de terceiros (entrando ou saindo)
        If objTipoMovEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTONOSSO And (objTipoMovEstoque.iAtualizaBenef <> TIPOMOV_EST_NAOATUALIZABENEF Or objTipoMovEstoque.iAtualizaConserto <> TIPOMOV_EST_NAOATUALIZACONSERTO Or _
           objTipoMovEstoque.iAtualizaConsig <> TIPOMOV_EST_NAOATUALIZACONSIGNACAO Or objTipoMovEstoque.iAtualizaDemo <> TIPOMOV_EST_NAOATUALIZADEMO Or objTipoMovEstoque.iAtualizaOutras <> TIPOMOV_EST_NAOATUALIZAOUTRAS) Then
        
            If Abs(objSldDiaEst.dQuantEntConsig) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiConsig) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntConsig) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiConsig) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntDemo) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiDemo) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntDemo) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiDemo) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntConserto) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiConserto) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntConserto) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiConserto) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntOutros) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiOutros) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntOutros) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiOutros) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantEntBenef) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dQuantSaiBenef) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorEntBenef) > QTDE_ESTOQUE_DELTA Or _
                Abs(objSldDiaEst.dValorSaiBenef) > QTDE_ESTOQUE_DELTA Then
            
                iMes = Month(objSldDiaEst.dtData)
                sMes = CStr(iMes)
                
                'Le a tabela de SldMesEst2 para o Ano/filial/produto em questão
                lErro = Comando_ExecutarPos(lComando1, "SELECT Ano, CustoMedioConsig" & sMes & ", CustoMedioDemo" & sMes & ", CustoMedioConserto" & sMes & ", CustoMedioOutros" & sMes & ", CustoMedioBenef" & sMes & " FROM SldMesEst2Terc WHERE FilialEmpresa=? AND Ano=? AND Produto=? AND Fornecedor = ? AND FilialForn = ? AND Cliente = ? AND FilialCli = ? ", 0, iAno, dCustoMedioConsigInt, dCustoMedioDemoInt, dCustoMedioConsertoInt, dCustoMedioOutrosInt, dCustoMedioBenefInt, objSldDiaEst.iFilialEmpresa, Year(objSldDiaEst.dtData), objSldDiaEst.sProduto, lFornecedor, iFilialForn, lCliente, iFilialCli)
                If lErro <> AD_SQL_SUCESSO Then gError 60954
            
                'leitura do registro referente ao Ano/filial/produto em questão
                lErro = Comando_BuscarPrimeiro(lComando1)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60955
                
                If lErro = AD_SQL_SUCESSO Then
                    
                    'lock do registro em questão
                    lErro = Comando_LockExclusive(lComando1)
                    If lErro <> AD_SQL_SUCESSO Then gError 60956
                
                    If dCustoMedioConsig = 0 Then dCustoMedioConsig = dCustoMedioConsigInt
                    If dCustoMedioDemo = 0 Then dCustoMedioDemo = dCustoMedioDemoInt
                    If dCustoMedioConserto = 0 Then dCustoMedioConserto = dCustoMedioConsertoInt
                    If dCustoMedioOutros = 0 Then dCustoMedioOutros = dCustoMedioOutrosInt
                    If dCustoMedioBenef = 0 Then dCustoMedioBenef = dCustoMedioBenefInt
                
                    'Atualiza a tabela de SldMesEst2 para o Ano/filial/produto em questão
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2Terc SET SaldoQuantConsig" + sMes + " = SaldoQuantConsig" + sMes + " + ?, SaldoValorConsig" + sMes + " = SaldoValorConsig" + sMes + " + ?, SaldoQuantDemo" + sMes + " = SaldoQuantDemo" + sMes + " + ?, SaldoValorDemo" + sMes + " = SaldoValorDemo" + sMes + " + ?, SaldoQuantConserto" + sMes + " = SaldoQuantConserto" + sMes + " + ?, SaldoValorConserto" + sMes + " = SaldoValorConserto" + sMes + " + ?, SaldoQuantOutros" + sMes + " = SaldoQuantOutros" + sMes + " + ?, SaldoValorOutros" + sMes + " = SaldoValorOutros" + sMes + " + ?, SaldoQuantBenef" + sMes + " = SaldoQuantBenef" + sMes + " + ?, SaldoValorBenef" + sMes + " = SaldoValorBenef" + sMes + " + ?, CustoMedioConsig" + sMes + " = ?, CustoMedioDemo" + sMes + " = ?, CustoMedioConserto" + sMes + " = ?, CustoMedioOutros" + sMes + " = ?, CustoMedioBenef" + sMes + " = ?", _
                                                lComando1, objSldDiaEst.dQuantEntConsig - objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorEntConsig - objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo - objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorEntDemo - objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto - objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorEntConserto - objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros - objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorEntOutros - objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef - objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorEntBenef - objSldDiaEst.dValorSaiBenef, dCustoMedioConsig, dCustoMedioDemo, dCustoMedioConserto, dCustoMedioOutros, dCustoMedioBenef)
                    If lErro <> AD_SQL_SUCESSO Then gError 71583
                    
                Else
                
                    'Cria dinamicamente
                    lErro = Comando_Executar(lComando3, "INSERT INTO SldMesEst2Terc (Ano, FilialEmpresa, Produto, SaldoQuantConsig" + sMes + ", SaldoValorConsig" + sMes + ", SaldoQuantDemo" + sMes + ", SaldoValorDemo" + sMes + ", SaldoQuantConserto" + sMes + ", SaldoValorConserto" + sMes + ", SaldoQuantOutros" + sMes + ", SaldoValorOutros" + sMes + ", SaldoQuantBenef" + sMes + ", SaldoValorBenef" + sMes + ", CustoMedioConsig" + sMes + ", CustoMedioDemo" + sMes + ", CustoMedioConserto" + sMes + ", CustoMedioOutros" + sMes + " , CustoMedioBenef" + sMes + "  , Cliente, FilialCli, Fornecedor, FilialForn) " & _
                    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, objSldDiaEst.dQuantEntConsig - objSldDiaEst.dQuantSaiConsig, objSldDiaEst.dValorEntConsig - objSldDiaEst.dValorSaiConsig, objSldDiaEst.dQuantEntDemo - objSldDiaEst.dQuantSaiDemo, objSldDiaEst.dValorEntDemo - objSldDiaEst.dValorSaiDemo, objSldDiaEst.dQuantEntConserto - objSldDiaEst.dQuantSaiConserto, objSldDiaEst.dValorEntConserto - objSldDiaEst.dValorSaiConserto, objSldDiaEst.dQuantEntOutros - objSldDiaEst.dQuantSaiOutros, objSldDiaEst.dValorEntOutros - objSldDiaEst.dValorSaiOutros, objSldDiaEst.dQuantEntBenef - objSldDiaEst.dQuantSaiBenef, objSldDiaEst.dValorEntBenef - objSldDiaEst.dValorSaiBenef, dCustoMedioConsig, dCustoMedioDemo, dCustoMedioConserto, dCustoMedioOutros, dCustoMedioBenef, lCliente, iFilialCli, lFornecedor, iFilialForn)
                    If lErro <> AD_SQL_SUCESSO Then gError 71583
                
                End If
                
            End If
            
        End If
    
    End If
        
    SldMesEst2Terc_Atualiza = SUCESSO

    Exit Function

Erro_SldMesEst2Terc_Atualiza:

    SldMesEst2Terc_Atualiza = gErr

    Select Case gErr

        Case 60954, 60955
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2TERC", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case 60956
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST2TERC", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case 60957, 71583, 71584, 71585, 71586, 71587
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST2TERC", gErr, Year(objSldDiaEst.dtData), objSldDiaEst.iFilialEmpresa, objSldDiaEst.sProduto, lCliente, iFilialCli, lFornecedor, iFilialForn)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151829)

    End Select

    Exit Function

End Function

Private Function SldMesEst1Terc_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst1 As typeSldMesEst1Terc
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig3 As Double
Dim dValorInicialConsig3 As Double
Dim dQuantInicialDemo3 As Double
Dim dValorInicialDemo3 As Double
Dim dQuantInicialConserto3 As Double
Dim dValorInicialConserto3 As Double
Dim dQuantInicialOutros3 As Double
Dim dValorInicialOutros3 As Double
Dim dQuantInicialBenef3 As Double
Dim dValorInicialBenef3 As Double

On Error GoTo Erro_SldMesEst1Terc_Atualiza_Ano

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then

        'limpa o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = "0"
    
        'Inicializa comandos
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 60940
    
        'Inicializa comandos
        lComando1 = Comando_Abrir()
        If lComando1 = 0 Then gError 60941
    
        tSldMesEst1.sProduto = String(STRING_PRODUTO, 0)
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                        "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                        "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312," & _
                        " CustoMedioConsig312, CustoMedioDemo312, CustoMedioConserto312, CustoMedioOutros312, CustoMedioBenef312, Cliente, FilialCli, Fornecedor, FilialForn FROM SldMesEst1Terc WHERE FilialEmpresa =? AND Ano =?"
        
        'Le os dados de SldMesEst1 para o ano em questão
        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst1.iAno, tSldMesEst1.sProduto, tSldMesEst1.dQuantInicialConsig3, tSldMesEst1.dValorInicialConsig3, tSldMesEst1.dQuantInicialDemo3, tSldMesEst1.dValorInicialDemo3, tSldMesEst1.dQuantInicialConserto3, tSldMesEst1.dValorInicialConserto3, tSldMesEst1.dQuantInicialOutros3, tSldMesEst1.dValorInicialOutros3, tSldMesEst1.dQuantInicialBenef3, tSldMesEst1.dValorInicialBenef3, tSldMesEst1.adSaldoQuantConsig3(1), tSldMesEst1.adSaldoValorConsig3(1), tSldMesEst1.adSaldoQuantDemo3(1), tSldMesEst1.adSaldoValorDemo3(1), tSldMesEst1.adSaldoQuantConserto3(1), tSldMesEst1.adSaldoValorConserto3(1), tSldMesEst1.adSaldoQuantOutros3(1), tSldMesEst1.adSaldoValorOutros3(1), tSldMesEst1.adSaldoQuantBenef3(1), tSldMesEst1.adSaldoValorBenef3(1), _
                                    tSldMesEst1.adSaldoQuantConsig3(2), tSldMesEst1.adSaldoValorConsig3(2), tSldMesEst1.adSaldoQuantDemo3(2), tSldMesEst1.adSaldoValorDemo3(2), tSldMesEst1.adSaldoQuantConserto3(2), tSldMesEst1.adSaldoValorConserto3(2), tSldMesEst1.adSaldoQuantOutros3(2), tSldMesEst1.adSaldoValorOutros3(2), tSldMesEst1.adSaldoQuantBenef3(2), tSldMesEst1.adSaldoValorBenef3(2), tSldMesEst1.adSaldoQuantConsig3(3), tSldMesEst1.adSaldoValorConsig3(3), tSldMesEst1.adSaldoQuantDemo3(3), tSldMesEst1.adSaldoValorDemo3(3), tSldMesEst1.adSaldoQuantConserto3(3), tSldMesEst1.adSaldoValorConserto3(3), tSldMesEst1.adSaldoQuantOutros3(3), tSldMesEst1.adSaldoValorOutros3(3), tSldMesEst1.adSaldoQuantBenef3(3), tSldMesEst1.adSaldoValorBenef3(3), _
                                    tSldMesEst1.adSaldoQuantConsig3(4), tSldMesEst1.adSaldoValorConsig3(4), tSldMesEst1.adSaldoQuantDemo3(4), tSldMesEst1.adSaldoValorDemo3(4), tSldMesEst1.adSaldoQuantConserto3(4), tSldMesEst1.adSaldoValorConserto3(4), tSldMesEst1.adSaldoQuantOutros3(4), tSldMesEst1.adSaldoValorOutros3(4), tSldMesEst1.adSaldoQuantBenef3(4), tSldMesEst1.adSaldoValorBenef3(4), tSldMesEst1.adSaldoQuantConsig3(5), tSldMesEst1.adSaldoValorConsig3(5), tSldMesEst1.adSaldoQuantDemo3(5), tSldMesEst1.adSaldoValorDemo3(5), tSldMesEst1.adSaldoQuantConserto3(5), tSldMesEst1.adSaldoValorConserto3(5), tSldMesEst1.adSaldoQuantOutros3(5), tSldMesEst1.adSaldoValorOutros3(5), tSldMesEst1.adSaldoQuantBenef3(5), tSldMesEst1.adSaldoValorBenef3(5), _
                                    tSldMesEst1.adSaldoQuantConsig3(6), tSldMesEst1.adSaldoValorConsig3(6), tSldMesEst1.adSaldoQuantDemo3(6), tSldMesEst1.adSaldoValorDemo3(6), tSldMesEst1.adSaldoQuantConserto3(6), tSldMesEst1.adSaldoValorConserto3(6), tSldMesEst1.adSaldoQuantOutros3(6), tSldMesEst1.adSaldoValorOutros3(6), tSldMesEst1.adSaldoQuantBenef3(6), tSldMesEst1.adSaldoValorBenef3(6), tSldMesEst1.adSaldoQuantConsig3(7), tSldMesEst1.adSaldoValorConsig3(7), tSldMesEst1.adSaldoQuantDemo3(7), tSldMesEst1.adSaldoValorDemo3(7), tSldMesEst1.adSaldoQuantConserto3(7), tSldMesEst1.adSaldoValorConserto3(7), tSldMesEst1.adSaldoQuantOutros3(7), tSldMesEst1.adSaldoValorOutros3(7), tSldMesEst1.adSaldoQuantBenef3(7), tSldMesEst1.adSaldoValorBenef3(7), _
                                    tSldMesEst1.adSaldoQuantConsig3(8), tSldMesEst1.adSaldoValorConsig3(8), tSldMesEst1.adSaldoQuantDemo3(8), tSldMesEst1.adSaldoValorDemo3(8), tSldMesEst1.adSaldoQuantConserto3(8), tSldMesEst1.adSaldoValorConserto3(8), tSldMesEst1.adSaldoQuantOutros3(8), tSldMesEst1.adSaldoValorOutros3(8), tSldMesEst1.adSaldoQuantBenef3(8), tSldMesEst1.adSaldoValorBenef3(8), tSldMesEst1.adSaldoQuantConsig3(9), tSldMesEst1.adSaldoValorConsig3(9), tSldMesEst1.adSaldoQuantDemo3(9), tSldMesEst1.adSaldoValorDemo3(9), tSldMesEst1.adSaldoQuantConserto3(9), tSldMesEst1.adSaldoValorConserto3(9), tSldMesEst1.adSaldoQuantOutros3(9), tSldMesEst1.adSaldoValorOutros3(9), tSldMesEst1.adSaldoQuantBenef3(9), tSldMesEst1.adSaldoValorBenef3(9), _
                                    tSldMesEst1.adSaldoQuantConsig3(10), tSldMesEst1.adSaldoValorConsig3(10), tSldMesEst1.adSaldoQuantDemo3(10), tSldMesEst1.adSaldoValorDemo3(10), tSldMesEst1.adSaldoQuantConserto3(10), tSldMesEst1.adSaldoValorConserto3(10), tSldMesEst1.adSaldoQuantOutros3(10), tSldMesEst1.adSaldoValorOutros3(10), tSldMesEst1.adSaldoQuantBenef3(10), tSldMesEst1.adSaldoValorBenef3(10), tSldMesEst1.adSaldoQuantConsig3(11), tSldMesEst1.adSaldoValorConsig3(11), tSldMesEst1.adSaldoQuantDemo3(11), tSldMesEst1.adSaldoValorDemo3(11), tSldMesEst1.adSaldoQuantConserto3(11), tSldMesEst1.adSaldoValorConserto3(11), tSldMesEst1.adSaldoQuantOutros3(11), tSldMesEst1.adSaldoValorOutros3(11), tSldMesEst1.adSaldoQuantBenef3(11), tSldMesEst1.adSaldoValorBenef3(11), _
                                    tSldMesEst1.adSaldoQuantConsig3(12), tSldMesEst1.adSaldoValorConsig3(12), tSldMesEst1.adSaldoQuantDemo3(12), tSldMesEst1.adSaldoValorDemo3(12), tSldMesEst1.adSaldoQuantConserto3(12), tSldMesEst1.adSaldoValorConserto3(12), tSldMesEst1.adSaldoQuantOutros3(12), tSldMesEst1.adSaldoValorOutros3(12), tSldMesEst1.adSaldoQuantBenef3(12), tSldMesEst1.adSaldoValorBenef3(12), tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 60943
    
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60944
    
        Do While lErro = AD_SQL_SUCESSO
    
    '        'lock do registro em questão
    '        lErro = Comando_LockExclusive(lComando)
    '        If lErro <> AD_SQL_SUCESSO Then Error 60945
            
            'soma um a ano para que seja criado outro ano
            tSldMesEst1.iAno = tSldMesEst1.iAno + 1
            
            dQuantInicialConsig3 = tSldMesEst1.dQuantInicialConsig3
            dValorInicialConsig3 = tSldMesEst1.dValorInicialConsig3
            dQuantInicialDemo3 = tSldMesEst1.dQuantInicialDemo3
            dValorInicialDemo3 = tSldMesEst1.dValorInicialDemo3
            dQuantInicialConserto3 = tSldMesEst1.dQuantInicialConserto3
            dValorInicialConserto3 = tSldMesEst1.dValorInicialConserto3
            dQuantInicialOutros3 = tSldMesEst1.dQuantInicialOutros3
            dValorInicialOutros3 = tSldMesEst1.dValorInicialOutros3
            dQuantInicialBenef3 = tSldMesEst1.dQuantInicialBenef3
            dValorInicialBenef3 = tSldMesEst1.dValorInicialBenef3
            
            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
            For iIndice = 1 To 12
    
                dQuantInicialConsig3 = dQuantInicialConsig3 + tSldMesEst1.adSaldoQuantConsig3(iIndice)
                dValorInicialConsig3 = dValorInicialConsig3 + tSldMesEst1.adSaldoValorConsig3(iIndice)
                dQuantInicialDemo3 = dQuantInicialDemo3 + tSldMesEst1.adSaldoQuantDemo3(iIndice)
                dValorInicialDemo3 = dValorInicialDemo3 + tSldMesEst1.adSaldoValorDemo3(iIndice)
                dQuantInicialConserto3 = dQuantInicialConserto3 + tSldMesEst1.adSaldoQuantConserto3(iIndice)
                dValorInicialConserto3 = dValorInicialConserto3 + tSldMesEst1.adSaldoValorConserto3(iIndice)
                dQuantInicialOutros3 = dQuantInicialOutros3 + tSldMesEst1.adSaldoQuantOutros3(iIndice)
                dValorInicialOutros3 = dValorInicialOutros3 + tSldMesEst1.adSaldoValorOutros3(iIndice)
                dQuantInicialBenef3 = dQuantInicialBenef3 + tSldMesEst1.adSaldoQuantBenef3(iIndice)
                dValorInicialBenef3 = dValorInicialBenef3 + tSldMesEst1.adSaldoValorBenef3(iIndice)
    
            Next
            
            'Insere os dados no BD
            lErro = Comando_Executar(lComando1, "INSERT INTO SldMesEst1Terc (Ano, FilialEmpresa, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, CustoMedioConsig31, CustoMedioDemo31, CustoMedioConserto31, CustoMedioOutros31, CustoMedioBenef31, Cliente, FilialCli, Fornecedor, FilialForn) " & _
                "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto, dQuantInicialConsig3, dValorInicialConsig3, dQuantInicialDemo3, dValorInicialDemo3, dQuantInicialConserto3, dValorInicialConserto3, dQuantInicialOutros3, dValorInicialOutros3, dQuantInicialBenef3, dValorInicialBenef3, tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn)
            If lErro <> AD_SQL_SUCESSO Then gError 60946
            
            'Joga o contador na tela
            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
            
            DoEvents
            
            'verifica se foi cancelado o fechamento do mes
            If iCancela = CANCELA Then
                
                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
                    
                If vbMesRes = vbYes Then gError 60947
                
                iCancela = CANCELA_BATCH
                    
            End If
            
            'Busca o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60948
    
        Loop
                
        Call Comando_Fechar(lComando)
        Call Comando_Fechar(lComando1)
    
    End If

    SldMesEst1Terc_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEst1Terc_Atualiza_Ano:

    SldMesEst1Terc_Atualiza_Ano = Err

    Select Case Err
            
        Case 60940, 60941
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 60943, 60944, 60948
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1TERC1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 40695
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST1TERC", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto, tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn)

        Case 60946
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST1TERC", gErr, tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto, tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn)
            
        Case 60947
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151818)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function SldMesEst1Terc_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Atualiza as quantidades e valores iniciais do proximo Ano para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst1 As typeSldMesEst1Terc
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig3 As Double
Dim dValorInicialConsig3 As Double
Dim dQuantInicialDemo3 As Double
Dim dValorInicialDemo3 As Double
Dim dQuantInicialConserto3 As Double
Dim dValorInicialConserto3 As Double
Dim dQuantInicialOutros3 As Double
Dim dValorInicialOutros3 As Double
Dim dQuantInicialBenef3 As Double
Dim dValorInicialBenef3 As Double
Dim iAno As Integer

On Error GoTo Erro_SldMesEst1Terc_Atualiza_Ano_Reproc
    
    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
    
        'Inicializa comandos
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 83679
    
        'Inicializa comandos
        lComando1 = Comando_Abrir()
        If lComando1 = 0 Then gError 83680
    
        'Inicializa comandos
        lComando2 = Comando_Abrir()
        If lComando2 = 0 Then gError 83681
    
        'Inicializa comandos
        lComando3 = Comando_Abrir()
        If lComando3 = 0 Then gError 83681
       
        tSldMesEst1.sProduto = String(STRING_PRODUTO, 0)
    
        If objSldMesEst.sProduto = "" Then
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                            "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                            "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312," & _
                            " CustoMedioConsig312, CustoMedioDemo312, CustoMedioConserto312, CustoMedioOutros312, CustoMedioBenef312, Cliente, FilialCli, Fornecedor, FilialForn FROM SldMesEst1Terc WHERE FilialEmpresa =? AND Ano =?"
            
            'Le os dados de SldMesEst1 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst1.iAno, tSldMesEst1.sProduto, tSldMesEst1.dQuantInicialConsig3, tSldMesEst1.dValorInicialConsig3, tSldMesEst1.dQuantInicialDemo3, tSldMesEst1.dValorInicialDemo3, tSldMesEst1.dQuantInicialConserto3, tSldMesEst1.dValorInicialConserto3, tSldMesEst1.dQuantInicialOutros3, tSldMesEst1.dValorInicialOutros3, tSldMesEst1.dQuantInicialBenef3, tSldMesEst1.dValorInicialBenef3, tSldMesEst1.adSaldoQuantConsig3(1), tSldMesEst1.adSaldoValorConsig3(1), tSldMesEst1.adSaldoQuantDemo3(1), tSldMesEst1.adSaldoValorDemo3(1), tSldMesEst1.adSaldoQuantConserto3(1), tSldMesEst1.adSaldoValorConserto3(1), tSldMesEst1.adSaldoQuantOutros3(1), tSldMesEst1.adSaldoValorOutros3(1), tSldMesEst1.adSaldoQuantBenef3(1), tSldMesEst1.adSaldoValorBenef3(1), _
                                        tSldMesEst1.adSaldoQuantConsig3(2), tSldMesEst1.adSaldoValorConsig3(2), tSldMesEst1.adSaldoQuantDemo3(2), tSldMesEst1.adSaldoValorDemo3(2), tSldMesEst1.adSaldoQuantConserto3(2), tSldMesEst1.adSaldoValorConserto3(2), tSldMesEst1.adSaldoQuantOutros3(2), tSldMesEst1.adSaldoValorOutros3(2), tSldMesEst1.adSaldoQuantBenef3(2), tSldMesEst1.adSaldoValorBenef3(2), tSldMesEst1.adSaldoQuantConsig3(3), tSldMesEst1.adSaldoValorConsig3(3), tSldMesEst1.adSaldoQuantDemo3(3), tSldMesEst1.adSaldoValorDemo3(3), tSldMesEst1.adSaldoQuantConserto3(3), tSldMesEst1.adSaldoValorConserto3(3), tSldMesEst1.adSaldoQuantOutros3(3), tSldMesEst1.adSaldoValorOutros3(3), tSldMesEst1.adSaldoQuantBenef3(3), tSldMesEst1.adSaldoValorBenef3(3), _
                                        tSldMesEst1.adSaldoQuantConsig3(4), tSldMesEst1.adSaldoValorConsig3(4), tSldMesEst1.adSaldoQuantDemo3(4), tSldMesEst1.adSaldoValorDemo3(4), tSldMesEst1.adSaldoQuantConserto3(4), tSldMesEst1.adSaldoValorConserto3(4), tSldMesEst1.adSaldoQuantOutros3(4), tSldMesEst1.adSaldoValorOutros3(4), tSldMesEst1.adSaldoQuantBenef3(4), tSldMesEst1.adSaldoValorBenef3(4), tSldMesEst1.adSaldoQuantConsig3(5), tSldMesEst1.adSaldoValorConsig3(5), tSldMesEst1.adSaldoQuantDemo3(5), tSldMesEst1.adSaldoValorDemo3(5), tSldMesEst1.adSaldoQuantConserto3(5), tSldMesEst1.adSaldoValorConserto3(5), tSldMesEst1.adSaldoQuantOutros3(5), tSldMesEst1.adSaldoValorOutros3(5), tSldMesEst1.adSaldoQuantBenef3(5), tSldMesEst1.adSaldoValorBenef3(5), _
                                        tSldMesEst1.adSaldoQuantConsig3(6), tSldMesEst1.adSaldoValorConsig3(6), tSldMesEst1.adSaldoQuantDemo3(6), tSldMesEst1.adSaldoValorDemo3(6), tSldMesEst1.adSaldoQuantConserto3(6), tSldMesEst1.adSaldoValorConserto3(6), tSldMesEst1.adSaldoQuantOutros3(6), tSldMesEst1.adSaldoValorOutros3(6), tSldMesEst1.adSaldoQuantBenef3(6), tSldMesEst1.adSaldoValorBenef3(6), tSldMesEst1.adSaldoQuantConsig3(7), tSldMesEst1.adSaldoValorConsig3(7), tSldMesEst1.adSaldoQuantDemo3(7), tSldMesEst1.adSaldoValorDemo3(7), tSldMesEst1.adSaldoQuantConserto3(7), tSldMesEst1.adSaldoValorConserto3(7), tSldMesEst1.adSaldoQuantOutros3(7), tSldMesEst1.adSaldoValorOutros3(7), tSldMesEst1.adSaldoQuantBenef3(7), tSldMesEst1.adSaldoValorBenef3(7), _
                                        tSldMesEst1.adSaldoQuantConsig3(8), tSldMesEst1.adSaldoValorConsig3(8), tSldMesEst1.adSaldoQuantDemo3(8), tSldMesEst1.adSaldoValorDemo3(8), tSldMesEst1.adSaldoQuantConserto3(8), tSldMesEst1.adSaldoValorConserto3(8), tSldMesEst1.adSaldoQuantOutros3(8), tSldMesEst1.adSaldoValorOutros3(8), tSldMesEst1.adSaldoQuantBenef3(8), tSldMesEst1.adSaldoValorBenef3(8), tSldMesEst1.adSaldoQuantConsig3(9), tSldMesEst1.adSaldoValorConsig3(9), tSldMesEst1.adSaldoQuantDemo3(9), tSldMesEst1.adSaldoValorDemo3(9), tSldMesEst1.adSaldoQuantConserto3(9), tSldMesEst1.adSaldoValorConserto3(9), tSldMesEst1.adSaldoQuantOutros3(9), tSldMesEst1.adSaldoValorOutros3(9), tSldMesEst1.adSaldoQuantBenef3(9), tSldMesEst1.adSaldoValorBenef3(9), _
                                        tSldMesEst1.adSaldoQuantConsig3(10), tSldMesEst1.adSaldoValorConsig3(10), tSldMesEst1.adSaldoQuantDemo3(10), tSldMesEst1.adSaldoValorDemo3(10), tSldMesEst1.adSaldoQuantConserto3(10), tSldMesEst1.adSaldoValorConserto3(10), tSldMesEst1.adSaldoQuantOutros3(10), tSldMesEst1.adSaldoValorOutros3(10), tSldMesEst1.adSaldoQuantBenef3(10), tSldMesEst1.adSaldoValorBenef3(10), tSldMesEst1.adSaldoQuantConsig3(11), tSldMesEst1.adSaldoValorConsig3(11), tSldMesEst1.adSaldoQuantDemo3(11), tSldMesEst1.adSaldoValorDemo3(11), tSldMesEst1.adSaldoQuantConserto3(11), tSldMesEst1.adSaldoValorConserto3(11), tSldMesEst1.adSaldoQuantOutros3(11), tSldMesEst1.adSaldoValorOutros3(11), tSldMesEst1.adSaldoQuantBenef3(11), tSldMesEst1.adSaldoValorBenef3(11), _
                                        tSldMesEst1.adSaldoQuantConsig3(12), tSldMesEst1.adSaldoValorConsig3(12), tSldMesEst1.adSaldoQuantDemo3(12), tSldMesEst1.adSaldoValorDemo3(12), tSldMesEst1.adSaldoQuantConserto3(12), tSldMesEst1.adSaldoValorConserto3(12), tSldMesEst1.adSaldoQuantOutros3(12), tSldMesEst1.adSaldoValorOutros3(12), tSldMesEst1.adSaldoQuantBenef3(12), tSldMesEst1.adSaldoValorBenef3(12), tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno)
        
        Else
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, SaldoQuantConsig31, SaldoValorConsig31, SaldoQuantDemo31, SaldoValorDemo31, SaldoQuantConserto31, SaldoValorConserto31, SaldoQuantOutros31, SaldoValorOutros31, SaldoQuantBenef31, SaldoValorBenef31, SaldoQuantConsig32, SaldoValorConsig32, SaldoQuantDemo32, SaldoValorDemo32, SaldoQuantConserto32, SaldoValorConserto32, SaldoQuantOutros32, SaldoValorOutros32, SaldoQuantBenef32, SaldoValorBenef32, SaldoQuantConsig33, SaldoValorConsig33, SaldoQuantDemo33, SaldoValorDemo33, SaldoQuantConserto33, SaldoValorConserto33, SaldoQuantOutros33, SaldoValorOutros33, SaldoQuantBenef33, SaldoValorBenef33," & _
                            "SaldoQuantConsig34, SaldoValorConsig34, SaldoQuantDemo34, SaldoValorDemo34, SaldoQuantConserto34, SaldoValorConserto34, SaldoQuantOutros34, SaldoValorOutros34, SaldoQuantBenef34, SaldoValorBenef34, SaldoQuantConsig35, SaldoValorConsig35, SaldoQuantDemo35, SaldoValorDemo35, SaldoQuantConserto35, SaldoValorConserto35, SaldoQuantOutros35, SaldoValorOutros35, SaldoQuantBenef35, SaldoValorBenef35, SaldoQuantConsig36, SaldoValorConsig36, SaldoQuantDemo36, SaldoValorDemo36, SaldoQuantConserto36, SaldoValorConserto36, SaldoQuantOutros36, SaldoValorOutros36, SaldoQuantBenef36, SaldoValorBenef36, SaldoQuantConsig37, SaldoValorConsig37, SaldoQuantDemo37, SaldoValorDemo37, SaldoQuantConserto37, SaldoValorConserto37, SaldoQuantOutros37, SaldoValorOutros37, SaldoQuantBenef37, SaldoValorBenef37, SaldoQuantConsig38, SaldoValorConsig38, SaldoQuantDemo38, SaldoValorDemo38, SaldoQuantConserto38, SaldoValorConserto38, SaldoQuantOutros38, SaldoValorOutros38, SaldoQuantBenef38, SaldoValorBenef38," & _
                            "SaldoQuantConsig39, SaldoValorConsig39, SaldoQuantDemo39, SaldoValorDemo39, SaldoQuantConserto39, SaldoValorConserto39, SaldoQuantOutros39, SaldoValorOutros39, SaldoQuantBenef39, SaldoValorBenef39, SaldoQuantConsig310, SaldoValorConsig310, SaldoQuantDemo310, SaldoValorDemo310, SaldoQuantConserto310, SaldoValorConserto310, SaldoQuantOutros310, SaldoValorOutros310, SaldoQuantBenef310, SaldoValorBenef310, SaldoQuantConsig311, SaldoValorConsig311, SaldoQuantDemo311, SaldoValorDemo311, SaldoQuantConserto311, SaldoValorConserto311, SaldoQuantOutros311, SaldoValorOutros311, SaldoQuantBenef311, SaldoValorBenef311, SaldoQuantConsig312, SaldoValorConsig312, SaldoQuantDemo312, SaldoValorDemo312, SaldoQuantConserto312, SaldoValorConserto312, SaldoQuantOutros312, SaldoValorOutros312, SaldoQuantBenef312, SaldoValorBenef312," & _
                            " CustoMedioConsig312, CustoMedioDemo312, CustoMedioConserto312, CustoMedioOutros312, CustoMedioBenef312, Cliente, FilialCli, Fornecedor, FilialForn FROM SldMesEst1Terc WHERE FilialEmpresa =? AND Ano =? AND Produto = ?"
            
            'Le os dados de SldMesEst1 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst1.iAno, tSldMesEst1.sProduto, tSldMesEst1.dQuantInicialConsig3, tSldMesEst1.dValorInicialConsig3, tSldMesEst1.dQuantInicialDemo3, tSldMesEst1.dValorInicialDemo3, tSldMesEst1.dQuantInicialConserto3, tSldMesEst1.dValorInicialConserto3, tSldMesEst1.dQuantInicialOutros3, tSldMesEst1.dValorInicialOutros3, tSldMesEst1.dQuantInicialBenef3, tSldMesEst1.dValorInicialBenef3, tSldMesEst1.adSaldoQuantConsig3(1), tSldMesEst1.adSaldoValorConsig3(1), tSldMesEst1.adSaldoQuantDemo3(1), tSldMesEst1.adSaldoValorDemo3(1), tSldMesEst1.adSaldoQuantConserto3(1), tSldMesEst1.adSaldoValorConserto3(1), tSldMesEst1.adSaldoQuantOutros3(1), tSldMesEst1.adSaldoValorOutros3(1), tSldMesEst1.adSaldoQuantBenef3(1), tSldMesEst1.adSaldoValorBenef3(1), _
                                        tSldMesEst1.adSaldoQuantConsig3(2), tSldMesEst1.adSaldoValorConsig3(2), tSldMesEst1.adSaldoQuantDemo3(2), tSldMesEst1.adSaldoValorDemo3(2), tSldMesEst1.adSaldoQuantConserto3(2), tSldMesEst1.adSaldoValorConserto3(2), tSldMesEst1.adSaldoQuantOutros3(2), tSldMesEst1.adSaldoValorOutros3(2), tSldMesEst1.adSaldoQuantBenef3(2), tSldMesEst1.adSaldoValorBenef3(2), tSldMesEst1.adSaldoQuantConsig3(3), tSldMesEst1.adSaldoValorConsig3(3), tSldMesEst1.adSaldoQuantDemo3(3), tSldMesEst1.adSaldoValorDemo3(3), tSldMesEst1.adSaldoQuantConserto3(3), tSldMesEst1.adSaldoValorConserto3(3), tSldMesEst1.adSaldoQuantOutros3(3), tSldMesEst1.adSaldoValorOutros3(3), tSldMesEst1.adSaldoQuantBenef3(3), tSldMesEst1.adSaldoValorBenef3(3), _
                                        tSldMesEst1.adSaldoQuantConsig3(4), tSldMesEst1.adSaldoValorConsig3(4), tSldMesEst1.adSaldoQuantDemo3(4), tSldMesEst1.adSaldoValorDemo3(4), tSldMesEst1.adSaldoQuantConserto3(4), tSldMesEst1.adSaldoValorConserto3(4), tSldMesEst1.adSaldoQuantOutros3(4), tSldMesEst1.adSaldoValorOutros3(4), tSldMesEst1.adSaldoQuantBenef3(4), tSldMesEst1.adSaldoValorBenef3(4), tSldMesEst1.adSaldoQuantConsig3(5), tSldMesEst1.adSaldoValorConsig3(5), tSldMesEst1.adSaldoQuantDemo3(5), tSldMesEst1.adSaldoValorDemo3(5), tSldMesEst1.adSaldoQuantConserto3(5), tSldMesEst1.adSaldoValorConserto3(5), tSldMesEst1.adSaldoQuantOutros3(5), tSldMesEst1.adSaldoValorOutros3(5), tSldMesEst1.adSaldoQuantBenef3(5), tSldMesEst1.adSaldoValorBenef3(5), _
                                        tSldMesEst1.adSaldoQuantConsig3(6), tSldMesEst1.adSaldoValorConsig3(6), tSldMesEst1.adSaldoQuantDemo3(6), tSldMesEst1.adSaldoValorDemo3(6), tSldMesEst1.adSaldoQuantConserto3(6), tSldMesEst1.adSaldoValorConserto3(6), tSldMesEst1.adSaldoQuantOutros3(6), tSldMesEst1.adSaldoValorOutros3(6), tSldMesEst1.adSaldoQuantBenef3(6), tSldMesEst1.adSaldoValorBenef3(6), tSldMesEst1.adSaldoQuantConsig3(7), tSldMesEst1.adSaldoValorConsig3(7), tSldMesEst1.adSaldoQuantDemo3(7), tSldMesEst1.adSaldoValorDemo3(7), tSldMesEst1.adSaldoQuantConserto3(7), tSldMesEst1.adSaldoValorConserto3(7), tSldMesEst1.adSaldoQuantOutros3(7), tSldMesEst1.adSaldoValorOutros3(7), tSldMesEst1.adSaldoQuantBenef3(7), tSldMesEst1.adSaldoValorBenef3(7), _
                                        tSldMesEst1.adSaldoQuantConsig3(8), tSldMesEst1.adSaldoValorConsig3(8), tSldMesEst1.adSaldoQuantDemo3(8), tSldMesEst1.adSaldoValorDemo3(8), tSldMesEst1.adSaldoQuantConserto3(8), tSldMesEst1.adSaldoValorConserto3(8), tSldMesEst1.adSaldoQuantOutros3(8), tSldMesEst1.adSaldoValorOutros3(8), tSldMesEst1.adSaldoQuantBenef3(8), tSldMesEst1.adSaldoValorBenef3(8), tSldMesEst1.adSaldoQuantConsig3(9), tSldMesEst1.adSaldoValorConsig3(9), tSldMesEst1.adSaldoQuantDemo3(9), tSldMesEst1.adSaldoValorDemo3(9), tSldMesEst1.adSaldoQuantConserto3(9), tSldMesEst1.adSaldoValorConserto3(9), tSldMesEst1.adSaldoQuantOutros3(9), tSldMesEst1.adSaldoValorOutros3(9), tSldMesEst1.adSaldoQuantBenef3(9), tSldMesEst1.adSaldoValorBenef3(9), _
                                        tSldMesEst1.adSaldoQuantConsig3(10), tSldMesEst1.adSaldoValorConsig3(10), tSldMesEst1.adSaldoQuantDemo3(10), tSldMesEst1.adSaldoValorDemo3(10), tSldMesEst1.adSaldoQuantConserto3(10), tSldMesEst1.adSaldoValorConserto3(10), tSldMesEst1.adSaldoQuantOutros3(10), tSldMesEst1.adSaldoValorOutros3(10), tSldMesEst1.adSaldoQuantBenef3(10), tSldMesEst1.adSaldoValorBenef3(10), tSldMesEst1.adSaldoQuantConsig3(11), tSldMesEst1.adSaldoValorConsig3(11), tSldMesEst1.adSaldoQuantDemo3(11), tSldMesEst1.adSaldoValorDemo3(11), tSldMesEst1.adSaldoQuantConserto3(11), tSldMesEst1.adSaldoValorConserto3(11), tSldMesEst1.adSaldoQuantOutros3(11), tSldMesEst1.adSaldoValorOutros3(11), tSldMesEst1.adSaldoQuantBenef3(11), tSldMesEst1.adSaldoValorBenef3(11), _
                                        tSldMesEst1.adSaldoQuantConsig3(12), tSldMesEst1.adSaldoValorConsig3(12), tSldMesEst1.adSaldoQuantDemo3(12), tSldMesEst1.adSaldoValorDemo3(12), tSldMesEst1.adSaldoQuantConserto3(12), tSldMesEst1.adSaldoValorConserto3(12), tSldMesEst1.adSaldoQuantOutros3(12), tSldMesEst1.adSaldoValorOutros3(12), tSldMesEst1.adSaldoQuantBenef3(12), tSldMesEst1.adSaldoValorBenef3(12), tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno, objSldMesEst.sProduto)
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 83682
    
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83683
    
        Do While lErro = AD_SQL_SUCESSO
    
            'soma um a ano para que seja criado outro ano
            tSldMesEst1.iAno = tSldMesEst1.iAno + 1
            
            dQuantInicialConsig3 = tSldMesEst1.dQuantInicialConsig3
            dValorInicialConsig3 = tSldMesEst1.dValorInicialConsig3
            dQuantInicialDemo3 = tSldMesEst1.dQuantInicialDemo3
            dValorInicialDemo3 = tSldMesEst1.dValorInicialDemo3
            dQuantInicialConserto3 = tSldMesEst1.dQuantInicialConserto3
            dValorInicialConserto3 = tSldMesEst1.dValorInicialConserto3
            dQuantInicialOutros3 = tSldMesEst1.dQuantInicialOutros3
            dValorInicialOutros3 = tSldMesEst1.dValorInicialOutros3
            dQuantInicialBenef3 = tSldMesEst1.dQuantInicialBenef3
            dValorInicialBenef3 = tSldMesEst1.dValorInicialBenef3
            
            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
            For iIndice = 1 To 12
    
                dQuantInicialConsig3 = dQuantInicialConsig3 + tSldMesEst1.adSaldoQuantConsig3(iIndice)
                dValorInicialConsig3 = dValorInicialConsig3 + tSldMesEst1.adSaldoValorConsig3(iIndice)
                dQuantInicialDemo3 = dQuantInicialDemo3 + tSldMesEst1.adSaldoQuantDemo3(iIndice)
                dValorInicialDemo3 = dValorInicialDemo3 + tSldMesEst1.adSaldoValorDemo3(iIndice)
                dQuantInicialConserto3 = dQuantInicialConserto3 + tSldMesEst1.adSaldoQuantConserto3(iIndice)
                dValorInicialConserto3 = dValorInicialConserto3 + tSldMesEst1.adSaldoValorConserto3(iIndice)
                dQuantInicialOutros3 = dQuantInicialOutros3 + tSldMesEst1.adSaldoQuantOutros3(iIndice)
                dValorInicialOutros3 = dValorInicialOutros3 + tSldMesEst1.adSaldoValorOutros3(iIndice)
                dQuantInicialBenef3 = dQuantInicialBenef3 + tSldMesEst1.adSaldoQuantBenef3(iIndice)
                dValorInicialBenef3 = dValorInicialBenef3 + tSldMesEst1.adSaldoValorBenef3(iIndice)
    
            Next
            
            'Le os dados de SldMesEst1 para o ano em questão
            lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEst1Terc WHERE FilialEmpresa =? AND Ano =? AND Produto = ? AND Fornecedor = ? AND FilialForn = ? AND Cliente = ? AND FilialCli = ? ", 0, iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.iAno, tSldMesEst1.sProduto, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn, tSldMesEst1.lCliente, tSldMesEst1.iFilialCli)
            If lErro <> AD_SQL_SUCESSO Then gError 83684
        
            'Busca o primeiro produto
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83685
            
            If lErro = AD_SQL_SUCESSO Then
            
                'Insere os dados no BD
                lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1Terc SET QuantInicialConsig3 = ?, ValorInicialConsig3 = ?, QuantInicialDemo3 = ?, ValorInicialDemo3 = ?, QuantInicialConserto3 = ?, ValorInicialConserto3 = ?, QuantInicialOutros3 = ?, ValorInicialOutros3 = ?, QuantInicialBenef3 = ?, ValorInicialBenef3 = ?, CustoMedioConsig31 = ?, CustoMedioDemo31 = ?, CustoMedioConserto31 = ?, CustoMedioOutros31 = ?, CustoMedioBenef31 = ?", lComando1, dQuantInicialConsig3, dValorInicialConsig3, dQuantInicialDemo3, dValorInicialDemo3, dQuantInicialConserto3, dValorInicialConserto3, dQuantInicialOutros3, dValorInicialOutros3, dQuantInicialBenef3, dValorInicialBenef3, tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12))
                If lErro <> AD_SQL_SUCESSO Then gError 83686
                
            Else
            
                'Insere os dados no BD
                lErro = Comando_Executar(lComando3, "INSERT INTO SldMesEst1Terc (Ano, FilialEmpresa, Produto, QuantInicialConsig3, ValorInicialConsig3, QuantInicialDemo3, ValorInicialDemo3, QuantInicialConserto3, ValorInicialConserto3, QuantInicialOutros3, ValorInicialOutros3, QuantInicialBenef3, ValorInicialBenef3, CustoMedioConsig31, CustoMedioDemo31, CustoMedioConserto31, CustoMedioOutros31, CustoMedioBenef31, Cliente, FilialCli, Fornecedor, FilialForn) " & _
                    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto, dQuantInicialConsig3, dValorInicialConsig3, dQuantInicialDemo3, dValorInicialDemo3, dQuantInicialConserto3, dValorInicialConserto3, dQuantInicialOutros3, dValorInicialOutros3, dQuantInicialBenef3, dValorInicialBenef3, tSldMesEst1.adCustoMedioConsig3(12), tSldMesEst1.adCustoMedioDemo3(12), tSldMesEst1.adCustoMedioConserto3(12), tSldMesEst1.adCustoMedioOutros3(12), tSldMesEst1.adCustoMedioBenef3(12), tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn)
                If lErro <> AD_SQL_SUCESSO Then gError 83686
                
            End If
            
            'Busca o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83687
    
        Loop
                
        Call Comando_Fechar(lComando)
        Call Comando_Fechar(lComando1)
        Call Comando_Fechar(lComando2)
        Call Comando_Fechar(lComando3)
        
    End If

    SldMesEst1Terc_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst1Terc_Atualiza_Ano_Reproc:

    SldMesEst1Terc_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83679, 83680, 83681
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83682, 83683, 83687
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 83684, 83685
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST11", gErr, tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto, tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn)

        Case 83686
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST1_1", gErr, tSldMesEst1.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst1.sProduto, tSldMesEst1.lCliente, tSldMesEst1.iFilialCli, tSldMesEst1.lFornecedor, tSldMesEst1.iFilialForn)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151819)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Private Function SldMesEst2Terc_Atualiza_Ano(ByVal objTela As Object, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer) As Long
'Atualiza Ano, abrindo um novo ano(Exercicio) para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst2 As typeSldMesEst2Terc
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig As Double
Dim dValorInicialConsig As Double
Dim dQuantInicialDemo As Double
Dim dValorInicialDemo As Double
Dim dQuantInicialConserto As Double
Dim dValorInicialConserto As Double
Dim dQuantInicialOutros As Double
Dim dValorInicialOutros As Double
Dim dQuantInicialBenef As Double
Dim dValorInicialBenef As Double

On Error GoTo Erro_SldMesEst2Terc_Atualiza_Ano

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then

        'limpa o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = "0"
    
        'Inicializa comandos
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 60981
    
        'Inicializa comandos
        lComando1 = Comando_Abrir()
        If lComando1 = 0 Then gError 60982
    
        tSldMesEst2.sProduto = String(STRING_PRODUTO, 0)
    
        'forma o comando do SQL
        sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                        "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                        "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12," & _
                        " CustoMedioConsig12, CustoMedioDemo12, CustoMedioConserto12, CustoMedioOutros12, CustoMedioBenef12, Cliente, FilialCli, Fornecedor, FilialForn FROM SldMesEst2Terc WHERE FilialEmpresa =? AND Ano =?"
        
        'Le os dados de SldMesEst2 para o ano em questão
        lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst2.iAno, tSldMesEst2.sProduto, tSldMesEst2.dQuantInicialConsig, tSldMesEst2.dValorInicialConsig, tSldMesEst2.dQuantInicialDemo, tSldMesEst2.dValorInicialDemo, tSldMesEst2.dQuantInicialConserto, tSldMesEst2.dValorInicialConserto, tSldMesEst2.dQuantInicialOutros, tSldMesEst2.dValorInicialOutros, tSldMesEst2.dQuantInicialBenef, tSldMesEst2.dValorInicialBenef, tSldMesEst2.adSaldoQuantConsig(1), tSldMesEst2.adSaldoValorConsig(1), tSldMesEst2.adSaldoQuantDemo(1), tSldMesEst2.adSaldoValorDemo(1), tSldMesEst2.adSaldoQuantConserto(1), tSldMesEst2.adSaldoValorConserto(1), tSldMesEst2.adSaldoQuantOutros(1), tSldMesEst2.adSaldoValorOutros(1), tSldMesEst2.adSaldoQuantBenef(1), tSldMesEst2.adSaldoValorBenef(1), _
                                    tSldMesEst2.adSaldoQuantConsig(2), tSldMesEst2.adSaldoValorConsig(2), tSldMesEst2.adSaldoQuantDemo(2), tSldMesEst2.adSaldoValorDemo(2), tSldMesEst2.adSaldoQuantConserto(2), tSldMesEst2.adSaldoValorConserto(2), tSldMesEst2.adSaldoQuantOutros(2), tSldMesEst2.adSaldoValorOutros(2), tSldMesEst2.adSaldoQuantBenef(2), tSldMesEst2.adSaldoValorBenef(2), tSldMesEst2.adSaldoQuantConsig(3), tSldMesEst2.adSaldoValorConsig(3), tSldMesEst2.adSaldoQuantDemo(3), tSldMesEst2.adSaldoValorDemo(3), tSldMesEst2.adSaldoQuantConserto(3), tSldMesEst2.adSaldoValorConserto(3), tSldMesEst2.adSaldoQuantOutros(3), tSldMesEst2.adSaldoValorOutros(3), tSldMesEst2.adSaldoQuantBenef(3), tSldMesEst2.adSaldoValorBenef(3), _
                                    tSldMesEst2.adSaldoQuantConsig(4), tSldMesEst2.adSaldoValorConsig(4), tSldMesEst2.adSaldoQuantDemo(4), tSldMesEst2.adSaldoValorDemo(4), tSldMesEst2.adSaldoQuantConserto(4), tSldMesEst2.adSaldoValorConserto(4), tSldMesEst2.adSaldoQuantOutros(4), tSldMesEst2.adSaldoValorOutros(4), tSldMesEst2.adSaldoQuantBenef(4), tSldMesEst2.adSaldoValorBenef(4), tSldMesEst2.adSaldoQuantConsig(5), tSldMesEst2.adSaldoValorConsig(5), tSldMesEst2.adSaldoQuantDemo(5), tSldMesEst2.adSaldoValorDemo(5), tSldMesEst2.adSaldoQuantConserto(5), tSldMesEst2.adSaldoValorConserto(5), tSldMesEst2.adSaldoQuantOutros(5), tSldMesEst2.adSaldoValorOutros(5), tSldMesEst2.adSaldoQuantBenef(5), tSldMesEst2.adSaldoValorBenef(5), _
                                    tSldMesEst2.adSaldoQuantConsig(6), tSldMesEst2.adSaldoValorConsig(6), tSldMesEst2.adSaldoQuantDemo(6), tSldMesEst2.adSaldoValorDemo(6), tSldMesEst2.adSaldoQuantConserto(6), tSldMesEst2.adSaldoValorConserto(6), tSldMesEst2.adSaldoQuantOutros(6), tSldMesEst2.adSaldoValorOutros(6), tSldMesEst2.adSaldoQuantBenef(6), tSldMesEst2.adSaldoValorBenef(6), tSldMesEst2.adSaldoQuantConsig(7), tSldMesEst2.adSaldoValorConsig(7), tSldMesEst2.adSaldoQuantDemo(7), tSldMesEst2.adSaldoValorDemo(7), tSldMesEst2.adSaldoQuantConserto(7), tSldMesEst2.adSaldoValorConserto(7), tSldMesEst2.adSaldoQuantOutros(7), tSldMesEst2.adSaldoValorOutros(7), tSldMesEst2.adSaldoQuantBenef(7), tSldMesEst2.adSaldoValorBenef(7), _
                                    tSldMesEst2.adSaldoQuantConsig(8), tSldMesEst2.adSaldoValorConsig(8), tSldMesEst2.adSaldoQuantDemo(8), tSldMesEst2.adSaldoValorDemo(8), tSldMesEst2.adSaldoQuantConserto(8), tSldMesEst2.adSaldoValorConserto(8), tSldMesEst2.adSaldoQuantOutros(8), tSldMesEst2.adSaldoValorOutros(8), tSldMesEst2.adSaldoQuantBenef(8), tSldMesEst2.adSaldoValorBenef(8), tSldMesEst2.adSaldoQuantConsig(9), tSldMesEst2.adSaldoValorConsig(9), tSldMesEst2.adSaldoQuantDemo(9), tSldMesEst2.adSaldoValorDemo(9), tSldMesEst2.adSaldoQuantConserto(9), tSldMesEst2.adSaldoValorConserto(9), tSldMesEst2.adSaldoQuantOutros(9), tSldMesEst2.adSaldoValorOutros(9), tSldMesEst2.adSaldoQuantBenef(9), tSldMesEst2.adSaldoValorBenef(9), _
                                    tSldMesEst2.adSaldoQuantConsig(10), tSldMesEst2.adSaldoValorConsig(10), tSldMesEst2.adSaldoQuantDemo(10), tSldMesEst2.adSaldoValorDemo(10), tSldMesEst2.adSaldoQuantConserto(10), tSldMesEst2.adSaldoValorConserto(10), tSldMesEst2.adSaldoQuantOutros(10), tSldMesEst2.adSaldoValorOutros(10), tSldMesEst2.adSaldoQuantBenef(10), tSldMesEst2.adSaldoValorBenef(10), tSldMesEst2.adSaldoQuantConsig(11), tSldMesEst2.adSaldoValorConsig(11), tSldMesEst2.adSaldoQuantDemo(11), tSldMesEst2.adSaldoValorDemo(11), tSldMesEst2.adSaldoQuantConserto(11), tSldMesEst2.adSaldoValorConserto(11), tSldMesEst2.adSaldoQuantOutros(11), tSldMesEst2.adSaldoValorOutros(11), tSldMesEst2.adSaldoQuantBenef(11), tSldMesEst2.adSaldoValorBenef(11), _
                                    tSldMesEst2.adSaldoQuantConsig(12), tSldMesEst2.adSaldoValorConsig(12), tSldMesEst2.adSaldoQuantDemo(12), tSldMesEst2.adSaldoValorDemo(12), tSldMesEst2.adSaldoQuantConserto(12), tSldMesEst2.adSaldoValorConserto(12), tSldMesEst2.adSaldoQuantOutros(12), tSldMesEst2.adSaldoValorOutros(12), tSldMesEst2.adSaldoQuantBenef(12), tSldMesEst2.adSaldoValorBenef(12), tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 60983
    
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60984
    
        Do While lErro = AD_SQL_SUCESSO
    
    '        'lock do registro em questão
    '        lErro = Comando_LockExclusive(lComando)
    '        If lErro <> AD_SQL_SUCESSO Then Error 60985
            
            'soma um a ano para que seja criado outro ano
            tSldMesEst2.iAno = tSldMesEst2.iAno + 1
            
            dQuantInicialConsig = tSldMesEst2.dQuantInicialConsig
            dValorInicialConsig = tSldMesEst2.dValorInicialConsig
            dQuantInicialDemo = tSldMesEst2.dQuantInicialDemo
            dValorInicialDemo = tSldMesEst2.dValorInicialDemo
            dQuantInicialConserto = tSldMesEst2.dQuantInicialConserto
            dValorInicialConserto = tSldMesEst2.dValorInicialConserto
            dQuantInicialOutros = tSldMesEst2.dQuantInicialOutros
            dValorInicialOutros = tSldMesEst2.dValorInicialOutros
            dQuantInicialBenef = tSldMesEst2.dQuantInicialBenef
            dValorInicialBenef = tSldMesEst2.dValorInicialBenef
            
            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
            For iIndice = 1 To 12
    
                dQuantInicialConsig = dQuantInicialConsig + tSldMesEst2.adSaldoQuantConsig(iIndice)
                dValorInicialConsig = dValorInicialConsig + tSldMesEst2.adSaldoValorConsig(iIndice)
                dQuantInicialDemo = dQuantInicialDemo + tSldMesEst2.adSaldoQuantDemo(iIndice)
                dValorInicialDemo = dValorInicialDemo + tSldMesEst2.adSaldoValorDemo(iIndice)
                dQuantInicialConserto = dQuantInicialConserto + tSldMesEst2.adSaldoQuantConserto(iIndice)
                dValorInicialConserto = dValorInicialConserto + tSldMesEst2.adSaldoValorConserto(iIndice)
                dQuantInicialOutros = dQuantInicialOutros + tSldMesEst2.adSaldoQuantOutros(iIndice)
                dValorInicialOutros = dValorInicialOutros + tSldMesEst2.adSaldoValorOutros(iIndice)
                dQuantInicialBenef = dQuantInicialBenef + tSldMesEst2.adSaldoQuantBenef(iIndice)
                dValorInicialBenef = dValorInicialBenef + tSldMesEst2.adSaldoValorBenef(iIndice)
    
            Next
            
            'Insere os dados no BD
            lErro = Comando_Executar(lComando1, "INSERT INTO SldMesEst2Terc (Ano, FilialEmpresa, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, CustoMedioConsig1, CustoMedioDemo1, CustoMedioConserto1, CustoMedioOutros1, CustoMedioBenef1, Cliente, FilialCli, Fornecedor, FilialForn) " & _
            "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto, dQuantInicialConsig, dValorInicialConsig, dQuantInicialDemo, dValorInicialDemo, dQuantInicialConserto, dValorInicialConserto, dQuantInicialOutros, dValorInicialOutros, dQuantInicialBenef, dValorInicialBenef, tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn)
            If lErro <> AD_SQL_SUCESSO Then gError 60986
            
            'Joga o contador na tela
            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
            
            DoEvents
            
            'verifica se foi cancelado o fechamento do mes
            If iCancela = CANCELA Then
                
                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES")
                    
                If vbMesRes = vbYes Then Error 60987
                
                iCancela = CANCELA_BATCH
                    
            End If
            
            'Busca o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60988
    
        Loop
                
        Call Comando_Fechar(lComando)
        Call Comando_Fechar(lComando1)
        
    End If

    SldMesEst2Terc_Atualiza_Ano = SUCESSO

    Exit Function

Erro_SldMesEst2Terc_Atualiza_Ano:

    SldMesEst2Terc_Atualiza_Ano = gErr

    Select Case gErr
            
        Case 60981, 60982
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 60983, 60984, 60988
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2TERC1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 60985
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST2TERC", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.sProduto, tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn)

        Case 60986
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESEST2TERC", gErr, tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto, tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn)
            
        Case 60987
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151820)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function SldMesEst2Terc_Atualiza_Ano_Reproc(ByVal objSldMesEst As ClassSldMesEst) As Long
'Atualiza os Saldos Iniciais do ano seguinte para os produtos

Dim lErro As Long
Dim sComando_SQL As String
Dim tSldMesEst2 As typeSldMesEst2Terc
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim vbMesRes As VbMsgBoxResult
Dim dQuantInicialConsig As Double
Dim dValorInicialConsig As Double
Dim dQuantInicialDemo As Double
Dim dValorInicialDemo As Double
Dim dQuantInicialConserto As Double
Dim dValorInicialConserto As Double
Dim dQuantInicialOutros As Double
Dim dValorInicialOutros As Double
Dim dQuantInicialBenef As Double
Dim dValorInicialBenef As Double
Dim iAno As Integer

On Error GoTo Erro_SldMesEst2Terc_Atualiza_Ano_Reproc

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then

        'Inicializa comandos
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 83688
    
        'Inicializa comandos
        lComando1 = Comando_Abrir()
        If lComando1 = 0 Then gError 83689
    
        'Inicializa comandos
        lComando2 = Comando_Abrir()
        If lComando2 = 0 Then gError 83690
    
        'Inicializa comandos
        lComando3 = Comando_Abrir()
        If lComando3 = 0 Then gError 83690
        
        tSldMesEst2.sProduto = String(STRING_PRODUTO, 0)
    
        If objSldMesEst.sProduto = "" Then
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                            "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                            "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12," & _
                            " CustoMedioConsig12, CustoMedioDemo12, CustoMedioConserto12, CustoMedioOutros12, CustoMedioBenef12, Cliente, FilialCli, Fornecedor, FilialForn FROM SldMesEst2Terc WHERE FilialEmpresa =? AND Ano =?"
            
            'Le os dados de SldMesEst2 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst2.iAno, tSldMesEst2.sProduto, tSldMesEst2.dQuantInicialConsig, tSldMesEst2.dValorInicialConsig, tSldMesEst2.dQuantInicialDemo, tSldMesEst2.dValorInicialDemo, tSldMesEst2.dQuantInicialConserto, tSldMesEst2.dValorInicialConserto, tSldMesEst2.dQuantInicialOutros, tSldMesEst2.dValorInicialOutros, tSldMesEst2.dQuantInicialBenef, tSldMesEst2.dValorInicialBenef, tSldMesEst2.adSaldoQuantConsig(1), tSldMesEst2.adSaldoValorConsig(1), tSldMesEst2.adSaldoQuantDemo(1), tSldMesEst2.adSaldoValorDemo(1), tSldMesEst2.adSaldoQuantConserto(1), tSldMesEst2.adSaldoValorConserto(1), tSldMesEst2.adSaldoQuantOutros(1), tSldMesEst2.adSaldoValorOutros(1), tSldMesEst2.adSaldoQuantBenef(1), tSldMesEst2.adSaldoValorBenef(1), _
                                        tSldMesEst2.adSaldoQuantConsig(2), tSldMesEst2.adSaldoValorConsig(2), tSldMesEst2.adSaldoQuantDemo(2), tSldMesEst2.adSaldoValorDemo(2), tSldMesEst2.adSaldoQuantConserto(2), tSldMesEst2.adSaldoValorConserto(2), tSldMesEst2.adSaldoQuantOutros(2), tSldMesEst2.adSaldoValorOutros(2), tSldMesEst2.adSaldoQuantBenef(2), tSldMesEst2.adSaldoValorBenef(2), tSldMesEst2.adSaldoQuantConsig(3), tSldMesEst2.adSaldoValorConsig(3), tSldMesEst2.adSaldoQuantDemo(3), tSldMesEst2.adSaldoValorDemo(3), tSldMesEst2.adSaldoQuantConserto(3), tSldMesEst2.adSaldoValorConserto(3), tSldMesEst2.adSaldoQuantOutros(3), tSldMesEst2.adSaldoValorOutros(3), tSldMesEst2.adSaldoQuantBenef(3), tSldMesEst2.adSaldoValorBenef(3), _
                                        tSldMesEst2.adSaldoQuantConsig(4), tSldMesEst2.adSaldoValorConsig(4), tSldMesEst2.adSaldoQuantDemo(4), tSldMesEst2.adSaldoValorDemo(4), tSldMesEst2.adSaldoQuantConserto(4), tSldMesEst2.adSaldoValorConserto(4), tSldMesEst2.adSaldoQuantOutros(4), tSldMesEst2.adSaldoValorOutros(4), tSldMesEst2.adSaldoQuantBenef(4), tSldMesEst2.adSaldoValorBenef(4), tSldMesEst2.adSaldoQuantConsig(5), tSldMesEst2.adSaldoValorConsig(5), tSldMesEst2.adSaldoQuantDemo(5), tSldMesEst2.adSaldoValorDemo(5), tSldMesEst2.adSaldoQuantConserto(5), tSldMesEst2.adSaldoValorConserto(5), tSldMesEst2.adSaldoQuantOutros(5), tSldMesEst2.adSaldoValorOutros(5), tSldMesEst2.adSaldoQuantBenef(5), tSldMesEst2.adSaldoValorBenef(5), _
                                        tSldMesEst2.adSaldoQuantConsig(6), tSldMesEst2.adSaldoValorConsig(6), tSldMesEst2.adSaldoQuantDemo(6), tSldMesEst2.adSaldoValorDemo(6), tSldMesEst2.adSaldoQuantConserto(6), tSldMesEst2.adSaldoValorConserto(6), tSldMesEst2.adSaldoQuantOutros(6), tSldMesEst2.adSaldoValorOutros(6), tSldMesEst2.adSaldoQuantBenef(6), tSldMesEst2.adSaldoValorBenef(6), tSldMesEst2.adSaldoQuantConsig(7), tSldMesEst2.adSaldoValorConsig(7), tSldMesEst2.adSaldoQuantDemo(7), tSldMesEst2.adSaldoValorDemo(7), tSldMesEst2.adSaldoQuantConserto(7), tSldMesEst2.adSaldoValorConserto(7), tSldMesEst2.adSaldoQuantOutros(7), tSldMesEst2.adSaldoValorOutros(7), tSldMesEst2.adSaldoQuantBenef(7), tSldMesEst2.adSaldoValorBenef(7), _
                                        tSldMesEst2.adSaldoQuantConsig(8), tSldMesEst2.adSaldoValorConsig(8), tSldMesEst2.adSaldoQuantDemo(8), tSldMesEst2.adSaldoValorDemo(8), tSldMesEst2.adSaldoQuantConserto(8), tSldMesEst2.adSaldoValorConserto(8), tSldMesEst2.adSaldoQuantOutros(8), tSldMesEst2.adSaldoValorOutros(8), tSldMesEst2.adSaldoQuantBenef(8), tSldMesEst2.adSaldoValorBenef(8), tSldMesEst2.adSaldoQuantConsig(9), tSldMesEst2.adSaldoValorConsig(9), tSldMesEst2.adSaldoQuantDemo(9), tSldMesEst2.adSaldoValorDemo(9), tSldMesEst2.adSaldoQuantConserto(9), tSldMesEst2.adSaldoValorConserto(9), tSldMesEst2.adSaldoQuantOutros(9), tSldMesEst2.adSaldoValorOutros(9), tSldMesEst2.adSaldoQuantBenef(9), tSldMesEst2.adSaldoValorBenef(9), _
                                        tSldMesEst2.adSaldoQuantConsig(10), tSldMesEst2.adSaldoValorConsig(10), tSldMesEst2.adSaldoQuantDemo(10), tSldMesEst2.adSaldoValorDemo(10), tSldMesEst2.adSaldoQuantConserto(10), tSldMesEst2.adSaldoValorConserto(10), tSldMesEst2.adSaldoQuantOutros(10), tSldMesEst2.adSaldoValorOutros(10), tSldMesEst2.adSaldoQuantBenef(10), tSldMesEst2.adSaldoValorBenef(10), tSldMesEst2.adSaldoQuantConsig(11), tSldMesEst2.adSaldoValorConsig(11), tSldMesEst2.adSaldoQuantDemo(11), tSldMesEst2.adSaldoValorDemo(11), tSldMesEst2.adSaldoQuantConserto(11), tSldMesEst2.adSaldoValorConserto(11), tSldMesEst2.adSaldoQuantOutros(11), tSldMesEst2.adSaldoValorOutros(11), tSldMesEst2.adSaldoQuantBenef(11), tSldMesEst2.adSaldoValorBenef(11), _
                                        tSldMesEst2.adSaldoQuantConsig(12), tSldMesEst2.adSaldoValorConsig(12), tSldMesEst2.adSaldoQuantDemo(12), tSldMesEst2.adSaldoValorDemo(12), tSldMesEst2.adSaldoQuantConserto(12), tSldMesEst2.adSaldoValorConserto(12), tSldMesEst2.adSaldoQuantOutros(12), tSldMesEst2.adSaldoValorOutros(12), tSldMesEst2.adSaldoQuantBenef(12), tSldMesEst2.adSaldoValorBenef(12), tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno)
        Else
        
            'forma o comando do SQL
            sComando_SQL = "SELECT Ano, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, SaldoQuantConsig1, SaldoValorConsig1, SaldoQuantDemo1, SaldoValorDemo1, SaldoQuantConserto1, SaldoValorConserto1, SaldoQuantOutros1, SaldoValorOutros1, SaldoQuantBenef1, SaldoValorBenef1, SaldoQuantConsig2, SaldoValorConsig2, SaldoQuantDemo2, SaldoValorDemo2, SaldoQuantConserto2, SaldoValorConserto2, SaldoQuantOutros2, SaldoValorOutros2, SaldoQuantBenef2, SaldoValorBenef2, SaldoQuantConsig3, SaldoValorConsig3, SaldoQuantDemo3, SaldoValorDemo3, SaldoQuantConserto3, SaldoValorConserto3, SaldoQuantOutros3, SaldoValorOutros3, SaldoQuantBenef3, SaldoValorBenef3," & _
                            "SaldoQuantConsig4, SaldoValorConsig4, SaldoQuantDemo4, SaldoValorDemo4, SaldoQuantConserto4, SaldoValorConserto4, SaldoQuantOutros4, SaldoValorOutros4, SaldoQuantBenef4, SaldoValorBenef4, SaldoQuantConsig5, SaldoValorConsig5, SaldoQuantDemo5, SaldoValorDemo5, SaldoQuantConserto5, SaldoValorConserto5, SaldoQuantOutros5, SaldoValorOutros5, SaldoQuantBenef5, SaldoValorBenef5, SaldoQuantConsig6, SaldoValorConsig6, SaldoQuantDemo6, SaldoValorDemo6, SaldoQuantConserto6, SaldoValorConserto6, SaldoQuantOutros6, SaldoValorOutros6, SaldoQuantBenef6, SaldoValorBenef6, SaldoQuantConsig7, SaldoValorConsig7, SaldoQuantDemo7, SaldoValorDemo7, SaldoQuantConserto7, SaldoValorConserto7, SaldoQuantOutros7, SaldoValorOutros7, SaldoQuantBenef7, SaldoValorBenef7, SaldoQuantConsig8, SaldoValorConsig8, SaldoQuantDemo8, SaldoValorDemo8, SaldoQuantConserto8, SaldoValorConserto8, SaldoQuantOutros8, SaldoValorOutros8, SaldoQuantBenef8, SaldoValorBenef8," & _
                            "SaldoQuantConsig9, SaldoValorConsig9, SaldoQuantDemo9, SaldoValorDemo9, SaldoQuantConserto9, SaldoValorConserto9, SaldoQuantOutros9, SaldoValorOutros9, SaldoQuantBenef9, SaldoValorBenef9, SaldoQuantConsig10, SaldoValorConsig10, SaldoQuantDemo10, SaldoValorDemo10, SaldoQuantConserto10, SaldoValorConserto10, SaldoQuantOutros10, SaldoValorOutros10, SaldoQuantBenef10, SaldoValorBenef10, SaldoQuantConsig11, SaldoValorConsig11, SaldoQuantDemo11, SaldoValorDemo11, SaldoQuantConserto11, SaldoValorConserto11, SaldoQuantOutros11, SaldoValorOutros11, SaldoQuantBenef11, SaldoValorBenef11, SaldoQuantConsig12, SaldoValorConsig12, SaldoQuantDemo12, SaldoValorDemo12, SaldoQuantConserto12, SaldoValorConserto12, SaldoQuantOutros12, SaldoValorOutros12, SaldoQuantBenef12, SaldoValorBenef12," & _
                            " CustoMedioConsig12, CustoMedioDemo12, CustoMedioConserto12, CustoMedioOutros12, CustoMedioBenef12, Cliente, FilialCli, Fornecedor, FilialForn FROM SldMesEst2Terc WHERE FilialEmpresa =? AND Ano =? AND Produto = ?"
            
            'Le os dados de SldMesEst2 para o ano em questão
            lErro = Comando_ExecutarPos(lComando, sComando_SQL, 0, tSldMesEst2.iAno, tSldMesEst2.sProduto, tSldMesEst2.dQuantInicialConsig, tSldMesEst2.dValorInicialConsig, tSldMesEst2.dQuantInicialDemo, tSldMesEst2.dValorInicialDemo, tSldMesEst2.dQuantInicialConserto, tSldMesEst2.dValorInicialConserto, tSldMesEst2.dQuantInicialOutros, tSldMesEst2.dValorInicialOutros, tSldMesEst2.dQuantInicialBenef, tSldMesEst2.dValorInicialBenef, tSldMesEst2.adSaldoQuantConsig(1), tSldMesEst2.adSaldoValorConsig(1), tSldMesEst2.adSaldoQuantDemo(1), tSldMesEst2.adSaldoValorDemo(1), tSldMesEst2.adSaldoQuantConserto(1), tSldMesEst2.adSaldoValorConserto(1), tSldMesEst2.adSaldoQuantOutros(1), tSldMesEst2.adSaldoValorOutros(1), tSldMesEst2.adSaldoQuantBenef(1), tSldMesEst2.adSaldoValorBenef(1), _
                                        tSldMesEst2.adSaldoQuantConsig(2), tSldMesEst2.adSaldoValorConsig(2), tSldMesEst2.adSaldoQuantDemo(2), tSldMesEst2.adSaldoValorDemo(2), tSldMesEst2.adSaldoQuantConserto(2), tSldMesEst2.adSaldoValorConserto(2), tSldMesEst2.adSaldoQuantOutros(2), tSldMesEst2.adSaldoValorOutros(2), tSldMesEst2.adSaldoQuantBenef(2), tSldMesEst2.adSaldoValorBenef(2), tSldMesEst2.adSaldoQuantConsig(3), tSldMesEst2.adSaldoValorConsig(3), tSldMesEst2.adSaldoQuantDemo(3), tSldMesEst2.adSaldoValorDemo(3), tSldMesEst2.adSaldoQuantConserto(3), tSldMesEst2.adSaldoValorConserto(3), tSldMesEst2.adSaldoQuantOutros(3), tSldMesEst2.adSaldoValorOutros(3), tSldMesEst2.adSaldoQuantBenef(3), tSldMesEst2.adSaldoValorBenef(3), _
                                        tSldMesEst2.adSaldoQuantConsig(4), tSldMesEst2.adSaldoValorConsig(4), tSldMesEst2.adSaldoQuantDemo(4), tSldMesEst2.adSaldoValorDemo(4), tSldMesEst2.adSaldoQuantConserto(4), tSldMesEst2.adSaldoValorConserto(4), tSldMesEst2.adSaldoQuantOutros(4), tSldMesEst2.adSaldoValorOutros(4), tSldMesEst2.adSaldoQuantBenef(4), tSldMesEst2.adSaldoValorBenef(4), tSldMesEst2.adSaldoQuantConsig(5), tSldMesEst2.adSaldoValorConsig(5), tSldMesEst2.adSaldoQuantDemo(5), tSldMesEst2.adSaldoValorDemo(5), tSldMesEst2.adSaldoQuantConserto(5), tSldMesEst2.adSaldoValorConserto(5), tSldMesEst2.adSaldoQuantOutros(5), tSldMesEst2.adSaldoValorOutros(5), tSldMesEst2.adSaldoQuantBenef(5), tSldMesEst2.adSaldoValorBenef(5), _
                                        tSldMesEst2.adSaldoQuantConsig(6), tSldMesEst2.adSaldoValorConsig(6), tSldMesEst2.adSaldoQuantDemo(6), tSldMesEst2.adSaldoValorDemo(6), tSldMesEst2.adSaldoQuantConserto(6), tSldMesEst2.adSaldoValorConserto(6), tSldMesEst2.adSaldoQuantOutros(6), tSldMesEst2.adSaldoValorOutros(6), tSldMesEst2.adSaldoQuantBenef(6), tSldMesEst2.adSaldoValorBenef(6), tSldMesEst2.adSaldoQuantConsig(7), tSldMesEst2.adSaldoValorConsig(7), tSldMesEst2.adSaldoQuantDemo(7), tSldMesEst2.adSaldoValorDemo(7), tSldMesEst2.adSaldoQuantConserto(7), tSldMesEst2.adSaldoValorConserto(7), tSldMesEst2.adSaldoQuantOutros(7), tSldMesEst2.adSaldoValorOutros(7), tSldMesEst2.adSaldoQuantBenef(7), tSldMesEst2.adSaldoValorBenef(7), _
                                        tSldMesEst2.adSaldoQuantConsig(8), tSldMesEst2.adSaldoValorConsig(8), tSldMesEst2.adSaldoQuantDemo(8), tSldMesEst2.adSaldoValorDemo(8), tSldMesEst2.adSaldoQuantConserto(8), tSldMesEst2.adSaldoValorConserto(8), tSldMesEst2.adSaldoQuantOutros(8), tSldMesEst2.adSaldoValorOutros(8), tSldMesEst2.adSaldoQuantBenef(8), tSldMesEst2.adSaldoValorBenef(8), tSldMesEst2.adSaldoQuantConsig(9), tSldMesEst2.adSaldoValorConsig(9), tSldMesEst2.adSaldoQuantDemo(9), tSldMesEst2.adSaldoValorDemo(9), tSldMesEst2.adSaldoQuantConserto(9), tSldMesEst2.adSaldoValorConserto(9), tSldMesEst2.adSaldoQuantOutros(9), tSldMesEst2.adSaldoValorOutros(9), tSldMesEst2.adSaldoQuantBenef(9), tSldMesEst2.adSaldoValorBenef(9), _
                                        tSldMesEst2.adSaldoQuantConsig(10), tSldMesEst2.adSaldoValorConsig(10), tSldMesEst2.adSaldoQuantDemo(10), tSldMesEst2.adSaldoValorDemo(10), tSldMesEst2.adSaldoQuantConserto(10), tSldMesEst2.adSaldoValorConserto(10), tSldMesEst2.adSaldoQuantOutros(10), tSldMesEst2.adSaldoValorOutros(10), tSldMesEst2.adSaldoQuantBenef(10), tSldMesEst2.adSaldoValorBenef(10), tSldMesEst2.adSaldoQuantConsig(11), tSldMesEst2.adSaldoValorConsig(11), tSldMesEst2.adSaldoQuantDemo(11), tSldMesEst2.adSaldoValorDemo(11), tSldMesEst2.adSaldoQuantConserto(11), tSldMesEst2.adSaldoValorConserto(11), tSldMesEst2.adSaldoQuantOutros(11), tSldMesEst2.adSaldoValorOutros(11), tSldMesEst2.adSaldoQuantBenef(11), tSldMesEst2.adSaldoValorBenef(11), _
                                        tSldMesEst2.adSaldoQuantConsig(12), tSldMesEst2.adSaldoValorConsig(12), tSldMesEst2.adSaldoQuantDemo(12), tSldMesEst2.adSaldoValorDemo(12), tSldMesEst2.adSaldoQuantConserto(12), tSldMesEst2.adSaldoValorConserto(12), tSldMesEst2.adSaldoQuantOutros(12), tSldMesEst2.adSaldoValorOutros(12), tSldMesEst2.adSaldoQuantBenef(12), tSldMesEst2.adSaldoValorBenef(12), tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno, objSldMesEst.sProduto)
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 83691
    
        'Busca o primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83692
    
        Do While lErro = AD_SQL_SUCESSO
    
            'soma um a ano para que seja criado outro ano
            tSldMesEst2.iAno = tSldMesEst2.iAno + 1
            
            dQuantInicialConsig = tSldMesEst2.dQuantInicialConsig
            dValorInicialConsig = tSldMesEst2.dValorInicialConsig
            dQuantInicialDemo = tSldMesEst2.dQuantInicialDemo
            dValorInicialDemo = tSldMesEst2.dValorInicialDemo
            dQuantInicialConserto = tSldMesEst2.dQuantInicialConserto
            dValorInicialConserto = tSldMesEst2.dValorInicialConserto
            dQuantInicialOutros = tSldMesEst2.dQuantInicialOutros
            dValorInicialOutros = tSldMesEst2.dValorInicialOutros
            dQuantInicialBenef = tSldMesEst2.dQuantInicialBenef
            dValorInicialBenef = tSldMesEst2.dValorInicialBenef
            
            'soma e subtrai as quantidades e valores de todos os meses para que seja criada uma quantidade inicial e um valor inicial respectivamente
            For iIndice = 1 To 12
    
                dQuantInicialConsig = dQuantInicialConsig + tSldMesEst2.adSaldoQuantConsig(iIndice)
                dValorInicialConsig = dValorInicialConsig + tSldMesEst2.adSaldoValorConsig(iIndice)
                dQuantInicialDemo = dQuantInicialDemo + tSldMesEst2.adSaldoQuantDemo(iIndice)
                dValorInicialDemo = dValorInicialDemo + tSldMesEst2.adSaldoValorDemo(iIndice)
                dQuantInicialConserto = dQuantInicialConserto + tSldMesEst2.adSaldoQuantConserto(iIndice)
                dValorInicialConserto = dValorInicialConserto + tSldMesEst2.adSaldoValorConserto(iIndice)
                dQuantInicialOutros = dQuantInicialOutros + tSldMesEst2.adSaldoQuantOutros(iIndice)
                dValorInicialOutros = dValorInicialOutros + tSldMesEst2.adSaldoValorOutros(iIndice)
                dQuantInicialBenef = dQuantInicialBenef + tSldMesEst2.adSaldoQuantBenef(iIndice)
                dValorInicialBenef = dValorInicialBenef + tSldMesEst2.adSaldoValorBenef(iIndice)
    
            Next
            
            'Le os dados de SldMesEst2 para o ano em questão
            lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesEst2Terc WHERE FilialEmpresa =? AND Ano =? AND Produto = ? AND Fornecedor = ? AND FilialForn = ? AND Cliente = ? AND FilialCli = ? ", 0, iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.iAno, tSldMesEst2.sProduto, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn, tSldMesEst2.lCliente, tSldMesEst2.iFilialCli)
            If lErro <> AD_SQL_SUCESSO Then gError 83693
            
            'Busca o primeiro produto
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83694
            
            If lErro = AD_SQL_SUCESSO Then
            
                'Insere os dados no BD
                lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2Terc SET QuantInicialConsig = ?, ValorInicialConsig = ?, QuantInicialDemo = ?, ValorInicialDemo = ?, QuantInicialConserto = ?, ValorInicialConserto = ?, QuantInicialOutros = ?, ValorInicialOutros = ?, QuantInicialBenef = ?, ValorInicialBenef = ?, CustoMedioConsig12 = ?, CustoMedioDemo12 = ?, CustoMedioConserto12 = ?, CustoMedioOutros12 = ?, CustoMedioBenef12 = ?", lComando1, dQuantInicialConsig, dValorInicialConsig, dQuantInicialDemo, dValorInicialDemo, dQuantInicialConserto, dValorInicialConserto, dQuantInicialOutros, dValorInicialOutros, dQuantInicialBenef, dValorInicialBenef, tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12))
                If lErro <> AD_SQL_SUCESSO Then gError 83695
                
            Else

                lErro = Comando_Executar(lComando3, "INSERT INTO SldMesEst2Terc (Ano, FilialEmpresa, Produto, QuantInicialConsig, ValorInicialConsig, QuantInicialDemo, ValorInicialDemo, QuantInicialConserto, ValorInicialConserto, QuantInicialOutros, ValorInicialOutros, QuantInicialBenef, ValorInicialBenef, CustoMedioConsig1, CustoMedioDemo1, CustoMedioConserto1, CustoMedioOutros1, CustoMedioBenef1, Cliente, FilialCli, Fornecedor, FilialForn) " & _
                "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto, dQuantInicialConsig, dValorInicialConsig, dQuantInicialDemo, dValorInicialDemo, dQuantInicialConserto, dValorInicialConserto, dQuantInicialOutros, dValorInicialOutros, dQuantInicialBenef, dValorInicialBenef, tSldMesEst2.adCustoMedioConsig(12), tSldMesEst2.adCustoMedioDemo(12), tSldMesEst2.adCustoMedioConserto(12), tSldMesEst2.adCustoMedioOutros(12), tSldMesEst2.adCustoMedioBenef(12), tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn)
                If lErro <> AD_SQL_SUCESSO Then gError 83695
            
            End If
            
            'Busca o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83696
    
        Loop
                
        Call Comando_Fechar(lComando)
        Call Comando_Fechar(lComando1)
        Call Comando_Fechar(lComando2)
        Call Comando_Fechar(lComando3)
        
    End If

    SldMesEst2Terc_Atualiza_Ano_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst2Terc_Atualiza_Ano_Reproc:

    SldMesEst2Terc_Atualiza_Ano_Reproc = gErr

    Select Case gErr
            
        Case 83688, 83689, 83690
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83691, 83692, 83696
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2TERC1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 83693, 83694
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2TERC", gErr, tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto, tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn)

        Case 83695
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST2TERC", gErr, tSldMesEst2.iAno, objSldMesEst.iFilialEmpresa, tSldMesEst2.sProduto, tSldMesEst2.lCliente, tSldMesEst2.iFilialCli, tSldMesEst2.lFornecedor, tSldMesEst2.iFilialForn)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151821)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Friend Function SldMesEst2Terc_Exclui_Produto(ByVal sProduto As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_SldMesEst2Terc_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 84279 '60932

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 84280 '60933

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM SldMesEst2Terc WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 84281 '60934

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84282 '60935

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEst2Terc", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 84283 '60936

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 84284 '60937

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEst2Terc_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEst2Terc_Exclui_Produto:

    SldMesEst2Terc_Exclui_Produto = gErr

    Select Case gErr

        Case 84279, 84280
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 84281, 84282, 84284
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2TERC2", gErr, sProduto)

        Case 84283
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST2TERC", gErr, sProduto, giFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151698)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Friend Function SldMesEst1Terc_Exclui_Produto(ByVal sProduto As String) As Long
'Exclui da tabela SldMesEst1 os registros relacionados com o Produto passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilial As Integer

On Error GoTo Erro_SldMesEst1Terc_Exclui_Produto

    'Abrir os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60932

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60933

    'Faz a leitura
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM SldMesEst1Terc WHERE Produto = ? ", 0, iFilial, sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 60934

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60935

    Do While lErro <> AD_SQL_SEM_DADOS

        'Faz a exclusão da Tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM SldMesEst1Terc", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 60936

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60937

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    SldMesEst1Terc_Exclui_Produto = SUCESSO

    Exit Function

Erro_SldMesEst1Terc_Exclui_Produto:

    SldMesEst1Terc_Exclui_Produto = gErr

    Select Case gErr

        Case 60932, 60933
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 60934, 60935, 60937
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1TERC2", gErr, sProduto)

        Case 60936
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST1TERC", gErr, sProduto, giFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151690)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function SldMesEst1Terc_Atualiza_Mes(ByVal objTela As Object, ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer, ByVal objEstoque As ClassEstoqueMes) As Long
'Passa os Custo Medios de Produtos de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim vbMesRes As VbMsgBoxResult

On Error GoTo Erro_SldMesEst1Terc_Atualiza_Mes

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then

        'limpa o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = "0"
    
        'Inicializa comando
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 71588
    
        'Inicializa comando2
        lComando2 = Comando_Abrir()
        If lComando2 = 0 Then gError 71589
        
        'preenche o sMes para que seja usado no select
        iMes = objEstoque.iMes
        sMes = CStr(iMes)
    
        'Le o CustoMedio de cada escaninho
        lErro = Comando_ExecutarPos(lComando, "SELECT Ano FROM SldMesEst1Terc Where FilialEmpresa=? AND Ano=?", 0, iAno, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 71590
    
        'Busca o primeiro Custo Medio e Standard do primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71591
    
        'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
        iMes2 = iMes + 1
        sMes2 = CStr(iMes2)
        
        'enquanto existir um produto
        Do While lErro = AD_SQL_SUCESSO
    
    '        'lock do registro em questão
    '        lErro = Comando_LockExclusive(lComando)
    '        If lErro <> AD_SQL_SUCESSO Then gError 71593
    
            
            'Altera os dados no BD
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1Terc SET CustoMedioConsig3" + sMes2 + " = CustoMedioConsig3" + sMes + ", CustoMedioDemo3" + sMes2 + " = CustoMedioDemo3" + sMes + ", CustoMedioConserto3" + sMes2 + " = CustoMedioConserto3" + sMes + ", CustoMedioOutros3" + sMes2 + " = CustoMedioOutros3" + sMes + ", CustoMedioBenef3" + sMes2 + " = CustoMedioBenef3" + sMes, lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 71594
             
             
            'Joga o contador na tela
            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
            
            DoEvents
            
            'verifica se foi cancelado o fechamento do mes
            If iCancela = CANCELA Then
                
                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES", iMes)
                    
                If vbMesRes = vbYes Then gError 71595
                    
                iCancela = CANCELA_BATCH
            
            End If
            
            'Busca o o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71592
    
        Loop
    
        'Fechamento comando
        Call Comando_Fechar(lComando)
    
        'Fechamento comando
        Call Comando_Fechar(lComando2)

    End If

    SldMesEst1Terc_Atualiza_Mes = SUCESSO

    Exit Function

Erro_SldMesEst1Terc_Atualiza_Mes:

    SldMesEst1Terc_Atualiza_Mes = gErr

    Select Case gErr
            
        Case 71588, 71589
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 71590, 71591, 71592
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1_2", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71593
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST1_1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71594
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOMES_SLDMESEST1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, iMes)
        
        Case 71595
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151850)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst1Terc_Atualiza_Mes_Reproc(ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst) As Long
'Passa os Custo Medios de Produtos de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim sProduto As String

On Error GoTo Erro_SldMesEst1Terc_Atualiza_Mes_Reproc
    
    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
    
        'Inicializa comando
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 89195
    
        'Inicializa comando2
        lComando2 = Comando_Abrir()
        If lComando2 = 0 Then gError 89196
        
        sMes = CStr(iMes)
    
        sProduto = String(STRING_PRODUTO, 0)
    
        'Le o CustoMedio de cada escaninho
        lErro = Comando_ExecutarPos(lComando, "SELECT Produto FROM SldMesEst1Terc Where FilialEmpresa=? AND Ano=?", 0, sProduto, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 89197
    
        'Busca o primeiro Custo Medio e Standard do primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89198
    
        'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
        iMes2 = iMes + 1
        sMes2 = CStr(iMes2)
        
        'enquanto existir um produto
        Do While lErro = AD_SQL_SUCESSO
    
            'Altera os dados no BD
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst1Terc SET CustoMedioConsig3" + sMes2 + " = CustoMedioConsig3" + sMes + ", CustoMedioDemo3" + sMes2 + " = CustoMedioDemo3" + sMes + ", CustoMedioConserto3" + sMes2 + " = CustoMedioConserto3" + sMes + ", CustoMedioOutros3" + sMes2 + " = CustoMedioOutros3" + sMes + ", CustoMedioBenef3" + sMes2 + " = CustoMedioBenef3" + sMes, lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 89199
             
            'Busca o o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89200
    
        Loop
    
        'Fechamento comando
        Call Comando_Fechar(lComando)
    
        'Fechamento comando
        Call Comando_Fechar(lComando2)
        
    End If

    SldMesEst1Terc_Atualiza_Mes_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst1Terc_Atualiza_Mes_Reproc:

    SldMesEst1Terc_Atualiza_Mes_Reproc = gErr

    Select Case gErr
            
        Case 89195, 89196
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89197, 89198, 89200
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST1TERC1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 89199
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST1TERC", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, sProduto)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151851)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst2Terc_Atualiza_Mes(ByVal objTela As Object, ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst, iCancela As Integer, ByVal objEstoque As ClassEstoqueMes) As Long
'Passa os Custo Medios de Produtos Nossos em Poder de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim vbMesRes As VbMsgBoxResult

On Error GoTo Erro_SldMesEst2Terc_Atualiza_Mes

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
    
        'limpa o contador na tela
        objTela.Controls("ProdutosProcessados").Caption = "0"
    
        'Inicializa comando
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 71596
    
        'Inicializa comando2
        lComando2 = Comando_Abrir()
        If lComando2 = 0 Then gError 71597
        
        'preenche o sMes para que seja usado no select
        iMes = objEstoque.iMes
        sMes = CStr(iMes)
    
        'Le o CustoMedio de cada escaninho
        lErro = Comando_ExecutarPos(lComando, "SELECT Ano FROM SldMesEst2Terc Where Ano=? And FilialEmpresa=?", 0, iAno, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 71598
    
        'Busca o primeiro Custo Medio e Standard do primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71599
    
        'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
        iMes2 = iMes + 1
        sMes2 = CStr(iMes2)
        
        'enquanto existir um produto
        Do While lErro = AD_SQL_SUCESSO
    
    '        'lock do registro em questão
    '        lErro = Comando_LockExclusive(lComando)
    '        If lErro <> AD_SQL_SUCESSO Then gError 71601
    
            
            'Altera os dados no BD
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2Terc SET CustoMedioConsig" + sMes2 + " = CustoMedioConsig" + sMes + ", CustoMedioDemo" + sMes2 + " = CustoMedioDemo" + sMes + ", CustoMedioConserto" + sMes2 + " = CustoMedioConserto" + sMes + ", CustoMedioOutros" + sMes2 + " = CustoMedioOutros" + sMes + ", CustoMedioBenef" + sMes2 + " = CustoMedioBenef" + sMes, lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 71602
             
             
            'Joga o contador na tela
            objTela.Controls("ProdutosProcessados").Caption = CStr(CLng(objTela.Controls("ProdutosProcessados").Caption) + 1)
            
            DoEvents
            
            'verifica se foi cancelado o fechamento do mes
            If iCancela = CANCELA Then
                
                vbMesRes = Rotina_Aviso(vbYesNo, "AVISO_CANCELAR_FECHAMENTO_MES", iMes)
                    
                If vbMesRes = vbYes Then gError 71603
                    
                iCancela = CANCELA_BATCH
            
            End If
            
            'Busca o o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 71600
    
        Loop
    
        'Fechamento comando
        Call Comando_Fechar(lComando)
    
        'Fechamento comando
        Call Comando_Fechar(lComando2)
        
    End If

    SldMesEst2Terc_Atualiza_Mes = SUCESSO

    Exit Function

Erro_SldMesEst2Terc_Atualiza_Mes:

    SldMesEst2Terc_Atualiza_Mes = gErr

    Select Case gErr
            
        Case 71596, 71597
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 71598, 71599, 71600
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2TERC", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71601
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESEST2TERC", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 71602
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_NOVOMES_SLDMESEST2TERC", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, iMes)
        
        Case 71603
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151852)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    'Fechamento comando
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function SldMesEst2Terc_Atualiza_Mes_Reproc(ByVal iMes As Integer, ByVal objSldMesEst As ClassSldMesEst) As Long
'Passa os Custo Medios de Produtos Nossos em Poder de Terceiros do mes que está sendo fechado para o mes seguinte

Dim lErro As Long
Dim sMes As String
Dim sMes2 As String
Dim iStatus As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim iMes2 As Integer
Dim iAno As Integer
Dim sProduto As String

On Error GoTo Erro_SldMesEst2Terc_Atualiza_Mes_Reproc

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then

        'Inicializa comando
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 89201
    
        'Inicializa comando2
        lComando2 = Comando_Abrir()
        If lComando2 = 0 Then gError 89202
        
        'preenche o sMes para que seja usado no select
        sMes = CStr(iMes)
    
        sProduto = String(STRING_PRODUTO, 0)
    
        'Le o CustoMedio de cada escaninho
        lErro = Comando_ExecutarPos(lComando, "SELECT Produto FROM SldMesEst2Terc Where FilialEmpresa=? AND Ano=? ", 0, sProduto, objSldMesEst.iFilialEmpresa, objSldMesEst.iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 89203
    
        'Busca o primeiro Custo Medio e Standard do primeiro produto
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89204
    
        'Soma um a iMes e joga dentro de sMes2 para que seja usado no UPDATE dos custos
        iMes2 = iMes + 1
        sMes2 = CStr(iMes2)
        
        'enquanto existir um produto
        Do While lErro = AD_SQL_SUCESSO
    
            'Altera os dados no BD
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesEst2Terc SET CustoMedioConsig" + sMes2 + " = CustoMedioConsig" + sMes + ", CustoMedioDemo" + sMes2 + " = CustoMedioDemo" + sMes + ", CustoMedioConserto" + sMes2 + " = CustoMedioConserto" + sMes + ", CustoMedioOutros" + sMes2 + " = CustoMedioOutros" + sMes + ", CustoMedioBenef" + sMes2 + " = CustoMedioBenef" + sMes, lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 89205
             
            'Busca o o proximo produto
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89206
    
        Loop
    
        Call Comando_Fechar(lComando)
        Call Comando_Fechar(lComando2)
        
    End If

    SldMesEst2Terc_Atualiza_Mes_Reproc = SUCESSO

    Exit Function

Erro_SldMesEst2Terc_Atualiza_Mes_Reproc:

    SldMesEst2Terc_Atualiza_Mes_Reproc = gErr

    Select Case gErr
            
        Case 89201, 89202
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89203, 89204, 89206
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST2TERC1", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa)

        Case 89205
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESEST2TERC", gErr, objSldMesEst.iAno, objSldMesEst.iFilialEmpresa, sProduto)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151853)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

'Public Function MovEst_Atualiza_CliForn_Filial(ByVal lNumIntDoc As Long, Optional ByVal lComando1 As Long = 0, Optional ByVal lComando2 As Long = 0, Optional ByVal lComando3 As Long = 0, Optional ByVal lComando4 As Long = 0) As Long
Public Function MovEst_Atualiza_CliForn_Filial(ByVal objItemMovEst As ClassItemMovEstoque, Optional ByVal bAtualizaBD As Boolean = False, Optional ByVal lComando1 As Long = 0, Optional ByVal lComando2 As Long = 0, Optional ByVal lComando3 As Long = 0, Optional ByVal lComando4 As Long = 0, Optional ByVal lComando5 As Long = 0, Optional ByVal lComando6 As Long = 0) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 6) As Long
Dim iTipoMov As Integer, lNumIntDocOrigem As Long, iTipoNumIntDocOrigem As Integer
Dim bIgnora As Boolean
Dim lCliente As Long, iFilialCli As Integer, lFornecedor As Long, iFilialForn As Integer
Dim sCodigoOP As String, iFilialOP As Integer
Dim objItemMovEstAux As New ClassItemMovEstoque, iTipoAux As Integer, lNumIntDocAux As Long
Dim lClienteBenef As Long, iFilialCliBenef As Integer, lFornecedorBenef As Long, iFilialFornBenef As Integer
Dim bMovtoNovo As Boolean

On Error GoTo Erro_MovEst_Atualiza_CliForn_Filial

    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
    
        If lComando1 = 0 Then
            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_Abrir()
                If alComando(iIndice) = 0 Then gError 206449
            Next
        Else
            alComando(1) = lComando1
            alComando(2) = lComando2
            alComando(3) = lComando3
            alComando(4) = lComando4
            alComando(5) = lComando5
            alComando(6) = lComando6
        End If
        
        'If lNumIntDocOrigem = 0 Or bAtualizaBD Then
        
        sCodigoOP = String(STRING_OPCODIGO, 0)
        'Obtém os dados do BD e verifica se já existe (reprocessamento desfaz e refaz) ou se ainda será gravado (novo)
        lErro = Comando_ExecutarPos(alComando(1), "SELECT TipoMov, NumIntDocOrigem, TipoNumIntDocOrigem, CodigoOP, FilialEmpresa, Cliente, FilialCli, Fornecedor, FilialForn FROM MovimentoEstoque WHERE NumIntDoc = ?", 0, iTipoMov, lNumIntDocOrigem, iTipoNumIntDocOrigem, sCodigoOP, iFilialOP, lCliente, iFilialCli, lFornecedor, iFilialForn, objItemMovEst.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 206450
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206451
            
        If lErro <> AD_SQL_SUCESSO Then 'gError 206452
            bMovtoNovo = True
            iTipoNumIntDocOrigem = objItemMovEst.iTipoNumIntDocOrigem
            lNumIntDocOrigem = objItemMovEst.lNumIntDocOrigem
            sCodigoOP = objItemMovEst.sOPCodigo
            iFilialOP = objItemMovEst.iFilialEmpresa
            iTipoMov = objItemMovEst.iTipoMov
        Else
            bMovtoNovo = False
        End If
        'End If
        
        If Not bAtualizaBD And Not bMovtoNovo Then
        'Se não é a inclusão de um movimento novo e nem é para atualizar o BD respeita o que estiver gravado
        'Por exemplo: No Desfaz tem que desfazer do cliente que foi gravado mesmo que esteja com ele errado
            objItemMovEst.lCliente = lCliente
            objItemMovEst.iFilialCli = iFilialCli
            objItemMovEst.lFornecedor = lFornecedor
            objItemMovEst.iFilialForn = iFilialForn
        Else
            'Se tiver como origem outro movimento de estoque
            'Pega os dados do movimento de estoque original
            If iTipoNumIntDocOrigem = 4 And lNumIntDocOrigem <> 0 Then
                sCodigoOP = String(STRING_OPCODIGO, 0)
                lErro = Comando_ExecutarPos(alComando(6), "SELECT TipoMov, NumIntDocOrigem, TipoNumIntDocOrigem, CodigoOP, FilialEmpresa FROM MovimentoEstoque WHERE NumIntDoc = ?", 0, iTipoMov, lNumIntDocAux, iTipoAux, sCodigoOP, iFilialOP, lNumIntDocOrigem)
                If lErro <> AD_SQL_SUCESSO Then gError 206450
            
                lErro = Comando_BuscarPrimeiro(alComando(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206451
                
                'If lErro <> AD_SQL_SUCESSO Then gError 206452
            
                iTipoNumIntDocOrigem = iTipoAux
                lNumIntDocOrigem = lNumIntDocAux
            End If
            
            '#########################################
            'Tem que obter os dados de cliente\fornecedor de acordo com o tipo de movimento\tipo de origem
            '0=Nao tem documento de origem associado 1=Item de Nota Fiscal 2=Nota Fiscal 3=Inventario 4=Movimento Estoque 5=Item da OP
            'bIgnora = False
            lCliente = 0
            iFilialCli = 0
            lFornecedor = 0
            iFilialForn = 0
            lClienteBenef = 0
            iFilialCliBenef = 0
            lFornecedorBenef = 0
            iFilialFornBenef = 0
            
            Select Case iTipoNumIntDocOrigem
            
                Case 1
                    lErro = Comando_Executar(alComando(3), "SELECT N.Cliente, N.FilialCli, N.Fornecedor, N.FilialForn, N.ClienteBenef, N.FilialCliBenef, N.FornecedorBenef, N.FilialFornBenef FROM NFiscal AS N, ItensNFiscal AS I WHERE I.NumIntNF = N.NumIntDoc AND I.NumIntDoc = ?", lCliente, iFilialCli, lFornecedor, iFilialForn, lClienteBenef, iFilialCliBenef, lFornecedorBenef, iFilialFornBenef, lNumIntDocOrigem)
                    If lErro <> AD_SQL_SUCESSO Then gError 206453
                
                    lErro = Comando_BuscarPrimeiro(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206454
                    
                    'Tipo 63 (exclusão de rcebimento, vai apenas remover o movmento de estoque e já excluiu a NF logo já perdeu a referência)
                    If lErro <> AD_SQL_SUCESSO And objItemMovEst.iTipoMov <> MOV_EST_EXCLUSAO_RECEBIMENTO_MATERIAL Then gError 206455
                
                Case 2
                    lErro = Comando_Executar(alComando(4), "SELECT N.Cliente, N.FilialCli, N.Fornecedor, N.FilialForn, N.ClienteBenef, N.FilialCliBenef, N.FornecedorBenef, N.FilialFornBenef FROM NFiscal AS N WHERE N.NumIntDoc = ?", lCliente, iFilialCli, lFornecedor, iFilialForn, lClienteBenef, iFilialCliBenef, lFornecedorBenef, iFilialFornBenef, lNumIntDocOrigem)
                    If lErro <> AD_SQL_SUCESSO Then gError 206456
                
                    lErro = Comando_BuscarPrimeiro(alComando(4))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206457
                    
                    If lErro <> AD_SQL_SUCESSO Then gError 206458
                
                Case 5
                
                    objItemMovEstAux.sOPCodigo = sCodigoOP
                    objItemMovEstAux.iFilialEmpresa = iFilialOP
                
                    lErro = CF("MovEstoque_Prod_Obtem_Dados_Terc", alComando(5), objItemMovEstAux)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                    lCliente = objItemMovEstAux.lCliente
                    lFornecedor = objItemMovEstAux.lFornecedor
                    iFilialCli = objItemMovEstAux.iFilialCli
                    iFilialForn = objItemMovEstAux.iFilialForn
                    
                Case Else
                    'bIgnora = True
                
            End Select
            
            'If Not bIgnora Then
            
            If lClienteBenef <> 0 Or lFornecedorBenef <> 0 Then
                'Pega o dono do material(cliente) quando a NF vem direto do fornecedor ao qual ele fez a compra
                'Pega para onde o material(fornecedor) vai quando eu compro para beneficiar em terceiros
                objItemMovEst.lCliente = lClienteBenef
                objItemMovEst.iFilialCli = iFilialCliBenef
                objItemMovEst.lFornecedor = lFornecedorBenef
                objItemMovEst.iFilialForn = iFilialFornBenef
            Else
                objItemMovEst.lCliente = lCliente
                objItemMovEst.iFilialCli = iFilialCli
                objItemMovEst.lFornecedor = lFornecedor
                objItemMovEst.iFilialForn = iFilialForn
            End If
                    
            'If bAtualizaBD Then
            If Not bMovtoNovo Then
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentoEstoque SET Cliente = ?, FilialCli = ?, Fornecedor = ?, FilialForn = ? ", alComando(1), objItemMovEst.lCliente, objItemMovEst.iFilialCli, objItemMovEst.lFornecedor, objItemMovEst.iFilialForn)
                If lErro <> AD_SQL_SUCESSO Then gError 206459
            End If
            'Se for novo vai INSERIR depois com os dados que já foram colocados no OBJ
                
            'End If
            
        End If
        
        If lComando1 = 0 Then
            For iIndice = LBound(alComando) To UBound(alComando)
                Call Comando_Fechar(alComando(iIndice))
            Next
        End If
        
    End If
        
    MovEst_Atualiza_CliForn_Filial = SUCESSO
        
    Exit Function
    
Erro_MovEst_Atualiza_CliForn_Filial:

    MovEst_Atualiza_CliForn_Filial = gErr
    
    Select Case gErr
            
        Case 206449
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 206450, 206451
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
            
        Case 206452 'ERRO_MOVESTOQUE_NAO_CADASTRADO1
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO1", gErr, objItemMovEst.lNumIntDoc)
            
        Case 206453, 206454, 206456, 206457
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL4", gErr)
            
        Case 206455 'ERRO_ITEMNF_NAO_CADASTRADO2
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNF_NAO_CADASTRADO2", gErr, lNumIntDocOrigem)
            
        Case 206458
            Call Rotina_Erro(vbOKOnly, "ERRO_NF_NAO_CADASTRADA", gErr, lNumIntDocOrigem)
        
        Case 206459
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_MOVIMENTOESTOQUE", gErr)
            
        Case ERRO_SEM_MENSAGEM
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 206460)

    End Select

    If lComando1 = 0 Then
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
    End If

    Exit Function
    
End Function

Public Function MovEstoque_Prod_Obtem_Dados_Terc(ByVal lComando As Long, ByVal objItemMovEst As ClassItemMovEstoque) As Long

Dim lErro As Long
Dim top As typeOrdemProducao

On Error GoTo Erro_MovEstoque_Prod_Obtem_Dados_Terc

    lErro = Comando_Executar(lComando, "SELECT TipoTerc, CodTerc, FilialTerc FROM OrdensProducaoTodas WHERE FilialEmpresa = ? AND Codigo = ?", top.iTipoTerc, top.lCodTerc, top.iFilialTerc, objItemMovEst.iFilialEmpresa, objItemMovEst.sOPCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 209641

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209642
            
    If lErro = AD_SQL_SUCESSO Then
    
        If top.iTipoTerc = TIPO_TERC_CLIENTE Then
            objItemMovEst.lCliente = top.lCodTerc
            objItemMovEst.iFilialCli = top.iFilialTerc
            objItemMovEst.lFornecedor = 0
            objItemMovEst.iFilialForn = 0
        Else
            objItemMovEst.lCliente = 0
            objItemMovEst.iFilialCli = 0
            objItemMovEst.lFornecedor = top.lCodTerc
            objItemMovEst.iFilialForn = top.iFilialTerc
        End If
    
    End If

    MovEstoque_Prod_Obtem_Dados_Terc = SUCESSO
        
    Exit Function
    
Erro_MovEstoque_Prod_Obtem_Dados_Terc:

    MovEstoque_Prod_Obtem_Dados_Terc = gErr
    
    Select Case gErr
            
        Case 209641, 209642
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORDENSDEPRODUCAO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 209643)

    End Select

    Exit Function
    
End Function

Public Function EstoqueTerc_Atualiza_Versao(Optional bReproc As Boolean = False) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 25) As Long
Dim iIndice As Integer, iOperacao As Integer
Dim sConteudo As String
Dim objTipoMovEstoque As ClassTipoMovEst
Dim objItemMovEst As ClassItemMovEstoque
Dim objSldDiaEst As ClassSldDiaEst, objSldMesEst As ClassSldMesEst
Dim objEstoqueProduto As ClassEstoqueProduto
Dim tItemMovEstoque As typeItemMovEstoque
Dim iAnoUltFechamento As Integer, iAnoUltFechamentoAux As Integer
Dim objProduto As ClassProduto
Dim objUM1 As ClassUnidadeDeMedida, objUM2 As ClassUnidadeDeMedida
Dim objFiliais As AdmFiliais, iFilialEmpresa As Integer
Dim objFrmAguarde As New ClassFrmAguarde
Dim objFrmAguardeTela As New FrmAguarde
Dim lCount As Long

Const VERSAO_ESTOQUE_TERC_ATUAL = 2
Const VERSAO_TESTE = 0
Const FORCA_PRODUTO = "0000137"
Const FORCA_FILEMP = 3

Dim iAnoUltFechamentoIni As Integer

On Error GoTo Erro_EstoqueTerc_Atualiza_Versao
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 209645

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209646
    Next
    
    If gobjMAT.iTrataEstTercCliForn = MARCADO Then
       
        If Not bReproc Then
        
            sConteudo = String(STRING_CONFIG_CONTEUDO, 0)
        
            'Vê se tem que atualizar
            lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM AdmConfig WHERE Codigo = ? ", 0, sConteudo, "VERSAO_ESTOQUETERC")
            If lErro <> AD_SQL_SUCESSO Then gError 209647
        
            'Busca o Primeiro
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209648
            
        Else
            lErro = AD_SQL_SUCESSO
            sConteudo = "0"
        End If
    
        If lErro = AD_SQL_SUCESSO And StrParaInt(sConteudo) < VERSAO_ESTOQUE_TERC_ATUAL Then
        
            'desativa os locks dos comandos a seguir
            lErro = Conexao_DesativarLocks(DESATIVAR_LOCKS)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
            If VERSAO_TESTE = DESMARCADO Then
                'Limpa as tabelas de saldo
                lErro = Comando_Executar(alComando(3), "DELETE FROM SldMesEst1Terc")
                If lErro <> AD_SQL_SUCESSO Then gError 209649
            
                lErro = Comando_Executar(alComando(4), "DELETE FROM SldMesEst2Terc")
                If lErro <> AD_SQL_SUCESSO Then gError 209650
            
                lErro = Comando_Executar(alComando(5), "DELETE FROM SldDiaEstTerc")
                If lErro <> AD_SQL_SUCESSO Then gError 209651
            Else
                'Limpa as tabelas de saldo
                lErro = Comando_Executar(alComando(3), "DELETE FROM SldMesEst1Terc WHERE Produto = ? AND FilialEmpresa = ?", FORCA_PRODUTO, FORCA_FILEMP)
                If lErro <> AD_SQL_SUCESSO Then gError 209649
            
                lErro = Comando_Executar(alComando(4), "DELETE FROM SldMesEst2Terc WHERE Produto = ? AND FilialEmpresa = ?", FORCA_PRODUTO, FORCA_FILEMP)
                If lErro <> AD_SQL_SUCESSO Then gError 209650
            
                lErro = Comando_Executar(alComando(5), "DELETE FROM SldDiaEstTerc WHERE Produto = ? AND FilialEmpresa = ?", FORCA_PRODUTO, FORCA_FILEMP)
                If lErro <> AD_SQL_SUCESSO Then gError 209651
            End If
            
            If VERSAO_TESTE = MARCADO Then
                lErro = Comando_Executar(alComando(20), "SELECT Count(*) FROM MovimentoEstoque WHERE Produto = ? AND FilialEmpresa = ? ", lCount, FORCA_PRODUTO, FORCA_FILEMP)
            Else
                If bReproc Then
                    lErro = Comando_Executar(alComando(20), "SELECT Count(*) FROM MovimentoEstoque As M,TiposMovimentoEstoque As T WHERE M.TipoMov = T.Codigo AND (T.AtualizaBenef IN (1,2) OR T.AtualizaConserto IN (1,2) OR T.AtualizaConsig IN (1,2) OR T.AtualizaDemo IN (1,2) OR T.AtualizaOutras IN (1,2))", lCount)
                Else
                    lErro = Comando_Executar(alComando(20), "SELECT Count(*) FROM MovimentoEstoque", lCount)
                End If
            End If
            If lErro <> AD_SQL_SUCESSO Then gError 209652
        
            'Busca o Primeiro
            lErro = Comando_BuscarPrimeiro(alComando(20))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209653
                       
            iOperacao = REPROCESSAMENTO_REFAZ
            
            tItemMovEstoque.sProduto = String(STRING_PRODUTO, 0)
            tItemMovEstoque.sSiglaUM = String(STRING_UM_SIGLA, 0)
        
            'Le os movimentos
            With tItemMovEstoque
                If VERSAO_TESTE = MARCADO Then
                    lErro = Comando_Executar(alComando(6), "SELECT NumIntDoc, FilialEmpresa, Codigo, Custo, Apropriacao, Produto, SiglaUM, Quantidade, Almoxarifado, TipoMov, Data FROM MovimentoEstoque WHERE Produto = ? AND FilialEmpresa = ? ORDER BY Data, Hora", _
                                                                .lNumIntDoc, .iFilialEmpresa, .lCodigo, .dCusto, .iApropriacao, .sProduto, .sSiglaUM, .dQuantidade, .iAlmoxarifado, .iTipoMov, .dtData, FORCA_PRODUTO, FORCA_FILEMP)
                Else
                    If bReproc Then
                        lErro = Comando_Executar(alComando(6), "SELECT M.NumIntDoc, M.FilialEmpresa, M.Codigo, M.Custo, M.Apropriacao, M.Produto, M.SiglaUM, M.Quantidade, M.Almoxarifado, M.TipoMov, M.Data FROM MovimentoEstoque As M,TiposMovimentoEstoque As T WHERE M.TipoMov = T.Codigo AND (T.AtualizaBenef IN (1,2) OR T.AtualizaConserto IN (1,2) OR T.AtualizaConsig IN (1,2) OR T.AtualizaDemo IN (1,2) OR T.AtualizaOutras IN (1,2)) ORDER BY Data, Hora", _
                                                                    .lNumIntDoc, .iFilialEmpresa, .lCodigo, .dCusto, .iApropriacao, .sProduto, .sSiglaUM, .dQuantidade, .iAlmoxarifado, .iTipoMov, .dtData)
                    
                    Else
                        lErro = Comando_Executar(alComando(6), "SELECT NumIntDoc, FilialEmpresa, Codigo, Custo, Apropriacao, Produto, SiglaUM, Quantidade, Almoxarifado, TipoMov, Data FROM MovimentoEstoque ORDER BY Data, Hora", _
                                                                    .lNumIntDoc, .iFilialEmpresa, .lCodigo, .dCusto, .iApropriacao, .sProduto, .sSiglaUM, .dQuantidade, .iAlmoxarifado, .iTipoMov, .dtData)
                    End If
                End If
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 209652
        
            'Busca o Primeiro
            lErro = Comando_BuscarPrimeiro(alComando(6))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209653
            
            objFrmAguarde.iTotalItens = lCount
            Call objFrmAguardeTela.Inicializa_Progressao(objFrmAguarde)
            
            If iAnoUltFechamentoIni = 0 Then iAnoUltFechamentoIni = Year(tItemMovEstoque.dtData)
            iAnoUltFechamento = Year(tItemMovEstoque.dtData)
       
            Do While lErro <> AD_SQL_SEM_DADOS
            
                Set objItemMovEst = New ClassItemMovEstoque
                Set objSldDiaEst = New ClassSldDiaEst
                Set objEstoqueProduto = New ClassEstoqueProduto
                Set objProduto = New ClassProduto
            
                With tItemMovEstoque
                    objItemMovEst.lNumIntDoc = .lNumIntDoc
                    objItemMovEst.iFilialEmpresa = .iFilialEmpresa
                    objItemMovEst.lCodigo = .lCodigo
                    objItemMovEst.dCusto = .dCusto
                    objItemMovEst.iApropriacao = .iApropriacao
                    objItemMovEst.sProduto = .sProduto
                    objItemMovEst.sSiglaUM = .sSiglaUM
                    objItemMovEst.dQuantidade = .dQuantidade
                    objItemMovEst.iAlmoxarifado = .iAlmoxarifado
                    objItemMovEst.iTipoMov = .iTipoMov
                    objItemMovEst.dtData = .dtData
                End With
                
                objSldDiaEst.iFilialEmpresa = objItemMovEst.iFilialEmpresa
                objSldDiaEst.sProduto = objItemMovEst.sProduto
                objSldDiaEst.dtData = objItemMovEst.dtData
                
                objEstoqueProduto.sProduto = objItemMovEst.sProduto
                objEstoqueProduto.iAlmoxarifado = objItemMovEst.iAlmoxarifado
                
                objProduto.sCodigo = objItemMovEst.sProduto
        
                'le o atributo controleestoque do produto em questão. Os atributos siglaUM e classeUM se deve a necessidade converter a unidade do movimento para unidade de estoque
                lErro = CF("Produto_Le_ControleEstoque", alComando(19), objProduto)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
                objItemMovEst.sSiglaUMEst = objProduto.sSiglaUMEstoque
                objItemMovEst.iClasseUM = objProduto.iClasseUM
                objItemMovEst.iControleEstoque = objProduto.iControleEstoque
                objItemMovEst.iApropriacaoProd = objProduto.iApropriacaoCusto
        
                If objItemMovEst.sSiglaUM = objItemMovEst.sSiglaUMEst Then
                    objItemMovEst.dQuantidadeEst = objItemMovEst.dQuantidade
                Else
                
                    Set objUM1 = New ClassUnidadeDeMedida
        
                    objUM1.iClasse = objItemMovEst.iClasseUM
                    objUM1.sSigla = objItemMovEst.sSiglaUM
                
                    lErro = CF("UM_Le1", alComando(20), objUM1)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

                    Set objUM2 = New ClassUnidadeDeMedida
            
                    objUM2.iClasse = objItemMovEst.iClasseUM
                    objUM2.sSigla = objItemMovEst.sSiglaUMEst
                
                    lErro = CF("UM_Le1", alComando(20), objUM2)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                    objItemMovEst.dQuantidadeEst = (objItemMovEst.dQuantidade * objUM1.dQuantidade) / objUM2.dQuantidade
       
                End If
               
                Set objTipoMovEstoque = New ClassTipoMovEst
                
                objTipoMovEstoque.iCodigo = objItemMovEst.iTipoMov
                
                'ler os dados referentes ao tipo de movimento
                lErro = CF("TiposMovEst_Le1", alComando(7), objTipoMovEstoque)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                If objTipoMovEstoque.iAtualizaMovEstoque = TIPOMOV_EST_ESTORNOMOV Then
                    objItemMovEst.dQuantidadeEst = -objItemMovEst.dQuantidadeEst
                    objItemMovEst.dQuantidadeOPEst = -objItemMovEst.dQuantidadeOPEst
                    objItemMovEst.dCusto = -objItemMovEst.dCusto
                End If
                
                If iAnoUltFechamento < Year(objItemMovEst.dtData) Then

                    For Each objFiliais In gcolFiliais
                        iFilialEmpresa = objFiliais.iCodFilial
                        If iFilialEmpresa <> EMPRESA_TODA Then
                            For iAnoUltFechamentoAux = iAnoUltFechamento To Year(objItemMovEst.dtData) - 1

                                Set objSldMesEst = New ClassSldMesEst

                                objSldMesEst.iAno = iAnoUltFechamentoAux
                                objSldMesEst.iFilialEmpresa = iFilialEmpresa

                                'atualiza valores e quantidades iniciais da tabela SldMesEst1
                                lErro = SldMesEst1Terc_Atualiza_Ano_Reproc(objSldMesEst)
                                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

                                'atualiza valores e quantidades iniciais da tabela SldMesEst2
                                lErro = SldMesEst2Terc_Atualiza_Ano_Reproc(objSldMesEst)
                                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

                            Next
                            If VERSAO_TESTE = MARCADO Then Exit For
                        End If

                    Next
                    iAnoUltFechamento = Year(objItemMovEst.dtData)
                End If
                
                lErro = CF("Estoque_AtualizaItemMov3", objItemMovEst, objTipoMovEstoque, objEstoqueProduto, objSldDiaEst, iOperacao)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                lErro = CF("Estoque_AtualizaItemMov4", objItemMovEst, objTipoMovEstoque, objEstoqueProduto, objSldDiaEst)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                'atualiza as informações do fornecedor\Cliente e filial
                lErro = CF("MovEst_Atualiza_CliForn_Filial", objItemMovEst, True, alComando(8), alComando(9), alComando(10), alComando(11), alComando(12), alComando(22))
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                'atualiza a tabela de saldos diários de movimentação
                lErro = CF("SldDiaEstTerc_Atualiza", alComando(13), alComando(14), objSldDiaEst, objItemMovEst.lCliente, objItemMovEst.iFilialCli, objItemMovEst.lFornecedor, objItemMovEst.iFilialForn)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                'atualiza a tabela de saldos mensais de movimentação 1
                lErro = CF("SldMesEst1Terc_Atualiza", alComando(15), alComando(16), alComando(25), objSldDiaEst, objTipoMovEstoque, objItemMovEst.lCliente, objItemMovEst.iFilialCli, objItemMovEst.lFornecedor, objItemMovEst.iFilialForn, 0, 0, 0, 0, 0)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                'atualiza a tabela de saldos mensais de movimentação 2
                lErro = CF("SldMesEst2Terc_Atualiza", alComando(17), alComando(18), alComando(23), objSldDiaEst, objTipoMovEstoque, objItemMovEst.lCliente, objItemMovEst.iFilialCli, objItemMovEst.lFornecedor, objItemMovEst.iFilialForn, 0, 0, 0, 0, 0)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                Call objFrmAguardeTela.ProcessouItem
                If objFrmAguarde.iCancelar = MARCADO Then Exit Do
        
                'Le o próximo movimento de estoque
                lErro = Comando_BuscarProximo(alComando(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209654
        
            Loop
            
            Set objFrmAguardeTela = Nothing
            If objFrmAguarde.iCancelar = MARCADO Then gError ERRO_SEM_MENSAGEM
                          
            'Acerta os saldos até o ano atual, mesmo que não haja movimentação
            For Each objFiliais In gcolFiliais
                If VERSAO_TESTE = MARCADO Then
                    iFilialEmpresa = FORCA_FILEMP
                Else
                    iFilialEmpresa = objFiliais.iCodFilial
                End If
                If iFilialEmpresa <> EMPRESA_TODA Then
                    For iAnoUltFechamentoAux = iAnoUltFechamento To Year(Date) - 1
                    
                        Set objSldMesEst = New ClassSldMesEst
                        
                        objSldMesEst.iAno = iAnoUltFechamentoAux
                        objSldMesEst.iFilialEmpresa = iFilialEmpresa
                    
                        'atualiza valores e quantidades iniciais da tabela SldMesEst1
                        lErro = SldMesEst1Terc_Atualiza_Ano_Reproc(objSldMesEst)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                                                
                        'atualiza valores e quantidades iniciais da tabela SldMesEst2
                        lErro = SldMesEst2Terc_Atualiza_Ano_Reproc(objSldMesEst)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    Next
                    If VERSAO_TESTE = MARCADO Then Exit For
                End If
            Next
        
            lErro = CF("Reprocessamento_Ajuste_InvCliForn", "")
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            'Incluido para considerar os Inventário
            'OBS-> É necessário rodar 2 vezes porque senão nem cria o registro e não gera as informações
            
            'Acerta os saldos até o ano atual, mesmo que não haja movimentação
            For Each objFiliais In gcolFiliais
                If VERSAO_TESTE = MARCADO Then
                    iFilialEmpresa = FORCA_FILEMP
                Else
                    iFilialEmpresa = objFiliais.iCodFilial
                End If
                If iFilialEmpresa <> EMPRESA_TODA Then
                    For iAnoUltFechamentoAux = iAnoUltFechamentoIni To Year(Date) - 1
                    
                        Set objSldMesEst = New ClassSldMesEst
                        
                        objSldMesEst.iAno = iAnoUltFechamentoAux
                        objSldMesEst.iFilialEmpresa = iFilialEmpresa
                    
                        'atualiza valores e quantidades iniciais da tabela SldMesEst1
                        lErro = SldMesEst1Terc_Atualiza_Ano_Reproc(objSldMesEst)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                                                
                        'atualiza valores e quantidades iniciais da tabela SldMesEst2
                        lErro = SldMesEst2Terc_Atualiza_Ano_Reproc(objSldMesEst)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    Next
                    If VERSAO_TESTE = MARCADO Then Exit For
                End If
            Next
        
            'reativa os locks
            lErro = Conexao_DesativarLocks(REATIVAR_LOCKS)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
            If Not bReproc Then
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE AdmConfig SET Conteudo = ? ", alComando(1), CStr(VERSAO_ESTOQUE_TERC_ATUAL))
                If lErro <> AD_SQL_SUCESSO Then gError 209655
            End If
        
        End If
        
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 209656
    
    EstoqueTerc_Atualiza_Versao = SUCESSO
    
    Exit Function
    
Erro_EstoqueTerc_Atualiza_Versao:
    
    EstoqueTerc_Atualiza_Versao = gErr
    
    Select Case gErr
        
        Case 209645
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 209646
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 209647, 209648
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMCONFIG", gErr)
            
        Case 209649
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST1TERC", gErr)

        Case 209650
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDMESEST2TERC", gErr)

        Case 209651
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SLDDIAESTTERC", gErr)

        Case 209652 To 209654
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case 209655
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ADMCONFIG", gErr)
        
        Case 209656
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 209657)
            
    End Select

    'reativa os locks
    Call Conexao_DesativarLocks(REATIVAR_LOCKS)

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    If Not (objFrmAguardeTela Is Nothing) Then
        Call objFrmAguardeTela.Trata_Erro
    End If
    
    Exit Function
    
End Function

Public Function RelMovEstTerc_Prepara(ByVal objRelEstTercSel As ClassRelEstTercSel) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 11) As Long
Dim iIndice As Integer
Dim sSQL As String, sOrderBy As String
Dim tItem As typeItemMovEstoque
Dim tTipo As typeTipoMovEst
Dim sProdTipo As String, objItem As ClassRelMovEstTerc, dQuantidadeEst As Double
Dim iIndiceEscaninho, iEscaninho As Integer, sProdutoMask As String
Dim colCli As New Collection, colFilCli As New Collection
Dim colForn As New Collection, colFilForn As New Collection
Dim objCli As ClassCliente, objForn As ClassFornecedor, bAchou As Boolean
Dim objFilCli As ClassFilialCliente, objFilForn As ClassFilialFornecedor, lSeq As Long
Dim objUM1 As ClassUnidadeDeMedida, objUM2 As ClassUnidadeDeMedida, iAtualiza As Integer
Dim colItens As New Collection, objItemAux As ClassRelMovEstTerc
Dim tInv As typeInvCliForn, dSaldo As Double, dSaldoIni As Double, lQuebraTerc As Long
Dim colSaida As New Collection, colCampos As New Collection, objEstTerc As ClassEstoqueTerc

On Error GoTo Erro_RelMovEstTerc_Prepara
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 209736

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209737
    Next
    
    lErro = RelEstTerc_Prepara(objRelEstTercSel, 1)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelEstTerc_Prepara_Produtos(alComando(1), alComando(2), objRelEstTercSel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    sSQL = "SELECT M.Codigo, M.Produto, M.SiglaUM, M.Quantidade, M.TipoMov, M.Data , T.Sigla, P.Descricao, "
    sSQL = sSQL & "P.SiglaUMEstoque, P.ClasseUM,  M.Fornecedor, M.FilialForn, M.Cliente, M.FilialCli, M.DocOrigem, M.CodigoOP, "
    sSQL = sSQL & "TME.Descricao, TME.AtualizaConsig, TME.AtualizaDemo, TME.AtualizaConserto, TME.AtualizaOutras, TME.AtualizaBenef "
    sSQL = sSQL & "FROM MovimentoEstoque AS M, RelEstTercProd As X, Produtos AS P, TiposdeProduto AS T, TiposMovimentoEstoque AS TME "
    sSQL = sSQL & "WHERE M.FilialEmpresa = ? AND X.NumIntRel = ? AND X.Produto = M.Produto AND P.Codigo = M.Produto AND "
    sSQL = sSQL & "T.TipoDeProduto = P.Tipo AND M.TipoMov = TME.Codigo AND "
    sSQL = sSQL & "(TME.AtualizaConsig IN (1,2) OR TME.AtualizaDemo IN (1,2) OR TME.AtualizaConserto IN (1,2) OR TME.AtualizaOutras IN (1,2) OR TME.AtualizaBenef IN (1,2)) AND Kardex1 IN (1,2) AND (M.Data >= ? OR ? = ?)  AND (M.Data <= ? OR ? = ?) "
    sOrderBy = "" '"ORDER BY M.Fornecedor, M.FilialForn, M.Cliente, M.FilialCli, M.Produto, M.Data, M.Hora "
    
    If objRelEstTercSel.iTipo = 0 Then
        sSQL = sSQL & "AND TME.ProdutoDeTerc = 0 "
    Else
        sSQL = sSQL & "AND TME.ProdutoDeTerc = 1 "
    End If
    
    tItem.sProduto = String(STRING_PRODUTO, 0)
    tItem.sSiglaUM = String(STRING_UM_SIGLA, 0)
    tItem.sSiglaUMEst = String(STRING_UM_SIGLA, 0)
    tItem.sDocOrigem = String(STRING_MOVESTOQUE_DOCORIGEM, 0)
    tItem.sOPCodigo = String(STRING_OPCODIGO, 0)
    tItem.sProdutoDesc = String(STRING_PRODUTO_DESCRICAO, 0)
    tTipo.sDescricao = String(STRING_TIPOMOV_EST_DESCRICAO, 0)
    sProdTipo = String(STRING_TIPODEPRODUTO_SIGLA, 0)
    
    If objRelEstTercSel.iTipoTerc = 0 Then
        lErro = Comando_Executar(alComando(3), sSQL & sOrderBy, tItem.lCodigo, tItem.sProduto, tItem.sSiglaUM, tItem.dQuantidade, tItem.iTipoMov, tItem.dtData, sProdTipo, tItem.sProdutoDesc, tItem.sSiglaUMEst, _
                                                    tItem.iClasseUM, tItem.lFornecedor, tItem.iFilialForn, tItem.lCliente, tItem.iFilialCli, tItem.sDocOrigem, tItem.sOPCodigo, tTipo.sDescricao, tTipo.iAtualizaConsig, tTipo.iAtualizaDemo, tTipo.iAtualizaConserto, tTipo.iAtualizaOutras, tTipo.iAtualizaBenef, objRelEstTercSel.iFilialEmpresa, objRelEstTercSel.lNumIntRel, objRelEstTercSel.dtDataDe, objRelEstTercSel.dtDataDe, DATA_NULA, objRelEstTercSel.dtDataAte, objRelEstTercSel.dtDataAte, DATA_NULA)
    ElseIf objRelEstTercSel.iTipoTerc = TIPO_TERC_CLIENTE Then
        lErro = Comando_Executar(alComando(3), sSQL & "AND M.Cliente <> 0 AND (M.Cliente = ? OR ? = 0) AND (M.FilialCli = ? OR ? = 0) " & sOrderBy, tItem.lCodigo, tItem.sProduto, tItem.sSiglaUM, tItem.dQuantidade, tItem.iTipoMov, tItem.dtData, sProdTipo, tItem.sProdutoDesc, tItem.sSiglaUMEst, _
                                                    tItem.iClasseUM, tItem.lFornecedor, tItem.iFilialForn, tItem.lCliente, tItem.iFilialCli, tItem.sDocOrigem, tItem.sOPCodigo, tTipo.sDescricao, tTipo.iAtualizaConsig, tTipo.iAtualizaDemo, tTipo.iAtualizaConserto, tTipo.iAtualizaOutras, tTipo.iAtualizaBenef, objRelEstTercSel.iFilialEmpresa, objRelEstTercSel.lNumIntRel, objRelEstTercSel.dtDataDe, objRelEstTercSel.dtDataDe, DATA_NULA, objRelEstTercSel.dtDataAte, objRelEstTercSel.dtDataAte, DATA_NULA, objRelEstTercSel.lCodTerc, objRelEstTercSel.lCodTerc, objRelEstTercSel.iFilialTerc, objRelEstTercSel.iFilialTerc)
    ElseIf objRelEstTercSel.iTipoTerc = TIPO_TERC_FORNECEDOR Then
        lErro = Comando_Executar(alComando(3), sSQL & "AND M.Fornecedor <> 0 AND (M.Fornecedor = ? OR ? = 0) AND (M.FilialForn = ? OR ? = 0) " & sOrderBy, tItem.lCodigo, tItem.sProduto, tItem.sSiglaUM, tItem.dQuantidade, tItem.iTipoMov, tItem.dtData, sProdTipo, tItem.sProdutoDesc, tItem.sSiglaUMEst, _
                                                    tItem.iClasseUM, tItem.lFornecedor, tItem.iFilialForn, tItem.lCliente, tItem.iFilialCli, tItem.sDocOrigem, tItem.sOPCodigo, tTipo.sDescricao, tTipo.iAtualizaConsig, tTipo.iAtualizaDemo, tTipo.iAtualizaConserto, tTipo.iAtualizaOutras, tTipo.iAtualizaBenef, objRelEstTercSel.iFilialEmpresa, objRelEstTercSel.lNumIntRel, objRelEstTercSel.dtDataDe, objRelEstTercSel.dtDataDe, DATA_NULA, objRelEstTercSel.dtDataAte, objRelEstTercSel.dtDataAte, DATA_NULA, objRelEstTercSel.lCodTerc, objRelEstTercSel.lCodTerc, objRelEstTercSel.iFilialTerc, objRelEstTercSel.iFilialTerc)
    ElseIf objRelEstTercSel.iTipoTerc = 3 Then
        lErro = Comando_Executar(alComando(3), sSQL & "AND M.Fornecedor = 0 AND M.Cliente = 0 " & sOrderBy, tItem.lCodigo, tItem.sProduto, tItem.sSiglaUM, tItem.dQuantidade, tItem.iTipoMov, tItem.dtData, sProdTipo, tItem.sProdutoDesc, tItem.sSiglaUMEst, _
                                                    tItem.iClasseUM, tItem.lFornecedor, tItem.iFilialForn, tItem.lCliente, tItem.iFilialCli, tItem.sDocOrigem, tItem.sOPCodigo, tTipo.sDescricao, tTipo.iAtualizaConsig, tTipo.iAtualizaDemo, tTipo.iAtualizaConserto, tTipo.iAtualizaOutras, tTipo.iAtualizaBenef, objRelEstTercSel.iFilialEmpresa, objRelEstTercSel.lNumIntRel, objRelEstTercSel.dtDataDe, objRelEstTercSel.dtDataDe, DATA_NULA, objRelEstTercSel.dtDataAte, objRelEstTercSel.dtDataAte, DATA_NULA)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 209738
    
    'Busca o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209739

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objItem = New ClassRelMovEstTerc

        If tItem.sSiglaUM = tItem.sSiglaUMEst Then
            dQuantidadeEst = tItem.dQuantidade
        Else

            Set objUM1 = New ClassUnidadeDeMedida

            objUM1.iClasse = tItem.iClasseUM
            objUM1.sSigla = tItem.sSiglaUM

            lErro = CF("UM_Le1", alComando(4), objUM1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

            Set objUM2 = New ClassUnidadeDeMedida

            objUM2.iClasse = tItem.iClasseUM
            objUM2.sSigla = tItem.sSiglaUMEst

            lErro = CF("UM_Le1", alComando(4), objUM2)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

            dQuantidadeEst = (tItem.dQuantidade * objUM1.dQuantidade) / objUM2.dQuantidade

        End If
         
        If tItem.lCliente <> 0 Then
        
            objItem.iTipoTerc = TIPO_TERC_CLIENTE
            objItem.sNomeTipoTerc = "Cliente"
            objItem.lCodTerc = tItem.lCliente
            objItem.iFilialTerc = tItem.iFilialCli
                
            bAchou = False
            iIndice = 0
            For Each objFilCli In colFilCli
                iIndice = iIndice + 1
                If objFilCli.lCodCliente = objItem.lCodTerc And objFilCli.iCodFilial = objItem.iFilialTerc Then
                    Set objCli = colCli.Item(iIndice)
                    Exit For
                End If
            Next
            If Not bAchou Then
                
                Set objCli = New ClassCliente
                Set objFilCli = New ClassFilialCliente
                    
                objCli.lCodigo = objItem.lCodTerc
                objFilCli.lCodCliente = objItem.lCodTerc
                objFilCli.iCodFilial = objItem.iFilialTerc
                    
                lErro = CF("Cliente_Le", objCli, alComando(5), alComando(6))
                If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM
                    
                lErro = CF("FilialCliente_Le", objFilCli, alComando(7))
                If lErro <> SUCESSO And lErro <> 12567 Then gError ERRO_SEM_MENSAGEM
                    
                colCli.Add objCli
                colFilCli.Add objFilCli
                    
            End If
                
            objItem.sNomeFilialTerc = CStr(objFilCli.iCodFilial) & SEPARADOR & objFilCli.sNome
            objItem.sNomeTerceiro = CStr(objCli.lCodigo) & SEPARADOR & objCli.sNomeReduzido
                
        ElseIf tItem.lFornecedor <> 0 Then
            
            objItem.iTipoTerc = TIPO_TERC_FORNECEDOR
            objItem.sNomeTipoTerc = "Fornecedor"
            objItem.lCodTerc = tItem.lFornecedor
            objItem.iFilialTerc = tItem.iFilialForn
                
            bAchou = False
            iIndice = 0
            For Each objFilForn In colFilForn
                iIndice = iIndice + 1
                If objFilForn.lCodFornecedor = objItem.lCodTerc And objFilForn.iCodFilial = objItem.iFilialTerc Then
                    Set objForn = colForn.Item(iIndice)
                    Exit For
                End If
            Next
            If Not bAchou Then
                
                Set objForn = New ClassFornecedor
                Set objFilForn = New ClassFilialFornecedor
                   
                objForn.lCodigo = objItem.lCodTerc
                objFilForn.lCodFornecedor = objItem.lCodTerc
                objFilForn.iCodFilial = objItem.iFilialTerc
                    
                lErro = CF("Fornecedor_Le", objForn)
                If lErro <> SUCESSO And lErro <> 12729 Then gError ERRO_SEM_MENSAGEM
           
                lErro = CF("FilialFornecedor_Le", objFilForn)
                If lErro <> SUCESSO And lErro <> 12929 Then gError ERRO_SEM_MENSAGEM
                    
                colForn.Add objForn
                colFilForn.Add objFilForn
                  
            End If
              
            objItem.sNomeFilialTerc = CStr(objFilForn.iCodFilial) & SEPARADOR & objFilForn.sNome
            objItem.sNomeTerceiro = CStr(objForn.lCodigo) & SEPARADOR & objForn.sNomeReduzido
              
        Else
            objItem.iTipoTerc = 0
            objItem.sNomeTipoTerc = "Indefinido"
            objItem.lCodTerc = 0
            objItem.iFilialTerc = 0
            objItem.sNomeFilialTerc = ""
            objItem.sNomeTerceiro = ""
        End If
            
        objItem.lNumIntRel = objRelEstTercSel.lNumIntRel
        objItem.sFaixaCat = objRelEstTercSel.sFaixaCat
        objItem.sFaixaData = objRelEstTercSel.sFaixaData
        objItem.sFaixaProd = objRelEstTercSel.sFaixaProd
        objItem.sFaixaTerc = objRelEstTercSel.sFaixaTerc
        objItem.sTipoEscaninho = objRelEstTercSel.sTipoEscaninho
        
        objItem.dtData = tItem.dtData
        objItem.lNumMovto = tItem.lCodigo
        objItem.sDescTipoMovto = tTipo.sDescricao
        
        If Len(Trim(tItem.sOPCodigo)) <> 0 Then
            objItem.sDocOrigem = "OP: " & tItem.sOPCodigo
        Else
            objItem.sDocOrigem = tItem.sDocOrigem
        End If
        objItem.sProduto = tItem.sProduto
        
        Call Mascara_RetornaProdutoTela(tItem.sProduto, sProdutoMask)
        
        objItem.sProdutoMask = sProdutoMask
        objItem.sTipoProd = sProdTipo
        objItem.sUM = tItem.sSiglaUMEst
         
        For iIndiceEscaninho = 1 To 5
            
            iAtualiza = 0
            Select Case iIndiceEscaninho
                Case 1
                    If objRelEstTercSel.iTipo = 0 Then
                        iEscaninho = 2 '2   Conserto - Nosso em Poder de Terceiros
                    Else
                        iEscaninho = 7 '7   Conserto - De Terceiros em Nosso Poder
                    End If
                    iAtualiza = tTipo.iAtualizaConserto
                    objItem.sNomeEscaninho = "Conserto"
                    
                Case 2
                    If objRelEstTercSel.iTipo = 0 Then
                        iEscaninho = 3 '3   Consignação - Nosso em Poder de Terceiros
                    Else
                        iEscaninho = 8 '8   Consignação - De Terceiros em Nosso Poder
                    End If
                    iAtualiza = tTipo.iAtualizaConsig
                    objItem.sNomeEscaninho = "Consignação"
                
                Case 3
                    If objRelEstTercSel.iTipo = 0 Then
                        iEscaninho = 4 '4   Demonstração - Nosso em Poder de Terceiros
                    Else
                        iEscaninho = 9 '9   Demonstração - De Terceiros em Nosso Poder
                    End If
                    iAtualiza = tTipo.iAtualizaDemo
                    objItem.sNomeEscaninho = "Demonstração"
                
                Case 4
                    If objRelEstTercSel.iTipo = 0 Then
                        iEscaninho = 5 '5   Outros - Nosso em Poder de Terceiros
                    Else
                        iEscaninho = 10 '10   Outros - De Terceiros em Nosso Poder
                    End If
                    iAtualiza = tTipo.iAtualizaOutras
                    objItem.sNomeEscaninho = "Outros"
                
                Case 5
                    If objRelEstTercSel.iTipo = 0 Then
                        iEscaninho = 6 '6   Beneficiamento - Nosso em Poder de Terceiros
                    Else
                        iEscaninho = 11 '11  Beneficiamento - De Terceiros em Nosso Poder
                    End If
                    iAtualiza = tTipo.iAtualizaBenef
                    objItem.sNomeEscaninho = "Beneficiamento"
            
            End Select
            
            If iAtualiza <> 0 Then
                
                If iAtualiza = 1 Then
                    objItem.dQtdeEntrada = dQuantidadeEst
                    objItem.dQtdeSaida = 0
                Else
                    objItem.dQtdeEntrada = 0
                    objItem.dQtdeSaida = dQuantidadeEst
                End If
                objItem.iEscaninho = iEscaninho
                
                Set objItemAux = New ClassRelMovEstTerc
                Call objItemAux.Copia(objItem)
                
                colItens.Add objItemAux
            
            End If
         
        Next

        'Le o próximo movimento de estoque
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209654

     Loop

    'Se não for para trazer só o não identificado
    'If objRelEstTercSel.iTipoTerc <> 3 Then

        sSQL = "SELECT I.Data, I.Escaninho, I.TipoCliForn, I.CliForn, I.Filial, I.Obs, II.Produto, II.QtdAcerto, II.Obs, P.SiglaUMEstoque , T.Sigla, P.Descricao "
        sSQL = sSQL & "FROM InvCliForn As I, InvCliFornItens AS II, RelEstTercProd As X, Produtos AS P, TiposdeProduto AS T "
        sSQL = sSQL & "WHERE I.NumIntDoc = II.NumIntInvCliForn AND I.FilialEmpresa = ? AND X.NumIntRel = ? AND X.Produto = II.Produto AND P.Codigo = II.Produto AND T.TipoDeProduto = P.Tipo "
    
        If objRelEstTercSel.iTipo = 0 Then
            sSQL = sSQL & "AND I.Escaninho < 7 "
        Else
            sSQL = sSQL & "AND I.Escaninho >= 7 "
        End If
    
        tInv.sOBS = String(STRING_MAXIMO, 0)
        tItem.sProduto = String(STRING_PRODUTO, 0)
        tItem.sProdutoDesc = String(STRING_PRODUTO_DESCRICAO, 0)
        tItem.sSiglaUMEst = String(STRING_UM_SIGLA, 0)
        tItem.sObservacao = String(STRING_MAXIMO, 0)
        sProdTipo = String(STRING_TIPODEPRODUTO_SIGLA, 0)
    
        If objRelEstTercSel.iTipoTerc = 0 Then
            lErro = Comando_Executar(alComando(8), sSQL, tInv.dtData, tInv.iEscaninho, tInv.iTipoCliForn, tInv.lCliForn, tInv.iFilial, tInv.sOBS, tItem.sProduto, tItem.dQuantidade, tItem.sObservacao, tItem.sSiglaUMEst, sProdTipo, tItem.sProdutoDesc, objRelEstTercSel.iFilialEmpresa, objRelEstTercSel.lNumIntRel)
        Else
            lErro = Comando_Executar(alComando(8), sSQL & "AND I.TipoCliForn = ? AND I.CliForn <> 0 AND (I.CliForn = ? OR ? = 0) AND (I.Filial = ? OR ? = 0) ", tInv.dtData, tInv.iEscaninho, tInv.iTipoCliForn, tInv.lCliForn, tInv.iFilial, tInv.sOBS, tItem.sProduto, tItem.dQuantidade, tItem.sObservacao, tItem.sSiglaUMEst, sProdTipo, tItem.sProdutoDesc, objRelEstTercSel.iFilialEmpresa, objRelEstTercSel.lNumIntRel, _
                                                    objRelEstTercSel.iTipoTerc, objRelEstTercSel.lCodTerc, objRelEstTercSel.lCodTerc, objRelEstTercSel.iFilialTerc, objRelEstTercSel.iFilialTerc)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 209740
    
        'Busca o Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209741
        
        Do While lErro <> AD_SQL_SEM_DADOS

            Set objItem = New ClassRelMovEstTerc
            Set objItemAux = New ClassRelMovEstTerc
            
            'Se não for para trazer só o não identificado
            If objRelEstTercSel.iTipoTerc <> 3 Then
                colItens.Add objItem
            End If
            'se for para trazer tudo ou só o não identificado
            If objRelEstTercSel.iTipoTerc = 3 Or objRelEstTercSel.iTipoTerc = 0 Then
                colItens.Add objItemAux
            End If

            objItem.iTipoTerc = tInv.iTipoCliForn
            objItem.lCodTerc = tInv.lCliForn
            objItem.iFilialTerc = tInv.iFilial
            objItem.iEscaninho = tInv.iEscaninho

            If tInv.iTipoCliForn = TIPO_TERC_CLIENTE Then
            
                objItem.sNomeTipoTerc = "Cliente"
                    
                bAchou = False
                iIndice = 0
                For Each objFilCli In colFilCli
                    iIndice = iIndice + 1
                    If objFilCli.lCodCliente = objItem.lCodTerc And objFilCli.iCodFilial = objItem.iFilialTerc Then
                        Set objCli = colCli.Item(iIndice)
                        Exit For
                    End If
                Next
                If Not bAchou Then
                    
                    Set objCli = New ClassCliente
                    Set objFilCli = New ClassFilialCliente
                        
                    objCli.lCodigo = objItem.lCodTerc
                    objFilCli.lCodCliente = objItem.lCodTerc
                    objFilCli.iCodFilial = objItem.iFilialTerc
                        
                    lErro = CF("Cliente_Le", objCli, alComando(5), alComando(6))
                    If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM
                        
                    lErro = CF("FilialCliente_Le", objFilCli, alComando(7))
                    If lErro <> SUCESSO And lErro <> 12567 Then gError ERRO_SEM_MENSAGEM
                        
                    colCli.Add objCli
                    colFilCli.Add objFilCli
                        
                End If
                    
                objItem.sNomeFilialTerc = CStr(objFilCli.iCodFilial) & SEPARADOR & objFilCli.sNome
                objItem.sNomeTerceiro = CStr(objCli.lCodigo) & SEPARADOR & objCli.sNomeReduzido
                    
            ElseIf tItem.lFornecedor <> 0 Then
                
                objItem.sNomeTipoTerc = "Fornecedor"
                    
                bAchou = False
                iIndice = 0
                For Each objFilForn In colFilForn
                    iIndice = iIndice + 1
                    If objFilForn.lCodFornecedor = objItem.lCodTerc And objFilForn.iCodFilial = objItem.iFilialTerc Then
                        Set objForn = colForn.Item(iIndice)
                        Exit For
                    End If
                Next
                If Not bAchou Then
                    
                    Set objForn = New ClassFornecedor
                    Set objFilForn = New ClassFilialFornecedor
                       
                    objForn.lCodigo = objItem.lCodTerc
                    objFilForn.lCodFornecedor = objItem.lCodTerc
                    objFilForn.iCodFilial = objItem.iFilialTerc
                        
                    lErro = CF("Fornecedor_Le", objForn)
                    If lErro <> SUCESSO And lErro <> 12729 Then gError ERRO_SEM_MENSAGEM
               
                    lErro = CF("FilialFornecedor_Le", objFilForn)
                    If lErro <> SUCESSO And lErro <> 12929 Then gError ERRO_SEM_MENSAGEM
                        
                    colForn.Add objForn
                    colFilForn.Add objFilForn
                      
                End If
                  
                objItem.sNomeFilialTerc = CStr(objFilForn.iCodFilial) & SEPARADOR & objFilForn.sNome
                objItem.sNomeTerceiro = CStr(objForn.lCodigo) & SEPARADOR & objForn.sNomeReduzido
                  
            End If
            
            objItem.lNumIntRel = objRelEstTercSel.lNumIntRel
            objItem.sFaixaCat = objRelEstTercSel.sFaixaCat
            objItem.sFaixaData = objRelEstTercSel.sFaixaData
            objItem.sFaixaProd = objRelEstTercSel.sFaixaProd
            objItem.sFaixaTerc = objRelEstTercSel.sFaixaTerc
            objItem.sTipoEscaninho = objRelEstTercSel.sTipoEscaninho
            'objItem.iEscaninho = iEscaninho
            
            Select Case objItem.iEscaninho
                Case 2, 7
                    objItem.sNomeEscaninho = "Conserto"
                Case 3, 8
                    objItem.sNomeEscaninho = "Consignação"
                Case 4, 9
                    objItem.sNomeEscaninho = "Demonstração"
                Case 5, 10
                    objItem.sNomeEscaninho = "Outros"
                Case 6, 11
                    objItem.sNomeEscaninho = "Beneficiamento"
            End Select
            
            objItem.dtData = tInv.dtData
            objItem.lNumMovto = 0
            objItem.sDocOrigem = "Inventário"
            
            If Len(Trim(tItem.sObservacao)) <> 0 Then
                objItem.sDescTipoMovto = tItem.sObservacao
            Else
                objItem.sDescTipoMovto = tInv.sOBS
            End If
            objItem.sProduto = tItem.sProduto
            
            Call Mascara_RetornaProdutoTela(tItem.sProduto, sProdutoMask)
            
            objItem.sProdutoMask = sProdutoMask
            objItem.sTipoProd = sProdTipo
            objItem.sUM = tItem.sSiglaUMEst
            
            Call objItemAux.Copia(objItem)
            
            If tItem.dQuantidade > 0 Then
                objItem.dQtdeEntrada = tItem.dQuantidade
                objItemAux.dQtdeSaida = tItem.dQuantidade
            Else
                objItem.dQtdeSaida = Abs(tItem.dQuantidade)
                objItemAux.dQtdeEntrada = Abs(tItem.dQuantidade)
            End If
            
            objItemAux.iTipoTerc = 0
            objItemAux.sNomeTipoTerc = "Indefinido"
            objItemAux.lCodTerc = 0
            objItemAux.iFilialTerc = 0
            objItemAux.sNomeFilialTerc = ""
            objItemAux.sNomeTerceiro = ""

            lErro = Comando_BuscarProximo(alComando(8))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209742
    
        Loop

    'End If
    
    Set objItemAux = New ClassRelMovEstTerc
    
    colCampos.Add "iEscaninho"
    colCampos.Add "iTipoTerc"
    colCampos.Add "lCodTerc"
    colCampos.Add "iFilialTerc"
    colCampos.Add "sProduto"
    colCampos.Add "dtData"
    colCampos.Add "lNumMovto"
    
    Call Ordena_Colecao(colItens, colSaida, colCampos)
    
    lSeq = 0
    For Each objItem In colSaida
        
        lSeq = lSeq + 1
        objItem.lSeq = lSeq
        
        If objItemAux.iTipoTerc <> objItem.iTipoTerc Or objItemAux.lCodTerc <> objItem.lCodTerc Or objItemAux.iFilialTerc <> objItem.iFilialTerc Then
            objItemAux.lQuebraTerc = objItemAux.lQuebraTerc + 1
        End If
        objItem.lQuebraTerc = objItemAux.lQuebraTerc
    
        If objItemAux.iEscaninho <> objItem.iEscaninho Or objItemAux.iTipoTerc <> objItem.iTipoTerc Or objItemAux.lCodTerc <> objItem.lCodTerc Or objItemAux.iFilialTerc <> objItem.iFilialTerc Or objItemAux.sProduto <> objItem.sProduto Then
            Set objEstTerc = New ClassEstoqueTerc
            objEstTerc.dtData = DateAdd("d", -1, objRelEstTercSel.dtDataDe)
            objEstTerc.iEscaninho = objItem.iEscaninho
            objEstTerc.iFilialEmpresa = objRelEstTercSel.iFilialEmpresa
            objEstTerc.iFilial = objItem.iFilialTerc
            objEstTerc.iTipoCliForn = objItem.iTipoTerc
            objEstTerc.lCliForn = objItem.lCodTerc
            objEstTerc.sProduto = objItem.sProduto
            
            If objRelEstTercSel.dtDataDe <> DATA_NULA Then
                lErro = CF("EstoqueTerc_Le_Saldo", objEstTerc, alComando(9), alComando(10))
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            Else
                objEstTerc.dQuantidade = 0
            End If
            
            dSaldo = objEstTerc.dQuantidade
            
        End If
        objItem.dSaldoInicial = objEstTerc.dQuantidade
        dSaldo = dSaldo + objItem.dQtdeEntrada - objItem.dQtdeSaida
        objItem.dSaldo = dSaldo
        
        lErro = Comando_Executar(alComando(11), "INSERT INTO RelMovEstTec (NumIntRel,Seq,NumMovto,Escaninho,TipoTerc,CodTerc,FilialTerc,Produto,NomeEscaninho,NomeTerceiro,NomeTipoTerc,NomeFilialTerc,DocOrigem,DescTipoMovto,Data,UM,QtdeEntrada,QtdeSaida,Saldo,TipoEscaninho,QuebraTerc,FaixaTerc,FaixaProd,FaixaCat,FaixaData,SaldoInicial,ProdutoMask,TipoProd) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                  objItem.lNumIntRel, objItem.lSeq, objItem.lNumMovto, objItem.iEscaninho, objItem.iTipoTerc, objItem.lCodTerc, objItem.iFilialTerc, objItem.sProduto, objItem.sNomeEscaninho, objItem.sNomeTerceiro, objItem.sNomeTipoTerc, objItem.sNomeFilialTerc, objItem.sDocOrigem, objItem.sDescTipoMovto, objItem.dtData, objItem.sUM, objItem.dQtdeEntrada, objItem.dQtdeSaida, objItem.dSaldo, objItem.sTipoEscaninho, objItem.lQuebraTerc, objItem.sFaixaTerc, objItem.sFaixaProd, objItem.sFaixaCat, objItem.sFaixaData, objItem.dSaldoInicial, objItem.sProdutoMask, objItem.sTipoProd)
        If lErro <> AD_SQL_SUCESSO Then gError 209743

    
        objItemAux.iEscaninho = objItem.iEscaninho
        objItemAux.iTipoTerc = objItem.iTipoTerc
        objItemAux.lCodTerc = objItem.lCodTerc
        objItemAux.iFilialTerc = objItem.iFilialTerc
        objItemAux.sProduto = objItem.sProduto
        objItemAux.dtData = objItem.dtData
        objItemAux.lNumMovto = objItem.lNumMovto
    
    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 209744
    
    RelMovEstTerc_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelMovEstTerc_Prepara:
    
    RelMovEstTerc_Prepara = gErr
    
    Select Case gErr
        
        Case 209736
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 209737
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 209738, 209739, 209742
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case 209740, 209741
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INVCLIFORN", gErr)
        
        Case 209743
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELMOVESTERC", gErr)
        
        Case 209744
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 209657)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function
    
End Function

Public Function RelSldEstTerc_Prepara(ByVal objRelEstTercSel As ClassRelEstTercSel) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 9) As Long, iIndice As Integer
Dim iAno As Integer, iMes As Integer, dtDataIniMes As Date
Dim sMacroQtd As String, sTabela As String, sComplMacroQtd, sMacroQtdDia As String
Dim sProduto As String, lFornecedor As Long, iFilialForn As Integer
Dim lCliente As Long, iFilialCli As Integer, dSaldoConserto As Double
Dim dSaldoConsig As Double, dSaldoDemo As Double, dSaldoOutros As Double, dSaldoBenef As Double
Dim dSaldoConsertoDia As Double, dSaldoConsigDia As Double, dSaldoDemoDia As Double
Dim dSaldoOutrosDia As Double, dSaldoBenefDia As Double
Dim objItem As ClassRelSldEstTerc, sProdutoMask As String
Dim colCli As New Collection, colFilCli As New Collection
Dim colForn As New Collection, colFilForn As New Collection
Dim objCli As ClassCliente, objForn As ClassFornecedor
Dim objFilCli As ClassFilialCliente, objFilForn As ClassFilialFornecedor, lSeq As Long
Dim sProdTipo As String, sProdDesc As String, bAchou As Boolean, sProdUM As String

On Error GoTo Erro_RelSldEstTerc_Prepara
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 209725

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209726
    Next
        
    lErro = RelEstTerc_Prepara(objRelEstTercSel, 0)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelEstTerc_Prepara_Produtos(alComando(1), alComando(2), objRelEstTercSel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    iAno = Year(objRelEstTercSel.dtDataDe)
    iMes = Month(objRelEstTercSel.dtDataDe)
    dtDataIniMes = DateAdd("d", 1 - Day(objRelEstTercSel.dtDataDe), objRelEstTercSel.dtDataDe)
    
    If objRelEstTercSel.iTipo = 0 Then
        sTabela = 2
        sComplMacroQtd = ""
    Else
        sTabela = 1
        sComplMacroQtd = "3"
    End If
   
    sMacroQtd = "(S.QuantInicialXXX" & sComplMacroQtd
    For iIndice = 1 To iMes - 1
        'Soma o saldo dos meses mais a qtd inicial até o mês anterior a data
        sMacroQtd = sMacroQtd & " + S.SaldoQuantXXX" & sComplMacroQtd & CStr(iIndice)
    Next
    sMacroQtd = sMacroQtd & ")"
    
    sMacroQtdDia = "SUM(QuantEntXXX" & sComplMacroQtd & " - QuantSaiXXX" & sComplMacroQtd & ")"
    
    'Alocação de espaço no buffer
    sProduto = String(STRING_PRODUTO, 0)
    sProdTipo = String(STRING_TIPODEPRODUTO_SIGLA, 0)
    sProdDesc = String(STRING_PRODUTO_DESCRICAO, 0)
    sProdUM = String(STRING_UM_SIGLA, 0)

    'Le o saldo até o início do mês dos produtos
    If objRelEstTercSel.iTipoTerc = 0 Then
        lErro = Comando_Executar(alComando(3), "SELECT S.Produto, T.Sigla, P.Descricao, P.SiglaUMEstoque, S.Fornecedor, S.FilialForn, S.Cliente, S.FilialCli, " & Replace(sMacroQtd, "XXX", "Conserto") & ", " & Replace(sMacroQtd, "XXX", "Consig") & ", " & Replace(sMacroQtd, "XXX", "Demo") & ", " & Replace(sMacroQtd, "XXX", "Outros") & ", " & Replace(sMacroQtd, "XXX", "Benef") & " FROM SldMesEst" & sTabela & "Terc As S, RelEstTercProd As X, Produtos AS P, TiposdeProduto AS T WHERE X.NumIntRel = ? AND X.Produto = S.Produto AND P.Codigo = S.Produto AND T.TipoDeProduto = P.Tipo AND S.FilialEmpresa = ? AND S.Ano = ? ORDER BY S.Produto, S.Fornecedor, S.FilialForn, S.Cliente, S.FilialCli ", _
                                                    sProduto, sProdTipo, sProdDesc, sProdUM, lFornecedor, iFilialForn, lCliente, iFilialCli, dSaldoConserto, dSaldoConsig, dSaldoDemo, dSaldoOutros, dSaldoBenef, objRelEstTercSel.lNumIntRel, objRelEstTercSel.iFilialEmpresa, iAno)
    ElseIf objRelEstTercSel.iTipoTerc = TIPO_TERC_CLIENTE Then
        lErro = Comando_Executar(alComando(3), "SELECT S.Produto, T.Sigla, P.Descricao, P.SiglaUMEstoque, S.Fornecedor, S.FilialForn, S.Cliente, S.FilialCli, " & Replace(sMacroQtd, "XXX", "Conserto") & ", " & Replace(sMacroQtd, "XXX", "Consig") & ", " & Replace(sMacroQtd, "XXX", "Demo") & ", " & Replace(sMacroQtd, "XXX", "Outros") & ", " & Replace(sMacroQtd, "XXX", "Benef") & " FROM SldMesEst" & sTabela & "Terc As S, RelEstTercProd As X, Produtos AS P, TiposdeProduto AS T WHERE X.NumIntRel = ? AND X.Produto = S.Produto AND P.Codigo = S.Produto AND T.TipoDeProduto = P.Tipo AND S.FilialEmpresa = ? AND S.Ano = ? AND S.Cliente <> 0 AND (S.Cliente = ? OR ? = 0) AND (S.FilialCli = ? OR ? = 0) ORDER BY S.Produto, S.Fornecedor, S.FilialForn, S.Cliente, S.FilialCli ", _
                                                    sProduto, sProdTipo, sProdDesc, sProdUM, lFornecedor, iFilialForn, lCliente, iFilialCli, dSaldoConserto, dSaldoConsig, dSaldoDemo, dSaldoOutros, dSaldoBenef, objRelEstTercSel.lNumIntRel, objRelEstTercSel.iFilialEmpresa, iAno, objRelEstTercSel.lCodTerc, objRelEstTercSel.lCodTerc, objRelEstTercSel.iFilialTerc, objRelEstTercSel.iFilialTerc)
    ElseIf objRelEstTercSel.iTipoTerc = TIPO_TERC_FORNECEDOR Then
        lErro = Comando_Executar(alComando(3), "SELECT S.Produto, T.Sigla, P.Descricao, P.SiglaUMEstoque, S.Fornecedor, S.FilialForn, S.Cliente, S.FilialCli, " & Replace(sMacroQtd, "XXX", "Conserto") & ", " & Replace(sMacroQtd, "XXX", "Consig") & ", " & Replace(sMacroQtd, "XXX", "Demo") & ", " & Replace(sMacroQtd, "XXX", "Outros") & ", " & Replace(sMacroQtd, "XXX", "Benef") & " FROM SldMesEst" & sTabela & "Terc As S, RelEstTercProd As X, Produtos AS P, TiposdeProduto AS T WHERE X.NumIntRel = ? AND X.Produto = S.Produto AND P.Codigo = S.Produto AND T.TipoDeProduto = P.Tipo AND S.FilialEmpresa = ? AND S.Ano = ? AND S.Fornecedor <> 0  AND (S.Fornecedor = ? OR ? = 0) AND (S.FilialForn = ? OR ? = 0) ORDER BY S.Produto, S.Fornecedor, S.FilialForn, S.Cliente, S.FilialCli ", _
                                                    sProduto, sProdTipo, sProdDesc, sProdUM, lFornecedor, iFilialForn, lCliente, iFilialCli, dSaldoConserto, dSaldoConsig, dSaldoDemo, dSaldoOutros, dSaldoBenef, objRelEstTercSel.lNumIntRel, objRelEstTercSel.iFilialEmpresa, iAno, objRelEstTercSel.lCodTerc, objRelEstTercSel.lCodTerc, objRelEstTercSel.iFilialTerc, objRelEstTercSel.iFilialTerc)
    ElseIf objRelEstTercSel.iTipoTerc = 3 Then
        lErro = Comando_Executar(alComando(3), "SELECT S.Produto, T.Sigla, P.Descricao, P.SiglaUMEstoque, S.Fornecedor, S.FilialForn, S.Cliente, S.FilialCli, " & Replace(sMacroQtd, "XXX", "Conserto") & ", " & Replace(sMacroQtd, "XXX", "Consig") & ", " & Replace(sMacroQtd, "XXX", "Demo") & ", " & Replace(sMacroQtd, "XXX", "Outros") & ", " & Replace(sMacroQtd, "XXX", "Benef") & " FROM SldMesEst" & sTabela & "Terc As S, RelEstTercProd As X, Produtos AS P, TiposdeProduto AS T WHERE X.NumIntRel = ? AND X.Produto = S.Produto AND P.Codigo = S.Produto AND T.TipoDeProduto = P.Tipo AND S.FilialEmpresa = ? AND S.Ano = ? AND S.Cliente = 0 AND S.Fornecedor = 0  ORDER BY S.Produto ", _
                                                    sProduto, sProdTipo, sProdDesc, sProdUM, lFornecedor, iFilialForn, lCliente, iFilialCli, dSaldoConserto, dSaldoConsig, dSaldoDemo, dSaldoOutros, dSaldoBenef, objRelEstTercSel.lNumIntRel, objRelEstTercSel.iFilialEmpresa, iAno)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 209727

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209728

    lSeq = 0
    Do While lErro <> AD_SQL_SEM_DADOS
    
        lErro = Comando_Executar(alComando(4), "SELECT " & Replace(sMacroQtdDia, "XXX", "Conserto") & ", " & Replace(sMacroQtdDia, "XXX", "Consig") & ", " & Replace(sMacroQtdDia, "XXX", "Demo") & ", " & Replace(sMacroQtdDia, "XXX", "Outros") & ", " & Replace(sMacroQtdDia, "XXX", "Benef") & " FROM SldDiaEstTerc WHERE Produto = ? AND FilialEmpresa = ? AND Data BETWEEN ? AND ? AND Fornecedor = ? AND FilialForn = ? AND Cliente = ? AND FilialCli = ?", dSaldoConsertoDia, dSaldoConsigDia, dSaldoDemoDia, dSaldoOutrosDia, dSaldoBenefDia, sProduto, objRelEstTercSel.iFilialEmpresa, dtDataIniMes, objRelEstTercSel.dtDataDe, lFornecedor, iFilialForn, lCliente, iFilialCli)
        If lErro <> AD_SQL_SUCESSO Then gError 209729
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209730
        
        Call Mascara_RetornaProdutoTela(sProduto, sProdutoMask)
        
        Set objItem = New ClassRelSldEstTerc
        objItem.dQtdeBenef = dSaldoBenef + dSaldoBenefDia
        objItem.dQtdeConserto = dSaldoConserto + dSaldoConsertoDia
        objItem.dQtdeConsig = dSaldoConsig + dSaldoConsigDia
        objItem.dQtdeDemo = dSaldoDemo + dSaldoDemoDia
        objItem.dQtdeOutras = dSaldoOutros + dSaldoOutrosDia
        objItem.dQtdeTotal = objItem.dQtdeBenef + objItem.dQtdeConserto + objItem.dQtdeConsig + objItem.dQtdeDemo + objItem.dQtdeOutras
        
        If Abs(objItem.dQtdeTotal) > QTDE_ESTOQUE_DELTA Then
        
            lSeq = lSeq + 1
            objItem.lSeq = lSeq
            If lCliente <> 0 Then
          
                objItem.iTipoTerc = TIPO_TERC_CLIENTE
                objItem.sNomeTipoTerc = "Cliente"
                objItem.lCodTerc = lCliente
                objItem.iFilialTerc = iFilialCli
                  
                bAchou = False
                iIndice = 0
                For Each objFilCli In colFilCli
                    iIndice = iIndice + 1
                    If objFilCli.lCodCliente = objItem.lCodTerc And objFilCli.iCodFilial = objItem.iFilialTerc Then
                        Set objCli = colCli.Item(iIndice)
                        Exit For
                    End If
                Next
                If Not bAchou Then
                  
                    Set objCli = New ClassCliente
                    Set objFilCli = New ClassFilialCliente
                      
                    objCli.lCodigo = objItem.lCodTerc
                    objFilCli.lCodCliente = objItem.lCodTerc
                    objFilCli.iCodFilial = objItem.iFilialTerc
                      
                    lErro = CF("Cliente_Le", objCli, alComando(5), alComando(6))
                    If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM
                      
                    lErro = CF("FilialCliente_Le", objFilCli, alComando(7))
                    If lErro <> SUCESSO And lErro <> 12567 Then gError ERRO_SEM_MENSAGEM
                      
                    colCli.Add objCli
                    colFilCli.Add objFilCli
                      
                End If
                  
                objItem.sNomeFilialTerc = CStr(objFilCli.iCodFilial) & SEPARADOR & objFilCli.sNome
                objItem.sNomeTerceiro = CStr(objCli.lCodigo) & SEPARADOR & objCli.sNomeReduzido
                  
            ElseIf lFornecedor <> 0 Then
              
                objItem.iTipoTerc = TIPO_TERC_FORNECEDOR
                objItem.sNomeTipoTerc = "Fornecedor"
                objItem.lCodTerc = lFornecedor
                objItem.iFilialTerc = iFilialForn
                  
                bAchou = False
                iIndice = 0
                For Each objFilForn In colFilForn
                    iIndice = iIndice + 1
                    If objFilForn.lCodFornecedor = objItem.lCodTerc And objFilForn.iCodFilial = objItem.iFilialTerc Then
                        Set objForn = colForn.Item(iIndice)
                        Exit For
                    End If
                Next
                If Not bAchou Then
                  
                    Set objForn = New ClassFornecedor
                    Set objFilForn = New ClassFilialFornecedor
                     
                    objForn.lCodigo = objItem.lCodTerc
                    objFilForn.lCodFornecedor = objItem.lCodTerc
                    objFilForn.iCodFilial = objItem.iFilialTerc
                      
                    lErro = CF("Fornecedor_Le", objForn)
                    If lErro <> SUCESSO And lErro <> 12729 Then gError ERRO_SEM_MENSAGEM
             
                    lErro = CF("FilialFornecedor_Le", objFilForn)
                    If lErro <> SUCESSO And lErro <> 12929 Then gError ERRO_SEM_MENSAGEM
                      
                    colForn.Add objForn
                    colFilForn.Add objFilForn
                    
                End If
                
                objItem.sNomeFilialTerc = CStr(objFilForn.iCodFilial) & SEPARADOR & objFilForn.sNome
                objItem.sNomeTerceiro = CStr(objForn.lCodigo) & SEPARADOR & objForn.sNomeReduzido
                
            Else
                objItem.iTipoTerc = 0
                objItem.sNomeTipoTerc = "Indefinido"
                objItem.lCodTerc = 0
                objItem.iFilialTerc = 0
                objItem.sNomeFilialTerc = ""
                objItem.sNomeTerceiro = ""
            End If
              
            objItem.lNumIntRel = objRelEstTercSel.lNumIntRel
            objItem.sFaixaCat = objRelEstTercSel.sFaixaCat
            objItem.sFaixaData = objRelEstTercSel.sFaixaData
            objItem.sFaixaProd = objRelEstTercSel.sFaixaProd
            objItem.sFaixaTerc = objRelEstTercSel.sFaixaTerc
            objItem.sTipoEscaninho = objRelEstTercSel.sTipoEscaninho
              
            objItem.sProduto = sProduto
            objItem.sProdutoMask = sProdutoMask & SEPARADOR & sProdDesc
            objItem.sTipoProd = sProdTipo
            objItem.sUM = sProdUM
            
            lErro = Comando_Executar(alComando(8), "INSERT INTO RelSldEstTec (NumIntRel,Seq,TipoEscaninho,FaixaTerc,FaixaProd,FaixaCat,FaixaData,TipoTerc,NomeTipoTerc,CodTerc,NomeTerceiro,FilialTerc,NomeFilialTerc,Produto,ProdutoMask,TipoProd,UM,QtdeConserto,QtdeConsig,QtdeDemo,QtdeOutras,QtdeBenef,QtdeTotal) " & _
                                                      "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objItem.lNumIntRel, objItem.lSeq, objItem.sTipoEscaninho, objItem.sFaixaTerc, objItem.sFaixaProd, objItem.sFaixaCat, objItem.sFaixaData, objItem.iTipoTerc, objItem.sNomeTipoTerc, objItem.lCodTerc, objItem.sNomeTerceiro, objItem.iFilialTerc, objItem.sNomeFilialTerc, objItem.sProduto, objItem.sProdutoMask, objItem.sTipoProd, objItem.sUM, objItem.dQtdeConserto, objItem.dQtdeConsig, objItem.dQtdeDemo, objItem.dQtdeOutras, objItem.dQtdeBenef, objItem.dQtdeTotal)
            If lErro <> AD_SQL_SUCESSO Then gError 209731
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209732
    
    Loop
    
    lErro = Comando_Executar(alComando(9), "DELETE FROM RelEstTercProd WHERE NumIntRel = ? ", objRelEstTercSel.lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 209733
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 209734
    
    RelSldEstTerc_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelSldEstTerc_Prepara:
    
    RelSldEstTerc_Prepara = gErr
    
    Select Case gErr
        
        Case 209725
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 209726
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 209727, 209728, 209732
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESEST" & sTabela & "TERC", gErr)
        
        Case 209729, 209730
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAESTTERC", gErr)

        Case 209731
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELSLDESTERC", gErr)

        Case 209733
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELESTERCPROD", gErr)

        Case 209734
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 209735)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function
    
End Function

Private Function RelEstTerc_Prepara(ByVal objRelEstTercSel As ClassRelEstTercSel, ByVal iTipoRel As Integer) As Long

Dim lErro As Long
Dim lNumIntRel As Long
Dim sProdDeMask As String, sProdAteMask As String

On Error GoTo Erro_RelEstTerc_Prepara

    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "MATConfig", "NUMINTREL_RELESTTERC", lNumIntRel)
    If lErro <> SUCESSO Then gError 124239
    
    objRelEstTercSel.lNumIntRel = lNumIntRel
    
    If objRelEstTercSel.iTipo = 0 Then
        objRelEstTercSel.sTipoEscaninho = "Nosso em Terceiros"
    Else
        objRelEstTercSel.sTipoEscaninho = "De Terceiros Conosco"
    End If
    
    If objRelEstTercSel.iTipoTerc = 0 Then
        objRelEstTercSel.sFaixaTerc = "Terceiro: Todos"
    ElseIf objRelEstTercSel.iTipoTerc = TIPO_TERC_CLIENTE Then
        If objRelEstTercSel.lCodTerc = 0 Then
            objRelEstTercSel.sFaixaTerc = "Terceiro: Somente Clientes"
        Else
            objRelEstTercSel.sFaixaTerc = "Cliente: " & CStr(objRelEstTercSel.lCodTerc)
            If objRelEstTercSel.iFilialTerc <> 0 Then objRelEstTercSel.sFaixaTerc = objRelEstTercSel.sFaixaTerc & " Filial: " & CStr(objRelEstTercSel.iFilialTerc)
        End If
    ElseIf objRelEstTercSel.iTipoTerc = TIPO_TERC_FORNECEDOR Then
        If objRelEstTercSel.lCodTerc = 0 Then
            objRelEstTercSel.sFaixaTerc = "Terceiro: Somente Fornecedores"
        Else
            objRelEstTercSel.sFaixaTerc = "Fornecedor: " & CStr(objRelEstTercSel.lCodTerc)
            If objRelEstTercSel.iFilialTerc <> 0 Then objRelEstTercSel.sFaixaTerc = objRelEstTercSel.sFaixaTerc & " Filial: " & CStr(objRelEstTercSel.iFilialTerc)
        End If
    ElseIf objRelEstTercSel.iTipoTerc = 3 Then
        objRelEstTercSel.sFaixaTerc = "Terceiro: Somente não identificados"
    End If
    
    If iTipoRel = 0 Then
        objRelEstTercSel.sFaixaData = "Data: " & Format(objRelEstTercSel.dtDataDe, "dd/mm/yyyy")
    Else
        If objRelEstTercSel.dtDataDe <> DATA_NULA Then
            objRelEstTercSel.sFaixaData = "Período: " & Format(objRelEstTercSel.dtDataDe, "dd/mm/yyyy") & " Até "
        Else
            objRelEstTercSel.sFaixaData = "Período: Início Até "
        End If
        If objRelEstTercSel.dtDataAte <> DATA_NULA Then
            objRelEstTercSel.sFaixaData = objRelEstTercSel.sFaixaData & Format(objRelEstTercSel.dtDataAte, "dd/mm/yyyy")
        Else
            objRelEstTercSel.sFaixaData = objRelEstTercSel.sFaixaData & "Final"
        End If
    End If
    
    If objRelEstTercSel.sProdutoDe <> "" Then
        Call Mascara_RetornaProdutoTela(objRelEstTercSel.sProdutoDe, sProdDeMask)
        objRelEstTercSel.sFaixaProd = "Produto: " & sProdDeMask & " Até "
    Else
        objRelEstTercSel.sFaixaProd = "Produto: Início Até "
    End If
    If objRelEstTercSel.sProdutoAte <> "" Then
        Call Mascara_RetornaProdutoTela(objRelEstTercSel.sProdutoAte, sProdAteMask)
        objRelEstTercSel.sFaixaProd = objRelEstTercSel.sFaixaProd & sProdAteMask
    Else
        objRelEstTercSel.sFaixaProd = objRelEstTercSel.sFaixaProd & "Final"
    End If
    
    If objRelEstTercSel.sCategoria <> "" Then
        objRelEstTercSel.sFaixaCat = "Categoria: " & objRelEstTercSel.sCategoria
        If objRelEstTercSel.sCategoriaItemDe <> "" Then
            objRelEstTercSel.sFaixaCat = objRelEstTercSel.sFaixaCat & " Item: " & objRelEstTercSel.sCategoriaItemDe & " Até "
        Else
            objRelEstTercSel.sFaixaCat = objRelEstTercSel.sFaixaCat & " Item: Início Até "
        End If
        If objRelEstTercSel.sCategoriaItemAte <> "" Then
            objRelEstTercSel.sFaixaCat = objRelEstTercSel.sFaixaCat & objRelEstTercSel.sCategoriaItemAte
        Else
            objRelEstTercSel.sFaixaCat = objRelEstTercSel.sFaixaCat & "Final"
        End If
    Else
        objRelEstTercSel.sFaixaCat = "Categoria: Todas"
    End If
    
    RelEstTerc_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelEstTerc_Prepara:
    
    RelEstTerc_Prepara = gErr
    
    Select Case gErr
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 209724)
            
    End Select

    Exit Function
    
End Function

Private Function RelEstTerc_Prepara_Produtos(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objRelEstTercSel As ClassRelEstTercSel) As Long
'Gravar os produtos que serão considerados em uma tabela temporária auxiliar para
'facilitar os demais selects
Dim lErro As Long
Dim sSQL As String, sSQLSub As String
Dim vsProd As Variant, avValor(1 To 5) As Variant

On Error GoTo Erro_RelEstTerc_Prepara_Produtos

    sSQL = "SELECT P.Codigo FROM Produtos AS P WHERE P.Gerencial = 0 "
    
    If Len(Trim(objRelEstTercSel.sProdutoDe)) <> 0 Then
        sSQL = sSQL & " AND P.Codigo >= ? "
    End If
    If Len(Trim(objRelEstTercSel.sProdutoAte)) <> 0 Then
        sSQL = sSQL & " AND P.Codigo <= ? "
    End If
    
    If Len(Trim(objRelEstTercSel.sCategoria)) > 0 Then
        If Len(Trim(objRelEstTercSel.sCategoriaItemDe)) > 0 Then
            sSQLSub = sSQLSub & "AND C.Item >= ? "
        End If
        If Len(Trim(objRelEstTercSel.sCategoriaItemAte)) > 0 Then
            sSQLSub = sSQLSub & "AND C.Item <= ? "
        End If
        sSQL = sSQL & " AND EXISTS ( SELECT C.Produto FROM ProdutoCategoria AS C WHERE C.Produto = P.Codigo AND C.Categoria = ? " & sSQLSub & ") "
    End If
        
    lErro = Comando_PrepararInt(lComando1, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 209712

    vsProd = CStr(String(STRING_PRODUTO, 0))
    lErro = Comando_BindVarInt(lComando1, vsProd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 209713
        
    If Len(Trim(objRelEstTercSel.sProdutoDe)) <> 0 Then
        avValor(1) = objRelEstTercSel.sProdutoDe
        lErro = Comando_BindVarInt(lComando1, avValor(1))
        If lErro <> AD_SQL_SUCESSO Then gError 209714
    End If
    If Len(Trim(objRelEstTercSel.sProdutoAte)) <> 0 Then
        avValor(2) = objRelEstTercSel.sProdutoAte
        lErro = Comando_BindVarInt(lComando1, avValor(2))
        If lErro <> AD_SQL_SUCESSO Then gError 209715
    End If
    If Len(Trim(objRelEstTercSel.sCategoria)) <> 0 Then
        avValor(3) = objRelEstTercSel.sCategoria
        lErro = Comando_BindVarInt(lComando1, avValor(3))
        If lErro <> AD_SQL_SUCESSO Then gError 209716
    End If
    If Len(Trim(objRelEstTercSel.sCategoriaItemDe)) <> 0 Then
        avValor(4) = objRelEstTercSel.sCategoriaItemDe
        lErro = Comando_BindVarInt(lComando1, avValor(4))
        If lErro <> AD_SQL_SUCESSO Then gError 209717
    End If
    If Len(Trim(objRelEstTercSel.sCategoriaItemAte)) <> 0 Then
        avValor(5) = objRelEstTercSel.sCategoriaItemAte
        lErro = Comando_BindVarInt(lComando1, avValor(5))
        If lErro <> AD_SQL_SUCESSO Then gError 209718
    End If
    
    lErro = Comando_ExecutarInt(lComando1)
    If (lErro <> AD_SQL_SUCESSO) Then gError 209719
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209720

    'Enquanto existirem dados de acordo com o filtro passado
    Do While lErro <> AD_SQL_SEM_DADOS

        lErro = Comando_Executar(lComando2, "INSERT INTO RelEstTercProd (NumIntRel, Produto) VALUES(?,?)", objRelEstTercSel.lNumIntRel, vsProd)
        If lErro <> AD_SQL_SUCESSO Then gError 209722

        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209721

    Loop
    
    RelEstTerc_Prepara_Produtos = SUCESSO
    
    Exit Function
    
Erro_RelEstTerc_Prepara_Produtos:
    
    RelEstTerc_Prepara_Produtos = gErr
    
    Select Case gErr
        
        Case 209712 To 209721
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
        
        Case 209722
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_RELESTTERCPROD", gErr, objRelEstTercSel.lNumIntRel, vsProd)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 209723)
            
    End Select

    Exit Function
    
End Function

Function Rotina_FechamentoAno_ReprocProd(ByVal iAno As Integer, ByVal iFilialEmpresa As Integer, ByVal sProduto As String) As Long
'Rotina que transfere os saldos de um ano para outro para fins de reprocessamento para um produto especifico
'iAno é o ano que está terminando.

Dim lErro As Long
Dim objSldMesEst As New ClassSldMesEst

On Error GoTo Erro_Rotina_FechamentoAno_ReprocProd

    'preenche o objeto
    objSldMesEst.iAno = iAno
    objSldMesEst.iFilialEmpresa = iFilialEmpresa
    objSldMesEst.sProduto = sProduto
    
    'atualiza valor inicial, quantidade da tabela SldMesEst
    lErro = SldMesEst_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83736
                            
    'atualiza valores e quantidades iniciais da tabela SldMesEst1
    lErro = SldMesEst1_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83737
                            
    'atualiza valores e quantidades iniciais da tabela SldMesEst2
    lErro = SldMesEst2_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83738

    'atualiza valores e quantidades iniciais da tabela SldMesEst1
    lErro = SldMesEst1Terc_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83737
                            
    'atualiza valores e quantidades iniciais da tabela SldMesEst2
    lErro = SldMesEst2Terc_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83738
                            
    'atualiza valor inicial, quantidade da tabela SldMesEstAlm
    lErro = SldMesEstAlm_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83739
                            
    'atualiza valor inicial, quantidade da tabela SldMesEstAlm1
    lErro = SldMesEstAlm1_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83740
                            
    'atualiza valor inicial, quantidade da tabela SldMesEstAlm2
    lErro = SldMesEstAlm2_Atualiza_Ano_Reproc(objSldMesEst)
    If lErro <> SUCESSO Then gError 83741
                            
    Rotina_FechamentoAno_ReprocProd = SUCESSO

    Exit Function

Erro_Rotina_FechamentoAno_ReprocProd:

    Rotina_FechamentoAno_ReprocProd = gErr

    Select Case gErr

        Case 83736, 83737, 83738, 83739, 83740, 83741

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151873)

    End Select

    Exit Function

End Function

Public Function RelProdConsumo_Prepara(ByVal objRelProdConsumo As ClassRelProdConsumo) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer, vValor As Variant
Dim sSQL As String, lNumIntRel As Long, sSQLSub As String
Dim sProdDeMask As String, sProdAteMask As String, sProdKitMask As String
Dim vsProd As Variant, vsDescProd As Variant, avValor(1 To 100) As Variant
Dim sSQLSld As String, vdQuantCons As Variant, vdValorCons As Variant, vsUM As Variant
Dim vdtDataDe As Variant, vdtDataAte As Variant, sProdMask As String, viFilialEmpresa As Variant

On Error GoTo Erro_RelProdConsumo_Prepara
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211390

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211391
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "MATConfig", "NUMINTREL_RELPRODCONS", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objRelProdConsumo.lNumIntRel = lNumIntRel

    If objRelProdConsumo.dtDataDe <> DATA_NULA Then
        objRelProdConsumo.sFaixaData = "Período: " & Format(objRelProdConsumo.dtDataDe, "dd/mm/yyyy") & " Até "
    Else
        objRelProdConsumo.sFaixaData = "Período: Início Até "
    End If
    If objRelProdConsumo.dtDataAte <> DATA_NULA Then
        objRelProdConsumo.sFaixaData = objRelProdConsumo.sFaixaData & Format(objRelProdConsumo.dtDataAte, "dd/mm/yyyy")
    Else
        objRelProdConsumo.sFaixaData = objRelProdConsumo.sFaixaData & "Final"
    End If
    
    If objRelProdConsumo.sProdDe <> "" Then
        Call Mascara_RetornaProdutoTela(objRelProdConsumo.sProdDe, sProdDeMask)
        objRelProdConsumo.sFaixaProd = "Produto: " & sProdDeMask & " Até "
    Else
        objRelProdConsumo.sFaixaProd = "Produto: Início Até "
    End If
    If objRelProdConsumo.sProdAte <> "" Then
        Call Mascara_RetornaProdutoTela(objRelProdConsumo.sProdAte, sProdAteMask)
        objRelProdConsumo.sFaixaProd = objRelProdConsumo.sFaixaProd & sProdAteMask
    Else
        objRelProdConsumo.sFaixaProd = objRelProdConsumo.sFaixaProd & "Final"
    End If
    
    If objRelProdConsumo.sCategoria <> "" Then
        objRelProdConsumo.sFaixaCat = "Categoria: " & objRelProdConsumo.sCategoria
        If objRelProdConsumo.sCatItemDe <> "" Then
            objRelProdConsumo.sFaixaCat = objRelProdConsumo.sFaixaCat & " Item: " & objRelProdConsumo.sCatItemDe & " Até "
        Else
            objRelProdConsumo.sFaixaCat = objRelProdConsumo.sFaixaCat & " Item: Início Até "
        End If
        If objRelProdConsumo.sCatItemAte <> "" Then
            objRelProdConsumo.sFaixaCat = objRelProdConsumo.sFaixaCat & objRelProdConsumo.sCatItemAte
        Else
            objRelProdConsumo.sFaixaCat = objRelProdConsumo.sFaixaCat & "Final"
        End If
    Else
        objRelProdConsumo.sFaixaCat = "Categoria: Todas"
    End If

    If objRelProdConsumo.sProdKit <> "" Then
        Call Mascara_RetornaProdutoTela(objRelProdConsumo.sProdKit, sProdKitMask)
        objRelProdConsumo.sFaixaKit = "Insumo do Produto: " & sProdKitMask & " Versão: " & objRelProdConsumo.sVersaoKit
    Else
        objRelProdConsumo.sFaixaKit = ""
    End If
    
    objRelProdConsumo.sFaixaNat = "Naturezas: "
    For Each vValor In objRelProdConsumo.colNaturezas
        objRelProdConsumo.sFaixaNat = objRelProdConsumo.sFaixaNat & vValor & "; "
    Next
    
    'Lê os produtos
    
    sSQLSld = "SELECT SUM(S.QuantCons), SUM(S.ValorCons) FROM SldDiaEst AS S WHERE S.Produto = ? AND S.FilialEmpresa = ? "

    If objRelProdConsumo.dtDataDe <> DATA_NULA Then
        sSQLSld = sSQLSld & " AND S.Data >= ? "
    End If
    
    If objRelProdConsumo.dtDataAte <> DATA_NULA Then
        sSQLSld = sSQLSld & " AND S.Data <= ? "
    End If

    sSQL = "SELECT P.Codigo, P.Descricao, P.SiglaUMEstoque FROM Produtos AS P WHERE P.Gerencial = 0 AND Natureza IN ("
    
    sSQLSub = ""
    For Each vValor In objRelProdConsumo.colNaturezas
        sSQLSub = sSQLSub & IIf(Len(Trim(sSQLSub)) <> 0, ",", "") & "?"
    Next
    sSQL = sSQL & sSQLSub & ") "
    
    If Len(Trim(objRelProdConsumo.sProdDe)) <> 0 Then
        sSQL = sSQL & " AND P.Codigo >= ? "
    End If
    If Len(Trim(objRelProdConsumo.sProdAte)) <> 0 Then
        sSQL = sSQL & " AND P.Codigo <= ? "
    End If
    
    sSQLSub = ""
    If Len(Trim(objRelProdConsumo.sCategoria)) > 0 Then
        If Len(Trim(objRelProdConsumo.sCatItemDe)) > 0 Then
            sSQLSub = sSQLSub & "AND C.Item >= ? "
        End If
        If Len(Trim(objRelProdConsumo.sCatItemAte)) > 0 Then
            sSQLSub = sSQLSub & "AND C.Item <= ? "
        End If
        sSQL = sSQL & " AND EXISTS ( SELECT C.Produto FROM ProdutoCategoria AS C WHERE C.Produto = P.Codigo AND C.Categoria = ? " & sSQLSub & ") "
    End If
    
    If Len(Trim(objRelProdConsumo.sProdKit)) > 0 Then
        sSQL = sSQL & " AND P.Codigo IN (SELECT Produto FROM ProdutoKit AS K WHERE K.ProdutoRaiz = ? AND K.Versao = ?) "
    End If
            
    lErro = Comando_PrepararInt(alComando(1), sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 211392

    vsProd = CStr(String(STRING_PRODUTO, 0))
    lErro = Comando_BindVarInt(alComando(1), vsProd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 211393
        
    vsDescProd = CStr(String(STRING_MAXIMO, 0))
    lErro = Comando_BindVarInt(alComando(1), vsDescProd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 211394
    
    vsUM = CStr(String(STRING_UM_SIGLA, 0))
    lErro = Comando_BindVarInt(alComando(1), vsUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError 211395
    
    iIndice = 0
    For Each vValor In objRelProdConsumo.colNaturezas
        iIndice = iIndice + 1
        avValor(iIndice) = vValor
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211396
    Next
    If Len(Trim(objRelProdConsumo.sProdDe)) <> 0 Then
        iIndice = iIndice + 1
        avValor(iIndice) = objRelProdConsumo.sProdDe
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211397
    End If
    If Len(Trim(objRelProdConsumo.sProdAte)) <> 0 Then
        iIndice = iIndice + 1
        avValor(iIndice) = objRelProdConsumo.sProdAte
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211398
    End If
    If Len(Trim(objRelProdConsumo.sCategoria)) <> 0 Then
        iIndice = iIndice + 1
        avValor(iIndice) = objRelProdConsumo.sCategoria
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211399
    End If
    If Len(Trim(objRelProdConsumo.sCatItemDe)) <> 0 Then
        iIndice = iIndice + 1
        avValor(iIndice) = objRelProdConsumo.sCatItemDe
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211400
    End If
    If Len(Trim(objRelProdConsumo.sCatItemAte)) <> 0 Then
        iIndice = iIndice + 1
        avValor(iIndice) = objRelProdConsumo.sCatItemAte
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211401
    End If
    If Len(Trim(objRelProdConsumo.sProdKit)) <> 0 Then
        iIndice = iIndice + 1
        avValor(iIndice) = objRelProdConsumo.sProdKit
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211402
    
        iIndice = iIndice + 1
        avValor(iIndice) = objRelProdConsumo.sVersaoKit
        lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
        If lErro <> AD_SQL_SUCESSO Then gError 211403
    End If
    
    lErro = Comando_ExecutarInt(alComando(1))
    If (lErro <> AD_SQL_SUCESSO) Then gError 211404
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211405

    'Enquanto existirem dados de acordo com o filtro passado
    Do While lErro <> AD_SQL_SEM_DADOS
    
        lErro = Comando_PrepararInt(alComando(2), sSQLSld)
        If lErro <> AD_SQL_SUCESSO Then gError 211406
    
        vdQuantCons = CDbl(0)
        lErro = Comando_BindVarInt(alComando(2), vdQuantCons)
        If lErro <> AD_SQL_SUCESSO Then gError 211407
            
        vdValorCons = CDbl(0)
        lErro = Comando_BindVarInt(alComando(2), vdValorCons)
        If lErro <> AD_SQL_SUCESSO Then gError 211408
        
        lErro = Comando_BindVarInt(alComando(2), vsProd)
        If lErro <> AD_SQL_SUCESSO Then gError 211409
    
        viFilialEmpresa = giFilialEmpresa
        lErro = Comando_BindVarInt(alComando(2), viFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 211410
    
        If objRelProdConsumo.dtDataDe <> DATA_NULA Then
            vdtDataDe = objRelProdConsumo.dtDataDe
            lErro = Comando_BindVarInt(alComando(2), vdtDataDe)
            If lErro <> AD_SQL_SUCESSO Then gError 211411
        End If
        
        If objRelProdConsumo.dtDataAte <> DATA_NULA Then
            vdtDataAte = objRelProdConsumo.dtDataAte
            lErro = Comando_BindVarInt(alComando(2), vdtDataAte)
            If lErro <> AD_SQL_SUCESSO Then gError 211412
        End If

        lErro = Comando_ExecutarInt(alComando(2))
        If (lErro <> AD_SQL_SUCESSO) Then gError 211413
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211414
        
        Call Mascara_RetornaProdutoTela(vsProd, sProdMask)

        lErro = Comando_Executar(alComando(3), "INSERT INTO RelProdConsumo (NumIntRel, Produto, ProdutoMask, UM, Descricao, Quantidade, Valor, FaixaProd, FaixaCat, FaixaData, FaixaKit, FaixaNat) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)", objRelProdConsumo.lNumIntRel, vsProd, sProdMask, vsUM, vsDescProd, vdQuantCons, vdValorCons, objRelProdConsumo.sFaixaProd, objRelProdConsumo.sFaixaCat, objRelProdConsumo.sFaixaData, objRelProdConsumo.sFaixaKit, objRelProdConsumo.sFaixaNat)
        If lErro <> AD_SQL_SUCESSO Then gError 211415

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211416

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211417
    
    RelProdConsumo_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelProdConsumo_Prepara:
    
    RelProdConsumo_Prepara = gErr
    
    Select Case gErr
        
        Case 211390
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 211391
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 211392 To 211405, 211416
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
        
        Case 211406 To 211414
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQLSld)
        
        Case 211415
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_RELPRODCONSUMO", gErr)
        
        Case 211417
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211418)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function
    
End Function

Private Function Produto_Valida_Alteracao_UM(ByVal objProduto As ClassProduto) As Long
'Função chamada para verificar se a troca de classe de UM não deixará registros apontando para UMs que não existem

Dim lErro As Long
Dim alComando(0 To 22) As Long
Dim iIndice As Integer
Dim lCodRC As Long, iFilialEmpRC As Integer, sUMRC As String
Dim lCodOV As Long, iFilialEmpOV As Integer, sUMOV As String
Dim lCodOSRV As Long, iFilialEmpOSRV As Integer, sUMOSRV As String
Dim sCodOP As String, iFilialEmpOP As Integer, sUMOP As String
Dim sCodOS As String, iFilialEmpOS As Integer, sUMOS As String
Dim lCodPC As Long, iFilialEmpPC As Integer, sUMPC As String
Dim lCodPV As Long, iFilialEmpPV As Integer, sUMPV As String
Dim lNumNF As Long, iFilialEmpNF As Integer, sUMNF As String
Dim lCodRCM As Long, iFilialEmpRCM As Integer, sUMRCM As String
Dim lCodSolSRV As Long, iFilialEmpSolSRV As Integer, sUMSolSRV As String
Dim sProdKitV As String, sUMKitV As String
Dim sProdKitVC As String, sUMKitVC As String
Dim sProdKitP As String, sVersaoKitP As String, sUMKitP As String
Dim lCodME As Long, iFilialEmpME As Integer, sUMME As String
Dim sCodPPRJ As String, iFilialEmpPPRJ As Integer, sUMPPRJ As String
Dim sCodCPRJ As String, iFilialEmpCPRJ As Integer, sUMCPRJ As String
Dim sCodPRJ As String, sCodEPRJ As String, iFilialEmpPRJ As Integer, sUMPRJ As String
Dim lCodAPRJ As Long, iFilialEmpAPRJ As Integer, sUMAPRJ As String
Dim sNumDI As String, iFilialEmpDI As Integer, sUMDI As String
Dim sCodCTRT As String, iFilialEmpCTRT As Integer, sUMCTRT As String
Dim lNumCF As Long, iFilialEmpCF As Integer, sUMCF As String
Dim lCodPSRV As Long, iFilialEmpPSRV As Integer, sUMPSRV As String
Dim sDoc As String, sUM As String

On Error GoTo Erro_Produto_Valida_Alteracao_UM
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 213397
    Next
    
    '0 - REQUISIÇÃO DE COMPRA
    sUMRC = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(0), "SELECT D.Codigo, D.FilialEmpresa, I.UM FROM ItensReqCompraN AS I, RequisicaoCompraN As D WHERE D.NumIntDoc = I.ReqCompra AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodRC, iFilialEmpRC, sUMRC, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213398
        
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213399
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A requisição de compra " & CStr(lCodRC) & " da filial " & CStr(iFilialEmpRC)
        sUM = sUMRC
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213400 'Não pode existir registro que ficaria capenga
    
    '1 - ORCAMENTO DE VENDA
    sUMOV = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(1), "SELECT D.Codigo, D.FilialEmpresa, I.UnidadeMed FROM OrcamentoVenda AS D, ItensOrcamentoVenda As I WHERE D.Codigo = I.CodOrcamento AND D.FilialEmpresa = I.FilialEmpresa AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodOV, iFilialEmpOV, sUMOV, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213401
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213402
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O orçamento de venda " & CStr(lCodOV) & " da filial " & CStr(iFilialEmpOV)
        sUM = sUMOV
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213403 'Não pode existir registro que ficaria capenga
          
    '2 - ORCAMENTO DE SERVICO
    sUMOSRV = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(2), "SELECT D.Codigo, D.FilialEmpresa, I.UnidadeMed FROM OrcamentoSRV AS D, ItensOrcamentoSRV As I WHERE D.Codigo = I.CodOrcamento AND D.FilialEmpresa = I.FilialEmpresa AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodOSRV, iFilialEmpOSRV, sUMOSRV, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213404
        
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213405
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O orçamento de serviço " & CStr(lCodOSRV) & " da filial " & CStr(iFilialEmpOSRV)
        sUM = sUMOSRV
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213406 'Não pode existir registro que ficaria capenga
    
    '3 - ORDEM DE PRODUCAO
    sCodOP = String(STRING_ORDEM_DE_PRODUCAO, 0)
    sUMOP = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(3), "SELECT D.Codigo, D.FilialEmpresa, I.SiglaUM FROM OrdensProducaoTodas AS D, ItensOPTodos As I WHERE D.Codigo = I.Codigo AND D.FilialEmpresa = I.FilialEmpresa AND I.Produto = ? AND I.SiglaUM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sCodOP, iFilialEmpOP, sUMOP, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213407
        
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213408

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A ordem de produção " & sCodOP & " da filial " & CStr(iFilialEmpOP)
        sUM = sUMOP
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213409 'Não pode existir registro que ficaria capenga
    
    '4 - ORDEM DE SERVICO
    sCodOS = String(STRING_ORDEM_DE_PRODUCAO, 0)
    sUMOS = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(4), "SELECT D.Codigo, D.FilialEmpresa, I.SiglaUM FROM OS AS D, ItemOS As I WHERE D.Codigo = I.Codigo AND D.FilialEmpresa = I.FilialEmpresa AND I.Servico = ? AND I.SiglaUM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sCodOS, iFilialEmpOS, sUMOS, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213410
        
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213411

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A ordem de serviço " & sCodOS & " da filial " & CStr(iFilialEmpOS)
        sUM = sUMOS
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213412 'Não pode existir registro que ficaria capenga
    
    '5 - PEDIDO DE COMPRA
    sUMPC = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(5), "SELECT D.Codigo, D.FilialEmpresa, I.UM FROM PedidoCompraN AS D, ItensPedCompraN As I WHERE D.NumIntDoc = I.PedCompra AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodPC, iFilialEmpPC, sUMPC, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213413
        
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213414
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O pedido de compra " & CStr(lCodPC) & " da filial " & CStr(iFilialEmpPC)
        sUM = sUMPC
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213415 'Não pode existir registro que ficaria capenga
    
    '6 - PEDIDO DE VENDA
    sUMPV = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(6), "SELECT D.Codigo, D.FilialEmpresa, I.UnidadeMed FROM PedVenTodos AS D, ItensPVTodos As I WHERE D.Codigo = I.CodPedido AND D.FilialEmpresa = I.FilialEmpresa AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodPV, iFilialEmpPV, sUMPV, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213416
        
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213417

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O pedido de venda " & CStr(lCodPV) & " da filial " & CStr(iFilialEmpPV)
        sUM = sUMPV
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213418 'Não pode existir registro que ficaria capenga
    
    '7 - NOTA FISCAL
    sUMNF = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(7), "SELECT D.NumNotaFiscal, D.FilialEmpresa, I.UnidadeMed FROM NFiscal AS D, ItensNFiscal As I WHERE D.NumIntDoc = I.NumIntNF AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lNumNF, iFilialEmpNF, sUMNF, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213419
        
    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213420

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A nota fiscal " & CStr(lNumNF) & " da filial " & CStr(iFilialEmpNF)
        sUM = sUMNF
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213421 'Não pode existir registro que ficaria capenga
    
    '8 - REQUISICAO COMPRA MODELO
    sUMRCM = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(8), "SELECT D.Codigo, D.FilialEmpresa, I.UM FROM ItensReqCompraN AS I, RequisicaoCompraN As D WHERE D.NumIntDoc = I.ReqCompra AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodRCM, iFilialEmpRCM, sUMRCM, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213422
        
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213423

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A requisição modelo " & CStr(lCodRCM) & " da filial " & CStr(iFilialEmpRCM)
        sUM = sUMRCM
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213424 'Não pode existir registro que ficaria capenga
    
    '9 - SOLICITACAO SERVICO
    sUMSolSRV = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(9), "SELECT D.Codigo, D.FilialEmpresa, I.UM FROM SolicitacaoSRV AS D, ItensSolicSRV As I WHERE D.NumIntDoc = I.NumIntSolicSRV AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodSolSRV, iFilialEmpSolSRV, sUMSolSRV, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213425
        
    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213426
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A solicitação de serviço " & CStr(lCodSolSRV) & " da filial " & CStr(iFilialEmpSolSRV)
        sUM = sUMSolSRV
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213427 'Não pode existir registro que ficaria capenga
    
    '10 - KIT DE VENDA
    sUMKitV = String(STRING_UM_SIGLA, 0)
    sProdKitV = String(STRING_PRODUTO, 0)
    
    lErro = Comando_Executar(alComando(10), "SELECT D.Produto, D.UM FROM KitVenda AS D WHERE D.Produto = ? AND D.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sProdKitV, sUMKitV, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213428
        
    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213429
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O kit de venda " & Trim(sProdKitV)
        sUM = sUMKitV
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213430 'Não pode existir registro que ficaria capenga
    
    '11 - COMPONENTES - KIT DE VENDA
    sUMKitVC = String(STRING_UM_SIGLA, 0)
    sProdKitVC = String(STRING_PRODUTO, 0)
    
    lErro = Comando_Executar(alComando(11), "SELECT D.Produto, I.UM FROM KitVenda AS D, ProdutoKitVenda As I WHERE D.Produto = I.ProdutoKit AND I.ProdutoKit = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sProdKitVC, sUMKitVC, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213431
        
    lErro = Comando_BuscarPrimeiro(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213432
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O kit de venda " & Trim(sProdKitVC)
        sUM = sUMKitVC
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213433 'Não pode existir registro que ficaria capenga
    
    '12 - KIT DE PRODUCAO
    sUMKitP = String(STRING_UM_SIGLA, 0)
    sProdKitP = String(STRING_PRODUTO, 0)
    sVersaoKitP = String(STRING_KIT_VERSAO, 0)
    
    lErro = Comando_Executar(alComando(12), "SELECT D.ProdutoRaiz, D.Versao, D.UnidadeMed FROM ProdutoKit AS D WHERE D.Produto = ? AND D.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sProdKitP, sVersaoKitP, sUMKitP, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213434
        
    lErro = Comando_BuscarPrimeiro(alComando(12))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213435
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O kit do produto " & Trim(sProdKitVC) & " versão " & sVersaoKitP
        sUM = sUMKitP
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213436 'Não pode existir registro que ficaria capenga
    
    '13 - MOVIMENTO DE ESTOQUE
    sUMME = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(13), "SELECT D.Codigo, D.FilialEmpresa, D.SiglaUM FROM MovimentoEstoque AS D WHERE D.Produto = ? AND D.SiglaUM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodME, iFilialEmpME, sUMME, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213437
        
    lErro = Comando_BuscarPrimeiro(alComando(13))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213438
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O movimento de estoque " & CStr(lCodME) & " da filial " & CStr(iFilialEmpME)
        sUM = sUMME
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213439 'Não pode existir registro que ficaria capenga
    
    '14 - PROPOSTA DE PROJETO
    sUMPPRJ = String(STRING_UM_SIGLA, 0)
    sCodPPRJ = String(STRING_PROPOSTAPRJ_CODIGO, 0)
    
    lErro = Comando_Executar(alComando(14), "SELECT D.Codigo, D.FilialEmpresa, I.UnidadeMed FROM PRJPropostas AS D, PRJPropostaItens As I WHERE D.NumIntDoc = I.NumIntDocProposta AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sCodPPRJ, iFilialEmpPPRJ, sUMPPRJ, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213440
        
    lErro = Comando_BuscarPrimeiro(alComando(14))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213441

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A proposta de projeto " & sCodPPRJ & " da filial " & CStr(iFilialEmpPPRJ)
        sUM = sUMPPRJ
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213442 'Não pode existir registro que ficaria capenga
    
    '15 - CONTRATOS DE PROJETO
    sUMCPRJ = String(STRING_UM_SIGLA, 0)
    sCodCPRJ = String(STRING_CONTRATOPRJ_CODIGO, 0)
    
    lErro = Comando_Executar(alComando(15), "SELECT D.Codigo, D.FilialEmpresa, I.UnidadeMed FROM PRJContratos AS D, PRJContratoItens As I WHERE D.NumIntDoc = I.NumIntDocContrato AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sCodCPRJ, iFilialEmpCPRJ, sUMCPRJ, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213443
        
    lErro = Comando_BuscarPrimeiro(alComando(15))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213444
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O contrato de projeto " & sCodCPRJ & " da filial " & CStr(iFilialEmpCPRJ)
        sUM = sUMCPRJ
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213445 'Não pode existir registro que ficaria capenga
    
    '16 - PROJETO ETAPA - ITENS PRODUZIDOS
    sUMPRJ = String(STRING_UM_SIGLA, 0)
    sCodPRJ = String(STRING_PRJ_CODIGO, 0)
    sCodEPRJ = String(STRING_ETAPAPRJ_CODIGO, 0)
    
    lErro = Comando_Executar(alComando(16), "SELECT D.Codigo, X.Codigo, D.FilialEmpresa, I.UM FROM Projetos AS D, PRJEtapas As X, PRJEtapaItensProd As I WHERE D.NumIntDoc = X.NumIntDocPRJ AND X.NumIntDoc = I.NumIntDocEtapaPRJ  AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sCodPRJ, sCodEPRJ, iFilialEmpPRJ, sUMPRJ, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213446
        
    lErro = Comando_BuscarPrimeiro(alComando(16))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213447

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A estapa " & sCodEPRJ & " do projeto " & sCodPRJ & " da filial " & CStr(iFilialEmpPRJ) & " (Itens Produzidos)"
        sUM = sUMPRJ
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213448 'Não pode existir registro que ficaria capenga
    
    '17 - PROJETO ETAPA - ITENS MATERIAIS
    sUMPRJ = String(STRING_UM_SIGLA, 0)
    sCodPRJ = String(STRING_PRJ_CODIGO, 0)
    sCodEPRJ = String(STRING_ETAPAPRJ_CODIGO, 0)
    
    lErro = Comando_Executar(alComando(17), "SELECT D.Codigo, X.Codigo, D.FilialEmpresa, I.UM FROM Projetos AS D, PRJEtapas As X, PRJEtapaMateriais As I WHERE D.NumIntDoc = X.NumIntDocPRJ AND X.NumIntDoc = I.NumIntDocEtapa  AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sCodPRJ, sCodEPRJ, iFilialEmpPRJ, sUMPRJ, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213449
        
    lErro = Comando_BuscarPrimeiro(alComando(17))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213450

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A estapa " & sCodEPRJ & " do projeto " & sCodPRJ & " da filial " & CStr(iFilialEmpPRJ) & " (Materiais)"
        sUM = sUMPRJ
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213451 'Não pode existir registro que ficaria capenga
    
    '18 - PROJETO - APONTAMENTO
    sUMAPRJ = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(18), "SELECT D.Codigo, D.FilialEmpresa, I.UM FROM ApontamentoPRJ AS D, ApontProdPRJ As I WHERE D.NumIntDoc = I.NumIntDocApont AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodAPRJ, iFilialEmpAPRJ, sUMAPRJ, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213452
        
    lErro = Comando_BuscarPrimeiro(alComando(18))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213453

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O apontamento de projeto " & CStr(lCodAPRJ) & " da filial " & CStr(iFilialEmpAPRJ)
        sUM = sUMAPRJ
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213454 'Não pode existir registro que ficaria capenga
    
    '19 - DI - ADICAO
    sUMDI = String(STRING_UM_SIGLA, 0)
    sNumDI = String(STRING_DI_NUMERO, 0)
    
    lErro = Comando_Executar(alComando(19), "SELECT D.Numero, D.FilialEmpresa, I.UM FROM DIInfo AS D, AdicaoDI AS X, ItensAdicaoDI As I WHERE D.NumIntDoc = X.NumIntDI AND X.NumIntDoc = I.NumIntAdicaoDI AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sNumDI, iFilialEmpDI, sUMDI, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213455
        
    lErro = Comando_BuscarPrimeiro(alComando(19))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213456

    If lErro = AD_SQL_SUCESSO Then
        sDoc = "A DI " & sNumDI & " da filial " & CStr(iFilialEmpDI)
        sUM = sUMDI
    End If
    
    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213457 'Não pode existir registro que ficaria capenga
    
    '20 - CONTRATOS
    sUMCTRT = String(STRING_UM_SIGLA, 0)
    sCodCTRT = String(STRING_CONTRATO_CODIGO, 0)
    
    lErro = Comando_Executar(alComando(20), "SELECT D.Codigo, D.FilialEmpresa, I.UM FROM ItensDeContrato AS I, Contratos As D WHERE D.NumIntDoc = I.NumIntContrato AND I.Produto = ? AND I.UM NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", sCodCTRT, iFilialEmpCTRT, sUMCTRT, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213458
        
    lErro = Comando_BuscarPrimeiro(alComando(20))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213459
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O contrato " & sCodCTRT & " da filial " & CStr(iFilialEmpCTRT)
        sUM = sUMCTRT
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213460 'Não pode existir registro que ficaria capenga
    
    '21 - CUPOM FISCAL
    sUMCF = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(21), "SELECT D.Numero, D.FilialEmpresa, I.UnidadeMed FROM ItensCupomFiscal AS I, CupomFiscal As D WHERE D.NumIntDoc = I.NumIntCupom AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lNumCF, iFilialEmpCF, sUMCF, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213461
        
    lErro = Comando_BuscarPrimeiro(alComando(21))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213462
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O cupom fiscal " & CStr(lNumCF) & " da filial " & CStr(iFilialEmpCF)
        sUM = sUMCF
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213463 'Não pode existir registro que ficaria capenga
    
    '22 - PEDIDO DE SERVIÇO
    sUMPSRV = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(22), "SELECT D.Codigo, D.FilialEmpresa, I.UnidadeMed FROM ItensPedidoSRV AS I, PedidoServico As D WHERE D.Codigo = I.CodPedido AND D.FilialEmpresa = I.FilialEmpresa AND I.Produto = ? AND I.UnidadeMed NOT IN (SELECT U.Sigla FROM UnidadesDeMedida AS U WHERE U.Classe = ?)", lCodPSRV, iFilialEmpPSRV, sUMPSRV, objProduto.sCodigo, objProduto.iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then gError 213464
        
    lErro = Comando_BuscarPrimeiro(alComando(22))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213465
    
    If lErro = AD_SQL_SUCESSO Then
        sDoc = "O pedido de serviço " & CStr(lCodPSRV) & " da filial " & CStr(iFilialEmpPSRV)
        sUM = sUMPSRV
    End If

    'Se encontrou, erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 213466 'Não pode existir registro que ficaria capenga
          
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Produto_Valida_Alteracao_UM = SUCESSO
    
    Exit Function
    
Erro_Produto_Valida_Alteracao_UM:

    Produto_Valida_Alteracao_UM = gErr

    Select Case gErr
    
        Case 213397
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 213398, 213399
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REQUISICAOCOMPRAS", gErr)
        
        Case 213400, 213403, 213406, 213409, 213412, 213415, 213418, 213421, 213424, 213427, 213430, 213433, 213436, 213439, 213442, 213445, 213448, 213451, 213454, 213457, 213460, 213463, 213466
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_TROCA_CLASSEUM", gErr, sDoc, sUM)
        
        Case 213401, 213402
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)
        
        Case 213404, 213405
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOSRV2", gErr)
        
        Case 213407, 213408
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORDEMPRODUCAO", gErr)
        
        Case 213410, 213411
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORDEMSERVICOPRODUCAO", gErr)
        
        Case 213413, 213414
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOMPRA", gErr)
        
        Case 213416, 213417
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDODEVENDA", gErr)
               
        Case 213419, 213420
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", gErr)
         
        Case 213422, 213423
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQMODELO1", gErr)
        
        Case 213425, 213426
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SOLICITACAOSRV1", gErr)

        Case 213428, 213429
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KITVENDA", gErr)
        
         Case 213431, 213432
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKITVENDA", gErr)

        Case 213434, 213435
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKIT", gErr)
        
        Case 213437, 213438
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

        Case 213440, 213441
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRJPROPOSTAS", gErr)

        Case 213443, 213444
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRJCONTRATOS", gErr)
   
        Case 213446, 213447
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETO", gErr)
 
        Case 213449, 213450
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETO", gErr)
 
        Case 213452, 213453
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APONTPRJ", gErr)

        Case 213455, 213456
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DIINFO", gErr)
  
        Case 213458, 213459
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 213461, 213462
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUPOMFISCAL", gErr)

        Case 213464, 213465
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDOSRV2", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213467)
    
    End Select
    
    Resume Next
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function
