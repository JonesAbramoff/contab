VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassFATSelect"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

'???? remover, já existe em OrcamentoVenda
Private Type typeOrcamentoVenda
    iFilialEmpresa As Integer
    lCodigo As Long
    lCliente As Long
    iFilial As Integer
    iCondicaoPagto As Integer
    dPercAcrescFinanceiro As Double
    dValorProdutos As Double
    dtDataEmissao As Date
    sNaturezaOp As String
    dValorTotal As Double
    dValorFrete As Double
    dValorDesconto As Double
    dValorSeguro As Double
    dValorOutrasDespesas As Double
    iTabelaPreco As Integer
    dtDataReferencia As Date
    lNumIntDoc As Long
    iVendedor As Integer
    sNomeFilialCli As String
    sNomeCli As String
    lNumIntNFiscal As Long
    lNumIntPedVenda As Long
End Type


Private Declare Function Comando_BindVarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_BindVar" (ByVal lComando As Long, lpVar As Variant) As Long
Private Declare Function Comando_PrepararInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Preparar" (ByVal lComando As Long, ByVal lpSQLStmt As String) As Long
Private Declare Function Comando_ExecutarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Executar" (ByVal lComando As Long) As Long

Function FATConfig_Le_Configs(ByVal colConfigs As ColFATConfig) As Long
'recupera da tabela FATConfig uma colecao de registros

Dim lErro As Long, lComando As Long
Dim objFATConfig As ClassFATConfig

On Error GoTo Erro_FATConfig_Le_Configs
    
    'abrir comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 34500
    
    'para cada elemento da colecao
    For Each objFATConfig In colConfigs
    
        lErro = FATConfig_Le_Batch(objFATConfig, lComando)
        If lErro <> SUCESSO And lErro <> 19318 Then Error 19324
        
        If lErro = 19318 Then
            
            'trata valores que podem só estar disponiveis apos a inicializacao do modulo
            
            Select Case objFATConfig.sCodigo
            
                Case FATCFG_FILIAL_FATURAMENTO
                    objFATConfig.iTipo = 1
                    objFATConfig.sConteudo = CStr(giFilialEmpresa)
            
                Case Else
                    Error 19325
                
            End Select
            
        End If
        
    Next

    'fechar comando
    Call Comando_Fechar(lComando)
    
    FATConfig_Le_Configs = SUCESSO
    
    Exit Function
    
Erro_FATConfig_Le_Configs:

    FATConfig_Le_Configs = Err
    
    Select Case Err
    
        Case 34500
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 19324
        
        Case 19325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATCONFIG_INEXISTENTE", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150082)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function FATConfig_Le_Batch(ByVal objFATConfig As ClassFATConfig, ByVal lComando As Long) As Long
'le registro em fatconfig.
Dim lErro As Long, tFATConfig As typeFATConfig
On Error GoTo Erro_FATConfig_Le_Batch

    With tFATConfig
        'inicializar buffers
        .sDescricao = String(STRING_FATCONFIG_DESCRICAO, 0)
        .sConteudo = String(STRING_FATCONFIG_CONTEUDO, 0)
        'ler registo
        lErro = Comando_Executar(lComando, "SELECT Descricao, Tipo, Conteudo FROM FATConfig WHERE Codigo = ? AND FilialEmpresa = ?", .sDescricao, .iTipo, .sConteudo, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then Error 19316
    End With
    
    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19317
    
    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then Error 19318
    
    objFATConfig.sDescricao = tFATConfig.sDescricao
    objFATConfig.iTipo = tFATConfig.iTipo
    objFATConfig.sConteudo = tFATConfig.sConteudo
    
    FATConfig_Le_Batch = SUCESSO
     
    Exit Function
    
Erro_FATConfig_Le_Batch:

    FATConfig_Le_Batch = Err
     
    Select Case Err
     
        Case 19316, 19317
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATCONFIG2", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
        
        Case 19318 'chave nao encontrada
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150083)
     
    End Select
     
    Exit Function

End Function

Function LiberacaoDeBloqueios_ObterBloqueios(ByVal objLiberacaoBloqueios As ClassLiberacaoBloqueios, ByVal colTiposBloqueio As Collection) As Long
'Preenche colBloqueioLiberacaoInfo em objLiberacaoBloqueios

Dim lErro As Long, sSelect As String
Dim lComando As Long
Dim iBloqueiosPVFilialEmpresa As Integer, lBloqueiosPVPedidoDeVendas As Long, iBloqueiosPVSequencial As Integer, sBloqueiosPVCodUsuario As String, dtBloqueiosPVData As Date, iBloqueiosPVTipoDeBloqueio As Integer
Dim dtPedidosDeVendaDataEmissao As Date, dPedidosDeVendaValorTotal As Double, sClientesNomeReduzido As String, sTiposDeBloqueioNomeReduzido As String, dtDataNula As Date
Dim sBloqueiosPVObs As String

On Error GoTo Erro_LiberacaoDeBloqueios_ObterBloqueios

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27115

    'Montar SELECT dinamicamente
    Call LiberacaoDeBloqueios_ObterBloqueios1(objLiberacaoBloqueios, sSelect)

    sBloqueiosPVCodUsuario = String(STRING_SIGLA_USUARIO, 0)
    sClientesNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    sTiposDeBloqueioNomeReduzido = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    sBloqueiosPVObs = String(STRING_BLOQUEIOSPV_OBSERVACAO, 0)
    dtDataNula = DATA_NULA
    
    'Preparar parte fixa do SELECT
    lErro = LiberacaoDeBloqueios_ObterBloqueios2(lComando, sSelect, iBloqueiosPVFilialEmpresa, lBloqueiosPVPedidoDeVendas, iBloqueiosPVSequencial, sBloqueiosPVCodUsuario, sBloqueiosPVObs, dtBloqueiosPVData, iBloqueiosPVTipoDeBloqueio, dtPedidosDeVendaDataEmissao, dPedidosDeVendaValorTotal, sClientesNomeReduzido, sTiposDeBloqueioNomeReduzido, dtDataNula)
    If lErro <> SUCESSO Then Error 27116

    'Complementa a passagem dos parâmetros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao dos bloqueios
    lErro = LiberacaoDeBloqueios_ObterBloqueios3(lComando, objLiberacaoBloqueios)
    If lErro <> SUCESSO Then Error 27117

    'Processar os registros lidos
    lErro = LiberacaoDeBloqueios_ObterBloqueios4(lComando, objLiberacaoBloqueios, iBloqueiosPVFilialEmpresa, lBloqueiosPVPedidoDeVendas, iBloqueiosPVSequencial, sBloqueiosPVCodUsuario, sBloqueiosPVObs, dtBloqueiosPVData, iBloqueiosPVTipoDeBloqueio, dtPedidosDeVendaDataEmissao, dPedidosDeVendaValorTotal, sClientesNomeReduzido, sTiposDeBloqueioNomeReduzido, colTiposBloqueio)
    If lErro <> SUCESSO And lErro <> 27120 Then Error 27118

    If lErro = 27120 Then Error 29191
    
    Call Comando_Fechar(lComando)

    LiberacaoDeBloqueios_ObterBloqueios = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueios_ObterBloqueios:

    LiberacaoDeBloqueios_ObterBloqueios = Err

    Select Case Err

        Case 27116 To 27118
        
        Case 29191

        Case 27115
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150084)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub LiberacaoDeBloqueios_ObterBloqueios1(ByVal objLiberacaoBloqueios As ClassLiberacaoBloqueios, sSelect As String)
'Montar SELECT dinamicamente

Dim sFields As String, sFrom As String, sWhere As String, sOrderBy As String

    sFields = "BloqueiosPV.FilialEmpresa, BloqueiosPV.PedidoDeVenda, BloqueiosPV.Sequencial, BloqueiosPV.CodUsuario, BloqueiosPV.Observacao, BloqueiosPV.Data, BloqueiosPV.TipoDeBloqueio, " & _
                "PedidosDeVenda.DataEmissao, PedidosDeVenda.ValorTotal, Clientes.NomeReduzido, TiposDeBloqueio.NomeReduzido"

    sFrom = " FROM BloqueiosPV, PedidosDeVenda, Clientes, TiposDeBloqueio"
    sWhere = " WHERE BloqueiosPV.DataLib = ? AND BloqueiosPV.FilialEmpresa = PedidosDeVenda.FilialEmpresa AND BloqueiosPV.PedidoDeVenda = PedidosDeVenda.Codigo AND PedidosDeVenda.Cliente = Clientes.Codigo AND BloqueiosPV.TipoDeBloqueio = TiposDeBloqueio.Codigo"
    sOrderBy = " ORDER BY " & objLiberacaoBloqueios.sOrdenacao

    If objLiberacaoBloqueios.iFilialEmpresa <> EMPRESA_TODA Then sWhere = sWhere & " AND BloqueiosPV.FilialEmpresa = ?"

    If objLiberacaoBloqueios.lPedVendasDe <> 0 Then sWhere = sWhere & " AND PedidosDeVenda.Codigo >= ?"

    If objLiberacaoBloqueios.lPedVendasAte <> 0 Then sWhere = sWhere & " AND PedidosDeVenda.Codigo <= ?"

    If objLiberacaoBloqueios.dtBloqueioDe <> DATA_NULA Then sWhere = sWhere & " AND BloqueiosPV.Data >= ?"

    If objLiberacaoBloqueios.dtBloqueioAte <> DATA_NULA Then sWhere = sWhere & " AND BloqueiosPV.Data <= ?"

    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function LiberacaoDeBloqueios_ObterBloqueios2(ByVal lComando As Long, ByVal sSelect As String, vBloqueiosPVFilialEmpresa As Variant, vBloqueiosPVPedidoDeVendas As Variant, vBloqueiosPVSequencial As Variant, vBloqueiosPVCodUsuario As Variant, vBloqueiosPVObs As Variant, vBloqueiosPVData As Variant, vBloqueiosPVTipoDeBloqueio As Variant, vPedidosDeVendaDataEmissao As Variant, vPedidosDeVendaValorTotal As Variant, vClientesNomeReduzido As Variant, vTiposDeBloqueioNomeReduzido As Variant, vDataNula As Variant) As Long
'Preparar parte fixa do SELECT

Dim RET As Integer, lErro As Long

On Error GoTo Erro_LiberacaoDeBloqueios_ObterBloqueios2

    RET = Comando_PrepararInt(lComando, sSelect)
    If (RET <> AD_SQL_SUCESSO) Then Error 27099

    RET = Comando_BindVarInt(lComando, vBloqueiosPVFilialEmpresa)
    If (RET <> AD_SQL_SUCESSO) Then Error 27100

    RET = Comando_BindVarInt(lComando, vBloqueiosPVPedidoDeVendas)
    If (RET <> AD_SQL_SUCESSO) Then Error 27101

    RET = Comando_BindVarInt(lComando, vBloqueiosPVSequencial)
    If (RET <> AD_SQL_SUCESSO) Then Error 27102

    RET = Comando_BindVarInt(lComando, vBloqueiosPVCodUsuario)
    If (RET <> AD_SQL_SUCESSO) Then Error 27103

    RET = Comando_BindVarInt(lComando, vBloqueiosPVObs)
    If (RET <> AD_SQL_SUCESSO) Then Error 27103

    RET = Comando_BindVarInt(lComando, vBloqueiosPVData)
    If (RET <> AD_SQL_SUCESSO) Then Error 27104

    RET = Comando_BindVarInt(lComando, vBloqueiosPVTipoDeBloqueio)
    If (RET <> AD_SQL_SUCESSO) Then Error 27104

    RET = Comando_BindVarInt(lComando, vPedidosDeVendaDataEmissao)
    If (RET <> AD_SQL_SUCESSO) Then Error 27105

    RET = Comando_BindVarInt(lComando, vPedidosDeVendaValorTotal)
    If (RET <> AD_SQL_SUCESSO) Then Error 27106

    RET = Comando_BindVarInt(lComando, vClientesNomeReduzido)
    If (RET <> AD_SQL_SUCESSO) Then Error 27107

    RET = Comando_BindVarInt(lComando, vTiposDeBloqueioNomeReduzido)
    If (RET <> AD_SQL_SUCESSO) Then Error 27108

    RET = Comando_BindVarInt(lComando, vDataNula)
    If (RET <> AD_SQL_SUCESSO) Then Error 27197

    LiberacaoDeBloqueios_ObterBloqueios2 = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueios_ObterBloqueios2:

    LiberacaoDeBloqueios_ObterBloqueios2 = Err

    Select Case Err

        Case 27099 To 27108, 27119, 27197
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOS_PV_LIBERACAO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150085)

    End Select

    Exit Function

End Function

Private Function LiberacaoDeBloqueios_ObterBloqueios3(ByVal lComando As Long, ByVal objLiberacaoBloqueios As ClassLiberacaoBloqueios) As Long
'Complementa a passagem dos parametros que variam de acordo com a selecao do usuario
'e executa o SELECT p/obtencao dos bloqueios

Dim lErro As Long
Dim viFilialEmpresa As Variant, vlPedVendasDe As Variant, vlPedVendasAte As Variant, vdtBloqueioDe As Variant, vdtBloqueioAte As Variant

On Error GoTo Erro_LiberacaoDeBloqueios_ObterBloqueios3

    If (objLiberacaoBloqueios.iFilialEmpresa <> EMPRESA_TODA) Then
        viFilialEmpresa = objLiberacaoBloqueios.iFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27109
    End If

    If objLiberacaoBloqueios.lPedVendasDe <> 0 Then
        vlPedVendasDe = objLiberacaoBloqueios.lPedVendasDe
        lErro = Comando_BindVarInt(lComando, vlPedVendasDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27110
    End If

    If objLiberacaoBloqueios.lPedVendasAte <> 0 Then
        vlPedVendasAte = objLiberacaoBloqueios.lPedVendasAte
        lErro = Comando_BindVarInt(lComando, vlPedVendasAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27111
    End If

    If objLiberacaoBloqueios.dtBloqueioDe <> DATA_NULA Then
        vdtBloqueioDe = objLiberacaoBloqueios.lPedVendasDe
        lErro = Comando_BindVarInt(lComando, vdtBloqueioDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27112
    End If

    If objLiberacaoBloqueios.dtBloqueioAte <> DATA_NULA Then
        vdtBloqueioAte = objLiberacaoBloqueios.dtBloqueioAte
        lErro = Comando_BindVarInt(lComando, vdtBloqueioAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27113
    End If

    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27114

    LiberacaoDeBloqueios_ObterBloqueios3 = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueios_ObterBloqueios3:

    LiberacaoDeBloqueios_ObterBloqueios3 = Err

    Select Case Err

        Case 27109 To 27114
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOS_PV_LIBERACAO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150086)

    End Select

    Exit Function

End Function

Private Function LiberacaoDeBloqueios_ObterBloqueios4(ByVal lComando As Long, ByVal objLiberacaoBloqueios As ClassLiberacaoBloqueios, iBloqueiosPVFilialEmpresa As Integer, lBloqueiosPVPedidoDeVendas As Long, iBloqueiosPVSequencial As Integer, sBloqueiosPVCodUsuario As String, sBloqueiosPVObs As String, dtBloqueiosPVData As Date, iBloqueiosPVTipoDeBloqueio As Integer, dtPedidosDeVendaDataEmissao As Date, dPedidosDeVendaValorTotal As Double, sClientesNomeReduzido As String, sTiposDeBloqueioNomeReduzido As String, ByVal colTiposBloqueio As Collection) As Long
'Processar os registros lidos

Dim lErro As Long, objBloqueioLiberacaoInfo As ClassBloqueioLiberacaoInfo, iContador As Integer
Dim iIndice As Integer

On Error GoTo Erro_LiberacaoDeBloqueios_ObterBloqueios4

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27119

    If lErro = AD_SQL_SEM_DADOS Then Error 27120

    iContador = 0
    
    Do While lErro = AD_SQL_SUCESSO

        iContador = iContador + 1
        If iContador = NUM_MAX_BLOQUEIOS_LIBERACAO Then
        
            'avisar que vai trazer apenas n regs
            lErro = Rotina_Aviso(vbOKOnly, "AVISO_NUM_MAX_BLOQUEIOS_LIBERACAO")
            
            Exit Do
            
        End If
        
        Set objBloqueioLiberacaoInfo = New ClassBloqueioLiberacaoInfo
        
        For iIndice = 1 To colTiposBloqueio.Count
        
            If colTiposBloqueio.Item(iIndice) = iBloqueiosPVTipoDeBloqueio Then
        
                objBloqueioLiberacaoInfo.iFilialEmpresa = iBloqueiosPVFilialEmpresa
                objBloqueioLiberacaoInfo.lCodPedido = lBloqueiosPVPedidoDeVendas
                objBloqueioLiberacaoInfo.iSeqBloqueio = iBloqueiosPVSequencial
                objBloqueioLiberacaoInfo.sNomeReduzidoCliente = sClientesNomeReduzido
                objBloqueioLiberacaoInfo.dtDataEmissao = dtPedidosDeVendaDataEmissao
                objBloqueioLiberacaoInfo.dValorPedido = dPedidosDeVendaValorTotal
                objBloqueioLiberacaoInfo.iTipoDeBloqueio = iBloqueiosPVTipoDeBloqueio
                objBloqueioLiberacaoInfo.sNomeReduzidoTipoBloqueio = sTiposDeBloqueioNomeReduzido
                objBloqueioLiberacaoInfo.sUsuario = sBloqueiosPVCodUsuario
                objBloqueioLiberacaoInfo.dtDataBloqueio = dtBloqueiosPVData
                objBloqueioLiberacaoInfo.iMarcado = 1
                objBloqueioLiberacaoInfo.sObservacao = sBloqueiosPVObs
        
                objLiberacaoBloqueios.colBloqueioLiberacaoInfo.Add objBloqueioLiberacaoInfo
                
            End If
            
        Next
        
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27121
            
    Loop

    LiberacaoDeBloqueios_ObterBloqueios4 = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueios_ObterBloqueios4:

    LiberacaoDeBloqueios_ObterBloqueios4 = Err

    Select Case Err

        Case 27119, 27121
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOS_PV_LIBERACAO", Err)

        Case 27120

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150087)

    End Select

    Exit Function

End Function

Function GeracaoNFiscal_ObterPedidos(ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'Preenche a colecao em objGeracaoNFiscal com os pedidos que podem ser faturados e atendem
'aos criterios passados em objGeracaoNFiscal com restricoes de No. de pedido, data de emissao,...

Dim lErro As Long, sSelect As String
Dim lComando As Long
Dim dtItensPedidoDeVendaDataEntrega As Date, sClientesNomeReduzido As String, iPedidosDeVendaFilialEmpresa As Integer, lPedidosDeVendaCodigo As Long, lPedidosDeVendaCliente As Long, iPedidosDeVendaFilial As Integer, dtPedidosDeVendaDataEmissao As Date, dPedidosDeVendaValorTotal As Double
Dim iBloqueioEstoqueParcial As Integer, iBloqueioEstoqueNaoReserva As Integer, dtDataNula As Date, iControleReserva As Integer
Dim sBairroEntrega As String, sCidadeEntrega As String, sSiglaEstadoEntrega As String
Dim iCodTransportadora As Integer, iCodTranspRedesp As Integer, iDetPagFrete As Integer
Dim iSelect As Integer

On Error GoTo Erro_GeracaoNFiscal_ObterPedidos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27190

    'Montar SELECT dos pedidos de venda dinamicamente
    Call GeracaoNFiscal_ObterPedidos1(objGeracaoNFiscal, sSelect)

    sClientesNomeReduzido = String(255, 0)
    sBairroEntrega = String(255, 0)
    sCidadeEntrega = String(255, 0)
    sSiglaEstadoEntrega = String(255, 0)
    iBloqueioEstoqueParcial = BLOQUEIO_PARCIAL
    iBloqueioEstoqueNaoReserva = BLOQUEIO_NAO_RESERVA
    dtDataNula = DATA_NULA
    
    'Informa que os dados a serem preenchidos são do primeiro ou segundo
    'select da UNION
    For iSelect = 1 To 2
        'Preparar parte fixa do SELECT
        lErro = GeracaoNFiscal_ObterPedidos2(lComando, sSelect, dtItensPedidoDeVendaDataEntrega, sClientesNomeReduzido, iPedidosDeVendaFilialEmpresa, lPedidosDeVendaCodigo, lPedidosDeVendaCliente, iPedidosDeVendaFilial, dtPedidosDeVendaDataEmissao, dPedidosDeVendaValorTotal, iBloqueioEstoqueParcial, iBloqueioEstoqueNaoReserva, dtDataNula, iControleReserva, sBairroEntrega, sCidadeEntrega, sSiglaEstadoEntrega, iCodTransportadora, iCodTranspRedesp, iDetPagFrete, iSelect)
        If lErro <> SUCESSO Then Error 27191
    
        'Complementa a passagem dos parametros que variam de acordo com a selecao do usuario
        'e executa o SELECT p/obtencao dos bloqueios
        lErro = GeracaoNFiscal_ObterPedidos3(lComando, objGeracaoNFiscal, iSelect)
        If lErro <> SUCESSO Then Error 27192
    
    Next
    
    'Processar os registros lidos
    lErro = GeracaoNFiscal_ObterPedidos4(lComando, objGeracaoNFiscal, dtItensPedidoDeVendaDataEntrega, sClientesNomeReduzido, iPedidosDeVendaFilialEmpresa, lPedidosDeVendaCodigo, lPedidosDeVendaCliente, iPedidosDeVendaFilial, dtPedidosDeVendaDataEmissao, dPedidosDeVendaValorTotal, sBairroEntrega, sCidadeEntrega, sSiglaEstadoEntrega, iCodTransportadora, iCodTranspRedesp, iDetPagFrete)
    If lErro <> SUCESSO And lErro <> 27163 Then Error 27193
    
    'Se não encontrou nenhum Pedido ---> Erro
    If lErro = 27163 Then Error 58166
    
    lErro = Comando_Fechar(lComando)

    GeracaoNFiscal_ObterPedidos = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_ObterPedidos:

    GeracaoNFiscal_ObterPedidos = Err

    Select Case Err

        Case 27191 To 27193

        Case 27190
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58166 'Tratado na Rotina Chamadora (Sem pedidos na Selecao)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150088)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Sub GeracaoNFiscal_ObterPedidos1(ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, sSelect As String)
'Montar SELECT dinamicamente

Dim sFields As String, sFrom As String, sWhere As String, sOrderBy As String, sGroupBy As String, sHaving As String
Dim sUnion As String, sWhere2 As String, sHaving2 As String
Dim sWhereComum As String 'guarda a parte comum no WHERE dos 2 selects

    sFields = "MIN(ItensPedidoDeVenda.DataEntrega), MIN(Clientes.NomeReduzido) AS NomeCliente, PedidosDeVenda.FilialEmpresa FilialEmpresaPV, PedidosDeVenda.Codigo CodigoPV, MIN(PedidosDeVenda.Cliente), MIN(PedidosDeVenda.Filial), MIN(PedidosDeVenda.DataEmissao) AS EmissaoPedido, MIN(PedidosDeVenda.ValorTotal), MIN(Case WHEN EEntreg.Endereco ='' THEN EPrinc.Bairro ELSE EEntreg.Bairro END) AS BairroEntrega, MIN(Case WHEN EEntreg.Endereco ='' THEN EPrinc.Cidade ELSE EEntreg.Cidade END) AS CidadeEntrega, MIN(EEntreg.SiglaEstado) As SiglaEstadoEntrega, MIN(PedidosDeVenda.CodTransportadora), MIN(PedidosDeVenda.CodTranspRedesp), MIN(PedidosDeVenda.DetPagFrete)  "
    sFrom = " FROM PedidosDeVenda, Clientes, ItensPedidoDeVenda, Produtos, FiliaisClientes, Enderecos EPrinc, Enderecos EEntreg"
    sWhere = " WHERE PedidosDeVenda.Cliente = Clientes.Codigo AND PedidosDeVenda.Cliente = FiliaisClientes.CodCliente AND PedidosDeVenda.FilialEntrega = FiliaisClientes.CodFilial AND FiliaisClientes.Endereco = EPrinc.Codigo AND FiliaisClientes.EnderecoEntrega = EEntreg.Codigo AND NOT EXISTS (SELECT * FROM BloqueiosPV WHERE PedidosDeVenda.FilialEmpresa = BloqueiosPV.FilialEmpresa AND PedidosDeVenda.Codigo = BloqueiosPV.PedidoDeVenda AND " & _
        "(BloqueiosPV.TipoDeBloqueio <> ? AND BloqueiosPV.TipoDeBloqueio <> ?) AND BloqueiosPV.DataLib = ?) AND PedidosDeVenda.FilialEmpresa=ItensPedidoDeVenda.FilialEmpresa AND " & _
        "PedidosDeVenda.Codigo=ItensPedidoDeVenda.CodPedido AND (ItensPedidoDeVenda.Quantidade -ItensPedidoDeVenda.QuantCancelada >0)  AND " & _
        "ItensPedidoDeVenda.DataEntrega <> ? AND ItensPedidoDeVenda.Produto = Produtos.Codigo AND (PedidosDeVenda.CondicaoPagto = 0 OR PedidosDeVenda.CondicaoPagto IN (SELECT C.Codigo FROM CondicoesPagto AS C, FormasPagamento As F WHERE C.FormaPagamento = F.Codigo AND F.GeraFatura = 1 UNION SELECT C.Codigo FROM CondicoesPagto AS C WHERE FormaPagamento = 0 )) "
    sOrderBy = " ORDER BY " & objGeracaoNFiscal.sOrdenacao
    sGroupBy = " GROUP BY " & "PedidosDeVenda.FilialEmpresa, PedidosDeVenda.Codigo"
    sHaving = " HAVING MAX(ItensPedidoDeVenda.QuantFaturada)=0 "
    sUnion = " UNION "
    
    sWhere2 = " WHERE PedidosDeVenda.Cliente = Clientes.Codigo AND PedidosDeVenda.Cliente = FiliaisClientes.CodCliente AND PedidosDeVenda.FilialEntrega = FiliaisClientes.CodFilial AND FiliaisClientes.Endereco = EPrinc.Codigo AND FiliaisClientes.EnderecoEntrega = EEntreg.Codigo AND NOT EXISTS (SELECT * FROM BloqueiosPV WHERE PedidosDeVenda.FilialEmpresa = BloqueiosPV.FilialEmpresa AND PedidosDeVenda.Codigo = BloqueiosPV.PedidoDeVenda AND " & _
        "(BloqueiosPV.TipoDeBloqueio <> ? AND BloqueiosPV.TipoDeBloqueio <> ?) AND BloqueiosPV.DataLib = ?) AND PedidosDeVenda.FilialEmpresa=ItensPedidoDeVenda.FilialEmpresa AND " & _
        "PedidosDeVenda.Codigo=ItensPedidoDeVenda.CodPedido AND (ItensPedidoDeVenda.Quantidade -ItensPedidoDeVenda.QuantCancelada  >0)  AND " & _
        "ItensPedidoDeVenda.Produto = Produtos.Codigo AND (PedidosDeVenda.CondicaoPagto = 0 OR PedidosDeVenda.CondicaoPagto IN (SELECT C.Codigo FROM CondicoesPagto AS C, FormasPagamento As F WHERE C.FormaPagamento = F.Codigo AND F.GeraFatura = 1 UNION SELECT C.Codigo FROM CondicoesPagto AS C WHERE FormaPagamento = 0 )) "
    sHaving2 = " HAVING MAX(ItensPedidoDeVenda.QuantFaturada)=0 AND MIN(ItensPedidoDeVenda.DataEntrega) = MAX(ItensPedidoDeVenda.DataEntrega) AND MIN(ItensPedidoDeVenda.DataEntrega) = ? "
    
    If giFilialEmpresa <> EMPRESA_TODA Then sWhereComum = " AND PedidosDeVenda.FilialEmpresaFaturamento = ?"
    
    If objGeracaoNFiscal.iTodosOsPedidos = vbUnchecked Then
    
        If objGeracaoNFiscal.lPedidosDe <> 0 Then sWhereComum = sWhereComum & " AND PedidosDeVenda.Codigo >= ?"
    
        If objGeracaoNFiscal.lPedidosAte <> 0 Then sWhereComum = sWhereComum & " AND PedidosDeVenda.Codigo <= ?"
    
        If objGeracaoNFiscal.lClientesDe <> 0 Then sWhereComum = sWhereComum & " AND PedidosDeVenda.Cliente >= ?"
    
        If objGeracaoNFiscal.lClientesAte <> 0 Then sWhereComum = sWhereComum & " AND PedidosDeVenda.Cliente <= ?"
    
        If objGeracaoNFiscal.iFilialPedidoDe <> 0 Then sWhereComum = sWhereComum & " AND PedidosDeVenda.Filial >= ?"
    
        If objGeracaoNFiscal.iFilialPedidoAte <> 0 Then sWhereComum = sWhereComum & " AND PedidosDeVenda.Filial <= ?"
    
        If objGeracaoNFiscal.dtEmissaoDe <> DATA_NULA Then sWhereComum = sWhereComum & " AND PedidosDeVenda.DataEmissao >= ?"
    
        If objGeracaoNFiscal.dtEmissaoAte <> DATA_NULA Then sWhereComum = sWhereComum & " AND PedidosDeVenda.DataEmissao <= ?"
    
        If (objGeracaoNFiscal.lViagem <> 0) Then sWhereComum = sWhereComum & " AND PedidosDeVenda.NumIntDoc IN (SELECT MP.NumIntDocPV FROM MapadeEntrega As M, MapadeEntregaPV AS MP WHERE M.NumIntDoc = MP.NumIntDocMapa AND M.Codigo = ?)"
    
        If objGeracaoNFiscal.dtEntregaDe <> DATA_NULA Then
            sHaving = " AND MIN(ItensPedidoDeVenda.DataEntrega) >= ?"
            sHaving2 = " AND MIN(ItensPedidoDeVenda.DataEntrega) >= ?"
        End If

        If objGeracaoNFiscal.dtEntregaAte <> DATA_NULA Then
            If sHaving = "" Then
                sHaving = " HAVING "
            Else
                sHaving = sHaving & " AND "
            End If
    
            sHaving = sHaving & "MIN(ItensPedidoDeVenda.DataEntrega) <= ?"
            sHaving2 = " AND MIN(ItensPedidoDeVenda.DataEntrega) <= ?"
        End If
        
        If objGeracaoNFiscal.iVendedorInicial <> 0 Then sWhereComum = sWhereComum & " AND FiliaisClientes.Vendedor >= " + CStr(objGeracaoNFiscal.iVendedorInicial)
        If objGeracaoNFiscal.iVendedorFinal <> 0 Then sWhereComum = sWhereComum & " AND FiliaisClientes.Vendedor <= " + CStr(objGeracaoNFiscal.iVendedorFinal)
        If objGeracaoNFiscal.sRegioes <> "" Then sWhereComum = sWhereComum & " AND FiliaisClientes.Regiao IN (" + objGeracaoNFiscal.sRegioes + ")"
    
    End If

    sSelect = "SELECT " & sFields & sFrom & sWhere & sWhereComum & sGroupBy & sHaving
    sSelect = sSelect & sUnion
    sSelect = sSelect & " SELECT " & sFields & sFrom & sWhere2 & sWhereComum & sGroupBy & sHaving2 & sOrderBy
    
End Sub

Function GeracaoNFiscal_ObterPedidos2(ByVal lComando As Long, ByVal sSelect As String, vItensPedidoDeVendaDataEntrega As Variant, vClientesNomeReduzido As Variant, vPedidosDeVendaFilialEmpresa As Variant, vPedidosDeVendaCodigo As Variant, vPedidosDeVendaCliente As Variant, vPedidosDeVendaFilial As Variant, vPedidosDeVendaDataEmissao As Variant, vPedidosDeVendaValorTotal As Variant, vBloqueioEstoqueParcial As Variant, vBloqueioEstoqueNaoReserva As Variant, vDataNula As Variant, vControleReserva As Variant, vBairroEntrega As Variant, vCidadeEntrega As Variant, vSiglaEstadoEntrega As Variant, vCodTransportadora As Variant, vCodTranspRedesp As Variant, vDetPagFrete As Variant, ByVal iSelect As Integer) As Long
'Preparar parte fixa do SELECT

Dim lErro As Long

On Error GoTo Erro_GeracaoNFiscal_ObterPedidos2
    
    'Se for a montagem do primeiro SELECT
    If iSelect = 1 Then
        'Inicializa as variaves de leitura
        lErro = Comando_PrepararInt(lComando, sSelect)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27175
    
        lErro = Comando_BindVarInt(lComando, vItensPedidoDeVendaDataEntrega)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27176
    
        lErro = Comando_BindVarInt(lComando, vClientesNomeReduzido)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27177
    
        lErro = Comando_BindVarInt(lComando, vPedidosDeVendaFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27178
    
        lErro = Comando_BindVarInt(lComando, vPedidosDeVendaCodigo)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27179
    
        lErro = Comando_BindVarInt(lComando, vPedidosDeVendaCliente)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27180
    
        lErro = Comando_BindVarInt(lComando, vPedidosDeVendaFilial)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27181
    
        lErro = Comando_BindVarInt(lComando, vPedidosDeVendaDataEmissao)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27182
        
        lErro = Comando_BindVarInt(lComando, vPedidosDeVendaValorTotal)
        If (lErro <> AD_SQL_SUCESSO) Then Error 31388
    
        lErro = Comando_BindVarInt(lComando, vBairroEntrega)
        If (lErro <> AD_SQL_SUCESSO) Then Error 17728
        
        lErro = Comando_BindVarInt(lComando, vCidadeEntrega)
        If (lErro <> AD_SQL_SUCESSO) Then Error 15635
            
        lErro = Comando_BindVarInt(lComando, vSiglaEstadoEntrega)
        If (lErro <> AD_SQL_SUCESSO) Then Error 26591
        
        lErro = Comando_BindVarInt(lComando, vCodTransportadora)
        If (lErro <> AD_SQL_SUCESSO) Then Error 51359
        
        lErro = Comando_BindVarInt(lComando, vCodTranspRedesp)
        If (lErro <> AD_SQL_SUCESSO) Then Error 51359
        
        lErro = Comando_BindVarInt(lComando, vDetPagFrete)
        If (lErro <> AD_SQL_SUCESSO) Then Error 51359
        
    End If
    
    'Variáveis com valores utilizados na cláusula WHERE dos 2 selects
    lErro = Comando_BindVarInt(lComando, vBloqueioEstoqueParcial)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27183

    lErro = Comando_BindVarInt(lComando, vBloqueioEstoqueNaoReserva)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27184

    lErro = Comando_BindVarInt(lComando, vDataNula)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27186
    
    If iSelect = 1 Then
        'Só o primeiro select da UNION seleciona DataEntrega > Data Nula
        lErro = Comando_BindVarInt(lComando, vDataNula)
        If (lErro <> AD_SQL_SUCESSO) Then Error 51449
    End If
       
    GeracaoNFiscal_ObterPedidos2 = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_ObterPedidos2:

    GeracaoNFiscal_ObterPedidos2 = Err

    Select Case Err

        Case 27175 To 27189, 31388, 17728, 15635, 26591, 51359, 51449
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOS_VENDA_GERACAO_NF", Err)
        

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150089)

    End Select

    Exit Function

End Function

Function GeracaoNFiscal_ObterPedidos3(ByVal lComando As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, ByVal iSelect As Integer) As Long
'Complementa a passagem dos parametros que variam de acordo com a selecao do usuario
'e executa o SELECT p/obtencao dos bloqueios

Dim lErro As Long
Dim viFilialEmpresa As Variant, vlPedidosDe As Variant, vlPedidosAte As Variant, vlClientesDe As Variant, vlClientesAte As Variant, viFilialPedidoDe As Variant, viFilialPedidoAte As Variant, vdtEmissaoDe As Variant, vdtEmissaoAte As Variant, vdtEntregaDe As Variant, vdtEntregaAte As Variant, vlViagem As Variant
Dim vdtDataNula As Variant

On Error GoTo Erro_GeracaoNFiscal_ObterPedidos3

    If (giFilialEmpresa <> EMPRESA_TODA) Then
        viFilialEmpresa = giFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27165
    End If

    If objGeracaoNFiscal.iTodosOsPedidos = vbUnchecked Then
    
        If objGeracaoNFiscal.lPedidosDe <> 0 Then
            vlPedidosDe = objGeracaoNFiscal.lPedidosDe
            lErro = Comando_BindVarInt(lComando, vlPedidosDe)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27166
        End If
    
        If objGeracaoNFiscal.lPedidosAte <> 0 Then
            vlPedidosAte = objGeracaoNFiscal.lPedidosAte
            lErro = Comando_BindVarInt(lComando, vlPedidosAte)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27167
        End If
    
        If objGeracaoNFiscal.lClientesDe <> 0 Then
            vlClientesDe = objGeracaoNFiscal.lClientesDe
            lErro = Comando_BindVarInt(lComando, vlClientesDe)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27168
        End If
    
        If objGeracaoNFiscal.lClientesAte <> 0 Then
            vlClientesAte = objGeracaoNFiscal.lClientesAte
            lErro = Comando_BindVarInt(lComando, vlClientesAte)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27169
        End If
    
        If objGeracaoNFiscal.iFilialPedidoDe <> 0 Then
            viFilialPedidoDe = objGeracaoNFiscal.iFilialPedidoDe
            lErro = Comando_BindVarInt(lComando, viFilialPedidoDe)
            If (lErro <> AD_SQL_SUCESSO) Then Error 26803
        End If
    
        If objGeracaoNFiscal.iFilialPedidoAte <> 0 Then
            viFilialPedidoAte = objGeracaoNFiscal.iFilialPedidoAte
            lErro = Comando_BindVarInt(lComando, viFilialPedidoAte)
            If (lErro <> AD_SQL_SUCESSO) Then Error 26804
        End If
         
        If objGeracaoNFiscal.dtEmissaoDe <> DATA_NULA Then
            vdtEmissaoDe = objGeracaoNFiscal.dtEmissaoDe
            lErro = Comando_BindVarInt(lComando, vdtEmissaoDe)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27170
        End If
    
        If objGeracaoNFiscal.dtEmissaoAte <> DATA_NULA Then
            vdtEmissaoAte = objGeracaoNFiscal.dtEmissaoAte
            lErro = Comando_BindVarInt(lComando, vdtEmissaoAte)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27171
        End If
        
        If objGeracaoNFiscal.lViagem <> 0 Then
            vlViagem = objGeracaoNFiscal.lViagem
            lErro = Comando_BindVarInt(lComando, vlViagem)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27171
        End If
    End If
    
    'O segundo select da Union filtra os pedidos com as datas
    'de entrega dos itens vazias
    If iSelect = 2 Then
        vdtDataNula = DATA_NULA
        lErro = Comando_BindVarInt(lComando, vdtDataNula)
        If (lErro <> AD_SQL_SUCESSO) Then Error 51450
    End If
    
    If objGeracaoNFiscal.iTodosOsPedidos = vbUnchecked Then
        
        If objGeracaoNFiscal.dtEntregaDe <> DATA_NULA Then
            vdtEntregaDe = objGeracaoNFiscal.dtEntregaDe
            lErro = Comando_BindVarInt(lComando, vdtEntregaDe)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27172
        End If
    
        If objGeracaoNFiscal.dtEntregaAte <> DATA_NULA Then
            vdtEntregaAte = objGeracaoNFiscal.dtEntregaAte
            lErro = Comando_BindVarInt(lComando, vdtEntregaAte)
            If (lErro <> AD_SQL_SUCESSO) Then Error 27173
        End If
        
    End If
    
    'Se já tiver com tudo preparado Executa o select
    If iSelect = 2 Then
        lErro = Comando_ExecutarInt(lComando)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27174
    End If
    
    GeracaoNFiscal_ObterPedidos3 = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_ObterPedidos3:

    GeracaoNFiscal_ObterPedidos3 = Err

    Select Case Err

        Case 26803, 26804, 27165 To 27174, 51450
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOS_VENDA_GERACAO_NF", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150090)

    End Select

    Exit Function

End Function


Function GeracaoNFiscal_ObterPedidos4(ByVal lComando As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, dtItensPedidoDeVendaDataEntrega As Date, sClientesNomeReduzido As String, iPedidosDeVendaFilialEmpresa As Integer, lPedidosDeVendaCodigo As Long, lPedidosDeVendaCliente As Long, iPedidosDeVendaFilial As Integer, dtPedidosDeVendaDataEmissao As Date, dPedidosDeVendaValorTotal As Double, sBairroEntrega As String, sCidadeEntrega As String, sSiglaEstadoEntrega As String, iCodTransportadora As Integer, iCodTranspRedesp As Integer, iDetPagFrete As Integer) As Long
'Processar os registros lidos preenchendo a colecao

Dim lErro As Long, objNFiscalInfo As ClassNFiscalInfo

On Error GoTo Erro_GeracaoNFiscal_ObterPedidos4

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27162

    If lErro = AD_SQL_SEM_DADOS Then Error 27163

    Do While lErro = AD_SQL_SUCESSO

        Set objNFiscalInfo = New ClassNFiscalInfo

        objNFiscalInfo.iFilialEmpresa = iPedidosDeVendaFilialEmpresa
        objNFiscalInfo.lPedido = lPedidosDeVendaCodigo
        objNFiscalInfo.lCliente = lPedidosDeVendaCliente
        objNFiscalInfo.sClienteNomeReduzido = sClientesNomeReduzido
        objNFiscalInfo.iFilialCliente = iPedidosDeVendaFilial
        objNFiscalInfo.dtEmissaoPedido = dtPedidosDeVendaDataEmissao
        objNFiscalInfo.dtEntregaPedido = dtItensPedidoDeVendaDataEntrega
        objNFiscalInfo.dtDataSaidaNF = DATA_NULA
        objNFiscalInfo.iMarcada = MARCADO
        objNFiscalInfo.dValorTotal = dPedidosDeVendaValorTotal
        objNFiscalInfo.sBairroEntrega = sBairroEntrega
        objNFiscalInfo.sCidadeEntrega = sCidadeEntrega
        objNFiscalInfo.sSiglaEstadoEntrega = sSiglaEstadoEntrega
        objNFiscalInfo.iCodTransp = iCodTransportadora
        objNFiscalInfo.iCodTranspRedesp = iCodTranspRedesp
        objNFiscalInfo.iDetPagFrete = iDetPagFrete
    
        objGeracaoNFiscal.colNFiscalInfo.Add objNFiscalInfo

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27164

    Loop

    GeracaoNFiscal_ObterPedidos4 = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_ObterPedidos4:

    GeracaoNFiscal_ObterPedidos4 = Err

    Select Case Err
        
        Case 27162, 27164
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOS_VENDA_GERACAO_NF", Err)

        Case 27163 'Tratado na rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150091)

    End Select

    Exit Function

End Function

Function GeracaoFatura_ObterNFs(ByVal objGeracaoFatura As ClassGeracaoFatura) As Long
'preenche a colecao em objGeracaoFatura com as NFiscal que podem ser faturadas e atendem
'aos criterios passados em objGeracaoFatura com restricoes de No. NF, data de emissao,...
Dim lErro As Long, sSelect As String
Dim iFilialEmpresa As Integer, lCliente As Long, lNFsNumIntDoc As Long, sNFsRecSerie As String, lNFsRecNumNotaFiscal As Long, dtNFsRecDataEmissao As Date, dNFsRecValorTotal As Double, sClientesNomeReduzido As String, iFaturavel As Integer, sSigla As String, dISSValor As Double, iFilialCli As Integer
Dim lComando As Long
Dim iStatus As Integer

On Error GoTo Erro_GeracaoFatura_ObterNFs

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27212

    'montar SELECT dinamicamente
    Call GeracaoFatura_ObterNFs1(objGeracaoFatura, sSelect)

    sNFsRecSerie = String(STRING_SERIE, 0)
    sClientesNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    sSigla = String(STRING_TIPO_DOC_INFO_SIGLA, 0)

    iFilialEmpresa = giFilialEmpresa
    lCliente = objGeracaoFatura.lCliente
    iFaturavel = TIPODOCINFO_FATURAVEL
    iStatus = STATUS_CANCELADO
    
    'preparar parte fixa do SELECT
    lErro = GeracaoFatura_ObterNFs2(lComando, sSelect, iFilialEmpresa, lCliente, lNFsNumIntDoc, sNFsRecSerie, lNFsRecNumNotaFiscal, dtNFsRecDataEmissao, dNFsRecValorTotal, sClientesNomeReduzido, sSigla, dISSValor, iFaturavel, iFilialCli, iStatus)
    If lErro <> SUCESSO Then Error 27213

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das NFs
    lErro = GeracaoFatura_ObterNFs3(lComando, objGeracaoFatura)
    If lErro <> SUCESSO Then Error 27214

    'processar os registros lidos
    lErro = GeracaoFatura_ObterNFs4(lComando, objGeracaoFatura, lNFsNumIntDoc, sNFsRecSerie, lNFsRecNumNotaFiscal, dtNFsRecDataEmissao, dNFsRecValorTotal, sClientesNomeReduzido, sSigla, dISSValor, iFilialCli)
    If lErro <> SUCESSO Then Error 27215

    lErro = Comando_Fechar(lComando)

    GeracaoFatura_ObterNFs = SUCESSO

    Exit Function

Erro_GeracaoFatura_ObterNFs:

    GeracaoFatura_ObterNFs = Err

    Select Case Err

        Case 27213 To 27215

        Case 27212
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150092)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Sub GeracaoFatura_ObterNFs1(objGeracaoFatura As ClassGeracaoFatura, sSelect As String)
'montar SELECT dinamicamente
Dim sFields As String, sFrom As String, sWhere As String, sOrderBy As String

    sFields = " NumIntDoc, Serie, NumNotaFiscal, DataEmissao, ValorTotal, NomeReduzido, Sigla, ISSValor, FilialCli "
    sFrom = " FROM GeracaoFatura "
    sWhere = " WHERE FilialEmpresa = ? AND Cliente = ? "
    sOrderBy = " ORDER BY " & objGeracaoFatura.sOrdenacao
    
    If objGeracaoFatura.iFilialCli <> 0 Then sWhere = sWhere & " AND FilialCli = ?"
    
    If objGeracaoFatura.sSerie <> "" Then sWhere = sWhere & " AND Serie = ?"
    
    If objGeracaoFatura.lNumeroNFDe <> 0 Then sWhere = sWhere & " AND NumNotaFiscal >= ?"

    If objGeracaoFatura.lNumeroNFAte <> 0 Then sWhere = sWhere & " AND NumNotaFiscal <= ?"

    If objGeracaoFatura.dtEmissaoNFDe <> DATA_NULA Then sWhere = sWhere & " AND DataEmissao >= ?"

    If objGeracaoFatura.dtEmissaoNFAte <> DATA_NULA Then sWhere = sWhere & " AND DataEmissao <= ?"

    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

    Exit Sub

End Sub

Function GeracaoFatura_ObterNFs2(lComando As Long, sSelect As String, vFilialEmpresa As Variant, vCliente As Variant, vNFsNumIntDoc As Variant, vNFsRecSerie As Variant, vNFsRecNumNotaFiscal As Variant, vNFsRecDataEmissao As Variant, vNFsRecValorTotal As Variant, vClientesNomeReduzido As Variant, vsSigla As Variant, vdISSValor As Variant, vFaturavel As Variant, viFilialCli As Variant, viStatus As Variant) As Long
'preparar parte fixa do SELECT
Dim RET As Integer, lErro As Long

On Error GoTo Erro_GeracaoFatura_ObterNFs2

    RET = Comando_PrepararInt(lComando, sSelect)
    If (RET <> AD_SQL_SUCESSO) Then gError 27203

    RET = Comando_BindVarInt(lComando, vNFsNumIntDoc)
    If (RET <> AD_SQL_SUCESSO) Then gError 20545
    
    RET = Comando_BindVarInt(lComando, vNFsRecSerie)
    If (RET <> AD_SQL_SUCESSO) Then gError 27205

    RET = Comando_BindVarInt(lComando, vNFsRecNumNotaFiscal)
    If (RET <> AD_SQL_SUCESSO) Then gError 27206

    RET = Comando_BindVarInt(lComando, vNFsRecDataEmissao)
    If (RET <> AD_SQL_SUCESSO) Then gError 27207

    RET = Comando_BindVarInt(lComando, vNFsRecValorTotal)
    If (RET <> AD_SQL_SUCESSO) Then gError 27208

    RET = Comando_BindVarInt(lComando, vClientesNomeReduzido)
    If (RET <> AD_SQL_SUCESSO) Then gError 27209

    RET = Comando_BindVarInt(lComando, vsSigla)
    If (RET <> AD_SQL_SUCESSO) Then gError 31276
    
    RET = Comando_BindVarInt(lComando, vdISSValor)
    If (RET <> AD_SQL_SUCESSO) Then gError 27210
    
    RET = Comando_BindVarInt(lComando, viFilialCli)
    If (RET <> AD_SQL_SUCESSO) Then gError 27210
    
    RET = Comando_BindVarInt(lComando, vFilialEmpresa)
    If (RET <> AD_SQL_SUCESSO) Then gError 27210

    RET = Comando_BindVarInt(lComando, vCliente)
    If (RET <> AD_SQL_SUCESSO) Then gError 27211

    GeracaoFatura_ObterNFs2 = SUCESSO

    Exit Function

Erro_GeracaoFatura_ObterNFs2:

    GeracaoFatura_ObterNFs2 = gErr

    Select Case gErr

        Case 20545, 27203 To 27211, 31276, 31277, 64450
            lErro = Rotina_Erro(vbOKOnly, ERRO_LEITURA_NFSREC_GERACAO_FATURA, gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 150093)

    End Select

    Exit Function

End Function

Function GeracaoFatura_ObterNFs3(ByVal lComando As Long, ByVal objGeracaoFatura As ClassGeracaoFatura) As Long
'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
'e executa o SELECT p/obtencao das NFs
Dim lErro As Long, viFilialCli As Variant
Dim vsSerie As Variant, vlNumeroNFDe As Variant, vlNumeroNFAte As Variant, vdtEmissaoNFDe As Variant, vdtEmissaoNFAte As Variant
On Error GoTo Erro_GeracaoFatura_ObterNFs3

    If objGeracaoFatura.iFilialCli <> 0 Then
        viFilialCli = objGeracaoFatura.iFilialCli
        lErro = Comando_BindVarInt(lComando, viFilialCli)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27197
    End If

    If objGeracaoFatura.sSerie <> "" Then
        vsSerie = objGeracaoFatura.sSerie
        lErro = Comando_BindVarInt(lComando, vsSerie)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27197
    End If

    If objGeracaoFatura.lNumeroNFDe <> 0 Then
        vlNumeroNFDe = objGeracaoFatura.lNumeroNFDe
        lErro = Comando_BindVarInt(lComando, vlNumeroNFDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27198
    End If

    If objGeracaoFatura.lNumeroNFAte <> 0 Then
        vlNumeroNFAte = objGeracaoFatura.lNumeroNFAte
        lErro = Comando_BindVarInt(lComando, vlNumeroNFAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27199
    End If

    If objGeracaoFatura.dtEmissaoNFDe <> DATA_NULA Then
        vdtEmissaoNFDe = objGeracaoFatura.dtEmissaoNFDe
        lErro = Comando_BindVarInt(lComando, vdtEmissaoNFDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27200
    End If

    If objGeracaoFatura.dtEmissaoNFAte <> DATA_NULA Then
        vdtEmissaoNFAte = objGeracaoFatura.dtEmissaoNFAte
        lErro = Comando_BindVarInt(lComando, vdtEmissaoNFAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27201
    End If

    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27202
    
    GeracaoFatura_ObterNFs3 = SUCESSO

    Exit Function

Erro_GeracaoFatura_ObterNFs3:

    GeracaoFatura_ObterNFs3 = Err

    Select Case Err

        Case 27197 To 27202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSREC_GERACAO_FATURA", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150094)

    End Select

    Exit Function

End Function

Function GeracaoFatura_ObterNFs4(ByVal lComando As Long, ByVal objGeracaoFatura As ClassGeracaoFatura, lNFsNumIntDoc As Long, sNFsRecSerie As String, lNFsRecNumNotaFiscal As Long, dtNFsRecDataEmissao As Date, dNFsRecValorTotal As Double, sClientesNomeReduzido As String, sSigla As String, dISSValor As Double, iFilial As Integer) As Long
Dim lErro As Long, objNFiscalInfo As ClassNFiscalInfo
'processar os registros lidos
On Error GoTo Erro_GeracaoFatura_ObterNFs4

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27194

    If lErro = AD_SQL_SEM_DADOS Then Error 27195

    Do While lErro = AD_SQL_SUCESSO

        Set objNFiscalInfo = New ClassNFiscalInfo
        
        objNFiscalInfo.iFilialEmpresa = giFilialEmpresa
        objNFiscalInfo.lNumIntDoc = lNFsNumIntDoc
        objNFiscalInfo.sSerie = sNFsRecSerie
        objNFiscalInfo.lNumero = lNFsRecNumNotaFiscal
        objNFiscalInfo.lCliente = objGeracaoFatura.lCliente
        objNFiscalInfo.sClienteNomeReduzido = sClientesNomeReduzido
        objNFiscalInfo.iFilialCliente = iFilial
        objNFiscalInfo.dtEmissao = dtNFsRecDataEmissao
        objNFiscalInfo.dValorTotal = dNFsRecValorTotal
        objNFiscalInfo.iMarcada = DESMARCADO
        objNFiscalInfo.sSiglaDoc = sSigla
        objNFiscalInfo.dISSValor = dISSValor
        
        objGeracaoFatura.colNFiscalInfo.Add objNFiscalInfo

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27196

    Loop

    GeracaoFatura_ObterNFs4 = SUCESSO

    Exit Function

Erro_GeracaoFatura_ObterNFs4:

    GeracaoFatura_ObterNFs4 = Err

    Select Case Err

        Case 27194, 27196
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSREC_GERACAO_FATURA", Err)

        Case 27195
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SEM_NFSREC_GERACAO_FATURA", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150095)

    End Select

    Exit Function

End Function

Function Series_Le(ByVal colSerie As colSerie) As Long
'Lê todos as Séries de giFilialEmpresa contidas na tabela Serie e as coloca na coleçao colSerie

Dim lErro As Long
Dim lComando As Long
Dim sSerie As String
Dim lProxNumNFiscal As Long
Dim lProxNumNFiscalEntrada As Long
Dim iEletronica As Integer, iModDocFis As Integer
Dim objSerie As ClassSerie

On Error GoTo Erro_Series_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22224

    sSerie = String(STRING_SERIE, 0)

    'Lê a tabela Serie
    lErro = Comando_Executar(lComando, "SELECT Serie, ProxNumNFiscal, ProxNumNFiscalEntrada, Eletronica, ModDocFis FROM Serie WHERE FilialEmpresa = ? ORDER BY Serie", sSerie, lProxNumNFiscal, lProxNumNFiscalEntrada, iEletronica, iModDocFis, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 22225

    'Lê o primeiro Histórico
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22226

    'Enquanto a tabela tiver dados
    Do While lErro <> AD_SQL_SEM_DADOS

        'Coloca a Serie lida na coleção
         Set objSerie = colSerie.Add(giFilialEmpresa, sSerie, lProxNumNFiscal, lProxNumNFiscalEntrada, 0, 0, 0, 0)
        
        objSerie.iEletronica = iEletronica
        objSerie.iModDocFis = iModDocFis

        'Lê a próxima Serie
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22227

    Loop

    Call Comando_Fechar(lComando)

    Series_Le = SUCESSO

    Exit Function

Erro_Series_Le:

    Series_Le = Err

    Select Case Err

        Case 22224
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22225, 22226, 22227
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150096)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Serie_Le(ByVal objSerie As ClassSerie) As Long
'Lê a Serie a partir do código em objSerie.
'Devolve os dados em objSerie.

Dim lComando As Long
Dim lErro As Long, iMaxLinhasNF As Integer
Dim tSerie As typeSerie, iFilialEmpresa As Integer

On Error GoTo Erro_Serie_Le

    tSerie.sSerie = String(STRING_SERIE, 0)
    tSerie.sNomeTsk = String(STRING_NOME_TSK, 0)

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22199

    iFilialEmpresa = objSerie.iFilialEmpresa
    If iFilialEmpresa = 0 Then iFilialEmpresa = giFilialEmpresa
    
    'Verifica se a Serie existe, e se existir carrega seus dados em objSerie
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Serie, ProxNumNFiscal, ProxNumNFiscalEntrada, ProxNumNFiscalImpressa, Imprimindo, TipoFormulario, NomeTsk, MaxLinhasNF, Eletronica, ModDocFis FROM Serie WHERE FilialEmpresa = ?  AND Serie = ?", tSerie.iFilialEmpresa, tSerie.sSerie, tSerie.lProxNumNFiscal, tSerie.lProxNumNFiscalEntrada, tSerie.lProxNumNFiscalImpressa, tSerie.iImprimindo, tSerie.iTipoFormulario, tSerie.sNomeTsk, iMaxLinhasNF, tSerie.iEletronica, tSerie.iModDocFis, iFilialEmpresa, objSerie.sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 22200

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22201

    'Serie não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 22202

    'Carrega os dados lidos no objSerie
    objSerie.iFilialEmpresa = tSerie.iFilialEmpresa
    objSerie.sSerie = tSerie.sSerie
    objSerie.lProxNumNFiscal = tSerie.lProxNumNFiscal
    objSerie.lProxNumNFiscalEntrada = tSerie.lProxNumNFiscalEntrada
    objSerie.lProxNumNFiscalImpressa = tSerie.lProxNumNFiscalImpressa
    objSerie.iImprimindo = tSerie.iImprimindo
    objSerie.iTipoFormulario = tSerie.iTipoFormulario
    objSerie.sNomeTsk = tSerie.sNomeTsk
    objSerie.iMaxLinhasNF = iMaxLinhasNF
    objSerie.iEletronica = tSerie.iEletronica
    objSerie.iModDocFis = tSerie.iModDocFis
    
    Call Comando_Fechar(lComando)

    Serie_Le = SUCESSO

    Exit Function

Erro_Serie_Le:

    Serie_Le = Err

    Select Case Err

        Case 22199
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22200, 22201
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case 22202 'Serie não cadastrada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150097)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

''Function PedidoDeVenda_Le_Comissoes(objPedidoDeVenda As ClassPedidoDeVenda) As Long
'''carrega em colComissoes a colecao com as comissoes do PV passado em objPedidoDeVenda
''
''Dim lErro As Long
''Dim iIndice As Integer
''Dim lComando As Long
''Dim lComando1 As Long
''Dim tComissaoPedidoVenda As typeComissaoPedVenda
''Dim tPedidoDeVenda As typePedidoVenda
''
''On Error GoTo Erro_PedidoDeVenda_Le_Comissoes
''
''    'Abertura comando
''    lComando = 0
''    lComando1 = 0
''
''    lComando = Comando_Abrir()
''    If lComando = 0 Then Error 21360
''    lComando1 = Comando_Abrir()
''    If lComando1 = 0 Then Error 21361
''
''    Set objPedidoDeVenda.colComissoes = New ColComissaoPV
''
''    lErro = Comando_Executar(lComando1, "SELECT Cliente, Filial, DataEmissao, ValorTotal FROM PedidosDeVenda WHERE FilialEmpresa = ? AND Codigo = ?", _
''    tPedidoDeVenda.lCliente, tPedidoDeVenda.iFilial, tPedidoDeVenda.dtDataEmissao, tPedidoDeVenda.dValorTotal, objPedidoDeVenda.iFilialEmpresa, objPedidoDeVenda.lCodigo)
''    If lErro <> AD_SQL_SUCESSO Then Error 21362
''
''    lErro = Comando_BuscarPrimeiro(lComando1)
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21363
''
''    If lErro = AD_SQL_SEM_DADOS Then Error 21364
''
''    objPedidoDeVenda.lCliente = tPedidoDeVenda.lCliente
''    objPedidoDeVenda.iFilial = tPedidoDeVenda.iFilial
''    objPedidoDeVenda.dtDataEmissao = tPedidoDeVenda.dtDataEmissao
''    objPedidoDeVenda.dValorTotal = tPedidoDeVenda.dValorTotal
''
''    lErro = Comando_Executar(lComando, "SELECT CodVendedor, ValorBase, Percentual, Valor, PercentualEmissao, ValorEmissao " & _
''    "FROM ComissoesPedVendas WHERE FilialEmpresa = ? AND PedidoDeVendas = ? ORDER BY CodVendedor", tComissaoPedidoVenda.iCodVendedor, tComissaoPedidoVenda.dValorBase, tComissaoPedidoVenda.dPercentual, _
''    tComissaoPedidoVenda.dValor, tComissaoPedidoVenda.dPercentualEmissao, tComissaoPedidoVenda.dValorEmissao, objPedidoDeVenda.iFilialEmpresa, objPedidoDeVenda.lCodigo)
''    If lErro <> AD_SQL_SUCESSO Then Error 21365
''
''    lErro = Comando_BuscarPrimeiro(lComando)
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21366
''
''    If lErro = AD_SQL_SEM_DADOS Then Error 21367
''
''    Do While lErro <> AD_SQL_SEM_DADOS
''
''        objPedidoDeVenda.colComissoes.Add _
''        tComissaoPedidoVenda.iCodVendedor, tComissaoPedidoVenda.dValorBase, tComissaoPedidoVenda.dPercentual, tComissaoPedidoVenda.dValor, _
''        tComissaoPedidoVenda.dPercentualEmissao, tComissaoPedidoVenda.dValorEmissao
''
''        lErro = Comando_BuscarProximo(lComando)
''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21368
''
''    Loop
''
''    Call Comando_Fechar(lComando)
''    Call Comando_Fechar(lComando1)
''
''    PedidoDeVenda_Le_Comissoes = SUCESSO
''
''    Exit Function
''
''Erro_PedidoDeVenda_Le_Comissoes:
''
''PedidoDeVenda_Le_Comissoes = Err
''
''    Select Case Err
''
''        Case 21360, 21361
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err, Error$)
''
''        Case 21362, 21363
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", Err, objPedidoDeVenda.lCodigo)
''
''        Case 21364
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO", Err, objPedidoDeVenda.lCodigo)
''
''        Case 21365, 21366, 21368
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESPEDVENDAS", Err)
''
''        Case 21367
''
''        Case Else
''             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150098)
''
''    End Select
''
''    Call Comando_Fechar(lComando)
''    Call Comando_Fechar(lComando1)
''
''    Exit Function
''
''End Function

Function ReservaItem_Le(ByVal objItemPedido As ClassItemPedido, ByVal objReservaBD As ClassReserva) As Long
'Lê a Reserva com o Produto, FilialEmpresa e Código de Pedido do Ítem passado e com o Almoxarifado Passado no objReserva

Dim lErro As Long
Dim lComando As Long
Dim dQuantidade As Double
Dim dtDataValidade As Date
Dim iAlmoxarifado As Integer
Dim sAlmoxarifado As String
Dim sResponsavel As String

On Error GoTo Erro_ReservaItem_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 26675
    
    sResponsavel = String(STRING_RESERVA_RESPONSAVEL, 0)
    sAlmoxarifado = String(STRING_ALMOXARIFADO_NOME_REDUZIDO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Quantidade, DataValidade, Responsavel, NomeReduzido FROM Reserva, Almoxarifado WHERE Reserva.FilialEmpresa = ? AND Reserva.Produto = ? AND Reserva.TipoDoc = ? AND Reserva.DocOrigem = ? AND Reserva.Almoxarifado = ? AND Reserva.Almoxarifado = Almoxarifado.Codigo", dQuantidade, dtDataValidade, sResponsavel, sAlmoxarifado, objItemPedido.iFilialEmpresa, objItemPedido.sProduto, TIPO_PEDIDO_COD, objItemPedido.lCodPedido, objReservaBD.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 26676
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26677
    
    If lErro = AD_SQL_SEM_DADOS Then Error 26678
    
    objReservaBD.dQuantidade = dQuantidade
    objReservaBD.dtDataValidade = dtDataValidade
    objReservaBD.iAlmoxarifado = iAlmoxarifado
    objReservaBD.sAlmoxarifado = sAlmoxarifado
    objReservaBD.sResponsavel = sResponsavel
    
    Call Comando_Fechar(lComando)
   
    ReservaItem_Le = SUCESSO
    
    Exit Function

Erro_ReservaItem_Le:

    ReservaItem_Le = Err
    
    Select Case Err
    
        Case 26675
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150099)
        
        Case 26676, 26677
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 26678
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150100)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CanalVenda_Le(ByVal objCanal As ClassCanalVenda) As Long
'Lê os dados do Canal, cujo codigo foi passado como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim sNomeReduzido As String
Dim sNome As String

On Error GoTo Erro_CanalVenda_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23594

    sNomeReduzido = String(STRING_CANAL_VENDA_NOME_REDUZIDO, 0)
    sNome = String(STRING_CANAL_VENDA_NOME, 0)

    lErro = Comando_Executar(lComando, "SELECT  NomeReduzido,Nome FROM CanalVenda WHERE Codigo = ? ", sNomeReduzido, sNome, objCanal.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23595

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23596

    If lErro = AD_SQL_SEM_DADOS Then Error 23597

    objCanal.sNomeReduzido = sNomeReduzido
    objCanal.sNome = sNome

    lErro = Comando_Fechar(lComando)

    CanalVenda_Le = SUCESSO

    Exit Function

Erro_CanalVenda_Le:

    CanalVenda_Le = Err

    Select Case Err

        Case 23594
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23595, 23596
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CANALVENDA", Err, Error$)

        Case 23597
            'lErro = Rotina_Erro(vbOKOnly, "ERRO_CANALVENDA_NAO_CADASTRADO", Err, objCanal.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150101)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TipoDeBloqueio_Le(ByVal objTipo As ClassTipoDeBloqueio) As Long
'Lê os dados do Tipo, cujo codigo foi passado como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim sNomeReduzido As String
Dim sDescricao As String

On Error GoTo Erro_TipoDeBloqueio_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23663

    sNomeReduzido = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    sDescricao = String(STRING_TIPO_BLOQUEIO_DESCRICAO, 0)

    lErro = Comando_Executar(lComando, "SELECT  NomeReduzido,Descricao FROM TiposdeBloqueio WHERE Codigo = ? ", sNomeReduzido, sDescricao, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23664

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23665

    If lErro = AD_SQL_SEM_DADOS Then Error 23666

    objTipo.sNomeReduzido = sNomeReduzido
    objTipo.sDescricao = sDescricao

    lErro = Comando_Fechar(lComando)

    TipoDeBloqueio_Le = SUCESSO

    Exit Function

Erro_TipoDeBloqueio_Le:

    TipoDeBloqueio_Le = Err

    Select Case Err

        Case 23663
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23664, 23665
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEBLOQUEIO", Err, Error$)

        Case 23666
            'lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPODEBLOQUEIO_NAO_CADASTRADO", Err, objTipo.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150102)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PedidoDeVenda_Le_Completo(ByVal objPedidoVenda As ClassPedidoDeVenda, Optional ByVal iTestaAbrirItensGrade As Integer = 0) As Long
'Lê o Pedido de Venda a partir do Código passado (incluindo tributacao, itens de pedido, parcelas, Comissoes, bloqueios)

Dim lErro As Long
Dim objOrcamentoVenda As New ClassOrcamentoVenda

On Error GoTo Erro_PedidoDeVenda_Le_Completo

    lErro = CF("PedidoDeVenda_Le", objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 26509 Then gError 27608
    If lErro = 26509 Then gError 27633

    If iTestaAbrirItensGrade = MARCADO Then

        'verifica se tem itens de grade...se tiver pergunta se quer abrir...se quiser abre os itens de pedido
        lErro = CF("PedidoDeVenda_Abre_Itens_Grade", objPedidoVenda)
        If lErro <> SUCESSO Then gError 126734
    
    End If

    lErro = CF("PedidoDeVenda_Le_Tributacao", objPedidoVenda)
    If lErro <> SUCESSO Then gError 27613
    
    'ler parcelas
    lErro = CF("ParcelasPV_Le", objPedidoVenda)
    If lErro <> SUCESSO Then gError 27614
    
    'ler Comissoes
    lErro = CF("ComissoesPV_Le", objPedidoVenda)
    If lErro <> SUCESSO Then gError 27615
    
    'ler bloqueios
    lErro = CF("BloqueiosPV_Le", objPedidoVenda)
    If lErro <> SUCESSO Then gError 27616
    
    'ler itens c/tributacao
    lErro = CF("PedidoDeVenda_Le_Itens_ComTributacao", objPedidoVenda)
    If lErro <> SUCESSO Then gError 27617
    '???? leo voltar aqui e descomentar
    'Trecho Incluido por Leo em 25/04/02 ************
'    objOrcamentoVenda.lNumIntPedVenda = objPedidoVenda.lNumIntDoc
'
'    'Lê em OrcamentoVenda se existe um Orcamento Vinculado ao Pedido
'    lErro = OrcamentoVenda_Le_NumIntPedVenda(objOrcamentoVenda) '??? Deverá ser chamado por CF após a colocação da função em seu local de destino
'    If lErro <> SUCESSO And lErro <> 94456 Then gError 94458
'
'    objPedidoVenda.lNumIntOrcVenda = objOrcamentoVenda.lNumIntDoc
    'Trecho Incluido por Leo em 25/04/02 até aqui ************
    
    'Lê o Pedido de Venda
    lErro = CF("ItensPVEntrega_Le", objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 26509 Then gError 183246
    
    objPedidoVenda.objInfoAdic.iTipoDoc = TIPODOC_INFOADIC_PV
    objPedidoVenda.objInfoAdic.lNumIntDoc = objPedidoVenda.lNumIntDoc
    lErro = CF("InfoAdicionais_Le", objPedidoVenda.objInfoAdic)
    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 183246
    
    PedidoDeVenda_Le_Completo = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_Completo:

    PedidoDeVenda_Le_Completo = gErr

    Select Case gErr

        Case 27613 To 27617, 27633, 94458, 126734, 183246
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150103)

    End Select

    Exit Function

End Function

Function PedidoDeVenda_Le_Tributacao(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

'Dim lComando As Long, tTributacaoPV As typeTributacaoPV, objTributacaoPV As New ClassTributacaoPV
Dim lErro As Long

On Error GoTo Erro_PedidoDeVenda_Le_Tributacao

'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 27607
'
'    'ler tributacaopv
'    With tTributacaoPV
'        lErro = Comando_Executar(lComando, "SELECT TaxacaoAutomatica, TipoTributacao, TipoTributacaoManual, IPIBase, IPIBaseManual, IPIValor, IPIValorManual, ICMSBase, ICMSBaseManual, ICMSValor, ICMSValorManual, ICMSSubstBase, ICMSSubstBaseManual, ICMSSubstValor, ICMSSubstValorManual, ISSIncluso, " & _
'            "ISSBase, ISSAliquota, ISSAliquotaManual, ISSValor, ISSValorManual, IRRFBase, IRRFAliquota, IRRFAliquotaManual, IRRFValor, IRRFValorManual, PISRetidoManual, ISSRetidoManual, COFINSRetidoManual, CSLLRetidoManual, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, " & _
'            "PISCredito,PISCreditoManual,COFINSCredito,COFINSCreditoManual,IPICredito,IPICreditoManual,ICMSCredito,ICMSCreditoManual,ValorINSS,ValorINSSManual,INSSRetido,INSSRetidoManual,INSSValorBase,INSSValorBaseManual,INSSValorDeducoes ,INSSValorDeducoesManual FROM TributacaoPV WHERE FilialEmpresa = ? AND CodPedido = ?", _
'            .iTaxacaoAutomatica, .iTipoTributacao, .iTipoTributacaoManual, .dIPIBase, .iIPIBaseManual, .dIPIValor, .iIPIValorManual, .dICMSBase, .iICMSBaseManual, .dICMSValor, .iICMSValorManual, .dICMSSubstBase, .iICMSSubstBaseManual, .dICMSSubstValor, .iICMSSubstValorManual, .iISSIncluso, _
'            .dISSBase, .dISSAliquota, .iISSAliquotaManual, .dISSValor, .iISSValorManual, .dIRRFBase, .dIRRFAliquota, .iIRRFAliquotaManual, .dIRRFValor, .iIRRFValorManual, .iPISRetidoManual, .iISSRetidoManual, .iCOFINSRetidoManual, .iCSLLRetidoManual, .dPISRetido, .dISSRetido, .dCOFINSRetido, .dCSLLRetido, _
'            .dPISCredito, .iPISCreditoManual, .dCOFINSCredito, .iCOFINSCreditoManual, .dIPICredito, .iIPICreditoManual, .dICMSCredito, .iICMSCreditoManual, .dValorINSS, .iINSSValorManual, .iINSSRetido, .iINSSRetidoManual, .dINSSBase, .iINSSBaseManual, .dINSSDeducoes, .iINSSDeducoesManual, _
'            objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
'        If lErro <> AD_SQL_SUCESSO Then Error 27609
'    End With
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27610
'
'    If lErro = AD_SQL_SEM_DADOS Then Error 27611
'
'    objPedidoVenda.iNaturezaOpManual = VAR_PREENCH_MANUAL
'    objTributacaoPV.lCodPedido = objPedidoVenda.lCodigo
'    objTributacaoPV.iFilialEmpresa = giFilialEmpresa
'
'    'transferir dados lidos p/objeto
'    With objTributacaoPV
'
'        .iTaxacaoAutomatica = tTributacaoPV.iTaxacaoAutomatica
'        .iTipoTributacao = tTributacaoPV.iTipoTributacao
'        .iTipoTributacaoManual = tTributacaoPV.iTipoTributacaoManual
'        .dIPIBase = tTributacaoPV.dIPIBase
'        .iIPIBaseManual = tTributacaoPV.iIPIBaseManual
'        .dIPIValor = tTributacaoPV.dIPIValor
'        .iIPIValorManual = tTributacaoPV.iIPIValorManual
'        .dICMSBase = tTributacaoPV.dICMSBase
'        .iICMSBaseManual = tTributacaoPV.iICMSBaseManual
'        .dICMSValor = tTributacaoPV.dICMSValor
'        .iICMSValorManual = tTributacaoPV.iICMSValorManual
'        .dICMSSubstBase = tTributacaoPV.dICMSSubstBase
'        .iICMSSubstBaseManual = tTributacaoPV.iICMSSubstBaseManual
'        .dICMSSubstValor = tTributacaoPV.dICMSSubstValor
'        .iICMSSubstValorManual = tTributacaoPV.iICMSSubstValorManual
'        .iISSIncluso = tTributacaoPV.iISSIncluso
'        .dISSBase = tTributacaoPV.dISSBase
'        .dISSAliquota = tTributacaoPV.dISSAliquota
'        .iISSAliquotaManual = tTributacaoPV.iISSAliquotaManual
'        .dISSValor = tTributacaoPV.dISSValor
'        .iISSValorManual = tTributacaoPV.iISSValorManual
'        .dIRRFBase = tTributacaoPV.dIRRFBase
'        .dIRRFAliquota = tTributacaoPV.dIRRFAliquota
'        .iIRRFAliquotaManual = tTributacaoPV.iIRRFAliquotaManual
'        .dIRRFValor = tTributacaoPV.dIRRFValor
'        .iIRRFValorManual = tTributacaoPV.iIRRFValorManual
'        .dPISRetido = tTributacaoPV.dPISRetido
'        .iPISRetidoManual = tTributacaoPV.iPISRetidoManual
'        .dISSRetido = tTributacaoPV.dISSRetido
'        .iISSRetidoManual = tTributacaoPV.iISSRetidoManual
'        .dCOFINSRetido = tTributacaoPV.dCOFINSRetido
'        .iCOFINSRetidoManual = tTributacaoPV.iCOFINSRetidoManual
'        .dCSLLRetido = tTributacaoPV.dCSLLRetido
'        .iCSLLRetidoManual = tTributacaoPV.iCSLLRetidoManual
'
'        .dPISCredito = tTributacaoPV.dPISCredito
'        .iPISCreditoManual = tTributacaoPV.iPISCreditoManual
'        .dCOFINSCredito = tTributacaoPV.dCOFINSCredito
'        .iCOFINSCreditoManual = tTributacaoPV.iCOFINSCreditoManual
'        .dIPICredito = tTributacaoPV.dIPICredito
'        .iIPICreditoManual = tTributacaoPV.iIPICreditoManual
'        .dICMSCredito = tTributacaoPV.dICMSCredito
'        .iICMSCreditoManual = tTributacaoPV.iICMSCreditoManual
'        .dValorINSS = tTributacaoPV.dValorINSS
'        .iINSSValorManual = tTributacaoPV.iINSSValorManual
'        .iINSSRetido = tTributacaoPV.iINSSRetido
'        .iINSSRetidoManual = tTributacaoPV.iINSSRetidoManual
'        .dINSSBase = tTributacaoPV.dINSSBase
'        .iINSSBaseManual = tTributacaoPV.iINSSBaseManual
'        .dINSSDeducoes = tTributacaoPV.dINSSDeducoes
'        .iINSSDeducoesManual = tTributacaoPV.iINSSDeducoesManual
'    End With
'
'    Set objPedidoVenda.objTributacaoPV = objTributacaoPV
'
'    lErro = PedidoDeVenda_Le_Complementos(objPedidoVenda)
'    If lErro <> SUCESSO Then Error 27612
'
'    Call Comando_Fechar(lComando)

    objPedidoVenda.objTributacao.iTipoDoc = TIPODOC_TRIB_PV
    objPedidoVenda.objTributacao.lNumIntDoc = objPedidoVenda.lNumIntDoc

    lErro = CF("TributacaoDoc_Le", objPedidoVenda.objTributacao)
    If lErro <> SUCESSO Then gError 27611

    PedidoDeVenda_Le_Tributacao = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_Tributacao:

    PedidoDeVenda_Le_Tributacao = Err

    Select Case Err

'        Case 27607
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 27609, 27610, 27612
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", Err, objPedidoVenda.lCodigo)
'
        Case 27611

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150104)

    End Select

'    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Private Function PedidoDeVenda_Le_Complementos(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'
'Dim lComando As Long, objTributacaoPV As ClassTributacaoPV
'Dim tTributacaoComplPV As typeTributacaoComplPV, objTributacaoItemPV As ClassTributacaoItemPV
'Dim lErro As Long
'
'On Error GoTo Erro_PedidoDeVenda_Le_Complementos
'
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 27602
'
'    Set objTributacaoPV = objPedidoVenda.objTributacaoPV
'
'    tTributacaoComplPV.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
'
'    'ler dados de frete, seguro, despesas, descontos da tabela TributacaoComplPV
'    lErro = Comando_Executar(lComando, "SELECT Item, NaturezaOp, NaturezaOpManual, TipoTributacao, TipoTributacaoManual, IPITipo, IPITipoManual, IPIBaseCalculo, IPIBaseManual, IPIPercRedBase, IPIPercRedBaseManual, IPIAliquota, " & _
'        "IPIAliquotaManual, IPIValor, IPIValorManual, ICMSTipo, ICMSTipoManual, ICMSBase, ICMSBaseManual, ICMSPercRedBase, ICMSPercRedBaseManual, ICMSAliquota, ICMSAliquotaManual, ICMSValor, ICMSValorManual, ICMSSubstBase, ICMSSubstBaseManual, " & _
'        "ICMSSubstAliquota, ICMSSubstAliquotaManual, ICMSSubstValor, ICMSSubstValorManual, ICMSCredito, IPICredito, PISCredito, COFINSCredito FROM TributacaoComplPV WHERE FilialEmpresa = ? AND CodPedido = ?", _
'        tTributacaoComplPV.iItem, tTributacaoComplPV.sNaturezaOp, tTributacaoComplPV.iNaturezaOpManual, tTributacaoComplPV.iTipoTributacao, tTributacaoComplPV.iTipoTributacaoManual, tTributacaoComplPV.iIPITipo, tTributacaoComplPV.iIPITipoManual, tTributacaoComplPV.dIPIBaseCalculo, tTributacaoComplPV.iIPIBaseManual, tTributacaoComplPV.dIPIPercRedBase, _
'        tTributacaoComplPV.iIPIPercRedBaseManual, tTributacaoComplPV.dIPIAliquota, tTributacaoComplPV.iIPIAliquotaManual, tTributacaoComplPV.dIPIValor, tTributacaoComplPV.iIPIValorManual, tTributacaoComplPV.iICMSTipo, tTributacaoComplPV.iICMSTipoManual, tTributacaoComplPV.dICMSBase, tTributacaoComplPV.iICMSBaseManual, tTributacaoComplPV.dICMSPercRedBase, _
'        tTributacaoComplPV.iICMSPercRedBaseManual, tTributacaoComplPV.dICMSAliquota, tTributacaoComplPV.iICMSAliquotaManual, tTributacaoComplPV.dICMSValor, tTributacaoComplPV.iICMSValorManual, tTributacaoComplPV.dICMSSubstBase, tTributacaoComplPV.iICMSSubstBaseManual, _
'        tTributacaoComplPV.dICMSSubstAliquota, tTributacaoComplPV.iICMSSubstAliquotaManual, tTributacaoComplPV.dICMSSubstValor, tTributacaoComplPV.iICMSSubstValorManual, tTributacaoComplPV.dICMSCredito, tTributacaoComplPV.dIPICredito, tTributacaoComplPV.dPISCredito, tTributacaoComplPV.dCOFINSCredito, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
'    If lErro <> AD_SQL_SUCESSO Then Error 27603
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27604
'
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        Set objTributacaoItemPV = New ClassTributacaoItemPV
'
'        With objTributacaoItemPV
'
'            .lNumIntDoc = tTributacaoComplPV.iItem
'            .sNaturezaOp = tTributacaoComplPV.sNaturezaOp
'            .iNaturezaOpManual = tTributacaoComplPV.iNaturezaOpManual
'            .iTipoTributacao = tTributacaoComplPV.iTipoTributacao
'            .iTipoTributacaoManual = tTributacaoComplPV.iTipoTributacaoManual
'            .iIPITipo = tTributacaoComplPV.iIPITipo
'            .iIPITipoManual = tTributacaoComplPV.iIPITipoManual
'            .dIPIBaseCalculo = tTributacaoComplPV.dIPIBaseCalculo
'            .iIPIBaseManual = tTributacaoComplPV.iIPIBaseManual
'            .dIPIPercRedBase = tTributacaoComplPV.dIPIPercRedBase
'            .iIPIPercRedBaseManual = tTributacaoComplPV.iIPIPercRedBaseManual
'            .dIPIAliquota = tTributacaoComplPV.dIPIAliquota
'            .iIPIAliquotaManual = tTributacaoComplPV.iIPIAliquotaManual
'            .dIPIValor = tTributacaoComplPV.dIPIValor
'            .iIPIValorManual = tTributacaoComplPV.iIPIValorManual
'            .iICMSTipo = tTributacaoComplPV.iICMSTipo
'            .iICMSTipoManual = tTributacaoComplPV.iICMSTipoManual
'            .dICMSBase = tTributacaoComplPV.dICMSBase
'            .iICMSBaseManual = tTributacaoComplPV.iICMSBaseManual
'            .dICMSPercRedBase = tTributacaoComplPV.dICMSPercRedBase
'            .iICMSPercRedBaseManual = tTributacaoComplPV.iICMSPercRedBaseManual
'            .dICMSAliquota = tTributacaoComplPV.dICMSAliquota
'            .iICMSAliquotaManual = tTributacaoComplPV.iICMSAliquotaManual
'            .dICMSValor = tTributacaoComplPV.dICMSValor
'            .iICMSValorManual = tTributacaoComplPV.iICMSValorManual
'            .dICMSSubstBase = tTributacaoComplPV.dICMSSubstBase
'            .iICMSSubstBaseManual = tTributacaoComplPV.iICMSSubstBaseManual
'            .dICMSSubstAliquota = tTributacaoComplPV.dICMSSubstAliquota
'            .iICMSSubstAliquotaManual = tTributacaoComplPV.iICMSSubstAliquotaManual
'            .dICMSSubstValor = tTributacaoComplPV.dICMSSubstValor
'            .iICMSSubstValorManual = tTributacaoComplPV.iICMSSubstValorManual
'            .dICMSCredito = tTributacaoComplPV.dICMSCredito
'            .dIPICredito = tTributacaoComplPV.dIPICredito
'            .dPISCredito = tTributacaoComplPV.dPISCredito
'            .dCOFINSCredito = tTributacaoComplPV.dCOFINSCredito
'
'        End With
'
'        Select Case tTributacaoComplPV.iItem
'
'            Case ITEM_TIPO_FRETE
'                Set objTributacaoPV.objTributacaoFrete = objTributacaoItemPV
'
'            Case ITEM_TIPO_SEGURO
'                Set objTributacaoPV.objTributacaoSeguro = objTributacaoItemPV
'
'            Case ITEM_TIPO_DESCONTO
'                Set objTributacaoPV.objTributacaoDesconto = objTributacaoItemPV
'
'            Case ITEM_TIPO_OUTRAS_DESP
'                Set objTributacaoPV.objTributacaoOutras = objTributacaoItemPV
'
'            Case Else 'item invalido
'                Error 27605
'
'        End Select
'
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27606
'
'    Loop
'
'    Call Comando_Fechar(lComando)
'
'    PedidoDeVenda_Le_Complementos = SUCESSO
'
'    Exit Function
'
'Erro_PedidoDeVenda_Le_Complementos:
'
'    PedidoDeVenda_Le_Complementos = Err
'
'    Select Case Err
'
'        Case 27602
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 27603, 27604, 27606
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", Err, objPedidoVenda.lCodigo)
'
'        Case 27605
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMPL_PV_TIPO_INVALIDO", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150105)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function

Function PedidoDeVenda_Le_Itens_ComTributacao(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

Dim lErro As Long
Dim objItemPedido As ClassItemPedido

On Error GoTo Erro_PedidoDeVenda_Le_Itens_ComTributacao

    lErro = CF("ItensPedido_Le_Inclusive_Baixados", objPedidoVenda, STATUS_ABERTO, True)
    If lErro <> SUCESSO Then gError 86352
    
    PedidoDeVenda_Le_Itens_ComTributacao = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_Itens_ComTributacao:

    PedidoDeVenda_Le_Itens_ComTributacao = gErr

    Select Case gErr

        Case 86352, 177041
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150106)

    End Select

    Exit Function

End Function

Function PedidoDeVenda_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê o Pedido de Venda a partir do Código passado.

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_PedidoDeVenda_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 26506

    lErro = CF("PedidoDeVenda_Le_Aux", objPedidoVenda, lComando)
    If lErro <> SUCESSO And lErro <> 19348 Then Error 19349
    
    'se nao encontrou o pedido
    If lErro = 19348 Then Error 26509
    
    Call Comando_Fechar(lComando)

    PedidoDeVenda_Le = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le:

    PedidoDeVenda_Le = Err

    Select Case Err

        Case 26506
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19349, 26509 'Tratado na rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150107)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PedidoDeVenda_Le_Aux(ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal lComando As Long) As Long
'Lê o Pedido de Venda a partir do Código passado.

Dim lErro As Long
Dim tPedidoVenda As typePedidoVenda

On Error GoTo Erro_PedidoDeVenda_Le_Aux

    tPedidoVenda.sMensagemNota = String(STRING_PEDIDOVENDA_MENSAGEM_NOTA, 0)
    tPedidoVenda.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    tPedidoVenda.sPedidoCliente = String(STRING_PEDIDOVENDA_PEDIDO_CLIENTE, 0)
    tPedidoVenda.sPlaca = String(STRING_PEDIDOVENDA_PLACA, 0)
    tPedidoVenda.sPlacaUF = String(STRING_PEDIDOVENDA_PLACA_UF, 0)
    tPedidoVenda.sVolumeNumero = String(STRING_PEDIDOVENDA_VOLUME_NUMERO, 0)
    tPedidoVenda.sPedidoRepresentante = String(STRING_PEDIDOVENDA_PEDIDO_REPRESENTANTE, 0)
    tPedidoVenda.sObs = String(STRING_OBSERVACAO_OBSERVACAO, 0)
    
    If objPedidoVenda.lCodigo <> 0 Then
        lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa, FilialEmpresaFaturamento, Cliente, Filial, FilialEntrega, CodTransportadora, CondicaoPagto, PercAcrescFinanceiro, DataEmissao, MensagemNota, NaturezaOp, ValorTotal, ValorFrete, ValorDesconto, ValorSeguro, PedidoCliente, CanalVenda, TabelaPreco, ProxSeqBloqueio, FaturaIntegral, ComissaoAutomatica, CobrancaAutomatica, DataReferencia, NumIntDoc,ValorOutrasDespesas,Placa,PlacaUF,VolumeQuant,VolumeEspecie,VolumeMarca,PesoLiq,PesoBruto, VolumeNumero,FreteRespons, ValorProdutos, CodTranspRedesp, DetPagFrete, DataEntrega, VolumeTotal, Moeda, TaxaMoeda,PedidoRepresentante, DataRefFluxo, OBS, Andamento, ValorDescontoTit,ValorDescontoItens,ValorItens, CodigoBase, Parc " & _
            "FROM PedidosDeVenda WHERE FilialEmpresa = ? AND Codigo = ? ", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.iFilialEmpresaFaturamento, tPedidoVenda.lCliente, tPedidoVenda.iFilial, tPedidoVenda.iFilialEntrega, tPedidoVenda.iCodTransportadora, tPedidoVenda.iCondicaoPagto, _
            tPedidoVenda.dPercAcrescFinanceiro, tPedidoVenda.dtDataEmissao, tPedidoVenda.sMensagemNota, tPedidoVenda.sNaturezaOp, tPedidoVenda.dValorTotal, tPedidoVenda.dValorFrete, tPedidoVenda.dValorDesconto, tPedidoVenda.dValorSeguro, tPedidoVenda.sPedidoCliente, tPedidoVenda.iCanalVenda, tPedidoVenda.iTabelaPreco, tPedidoVenda.iProxSeqBloqueio, tPedidoVenda.iFaturaIntegral, tPedidoVenda.iComissaoAutomatica, tPedidoVenda.iCobrancaAutomatica, tPedidoVenda.dtDataReferencia, tPedidoVenda.lNumIntDoc, tPedidoVenda.dValorOutrasDespesas, tPedidoVenda.sPlaca, tPedidoVenda.sPlacaUF, tPedidoVenda.lVolumeQuant, tPedidoVenda.lVolumeEspecie, tPedidoVenda.lVolumeMarca, tPedidoVenda.dPesoLiq, tPedidoVenda.dPesoBruto, tPedidoVenda.sVolumeNumero, tPedidoVenda.iFreteRespons, tPedidoVenda.dValorProdutos, tPedidoVenda.iCodTranspRedesp, tPedidoVenda.iDetPagFrete, _
            tPedidoVenda.dtDataEntrega, tPedidoVenda.dVolumeTotal, tPedidoVenda.iMoeda, tPedidoVenda.dTaxaMoeda, tPedidoVenda.sPedidoRepresentante, tPedidoVenda.dtDataRefFluxo, tPedidoVenda.sObs, tPedidoVenda.iAndamento, tPedidoVenda.dValorDescontoTit, tPedidoVenda.dValorDescontoItens, tPedidoVenda.dValorItens, tPedidoVenda.lCodigoBase, tPedidoVenda.iParc, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    Else
        lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa, FilialEmpresaFaturamento, Cliente, Filial, FilialEntrega, CodTransportadora, CondicaoPagto, PercAcrescFinanceiro, DataEmissao, MensagemNota, NaturezaOp, ValorTotal, ValorFrete, ValorDesconto, ValorSeguro, PedidoCliente, CanalVenda, TabelaPreco, ProxSeqBloqueio, FaturaIntegral, ComissaoAutomatica, CobrancaAutomatica, DataReferencia, NumIntDoc,ValorOutrasDespesas,Placa,PlacaUF,VolumeQuant,VolumeEspecie,VolumeMarca,PesoLiq,PesoBruto, VolumeNumero,FreteRespons, ValorProdutos, CodTranspRedesp, DetPagFrete, DataEntrega, VolumeTotal, Moeda, TaxaMoeda,PedidoRepresentante, DataRefFluxo, OBS, Andamento, ValorDescontoTit,ValorDescontoItens,ValorItens, CodigoBase, Parc " & _
            "FROM PedidosDeVenda WHERE NumIntDoc = ? ", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.iFilialEmpresaFaturamento, tPedidoVenda.lCliente, tPedidoVenda.iFilial, tPedidoVenda.iFilialEntrega, tPedidoVenda.iCodTransportadora, tPedidoVenda.iCondicaoPagto, _
            tPedidoVenda.dPercAcrescFinanceiro, tPedidoVenda.dtDataEmissao, tPedidoVenda.sMensagemNota, tPedidoVenda.sNaturezaOp, tPedidoVenda.dValorTotal, tPedidoVenda.dValorFrete, tPedidoVenda.dValorDesconto, tPedidoVenda.dValorSeguro, tPedidoVenda.sPedidoCliente, tPedidoVenda.iCanalVenda, tPedidoVenda.iTabelaPreco, tPedidoVenda.iProxSeqBloqueio, tPedidoVenda.iFaturaIntegral, tPedidoVenda.iComissaoAutomatica, tPedidoVenda.iCobrancaAutomatica, tPedidoVenda.dtDataReferencia, tPedidoVenda.lNumIntDoc, tPedidoVenda.dValorOutrasDespesas, tPedidoVenda.sPlaca, tPedidoVenda.sPlacaUF, tPedidoVenda.lVolumeQuant, tPedidoVenda.lVolumeEspecie, tPedidoVenda.lVolumeMarca, tPedidoVenda.dPesoLiq, tPedidoVenda.dPesoBruto, tPedidoVenda.sVolumeNumero, tPedidoVenda.iFreteRespons, tPedidoVenda.dValorProdutos, tPedidoVenda.iCodTranspRedesp, tPedidoVenda.iDetPagFrete, _
            tPedidoVenda.dtDataEntrega, tPedidoVenda.dVolumeTotal, tPedidoVenda.iMoeda, tPedidoVenda.dTaxaMoeda, tPedidoVenda.sPedidoRepresentante, tPedidoVenda.dtDataRefFluxo, tPedidoVenda.sObs, tPedidoVenda.iAndamento, tPedidoVenda.dValorDescontoTit, tPedidoVenda.dValorDescontoItens, tPedidoVenda.dValorItens, tPedidoVenda.lCodigoBase, tPedidoVenda.iParc, objPedidoVenda.lNumIntDoc)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 26507

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26508

    If lErro = AD_SQL_SEM_DADOS Then Error 19348

    objPedidoVenda.iFilialEmpresa = tPedidoVenda.iFilialEmpresa
    objPedidoVenda.lCodigo = tPedidoVenda.lCodigo

    objPedidoVenda.iFilialEmpresaFaturamento = tPedidoVenda.iFilialEmpresaFaturamento
    objPedidoVenda.lCliente = tPedidoVenda.lCliente
    objPedidoVenda.iFilial = tPedidoVenda.iFilial
    objPedidoVenda.iFilialEntrega = tPedidoVenda.iFilialEntrega
    objPedidoVenda.iCodTransportadora = tPedidoVenda.iCodTransportadora
    objPedidoVenda.iCodTranspRedesp = tPedidoVenda.iCodTranspRedesp
    objPedidoVenda.iDetPagFrete = tPedidoVenda.iDetPagFrete
    objPedidoVenda.dtDataEntrega = tPedidoVenda.dtDataEntrega
    objPedidoVenda.iCondicaoPagto = tPedidoVenda.iCondicaoPagto
    objPedidoVenda.dPercAcrescFinanceiro = tPedidoVenda.dPercAcrescFinanceiro
    objPedidoVenda.dtDataEmissao = tPedidoVenda.dtDataEmissao
    objPedidoVenda.sMensagemNota = tPedidoVenda.sMensagemNota
    objPedidoVenda.sNaturezaOp = tPedidoVenda.sNaturezaOp
    objPedidoVenda.dValorTotal = tPedidoVenda.dValorTotal
    objPedidoVenda.dValorFrete = tPedidoVenda.dValorFrete
    objPedidoVenda.dValorDesconto = tPedidoVenda.dValorDesconto
    objPedidoVenda.dValorOutrasDespesas = tPedidoVenda.dValorOutrasDespesas
    objPedidoVenda.dValorSeguro = tPedidoVenda.dValorSeguro
    objPedidoVenda.sPedidoCliente = tPedidoVenda.sPedidoCliente
    objPedidoVenda.iCanalVenda = tPedidoVenda.iCanalVenda
    objPedidoVenda.iTabelaPreco = tPedidoVenda.iTabelaPreco
    objPedidoVenda.iProxSeqBloqueio = tPedidoVenda.iProxSeqBloqueio
    objPedidoVenda.iFaturaIntegral = tPedidoVenda.iFaturaIntegral
    objPedidoVenda.iComissaoAutomatica = tPedidoVenda.iComissaoAutomatica
    objPedidoVenda.iCobrancaAutomatica = tPedidoVenda.iCobrancaAutomatica
    objPedidoVenda.dtDataReferencia = tPedidoVenda.dtDataReferencia
    objPedidoVenda.sPlaca = tPedidoVenda.sPlaca
    objPedidoVenda.sPlacaUF = tPedidoVenda.sPlacaUF
    objPedidoVenda.lVolumeQuant = tPedidoVenda.lVolumeQuant
    objPedidoVenda.lVolumeEspecie = tPedidoVenda.lVolumeEspecie
    objPedidoVenda.lVolumeMarca = tPedidoVenda.lVolumeMarca
    objPedidoVenda.dPesoLiq = tPedidoVenda.dPesoLiq
    objPedidoVenda.dPesoBruto = tPedidoVenda.dPesoBruto
    objPedidoVenda.lNumIntDoc = tPedidoVenda.lNumIntDoc
    objPedidoVenda.sVolumeNumero = tPedidoVenda.sVolumeNumero
    objPedidoVenda.iFreteRespons = tPedidoVenda.iFreteRespons
    objPedidoVenda.dValorProdutos = tPedidoVenda.dValorProdutos
    objPedidoVenda.dVolumeTotal = tPedidoVenda.dVolumeTotal
    objPedidoVenda.iMoeda = tPedidoVenda.iMoeda
    objPedidoVenda.dTaxaMoeda = tPedidoVenda.dTaxaMoeda
    objPedidoVenda.sPedidoRepresentante = tPedidoVenda.sPedidoRepresentante
    objPedidoVenda.dtDataRefFluxo = tPedidoVenda.dtDataRefFluxo
    objPedidoVenda.sObs = tPedidoVenda.sObs
    objPedidoVenda.iAndamento = tPedidoVenda.iAndamento
    objPedidoVenda.dValorDescontoTit = tPedidoVenda.dValorDescontoTit
    objPedidoVenda.dValorItens = tPedidoVenda.dValorItens
    objPedidoVenda.dValorDescontoItens = tPedidoVenda.dValorDescontoItens
    objPedidoVenda.lCodigoBase = tPedidoVenda.lCodigoBase
    objPedidoVenda.iParc = tPedidoVenda.iParc
    
    lErro = CF("PV_Le_Customizado", objPedidoVenda)
    If lErro <> SUCESSO Then Error 40311
    
    PedidoDeVenda_Le_Aux = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_Aux:

    PedidoDeVenda_Le_Aux = Err

    Select Case Err

        Case 26507, 26508
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", Err, objPedidoVenda.lCodigo)

        Case 19348, 40311 'Tratado na rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150108)

    End Select

    Exit Function

End Function

Function BloqueiosPV_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê os Bloqueios associados ao objPedidoVenda

Dim lErro As Long
Dim lComando As Long
Dim tBloqueioPV As typeBloqueioPV

On Error GoTo Erro_BloqueiosPV_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 26555
    
    tBloqueioPV.sCodUsuario = String(STRING_BLOQUEIOSPV_COD_USUARIO, 0)
    tBloqueioPV.sCodUsuarioLib = String(STRING_BLOQUEIOSPV_COD_USUARIO, 0)
    tBloqueioPV.sResponsavel = String(STRING_BLOQUEIOSPV_RESPONSAVEL, 0)
    tBloqueioPV.sResponsavelLib = String(STRING_BLOQUEIOSPV_RESPONSAVEL, 0)
    tBloqueioPV.sObservacao = String(STRING_BLOQUEIOSPV_OBSERVACAO, 0)

    lErro = Comando_Executar(lComando, "SELECT Sequencial, TipoDeBloqueio, CodUsuario, Responsavel, Data, CodUsuarioLib, ResponsavelLib, DataLib, Observacao FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? ORDER BY Sequencial", tBloqueioPV.iSequencial, tBloqueioPV.iTipoDeBloqueio, tBloqueioPV.sCodUsuario, tBloqueioPV.sResponsavel, tBloqueioPV.dtData, tBloqueioPV.sCodUsuarioLib, tBloqueioPV.sResponsavelLib, tBloqueioPV.dtDataLib, tBloqueioPV.sObservacao, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 26556
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26557
       
    Do While lErro <> AD_SQL_SEM_DADOS
    
        With tBloqueioPV
            objPedidoVenda.colBloqueiosPV.Add objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, .iSequencial, .iTipoDeBloqueio, .sCodUsuario, .sResponsavel, .dtData, .sCodUsuarioLib, .sResponsavelLib, .dtDataLib, .sObservacao
        End With
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26559
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    BloqueiosPV_Le = SUCESSO
    
    Exit Function

Erro_BloqueiosPV_Le:

    BloqueiosPV_Le = Err
    
    Select Case Err
    
        Case 26555
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 26556, 26557, 26559
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV", Err, objPedidoVenda.lCodigo)
               
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150109)
            
    End Select
    
    Call Comando_Fechar(lComando)
        
    Exit Function
    
End Function

Function ComissoesPV_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê as Comissões associadas ao Pedido de Venda passado e objPedidoVenda.

'*** Alterada em 05/03/02 por Luiz Nogueira ***
'*** ClassPedidoDeVenda teve o tipo de ColComissoes alterado, por isso foi necessário adicionar
'os dados lidos a um obj e depois adicionar o obj à coleção ***

'Alterada por Tulio em 26/03/02
'Incluindo campo DiretoIndireto

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tComissaoPV As typeComissaoPedVenda, tComissaoPorItem As typeComissaoPorItem
Dim objComissaoPV As ClassComissaoPedVendas
Dim objComissaoPorItem As ClassComissaoPorItem

On Error GoTo Erro_ComissoesPV_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 26560
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 26560
    
    lErro = Comando_Executar(lComando, "SELECT CodVendedor, ValorBase, Percentual, Valor, PercentualEmissao, ValorEmissao, Indireta, Seq FROM ComissoesPedVendas WHERE FilialEmpresa = ? AND PedidoDeVendas = ? ORDER BY Seq", tComissaoPV.iCodVendedor, tComissaoPV.dValorBase, tComissaoPV.dPercentual, tComissaoPV.dValor, tComissaoPV.dPercentualEmissao, tComissaoPV.dValorEmissao, tComissaoPV.iIndireta, tComissaoPV.iSeq, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26561
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26562
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Instancia um novo objComissaoPV
        Set objComissaoPV = New ClassComissaoPedVendas
        
        'Transfere os dados lidos para o obj
        With tComissaoPV
            
            objComissaoPV.iCodVendedor = .iCodVendedor
            objComissaoPV.dValorBase = .dValorBase
            objComissaoPV.dPercentual = .dPercentual
            objComissaoPV.dValor = .dValor
            objComissaoPV.dPercentualEmissao = .dPercentualEmissao
            objComissaoPV.dValorEmissao = .dValorEmissao
            objComissaoPV.iIndireta = .iIndireta
            objComissaoPV.iSeq = .iSeq

        End With
    
        'Adiciona o obj à coleção
        objPedidoVenda.colComissoes.Add objComissaoPV
            
        With tComissaoPorItem
            lErro = Comando_Executar(lComando1, "SELECT ValorBase, Percentual, Valor, Linha, PercentualEmissao, ValorEmissao FROM ComissoesPorItem WHERE SeqComissao = ? AND TipoDoc = ? AND NumIntDocItem IN (SELECT I.NumIntDoc FROM ItensPVTodos I, PedVenTodos P WHERE I.FilialEmpresa = P.FilialEmpresa AND I.CodPedido = P.Codigo AND P.FilialEmpresa = ? AND P.Codigo = ?) ORDER BY Linha", _
                .dValorBase, .dPercentual, .dValor, .iLinha, .dPercentualEmissao, .dValorEmissao, objComissaoPV.iSeq, TIPO_PV, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
        End With
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26561
        
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26562
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objComissaoPorItem = New ClassComissaoPorItem
            
            With objComissaoPorItem
            
                .iSeqComissao = objComissaoPV.iSeq
                .dValorBase = tComissaoPorItem.dValorBase
                .dPercentual = tComissaoPorItem.dPercentual
                .dValor = tComissaoPorItem.dValor
                .iLinha = tComissaoPorItem.iLinha
                .dPercentualEmissao = tComissaoPorItem.dPercentualEmissao
                .dValorEmissao = tComissaoPorItem.dValorEmissao
            
            End With
            
            objComissaoPV.colLinhas.Add objComissaoPorItem
            
            lErro = Comando_BuscarProximo(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26562
        
        Loop
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26564
        
    Loop
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    ComissoesPV_Le = SUCESSO
    
    Exit Function
    
Erro_ComissoesPV_Le:

    ComissoesPV_Le = Err
    
    Select Case Err
    
        Case 26560
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 26561, 26562, 26564
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESPEDVENDAS", Err, objPedidoVenda.lCodigo)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150110)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
 
End Function

Function ParcelasPV_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê as parcelas associadas ao objPedidoVenda

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPV As typeParcelaPedidoVenda
Dim objParcPV As ClassParcelaPedidoVenda

On Error GoTo Erro_ParcelasPV_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 26548

    tParcelaPV.sAgenciaCheque = String(STRING_AGENCIA, 0)
    tParcelaPV.sAprovacaoCartao = String(STRING_APROVACAO_CARTAO, 0)
    tParcelaPV.sContaCorrenteCheque = String(STRING_CONTA_CORRENTE, 0)
    tParcelaPV.sNumeroCartao = String(STRING_NUMERO_CARTAO, 0)

    'Seleciona Parcelas vinculadas ao Pedido de Venda
    lErro = Comando_Executar(lComando, "SELECT NumParcela, DataVencimento, Valor, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao FROM ParcelasPedidoDeVenda WHERE PedidodeVenda = ? AND FilialEmpresa = ? ORDER BY DataVencimento", _
    tParcelaPV.iNumParcela, tParcelaPV.dtDataVencimento, tParcelaPV.dValor, tParcelaPV.iDesconto1Codigo, tParcelaPV.dtDesconto1Ate, tParcelaPV.dDesconto1Valor, tParcelaPV.iDesconto2Codigo, tParcelaPV.dtDesconto2Ate, tParcelaPV.dDesconto2Valor, tParcelaPV.iDesconto3Codigo, tParcelaPV.dtDesconto3Ate, tParcelaPV.dDesconto3Valor, _
    tParcelaPV.iTipoPagto, tParcelaPV.iCodConta, tParcelaPV.dtDataCredito, tParcelaPV.dtDataEmissaoCheque, tParcelaPV.iBancoCheque, tParcelaPV.sAgenciaCheque, tParcelaPV.sContaCorrenteCheque, tParcelaPV.lNumeroCheque, tParcelaPV.dtDataDepositoCheque, tParcelaPV.iAdmMeioPagto, tParcelaPV.iParcelamento, tParcelaPV.sNumeroCartao, tParcelaPV.dtValidadeCartao, tParcelaPV.sAprovacaoCartao, tParcelaPV.dtDataTransacaoCartao, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 26549

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26550

    Do While lErro <> AD_SQL_SEM_DADOS

        With tParcelaPV
            Set objParcPV = objPedidoVenda.colParcelas.Add(.dValor, .dtDataVencimento, .iNumParcela, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .dtDesconto3Ate, .dDesconto3Valor, .iDesconto3Codigo)
        
            objParcPV.iTipoPagto = .iTipoPagto
            objParcPV.iCodConta = .iCodConta
            objParcPV.dtDataCredito = .dtDataCredito
            objParcPV.dtDataEmissaoCheque = .dtDataEmissaoCheque
            objParcPV.iBancoCheque = .iBancoCheque
            objParcPV.sAgenciaCheque = .sAgenciaCheque
            objParcPV.sContaCorrenteCheque = .sContaCorrenteCheque
            objParcPV.lNumeroCheque = .lNumeroCheque
            objParcPV.dtDataDepositoCheque = .dtDataDepositoCheque
            objParcPV.iAdmMeioPagto = .iAdmMeioPagto
            objParcPV.iParcelamento = .iParcelamento
            objParcPV.sNumeroCartao = .sNumeroCartao
            objParcPV.dtValidadeCartao = .dtValidadeCartao
            objParcPV.sAprovacaoCartao = .sAprovacaoCartao
            objParcPV.dtDataTransacaoCartao = .dtDataTransacaoCartao
        
        
        
        
        End With

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 26552

    Loop

    Call Comando_Fechar(lComando)

    ParcelasPV_Le = SUCESSO

    Exit Function

Erro_ParcelasPV_Le:

    ParcelasPV_Le = Err

    Select Case Err

        Case 26548
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 26549, 26550, 26552
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPEDIDODEVENDA", Err, objPedidoVenda.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150111)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'mario
Function NFiscal_Le_Tributacao(ByVal objNFiscal As ClassNFiscal) As Long
'le a parte de tributacao associada a uma NF e a incorpora a objNFiscal

Dim lErro As Long, lComando As Long ', tTributacaoNF As typeTributacaoNF
Dim objTributacaoNF As New ClassTributacaoDoc ', objTribComplNF As ClassTribComplNF

On Error GoTo Erro_NFiscal_Le_Tributacao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22864
    
    objTributacaoNF.iTipoDoc = TIPODOC_TRIB_NF
    objTributacaoNF.lNumIntDoc = objNFiscal.lNumIntDoc

    lErro = CF("TributacaoDoc_Le", objTributacaoNF)
    If lErro <> SUCESSO Then Error 22868
    
'    With tTributacaoNF
'
'        .sNaturezaOpInterna = String(STRING_NATUREZAOP_CODIGO, 0)
'        lErro = Comando_Executar(lComando, "SELECT NaturezaOpInterna, TipoTributacao, IPIBase, IPIValor, IPICredito, ICMSBase, ICMSValor, ICMSSubstBase, ICMSSubstValor, ICMSCredito, ISSIncluso, ISSBase, ISSAliquota, ISSValor, IRRFBase, IRRFAliquota, IRRFValor, ValorINSS, INSSRetido, INSSValorBase, INSSValorDeducoes, PISCredito, COFINSCredito, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM TributacaoNF WHERE NumIntDoc = ?", _
'                .sNaturezaOpInterna, .iTipoTributacao, .dIPIBase, .dIPIValor, .dIPICredito, .dICMSBase, .dICMSValor, .dICMSSubstBase, .dICMSSubstValor, .dICMSCredito, .iISSIncluso, .dISSBase, .dISSAliquota, .dISSValor, .dIRRFBase, .dIRRFAliquota, .dIRRFValor, .dValorINSS, .iINSSRetido, .dINSSBase, .dINSSDeducoes, .dPISCredito, .dCOFINSCredito, .dPISRetido, .dISSRetido, .dCOFINSRetido, .dCSLLRetido, objNFiscal.lNumIntDoc)
'    End With
'
'    If lErro <> AD_SQL_SUCESSO Then Error 22865
'
'    lErro = Comando_BuscarProximo(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22866
'
'    'pode nao encontrar p/"Recebimentos"
'    If lErro = AD_SQL_SEM_DADOS Then Error 22867
'
'    With objTributacaoNF
'        .lNumIntDoc = objNFiscal.lNumIntDoc
'        .sNaturezaOpInterna = tTributacaoNF.sNaturezaOpInterna
'        .iTipoTributacao = tTributacaoNF.iTipoTributacao
'        .dIPIBase = tTributacaoNF.dIPIBase
'        .dIPIValor = tTributacaoNF.dIPIValor
'        .dIPICredito = tTributacaoNF.dIPICredito
'        .dICMSBase = tTributacaoNF.dICMSBase
'        .dICMSValor = tTributacaoNF.dICMSValor
'        .dICMSSubstBase = tTributacaoNF.dICMSSubstBase
'        .dICMSSubstValor = tTributacaoNF.dICMSSubstValor
'        .dICMSCredito = tTributacaoNF.dICMSCredito
'        .iISSIncluso = tTributacaoNF.iISSIncluso
'        .dISSBase = tTributacaoNF.dISSBase
'        .dISSAliquota = tTributacaoNF.dISSAliquota
'        .dISSValor = tTributacaoNF.dISSValor
'        .dIRRFBase = tTributacaoNF.dIRRFBase
'        .dIRRFAliquota = tTributacaoNF.dIRRFAliquota
'        .dIRRFValor = tTributacaoNF.dIRRFValor
'        .dValorINSS = tTributacaoNF.dValorINSS
'        .iINSSRetido = tTributacaoNF.iINSSRetido
'        .dINSSBase = tTributacaoNF.dINSSBase
'        .dINSSDeducoes = tTributacaoNF.dINSSDeducoes
'        .dPISCredito = tTributacaoNF.dPISCredito
'        .dCOFINSCredito = tTributacaoNF.dCOFINSCredito
'        .dPISRetido = tTributacaoNF.dPISRetido
'        .dISSRetido = tTributacaoNF.dISSRetido
'        .dCOFINSRetido = tTributacaoNF.dCOFINSRetido
'        .dCSLLRetido = tTributacaoNF.dCSLLRetido
'
'    End With
'
'    Set objTribComplNF = New ClassTribComplNF
'    Set objTributacaoNF.objTributacaoDesconto = objTribComplNF
'    objTribComplNF.iTipo = ITEM_TIPO_DESCONTO
'    lErro = CF("NFiscal_Le_TributacaoCompl", objNFiscal, objTribComplNF, lComando)
'    If lErro <> SUCESSO Then Error 22868
'
'    Set objTribComplNF = New ClassTribComplNF
'    Set objTributacaoNF.objTributacaoFrete = objTribComplNF
'    objTribComplNF.iTipo = ITEM_TIPO_FRETE
'    lErro = CF("NFiscal_Le_TributacaoCompl", objNFiscal, objTribComplNF, lComando)
'    If lErro <> SUCESSO Then Error 22869
'
'    Set objTribComplNF = New ClassTribComplNF
'    Set objTributacaoNF.objTributacaoOutras = objTribComplNF
'    objTribComplNF.iTipo = ITEM_TIPO_OUTRAS_DESP
'    lErro = CF("NFiscal_Le_TributacaoCompl", objNFiscal, objTribComplNF, lComando)
'    If lErro <> SUCESSO Then Error 22870
'
'    Set objTribComplNF = New ClassTribComplNF
'    Set objTributacaoNF.objTributacaoSeguro = objTribComplNF
'    objTribComplNF.iTipo = ITEM_TIPO_SEGURO
'    lErro = CF("NFiscal_Le_TributacaoCompl", objNFiscal, objTribComplNF, lComando)
'    If lErro <> SUCESSO Then Error 22871
    
    Set objNFiscal.objTributacaoNF = objTributacaoNF
    
    Call Comando_Fechar(lComando)
    
    NFiscal_Le_Tributacao = SUCESSO

    Exit Function

Erro_NFiscal_Le_Tributacao:

    NFiscal_Le_Tributacao = Err

    Select Case Err
'
'        Case 22864
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 22865, 22866
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRIBNFISCAL", Err)
'
'        Case 22867 'nao encontrou info sobre tributacao, só deve ocorrer em "recebimentos"
'
        Case 22868 ' To 22871
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150112)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'mario
'Function NFiscal_Le_TributacaoCompl(ByVal objNFiscal As ClassNFiscal, ByVal objTribComplNF As ClassTribComplNF, ByVal lComando As Long) As Long
'
'Dim lErro As Long, tTribComplNF As typeTribComplNF
'
'On Error GoTo Erro_NFiscal_Le_TributacaoCompl
'
'    With tTribComplNF
'        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
'        lErro = Comando_Executar(lComando, "SELECT NaturezaOp, TipoTributacao, IPITipo, IPIBaseCalculo, IPIPercRedBase, IPIAliquota, IPIValor, IPICredito, ICMSTipo, ICMSBase, ICMSPercRedBase, ICMSAliquota, ICMSValor, ICMSCredito, ICMSSubstBase, ICMSSubstAliquota, ICMSSubstValor, PISCredito, COFINSCredito FROM TributacaoComplNF WHERE NumIntDoc = ? AND Tipo = ?", _
'                 .sNaturezaOp, .iTipoTributacao, .iIPITipo, .dIPIBaseCalculo, .dIPIPercRedBase, .dIPIAliquota, .dIPIValor, .dIPICredito, .iICMSTipo, .dICMSBase, .dICMSPercRedBase, .dICMSAliquota, .dICMSValor, .dICMSCredito, .dICMSSubstBase, .dICMSSubstAliquota, .dICMSSubstValor, .dPISCredito, .dCOFINSCredito, objNFiscal.lNumIntDoc, objTribComplNF.iTipo)
'    End With
'
'    If lErro <> AD_SQL_SUCESSO Then Error 22872
'
'    lErro = Comando_BuscarProximo(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22873
'
'    If lErro = AD_SQL_SEM_DADOS Then Error 22874
'
'    With objTribComplNF
'
'        .lNumIntDoc = objNFiscal.lNumIntDoc
'        '.iTipo = tTribComplNF.iTipo
'        .sNaturezaOp = tTribComplNF.sNaturezaOp
'        .iTipoTributacao = tTribComplNF.iTipoTributacao
'        .iIPITipo = tTribComplNF.iIPITipo
'        'sIPICodProduto As String
'        .dIPIBaseCalculo = tTribComplNF.dIPIBaseCalculo
'        .dIPIPercRedBase = tTribComplNF.dIPIPercRedBase
'        .dIPIAliquota = tTribComplNF.dIPIAliquota
'        .dIPIValor = tTribComplNF.dIPIValor
'        .dIPICredito = tTribComplNF.dIPICredito
'        .iICMSTipo = tTribComplNF.iICMSTipo
'        .dICMSBase = tTribComplNF.dICMSBase
'        .dICMSPercRedBase = tTribComplNF.dICMSPercRedBase
'        .dICMSAliquota = tTribComplNF.dICMSAliquota
'        .dICMSValor = tTribComplNF.dICMSValor
'        .dICMSCredito = tTribComplNF.dICMSCredito
'        .dICMSSubstBase = tTribComplNF.dICMSSubstBase
'        .dICMSSubstAliquota = tTribComplNF.dICMSSubstAliquota
'        .dICMSSubstValor = tTribComplNF.dICMSSubstValor
'        .dPISCredito = tTribComplNF.dPISCredito
'        .dCOFINSCredito = tTribComplNF.dCOFINSCredito
'
'    End With
'
'    NFiscal_Le_TributacaoCompl = SUCESSO
'
'    Exit Function
'
'Erro_NFiscal_Le_TributacaoCompl:
'
'    NFiscal_Le_TributacaoCompl = Err
'
'    Select Case Err
'
'        Case 22872, 22873, 22874
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRIBCOMPLNFISCAL", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150113)
'
'    End Select
'
'    Exit Function
'
'End Function

'mario
Function NFiscalItens_Le_Trib(ByVal objNFiscal As ClassNFiscal) As Long
'Lê os dados de tributacao dos ítens da Nota Fiscal passada em objNFiscal

Dim iIndice As Integer
Dim lErro As Long
Dim lComando As Long ', objTribItemNF As ClassTribItemNF
Dim objItemNF As ClassItemNF ', tTribItemNF As typeTribItemNF
'Dim colAlocacoes As ColAlocacoesItemNF
Dim dPrecoTotal As Double

On Error GoTo Erro_NFiscalItens_Le_Trib

    For Each objItemNF In objNFiscal.colItens
        Set objItemNF.objTributacao = New ClassTributacaoDocItem
        objItemNF.objTributacao.iTipoDoc = TIPODOC_TRIB_NF
        objItemNF.objTributacao.lNumIntDocItem = objItemNF.lNumIntDoc
        lErro = CF("TributacaoDocItem_Le", objItemNF.objTributacao)
        If lErro <> SUCESSO Then gError 22879
    Next
    
    For Each objItemNF In objNFiscal.colItensSRV
        Set objItemNF.objTributacao = New ClassTributacaoDocItem
        objItemNF.objTributacao.iTipoDoc = TIPODOC_TRIB_NF
        objItemNF.objTributacao.lNumIntDocItem = objItemNF.lNumIntDoc
        lErro = CF("TributacaoDocItem_Le", objItemNF.objTributacao)
        If lErro <> SUCESSO Then gError 22879
    Next
    
    'Tratamento feito somente para exibir o antigo campo de desconto global na tela em forma de desconto nos itens
    If objNFiscal.dValorDesconto > 0 Then
        objNFiscal.dValorDesconto = 0
        For Each objItemNF In objNFiscal.colItens
            objItemNF.dValorDesconto = objItemNF.dValorDesconto + objItemNF.objTributacao.dValorDescontoItem
            objItemNF.objTributacao.dValorDescontoItem = 0
            dPrecoTotal = objItemNF.dQuantidade * objItemNF.dPrecoUnitario
            If dPrecoTotal > 0 Then objItemNF.dPercDesc = objItemNF.dValorDesconto / dPrecoTotal
        Next
        For Each objItemNF In objNFiscal.colItensSRV
            objItemNF.dValorDesconto = objItemNF.dValorDesconto + objItemNF.objTributacao.dValorDescontoItem
            objItemNF.objTributacao.dValorDescontoItem = 0
            dPrecoTotal = objItemNF.dQuantidade * objItemNF.dPrecoUnitario
            If dPrecoTotal > 0 Then objItemNF.dPercDesc = objItemNF.dValorDesconto / dPrecoTotal
        Next
    End If

'    'Abre o comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 22876
'
'    With tTribItemNF
'
'        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
'        .sIPICodProduto = String(STRING_PRODUTO, 0)
'
'
'        .sCST = String(STRING_CST, 0)
'        .sISSQN = String(STRING_ISSQN_CODIGO, 0)
'        .sISSCidadeIBGE = String(STRING_CIDADE_CODIBGE, 0)
'        .sIPIEnquadramentoClasse = String(STRING_IPI_CLASSE_ENQUADRAMENTO, 0)
'        .sIPIEnquadramentoCodigo = String(STRING_IPI_CODIGO_ENQUADRAMENTO, 0)
'        .sIPICNPJProdutor = String(STRING_CGC, 0)
'        .sIPISeloCodigo = String(STRING_IPI_SELO_CODIGO, 0)
'        .sGenero = String(STRING_PRODUTOGENERO_CODIGO, 0)
'        .sEAN = String(STRING_PRODUTO_CODIGO_BARRAS, 0)
'        .sEANTrib = String(STRING_PRODUTO_CODIGO_BARRAS, 0)
'        .sUMTrib = String(STRING_UM_SIGLA, 0)
'
'        'obtem dados da tributacao do item
'        lErro = Comando_Executar(lComando, "SELECT Item, NumIntDoc, NaturezaOp, TipoTributacao, IPITipo, IPICodProduto, IPIBaseCalculo, IPIPercRedBase, IPIAliquota, IPIValor, IPICredito, ICMSTipo, ICMSBase, ICMSPercRedBase, ICMSAliquota, ICMSValor, ICMSCredito, ICMSSubstBase, ICMSSubstAliquota, ICMSSubstValor, PISCredito, COFINSCredito, ICMSAliquotaAdicaoDI, DespImpICMSBase, DespImpICMSValor, DespImpICMSCredito, ICMSSubstPercRedBase, ICMSSubstPercMVA, " & _
'        "PISTipo, PISTipoCalculo, PISBase, PISAliquota, PISAliquotaValor, PISQtde, PISValor, PISSTTipoCalculo, PISSTBase, PISSTAliquota, PISSTAliquotaValor, PISSTQtde, PISSTValor, COFINSTipo, COFINSTipoCalculo, COFINSBase, COFINSAliquota, COFINSAliquotaValor, COFINSQtde, COFINSValor, COFINSSTTipoCalculo, COFINSSTBase, COFINSSTAliquota, COFINSSTAliquotaValor, COFINSSTQtde,COFINSSTValor, CST, ISSQN, ISSBase, ISSAliquota, ISSCidadeIBGE, ISSValor, IIBase, IIDespAduaneira, IIIOF, IIValor, ICMSBaseModalidade, ICMSSubstBaseModalidade, IPIEnquadramentoClasse, IPIEnquadramentoCodigo, IPICNPJProdutor, IPISeloCodigo, IPISeloQtde, IPITipoCalculo, IPIUnidadePadraoQtde, IPIUnidadePadraoValor, ValorFreteItem, ValorSeguroItem, ValorOutrasDespesasItem, ValorDescontoItem, OrigemMercadoria, ExTIPI, Genero, ProdutoEspecifico, EAN, EANTrib, QtdTrib, UMTrib, ValorUnitTrib " & _
'        "FROM TributacaoItemNF WHERE NumIntNF = ? ORDER BY Item", _
'            .iItem, .lNumIntDoc, .sNaturezaOp, .iTipoTributacao, .iIPITipo, .sIPICodProduto, .dIPIBaseCalculo, .dIPIPercRedBase, .dIPIAliquota, .dIPIValor, .dIPICredito, .iICMSTipo, .dICMSBase, .dICMSPercRedBase, .dICMSAliquota, .dICMSValor, .dICMSCredito, .dICMSSubstBase, .dICMSSubstAliquota, .dICMSSubstValor, .dPISCredito, .dCOFINSCredito, .dICMSAliquotaAdicaoDI, .dDespImpICMSBase, .dDespImpICMSValor, .dDespImpICMSCredito, .dICMSSubstPercRedBase, .dICMSSubstPercMVA, _
'            .iPISTipo, .iPISTipoCalculo, .dPISBase, .dPISAliquota, .dPISAliquotaValor, .dPISQtde, .dPISValor, .iPISSTTipoCalculo, .dPISSTBase, .dPISSTAliquota, .dPISSTAliquotaValor, .dPISSTQtde, .dPISSTValor, .iCOFINSTipo, .iCOFINSTipoCalculo, .dCOFINSBase, .dCOFINSAliquota, .dCOFINSAliquotaValor, .dCOFINSQtde, .dCOFINSValor, .iCOFINSSTTipoCalculo, .dCOFINSSTBase, .dCOFINSSTAliquota, .dCOFINSSTAliquotaValor, .dCOFINSSTQtde, .dCOFINSSTValor, .sCST, .sISSQN, .dISSBase, .dISSAliquota, .sISSCidadeIBGE, .dISSValor, .dIIBase, .dIIDespAduaneira, .dIIIOF, .dIIValor, .iICMSBaseModalidade, .iICMSSubstBaseModalidade, .sIPIEnquadramentoClasse, .sIPIEnquadramentoCodigo, .sIPICNPJProdutor, .sIPISeloCodigo, .lIPISeloQtde, .iIPITipoCalculo, .dIPIUnidadePadraoQtde, .dIPIUnidadePadraoValor, .dValorFreteItem, .dValorSeguroItem, .dValorOutrasDespesasItem, .dValorDescontoItem, .iOrigemMercadoria, .iExTIPI, .sGenero, .iProdutoEspecifico, .sEAN, .sEANTrib, .dQtdTrib, .sUMTrib, .dValorUnitTrib, _
'            objNFiscal.lNumIntDoc)
'    End With
'
'    If lErro <> AD_SQL_SUCESSO Then Error 22877
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22878
'
'    iIndice = 0
'
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        Set objTribItemNF = New ClassTribItemNF
'
'        With objTribItemNF
'
'            .lNumIntNF = objNFiscal.lNumIntDoc
'            .iItem = tTribItemNF.iItem
'            .sNaturezaOp = tTribItemNF.sNaturezaOp
'            .iTipoTributacao = tTribItemNF.iTipoTributacao
'            .iIPITipo = tTribItemNF.iIPITipo
'            .sIPICodProduto = tTribItemNF.sIPICodProduto
'            .dIPIBaseCalculo = tTribItemNF.dIPIBaseCalculo
'            .dIPIPercRedBase = tTribItemNF.dIPIPercRedBase
'            .dIPIAliquota = tTribItemNF.dIPIAliquota
'            .dIPIValor = tTribItemNF.dIPIValor
'            .dIPICredito = tTribItemNF.dIPICredito
'            .iICMSTipo = tTribItemNF.iICMSTipo
'            .dICMSBase = tTribItemNF.dICMSBase
'            .dICMSPercRedBase = tTribItemNF.dICMSPercRedBase
'            .dICMSAliquota = tTribItemNF.dICMSAliquota
'            .dICMSValor = tTribItemNF.dICMSValor
'            .dICMSCredito = tTribItemNF.dICMSCredito
'            .dICMSSubstBase = tTribItemNF.dICMSSubstBase
'            .dICMSSubstAliquota = tTribItemNF.dICMSSubstAliquota
'            .dICMSSubstValor = tTribItemNF.dICMSSubstValor
'            .lNumIntDoc = tTribItemNF.lNumIntDoc
'            .dPISCredito = tTribItemNF.dPISCredito
'            .dCOFINSCredito = tTribItemNF.dCOFINSCredito
'            .dICMSAliquotaAdicaoDI = tTribItemNF.dICMSAliquotaAdicaoDI
'            .dDespImpICMSBase = tTribItemNF.dDespImpICMSBase
'            .dDespImpICMSValor = tTribItemNF.dDespImpICMSValor
'            .dDespImpICMSCredito = tTribItemNF.dDespImpICMSCredito
'            .dICMSSubstPercRedBase = tTribItemNF.dICMSSubstPercRedBase
'            .dICMSSubstPercMVA = tTribItemNF.dICMSSubstPercMVA
'
'
'            .iPISTipo = tTribItemNF.iPISTipo
'            .iPISTipoCalculo = tTribItemNF.iPISTipoCalculo
'            .dPISBase = tTribItemNF.dPISBase
'            .dPISAliquota = tTribItemNF.dPISAliquota
'            .dPISAliquotaValor = tTribItemNF.dPISAliquotaValor
'            .dPISQtde = tTribItemNF.dPISQtde
'            .dPISValor = tTribItemNF.dPISValor
'            .iPISSTTipoCalculo = tTribItemNF.iPISSTTipoCalculo
'            .dPISSTBase = tTribItemNF.dPISSTBase
'            .dPISSTAliquota = tTribItemNF.dPISSTAliquota
'            .dPISSTAliquotaValor = tTribItemNF.dPISSTAliquotaValor
'            .dPISSTQtde = tTribItemNF.dPISSTQtde
'            .dPISSTValor = tTribItemNF.dPISSTValor
'            .iCOFINSTipo = tTribItemNF.iCOFINSTipo
'            .iCOFINSTipoCalculo = tTribItemNF.iCOFINSTipoCalculo
'            .dCOFINSBase = tTribItemNF.dCOFINSBase
'            .dCOFINSAliquota = tTribItemNF.dCOFINSAliquota
'            .dCOFINSAliquotaValor = tTribItemNF.dCOFINSAliquotaValor
'            .dCOFINSQtde = tTribItemNF.dCOFINSQtde
'            .dCOFINSValor = tTribItemNF.dCOFINSValor
'            .iCOFINSSTTipoCalculo = tTribItemNF.iCOFINSSTTipoCalculo
'            .dCOFINSSTBase = tTribItemNF.dCOFINSSTBase
'            .dCOFINSSTAliquota = tTribItemNF.dCOFINSSTAliquota
'            .dCOFINSSTAliquotaValor = tTribItemNF.dCOFINSSTAliquotaValor
'            .dCOFINSSTQtde = tTribItemNF.dCOFINSSTQtde
'            .dCOFINSSTValor = tTribItemNF.dCOFINSSTValor
'            .sCST = tTribItemNF.sCST
'            .sISSQN = tTribItemNF.sISSQN
'            .dISSBase = tTribItemNF.dISSBase
'            .dISSAliquota = tTribItemNF.dISSAliquota
'            .sISSCidadeIBGE = tTribItemNF.sISSCidadeIBGE
'            .dISSValor = tTribItemNF.dISSValor
'            .dIIBase = tTribItemNF.dIIBase
'            .dIIDespAduaneira = tTribItemNF.dIIDespAduaneira
'            .dIIIOF = tTribItemNF.dIIIOF
'            .dIIValor = tTribItemNF.dIIValor
'            .iICMSBaseModalidade = tTribItemNF.iICMSBaseModalidade
'            .iICMSSubstBaseModalidade = tTribItemNF.iICMSSubstBaseModalidade
'            .sIPIEnquadramentoClasse = tTribItemNF.sIPIEnquadramentoClasse
'            .sIPIEnquadramentoCodigo = tTribItemNF.sIPIEnquadramentoCodigo
'            .sIPICNPJProdutor = tTribItemNF.sIPICNPJProdutor
'            .sIPISeloCodigo = tTribItemNF.sIPISeloCodigo
'            .lIPISeloQtde = tTribItemNF.lIPISeloQtde
'            .iIPITipoCalculo = tTribItemNF.iIPITipoCalculo
'            .dIPIUnidadePadraoQtde = tTribItemNF.dIPIUnidadePadraoQtde
'            .dIPIUnidadePadraoValor = tTribItemNF.dIPIUnidadePadraoValor
'            .dValorFreteItem = tTribItemNF.dValorFreteItem
'            .dValorSeguroItem = tTribItemNF.dValorSeguroItem
'            .dValorOutrasDespesasItem = tTribItemNF.dValorOutrasDespesasItem
'            .dValorDescontoItem = tTribItemNF.dValorDescontoItem
'            .iOrigemMercadoria = tTribItemNF.iOrigemMercadoria
'            .iExTIPI = tTribItemNF.iExTIPI
'            .sGenero = tTribItemNF.sGenero
'            .iProdutoEspecifico = tTribItemNF.iProdutoEspecifico
'            .sEAN = tTribItemNF.sEAN
'            .sEANTrib = tTribItemNF.sEANTrib
'            .dQtdTrib = tTribItemNF.dQtdTrib
'            .sUMTrib = tTribItemNF.sUMTrib
'            .dValorUnitTrib = tTribItemNF.dValorUnitTrib
'
'        End With
'
'        iIndice = iIndice + 1
'
'        Set objItemNF = objNFiscal.colItensNF(iIndice)
'
'        If objItemNF.lNumIntDoc <> tTribItemNF.lNumIntDoc Then Error 22879
'
'        Set objItemNF.objTributacaoItemNF = objTribItemNF
'
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22878
'
'    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)

    NFiscalItens_Le_Trib = SUCESSO

    Exit Function

Erro_NFiscalItens_Le_Trib:

    NFiscalItens_Le_Trib = Err

    Select Case Err

'        Case 22876
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 22877, 22878
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRIBITEMNFISCAL", Err)

        Case 22879
            'lErro = Rotina_Erro(vbOKOnly, "ERRO_INCONSISTENCIA_TRIBITEMNFISCAL", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150114)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'mario 2/7/99 Remover NFiscalBaixada
'Function NFiscalBaixada_Le_Num_Forn(objNFiscal As ClassNFiscal) As Long
''Lê a Nota Fiscal Baixada a partir de TipoNFiscal, Fornecedor, Filial, Serie e NFiscal.
'
'Dim lErro As Long
'Dim lComando As Long
'Dim tNFiscal As typeNFiscal
'
'On Error GoTo Erro_NFiscalBaixada_Le_Num_Forn
'
'    'Abre o comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 35671
'
'    With tNFiscal
'
'        .sMensagemNota = String(STRING_NFISCAL_MENSAGEM, 0)
'        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
'        .sPlaca = String(STRING_NFISCAL_PLACA, 0)
'        .sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
'        .sSerie = String(STRING_NFISCAL_SERIE, 0)
'        .lVolumeEspecie = String(STRING_NFISCAL_VOLUME_ESPECIE, 0)
'        .lVolumeMarca = String(STRING_NFISCAL_VOLUME_MARCA, 0)
'        .sNumPedidoTerc = String(STRING_NUM_PEDIDO_TERC, 0)
'
'        'Pesquisa a Nota Fiscal com os dados passados
'        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, Cliente, FilialCli, FilialEntrega, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco , NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal FROM NFiscalBaixadas WHERE FilialEmpresa = ? AND NumNotaFiscal = ? AND TipoNFiscal = ? AND Fornecedor = ? AND FilialForn = ? AND Serie = ? AND Status <> ? ORDER BY DataEntrada DESC", .lNumIntDoc, .iStatus, .lCliente, .iFilialCli, .iFilialEntrega, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, _
'        .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, giFilialEmpresa, objNFiscal.lNumNotaFiscal, objNFiscal.iTipoNFiscal, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.sSerie, STATUS_EXCLUIDO)
'        If lErro <> AD_SQL_SUCESSO Then Error 35672
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 35673
'        'Se não encontrar --> Erro
'        If lErro = AD_SQL_SEM_DADOS Then Error 35674
'
'        'Preenche objNFiscal com os dados lidos do BD
'        objNFiscal.lNumIntDoc = .lNumIntDoc
'        objNFiscal.dPesoBruto = .dPesoBruto
'        objNFiscal.dPesoLiq = .dPesoLiq
'        objNFiscal.dtDataEmissao = .dtDataEmissao
'        objNFiscal.dtDataEntrada = .dtDataEntrada
'        objNFiscal.dtDataSaida = .dtDataSaida
'        objNFiscal.dtDataVencimento = .dtDataVencimento
'        objNFiscal.dValorDesconto = .dValorDesconto
'        objNFiscal.dValorFrete = .dValorFrete
'        objNFiscal.dValorOutrasDespesas = .dValorOutrasDespesas
'        objNFiscal.dValorProdutos = .dValorProdutos
'        objNFiscal.dValorSeguro = .dValorSeguro
'        objNFiscal.dValorTotal = .dValorTotal
'        objNFiscal.iCanal = .iCanal
'        objNFiscal.iClasseDocCPR = .iClasseDocCPR
'        objNFiscal.iCodTransportadora = .iCodTransportadora
'        objNFiscal.iFilialCli = .iFilialCli
'        objNFiscal.iFilialEmpresa = giFilialEmpresa
'        objNFiscal.iFilialEntrega = .iFilialEntrega
'        objNFiscal.iStatus = .iStatus
'        objNFiscal.iTabelaPreco = .iTabelaPreco
'        objNFiscal.lVolumeQuant = .lVolumeQuant
'        objNFiscal.lCliente = .lCliente
'        objNFiscal.lNumIntDocCPR = .lNumIntDocCPR
'        objNFiscal.lNumIntNotaOriginal = .lNumIntNotaOriginal
'        objNFiscal.lNumIntTrib = .lNumIntTrib
'        objNFiscal.sNumPedidoTerc = .sNumPedidoTerc
'        objNFiscal.lNumPedidoVenda = .lNumPedidoVenda
'        objNFiscal.sMensagemNota = .sMensagemNota
'        objNFiscal.sNaturezaOp = .sNaturezaOp
'        objNFiscal.sPlaca = .sPlaca
'        objNFiscal.sPlacaUF = .sPlacaUF
'        objNFiscal.lVolumeEspecie = .lVolumeEspecie
'        objNFiscal.lVolumeMarca = .lVolumeMarca
'
'    End With
'
'    'Fechar o Comando
'    Call Comando_Fechar(lComando)
'
'    NFiscalBaixada_Le_Num_Forn = SUCESSO
'
'    Exit Function
'
'Erro_NFiscalBaixada_Le_Num_Forn:
'
'    NFiscalBaixada_Le_Num_Forn = Err
'
'    Select Case Err
'
'        Case 35671
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 35672, 35673
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCALBAIXADA1", Err, objNFiscal.iTipoNFiscal, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)
'
'        Case 35674
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150115)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function

Function PrevVenda_Le(ByVal objPrevVenda As ClassPrevVenda) As Long
'Lê a Previsão de Venda a partir da chave fornecida em objPrevVenda. Retorna os dados em objPrevVenda

Dim lComando As Long
Dim lErro As Long
Dim tPrevVenda As typePrevVenda

On Error GoTo Erro_PrevVenda_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 34523

    'Inicializa as variáveis com o tamanho do BD
    tPrevVenda.sCodigo = String(STRING_PREVVENDA_CODIGO, 0)
    tPrevVenda.sProduto = String(STRING_PRODUTO, 0)

    'Seleciona a Previsão de Venda cujo código foi passado em objPrevVenda
    lErro = Comando_Executar(lComando, "SELECT Codigo, DataPrevisao, Produto, Quantidade, Valor, DataInicio, DataFim, CodRegiao FROM PrevVenda WHERE FilialEmpresa = ? AND Codigo = ?", tPrevVenda.sCodigo, tPrevVenda.dtDataPrevisao, tPrevVenda.sProduto, tPrevVenda.dQuantidade, tPrevVenda.dValor, tPrevVenda.dtDataInicio, tPrevVenda.dtDataFim, tPrevVenda.iCodRegiao, giFilialEmpresa, objPrevVenda.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 34524

    'Lê a Previsão de Venda
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34525

    'Se não encontrou a previsão
    If lErro = AD_SQL_SEM_DADOS Then Error 34526

    'Completa objPrevVenda com os dados selecionados do BD
    With objPrevVenda
        
        .iFilialEmpresa = giFilialEmpresa
        .dtDataPrevisao = tPrevVenda.dtDataPrevisao
        .sProduto = tPrevVenda.sProduto
        .iAlmoxarifado = tPrevVenda.iAlmoxarifado
        .dQuantidade = tPrevVenda.dQuantidade
        .dValor = tPrevVenda.dValor
        .dtDataFim = tPrevVenda.dtDataFim
        .dtDataInicio = tPrevVenda.dtDataInicio
        .iCodRegiao = tPrevVenda.iCodRegiao
        
    End With

    Call Comando_Fechar(lComando)

    PrevVenda_Le = SUCESSO

    Exit Function

Erro_PrevVenda_Le:

    PrevVenda_Le = Err

    Select Case Err

        Case 34523
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 34524, 34525
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDA", Err, objPrevVenda.sCodigo)

        Case 34526 'previsão não encontrada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150116)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Incluído por Daniel
Function PrevVenda_Le2(ByVal objPrevVenda As ClassPrevVenda) As Long
'Lê a Previsão de Venda a partir da chave fornecida em objPrevVenda.
'Retorna os dados em objPrevVenda
'ATENÇÃO : Deve ser usada apenas para saber se existe uma PrevVenda com o Código/Filial passados
' a inpal tem essa função customizada

Dim lComando As Long
Dim lErro As Long
Dim tPrevVenda As typePrevVenda

On Error GoTo Erro_PrevVenda_Le2

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 108660

    'Inicializa as variáveis com o tamanho do BD
    tPrevVenda.sCodigo = String(STRING_PREVVENDA_CODIGO, 0)
    tPrevVenda.sProduto = String(STRING_PRODUTO, 0)

    'Seleciona a Previsão de Venda cujo código foi passado em objPrevVenda
    lErro = Comando_Executar(lComando, "SELECT Codigo, Produto, CodRegiao FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ?", tPrevVenda.sCodigo, tPrevVenda.sProduto, tPrevVenda.iCodRegiao, giFilialEmpresa, objPrevVenda.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 108661

    'Lê a Previsão de Venda
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108662

    'Se não encontrou a previsão
    If lErro = AD_SQL_SEM_DADOS Then gError 108663

    'Completa objPrevVenda com os dados selecionados do BD
    With objPrevVenda
        
        .iFilialEmpresa = giFilialEmpresa
        .sProduto = tPrevVenda.sProduto
        .iCodRegiao = tPrevVenda.iCodRegiao
        
    End With

    Call Comando_Fechar(lComando)

    PrevVenda_Le2 = SUCESSO

    Exit Function

Erro_PrevVenda_Le2:

    PrevVenda_Le2 = gErr

    Select Case gErr

        Case 108660
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 108661, 108662
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDA", gErr, objPrevVenda.sCodigo)

        Case 108663 'previsão não encontrada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150117)

    End Select

    Call Comando_Fechar(lComando)

End Function

Function ItensPedido_Le_Todos(ByVal lComando As Long, ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê no BD a coleção de ítens do Pedido de Venda e devolve em colItensPedido dentro de objPedidoVenda

Dim lErro As Long
Dim tItemPedido As typeItemPedido

On Error GoTo Erro_ItensPedido_Le_Todos

    lErro = CF("ItensPedido_Le_Inclusive_Baixados", objPedidoVenda, STATUS_ABERTO)
    If lErro <> SUCESSO Then gError 36658

    ItensPedido_Le_Todos = SUCESSO

    Exit Function

Erro_ItensPedido_Le_Todos:

    ItensPedido_Le_Todos = Err

    Select Case gErr

        Case 36658
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150118)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LiberacaoCredito_Le(ByVal objLiberacaoCredito As ClassLiberacaoCredito) As Long
'Lê a liberacao de credito a partir do código do usuario.
'Devolve os dados em objLiberacaoCredito.

Dim lComando As Long
Dim lErro As Long
Dim tLiberacaoCredito As typeLiberacaoCredito

On Error GoTo Erro_LiberacaoCredito_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 36965

    'Verifica se a os dados de autorizacao de liberacao de credito existe, e se existir carrega seus dados em objLIberacaoCredito
    lErro = Comando_Executar(lComando, "SELECT LimiteOperacao, LimiteMensal FROM LiberacaoCredito WHERE CodUsuario = ?", tLiberacaoCredito.dLimiteOperacao, tLiberacaoCredito.dLimiteMensal, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 36966

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 36967

    'Liberacao não cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 36968

    'Carrega os dados lidos no objLiberacaoCredito
    objLiberacaoCredito.dLimiteOperacao = tLiberacaoCredito.dLimiteOperacao
    objLiberacaoCredito.dLimiteMensal = tLiberacaoCredito.dLimiteMensal

    Call Comando_Fechar(lComando)

    LiberacaoCredito_Le = SUCESSO

    Exit Function

Erro_LiberacaoCredito_Le:

    LiberacaoCredito_Le = Err

    Select Case Err

        Case 36965
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 36966, 36967
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err, objLiberacaoCredito.sCodUsuario)

        Case 36968 'liberacao credito não cadastrada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150119)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LiberacaoCredito_Lock(ByVal objLiberacaoCredito As ClassLiberacaoCredito) As Long
'Lê e loca a liberacao de credito a partir do código do usuario.
'Devolve os dados em objLiberacaoCredito.

Dim lComando As Long
Dim lErro As Long
Dim tLiberacaoCredito As typeLiberacaoCredito

On Error GoTo Erro_LiberacaoCredito_Lock

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44476

    'Verifica se a os dados de autorizacao de liberacao de credito existe, e se existir carrega seus dados em objLIberacaoCredito
    lErro = Comando_ExecutarLockado(lComando, "SELECT LimiteOperacao, LimiteMensal FROM LiberacaoCredito WHERE CodUsuario = ?", tLiberacaoCredito.dLimiteOperacao, tLiberacaoCredito.dLimiteMensal, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 44477

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44478

    'Liberacao não cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 44479

    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 44480
    
    'Carrega os dados lidos no objLiberacaoCredito
    objLiberacaoCredito.dLimiteOperacao = tLiberacaoCredito.dLimiteOperacao
    objLiberacaoCredito.dLimiteMensal = tLiberacaoCredito.dLimiteMensal

    Call Comando_Fechar(lComando)

    LiberacaoCredito_Lock = SUCESSO

    Exit Function

Erro_LiberacaoCredito_Lock:

    LiberacaoCredito_Lock = Err

    Select Case Err

        Case 44476
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44477, 44478
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err, objLiberacaoCredito.sCodUsuario)

        Case 44479 'liberacao credito não cadastrada

        Case 44480
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_LIBERACAOCREDITO", Err, objLiberacaoCredito.sCodUsuario)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150120)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function


Function ValorLiberadoCredito_Le(ByVal objValorLiberadoCredito As ClassValorLiberadoCredito) As Long
'Lê a estatistica de liberação de credito de um usuario em um determinado ano
'Devolve os dados em objValorLiberadoCredito.

Dim lComando As Long
Dim lErro As Long
Dim tValorLiberadoCredito As typeValorLiberadoCredito
Dim iIndice As Integer

On Error GoTo Erro_ValorLiberadoCredito_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 36970

    'Verifica se a os dados estatisticos de liberacao de credito existe, e se existir carrega seus dados em objValorLiberadoCredito
    lErro = Comando_Executar(lComando, "SELECT Liberado1, Liberado2, Liberado3, Liberado4, Liberado5, Liberado6, Liberado7, Liberado8, Liberado9, Liberado10, Liberado11, Liberado12 FROM ValorLiberadoCredito WHERE CodUsuario = ? AND Ano = ? ", tValorLiberadoCredito.adValorLiberado(1), tValorLiberadoCredito.adValorLiberado(2), tValorLiberadoCredito.adValorLiberado(3), tValorLiberadoCredito.adValorLiberado(4), tValorLiberadoCredito.adValorLiberado(5), tValorLiberadoCredito.adValorLiberado(6), tValorLiberadoCredito.adValorLiberado(7), tValorLiberadoCredito.adValorLiberado(8), tValorLiberadoCredito.adValorLiberado(9), tValorLiberadoCredito.adValorLiberado(10), tValorLiberadoCredito.adValorLiberado(11), tValorLiberadoCredito.adValorLiberado(12), objValorLiberadoCredito.sCodUsuario, objValorLiberadoCredito.iAno)
    If lErro <> AD_SQL_SUCESSO Then Error 36971

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 36972

    'Liberacao não cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 36973

    'Carrega os dados lidos no tValorLberadoCredito
    For iIndice = 1 To 12
        objValorLiberadoCredito.adValorLiberado(iIndice) = tValorLiberadoCredito.adValorLiberado(iIndice)
    Next

    Call Comando_Fechar(lComando)

    ValorLiberadoCredito_Le = SUCESSO

Exit Function

Erro_ValorLiberadoCredito_Le:

    ValorLiberadoCredito_Le = Err

    Select Case Err

        Case 36970
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 36971, 36972
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALORLIBERADOCREDITO", Err, objValorLiberadoCredito.sCodUsuario, objValorLiberadoCredito.iAno)

        Case 36973 'liberacao credito não cadastrada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150121)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PedidoDeVenda_Le_Lock(ByVal lComando As Long, ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
Attribute PedidoDeVenda_Le_Lock.VB_Description = "Lê e faz o lock exclusivo no pedido de venda com o código e a filialempresa passados."
'Lê o Pedido de Venda a partir do Código passado.

Dim lErro As Long
Dim tPedidoVenda As typePedidoVenda

On Error GoTo Erro_PedidoDeVenda_Le_Lock

    tPedidoVenda.sMensagemNota = String(STRING_PEDIDOVENDA_MENSAGEM_NOTA, 0)
    tPedidoVenda.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    tPedidoVenda.sPedidoCliente = String(STRING_PEDIDOVENDA_PEDIDO_CLIENTE, 0)
    tPedidoVenda.sPedidoRepresentante = String(STRING_PEDIDOVENDA_PEDIDO_REPRESENTANTE, 0)
    tPedidoVenda.sObs = String(STRING_OBSERVACAO_OBSERVACAO, 0)

    lErro = Comando_ExecutarLockado(lComando, "SELECT FilialEmpresaFaturamento, Cliente, Filial, FilialEntrega, CodTransportadora, CondicaoPagto, PercAcrescFinanceiro, DataEmissao, MensagemNota, NaturezaOp, ValorTotal, ValorFrete, ValorDesconto, ValorSeguro, PedidoCliente, CanalVenda, TabelaPreco, ProxSeqBloqueio, FaturaIntegral, ComissaoAutomatica, CobrancaAutomatica, DataReferencia, NumIntDoc, CodTranspRedesp, DetPagFrete, DataEntrega, PedidoRepresentante, OBS, Andamento FROM PedidosDeVenda WHERE FilialEmpresa = ? AND Codigo = ? ", tPedidoVenda.iFilialEmpresaFaturamento, tPedidoVenda.lCliente, tPedidoVenda.iFilial, tPedidoVenda.iFilialEntrega, tPedidoVenda.iCodTransportadora, tPedidoVenda.iCondicaoPagto, _
        tPedidoVenda.dPercAcrescFinanceiro, tPedidoVenda.dtDataEmissao, tPedidoVenda.sMensagemNota, tPedidoVenda.sNaturezaOp, tPedidoVenda.dValorTotal, tPedidoVenda.dValorFrete, tPedidoVenda.dValorDesconto, tPedidoVenda.dValorSeguro, tPedidoVenda.sPedidoCliente, tPedidoVenda.iCanalVenda, tPedidoVenda.iTabelaPreco, tPedidoVenda.iProxSeqBloqueio, tPedidoVenda.iFaturaIntegral, tPedidoVenda.iComissaoAutomatica, tPedidoVenda.iCobrancaAutomatica, tPedidoVenda.dtDataReferencia, tPedidoVenda.lNumIntDoc, tPedidoVenda.iCodTranspRedesp, tPedidoVenda.iDetPagFrete, tPedidoVenda.dtDataEntrega, tPedidoVenda.sPedidoRepresentante, tPedidoVenda.sObs, tPedidoVenda.iAndamento, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 36984

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 36985

    If lErro = AD_SQL_SEM_DADOS Then Error 36986

    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 36987

    objPedidoVenda.iFilialEmpresaFaturamento = tPedidoVenda.iFilialEmpresaFaturamento
    objPedidoVenda.lCliente = tPedidoVenda.lCliente
    objPedidoVenda.iFilial = tPedidoVenda.iFilial
    objPedidoVenda.iFilialEntrega = tPedidoVenda.iFilialEntrega
    objPedidoVenda.iCodTransportadora = tPedidoVenda.iCodTransportadora
    objPedidoVenda.iCodTranspRedesp = tPedidoVenda.iCodTranspRedesp
    objPedidoVenda.iDetPagFrete = tPedidoVenda.iDetPagFrete
    objPedidoVenda.dtDataEntrega = tPedidoVenda.dtDataEntrega
    objPedidoVenda.iCondicaoPagto = tPedidoVenda.iCondicaoPagto
    objPedidoVenda.dPercAcrescFinanceiro = tPedidoVenda.dPercAcrescFinanceiro
    objPedidoVenda.dtDataEmissao = tPedidoVenda.dtDataEmissao
    objPedidoVenda.sMensagemNota = tPedidoVenda.sMensagemNota
    objPedidoVenda.sNaturezaOp = tPedidoVenda.sNaturezaOp
    objPedidoVenda.dValorTotal = tPedidoVenda.dValorTotal
    objPedidoVenda.dValorFrete = tPedidoVenda.dValorFrete
    objPedidoVenda.dValorDesconto = tPedidoVenda.dValorDesconto
    objPedidoVenda.dValorSeguro = tPedidoVenda.dValorSeguro
    objPedidoVenda.sPedidoCliente = tPedidoVenda.sPedidoCliente
    objPedidoVenda.iCanalVenda = tPedidoVenda.iCanalVenda
    objPedidoVenda.iTabelaPreco = tPedidoVenda.iTabelaPreco
    objPedidoVenda.iProxSeqBloqueio = tPedidoVenda.iProxSeqBloqueio
    objPedidoVenda.iFaturaIntegral = tPedidoVenda.iFaturaIntegral
    objPedidoVenda.iComissaoAutomatica = tPedidoVenda.iComissaoAutomatica
    objPedidoVenda.iCobrancaAutomatica = tPedidoVenda.iCobrancaAutomatica
    objPedidoVenda.dtDataReferencia = tPedidoVenda.dtDataReferencia
    objPedidoVenda.lNumIntDoc = tPedidoVenda.lNumIntDoc
    objPedidoVenda.sPedidoRepresentante = tPedidoVenda.sPedidoRepresentante
    objPedidoVenda.sObs = tPedidoVenda.sObs
    objPedidoVenda.iAndamento = tPedidoVenda.iAndamento
    
    lErro = CF("PV_Le_Customizado", objPedidoVenda)
    If lErro <> SUCESSO Then Error 40311
    
    PedidoDeVenda_Le_Lock = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_Lock:

    PedidoDeVenda_Le_Lock = Err

    Select Case Err

        Case 36984, 36985
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", Err, objPedidoVenda.lCodigo)

        Case 36986, 40311 'Tratado na rotina chamadora

        Case 36987
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PEDIDOS_DE_VENDA", Err, objPedidoVenda.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150122)

    End Select

    Exit Function

End Function

Function PedidoDeVenda_Le_ComBloqueio(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê o Pedido de Venda a partir do Código passado, bloqueando-o

Dim lComando As Long
Dim lErro As Long
Dim tPedidoVenda As typePedidoVenda

On Error GoTo Erro_PedidoDeVenda_Le_ComBloqueio

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44173

    lErro = PedidoDeVenda_Le_Mod(objPedidoVenda, lComando)
    If lErro <> SUCESSO And lErro <> 51357 Then Error 44174
    
    If lErro = 51357 Then Error 44175

    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 44176

    lErro = CF("PedidoDeVenda_Le_Tributacao", objPedidoVenda)
    If lErro <> SUCESSO Then Error 44177
    
    'ler parcelas
    lErro = CF("ParcelasPV_Le", objPedidoVenda)
    If lErro <> SUCESSO Then Error 44178
    
    'ler Comissoes
    lErro = CF("ComissoesPV_Le", objPedidoVenda)
    If lErro <> SUCESSO Then Error 44179
    
    'ler bloqueios
    lErro = CF("BloqueiosPV_Le", objPedidoVenda)
    If lErro <> SUCESSO Then Error 44180
    
    'ler itens c/tributacao
    lErro = CF("PedidoDeVenda_Le_Itens_ComTributacao", objPedidoVenda)
    If lErro <> SUCESSO Then Error 44181

    Call Comando_Fechar(lComando)

    PedidoDeVenda_Le_ComBloqueio = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_ComBloqueio:

    PedidoDeVenda_Le_ComBloqueio = Err

    Select Case Err

        Case 44173
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44174
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", Err, objPedidoVenda.lCodigo)

        Case 44175
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO", Err, objPedidoVenda.lCodigo)

        Case 44176
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PEDIDOS_DE_VENDA", Err, objPedidoVenda.lCodigo)

        Case 44177, 44178, 44179, 44180, 44181 'Tratado na rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150123)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Function TiposDocInfo_Le(colTipoDocInfo As colTipoDocInfo) As Long
''Lê todos os registros de TiposDocInfo
'
'Dim lErro As Long
'Dim tTipoDocInfo As typeTipoDocInfo
'Dim lComando As Long
'
'On Error GoTo Erro_TiposDocInfo_Le
'
'    'Abre o comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 31397
'
'    'Inicializa as variáveis do tipo Texto
'    With tTipoDocInfo
'        .sSigla = String(STRING_TIPO_DOC_INFO_SIGLA, 0)
'        .sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
'        .sNaturezaOperacaoPadrao = String(STRING_NATUREZAOP_CODIGO, 0)
'        .sNomeReduzido = String(50, 0)
'        .sNomeTelaNFiscal = String(100, 0)
'        .sTipoDocCPR = String(10, 0)
'        .sTituloTelaNFiscal = String(100, 0)
'
'        'Lê todos os Tipos de Documentos do BD
'        lErro = Comando_Executar(lComando, "SELECT Sigla, Descricao, TipoMovtoEstoque, TipoDocCPR, NaturezaOperacaoPadrao, InfoContabilizacao, Codigo, NomeReduzido, NomeTelaNFiscal, TituloTelaNFiscal, Faturavel, Comissao, Emitente, Destinatario, Complementar, Tipo FROM TiposDocInfo ORDER BY Sigla", _
'        .sSigla, .sDescricao, .iTipoMovtoEstoque, .sTipoDocCPR, .sNaturezaOperacaoPadrao, .iInfoContabilizacao, .iCodigo, .sNomeReduzido, .sNomeTelaNFiscal, .sTituloTelaNFiscal, .iFaturavel, .iComissao, .iEmitente, .iDestinatario, .iComplementar, .iTipo, .iPadrao)
'        If lErro <> AD_SQL_SUCESSO Then Error 31398
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31399
'
'        Do While lErro <> AD_SQL_SEM_DADOS
'
'            'Guarda em colTipoDocInfo os Tipos de Documento lidos
'            colTipoDocInfo.Add .sSigla, .sDescricao, .iTipoMovtoEstoque, 0, .sNaturezaOperacaoPadrao, .iInfoContabilizacao, .sTipoDocCPR, .iCodigo, .sNomeReduzido, .sNomeTelaNFiscal, .sTituloTelaNFiscal, .iFaturavel, .iComissao, .iEmitente, .iDestinatario, .iComplementar, .iTipo, .iPadrao
'
'            lErro = Comando_BuscarProximo(lComando)
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 31400
'
'        Loop
'
'    End With
'
'    'Fecha o comando
'    Call Comando_Fechar(lComando)
'
'    TiposDocInfo_Le = SUCESSO
'
'    Exit Function
'
'Erro_TiposDocInfo_Le:
'
'    TiposDocInfo_Le = Err
'
'    Select Case Err
'
'        Case 31397
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150124)
'
'        Case 31398, 31399, 31400
'            lErro = Rotina_Erro(vbOKOnly, "0", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150125)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function
'
'mario
'Function TiposDocInfo_Le_NomeTela(objTipoDocInfo As ClassTipoDocInfo) As Long
'
'Dim lErro As Long
'Dim lComando As Long
'Dim iCodigo As Integer
'
'On Error GoTo Erro_TiposDocInfo_Le_NomeTela
'
'    'Abrir comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 35100
'
'    'Lê a Nota Fiscal Original
'    lErro = Comando_Executar(lComando, "SELECT Codigo FROM TiposDocInfo WHERE NomeTelaNFiscal =? AND Complementar = ? AND Tipo = ? ", iCodigo, objTipoDocInfo.sNomeTelaNFiscal, objTipoDocInfo.iComplementar, objTipoDocInfo.iTipo)
'    If lErro <> AD_SQL_SUCESSO Then Error 35101
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 35102
'
'    'Se não encontrar --> Erro
'    If lErro = AD_SQL_SEM_DADOS Then Error 35103
'
'    'Retorna o Número Interno da Nota Fiscal
'    objTipoDocInfo.iCodigo = iCodigo
'
'    'Fecha o comando
'    Call Comando_Fechar(lComando)
'
'    TiposDocInfo_Le_NomeTela = SUCESSO
'
'    Exit Function
'
'Erro_TiposDocInfo_Le_NomeTela:
'
'    TiposDocInfo_Le_NomeTela = Err
'
'    Select Case Err
'
'        Case 35100
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 35101, 35102
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDOCINFO", Err)
'
'        Case 35103
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150126)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function

Function AlocacoesNF_Le(ByVal objNFiscal As ClassNFiscal) As Long
'Lê as Alocações dos itens da Nota Fiscal passada

Dim lErro As Long
Dim lComando As Long
Dim objItemNF As ClassItemNF
Dim colAlocacoes As ColAlocacoesItemNF
Dim iAlmoxarifado As Integer
Dim dQuantidade As Double
Dim iControleEstoque As Integer
Dim sNomeRed As String
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim lTransferencia As Long
Dim objItemNFAlocacao As ClassItemNFAlocacao
Dim iTipoMov As Integer
Dim objTipoMovEstoque As ClassTipoMovEst
Dim sProduto As String
Dim iIndice As Integer
Dim iTipoOrigem As Integer
Dim lNumIntOrigem As Long
Dim objReserva As ClassReservaItem
Dim sUMEstoque As String

On Error GoTo Erro_AlocacoesNF_Le

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 35706

    For Each objItemNF In objNFiscal.colItensNF
        
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
            
            If objItemNF.colItensRomaneioGrade.Count = 0 Then
                sProduto = objItemNF.sProduto
                iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL
                lNumIntOrigem = objItemNF.lNumIntDoc
            Else
                If iIndice = 0 Then iIndice = 1
                
                sProduto = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE
                lNumIntOrigem = objItemNF.colItensRomaneioGrade(iIndice).lNumIntDoc
                
            End If
        
            sUMEstoque = String(STRING_UM_SIGLA, 0)
            
            'Lê o Controle estoque do produto do item da NF
            lErro = Comando_Executar(lComando, "SELECT ControleEstoque, SiglaUMEstoque FROM Produtos WHERE Codigo = ?", iControleEstoque, sUMEstoque, sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 35707
    
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 35708
            If lErro <> AD_SQL_SUCESSO Then gError 35709 'Não encontrou o item
    
            'Verifica se e um produto sem estoque
            'IF COMENTADO PORQUE: Não pode deixar de ler porque o produto mudou de configuração
            'If iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
    
                sNomeRed = String(STRING_ALMOXARIFADO_NOME_REDUZIDO, 0)
    
                'Lê as alocações do Produto
                lErro = Comando_Executar(lComando, "SELECT TipoMov, MovimentoEstoque.Quantidade, MovimentoEstoque.Almoxarifado, Almoxarifado.NomeReduzido FROM MovimentoEstoque,Almoxarifado WHERE NumIntDocOrigem = ? AND TipoNumIntDocOrigem =? AND Almoxarifado.Codigo = MovimentoEstoque.Almoxarifado", iTipoMov, dQuantidade, iAlmoxarifado, sNomeRed, lNumIntOrigem, iTipoOrigem)
                If lErro <> AD_SQL_SUCESSO Then gError 35710
    
                lErro = Comando_BuscarPrimeiro(lComando)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 35711
    
                Do While lErro <> AD_SQL_SEM_DADOS
    
                    Set objTipoMovEstoque = New ClassTipoMovEst
                    
                    objTipoMovEstoque.iCodigo = iTipoMov
                    
                    lErro = CF("TipoMovEstoque_Le", objTipoMovEstoque)
                    If lErro <> SUCESSO Then gError 83341
    
                    If iIndice = 0 Then
                        'Guarda as Alocações do item
                        Set objItemNFAlocacao = objItemNF.colAlocacoes.Add(iAlmoxarifado, sNomeRed, dQuantidade)
                        
                        objItemNFAlocacao.sUnidadeMed = sUMEstoque
                        objItemNFAlocacao.iTransferencia = objTipoMovEstoque.iTransferencia
                        
                    Else
                        Set objReserva = New ClassReservaItem
                        
                        objReserva.iAlmoxarifado = iAlmoxarifado
                        objReserva.dQuantidade = dQuantidade
                        objReserva.sAlmoxarifado = sNomeRed
                        
                        objItemNF.colItensRomaneioGrade(iIndice).colLocalizacao.Add objReserva
                        
                    End If
                    
                    lErro = Comando_BuscarProximo(lComando)
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 35712
    
                Loop
    
            'End If
        Next
    Next

    'Fecha o Comando
    Call Comando_Fechar(lComando)

    AlocacoesNF_Le = SUCESSO

    Exit Function

Erro_AlocacoesNF_Le:

    AlocacoesNF_Le = gErr

    Select Case gErr

        Case 35706
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 35707, 35708
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objItemNF.sProduto)

        Case 35709
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objItemNF.sProduto)

        Case 35710, 35711, 35712
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr, objItemNF.lNumIntDoc)

        Case 83341

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150127)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'mario
Function NFiscal_Le_Num_Cli(ByVal objNFiscal As ClassNFiscal, ByVal iTipo As Integer) As Long
'Lê a Nota Fiscal a partir de TipoNFiscal, Cliente, Filial, Serie e NFiscal.

Dim lErro As Long
Dim lComando As Long
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NFiscal_Le_Num_Cli

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 35953

    With tNFiscal

        .sMensagemNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sMensagemCorpoNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
        .sPlaca = String(STRING_NFISCAL_PLACA, 0)
        .sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
        .sSerie = String(STRING_SERIE, 0)
        .sNumPedidoTerc = String(STRING_NUM_PEDIDO_TERC, 0)
        .sVolumeNumero = String(STRING_NFISCAL_VOLUME_NUMERO, 0)

        'Pesquisa a Nota Fiscal com os dados passados
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, Fornecedor, FilialForn, FilialEntrega, DataEmissao, DataEntrada, DataSaida, DataVencimento,DataReferencia, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco , NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, VolumeNumero, FreteRespons, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND NumNotaFiscal = ? AND Tipo = ? AND Complementar <> ? AND Cliente = ? AND FilialCli = ? AND Fornecedor = ? AND FilialForn = ? AND Serie = ? AND Status <> ? ORDER BY DataEntrada DESC", .lNumIntDoc, .iStatus, .lFornecedor, .iFilialForn, .iFilialEntrega, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, _
            .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, giFilialEmpresa, objNFiscal.lNumNotaFiscal, iTipo, DOCINFO_COMPLEMENTO, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.sSerie, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 35954

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 35955
        'Se não encontrar --> Erro
        If lErro = AD_SQL_SEM_DADOS Then Error 35956

        'Preenche objNFiscal com os dados lidos do BD
        objNFiscal.lNumIntDoc = .lNumIntDoc
        objNFiscal.dPesoBruto = .dPesoBruto
        objNFiscal.dPesoLiq = .dPesoLiq
        objNFiscal.dtDataEmissao = .dtDataEmissao
        objNFiscal.dtDataEntrada = .dtDataEntrada
        objNFiscal.dtDataSaida = .dtDataSaida
        objNFiscal.dtDataVencimento = .dtDataVencimento
        objNFiscal.dValorDesconto = .dValorDesconto
        objNFiscal.dValorFrete = .dValorFrete
        objNFiscal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscal.dValorProdutos = .dValorProdutos
        objNFiscal.dValorSeguro = .dValorSeguro
        objNFiscal.dValorTotal = .dValorTotal
        objNFiscal.iCanal = .iCanal
        objNFiscal.iClasseDocCPR = .iClasseDocCPR
        objNFiscal.iCodTransportadora = .iCodTransportadora
        objNFiscal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscal.iDetPagFrete = .iDetPagFrete
        objNFiscal.iSemDataSaida = .iSemDataSaida
        objNFiscal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscal.iFilialForn = .iFilialForn
        objNFiscal.iFilialEmpresa = giFilialEmpresa
        objNFiscal.iFilialEntrega = .iFilialEntrega
        objNFiscal.iStatus = .iStatus
        objNFiscal.iTabelaPreco = .iTabelaPreco
        objNFiscal.lVolumeQuant = .lVolumeQuant
        objNFiscal.lFornecedor = .lFornecedor
        objNFiscal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscal.lNumIntTrib = .lNumIntTrib
        objNFiscal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscal.lNumPedidoVenda = .lNumPedidoVenda
        objNFiscal.sMensagemNota = .sMensagemNota
        objNFiscal.sNaturezaOp = .sNaturezaOp
        objNFiscal.sPlaca = .sPlaca
        objNFiscal.sPlacaUF = .sPlacaUF
        objNFiscal.lVolumeEspecie = .lVolumeEspecie
        objNFiscal.lVolumeMarca = .lVolumeMarca
        objNFiscal.sVolumeNumero = .sVolumeNumero
        objNFiscal.iFreteRespons = .iFreteRespons
        objNFiscal.dtDataReferencia = .dtDataReferencia
        objNFiscal.sMensagemCorpoNota = .sMensagemCorpoNota

    End With

    'Fechar o Comando
    Call Comando_Fechar(lComando)

    NFiscal_Le_Num_Cli = SUCESSO

    Exit Function

Erro_NFiscal_Le_Num_Cli:

    NFiscal_Le_Num_Cli = Err

    Select Case Err

        Case 35953
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 35954, 35955
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL2", Err, objNFiscal.iTipoNFiscal, objNFiscal.lCliente, objNFiscal.iFilialForn, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 35956

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150128)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function
'mario
'mario 2/7/99 Remover NFiscalBaixada
'Function NFiscalBaixada_Le_Num_Cli(objNFiscal As ClassNFiscal) As Long
''Lê a Nota Fiscal Baixada a partir de TipoNFiscal, Cliente, Filial, Série e NFiscal.
'
'Dim lErro As Long
'Dim lComando As Long
'Dim tNFiscal As typeNFiscal
'
'On Error GoTo Erro_NFiscalBaixada_Le_Num_Cli
'
'    'Abre o comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 35957
'
'    With tNFiscal
'
'        .sMensagemNota = String(STRING_NFISCAL_MENSAGEM, 0)
'        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
'        .sPlaca = String(STRING_NFISCAL_PLACA, 0)
'        .sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
'        .sSerie = String(STRING_NFISCAL_SERIE, 0)
'        .lVolumeEspecie = String(STRING_NFISCAL_VOLUME_ESPECIE, 0)
'        .lVolumeMarca = String(STRING_NFISCAL_VOLUME_MARCA, 0)
'        .sNumPedidoTerc = String(STRING_NUM_PEDIDO_TERC, 0)
'
'        'Pesquisa a Nota Fiscal com os dados passados
'        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, Fornecedor, FilialForn, FilialEntrega, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco , NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal FROM NFiscalBaixadas WHERE FilialEmpresa = ? AND NumNotaFiscal = ? AND TipoNFiscal = ? AND Cliente = ? AND FilialCli = ? AND Serie = ? AND Status <> ? ORDER BY DataEntrada DESC", .lNumIntDoc, .iStatus, .lFornecedor, .iFilialForn, .iFilialEntrega, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, _
'            .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, giFilialEmpresa, objNFiscal.lNumNotaFiscal, objNFiscal.iTipoNFiscal, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.sSerie, STATUS_EXCLUIDO)
'        If lErro <> AD_SQL_SUCESSO Then Error 35958
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 35959
'
'        'Se não encontrar --> Erro
'        If lErro = AD_SQL_SEM_DADOS Then Error 35960
'
'        'Preenche objNFiscal com os dados lidos do BD
'        objNFiscal.lNumIntDoc = .lNumIntDoc
'        objNFiscal.dPesoBruto = .dPesoBruto
'        objNFiscal.dPesoLiq = .dPesoLiq
'        objNFiscal.dtDataEmissao = .dtDataEmissao
'        objNFiscal.dtDataEntrada = .dtDataEntrada
'        objNFiscal.dtDataSaida = .dtDataSaida
'        objNFiscal.dtDataVencimento = .dtDataVencimento
'        objNFiscal.dValorDesconto = .dValorDesconto
'        objNFiscal.dValorFrete = .dValorFrete
'        objNFiscal.dValorOutrasDespesas = .dValorOutrasDespesas
'        objNFiscal.dValorProdutos = .dValorProdutos
'        objNFiscal.dValorSeguro = .dValorSeguro
'        objNFiscal.dValorTotal = .dValorTotal
'        objNFiscal.iCanal = .iCanal
'        objNFiscal.iClasseDocCPR = .iClasseDocCPR
'        objNFiscal.iCodTransportadora = .iCodTransportadora
'        objNFiscal.iFilialForn = .iFilialForn
'        objNFiscal.iFilialEmpresa = giFilialEmpresa
'        objNFiscal.iFilialEntrega = .iFilialEntrega
'        objNFiscal.iStatus = .iStatus
'        objNFiscal.iTabelaPreco = .iTabelaPreco
'        objNFiscal.lVolumeQuant = .lVolumeQuant
'        objNFiscal.lFornecedor = .lFornecedor
'        objNFiscal.lNumIntDocCPR = .lNumIntDocCPR
'        objNFiscal.lNumIntNotaOriginal = .lNumIntNotaOriginal
'        objNFiscal.lNumIntTrib = .lNumIntTrib
'        objNFiscal.sNumPedidoTerc = .sNumPedidoTerc
'        objNFiscal.lNumPedidoVenda = .lNumPedidoVenda
'        objNFiscal.sMensagemNota = .sMensagemNota
'        objNFiscal.sNaturezaOp = .sNaturezaOp
'        objNFiscal.sPlaca = .sPlaca
'        objNFiscal.sPlacaUF = .sPlacaUF
'        objNFiscal.lVolumeEspecie = .lVolumeEspecie
'        objNFiscal.lVolumeMarca = .lVolumeMarca
'
'    End With
'
'    'Fechar o Comando
'    Call Comando_Fechar(lComando)
'
'    NFiscalBaixada_Le_Num_Cli = SUCESSO
'
'    Exit Function
'
'Erro_NFiscalBaixada_Le_Num_Cli:
'
'    NFiscalBaixada_Le_Num_Cli = Err
'
'    Select Case Err
'
'        Case 35957
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 35958, 35959
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCALBAIXADA3", Err, objNFiscal.iTipoNFiscal, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)
'
'        Case 35960
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150129)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function

'mario
Function TabelaDePreco_Lock(ByVal iTabelaPreco As Integer) As Long
'Faz lock da Tabela de Preço passada como parâmetro
'Chamada DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer

On Error GoTo Erro_TabelaDePreco_Lock
    
    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 43125
    
    'Seleciona a Tabela de Venda à ser lockado
    lErro = Comando_ExecutarLockado(lComando, "SELECT Codigo FROM TabelasDePreco WHERE Codigo =?", iCodigo, iTabelaPreco)
    If lErro <> AD_SQL_SUCESSO Then Error 43126

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 43127

    'Não encontrou a Tabela de Preço --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 43128

    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 43129

    'Libera comando
    Call Comando_Fechar(lComando)

    TabelaDePreco_Lock = SUCESSO

    Exit Function

Erro_TabelaDePreco_Lock:

    TabelaDePreco_Lock = Err

    Select Case Err
        
        Case 43125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
                
        Case 43126, 43127
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECO1", Err, iTabelaPreco)
            
        Case 43128
            'Erro tratado na rotina chamada

        Case 43129
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TABELASDEPRECO", Err, iTabelaPreco)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150130)

    End Select

    'Libera comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscalFatura_Le_NFOriginal(ByVal objNFOriginal As ClassNFiscal) As Long
'Lê a Nota Fiscal Original

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_NFiscalFatura_Le_NFOriginal

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 45344
    
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE Serie = ? AND NumNotaFiscal = ? AND (NomeTelaNFiscal = ? Or NomeTelaNFiscal = ? Or NomeTelaNFiscal = ? Or NomeTelaNFiscal = ? OR NomeTelaNFiscal = ? OR NomeTelaNFiscal = ?) AND Complementar = ? AND FilialEmpresa = ? ORDER BY DataSaida DESC", lNumIntDoc, objNFOriginal.sSerie, objNFOriginal.lNumNotaFiscal, "NFiscalFatura", "NFiscal", "NFiscalFaturaPedido", "NFiscalPedido", "NFiscalRem", "NFiscalRemPedido", DOCINFO_NORMAL, objNFOriginal.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 45345

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 45346
    
    'Se não achou a NFiscalFatura Original --> erro
    If lErro <> AD_SQL_SUCESSO Then Error 45347
    
    objNFOriginal.lNumIntDoc = lNumIntDoc

    'Libera comando
    Call Comando_Fechar(lComando)
    
    NFiscalFatura_Le_NFOriginal = SUCESSO
    
    Exit Function
    
Erro_NFiscalFatura_Le_NFOriginal:

    NFiscalFatura_Le_NFOriginal = Err
    
    Select Case Err
    
        Case 45344
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 45345, 45346
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCALTIPODOCINFO", Err)

        Case 45347

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150131)
            
    End Select

    'Libera comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function NFiscal_Le_NFOriginal(ByVal objNFOriginal As ClassNFiscal) As Long
'Lê a Nota Fiscal Original

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_NFiscal_Le_NFOriginal

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42916

    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE Cliente = ? AND FilialCli = ? AND Serie = ? AND NumNotaFiscal = ? AND NomeTelaNFiscal = ?  AND Complementar = ? ORDER BY DataSaida DESC", lNumIntDoc, objNFOriginal.lCliente, objNFOriginal.iFilialCli, objNFOriginal.sSerie, objNFOriginal.lNumNotaFiscal, "NFiscal", DOCINFO_NORMAL)
    If lErro <> AD_SQL_SUCESSO Then Error 42917

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42918
    
    'Se não achou a NFiscal Original --> erro
    If lErro <> AD_SQL_SUCESSO Then Error 42919
    
    objNFOriginal.lNumIntDoc = lNumIntDoc

    'Libera comando
    Call Comando_Fechar(lComando)
    
    NFiscal_Le_NFOriginal = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Le_NFOriginal:

    NFiscal_Le_NFOriginal = Err
    
    Select Case Err
    
        Case 42916
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 42917, 42918
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCALTIPODOCINFO", Err)

        Case 42919

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150132)
            
    End Select

    'Libera comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'mario
Function NFiscal_Testa_Existencia(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objNFiscal As ClassNFiscal) As Long
'verifical se a nota fiscal já está cadastrada ou se já existe uma nota com os mesmos dados em um dado periodo

Dim lErro As Long
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult
Dim sStat As String

On Error GoTo Erro_NFiscal_Testa_Existencia

    If objNFiscal.iFilialEmpresa = 0 Then
        objNFiscal.iFilialEmpresa = giFilialEmpresa
    End If

    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 42415
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 42416
    
    'Existe
    If lErro = AD_SQL_SUCESSO Then
    
        objNFiscal.lNumIntDoc = lNumIntDoc
        
        'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
        lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
        If lErro <> SUCESSO And lErro <> 207565 And lErro <> 207567 And lErro <> 207624 And lErro <> 207626 Then gError 207587
        
        'precisa excluir a nota e inclui-la com o mesmo numero
        gError 207583

'        'Dá a Mensagem de aviso que só será gravado a contabilidade
'        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
'        If vbMsgRes = vbYes Then
'            gError 42417
'        ElseIf vbMsgRes = vbNo Then
'            gError 61398
'        End If
    
    End If
    
    'Verifica em um período de emissão se exite alguma nota com os mesmos dados
    lErro = Comando_Executar(lComando1, "SELECT DataEmissao, NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao > ? AND DataEmissao < ? AND Status <> ? AND (Tipo = ? OR Tipo = ?)", dtDataEmissao, lNumIntDoc, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao - PERIODO_EMISSAO, objNFiscal.dtDataEmissao + PERIODO_EMISSAO, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 42418
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 42419
    
    If lErro = AD_SQL_SUCESSO Then 'Existe
        
        objNFiscal.lNumIntDoc = lNumIntDoc
        
        'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
        lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
        If lErro <> SUCESSO And lErro <> 207565 And lErro <> 207567 And lErro <> 207624 And lErro <> 207626 Then gError 207588
        
        'precisa excluir a nota e inclui-la com o mesmo numero
        gError 207585
        
    End If
    
    'Verifica se a numeração não foi inutilizada
    lErro = CF("NFeInutFaixa_Valida2", objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    NFiscal_Testa_Existencia = SUCESSO

    Exit Function
    
Erro_NFiscal_Testa_Existencia:

    NFiscal_Testa_Existencia = gErr
    
    Select Case gErr
    
        Case 42415, 42416, 42418, 42419
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTA_FISCAL", gErr, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)
        
        Case 42417 'Tratar a alteracao da nota (exclusao seguida de inclusao)
        
        Case 42420, 61398, 207587, 207588
        
        Case 89802
        'vai só incluir a nota
        
        Case 207583, 207585
        'vai excluir a nota e inclui-la com o mesmo numero
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150133)
            
    End Select
    
    Exit Function

End Function

'mario
Function NFiscal_TabelaPreco_Lock(ByVal lComando As Long, ByVal objNFiscal As ClassNFiscal) As Long
'executa o lock da tabela de preços

Dim lErro As Long

On Error GoTo Erro_NFiscal_TabelaPreco_Lock

    'Se a Tabela de Preço estiver preenchida
    If objNFiscal.iTabelaPreco > 0 Then

        'Lê a Tabela de Preço
        lErro = CF("TabelaDePreco_Lock", objNFiscal.iTabelaPreco)
        If lErro <> SUCESSO And lErro <> 43128 Then Error 43129

        'Não encontrou a Tabela de Preço --> erro
        If lErro <> SUCESSO Then Error 43130

    End If

    NFiscal_TabelaPreco_Lock = SUCESSO
    
    Exit Function
    
Erro_NFiscal_TabelaPreco_Lock:

    NFiscal_TabelaPreco_Lock = Err

    Select Case Err
    
        Case 43129
    
        Case 43130
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TABELAPRECO_INEXISTENTE", Err, objNFiscal.iTabelaPreco)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150134)
            
    End Select
    
    Exit Function

End Function

Function BloqueioCredito_Aprovado_Testa(ByVal objPedidoVenda As ClassPedidoDeVenda, iCreditoAprovado As Integer) As Long
'Verifica se tem bloqueio de crédito liberado

Dim lErro As Long
Dim lComando As Long
Dim iTipoDeBloqueio As Integer

On Error GoTo Erro_BloqueioCredito_Aprovado_Testa

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44380

    'Busca Bloqueios de Crédito liberado
    lErro = Comando_ExecutarPos(lComando, "SELECT TipoDeBloqueio FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? AND TipoDeBloqueio = ? AND DataLib <> ?", 0, iTipoDeBloqueio, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, BLOQUEIO_CREDITO, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then Error 44381

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44382

    iCreditoAprovado = 0

    'se o bloqueio de credito estiver aprovado ==> retona a flag indicativa
    If lErro = AD_SQL_SUCESSO Then iCreditoAprovado = BLOQUEIO_CREDITO_LIBERADO

    'Fecha os comandos
    Call Comando_Fechar(lComando)

    BloqueioCredito_Aprovado_Testa = SUCESSO

    Exit Function

Erro_BloqueioCredito_Aprovado_Testa:

    BloqueioCredito_Aprovado_Testa = Err

    Select Case Err

        Case 44380
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44381, 44382
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV", Err, objPedidoVenda.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150135)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscal_Testa_Credito(ByVal objNFiscal As ClassNFiscal) As Long
' verifica se o cliente tem crédito. Se não tiver pede autorização. Se possui o credito, retorna SUCESSO.

Dim lComando As Long
Dim lErro As Long
Dim tCliente As typeCliente
Dim objAutorizacaoCredito As New ClassAutorizacaoCredito
Dim objClienteEstatistica As New ClassFilialClienteEst
Dim bNFPedido As Boolean
Dim iCreditoAprovado As Integer, iAtrasoAprovado As Integer
Dim objPedidoVenda As New ClassPedidoDeVenda, iTestar As Integer
Dim colParcRec As New Collection, bEstouroLimiteCredito As Boolean, bEstouroLimiteAtraso As Boolean
Dim objCliente As New ClassCliente 'Inserido por Wagner

On Error GoTo Erro_NFiscal_Testa_Credito

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 44454
    
    iTestar = 1
    lErro = CF("TipoNFiscal_Testar_Credito", objNFiscal.iTipoNFiscal, iTestar)
    If lErro <> SUCESSO Then gError 25738
    
    If iTestar <> 0 Then
    
        'Inserido por Wagner
        '##################
        objCliente.lCodigo = objNFiscal.lCliente
        'le os dados do cliente
        lErro = CF("Cliente_Le", objCliente)
        If lErro <> SUCESSO And lErro <> 12293 Then gError 129143
        
        If objCliente.iAtivo <> CLIENTE_ATIVO Then gError 129144
        '##################
        
        'Verifica se NFiscal é oriunda de Pedido
        If objNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Or objNFiscal.iTipoNFiscal = DOCINFO_NFISVPV Or objNFiscal.lNumPedidoVenda <> 0 Then
            bNFPedido = True
        Else
            bNFPedido = False
        End If
        
        'Se for testa se Pedido tem crédito aprovado
        If bNFPedido Then
        
            objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
            objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
    
            'verifica se o pedido tem credito aprovado
            lErro = CF("BloqueiosPV_Credito_Aprovado_Testa", objPedidoVenda, iCreditoAprovado)
            If lErro <> SUCESSO Then gError 25738
            
            'verifica se o pedido tem atraso aprovado
            lErro = CF("BloqueiosPV_Aprovado_Testa", objPedidoVenda, iAtrasoAprovado, BLOQUEIO_DIAS_ATRASO)
            If lErro <> SUCESSO Then gError 25738
    
        End If
        
        'se NF não for oriunda de PV ou se crédito não está liberado
        If (Not bNFPedido) Or iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Or iAtrasoAprovado <> BLOQUEIOPV_LIBERADO Then
        
            bEstouroLimiteCredito = False
            bEstouroLimiteAtraso = False
        
            'tulio140103
            'se for pra verificar o limite de credito
            If gobjCRFAT.iCreditoVerificaLimite = VERIFICAR_LIMITE_CREDITO Then
        
                If iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Then
            
                    'Lê os saldos e o limite de credito do Cliente
                    lErro = Comando_Executar(lComando, "SELECT LimiteCredito FROM Clientes WHERE Codigo = ?", tCliente.dLimiteCredito, objNFiscal.lCliente)
                    If lErro <> AD_SQL_SUCESSO Then gError 44455
            
                    lErro = Comando_BuscarPrimeiro(lComando)
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 44456
                
                    If lErro = AD_SQL_SEM_DADOS Then gError 44457 'Não encontrou
            
                    objClienteEstatistica.lCodCliente = objNFiscal.lCliente
                    objClienteEstatistica.iFilialEmpresa = objNFiscal.iFilialEmpresa
                
                    'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
                    lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
                    If lErro <> SUCESSO Then gError 52954
                
                    If tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + IIf(bNFPedido, 0, objNFiscal.dValorTotal)) Then bEstouroLimiteCredito = True
                
                End If
    
            End If
    
            If iAtrasoAprovado <> BLOQUEIOPV_LIBERADO Then
            
                'Lê as parcelas em aberto
                lErro = CF("ParcelasRec_Atraso_Le", colParcRec, objNFiscal.lCliente) 'por Leo em 01/03/02
                If lErro <> SUCESSO And lErro <> 94405 Then gError 94400
                
                If colParcRec.Count <> 0 Then bEstouroLimiteAtraso = True
                
            End If
            
            'Verifica se a soma dos creditos em Pedidos, Titulos e NFs ultrapassa o limite de Credito do Cliente ou existem parcelas em atraso.
            If bEstouroLimiteCredito Or bEstouroLimiteAtraso Then  'Alterado por Leo em 01/03/02
        
                objAutorizacaoCredito.dValor = objNFiscal.dValorTotal
                objAutorizacaoCredito.lCliente = objNFiscal.lCliente
                
                'Limite de crédito foi ultrapassado ==> pede autorização de credito ao usuário
                Call Chama_Tela_Modal("AutorizacaoAtraso", objAutorizacaoCredito)
                
                'se o crédito não foi aprovado ==> erro
                If objAutorizacaoCredito.iCreditoAutorizado = CREDITO_RECUSADO Then gError 44453
                
                'armazena junto à Nota Fiscal o Codigo do Usuario que está autorizando o crédito
                objNFiscal.sCodUsuario = objAutorizacaoCredito.sCodUsuario
        
            End If
            
        End If
        
    End If
    
    Call Comando_Fechar(lComando)
        
    NFiscal_Testa_Credito = SUCESSO

    Exit Function

Erro_NFiscal_Testa_Credito:

    NFiscal_Testa_Credito = gErr

    Select Case gErr
        
        Case 94400
        
        Case 44453
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_CREDITO_OU_PARCELAS_ATRASO", gErr, objNFiscal.lCliente)

        Case 44454
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 44455, 44456
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", gErr, objNFiscal.lCliente)

        Case 44457
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", gErr, objNFiscal.lCliente)
        
        Case 25738, 52954, 129143 'tratado na rotina chamada
        
        Case 129144
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_INATIVO", gErr, objNFiscal.lCliente)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150136)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ValorLiberadoCredito_Lock(ByVal objValorLiberadoCredito As ClassValorLiberadoCredito) As Long
'Lê e loca a estatistica de liberação de credito de um usuario em um determinado ano
'Devolve os dados em objValorLiberadoCredito.

Dim lComando As Long
Dim lErro As Long
Dim tValorLiberadoCredito As typeValorLiberadoCredito
Dim iIndice As Integer

On Error GoTo Erro_ValorLiberadoCredito_Lock

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44467

    'Verifica se a os dados estatisticos de liberacao de credito existe, e se existir carrega seus dados em objValorLiberadoCredito
    lErro = Comando_ExecutarLockado(lComando, "SELECT Liberado1, Liberado2, Liberado3, Liberado4, Liberado5, Liberado6, Liberado7, Liberado8, Liberado9, Liberado10, Liberado11, Liberado12 FROM ValorLiberadoCredito WHERE CodUsuario = ? AND Ano = ? ", tValorLiberadoCredito.adValorLiberado(1), tValorLiberadoCredito.adValorLiberado(2), tValorLiberadoCredito.adValorLiberado(3), tValorLiberadoCredito.adValorLiberado(4), tValorLiberadoCredito.adValorLiberado(5), tValorLiberadoCredito.adValorLiberado(6), tValorLiberadoCredito.adValorLiberado(7), tValorLiberadoCredito.adValorLiberado(8), tValorLiberadoCredito.adValorLiberado(9), tValorLiberadoCredito.adValorLiberado(10), tValorLiberadoCredito.adValorLiberado(11), tValorLiberadoCredito.adValorLiberado(12), objValorLiberadoCredito.sCodUsuario, objValorLiberadoCredito.iAno)
    If lErro <> AD_SQL_SUCESSO Then Error 44468

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44469

    'Liberacao não cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 44470

    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 44471

    'Carrega os dados lidos no tValorLberadoCredito
    For iIndice = 1 To 12
        objValorLiberadoCredito.adValorLiberado(iIndice) = tValorLiberadoCredito.adValorLiberado(iIndice)
    Next
    
    Call Comando_Fechar(lComando)

    ValorLiberadoCredito_Lock = SUCESSO

Exit Function

Erro_ValorLiberadoCredito_Lock:

    ValorLiberadoCredito_Lock = Err

    Select Case Err

        Case 44467
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44468, 44469
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALORLIBERADOCREDITO", Err, objValorLiberadoCredito.sCodUsuario, objValorLiberadoCredito.iAno)

        Case 44470 'liberacao credito não cadastrada

        Case 44471
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_VALORLIBERADOCREDITO", Err, objValorLiberadoCredito.sCodUsuario, objValorLiberadoCredito.iAno)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150137)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LiberacaoCredito_Le_Todas(ByVal colLiberacaoCredito As Collection) As Long
'Guarda em colLiberacaoCredito todas as alçadas cadastradas

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String
Dim objLiberacaoCredito As ClassLiberacaoCredito
Dim dLimiteOperacao As Double
Dim dLimiteMensal As Double

On Error GoTo Erro_LiberacaoCredito_Le_Todas

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 48090

    sCodigo = String(STRING_CODUSUARIO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT CodUsuario, LimiteMensal, LimiteOperacao FROM LiberacaoCredito", sCodigo, dLimiteMensal, dLimiteOperacao)
    If lErro <> AD_SQL_SUCESSO Then Error 48091

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48092

    If lErro = AD_SQL_SEM_DADOS Then Error 48093

    Do While lErro = AD_SQL_SUCESSO

        'Guarda na coleção os nomes dos usuarios que têm alçadas
        Set objLiberacaoCredito = New ClassLiberacaoCredito

        objLiberacaoCredito.sCodUsuario = sCodigo
        objLiberacaoCredito.dLimiteMensal = dLimiteMensal
        objLiberacaoCredito.dLimiteOperacao = dLimiteOperacao
        
        colLiberacaoCredito.Add objLiberacaoCredito

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48094

    Loop

    Call Comando_Fechar(lComando)
    
    LiberacaoCredito_Le_Todas = SUCESSO

    Exit Function

Erro_LiberacaoCredito_Le_Todas:

    LiberacaoCredito_Le_Todas = Err

    Select Case Err

        Case 48090
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 48091, 48092, 48094
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err)

        Case 48093 'A tabela está vazia

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150138)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Function Almoxarifados_Le_Quantidade(lAlmoxarifados As Long) As Long
'Lê o número de Almoxarifados existentes no Sistema

Dim lErro As Long
Dim lComando As Long
Dim lTotalAlmoxarifados As Long

On Error GoTo Erro_Almoxarifados_Le_Quantidade

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23766

    lErro = Comando_Executar(lComando, "SELECT COUNT(*) FROM Almoxarifado", lTotalAlmoxarifados)
    If lErro <> AD_SQL_SUCESSO Then Error 23767

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23797

    If lErro = AD_SQL_SEM_DADOS Then Error 23798

    lAlmoxarifados = lTotalAlmoxarifados

    Call Comando_Fechar(lComando)

    Almoxarifados_Le_Quantidade = SUCESSO

    Exit Function

Erro_Almoxarifados_Le_Quantidade:

    Almoxarifados_Le_Quantidade = Err

    Select Case Err

        Case 23766
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23767, 23797
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_ALMOXARIFADOS", Err)

        Case 23798
                'Tratado na Rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 150139)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function AlmoxarifadosFilial_Le_Quantidade(ByVal iFilialEmpresa As Integer, lNumAlmoxarifados As Long) As Long
'Retorna o número de Almoxarifados da FilialEmpresa

Dim lErro As Long
Dim lComando As Long
Dim iFilialEmpresa1 As Integer

On Error GoTo Erro_AlmoxarifadosFilial_Le_Quantidade

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 39366
    
    If iFilialEmpresa = 0 Then iFilialEmpresa = giFilialEmpresa
    iFilialEmpresa1 = iFilialEmpresa
    lErro = CF("FilialEmpresaAlmox_Customiza", iFilialEmpresa1)
    If lErro <> SUCESSO Then Error 35990
            
    'Busca o número de almoxarifados em Almoxarifado
    lErro = Comando_Executar(lComando, "SELECT COUNT(*) FROM Almoxarifado WHERE FilialEmpresa = ? ", lNumAlmoxarifados, iFilialEmpresa1)
    If lErro <> AD_SQL_SUCESSO Then Error 39367
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 39368
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    AlmoxarifadosFilial_Le_Quantidade = SUCESSO
    
    Exit Function
    
Erro_AlmoxarifadosFilial_Le_Quantidade:
    
    AlmoxarifadosFilial_Le_Quantidade = Err
    
    Select Case Err
        
        Case 35990
        
        Case 39366
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err, Error$)
    
        Case 39367, 39368
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADOS", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150140)
            
    End Select
    
    Call Comando_Fechar(lComando)
        
    Exit Function
        
End Function


Function NFiscalInternaEntNaoDev_Le_Numero(ByVal objNFiscalOriginal As ClassNFiscal) As Long
'Busca Nota Fiscal, em [NFiscal e TiposDocInfo] UNION [NotaFiscalBaixadas e TiposDocInfo], com a Série e o Número Passados
'Nota Interna de Entrada e Com o Tipo com o Complementar NOrmal com o NOme da Tela NFiscal <> "NFiscalDev"

Dim lErro As Long
Dim lComando As Long
Dim sComandoSQL As String
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NFiscalInternaEntNaoDev_Le_Numero

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 39098

    With tNFiscal

        .sMensagemNota = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sMensagemCorpoNota = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sNaturezaOp = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sPlaca = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sPlacaUF = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sSerie = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sNumPedidoTerc = String(STRING_BUFFER_MAX_TEXTO, 0)

        sComandoSQL = "SELECT NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NFiscal.NumNotaFiscal = ? AND NFiscal.Serie = ? AND TiposDocInfo.Tipo = ? AND NFiscal.Status <> ? AND TiposDocInfo.NomeTelaNFiscal <> ? AND NFiscal.FilialEmpresa = ? AND TiposDocInfo.Complementar =?  ORDER BY DataEmissao DESC "
'mario 2/7/99 Remover NFiscalBaixada
'        sComandoSQL = sComandoSQL & "UNION "
'        sComandoSQL = sComandoSQL & "SELECT NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal FROM NFiscalBaixadas, TiposDocInfo WHERE NFiscalBaixadas.TipoNFiscal = TiposDocInfo.Codigo AND NFiscalBaixadas.NumNotaFiscal = ? AND NFiscalBaixadas.Serie = ? AND TiposDocInfo.Tipo = ? AND NFiscalBaixadas.Status <> ? AND TiposDocInfo.NomeTelaNFiscal <> ? AND NFiscalBaixadas.FilialEmpresa =? AND TiposDocInfo.Complementar = ? ORDER BY DataEmissao DESC "
        'Busca a Nota Fiscal
        lErro = Comando_Executar(lComando, sComandoSQL, .lNumIntDoc, .iStatus, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, objNFiscalOriginal.lNumNotaFiscal, objNFiscalOriginal.sSerie, DOCINFO_NF_INT_ENTRADA, STATUS_EXCLUIDO, "NFiscalEntDev", giFilialEmpresa, DOCINFO_NORMAL)
        If lErro <> AD_SQL_SUCESSO Then Error 39099

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39100
        'Não encontrou
        If lErro = AD_SQL_SEM_DADOS Then Error 39101

        objNFiscalOriginal.dPesoBruto = .dPesoBruto
        objNFiscalOriginal.dPesoLiq = .dPesoLiq
        objNFiscalOriginal.dtDataEmissao = .dtDataEmissao
        objNFiscalOriginal.dtDataEntrada = .dtDataEntrada
        objNFiscalOriginal.dtDataSaida = .dtDataSaida
        objNFiscalOriginal.dtDataVencimento = .dtDataVencimento
        objNFiscalOriginal.dValorDesconto = .dValorDesconto
        objNFiscalOriginal.dValorFrete = .dValorFrete
        objNFiscalOriginal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscalOriginal.dValorProdutos = .dValorProdutos
        objNFiscalOriginal.dValorSeguro = .dValorSeguro
        objNFiscalOriginal.dValorTotal = .dValorTotal
        objNFiscalOriginal.iCanal = .iCanal
        objNFiscalOriginal.iClasseDocCPR = .iClasseDocCPR
        objNFiscalOriginal.iCodTransportadora = .iCodTransportadora
        objNFiscalOriginal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscalOriginal.iDetPagFrete = .iDetPagFrete
        objNFiscalOriginal.iSemDataSaida = .iSemDataSaida
        objNFiscalOriginal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscalOriginal.iFilialCli = .iFilialCli
        objNFiscalOriginal.iFilialEntrega = .iFilialEntrega
        objNFiscalOriginal.iFilialForn = .iFilialForn
        objNFiscalOriginal.iStatus = .iStatus
        objNFiscalOriginal.iTabelaPreco = .iTabelaPreco
        objNFiscalOriginal.iTipoNFiscal = .iTipoNFiscal
        objNFiscalOriginal.lVolumeQuant = .lVolumeQuant
        objNFiscalOriginal.lCliente = .lCliente
        objNFiscalOriginal.lFornecedor = .lFornecedor
        objNFiscalOriginal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscalOriginal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscalOriginal.lNumIntTrib = .lNumIntTrib
        objNFiscalOriginal.lNumNotaFiscal = .lNumNotaFiscal
        objNFiscalOriginal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscalOriginal.lNumPedidoVenda = .lNumPedidoVenda
        objNFiscalOriginal.sMensagemNota = .sMensagemNota
        objNFiscalOriginal.sNaturezaOp = .sNaturezaOp
        objNFiscalOriginal.sPlaca = .sPlaca
        objNFiscalOriginal.sPlacaUF = .sPlacaUF
        objNFiscalOriginal.sSerie = .sSerie
        objNFiscalOriginal.lVolumeEspecie = .lVolumeEspecie
        objNFiscalOriginal.lVolumeMarca = .lVolumeMarca
        objNFiscalOriginal.lNumIntDoc = .lNumIntDoc
        objNFiscalOriginal.iFilialEmpresa = .iFilialEmpresa
        objNFiscalOriginal.sMensagemCorpoNota = .sMensagemCorpoNota

    End With
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    NFiscalInternaEntNaoDev_Le_Numero = SUCESSO

    Exit Function

Erro_NFiscalInternaEntNaoDev_Le_Numero:

    NFiscalInternaEntNaoDev_Le_Numero = Err

    Select Case Err

        Case 39098
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 39099, 39100
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)

        Case 39101 'Tratado pela rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150141)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscalExternaNaoDev_Le_Numero(ByVal objNFiscalOriginal As ClassNFiscal) As Long
'Pesquisa Nota Fiscal, nas Tabelas [NFiscal e TiposDocInfo] UNION [NotaFiscalBaixadas e TiposDocInfo],
'pela Serie, Número, Fornecedor, FilialForn, Cliente, FilialCli passados
'Procuta por Notas co o Tipo sendo NOta Fiscal Externa, com NOme da telas Fiscal <> "NFiscalDev" e complementar Normal.
'Lê todos os Dados da Tabela NFiscal

Dim lErro As Long
Dim lComando As Long, lComando2 As Long
Dim sComandoSQL As String
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NFiscalExternaNaoDev_Le_Numero

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 39113

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 39113

    With tNFiscal

        .sMensagemNota = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sMensagemCorpoNota = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sNaturezaOp = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sPlaca = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sPlacaUF = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sSerie = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sNumPedidoTerc = String(STRING_BUFFER_MAX_TEXTO, 0)

        sComandoSQL = "SELECT NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NFiscal.NumNotaFiscal = ? AND NFiscal.Serie = ? AND TiposDocInfo.Tipo = ? AND NFiscal.Status <> ? AND TiposDocInfo.NomeTelaNFiscal <> ? AND NFiscal.FilialEmpresa = ? AND TiposDocInfo.Complementar =? AND NFiscal.Cliente = ? AND NFiscal.FilialCli = ? AND NFiscal.Fornecedor = ? AND NFiscal.FilialForn = ? ORDER BY DataEmissao DESC "
'mario 2/7/99 Remover NFiscalBaixada
'        sComandoSQL = sComandoSQL & "UNION "
'        sComandoSQL = sComandoSQL & "SELECT NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal FROM NFiscalBaixadas, TiposDocInfo WHERE NFiscalBaixadas.TipoNFiscal = TiposDocInfo.Codigo AND NFiscalBaixadas.NumNotaFiscal = ? AND NFiscalBaixadas.Serie = ? AND TiposDocInfo.Tipo = ? AND NFiscalBaixadas.Status <> ? AND TiposDocInfo.NomeTelaNFiscal <> ? AND NFiscalBaixadas.FilialEmpresa =? AND TiposDocInfo.Complementar = ? ORDER BY DataEmissao DESC "
'
'        'Busca a Nota Fiscal
'        lErro = Comando_Executar(lComando, sComandoSQL, .lNumIntDoc, .iStatus, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, objNFiscalOriginal.lNumNotaFiscal, objNFiscalOriginal.sSerie, DOCINFO_NF_EXTERNA, STATUS_EXCLUIDO, "NFiscalEntDev", giFilialEmpresa, DOCINFO_NORMAL, objNFiscalOriginal.lNumNotaFiscal, objNFiscalOriginal.sSerie, DOCINFO_NF_EXTERNA, STATUS_EXCLUIDO, "NFiscalEntDev", giFilialEmpresa, DOCINFO_NORMAL)
'        If lErro <> AD_SQL_SUCESSO Then Error 39114

        'Busca a Nota Fiscal
        lErro = Comando_Executar(lComando, sComandoSQL, .lNumIntDoc, .iStatus, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, objNFiscalOriginal.lNumNotaFiscal, objNFiscalOriginal.sSerie, DOCINFO_NF_EXTERNA, STATUS_EXCLUIDO, "NFiscalEntDev", giFilialEmpresa, DOCINFO_NORMAL, objNFiscalOriginal.lCliente, objNFiscalOriginal.iFilialCli, objNFiscalOriginal.lFornecedor, objNFiscalOriginal.iFilialForn)
        If lErro <> AD_SQL_SUCESSO Then Error 39114

        'Tente ler
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39115
        
        If lErro = AD_SQL_SEM_DADOS Then
        
            'Busca a Nota Fiscal
            sComandoSQL = "SELECT NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, ClienteBenef, FilialCliBenef, FilialEntrega, FornecedorBenef, FilialFornBenef, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota " & _
                        "FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NFiscal.NumNotaFiscal = ? AND NFiscal.Serie = ? AND TiposDocInfo.Tipo = ? AND NFiscal.Status <> ? AND TiposDocInfo.NomeTelaNFiscal <> ? AND NFiscal.FilialEmpresa = ? AND TiposDocInfo.Complementar =? AND NFiscal.ClienteBenef = ? AND NFiscal.FilialCliBenef = ? AND NFiscal.FornecedorBenef = ? AND NFiscal.FilialFornBenef = ? ORDER BY DataEmissao DESC "
            lErro = Comando_Executar(lComando2, sComandoSQL, .lNumIntDoc, .iStatus, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, objNFiscalOriginal.lNumNotaFiscal, objNFiscalOriginal.sSerie, DOCINFO_NF_EXTERNA, STATUS_EXCLUIDO, "NFiscalEntDev", giFilialEmpresa, DOCINFO_NORMAL, objNFiscalOriginal.lCliente, objNFiscalOriginal.iFilialCli, objNFiscalOriginal.lFornecedor, objNFiscalOriginal.iFilialForn)
            If lErro <> AD_SQL_SUCESSO Then Error 39114
    
            'Tente ler
            lErro = Comando_BuscarPrimeiro(lComando2)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39115
            
        End If
        
        'Não encontrou
        If lErro = AD_SQL_SEM_DADOS Then Error 39116

        objNFiscalOriginal.dPesoBruto = .dPesoBruto
        objNFiscalOriginal.dPesoLiq = .dPesoLiq
        objNFiscalOriginal.dtDataEmissao = .dtDataEmissao
        objNFiscalOriginal.dtDataEntrada = .dtDataEntrada
        objNFiscalOriginal.dtDataSaida = .dtDataSaida
        objNFiscalOriginal.dtDataVencimento = .dtDataVencimento
        objNFiscalOriginal.dValorDesconto = .dValorDesconto
        objNFiscalOriginal.dValorFrete = .dValorFrete
        objNFiscalOriginal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscalOriginal.dValorProdutos = .dValorProdutos
        objNFiscalOriginal.dValorSeguro = .dValorSeguro
        objNFiscalOriginal.dValorTotal = .dValorTotal
        objNFiscalOriginal.iCanal = .iCanal
        objNFiscalOriginal.iClasseDocCPR = .iClasseDocCPR
        objNFiscalOriginal.iCodTransportadora = .iCodTransportadora
        objNFiscalOriginal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscalOriginal.iDetPagFrete = .iDetPagFrete
        objNFiscalOriginal.iSemDataSaida = .iSemDataSaida
        objNFiscalOriginal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscalOriginal.iFilialCli = .iFilialCli
        objNFiscalOriginal.iFilialEntrega = .iFilialEntrega
        objNFiscalOriginal.iFilialForn = .iFilialForn
        objNFiscalOriginal.iStatus = .iStatus
        objNFiscalOriginal.iTabelaPreco = .iTabelaPreco
        objNFiscalOriginal.iTipoNFiscal = .iTipoNFiscal
        objNFiscalOriginal.lVolumeQuant = .lVolumeQuant
        objNFiscalOriginal.lCliente = .lCliente
        objNFiscalOriginal.lFornecedor = .lFornecedor
        objNFiscalOriginal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscalOriginal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscalOriginal.lNumIntTrib = .lNumIntTrib
        objNFiscalOriginal.lNumNotaFiscal = .lNumNotaFiscal
        objNFiscalOriginal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscalOriginal.lNumPedidoVenda = .lNumPedidoVenda
        objNFiscalOriginal.sMensagemNota = .sMensagemNota
        objNFiscalOriginal.sNaturezaOp = .sNaturezaOp
        objNFiscalOriginal.sPlaca = .sPlaca
        objNFiscalOriginal.sPlacaUF = .sPlacaUF
        objNFiscalOriginal.sSerie = .sSerie
        objNFiscalOriginal.lVolumeEspecie = .lVolumeEspecie
        objNFiscalOriginal.lVolumeMarca = .lVolumeMarca
        objNFiscalOriginal.lNumIntDoc = .lNumIntDoc
        objNFiscalOriginal.iFilialEmpresa = .iFilialEmpresa
        objNFiscalOriginal.sMensagemCorpoNota = .sMensagemCorpoNota

    End With
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    NFiscalExternaNaoDev_Le_Numero = SUCESSO

    Exit Function

Erro_NFiscalExternaNaoDev_Le_Numero:

    NFiscalExternaNaoDev_Le_Numero = Err

    Select Case Err

        Case 39113
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 39114, 39115
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)

        Case 39116 'Tratado pela rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150142)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function


Function ItemNFEntradaNaoDev_Le_NumNFItem(ByVal objNFiscal As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
'Lê o Ítem de Uma Nota Fiscal de Entrada através do Número da Nota Fiscal, Série e Numero do Ítem passados

Dim lErro As Long
Dim lComando As Long, lComando2 As Long
Dim tItemNF As typeItemNF

On Error GoTo Erro_ItemNFEntradaNaoDev_Le_NumNFItem

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 39320

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 39320

    With tItemNF
        .sDescricaoItem = String(STRING_ITEMNF_DESCRICAO, 0)
        .sProduto = String(STRING_PRODUTO, 0)
        .sUnidadeMed = String(STRING_UM_SIGLA, 0)

        'Busca o Ítem
        lErro = Comando_Executar(lComando, "SELECT ItensNFiscal.NumIntNF, ItensNFiscal.Status, ItensNFiscal.Produto, ItensNFiscal.UnidadeMed, ItensNFiscal.Quantidade, ItensNFiscal.Almoxarifado, ItensNFiscal.PrecoUnitario, ItensNFiscal.PercDesc, ItensNFiscal.ValorDesconto, ItensNFiscal.DataEntrega, ItensNFiscal.DescricaoItem, ItensNFiscal.ValorAbatComissao, ItensNFiscal.NumIntPedVenda, ItensNFiscal.NumIntItemPedVenda, ItensNFiscal.NumIntDoc, ItensNFiscal.NumIntTrib, ItensNFiscal.NumIntDocOrig FROM NFiscal, ItensNFiscal, TiposDocInfo WHERE NFiscal.Fornecedor = ? AND NFiscal.FilialForn=? AND Cliente =? AND FilialCli =? AND NFiscal.Serie = ? AND NFiscal.NumNotaFiscal = ? AND ItensNFiscal.Item = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NFiscal.FilialEmpresa = ? AND NFiscal.Status <> ? AND ItensNFiscal.Status <> ? AND (TiposDocInfo.Tipo = ? OR TiposDocInfo.Tipo =?)  AND TiposDocInfo.NomeTelaNFiscal <> ? ORDER BY DataEmissao DESC", _
        .lNumIntNF, .iStatus, .sProduto, .sUnidadeMed, .dQuantidade, .iAlmoxarifado, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, .lNumIntDoc, .lNumIntTrib, .lNumIntDocOrig, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.lCliente, objNFiscal.iFilialCli, objItemNF.sSerieNFOrig, objItemNF.lNumNFOrig, objItemNF.iItem, giFilialEmpresa, STATUS_EXCLUIDO, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_EXTERNA, "NFiscalEntDev")
        If lErro <> AD_SQL_SUCESSO Then Error 39321

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39322
                    
        If lErro = AD_SQL_SEM_DADOS Then
             'Busca o Ítem
            lErro = Comando_Executar(lComando2, "SELECT ItensNFiscal.NumIntNF, ItensNFiscal.Status, ItensNFiscal.Produto, ItensNFiscal.UnidadeMed, ItensNFiscal.Quantidade, ItensNFiscal.Almoxarifado, ItensNFiscal.PrecoUnitario, ItensNFiscal.PercDesc, ItensNFiscal.ValorDesconto, ItensNFiscal.DataEntrega, ItensNFiscal.DescricaoItem, ItensNFiscal.ValorAbatComissao, ItensNFiscal.NumIntPedVenda, ItensNFiscal.NumIntItemPedVenda, ItensNFiscal.NumIntDoc, ItensNFiscal.NumIntTrib, ItensNFiscal.NumIntDocOrig FROM NFiscal, ItensNFiscal, TiposDocInfo WHERE NFiscal.FornecedorBenef = ? AND NFiscal.FilialFornBenef=? AND ClienteBenef =? AND FilialCliBenef =? AND NFiscal.Serie = ? AND NFiscal.NumNotaFiscal = ? AND ItensNFiscal.Item = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NFiscal.FilialEmpresa = ? AND NFiscal.Status <> ? AND ItensNFiscal.Status <> ? AND (TiposDocInfo.Tipo = ? OR TiposDocInfo.Tipo =?)  AND TiposDocInfo.NomeTelaNFiscal <> ? ORDER BY DataEmissao DESC", _
            .lNumIntNF, .iStatus, .sProduto, .sUnidadeMed, .dQuantidade, .iAlmoxarifado, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, .lNumIntDoc, .lNumIntTrib, .lNumIntDocOrig, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.lCliente, objNFiscal.iFilialCli, objItemNF.sSerieNFOrig, objItemNF.lNumNFOrig, objItemNF.iItem, giFilialEmpresa, STATUS_EXCLUIDO, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_EXTERNA, "NFiscalEntDev")
            If lErro <> AD_SQL_SUCESSO Then Error 39321
    
            lErro = Comando_BuscarPrimeiro(lComando2)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39322
        End If
        
        If lErro = AD_SQL_SEM_DADOS Then Error 39323 'Não encontrou

        'Preenche o objItemNF com os dados lidos
        objItemNF.dPercDesc = .dPercDesc
        objItemNF.dPrecoUnitario = .dPrecoUnitario
        objItemNF.dQuantidade = .dQuantidade
        objItemNF.dtDataEntrega = .dtDataEntrega
        objItemNF.dValorAbatComissao = .dValorAbatComissao
        objItemNF.dValorDesconto = .dValorDesconto
        objItemNF.iAlmoxarifado = .iAlmoxarifado
        objItemNF.iStatus = .iStatus
        objItemNF.lNumIntDoc = .lNumIntDoc
        objItemNF.lNumIntDocOrig = .lNumIntDocOrig
        objItemNF.lNumIntItemPedVenda = .lNumIntPedVenda
        objItemNF.lNumIntTrib = .lNumIntTrib
        objItemNF.sDescricaoItem = .sDescricaoItem
        objItemNF.sProduto = .sProduto
        objItemNF.sUnidadeMed = .sUnidadeMed
        objItemNF.lNumIntNF = .lNumIntNF

    End With

    'Fecha o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    ItemNFEntradaNaoDev_Le_NumNFItem = SUCESSO

    Exit Function

Erro_ItemNFEntradaNaoDev_Le_NumNFItem:

    ItemNFEntradaNaoDev_Le_NumNFItem = Err

    Select Case Err

        Case 39320
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 39321, 39322
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL2", Err)

        Case 39323

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150143)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

'mario 2/7/99 Remover NFiscalBaixada
'Function ItemNFBaixadaEntradaNaoDev_Le_NumNFItem(objNFiscal As ClassNFiscal, objItemNF As ClassItemNF) As Long
''Lê o Ítem de Uma Nota Fiscal de Entrada através do Número da Nota Fiscal, Série e Numero do Ítem passados
'
'Dim lErro As Long
'Dim lComando As Long
'Dim tItemNF As typeItemNF
'
'On Error GoTo Erro_ItemNFBaixadaEntradaNaoDev_Le_NumNFItem
'
'    'Abre o comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 39324
'
'    With tItemNF
'        .sDescricaoItem = String(STRING_ITEMNF_DESCRICAO, 0)
'        .sProduto = String(STRING_PRODUTO, 0)
'        .sUnidadeMed = String(STRING_UM_SIGLA, 0)
'
'        'Busca o Ítem
'        lErro = Comando_Executar(lComando, "SELECT ItensNFiscalBaixadas.NumIntNF, ItensNFiscalBaixadas.Status, ItensNFiscalBaixadas.Produto, ItensNFiscalBaixadas.UnidadeMed, ItensNFiscalBaixadas.Quantidade, ItensNFiscalBaixadas.Almoxarifado, ItensNFiscalBaixadas.PrecoUnitario, ItensNFiscalBaixadas.PercDesc, ItensNFiscalBaixadas.ValorDesconto, ItensNFiscalBaixadas.DataEntrega, ItensNFiscalBaixadas.DescricaoItem, ItensNFiscalBaixadas.ValorAbatComissao, ItensNFiscalBaixadas.NumIntPedVenda, ItensNFiscalBaixadas.NumIntItemPedVenda, ItensNFiscalBaixadas.NumIntDoc, ItensNFiscalBaixadas.NumIntTrib, ItensNFiscalBaixadas.NumIntDocOrig FROM NFiscalBaixadas, ItensNFiscalBaixadas, TiposDocInfo " & _
'        " WHERE NFiscalBaixadas.Fornecedor = ? AND NFiscalBaixadas.FilialForn=? AND NFiscalBaixadas.Cliente =? AND NFiscalBaixadas.FilialCli =? AND NFiscalBaixadas.Serie = ? AND NFiscalBaixadas.NumNotaFiscal = ? AND ItensNFiscalBaixadas.Item = ? AND NFiscalBaixadas.NumIntDoc = ItensNFiscalBaixadas.NumIntNF AND NFiscalBaixadas.TipoNFiscal = TiposDocInfo.Codigo AND NFiscalBaixadas.FilialEmpresa = ? AND NFiscalBaixadas.Status <> ? AND ItensNFiscalBaixadas.Status <> ? AND (TiposDocInfo.Tipo = ? OR TiposDocInfo.Tipo =?)  AND TiposDocInfo.NomeTelaNFiscal<> ? ORDER BY NFiscalBaixadas.DataEmissao DESC", _
'        .lNumIntNF, .iStatus, .sProduto, .sUnidadeMed, .dQuantidade, .iAlmoxarifado, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, .lNumIntDoc, .lNumIntTrib, .lNumIntDocOrig, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.lCliente, objNFiscal.iFilialCli, objItemNF.sSerieNFOrig, objItemNF.lNumNFOrig, objItemNF.iItem, giFilialEmpresa, STATUS_EXCLUIDO, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_EXTERNA, "NFiscalEntDev")
'        If lErro <> AD_SQL_SUCESSO Then Error 39325
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39326
'        If lErro = AD_SQL_SEM_DADOS Then Error 39327 'Não encontrou
'
'        'Preenche o objItemNF com os dados lidos
'        objItemNF.dPercDesc = .dPercDesc
'        objItemNF.dPrecoUnitario = .dPrecoUnitario
'        objItemNF.dQuantidade = .dQuantidade
'        objItemNF.dtDataEntrega = .dtDataEntrega
'        objItemNF.dValorAbatComissao = .dValorAbatComissao
'        objItemNF.dValorDesconto = .dValorDesconto
'        objItemNF.iAlmoxarifado = .iAlmoxarifado
'        objItemNF.iStatus = .iStatus
'        objItemNF.lNumIntDoc = .lNumIntDoc
'        objItemNF.lNumIntDocOrig = .lNumIntDocOrig
'        objItemNF.lNumIntItemPedVenda = .lNumIntPedVenda
'        objItemNF.lNumIntTrib = .lNumIntTrib
'        objItemNF.sDescricaoItem = .sDescricaoItem
'        objItemNF.sProduto = .sProduto
'        objItemNF.sUnidadeMed = .sUnidadeMed
'
'    End With
'
'    'Fecha o comando
'    Call Comando_Fechar(lComando)
'
'    ItemNFBaixadaEntradaNaoDev_Le_NumNFItem = SUCESSO
'
'    Exit Function
'
'Erro_ItemNFBaixadaEntradaNaoDev_Le_NumNFItem:
'
'    ItemNFBaixadaEntradaNaoDev_Le_NumNFItem = Err
'
'    Select Case Err
'
'        Case 39324
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 39325, 39326
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL2", Err)
'
'        Case 39327
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150144)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function

Function ItensNFiscalDev_Lock_Gravacao(ByVal objNFiscal As ClassNFiscal) As Long
'Faz a validação e os "lock's" dos dados ligados aos ítens da Nota Fiscal

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim objItemNF As ClassItemNF
Dim objItemNFOrig As New ClassItemNF
Dim lNumIntDoc As Long
Dim dQuantidade As Double
Dim sProduto As String
Dim sUnidadeMed As String
Dim dQuantDevolvida As Double
Dim dFator As Double
Dim objProduto As New ClassProduto
Dim iIndice As Integer
Dim iCodigo As Integer
Dim colCodigoNome As New AdmColCodigoNome
Dim iIndice1 As Integer
Dim iAlmoxarifadoLocado As Integer
Dim iAlmoxarifadoAtual As Integer
Dim sAlmoxarifadoAtual As String
Dim objItemAloc As ClassItemNFAlocacao
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objReservaItem As ClassReservaItem

On Error GoTo Erro_ItensNFiscalDev_Lock_Gravacao
    
    'Abre os Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 39278
    Next

    'Para cada Item existente na coleção de Ítens
    For Each objItemNF In objNFiscal.colItensNF
    
        objProduto.sCodigo = objItemNF.sProduto
    
        lErro = CF("Produto_Lock", objProduto)
        If lErro <> SUCESSO Then Error 39279
        
        objItemNF.iClasseUM = objProduto.iClasseUM
        objItemNF.iControleEstoque = objProduto.iControleEstoque
        objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
        
        For Each objItemAloc In objItemNF.colAlocacoes
                
            iAlmoxarifadoAtual = objItemAloc.iAlmoxarifado
            sAlmoxarifadoAtual = objItemAloc.sAlmoxarifado
            
            iAlmoxarifadoLocado = False
            
            If colCodigoNome.Count > 0 Then
                For iIndice1 = 1 To colCodigoNome.Count
                    If colCodigoNome(iIndice1).iCodigo = iAlmoxarifadoAtual Then
                        iAlmoxarifadoLocado = True
                        Exit For
                    End If
                Next
                
            End If
            
            If Not iAlmoxarifadoLocado Then
                
                colCodigoNome.Add iAlmoxarifadoAtual, sAlmoxarifadoAtual
                
                lErro = CF("Almoxarifado_Lock", iAlmoxarifadoAtual, alComando(2))
                If lErro <> SUCESSO Then Error 39280
                
            End If
        
        Next
        
        For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
            
            objProduto.sCodigo = objItemRomaneio.sProduto
            
            lErro = CF("Produto_Lock", objProduto)
            If lErro <> SUCESSO Then Error 39279
            
            For Each objReservaItem In objItemRomaneio.colLocalizacao
                
                iAlmoxarifadoAtual = objReservaItem.iAlmoxarifado
                sAlmoxarifadoAtual = objReservaItem.sAlmoxarifado
                
                iAlmoxarifadoLocado = False
                
                If colCodigoNome.Count > 0 Then
                    For iIndice1 = 1 To colCodigoNome.Count
                        If colCodigoNome(iIndice1).iCodigo = iAlmoxarifadoAtual Then
                            iAlmoxarifadoLocado = True
                            Exit For
                        End If
                    Next
                    
                End If
                
                If Not iAlmoxarifadoLocado Then
                    
                    colCodigoNome.Add iAlmoxarifadoAtual, sAlmoxarifadoAtual
                    
                    lErro = CF("Almoxarifado_Lock", iAlmoxarifadoAtual, alComando(2))
                    If lErro <> SUCESSO Then Error 39280
                    
                End If
            Next
        Next
                        
        'Se o Número Interno do Documento Original estiver preenchido
        If objItemNF.lNumIntDocOrig > 0 Then
        
            dQuantidade = 0
            dQuantDevolvida = 0
            
            sProduto = String(STRING_PRODUTO, 0)
            sUnidadeMed = String(STRING_UM_SIGLA, 0)
            
            'Lê em ItensNFiscal a quantidade, a Unidade de Medida e o Produto do Item com o Número Ínterno = NumIntDocOrig
            lErro = Comando_ExecutarPos(alComando(0), "SELECT Quantidade, UnidadeMed, Produto FROM ItensNFiscal WHERE NumIntDoc = ? ", 0, dQuantidade, sUnidadeMed, sProduto, objItemNF.lNumIntDocOrig)
            If lErro <> AD_SQL_SUCESSO Then Error 39284

            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39285
            
'mario 2/7/99 Remover NFiscalBaixada comando reposicionado devido a retirada do codigo abaixo
            If lErro = AD_SQL_SEM_DADOS Then Error 39288 'Não encontrou
            
'mario 2/7/99 Remover NFiscalBaixada
'            If lErro <> AD_SQL_SUCESSO Then 'Se não achou
'                'Lê em ItensNFiscalBaixadas a quantidade, a Unidade de Medida e o Produto do Item com o Número Ínterno = NumIntDocOrig
'                lErro = Comando_Executar(alComando(0), "SELECT Produto, Quantidade, UnidadeMed FROM ItensNFiscalBaixadas WHERE NumIntDoc = ?", sProduto, dQuantidade, sUnidadeMed, objItemNF.lNumIntDocOrig)
'                If lErro <> AD_SQL_SUCESSO Then Error 39286
'
'                lErro = Comando_BuscarPrimeiro(alComando(0))
'                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39287
'                If lErro = AD_SQL_SEM_DADOS Then Error 39288 'Não encontrou
'            End If

            'Faz o "lock" do Item
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> AD_SQL_SUCESSO Then Error 39289

            objItemNFOrig.dQuantidade = dQuantidade
            objItemNFOrig.sUnidadeMed = sUnidadeMed

            sUnidadeMed = String(STRING_UM_SIGLA, 0)
            
'mario 2/7/99 Remover NFiscalBaixada comando substituido pelo codigo abaixo
'            'Lê a Quantidade, Produto e Unidade de Medida de outros ítens já baixados
'            lErro = Comando_Executar(alComando(1), "SELECT ItensNFiscalBaixadas.Quantidade, ItensNFiscalBaixadas.UnidadeMed FROM ItensNFiscalBaixadas, NFiscalBaixadas, TiposDocInfo WHERE ItensNFiscalBaixadas.NumIntNF = NFiscalBaixadas.NumIntDoc AND NFiscalBaixadas.TipoNFiscal = TiposDocInfo.Codigo AND NFiscalBaixadas.FilialEmpresa = ? AND TiposDocInfo.NomeTelaNFiscal = ? AND ItensNFiscalBaixadas.NumIntDocOrig = ? AND ItensNFiscalBaixadas.Status <> ?", dQuantidade, sUnidadeMed, giFilialEmpresa, "NFiscalDev", objItemNF.lNumIntDocOrig, STATUS_EXCLUIDO)
'            If lErro <> AD_SQL_SUCESSO Then Error 39290

            'Lê a Quantidade, Produto e Unidade de Medida de outros ítens já baixados
            lErro = Comando_Executar(alComando(1), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.UnidadeMed FROM ItensNFiscal, NFiscal, TiposDocInfo WHERE ItensNFiscal.NumIntNF = NFiscal.NumIntDoc AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NFiscal.FilialEmpresa = ? AND TiposDocInfo.NomeTelaNFiscal = ? AND ItensNFiscal.NumIntDocOrig = ? AND NFiscal.Status <> ? AND NFiscal.Status <> ?", dQuantidade, sUnidadeMed, giFilialEmpresa, "NFiscalDev", objItemNF.lNumIntDocOrig, STATUS_EXCLUIDO, STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then Error 39290

            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39291

            Do While lErro <> AD_SQL_SEM_DADOS

                lErro = CF("UM_Conversao", objItemNF.iClasseUM, sUnidadeMed, objItemNFOrig.sUnidadeMed, dFator)
                If lErro <> SUCESSO Then Error 39292

                'Acumula a quantidade com o valor já convertido
                dQuantidade = dQuantidade * dFator
                dQuantDevolvida = dQuantDevolvida + dQuantidade

                lErro = Comando_BuscarProximo(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39293
            Loop

            lErro = CF("UM_Conversao", objProduto.iClasseUM, objItemNF.sUnidadeMed, objItemNFOrig.sUnidadeMed, dFator)
            If lErro <> SUCESSO Then Error 39294

            'se for uma inserção
            If objNFiscal.lNumNotaFiscal = 0 Then
                dQuantidade = objItemNF.dQuantidade * dFator
                dQuantDevolvida = dQuantDevolvida + dQuantidade
            End If

            'Verifica se a Quantidade devolvida é maior que a Quantidade do Item da NFOriginal
            If dQuantDevolvida > objItemNFOrig.dQuantidade Then Error 39295
        End If
    Next

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensNFiscalDev_Lock_Gravacao = SUCESSO

    Exit Function

Erro_ItensNFiscalDev_Lock_Gravacao:

    ItensNFiscalDev_Lock_Gravacao = Err

    Select Case Err

        Case 39278
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 39279, 39280, 39292, 39294
                
        Case 39284, 39285
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", Err)

        Case 39286, 39287
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCALBAIXADAS1", Err)

        Case 39288
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEM_NFORIGINAL_NAO_CADASTRADO2", Err, objItemNF.lNumIntDocOrig)

        Case 39289
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEM_NFORIGINAL", Err, objItemNF.lNumIntDocOrig)

'mario 2/7/99 Remover NFiscalBaixada
        Case 39290, 39291, 39293
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", Err)

        Case 39295
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_DEVOLVIDA_A_MAIOR", Err, objItemNF.iItem, dQuantDevolvida, objItemNFOrig.sUnidadeMed, objItemNFOrig.dQuantidade, objItemNFOrig.sUnidadeMed)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150145)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalDev_Verifica_Existencia(ByVal objNFiscal As ClassNFiscal, ByVal lComando As Long) As Long

Dim lErro As Long
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalDev_Verifica_Existencia

    'verifica se a nota já está cadastrada
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 39248
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 39249
    
    If lErro = AD_SQL_SUCESSO Then
        
        objNFiscal.lNumIntDoc = lNumIntDoc
        
        'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
        lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
        If lErro <> SUCESSO And lErro <> 207565 And lErro <> 207567 And lErro <> 207624 And lErro <> 207626 Then gError 207603
        
        'precisa excluir excluir a nota e inclui-la com o mesmo numero
        gError 207604
 
    End If
    
    'verifica se existe outra nf com data proxima
    lErro = Comando_Executar(lComando, "SELECT DataEmissao, NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao > ? AND DataEmissao < ? AND Status <> ? AND (Tipo = ? OR Tipo = ?)", dtDataEmissao, lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao - PERIODO_EMISSAO, objNFiscal.dtDataEmissao + PERIODO_EMISSAO, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 39251
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 39252
    
    
    If lErro = AD_SQL_SUCESSO Then
        
         objNFiscal.lNumIntDoc = lNumIntDoc
        
        'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
        lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
        If lErro <> SUCESSO And lErro <> 207565 And lErro <> 207567 And lErro <> 207624 And lErro <> 207626 Then gError 207606
        
        'precisa excluir a nota e inclui-la com o mesmo numero
        gError 207607
        
    End If

    NFiscalDev_Verifica_Existencia = SUCESSO
    
    Exit Function
    
Erro_NFiscalDev_Verifica_Existencia:

    NFiscalDev_Verifica_Existencia = gErr
    
    Select Case gErr
    
        Case 39248, 39249, 39251, 39252
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTA_FISCAL", gErr, objNFiscal.iTipoNFiscal, objNFiscal.dtDataEmissao, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)
        
        Case 39250 'Tratar a gravação da contabilidade na rotina chamadora
        
        Case 39253, 61405, 207603, 207606
        
        Case 207604, 207607
        'vai excluir a nota e inclui-la com o mesmo numero
        
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150146)
            
    End Select
    
    Exit Function
    
End Function

Function NFiscalDev_Lock_Gravacao(ByVal objNFiscal As ClassNFiscal, ByVal lComando As Long) As Long

Dim lErro As Long

On Error GoTo Erro_NFiscalDev_Lock_Gravacao
    
    lErro = CF("NaturezaOperacao_Lock", objNFiscal.sNaturezaOp, lComando)
    If lErro <> SUCESSO And lErro <> 40551 Then Error 39254
    
    'Não encontrou a Natureza de Operação --> erro
    If lErro = 40551 Then Error 39256
    
    If objNFiscal.lFornecedor > 0 Then
        
        lErro = CF("FilialFornecedor_Lock", objNFiscal.lFornecedor, objNFiscal.iFilialForn)
        If lErro <> 42870 And lErro <> SUCESSO Then Error 39258
        If lErro = 42870 Then Error 39260 'Não encontrou --> Erro

    ElseIf objNFiscal.lCliente > 0 Then
        
        lErro = CF("FilialCliente_Lock", objNFiscal.lCliente, objNFiscal.iFilialCli)
        If lErro <> SUCESSO And lErro <> 43050 Then Error 39261
        
        'Não encontrou a filial cliente --> Erro
        If lErro = 43050 Then Error 39263
        
    End If

    lErro = CF("Serie_Lock1", objNFiscal.sSerie)
    If lErro <> SUCESSO And lErro <> 43032 Then Error 39265
    
    'Não encontrou a Série --> erro
    If lErro = 43032 Then Error 39267

    'Se a Transportadora estiver preenchida
    If objNFiscal.iCodTransportadora > 0 Then
        
        'Faz um "lock" na transportadora
        lErro = CF("Transportadora_Lock1", objNFiscal.iCodTransportadora)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 39269
        
        'Não encontrou a Transportadora --> erro
        If lErro = 43038 Then Error 39271 'Não encontrou --> Erro

    End If
    
    'Se a Transportadora de redespacho estiver preenchida
    If objNFiscal.iCodTranspRedesp > 0 Then
        
        'Faz um "lock" na transportadora
        lErro = CF("Transportadora_Lock1", objNFiscal.iCodTranspRedesp)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 39269
        
        'Não encontrou a Transportadora --> erro
        If lErro = 43038 Then Error 39271 'Não encontrou --> Erro

    End If
    
    NFiscalDev_Lock_Gravacao = SUCESSO
    
    Exit Function
    
Erro_NFiscalDev_Lock_Gravacao:

    NFiscalDev_Lock_Gravacao = Err
    
    Select Case Err
    
        Case 39254, 39258, 39265
                    
        Case 39256
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NATUREZAOP_INEXISTENTE", Err, objNFiscal.sNaturezaOp)
        
        Case 39260
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_INEXISTENTE", Err, objNFiscal.iFilialForn, objNFiscal.lFornecedor)
        
        Case 39261, 39262, 39269
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", Err, objNFiscal.lCliente, objNFiscal.iFilialCli)

        Case 39263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_INEXISTENTE", Err, objNFiscal.iFilialCli, objNFiscal.lCliente)
            
        Case 39267
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", Err, objNFiscal.sSerie)
        
        Case 39271
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TRANSPORTADORA_NAO_CADASTRADA", Err, objNFiscal.iCodTransportadora)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150147)
            
    End Select
        
    Exit Function
    
End Function

Function NFiscal_Le_Pedido(ByVal objNFiscal As ClassNFiscal) As Long
'Lê a Nota Fiscal com o TipoNFiscal, Número, Serie, DataEmissao, NumPedidoVenda e FilialPedido

Dim lErro As Long
Dim lComando As Long
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NFiscal_Le_Pedido

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 46599

    With tNFiscal

        .sMensagemNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sMensagemCorpoNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
        .sPlaca = String(STRING_NFISCAL_PLACA, 0)
        .sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
        .sSerie = String(STRING_SERIE, 0)
        .sNumPedidoTerc = String(STRING_NUM_PEDIDO_TERC, 0)
        .sVolumeNumero = String(STRING_NFISCAL_VOLUME_NUMERO, 0)
        
        'Pesquisa a Nota Fiscal com o Número, Serie, DataEmissao, NumPedidoVenda e FilialPedido
        lErro = Comando_Executar(lComando, "SELECT Status, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEntrada, DataSaida, DataVencimento,DataReferencia, NumIntDoc, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal,VolumeNumero,FreteRespons, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota FROM NFiscal WHERE NumPedidoVenda = ? AND FilialPedido = ? AND FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal =? AND DataEmissao = ? AND TipoNFiscal = ? ORDER BY DataEmissao DESC", .iStatus, _
            .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumIntDoc, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, objNFiscal.lNumPedidoVenda, objNFiscal.iFilialPedido, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, objNFiscal.iTipoNFiscal)
        If lErro <> AD_SQL_SUCESSO Then Error 46600

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46601
        'Se não encontrar
        If lErro = AD_SQL_SEM_DADOS Then Error 46602

        'Preenche objNFiscal com os dados lidos
        objNFiscal.dPesoBruto = .dPesoBruto
        objNFiscal.dPesoLiq = .dPesoLiq
        objNFiscal.dtDataEntrada = .dtDataEntrada
        objNFiscal.dtDataSaida = .dtDataSaida
        objNFiscal.dtDataVencimento = .dtDataVencimento
        objNFiscal.dValorDesconto = .dValorDesconto
        objNFiscal.dValorFrete = .dValorFrete
        objNFiscal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscal.dValorProdutos = .dValorProdutos
        objNFiscal.dValorSeguro = .dValorSeguro
        objNFiscal.dValorTotal = .dValorTotal
        objNFiscal.iCanal = .iCanal
        objNFiscal.iClasseDocCPR = .iClasseDocCPR
        objNFiscal.iCodTransportadora = .iCodTransportadora
        objNFiscal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscal.iDetPagFrete = .iDetPagFrete
        objNFiscal.iSemDataSaida = .iSemDataSaida
        objNFiscal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscal.iFilialCli = .iFilialCli
        objNFiscal.iFilialEntrega = .iFilialEntrega
        objNFiscal.iFilialForn = .iFilialForn
        objNFiscal.iStatus = .iStatus
        objNFiscal.iTabelaPreco = .iTabelaPreco
        objNFiscal.lVolumeQuant = .lVolumeQuant
        objNFiscal.lCliente = .lCliente
        objNFiscal.lFornecedor = .lFornecedor
        objNFiscal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscal.lNumIntTrib = .lNumIntTrib
        objNFiscal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscal.lNumIntDoc = .lNumIntDoc
        objNFiscal.sMensagemNota = .sMensagemNota
        objNFiscal.sNaturezaOp = .sNaturezaOp
        objNFiscal.sPlaca = .sPlaca
        objNFiscal.sPlacaUF = .sPlacaUF
        objNFiscal.lVolumeEspecie = .lVolumeEspecie
        objNFiscal.lVolumeMarca = .lVolumeMarca
        objNFiscal.sVolumeNumero = .sVolumeNumero
        objNFiscal.dtDataReferencia = .dtDataReferencia
        objNFiscal.sMensagemCorpoNota = .sMensagemCorpoNota
        
    End With

    'Fecha o comando
    Call Comando_Fechar(lComando)

    NFiscal_Le_Pedido = SUCESSO

    Exit Function

Erro_NFiscal_Le_Pedido:

    NFiscal_Le_Pedido = Err

    Select Case Err

        Case 46599
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 46600, 46601
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)

        Case 46602 'Tratado pela rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150148)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PedidoVendaBaixado_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê o Pedido de Venda Baixado com o Código e a Filial passados

Dim lErro As Long
Dim tPedidoVenda As typePedidoVenda
Dim lComando As Long

On Error GoTo Erro_PedidoVendaBaixado_Le

    'ABre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 46132

    tPedidoVenda.sMensagemNota = String(STRING_PEDIDOVENDA_MENSAGEM_NOTA, 0)
    tPedidoVenda.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    tPedidoVenda.sPedidoCliente = String(STRING_PEDIDOVENDA_PEDIDO_CLIENTE, 0)
    tPedidoVenda.sPlaca = String(STRING_PEDIDOVENDA_PLACA, 0)
    tPedidoVenda.sPlacaUF = String(STRING_PEDIDOVENDA_PLACA_UF, 0)
    tPedidoVenda.sVolumeNumero = String(STRING_PEDIDOVENDA_VOLUME_NUMERO, 0)
    tPedidoVenda.sPedidoRepresentante = String(STRING_PEDIDOVENDA_PEDIDO_REPRESENTANTE, 0)
    tPedidoVenda.sObs = String(STRING_OBSERVACAO_OBSERVACAO, 0)

    'Busca o Pedido de Venda Baixado
    If objPedidoVenda.lCodigo <> 0 Then
        lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa, FilialEmpresaFaturamento,Cliente,Filial,FilialEntrega,CodTransportadora,CondicaoPagto,PercAcrescFinanceiro,DataEmissao,DataReferencia,MensagemNota,NaturezaOp,ValorTotal,ValorFrete,ValorDesconto,ValorSeguro,ValorOutrasDespesas,PedidoCliente,CanalVenda,TabelaPreco,ProxSeqBloqueio,FaturaIntegral,ComissaoAutomatica,CobrancaAutomatica,NumIntDoc,Placa,PlacaUF,VolumeQuant,VolumeEspecie,VolumeMarca,PesoLiq,PesoBruto,VolumeNumero,FreteRespons, CodTranspRedesp, DetPagFrete, DataEntrega, VolumeTotal, Moeda, TaxaMoeda, ValorProdutos,PedidoRepresentante, OBS, Andamento,ValorDescontoTit,ValorDescontoItens,ValorItens, CodigoBase, Parc " & _
                                            "FROM PedidosDeVendaBaixados WHERE FilialEmpresa = ? AND Codigo = ?", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.iFilialEmpresaFaturamento, tPedidoVenda.lCliente, tPedidoVenda.iFilial, tPedidoVenda.iFilialEntrega, tPedidoVenda.iCodTransportadora, tPedidoVenda.iCondicaoPagto, _
        tPedidoVenda.dPercAcrescFinanceiro, tPedidoVenda.dtDataEmissao, tPedidoVenda.dtDataReferencia, tPedidoVenda.sMensagemNota, tPedidoVenda.sNaturezaOp, tPedidoVenda.dValorTotal, _
        tPedidoVenda.dValorFrete, tPedidoVenda.dValorDesconto, tPedidoVenda.dValorSeguro, tPedidoVenda.dValorOutrasDespesas, tPedidoVenda.sPedidoCliente, tPedidoVenda.iCanalVenda, tPedidoVenda.iTabelaPreco, tPedidoVenda.iProxSeqBloqueio, tPedidoVenda.iFaturaIntegral, tPedidoVenda.iComissaoAutomatica, tPedidoVenda.iCobrancaAutomatica, tPedidoVenda.lNumIntDoc, tPedidoVenda.sPlaca, tPedidoVenda.sPlacaUF, tPedidoVenda.lVolumeQuant, tPedidoVenda.lVolumeEspecie, tPedidoVenda.lVolumeMarca, tPedidoVenda.dPesoLiq, tPedidoVenda.dPesoBruto, tPedidoVenda.sVolumeNumero, tPedidoVenda.iFreteRespons, tPedidoVenda.iCodTranspRedesp, tPedidoVenda.iDetPagFrete, tPedidoVenda.dtDataEntrega, tPedidoVenda.dVolumeTotal, tPedidoVenda.iMoeda, tPedidoVenda.dTaxaMoeda, tPedidoVenda.dValorProdutos, tPedidoVenda.sPedidoRepresentante, tPedidoVenda.sObs, tPedidoVenda.iAndamento, tPedidoVenda.dValorDescontoTit, tPedidoVenda.dValorDescontoItens, tPedidoVenda.dValorItens, tPedidoVenda.lCodigoBase, tPedidoVenda.iParc, _
        objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    Else
        lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa, FilialEmpresaFaturamento,Cliente,Filial,FilialEntrega,CodTransportadora,CondicaoPagto,PercAcrescFinanceiro,DataEmissao,DataReferencia,MensagemNota,NaturezaOp,ValorTotal,ValorFrete,ValorDesconto,ValorSeguro,ValorOutrasDespesas,PedidoCliente,CanalVenda,TabelaPreco,ProxSeqBloqueio,FaturaIntegral,ComissaoAutomatica,CobrancaAutomatica,NumIntDoc,Placa,PlacaUF,VolumeQuant,VolumeEspecie,VolumeMarca,PesoLiq,PesoBruto,VolumeNumero,FreteRespons, CodTranspRedesp, DetPagFrete, DataEntrega, VolumeTotal, Moeda, TaxaMoeda, ValorProdutos,PedidoRepresentante, OBS, Andamento,ValorDescontoTit,ValorDescontoItens,ValorItens, CodigoBase, Parc " & _
                                            "FROM PedidosDeVendaBaixados WHERE NumIntDoc = ?", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.iFilialEmpresaFaturamento, tPedidoVenda.lCliente, tPedidoVenda.iFilial, tPedidoVenda.iFilialEntrega, tPedidoVenda.iCodTransportadora, tPedidoVenda.iCondicaoPagto, _
        tPedidoVenda.dPercAcrescFinanceiro, tPedidoVenda.dtDataEmissao, tPedidoVenda.dtDataReferencia, tPedidoVenda.sMensagemNota, tPedidoVenda.sNaturezaOp, tPedidoVenda.dValorTotal, _
        tPedidoVenda.dValorFrete, tPedidoVenda.dValorDesconto, tPedidoVenda.dValorSeguro, tPedidoVenda.dValorOutrasDespesas, tPedidoVenda.sPedidoCliente, tPedidoVenda.iCanalVenda, tPedidoVenda.iTabelaPreco, tPedidoVenda.iProxSeqBloqueio, tPedidoVenda.iFaturaIntegral, tPedidoVenda.iComissaoAutomatica, tPedidoVenda.iCobrancaAutomatica, tPedidoVenda.lNumIntDoc, tPedidoVenda.sPlaca, tPedidoVenda.sPlacaUF, tPedidoVenda.lVolumeQuant, tPedidoVenda.lVolumeEspecie, tPedidoVenda.lVolumeMarca, tPedidoVenda.dPesoLiq, tPedidoVenda.dPesoBruto, tPedidoVenda.sVolumeNumero, tPedidoVenda.iFreteRespons, tPedidoVenda.iCodTranspRedesp, tPedidoVenda.iDetPagFrete, tPedidoVenda.dtDataEntrega, tPedidoVenda.dVolumeTotal, tPedidoVenda.iMoeda, tPedidoVenda.dTaxaMoeda, tPedidoVenda.dValorProdutos, tPedidoVenda.sPedidoRepresentante, tPedidoVenda.sObs, tPedidoVenda.iAndamento, tPedidoVenda.dValorDescontoTit, tPedidoVenda.dValorDescontoItens, tPedidoVenda.dValorItens, tPedidoVenda.lCodigoBase, tPedidoVenda.iParc, objPedidoVenda.lNumIntDoc)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 46133

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46134
    If lErro = AD_SQL_SEM_DADOS Then Error 46135 'Não encontrou

    With tPedidoVenda
        'Armazena os dados lidos
        objPedidoVenda.lCodigo = .lCodigo
        objPedidoVenda.iFilialEmpresa = .iFilialEmpresa
        objPedidoVenda.dPercAcrescFinanceiro = .dPercAcrescFinanceiro
        objPedidoVenda.dtDataEmissao = .dtDataEmissao
        objPedidoVenda.dtDataReferencia = .dtDataReferencia
        objPedidoVenda.dValorDesconto = .dValorDesconto
        objPedidoVenda.dValorFrete = .dValorFrete
        objPedidoVenda.dValorOutrasDespesas = .dValorOutrasDespesas
        objPedidoVenda.dValorSeguro = .dValorSeguro
        objPedidoVenda.dValorTotal = .dValorTotal
        objPedidoVenda.iCanalVenda = .iCanalVenda
        objPedidoVenda.iCobrancaAutomatica = .iCobrancaAutomatica
        objPedidoVenda.iCodTransportadora = .iCodTransportadora
        objPedidoVenda.iCodTranspRedesp = .iCodTranspRedesp
        objPedidoVenda.iDetPagFrete = .iDetPagFrete
        objPedidoVenda.dtDataEntrega = .dtDataEntrega
        objPedidoVenda.iComissaoAutomatica = .iComissaoAutomatica
        objPedidoVenda.iCondicaoPagto = .iCondicaoPagto
        objPedidoVenda.iFaturaIntegral = .iFaturaIntegral
        objPedidoVenda.iFilial = .iFilial
        objPedidoVenda.iFilialEmpresaFaturamento = .iFilialEmpresaFaturamento
        objPedidoVenda.iFilialEntrega = .iFilialEntrega
        objPedidoVenda.iProxSeqBloqueio = .iProxSeqBloqueio
        objPedidoVenda.iTabelaPreco = .iTabelaPreco
        objPedidoVenda.iTipoPedido = .iTipoPedido
        objPedidoVenda.lCliente = .lCliente
        objPedidoVenda.lNumIntDoc = .lNumIntDoc
        objPedidoVenda.sMensagemNota = .sMensagemNota
        objPedidoVenda.sNaturezaOp = .sNaturezaOp
        objPedidoVenda.sPedidoCliente = .sPedidoCliente
        objPedidoVenda.sPlaca = .sPlaca
        objPedidoVenda.sPlacaUF = .sPlacaUF
        objPedidoVenda.lVolumeQuant = .lVolumeQuant
        objPedidoVenda.lVolumeEspecie = .lVolumeEspecie
        objPedidoVenda.lVolumeMarca = .lVolumeMarca
        objPedidoVenda.dPesoLiq = .dPesoLiq
        objPedidoVenda.dPesoBruto = .dPesoBruto
        objPedidoVenda.sVolumeNumero = .sVolumeNumero
        objPedidoVenda.iFreteRespons = .iFreteRespons
        objPedidoVenda.dValorProdutos = .dValorProdutos
        objPedidoVenda.dVolumeTotal = .dVolumeTotal
        objPedidoVenda.iMoeda = .iMoeda
        objPedidoVenda.dTaxaMoeda = .dTaxaMoeda
        objPedidoVenda.sPedidoRepresentante = .sPedidoRepresentante
        objPedidoVenda.sObs = .sObs
        objPedidoVenda.iAndamento = .iAndamento
        objPedidoVenda.dValorDescontoTit = .dValorDescontoTit
        objPedidoVenda.dValorItens = .dValorItens
        objPedidoVenda.dValorDescontoItens = .dValorDescontoItens
        objPedidoVenda.lCodigoBase = .lCodigoBase
        objPedidoVenda.iParc = .iParc
    
    End With

    'Fecha o comando
    Call Comando_Fechar(lComando)

    lErro = CF("PV_Le_Customizado", objPedidoVenda)
    If lErro <> SUCESSO Then Error 40311
    
    PedidoVendaBaixado_Le = SUCESSO

    Exit Function

Erro_PedidoVendaBaixado_Le:

    PedidoVendaBaixado_Le = Err

    Select Case Err

        Case 46132
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 46133, 43134
            lErro = Rotina_Erro(vbOKOnly, "0", Err, objPedidoVenda.lCodigo)

        Case 46135, 40311
            'Tratado pela rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150149)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscalRemessa_Verifica_Existencia(ByVal objNFiscal As ClassNFiscal, ByVal lComando As Long) As Long

Dim lErro As Long
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult
Dim sStat As String

On Error GoTo Erro_NFiscalRemessa_Verifica_Existencia

    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 42061
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 42062
    
    If lErro = AD_SQL_SUCESSO Then
    
        objNFiscal.lNumIntDoc = lNumIntDoc
        
        'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
        lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
        If lErro <> 207565 And lErro <> 207567 And lErro <> 207624 And lErro <> 207626 Then gError 207589
        
        'precisa excluir a  nota e inclui-la com o mesmo numero
        gError 207591
        
        
'        objNFiscal.lNumIntDoc = lNumIntDoc
'
'        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_SAIDA_CONTAB", objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
'
'        If vbMsgRes = vbYes Then
'            Error 42063
'        ElseIf vbMsgRes = vbNo Then
'            Error 61407
'        End If

    
    End If
    
    
    'Verifica em um periodo de emissao se exite alguma nota com os mesmos dados
    lErro = Comando_Executar(lComando, "SELECT DataEmissao, NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao > ? AND DataEmissao < ? AND Status <> ? AND (Tipo = ? OR Tipo = ?)", dtDataEmissao, lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao - PERIODO_EMISSAO, objNFiscal.dtDataEmissao + PERIODO_EMISSAO, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 42064
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 42065
    
    If lErro = AD_SQL_SUCESSO Then 'Existe
    
        objNFiscal.lNumIntDoc = lNumIntDoc
        
        'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
        lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
        If lErro <> 207565 And lErro <> 207567 And lErro <> 207624 And lErro <> 207626 Then gError 207590
        
        'precisa excluir  a nota e inclui-la com o mesmo numero
        gError 207593
    
    End If

    NFiscalRemessa_Verifica_Existencia = SUCESSO
    
    Exit Function
    
Erro_NFiscalRemessa_Verifica_Existencia:

    NFiscalRemessa_Verifica_Existencia = gErr
    
    Select Case gErr
        
        Case 42061, 42062, 42064, 42065
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTA_FISCAL", gErr, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)
        
        Case 42063 'Tratar a alteração da contabilidade
        
        Case 42066, 61407, 207589, 207590
        
        Case 207591, 207593
        'vai excluir nfefedlote, excluir a nota e inclui-la com o mesmo numero
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150150)
            
    End Select

    Exit Function
    
End Function

Function ItensNFiscalRem_Lock_Gravacao(ByVal objNFiscal As ClassNFiscal) As Long
'Faz a validação e os "lock's" dos dados ligados aos ítens da Nota Fiscal

Dim lErro As Long
Dim lComando As Long
Dim objItemNF As ClassItemNF
Dim objProduto As New ClassProduto
Dim colCodigoNome As New AdmColCodigoNome
Dim iIndice1 As Integer
Dim iAlmoxarifadoLocado As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim iIndice As Integer
Dim iAlmoxarifadoAtual As Integer
Dim sAlmoxarifadoAtual As String
Dim objItemAloc As ClassItemNFAlocacao
Dim objReservaItem As ClassReservaItem

On Error GoTo Erro_ItensNFiscalRem_Lock_Gravacao
    
    'Abre os Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42089
    
    'Para cada Item existente na coleção de Itens
    For Each objItemNF In objNFiscal.colItensNF
    
        objProduto.sCodigo = objItemNF.sProduto
            
        lErro = CF("Produto_Lock", objProduto)
        If lErro <> SUCESSO Then Error 42090


        objItemNF.iClasseUM = objProduto.iClasseUM
        objItemNF.iControleEstoque = objProduto.iControleEstoque
        objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
        
        For Each objItemAloc In objItemNF.colAlocacoes
                
            iAlmoxarifadoAtual = objItemAloc.iAlmoxarifado
            sAlmoxarifadoAtual = objItemAloc.sAlmoxarifado
            
            iAlmoxarifadoLocado = False
            
            If colCodigoNome.Count > 0 Then
                For iIndice1 = 1 To colCodigoNome.Count
                    If colCodigoNome(iIndice1).iCodigo = iAlmoxarifadoAtual Then
                        iAlmoxarifadoLocado = True
                        Exit For
                    End If
                Next
                
            End If
            
            If Not iAlmoxarifadoLocado Then
                
                colCodigoNome.Add iAlmoxarifadoAtual, sAlmoxarifadoAtual
                
                lErro = CF("Almoxarifado_Lock", iAlmoxarifadoAtual, lComando)
                If lErro <> SUCESSO Then Error 42091
                
            End If
        
        Next
            
        For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
            
            objProduto.sCodigo = objItemRomaneio.sProduto
            
            lErro = CF("Produto_Lock", objProduto)
            If lErro <> SUCESSO Then Error 42090
            
            For Each objReservaItem In objItemRomaneio.colLocalizacao
                
                iAlmoxarifadoAtual = objReservaItem.iAlmoxarifado
                sAlmoxarifadoAtual = objReservaItem.sAlmoxarifado
                
                iAlmoxarifadoLocado = False
                
                If colCodigoNome.Count > 0 Then
                    For iIndice1 = 1 To colCodigoNome.Count
                        If colCodigoNome(iIndice1).iCodigo = iAlmoxarifadoAtual Then
                            iAlmoxarifadoLocado = True
                            Exit For
                        End If
                    Next
                    
                End If
                
                If Not iAlmoxarifadoLocado Then
                    
                    colCodigoNome.Add iAlmoxarifadoAtual, sAlmoxarifadoAtual
                    
                    lErro = CF("Almoxarifado_Lock", iAlmoxarifadoAtual, lComando)
                    If lErro <> SUCESSO Then Error 42091
                    
                End If
            
            Next
        
        Next
    
    Next
        
    'Fecha os comandos
    Call Comando_Fechar(lComando)

    ItensNFiscalRem_Lock_Gravacao = SUCESSO

    Exit Function

Erro_ItensNFiscalRem_Lock_Gravacao:

    ItensNFiscalRem_Lock_Gravacao = Err

    Select Case Err

        Case 42089
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 42090, 42091, 39292, 39294
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150151)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensNFiscalRemPedido_Lock_Gravacao(ByVal objNFiscal As ClassNFiscal) As Long
'Faz a validação e o "lock" dos dados ligados ao produto da Nota Fiscal

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim objItemNF As ClassItemNF
Dim iCodigo As Integer
Dim iFilialEmpresa As Integer
Dim iIndice As Integer
Dim objProduto As New ClassProduto
Dim iAlmoxarifadoLocado As Integer
Dim colCodigoNome As New AdmColCodigoNome
Dim objItemAloc As ClassItemNFAlocacao
Dim objCodigoNome As AdmCodigoNome

On Error GoTo Erro_ItensNFiscalRemPedido_Lock_Gravacao
    
    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 91497
    Next

    'Lock shared nos Produtos e Almoxarifados
    For Each objItemNF In objNFiscal.colItensNF
        
        objProduto.sCodigo = objItemNF.sProduto
        
        lErro = CF("Produto_Lock_Shared", alComando(1), objProduto)
        If lErro <> SUCESSO Then gError 91498

        objItemNF.iControleEstoque = objProduto.iControleEstoque
        objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
        objItemNF.sUMVenda = objProduto.sSiglaUMVenda
        objItemNF.iClasseUM = objProduto.iClasseUM
        objItemNF.iApropriacaoProd = objProduto.iApropriacaoCusto

        If objItemNF.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then

            For Each objItemAloc In objItemNF.colAlocacoes
    
                iAlmoxarifadoLocado = False
                
                If colCodigoNome.Count > 0 Then
                    For Each objCodigoNome In colCodigoNome
                        If objCodigoNome.iCodigo = objItemAloc.iAlmoxarifado Then
                            iAlmoxarifadoLocado = True
                        End If
                    Next
                End If
                    
                If iAlmoxarifadoLocado = False Then
                
                    colCodigoNome.Add objItemAloc.iAlmoxarifado, objItemAloc.sAlmoxarifado
                
                    lErro = CF("Almoxarifado_Lock", objItemAloc.iAlmoxarifado, alComando(2))
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
'                    lErro = Comando_ExecutarLockado(alComando(2), "SELECT FilialEmpresa FROM Almoxarifado WHERE Codigo = ? AND FilialEmpresa = ? ", iFilialEmpresa, objItemAloc.iAlmoxarifado, giFilialEmpresa)
'                    If lErro <> AD_SQL_SUCESSO Then gError 96066
'
'                    lErro = Comando_BuscarPrimeiro(alComando(2))
'                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 35994
'
'                    If lErro = AD_SQL_SEM_DADOS Then gError 96067
'
'                    lErro = Comando_LockShared(alComando(2))
'                    If lErro <> AD_SQL_SUCESSO Then gError 96068
            
                End If
            Next
        End If
    Next
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensNFiscalRemPedido_Lock_Gravacao = SUCESSO
    
    Exit Function

Erro_ItensNFiscalRemPedido_Lock_Gravacao:

    ItensNFiscalRemPedido_Lock_Gravacao = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case 91497
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91498
    
        Case 96066
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", gErr, objItemAloc.iAlmoxarifado)

        Case 96067
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_INEXISTENTE", gErr, objItemAloc.iAlmoxarifado)

        Case 96068
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO1", gErr, objItemNF.iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150152)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalRemessa_Lock_Gravacao(ByVal objNFiscal As ClassNFiscal, ByVal lComando As Long) As Long

Dim lErro As Long
    
On Error GoTo Erro_NFiscalRemessa_Lock_Gravacao

    '"Locka" a Natureza Op
    lErro = CF("NaturezaOperacao_Lock", objNFiscal.sNaturezaOp, lComando)
    If lErro <> SUCESSO And lErro <> 40551 Then Error 42067
    If lErro = 40551 Then Error 42069
    
    If objNFiscal.lFornecedor > 0 Then
        
        lErro = CF("FilialFornecedor_Lock", objNFiscal.lFornecedor, objNFiscal.iFilialForn)
        If lErro <> SUCESSO And lErro <> 42870 Then Error 42071
        If lErro = 42870 Then Error 42073 'Não encontrou --> Erro

    ElseIf objNFiscal.lCliente > 0 Then

        lErro = CF("FilialCliente_Lock", objNFiscal.lCliente, objNFiscal.iFilialCli)
        If lErro <> SUCESSO And lErro <> 43050 Then Error 42074
        If lErro = 43050 Then Error 42076 'Não encontrou --> Erro
    End If

    'Faz o "lock" na Série
    lErro = CF("Serie_Lock1", objNFiscal.sSerie)
    If lErro <> SUCESSO And lErro <> 43032 Then Error 42078
    If lErro = 43032 Then Error 42080

    'Se a Transportadora estiver preenchida
    If objNFiscal.iCodTransportadora > 0 Then
        
        'Faz um "lock" na transportadora
        lErro = CF("Transportadora_Lock1", objNFiscal.iCodTransportadora)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 42082
        If lErro = 43038 Then Error 42084 'Não encontrou --> Erro

    End If

    'Se a Transportadora de redespacho estiver preenchida
    If objNFiscal.iCodTranspRedesp > 0 Then
        
        'Faz um "lock" na transportadora
        lErro = CF("Transportadora_Lock1", objNFiscal.iCodTranspRedesp)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 42082
        If lErro = 43038 Then Error 42084 'Não encontrou --> Erro

    End If

    NFiscalRemessa_Lock_Gravacao = SUCESSO
    
    Exit Function
    
Erro_NFiscalRemessa_Lock_Gravacao:

    NFiscalRemessa_Lock_Gravacao = Err
    
    Select Case Err
    
        Case 42067, 42071, 42074, 42078, 42082
        
        Case 42069
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NATUREZAOP_INEXISTENTE", Err, objNFiscal.sNaturezaOp)
        
        Case 42073
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_INEXISTENTE", Err, objNFiscal.iFilialForn, objNFiscal.lFornecedor)
        
        Case 42076
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_INEXISTENTE", Err, objNFiscal.iFilialCli, objNFiscal.lCliente)
            
        Case 42080
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", Err, objNFiscal.sSerie)
                
        Case 42084
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TRANSPORTADORA_NAO_CADASTRADA", Err, objNFiscal.iCodTransportadora)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150153)
            
    End Select

    Exit Function

End Function

Function TiposDeBloqueio_Le_Todos(ByVal colTipoDeBloqueio As Collection) As Long
'Preenche colTipoDeBloqueio com os tipos de Bloqueio existentes na tabela TiposDeBloqueio.

Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer
Dim sNomeReduzido As String
Dim sDescricao As String
Dim objTipoDeBloqueio As ClassTipoDeBloqueio

On Error GoTo Erro_TiposDeBloqueio_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 29165

    sNomeReduzido = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    sDescricao = String(STRING_TIPO_BLOQUEIO_DESCRICAO, 0)
    
    'Pesquisa Bloqueios no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo, NomeReduzido, Descricao FROM TiposDeBloqueio ORDER BY Codigo", iCodigo, sNomeReduzido, sDescricao)
    If lErro <> AD_SQL_SUCESSO Then Error 29166

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29167

    If lErro = AD_SQL_SEM_DADOS Then Error 29168

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objTipoDeBloqueio = New ClassTipoDeBloqueio
        
        objTipoDeBloqueio.iCodigo = iCodigo
        objTipoDeBloqueio.sDescricao = sDescricao
        objTipoDeBloqueio.sNomeReduzido = sNomeReduzido
        
        'Coloca o Bloqueio lido na coleção
        colTipoDeBloqueio.Add objTipoDeBloqueio

        'Lê o próximo Bloqueio
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29169

    Loop

    lErro = Comando_Fechar(lComando)

    TiposDeBloqueio_Le_Todos = SUCESSO

    Exit Function

Erro_TiposDeBloqueio_Le_Todos:

    TiposDeBloqueio_Le_Todos = Err

    Select Case Err

        Case 29165
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 29166, 29167, 29169
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEBLOQUEIO", Err)

        Case 29168
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150154)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Maristela(Inicio) Alteração: Não seleciona mais as Datas da tabela FilialClienteFilEmp
Function FilCliFilEmp_Le_Lock(ByVal lComando As Long, ByVal objFilCliFilEmp As ClassFilCliFilEmp) As Long
'le e lock a tabela FilCliFilEmp
'Chaves iFilialEmpresa, lCodCliente, iCodFilial do objFilCliFilEmp

Dim lErro As Long
Dim tFilCliFilEmp As typeFilCliFilEmp

On Error GoTo Erro_FilCliFilEmp_Le_Lock

    'Lê a tabela FilCliFilEmp
    lErro = Comando_ExecutarPos(lComando, "SELECT NumeroCompras, MediaCompra, ValorAcumuladoCompras  FROM FilialClienteFilEmp WHERE FilialEmpresa = ? AND CodCliente =? AND CodFilial = ?", 0, tFilCliFilEmp.lNumeroCompras, tFilCliFilEmp.dMediaCompra, tFilCliFilEmp.dValorAcumuladoCompras, objFilCliFilEmp.iFilialEmpresa, objFilCliFilEmp.lCodCliente, objFilCliFilEmp.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 52540

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 52541

    'Não achou a FilCliFilEmp
    If lErro = AD_SQL_SEM_DADOS Then gError 52542

    'Lock da FilCliFilEmp
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 52543

    objFilCliFilEmp.lNumeroCompras = tFilCliFilEmp.lNumeroCompras
    objFilCliFilEmp.dMediaCompra = tFilCliFilEmp.dMediaCompra
    objFilCliFilEmp.dValorAcumuladoCompras = tFilCliFilEmp.dValorAcumuladoCompras

    'pesquisa a primeira e última compra
    lErro = FilialClienteFilEmp_Pesquisa_Compra(objFilCliFilEmp)
    If lErro <> SUCESSO Then gError 90525
    
    FilCliFilEmp_Le_Lock = SUCESSO
    
    Exit Function
    
Erro_FilCliFilEmp_Le_Lock:

    FilCliFilEmp_Le_Lock = gErr

    Select Case gErr

        Case 52540, 52541
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALCLIENTEFILEMP", gErr)
        
        Case 52542, 90525
        
        Case 52543
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIALCLIENTEFILEMP", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150155)

    End Select

    Exit Function

End Function
'Maristela(Fim)

Function FilialFaturamento_Le(ByVal iFilialEmpresa As Integer, iFilialFaturamento As Integer) As Long
'Lê o código da filial de faturamento pada a filialempresa passada

Dim lErro As Long
Dim lComando As Long
Dim tFATConfig As typeFATConfig

On Error GoTo Erro_FilialFaturamento_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51136
    
    tFATConfig.sConteudo = String(STRING_FATCONFIG_CONTEUDO, 0)
    
    'Busca em FATConfig o código da filial de faturamento default do sistema
    lErro = Comando_Executar(lComando, "SELECT Conteudo FROM FATConfig WHERE Codigo = ? AND FilialEmpresa = ?", tFATConfig.sConteudo, "FILIAL_FATURAMENTO", iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 51137
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 51138
    
    'Guarda o código lido
    iFilialFaturamento = StrParaInt(tFATConfig.sConteudo)
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    FilialFaturamento_Le = SUCESSO
    
    Exit Function
    
Erro_FilialFaturamento_Le:

    FilialFaturamento_Le = Err
    
    Select Case Err
    
        Case 51136
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 51137, 51138
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATCONFIG2", Err, "FILIAL_FATURAMENTO", iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150156)
            
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function NFiscal_Le_NumeroSerie(ByVal objNFiscal As ClassNFiscal) As Long
'Lê a Nota Fiscal com o Número, Série e Filial passados em objNFiscal.

Dim lErro As Long
Dim lComando As Long
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NFiscal_Le_NumeroSerie

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 43673

    With tNFiscal

        .sMensagemNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sMensagemCorpoNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
        .sPlaca = String(STRING_NFISCAL_PLACA, 0)
        .sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
        .sNumPedidoTerc = String(STRING_NUM_PEDIDO_TERC, 0)
        .sVolumeNumero = String(STRING_NFISCAL_VOLUME_NUMERO, 0)

        'Pesquisa a Nota Fiscal com o Número, Série e Filial
        lErro = Comando_Executar(lComando, "SELECT Status, NumIntDoc, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento,DataReferencia, FilialPedido, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, VolumeNumero, FreteRespons, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota, RPS FROM NFSaidaTodas WHERE FilialEmpresa = ? AND Serie = ? AND Status <> ? AND NumNotaFiscal = ? AND DataEmissao = ?", _
            .iStatus, .lNumIntDoc, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .iFilialPedido, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, .iRecibo, giFilialEmpresa, objNFiscal.sSerie, STATUS_EXCLUIDO, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
        If lErro <> AD_SQL_SUCESSO Then Error 43674

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 43675
        
        'Se não encontrar a Nota Fiscal --> Erro
        If lErro = AD_SQL_SEM_DADOS Then Error 43676

        'Preenche objNFiscal com os dados lidos
        objNFiscal.lNumIntDoc = .lNumIntDoc
        objNFiscal.lCliente = .lCliente
        objNFiscal.iFilialCli = .iFilialCli
        objNFiscal.iFilialEntrega = .iFilialEntrega
        objNFiscal.lFornecedor = .lFornecedor
        objNFiscal.iFilialForn = .iFilialForn
        objNFiscal.iStatus = .iStatus
        objNFiscal.dtDataEmissao = .dtDataEmissao
        objNFiscal.dtDataEntrada = .dtDataEntrada
        objNFiscal.dtDataSaida = .dtDataSaida
        objNFiscal.dtDataVencimento = .dtDataVencimento
        objNFiscal.iFilialPedido = .iFilialPedido
        objNFiscal.lNumPedidoVenda = .lNumPedidoVenda
        objNFiscal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscal.iClasseDocCPR = .iClasseDocCPR
        objNFiscal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscal.dValorTotal = .dValorTotal
        objNFiscal.dValorProdutos = .dValorProdutos
        objNFiscal.dValorFrete = .dValorFrete
        objNFiscal.dValorSeguro = .dValorSeguro
        objNFiscal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscal.dValorDesconto = .dValorDesconto
        objNFiscal.iCodTransportadora = .iCodTransportadora
        objNFiscal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscal.iDetPagFrete = .iDetPagFrete
        objNFiscal.iSemDataSaida = .iSemDataSaida
        objNFiscal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscal.sMensagemNota = .sMensagemNota
        objNFiscal.iTabelaPreco = .iTabelaPreco
        objNFiscal.iTipoNFiscal = .iTipoNFiscal
        objNFiscal.sNaturezaOp = .sNaturezaOp
        objNFiscal.dPesoLiq = .dPesoLiq
        objNFiscal.dPesoBruto = .dPesoBruto
        objNFiscal.lNumIntTrib = .lNumIntTrib
        objNFiscal.sPlaca = .sPlaca
        objNFiscal.sPlacaUF = .sPlacaUF
        objNFiscal.lVolumeQuant = .lVolumeQuant
        objNFiscal.lVolumeEspecie = .lVolumeEspecie
        objNFiscal.lVolumeMarca = .lVolumeMarca
        objNFiscal.iCanal = .iCanal
        objNFiscal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscal.sVolumeNumero = .sVolumeNumero
        objNFiscal.iFreteRespons = .iFreteRespons
        objNFiscal.dtDataReferencia = .dtDataReferencia
        objNFiscal.sMensagemCorpoNota = .sMensagemCorpoNota
        objNFiscal.iRecibo = .iRecibo
                
    End With

    'Fecha o comando
    Call Comando_Fechar(lComando)

    NFiscal_Le_NumeroSerie = SUCESSO

    Exit Function

Erro_NFiscal_Le_NumeroSerie:

    NFiscal_Le_NumeroSerie = Err

    Select Case Err

        Case 43673
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 43674, 43675
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL5", Err, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 43676

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150157)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function MovEstoqueItensBenef_Le(ByVal objNFiscal As ClassNFiscal) As Long
'Le os Ítens do MovimentodeEstoque para o Beneficiamento

Dim lErro As Long
Dim lComando As Long
Dim tItemMovEstoque As typeItemMovEstoque
Dim sComando_SQL As String
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objItemMovEst As ClassItemMovEstoque

On Error GoTo Erro_MovEstoqueItensBenef_Le

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52380

    With tItemMovEstoque
                
        Set objNFiscal.objMovEstoque = New ClassMovEstoque
        
        objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
        
        'Faz a Leitura da Sigla a ser utilizada na condicao do select
        lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
        If lErro <> SUCESSO Then Error 52403
                
        .sAlmoxarifadoNomeRed = String(STRING_ALMOXARIFADO_NOMEREDUZIDO, 0)
        .sProduto = String(STRING_PRODUTO, 0)
        .sProdutoDesc = String(STRING_PRODUTO_DESCRICAO, 0)
        .sSiglaUM = String(STRING_UM_SIGLA, 0)
        .sContaContabilEst = String(STRING_CONTA, 0)
        .sContaContabilAplic = String(STRING_CONTA, 0)
        
        'Faz o select amarrando pelo tipoNfiscal e NumIntdocOrigem
        sComando_SQL = "SELECT MovimentoEstoque.Produto, Produtos.Descricao, MovimentoEstoque.SiglaUM, MovimentoEstoque.Quantidade, MovimentoEstoque.Almoxarifado, Almoxarifado.NomeReduzido ,MovimentoEstoque.ContaContabilEst, MovimentoEstoque.ContaContabilAplic, MovimentoEstoque.QuantInsumos, MovimentoEstoque.ItemNF FROM MovimentoEstoque, Produtos, Almoxarifado WHERE Produtos.Codigo = MovimentoEstoque.Produto AND Almoxarifado.Codigo = MovimentoEstoque.Almoxarifado AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.DocOrigem= ? AND MovimentoEstoque.NumIntDocOrigem =? ORDER BY MovimentoEstoque.NumIntDoc"
        lErro = Comando_Executar(lComando, sComando_SQL, .sProduto, .sProdutoDesc, .sSiglaUM, .dQuantidade, .iAlmoxarifado, .sAlmoxarifadoNomeRed, .sContaContabilEst, .sContaContabilAplic, .dQuantInsumos, .iItemNF, giFilialEmpresa, objTipoDocInfo.sSigla, objNFiscal.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 52381

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52382

        Do While lErro <> AD_SQL_SEM_DADOS

            Set objItemMovEst = objNFiscal.objMovEstoque.colItens.Add(0, 0, 0, 0, .sProduto, .sProdutoDesc, .sSiglaUM, .dQuantidade, .iAlmoxarifado, .sAlmoxarifadoNomeRed, 0, "", 0, "", "", .sContaContabilAplic, .sContaContabilEst, 0, Nothing, Nothing, DATA_NULA)

            objItemMovEst.dQuantInsumos = .dQuantInsumos
            objItemMovEst.iItemNF = .iItemNF

            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52383

        Loop

    End With

    If objNFiscal.objMovEstoque.colItens.Count = 0 Then Error 52384

    Call Comando_Fechar(lComando)

    MovEstoqueItensBenef_Le = SUCESSO

    Exit Function

Erro_MovEstoqueItensBenef_Le:

    MovEstoqueItensBenef_Le = Err

    Select Case Err
        
        Case 52380
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 52381, 52382, 52383
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", Err)

        Case 52384 'Tratado na Rotina Chamadora
        
        Case 52403 'Já foi Tratado
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150158)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function


Public Function PedidoDeVenda_Le_Mod(ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal lComando As Long) As Long
'ATENÇÃO: Essa rotina deve ser chamada em transacao.
'Lê para alteração (ExecutarPos) o Pedido de Venda a partir do Código passado.

Dim lErro As Long
Dim tPedidoVenda As typePedidoVenda

On Error GoTo Erro_PedidoDeVenda_Le_Mod

    tPedidoVenda.sMensagemNota = String(STRING_PEDIDOVENDA_MENSAGEM_NOTA, 0)
    tPedidoVenda.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    tPedidoVenda.sPedidoCliente = String(STRING_PEDIDOVENDA_PEDIDO_CLIENTE, 0)
    tPedidoVenda.sPlaca = String(STRING_PEDIDOVENDA_PLACA, 0)
    tPedidoVenda.sPlacaUF = String(STRING_PEDIDOVENDA_PLACA_UF, 0)
    tPedidoVenda.sVolumeNumero = String(STRING_PEDIDOVENDA_VOLUME_NUMERO, 0)
    tPedidoVenda.sPedidoRepresentante = String(STRING_PEDIDOVENDA_PEDIDO_REPRESENTANTE, 0)
    tPedidoVenda.sObs = String(STRING_OBSERVACAO_OBSERVACAO, 0)
    
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresaFaturamento, Cliente, Filial, FilialEntrega, CodTransportadora, CondicaoPagto, PercAcrescFinanceiro, DataEmissao, MensagemNota, NaturezaOp, ValorTotal, ValorFrete, ValorDesconto, ValorSeguro, PedidoCliente, CanalVenda, TabelaPreco, ProxSeqBloqueio, FaturaIntegral, ComissaoAutomatica, CobrancaAutomatica, DataReferencia, NumIntDoc,ValorOutrasDespesas,Placa,PlacaUF,VolumeQuant,VolumeEspecie,VolumeMarca,PesoLiq,PesoBruto,VolumeNumero,FreteRespons,ValorProdutos, CodTranspRedesp, DetPagFrete, DataEntrega, PedidoRepresentante, OBS, Andamento, ValorDescontoTit, ValorDescontoItens, ValorItens FROM PedidosDeVenda WHERE FilialEmpresa = ? AND Codigo = ? ", 0, tPedidoVenda.iFilialEmpresaFaturamento, tPedidoVenda.lCliente, tPedidoVenda.iFilial, tPedidoVenda.iFilialEntrega, tPedidoVenda.iCodTransportadora, tPedidoVenda.iCondicaoPagto, _
        tPedidoVenda.dPercAcrescFinanceiro, tPedidoVenda.dtDataEmissao, tPedidoVenda.sMensagemNota, tPedidoVenda.sNaturezaOp, tPedidoVenda.dValorTotal, tPedidoVenda.dValorFrete, tPedidoVenda.dValorDesconto, tPedidoVenda.dValorSeguro, tPedidoVenda.sPedidoCliente, tPedidoVenda.iCanalVenda, tPedidoVenda.iTabelaPreco, tPedidoVenda.iProxSeqBloqueio, tPedidoVenda.iFaturaIntegral, tPedidoVenda.iComissaoAutomatica, tPedidoVenda.iCobrancaAutomatica, tPedidoVenda.dtDataReferencia, tPedidoVenda.lNumIntDoc, tPedidoVenda.dValorOutrasDespesas, tPedidoVenda.sPlaca, tPedidoVenda.sPlacaUF, tPedidoVenda.lVolumeQuant, tPedidoVenda.lVolumeEspecie, tPedidoVenda.lVolumeMarca, tPedidoVenda.dPesoLiq, tPedidoVenda.dPesoBruto, tPedidoVenda.sVolumeNumero, tPedidoVenda.iFreteRespons, tPedidoVenda.dValorProdutos, tPedidoVenda.iCodTranspRedesp, tPedidoVenda.iDetPagFrete, tPedidoVenda.dtDataEntrega, tPedidoVenda.sPedidoRepresentante, tPedidoVenda.sObs, tPedidoVenda.iAndamento, _
        tPedidoVenda.dValorDescontoTit, tPedidoVenda.dValorDescontoItens, tPedidoVenda.dValorItens, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 51355

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51356

    If lErro = AD_SQL_SEM_DADOS Then Error 51357

    objPedidoVenda.iFilialEmpresaFaturamento = tPedidoVenda.iFilialEmpresaFaturamento
    objPedidoVenda.lCliente = tPedidoVenda.lCliente
    objPedidoVenda.iFilial = tPedidoVenda.iFilial
    objPedidoVenda.iFilialEntrega = tPedidoVenda.iFilialEntrega
    objPedidoVenda.iCodTransportadora = tPedidoVenda.iCodTransportadora
    objPedidoVenda.iCodTranspRedesp = tPedidoVenda.iCodTranspRedesp
    objPedidoVenda.iDetPagFrete = tPedidoVenda.iDetPagFrete
    objPedidoVenda.dtDataEntrega = tPedidoVenda.dtDataEntrega
    objPedidoVenda.iCondicaoPagto = tPedidoVenda.iCondicaoPagto
    objPedidoVenda.dPercAcrescFinanceiro = tPedidoVenda.dPercAcrescFinanceiro
    objPedidoVenda.dtDataEmissao = tPedidoVenda.dtDataEmissao
    objPedidoVenda.sMensagemNota = tPedidoVenda.sMensagemNota
    objPedidoVenda.sNaturezaOp = tPedidoVenda.sNaturezaOp
    objPedidoVenda.dValorTotal = tPedidoVenda.dValorTotal
    objPedidoVenda.dValorFrete = tPedidoVenda.dValorFrete
    objPedidoVenda.dValorDesconto = tPedidoVenda.dValorDesconto
    objPedidoVenda.dValorOutrasDespesas = tPedidoVenda.dValorOutrasDespesas
    objPedidoVenda.dValorSeguro = tPedidoVenda.dValorSeguro
    objPedidoVenda.sPedidoCliente = tPedidoVenda.sPedidoCliente
    objPedidoVenda.iCanalVenda = tPedidoVenda.iCanalVenda
    objPedidoVenda.iTabelaPreco = tPedidoVenda.iTabelaPreco
    objPedidoVenda.iProxSeqBloqueio = tPedidoVenda.iProxSeqBloqueio
    objPedidoVenda.iFaturaIntegral = tPedidoVenda.iFaturaIntegral
    objPedidoVenda.iComissaoAutomatica = tPedidoVenda.iComissaoAutomatica
    objPedidoVenda.iCobrancaAutomatica = tPedidoVenda.iCobrancaAutomatica
    objPedidoVenda.dtDataReferencia = tPedidoVenda.dtDataReferencia
    objPedidoVenda.sPlaca = tPedidoVenda.sPlaca
    objPedidoVenda.sPlacaUF = tPedidoVenda.sPlacaUF
    objPedidoVenda.lVolumeQuant = tPedidoVenda.lVolumeQuant
    objPedidoVenda.lVolumeEspecie = tPedidoVenda.lVolumeEspecie
    objPedidoVenda.lVolumeMarca = tPedidoVenda.lVolumeMarca
    objPedidoVenda.dPesoLiq = tPedidoVenda.dPesoLiq
    objPedidoVenda.dPesoBruto = tPedidoVenda.dPesoBruto
    objPedidoVenda.sVolumeNumero = tPedidoVenda.sVolumeNumero
    objPedidoVenda.iFreteRespons = tPedidoVenda.iFreteRespons
    objPedidoVenda.dValorProdutos = tPedidoVenda.dValorProdutos
    objPedidoVenda.lNumIntDoc = tPedidoVenda.lNumIntDoc
    objPedidoVenda.sPedidoRepresentante = tPedidoVenda.sPedidoRepresentante
    objPedidoVenda.sObs = tPedidoVenda.sObs
    objPedidoVenda.iAndamento = tPedidoVenda.iAndamento
    objPedidoVenda.dValorDescontoTit = tPedidoVenda.dValorDescontoTit
    objPedidoVenda.dValorDescontoItens = tPedidoVenda.dValorDescontoItens
    objPedidoVenda.dValorItens = tPedidoVenda.dValorItens

    lErro = CF("PV_Le_Customizado", objPedidoVenda)
    If lErro <> SUCESSO Then Error 40311
    
    PedidoDeVenda_Le_Mod = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_Mod:

    PedidoDeVenda_Le_Mod = Err

    Select Case Err

        Case 51355, 51356
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", Err, objPedidoVenda.lCodigo)

        Case 51357, 40311 'Tratado na rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150159)

    End Select

    Exit Function

End Function

Function BaixaPedidos_ObterPedidos(ByVal objBaixaPedido As ClassBaixaPedidos) As Long
'Preenche a colecao colPVInfo em objBaixaPedido com os pedidos que podem ser faturados e atendem
'aos criterios passados em objBaixaPedido com restricoes de No. de pedido, data de emissao,...

Dim lErro As Long, sSelect As String
Dim lComando As Long

Dim vdtItensPedidoDeVendaDataEntrega As Variant, vsClientesNomeReduzido As Variant, vlPedidosDeVendaCodigo As Variant, vlPedidosDeVendaCliente As Variant
Dim viPedidosDeVendaFilial As Variant, vdtPedidosDeVendaDataEmissao As Variant, vdPedidosDeVendaValorTotal As Variant

On Error GoTo Erro_BaixaPedidos_ObterPedidos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27190

    'Montar SELECT dos pedidos de venda dinamicamente
    Call BaixaPedidos_ObterPedidos1(objBaixaPedido, sSelect)

    vsClientesNomeReduzido = String(255, 0)
    vdtItensPedidoDeVendaDataEntrega = DATA_NULA
    vlPedidosDeVendaCodigo = CLng(0)
    vlPedidosDeVendaCliente = CLng(0)
    viPedidosDeVendaFilial = CInt(0)
    vdtPedidosDeVendaDataEmissao = DATA_NULA
    vdPedidosDeVendaValorTotal = CDbl(0)
    
    'Preparar parte fixa do SELECT
    lErro = CF("BaixaPedidos_ObterPedidos2", lComando, sSelect, vdtItensPedidoDeVendaDataEntrega, vsClientesNomeReduzido, vlPedidosDeVendaCodigo, vlPedidosDeVendaCliente, viPedidosDeVendaFilial, vdtPedidosDeVendaDataEmissao, vdPedidosDeVendaValorTotal)
    If lErro <> SUCESSO Then Error 27191

    'Complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    lErro = CF("BaixaPedidos_ObterPedidos3", lComando, objBaixaPedido)
    If lErro <> SUCESSO Then Error 27192

    'Processar os registros lidos
    lErro = CF("BaixaPedidos_ObterPedidos4", lComando, objBaixaPedido, vdtItensPedidoDeVendaDataEntrega, vsClientesNomeReduzido, vlPedidosDeVendaCodigo, vlPedidosDeVendaCliente, viPedidosDeVendaFilial, vdtPedidosDeVendaDataEmissao, vdPedidosDeVendaValorTotal)
    If lErro <> SUCESSO And lErro <> 27163 Then Error 27193
    
    'Se não encontrou nenhum Pedido ---> Erro
    If lErro = 27163 Then Error 58166
    
    lErro = Comando_Fechar(lComando)

    BaixaPedidos_ObterPedidos = SUCESSO

    Exit Function

Erro_BaixaPedidos_ObterPedidos:

    BaixaPedidos_ObterPedidos = Err

    Select Case Err

        Case 27191 To 27193

        Case 27190
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58166 'Tratado na Rotina Chamadora (Sem pedidos na Selecao)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150160)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Sub BaixaPedidos_ObterPedidos1(ByVal objBaixaPedido As ClassBaixaPedidos, sSelect As String)
'Montar SELECT dinamicamente

Dim sFields As String, sFrom As String, sWhere As String, sOrderBy As String, sGroupBy As String, sHaving As String

    sFields = "MIN(ItensPedidoDeVenda.DataEntrega), MIN(Clientes.NomeReduzido), PedidosDeVenda.Codigo, MIN(PedidosDeVenda.Cliente), MIN(PedidosDeVenda.Filial), MIN(PedidosDeVenda.DataEmissao), MIN(PedidosDeVenda.ValorTotal)"
    sFrom = " FROM PedidosDeVenda, Clientes, ItensPedidoDeVenda, FiliaisClientes"
    sWhere = " WHERE PedidosDeVenda.FilialEmpresa = ? AND PedidosDeVenda.Cliente = Clientes.Codigo AND PedidosDeVenda.Cliente = FiliaisClientes.CodCliente AND PedidosDeVenda.Filial = FiliaisClientes.CodFilial AND PedidosDeVenda.FilialEmpresa=ItensPedidoDeVenda.FilialEmpresa AND " & _
        "PedidosDeVenda.Codigo=ItensPedidoDeVenda.CodPedido "
    sOrderBy = " ORDER BY " & objBaixaPedido.sOrdenacao
    sGroupBy = " GROUP BY " & "PedidosDeVenda.Codigo"
    sHaving = ""

    If objBaixaPedido.lPedidosDe <> 0 Then sWhere = sWhere & " AND PedidosDeVenda.Codigo >= ?"

    If objBaixaPedido.lPedidosAte <> 0 Then sWhere = sWhere & " AND PedidosDeVenda.Codigo <= ?"

    If objBaixaPedido.lClientesDe <> 0 Then sWhere = sWhere & " AND PedidosDeVenda.Cliente >= ?"

    If objBaixaPedido.lClientesAte <> 0 Then sWhere = sWhere & " AND PedidosDeVenda.Cliente <= ?"

    If objBaixaPedido.dtEmissaoDe <> DATA_NULA Then sWhere = sWhere & " AND PedidosDeVenda.DataEmissao >= ?"

    If objBaixaPedido.dtEmissaoAte <> DATA_NULA Then sWhere = sWhere & " AND PedidosDeVenda.DataEmissao <= ?"

    If objBaixaPedido.dtEntregaDe <> DATA_NULA Then sHaving = " HAVING MIN(ItensPedidoDeVenda.DataEntrega) >= ?"

    If objBaixaPedido.dtEntregaAte <> DATA_NULA Then
        If sHaving = "" Then
            sHaving = " HAVING "
        Else
            sHaving = sHaving & " AND "
        End If

        sHaving = sHaving & "MIN(ItensPedidoDeVenda.DataEntrega) <= ?"
    End If

    sSelect = "SELECT " & sFields & sFrom & sWhere & sGroupBy & sHaving & sOrderBy

End Sub

Function BaixaPedidos_ObterPedidos2(ByVal lComando As Long, ByVal sSelect As String, vItensPedidoDeVendaDataEntrega As Variant, vClientesNomeReduzido As Variant, vPedidosDeVendaCodigo As Variant, vPedidosDeVendaCliente As Variant, vPedidosDeVendaFilial As Variant, vPedidosDeVendaDataEmissao As Variant, vPedidosDeVendaValorTotal As Variant) As Long
'Preparar parte fixa do SELECT

Dim lErro As Long

On Error GoTo Erro_BaixaPedidos_ObterPedidos2
    
    lErro = Comando_PrepararInt(lComando, sSelect)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27175

    lErro = Comando_BindVarInt(lComando, vItensPedidoDeVendaDataEntrega)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27176

    lErro = Comando_BindVarInt(lComando, vClientesNomeReduzido)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27177

    lErro = Comando_BindVarInt(lComando, vPedidosDeVendaCodigo)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27179

    lErro = Comando_BindVarInt(lComando, vPedidosDeVendaCliente)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27180

    lErro = Comando_BindVarInt(lComando, vPedidosDeVendaFilial)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27181

    lErro = Comando_BindVarInt(lComando, vPedidosDeVendaDataEmissao)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27182
    
    lErro = Comando_BindVarInt(lComando, vPedidosDeVendaValorTotal)
    If (lErro <> AD_SQL_SUCESSO) Then Error 31388

    BaixaPedidos_ObterPedidos2 = SUCESSO

    Exit Function

Erro_BaixaPedidos_ObterPedidos2:

    BaixaPedidos_ObterPedidos2 = Err

    Select Case Err

        Case 27175 To 27182, 31388
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOS_VENDA_BAIXA_PV", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150161)

    End Select

    Exit Function

End Function

Function BaixaPedidos_ObterPedidos3(ByVal lComando As Long, ByVal objBaixaPedido As ClassBaixaPedidos) As Long
'Filtra por giFilialEmpresa
'Complementa a passagem dos parametros que variam de acordo com a selecao do usuario

Dim lErro As Long
Dim vFilialEmpresa As Variant, vlPedidosDe As Variant, vlPedidosAte As Variant, vlClientesDe As Variant, vlClientesAte As Variant, viFilialPedidoDe As Variant, viFilialPedidoAte As Variant, vdtEmissaoDe As Variant, vdtEmissaoAte As Variant, vdtEntregaDe As Variant, vdtEntregaAte As Variant

On Error GoTo Erro_BaixaPedidos_ObterPedidos3

    vFilialEmpresa = giFilialEmpresa
    lErro = Comando_BindVarInt(lComando, vFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then Error 25641

    If objBaixaPedido.lPedidosDe <> 0 Then
        vlPedidosDe = objBaixaPedido.lPedidosDe
        lErro = Comando_BindVarInt(lComando, vlPedidosDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27166
    End If

    If objBaixaPedido.lPedidosAte <> 0 Then
        vlPedidosAte = objBaixaPedido.lPedidosAte
        lErro = Comando_BindVarInt(lComando, vlPedidosAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27167
    End If

    If objBaixaPedido.lClientesDe <> 0 Then
        vlClientesDe = objBaixaPedido.lClientesDe
        lErro = Comando_BindVarInt(lComando, vlClientesDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27168
    End If

    If objBaixaPedido.lClientesAte <> 0 Then
        vlClientesAte = objBaixaPedido.lClientesAte
        lErro = Comando_BindVarInt(lComando, vlClientesAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27169
    End If

    If objBaixaPedido.dtEmissaoDe <> DATA_NULA Then
        vdtEmissaoDe = objBaixaPedido.dtEmissaoDe
        lErro = Comando_BindVarInt(lComando, vdtEmissaoDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27170
    End If

    If objBaixaPedido.dtEmissaoAte <> DATA_NULA Then
        vdtEmissaoAte = objBaixaPedido.dtEmissaoAte
        lErro = Comando_BindVarInt(lComando, vdtEmissaoAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27171
    End If

    If objBaixaPedido.dtEntregaDe <> DATA_NULA Then
        vdtEntregaDe = objBaixaPedido.dtEntregaDe
        lErro = Comando_BindVarInt(lComando, vdtEntregaDe)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27172
    End If

    If objBaixaPedido.dtEntregaAte <> DATA_NULA Then
        vdtEntregaAte = objBaixaPedido.dtEntregaAte
        lErro = Comando_BindVarInt(lComando, vdtEntregaAte)
        If (lErro <> AD_SQL_SUCESSO) Then Error 27173
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then Error 27174

    BaixaPedidos_ObterPedidos3 = SUCESSO

    Exit Function

Erro_BaixaPedidos_ObterPedidos3:

    BaixaPedidos_ObterPedidos3 = Err

    Select Case Err

        Case 25641, 26803, 26804, 27166 To 27174
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOS_VENDA_BAIXA_PV", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150162)

    End Select

    Exit Function

End Function

Function BaixaPedidos_ObterPedidos4(ByVal lComando As Long, ByVal objBaixaPedido As ClassBaixaPedidos, vdtItensPedidoDeVendaDataEntrega As Variant, vsClientesNomeReduzido As Variant, vlPedidosDeVendaCodigo As Variant, vlPedidosDeVendaCliente As Variant, viPedidosDeVendaFilial As Variant, vdtPedidosDeVendaDataEmissao As Variant, vdPedidosDeVendaValorTotal As Variant) As Long
'Processar os registros lidos preenchendo a colecao

Dim lErro As Long, objPVInfo As ClassPVInfo

On Error GoTo Erro_BaixaPedidos_ObterPedidos4

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27162

    If lErro = AD_SQL_SEM_DADOS Then Error 27163

    Do While lErro = AD_SQL_SUCESSO

        Set objPVInfo = New ClassPVInfo

        objPVInfo.lCodPedido = vlPedidosDeVendaCodigo
        objPVInfo.lCliente = vlPedidosDeVendaCliente
        objPVInfo.sClienteNomeReduzido = vsClientesNomeReduzido
        objPVInfo.iFilialCliente = viPedidosDeVendaFilial
        objPVInfo.dtEmissao = vdtPedidosDeVendaDataEmissao
        objPVInfo.dtEntrega = vdtItensPedidoDeVendaDataEntrega
        objPVInfo.iMarcada = MARCADO
        objPVInfo.dValorTotal = vdPedidosDeVendaValorTotal
    
        objBaixaPedido.colPVInfo.Add objPVInfo

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27164

    Loop

    BaixaPedidos_ObterPedidos4 = SUCESSO

    Exit Function

Erro_BaixaPedidos_ObterPedidos4:

    BaixaPedidos_ObterPedidos4 = Err

    Select Case Err
        
        Case 27162, 27164
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOS_VENDA_GERACAO_NF", Err)

        Case 27163
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SEM_PEDIDOS_VENDA_ENCONTRADOS", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150163)

    End Select

    Exit Function

End Function

Function TabelaPrecoPadrao_Le(ByVal objProdutoFilial As ClassProdutoFilial, ByVal dtDataFinal As Date, ByVal dPrecoTabela As Double) As Long
'Lê último preço da tabela padrão vigente para par produto-filialEmpresa até a DataFinal

Dim lErro As Long
Dim lComando As Long
Dim iTabelaPadrao As Integer
Dim objProduto As New ClassProduto

On Error GoTo Erro_TabelaPrecoPadrao_Le
    
    iTabelaPadrao = 0
    
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 25783

    'Tenta ler ProdutoFilial no BD
    lErro = CF("ProdutoFilial_Le", objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 28261 Then Error 25784
    
    'Caso ProdutoFilial não esteja cadastrado
    If lErro = 28261 Then Error 25785
    
    If objProdutoFilial.iTabelaPreco > 0 Then
    
        iTabelaPadrao = objProdutoFilial.iTabelaPreco
    
    Else 'Não tem tabela de preço padrão para FilialEmpresa
        
        'Muda FilialEmpresa para EMPRESA_TODA
        objProdutoFilial.iFilialEmpresa = EMPRESA_TODA
        
        'Tenta ler o Produto
        objProduto.sCodigo = objProdutoFilial.sProduto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 25786
    
        'Caso Produto não esteja cadastrado
        If lErro = 28030 Then Error 25787
    
        iTabelaPadrao = objProduto.iTabelaPreco
    
    End If
    
    If iTabelaPadrao = 0 Then Error 25788
    
    'Lê preço na tabela de preço padrão
    lErro = Comando_Executar(lComando, "SELECT Preco FROM TabelasDePrecoItens WHERE CodTabela = ? AND FilialEmpresa = ? AND CodProduto = ? AND DataVigencia <= ? ORDER BY DataVigencia DESC", dPrecoTabela, iTabelaPadrao, objProdutoFilial.iFilialEmpresa, objProdutoFilial.sProduto, dtDataFinal)
    If lErro <> AD_SQL_SUCESSO Then Error 25789

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25790

    'Se não encontrou o registro em TabelaPrecoItens --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 25791

    'Fecha o comando
    Call Comando_Fechar(lComando)

    TabelaPrecoPadrao_Le = SUCESSO

    Exit Function

Erro_TabelaPrecoPadrao_Le:

    TabelaPrecoPadrao_Le = Err

    Select Case Err

        Case 25783
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 25784, 25786  'tratado na rotina chamada
        
        Case 25785
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILIAL_NAO_CADASTRADO", Err, objProdutoFilial.sProduto, objProdutoFilial.iFilialEmpresa)
        
        Case 25787
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", Err, objProduto.sCodigo)
        
        Case 25788 'Não tem tabela padrão associada.
             'A ser tratado na rotina chamadora.
        
        Case 25789, 25790
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS2", Err, objProdutoFilial.iFilialEmpresa, iTabelaPadrao, objProdutoFilial.sProduto)
        
        Case 25791 'Não encontrou TabelaPrecoItem na tabela padrão com Data Vigencia anterior a DataFinal
            'A ser tratado na rotina chamadora.
 
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150164)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Function UsuariosFilialEmpresa_Le_Todos(ByVal colUsuarios As Collection) As Long
'Le todos os usuários desta Filial Empresa na tabela de UsuarioFilialEmpresa e coloca os dados em colUsuarios

Dim lComando As Long
Dim lErro As Long
Dim tUsuarios As typeUsuarios
Dim objUsuarios As ClassUsuarios
    
On Error GoTo Erro_UsuariosFilialEmpresa_Le_Todos

    lComando = 0

    lComando = Comando_AbrirExt(GL_lConexaoDic)
    If lComando = 0 Then Error 58209

    tUsuarios.sCodUsuario = String(STRING_SIGLA_USUARIO, 0)
    tUsuarios.sNome = String(STRING_USUARIO_NOME, 0)
    tUsuarios.sNomeReduzido = String(STRING_USUARIO_NOMEREDUZIDO, 0)

    lErro = Comando_Executar(lComando, "SELECT CodUsuario, Nome, NomeReduzido FROM UsuarioFilialEmpresa WHERE Ativo=? AND CodEmpresa = ? AND CodFilial = ? ", tUsuarios.sCodUsuario, tUsuarios.sNome, tUsuarios.sNomeReduzido, USUARIO_ATIVO, glEmpresa, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 58210
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58211
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objUsuarios = New ClassUsuarios
        
        objUsuarios.sCodUsuario = tUsuarios.sCodUsuario
        objUsuarios.sNome = tUsuarios.sNome
        objUsuarios.sNomeReduzido = tUsuarios.sNomeReduzido
        
        colUsuarios.Add objUsuarios
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58212
            
    Loop
            
    Call Comando_Fechar(lComando)
    
    UsuariosFilialEmpresa_Le_Todos = SUCESSO
    
    Exit Function
    
Erro_UsuariosFilialEmpresa_Le_Todos:

    UsuariosFilialEmpresa_Le_Todos = Err

    Select Case Err
    
        Case 58209
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58210, 58211, 58212
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_USUARIOFILIALEMPRESA_DIC", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150165)
        
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LiberacoesCredito_Filial_Le(ByVal colUsuarios As Collection, ByVal colLiberacaoCredito As Collection) As Long
'Guarda em colLiberacaoCredito todas as alçadas cadastradas
'Para os Usuarios passados na coleção de Usuarios

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String
Dim objUsuario As ClassUsuarios
Dim objLiberacaoCredito As ClassLiberacaoCredito
Dim dLimiteOperacao As Double
Dim dLimiteMensal As Double

On Error GoTo Erro_LiberacoesCredito_Filial_Le
    
    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58245
    
    'Para cada Usuario da Coleção
    For Each objUsuario In colUsuarios
    
        sCodigo = String(STRING_CODUSUARIO, 0)
        
        'Lê a Alcada do Usuario
        lErro = Comando_Executar(lComando, "SELECT CodUsuario, LimiteMensal, LimiteOperacao FROM LiberacaoCredito WHERE CodUsuario = ? ", sCodigo, dLimiteMensal, dLimiteOperacao, objUsuario.sCodUsuario)
        If lErro <> AD_SQL_SUCESSO Then Error 58246

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58247
        
        If lErro = AD_SQL_SUCESSO Then

            'Guarda na coleção os nomes dos usuarios que têm alçadas
            Set objLiberacaoCredito = New ClassLiberacaoCredito

            objLiberacaoCredito.sCodUsuario = sCodigo
            objLiberacaoCredito.dLimiteMensal = dLimiteMensal
            objLiberacaoCredito.dLimiteOperacao = dLimiteOperacao
        
            colLiberacaoCredito.Add objLiberacaoCredito

        End If
            
    Next
    
    Call Comando_Fechar(lComando)
    
    LiberacoesCredito_Filial_Le = SUCESSO

    Exit Function

Erro_LiberacoesCredito_Filial_Le:

    LiberacoesCredito_Filial_Le = Err

    Select Case Err

        Case 58245
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58246, 58247, 58248
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150166)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Usuarios_Com_LiberacaoCredito_Le(ByVal colTodosUsuarios As Collection, ByVal dValorLiberacao As Double, ByVal colUsuariosComLiberacao As Collection) As Long
'Monta uma colecao de Usuarios que tenham Liberacao de Crédito por Operacao maior que o passado
'E que nao tenham ultrapassados o LImite de Credito Mensal
'Para os Usuarios passados na coleção de Usuarios

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String
Dim objUsuario As ClassUsuarios
Dim objValorLiberado As New ClassValorLiberadoCredito
Dim dValorLiberacaoMensal As Double
Dim objUsuarioComLiberacao As ClassUsuarios

On Error GoTo Erro_Usuarios_Com_LiberacaoCredito_Le
    
    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58245
    
    'Para cada Usuario da Coleção
    For Each objUsuario In colTodosUsuarios
            
        objValorLiberado.sCodUsuario = objUsuario.sCodUsuario
        objValorLiberado.iAno = Year(gdtDataAtual)
        
        'Le o Valor Mensal que Usuario já Liberou
        lErro = CF("ValorLiberadoCredito_Le", objValorLiberado)
        If lErro <> SUCESSO And lErro <> 36973 Then Error 58582
        
        'Atualiza o Valor que Usuario já liberou com o valor desta operacao
        dValorLiberacaoMensal = objValorLiberado.adValorLiberado(Month(gdtDataAtual)) + dValorLiberacao
                
        sCodigo = String(STRING_CODUSUARIO, 0)
        
        'Lê os Usuario que tenham Alçada por Operacao e Mensal para esta Operacao
        lErro = Comando_Executar(lComando, "SELECT CodUsuario FROM LiberacaoCredito WHERE CodUsuario = ? AND LimiteOperacao >= ? And LimiteMensal >= ? ", sCodigo, objUsuario.sCodUsuario, dValorLiberacao, dValorLiberacaoMensal)
        If lErro <> AD_SQL_SUCESSO Then Error 58246

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58247
        
        If lErro = AD_SQL_SUCESSO Then

            'Guarda na coleção os nomes dos usuarios que têm alçadas
            Set objUsuarioComLiberacao = New ClassUsuarios

            objUsuarioComLiberacao.sCodUsuario = sCodigo
            
            'Adiciona na Colecao
            colUsuariosComLiberacao.Add objUsuarioComLiberacao

        End If
            
    Next
    
    Call Comando_Fechar(lComando)
    
    Usuarios_Com_LiberacaoCredito_Le = SUCESSO

    Exit Function

Erro_Usuarios_Com_LiberacaoCredito_Le:

    Usuarios_Com_LiberacaoCredito_Le = Err

    Select Case Err

        Case 58245
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58246, 58247, 58248
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err)
        
        Case 58582
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150167)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function NotaFiscalPedido_Le_ItemPV(ByVal lCodigoPedido As Long, ByVal colItemPedidoNF As Collection) As Long
'Lê todas as Notas Fiscais com relação ao Pedido passado e Ordena por ItemPedido

Dim lErro As Long
Dim lComando As Long
Dim tItemPedidoNF As typeItemPedidoNF
Dim objItemPedidoNF As ClassItemPedidoNF

On Error GoTo Erro_NotaFiscalPedido_Le_ItemPV
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60317

    tItemPedidoNF.sProduto = String(STRING_BUFFER_MAX_TEXTO, 0)
    tItemPedidoNF.sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    tItemPedidoNF.sUMItemNF = String(STRING_UM_SIGLA, 0)
    tItemPedidoNF.sUMItemPV = String(STRING_BUFFER_MAX_TEXTO, 0)
    tItemPedidoNF.sSerie = String(STRING_SERIE, 0)
    
    lErro = Comando_Executar(lComando, "SELECT ItensPedidoDeVendaTodos.Produto, ItensPedidoDeVendaTodos.Descricao, ItensNFiscal.UnidadeMed, ItensPedidoDeVendaTodos.UnidadeMed, ItensPedidoDeVendaTodos.QuantFaturada, NFiscal.NumNotaFiscal, ItensPedidoDeVendaTodos.ClasseUM, ItensNFiscal.Item, ItensNFiscal.Quantidade, ItensNFiscal.PrecoUnitario, ItensNFiscal.PercDesc, ItensNFiscal.ValorDesconto, NFiscal.ValorTotal, ItensPedidoDeVendaTodos.NumIntDoc, NFiscal.Serie, NFiscal.DataEmissao FROM ItensPedidoDeVendaTodos, ItensNFiscal, NFiscal WHERE ItensPedidoDeVendaTodos.CodPedido = ? AND ItensPedidoDeVendaTodos.FilialEmpresa = ? AND ItensPedidoDeVendaTodos.NumIntDoc = ItensNFiscal.NumIntItemPedVenda AND ItensNFiscal.NumIntNF = NFiscal.NumIntDoc ORDER BY ItensPedidoDeVendaTodos.NumIntDoc", _
    tItemPedidoNF.sProduto, tItemPedidoNF.sDescricao, tItemPedidoNF.sUMItemNF, tItemPedidoNF.sUMItemPV, tItemPedidoNF.dQuantFaturada, tItemPedidoNF.lNumNF, tItemPedidoNF.iClasseUM, tItemPedidoNF.iItemNF, tItemPedidoNF.dQuantidade, tItemPedidoNF.dPrecoUnitario, tItemPedidoNF.dPercDesconto, tItemPedidoNF.dValorDesconto, tItemPedidoNF.dPrecoTotal, tItemPedidoNF.lNumIntDoc, tItemPedidoNF.sSerie, tItemPedidoNF.dtDataEmissao, lCodigoPedido, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60318

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60319
    
    Do While lErro = AD_SQL_SUCESSO
        
        Set objItemPedidoNF = New ClassItemPedidoNF
        
        'Passa para o objeto
        objItemPedidoNF.sProduto = tItemPedidoNF.sProduto
        objItemPedidoNF.sDescricao = tItemPedidoNF.sDescricao
        objItemPedidoNF.sUMItemNF = tItemPedidoNF.sUMItemNF
        objItemPedidoNF.sUMItemPV = tItemPedidoNF.sUMItemPV
        objItemPedidoNF.dQuantFaturada = tItemPedidoNF.dQuantFaturada
        objItemPedidoNF.lNumNF = tItemPedidoNF.lNumNF
        objItemPedidoNF.iClasseUM = tItemPedidoNF.iClasseUM
        objItemPedidoNF.iItemNF = tItemPedidoNF.iItemNF
        objItemPedidoNF.dQuantidade = tItemPedidoNF.dQuantidade
        objItemPedidoNF.dPrecoUnitario = tItemPedidoNF.dPrecoUnitario
        objItemPedidoNF.dPercDesconto = tItemPedidoNF.dPercDesconto
        objItemPedidoNF.dValorDesconto = tItemPedidoNF.dValorDesconto
        objItemPedidoNF.dPrecoTotal = tItemPedidoNF.dPrecoTotal
        objItemPedidoNF.lCodPedido = lCodigoPedido
        objItemPedidoNF.iFilialEmpresa = giFilialEmpresa
        objItemPedidoNF.lNumIntDoc = tItemPedidoNF.lNumIntDoc
        objItemPedidoNF.sSerie = tItemPedidoNF.sSerie
        objItemPedidoNF.dtDataEmissao = tItemPedidoNF.dtDataEmissao
        
        'Adiciona na coleção
        colItemPedidoNF.Add objItemPedidoNF
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60320
    
    Loop
    
    lErro = Comando_Fechar(lComando)
    
    NotaFiscalPedido_Le_ItemPV = SUCESSO
    
    Exit Function
    
Erro_NotaFiscalPedido_Le_ItemPV:
    
    NotaFiscalPedido_Le_ItemPV = Err
    
    Select Case Err
        
        Case 60317
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
                
        Case 60318, 60319, 60320
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150168)

    End Select

    lErro = Comando_Fechar(lComando)

    Exit Function
            
End Function

Function NotaFiscalPedido_Le_Nota(ByVal lCodigoPedido As Long, ByVal colItemPedidoNF As Collection) As Long
'Lê todas as Notas Fiscais com relação ao Pedido passado e Ordena por NotaFiscal

Dim lErro As Long
Dim lComando As Long
Dim tItemPedidoNF As typeItemPedidoNF
Dim objItemPedidoNF As ClassItemPedidoNF

On Error GoTo Erro_NotaFiscalPedido_Le_Nota
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60321

    tItemPedidoNF.sProduto = String(STRING_BUFFER_MAX_TEXTO, 0)
    tItemPedidoNF.sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    tItemPedidoNF.sUMItemNF = String(STRING_UM_SIGLA, 0)
    tItemPedidoNF.sUMItemPV = String(STRING_BUFFER_MAX_TEXTO, 0)
    tItemPedidoNF.sSerie = String(STRING_SERIE, 0)

    lErro = Comando_Executar(lComando, "SELECT ItensPedidoDeVendaTodos.Produto, Produtos.Descricao, ItensNFiscal.UnidadeMed, ItensPedidoDeVendaTodos.UnidadeMed, ItensPedidoDeVendaTodos.QuantFaturada, NFiscal.NumNotaFiscal, ItensPedidoDeVendaTodos.ClasseUM, ItensNFiscal.Item, ItensNFiscal.Quantidade, ItensNFiscal.PrecoUnitario, ItensNFiscal.PercDesc, ItensNFiscal.ValorDesconto, NFiscal.ValorTotal, ItensPedidoDeVendaTodos.NumIntDoc, NFiscal.Serie, NFiscal.DataEmissao FROM ItensPedidoDeVendaTodos, ItensNFiscal, NFiscal, Produtos WHERE ItensPedidoDeVendaTodos.CodPedido = ? AND ItensPedidoDeVendaTodos.FilialEmpresa = ? AND ItensPedidoDeVendaTodos.NumIntDoc =  ItensNFiscal.NumIntItemPedVenda AND ItensNFiscal.NumIntNF = NFiscal.NumIntDoc AND ItensPedidoDeVendaTodos.Produto = Produtos.Codigo ORDER BY NFiscal.Serie, NFiscal.NumNotaFiscal, ItensNFiscal.Item", _
    tItemPedidoNF.sProduto, tItemPedidoNF.sDescricao, tItemPedidoNF.sUMItemNF, tItemPedidoNF.sUMItemPV, tItemPedidoNF.dQuantFaturada, tItemPedidoNF.lNumNF, tItemPedidoNF.iClasseUM, tItemPedidoNF.iItemNF, tItemPedidoNF.dQuantidade, tItemPedidoNF.dPrecoUnitario, tItemPedidoNF.dPercDesconto, tItemPedidoNF.dValorDesconto, tItemPedidoNF.dPrecoTotal, tItemPedidoNF.lNumIntDoc, tItemPedidoNF.sSerie, tItemPedidoNF.dtDataEmissao, lCodigoPedido, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60322

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60323
    
    Do While lErro = AD_SQL_SUCESSO
        
        Set objItemPedidoNF = New ClassItemPedidoNF

        'Passa para o objeto
        objItemPedidoNF.sProduto = tItemPedidoNF.sProduto
        objItemPedidoNF.sDescricao = tItemPedidoNF.sDescricao
        objItemPedidoNF.sUMItemNF = tItemPedidoNF.sUMItemNF
        objItemPedidoNF.sUMItemPV = tItemPedidoNF.sUMItemPV
        objItemPedidoNF.dQuantFaturada = tItemPedidoNF.dQuantFaturada
        objItemPedidoNF.lNumNF = tItemPedidoNF.lNumNF
        objItemPedidoNF.iClasseUM = tItemPedidoNF.iClasseUM
        objItemPedidoNF.iItemNF = tItemPedidoNF.iItemNF
        objItemPedidoNF.dQuantidade = tItemPedidoNF.dQuantidade
        objItemPedidoNF.dPrecoUnitario = tItemPedidoNF.dPrecoUnitario
        objItemPedidoNF.dPercDesconto = tItemPedidoNF.dPercDesconto
        objItemPedidoNF.dValorDesconto = tItemPedidoNF.dValorDesconto
        objItemPedidoNF.dPrecoTotal = tItemPedidoNF.dPrecoTotal
        objItemPedidoNF.lCodPedido = lCodigoPedido
        objItemPedidoNF.iFilialEmpresa = giFilialEmpresa
        objItemPedidoNF.lNumIntDoc = tItemPedidoNF.lNumIntDoc
        objItemPedidoNF.sSerie = tItemPedidoNF.sSerie
        objItemPedidoNF.dtDataEmissao = tItemPedidoNF.dtDataEmissao
        
        'Adiciona na coleção
        colItemPedidoNF.Add objItemPedidoNF
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60324
    
    Loop
    
    lErro = Comando_Fechar(lComando)
    
    NotaFiscalPedido_Le_Nota = SUCESSO
    
    Exit Function
    
Erro_NotaFiscalPedido_Le_Nota:
    
    NotaFiscalPedido_Le_Nota = Err
    
    Select Case Err
    
        Case 60321
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60322, 60323, 60324
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150169)

    End Select

    lErro = Comando_Fechar(lComando)
    
    Exit Function
            
End Function

Function ItensPedido_Le_Inclusive_Baixados(ByVal objPedidoVenda As ClassPedidoDeVenda, Optional ByVal iFiltroStatus As Integer = 0, Optional ByVal bLeTributacao As Boolean = False) As Long
'Lê no BD a coleção de ítens do Pedido de Venda e devolve em colItensPedido dentro de objPedidoVenda

Dim lErro As Long
Dim tItemPedido As typeItemPedido
Dim objItemPedido As ClassItemPedido
Dim lComando As Long
Dim sSQL As String
Dim sTabela As String

On Error GoTo Erro_ItensPedido_Le_Inclusive_Baixados

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 60325
    
    If objPedidoVenda.iFilialEmpresa = 0 Then objPedidoVenda.iFilialEmpresa = giFilialEmpresa
    
    Select Case iFiltroStatus
        Case STATUS_ABERTO
            sTabela = "ItensPedidoDeVenda"
        Case STATUS_BAIXADO
            sTabela = "ItensPedidoDeVendaBaixados"
        Case Else
            sTabela = "ItensPedidoDeVendaTodos"
    End Select
    sSQL = "SELECT I.NumIntDoc, I.Produto, P.Descricao, P.NomeReduzido, P.SiglaUMEstoque, P.ControleEstoque FROM " & sTabela & " AS I, Produtos AS P WHERE I.Produto = P.Codigo AND I.FilialEmpresa = ? AND I.CodPedido = ? ORDER BY I.NumIntDoc"

    tItemPedido.sProduto = String(STRING_PRODUTO, 0)
    tItemPedido.sProdutoDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    tItemPedido.sProdutoNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
    tItemPedido.sUMEstoque = String(STRING_UM_SIGLA_UM_BASE, 0)
    
    lErro = Comando_Executar(lComando, sSQL, tItemPedido.lNumIntDoc, tItemPedido.sProduto, tItemPedido.sProdutoDescricao, tItemPedido.sProdutoNomeReduzido, tItemPedido.sUMEstoque, tItemPedido.iControleEstoque, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 60326

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60327

    If lErro = AD_SQL_SEM_DADOS Then gError 60330
   
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objItemPedido = New ClassItemPedido
        
        objItemPedido.lNumIntDoc = tItemPedido.lNumIntDoc
        objItemPedido.sProduto = tItemPedido.sProduto
        objItemPedido.sProdutoDescricao = tItemPedido.sProdutoDescricao
        objItemPedido.sProdutoNomeReduzido = tItemPedido.sProdutoNomeReduzido
        objItemPedido.sUMEstoque = tItemPedido.sUMEstoque
        objItemPedido.iControleEstoque = tItemPedido.iControleEstoque
        objItemPedido.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
        objItemPedido.lCodPedido = objPedidoVenda.lCodigo
        
        lErro = CF("ItemPedido_Le", objItemPedido)
        If lErro <> SUCESSO And lErro <> 23971 Then gError 177040
        If lErro <> SUCESSO Then
            lErro = CF("ItemPedidoBaixado_Le", objItemPedido)
            If lErro <> SUCESSO And lErro <> 178818 Then gError 177040
        End If
        
        lErro = CF("ItensPVGrade_Le", objItemPedido)
        If lErro <> SUCESSO Then gError 177040
        
        objItemPedido.objInfoAdicDocItem.iTipoDoc = TIPODOC_INFOADIC_ITEMPV
        objItemPedido.objInfoAdicDocItem.lNumIntDocItem = objItemPedido.lNumIntDoc
        lErro = CF("InfoAdicDocItem_Le", objItemPedido.objInfoAdicDocItem)
        If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 177040
        
        If bLeTributacao Then
            
            objItemPedido.objTributacao.iTipoDoc = TIPODOC_TRIB_PV
            objItemPedido.objTributacao.lNumIntDocItem = objItemPedido.lNumIntDoc
            lErro = CF("TributacaoDocItem_Le", objItemPedido.objTributacao)
            If lErro <> SUCESSO Then gError 177040
            
            '???? Jones 09/09/12 objPedidoVenda.objTributacao.colItens.Add objItemPedido.objTributacao
            
        End If
        
        objPedidoVenda.colItensPedido.AddObj objItemPedido
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60331
    Loop
    
    lErro = CF("PVItens_Le_Customizado", objPedidoVenda)
    If lErro <> SUCESSO Then gError 177040
        
    'Tratamento feito somente para exibir o antigo campo de desconto global na tela em forma de desconto nos itens
    If objPedidoVenda.dValorDesconto > 0 Then
        objPedidoVenda.dValorDesconto = 0
        For Each objItemPedido In objPedidoVenda.colItensPedido
            objItemPedido.dValorDesconto = objItemPedido.dValorDesconto + objItemPedido.objTributacao.dValorDescontoItem
            objItemPedido.dPrecoTotal = objItemPedido.dPrecoTotal - objItemPedido.objTributacao.dValorDescontoItem
            objItemPedido.objTributacao.dValorDescontoItem = 0
        Next
    End If

    Call Comando_Fechar(lComando)

    ItensPedido_Le_Inclusive_Baixados = SUCESSO

    Exit Function

Erro_ItensPedido_Le_Inclusive_Baixados:

    ItensPedido_Le_Inclusive_Baixados = gErr

    Select Case gErr

        Case 60325
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 60326, 60327, 60331
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA2", gErr, objPedidoVenda.lCodigo)

        Case 60328, 60329
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDABAIXADOS1", gErr)
        
        Case 60330
            Call Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_SEM_ITENS", gErr, objPedidoVenda.lCodigo)
        
        Case 177040
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150170)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ComissoesPV_Baixadas_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê as Comissões Baixadas associadas ao Pedido de Venda passado e objPedidoVenda.

'*** Alterada em 05/03/02 por Luiz Nogueira ***
'*** ClassPedidoDeVenda teve o tipo de ColComissoes alterado, por isso foi necessário adicionar
'os dados lidos a um obj e depois adicionar o obj à coleção ***

'Alterada por Tulio, incluir leitura do campo DiretoIndireto

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tComissaoPV As typeComissaoPedVenda, tComissaoPorItem As typeComissaoPorItem
Dim objComissaoPV As ClassComissaoPedVendas
Dim objComissaoPorItem As ClassComissaoPorItem

On Error GoTo Erro_ComissoesPV_Baixadas_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60332
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60332
    
    lErro = Comando_Executar(lComando, "SELECT CodVendedor, ValorBase, Percentual, Valor, PercentualEmissao, ValorEmissao, Indireta, Seq FROM ComissoesPedVendasBaixados WHERE FilialEmpresa = ? AND PedidoDeVendas = ? ORDER BY Seq", tComissaoPV.iCodVendedor, tComissaoPV.dValorBase, tComissaoPV.dPercentual, tComissaoPV.dValor, tComissaoPV.dPercentualEmissao, tComissaoPV.dValorEmissao, tComissaoPV.iIndireta, tComissaoPV.iSeq, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60333
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60334
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Instancia um novo objComissaoPV
        Set objComissaoPV = New ClassComissaoPedVendas
        
        'Transfere os dados lidos para o obj
        With tComissaoPV
            
            objComissaoPV.iCodVendedor = .iCodVendedor
            objComissaoPV.dValorBase = .dValorBase
            objComissaoPV.dPercentual = .dPercentual
            objComissaoPV.dValor = .dValor
            objComissaoPV.dPercentualEmissao = .dPercentualEmissao
            objComissaoPV.dValorEmissao = .dValorEmissao
            objComissaoPV.iIndireta = .iIndireta
            objComissaoPV.iSeq = .iSeq

        End With
    
        'Adiciona o obj à coleção
        objPedidoVenda.colComissoes.Add objComissaoPV

        With tComissaoPorItem
            lErro = Comando_Executar(lComando1, "SELECT ValorBase, Percentual, Valor, Linha, PercentualEmissao, ValorEmissao FROM ComissoesPorItem WHERE SeqComissao = ? AND TipoDoc = ? AND NumIntDocItem IN (SELECT I.NumIntDoc FROM ItensPVTodos I, PedVenTodos P WHERE I.FilialEmpresa = P.FilialEmpresa AND I.CodPedido = P.Codigo AND P.FilialEmpresa = ? AND P.Codigo = ?) ORDER BY Linha", _
                .dValorBase, .dPercentual, .dValor, .iLinha, .dPercentualEmissao, .dValorEmissao, objComissaoPV.iSeq, TIPO_PV, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
        End With
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60333
        
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60334
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objComissaoPorItem = New ClassComissaoPorItem
            
            With objComissaoPorItem
            
                .iSeqComissao = objComissaoPV.iSeq
                .dValorBase = tComissaoPorItem.dValorBase
                .dPercentual = tComissaoPorItem.dPercentual
                .dValor = tComissaoPorItem.dValor
                .iLinha = tComissaoPorItem.iLinha
                .dPercentualEmissao = tComissaoPorItem.dPercentualEmissao
                .dValorEmissao = tComissaoPorItem.dValorEmissao
            
            End With
            
            objComissaoPV.colLinhas.Add objComissaoPorItem
            
            lErro = Comando_BuscarProximo(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60335
        
        Loop
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60335
        
    Loop
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    ComissoesPV_Baixadas_Le = SUCESSO
    
    Exit Function
    
Erro_ComissoesPV_Baixadas_Le:

    ComissoesPV_Baixadas_Le = Err
    
    Select Case Err
    
        Case 60332
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60333, 60334, 60335
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESPEDVENDAS", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150171)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
 
End Function

Function BloqueiosPV_Baixados_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê os Bloqueios Baixados associados ao objPedidoVenda

Dim lErro As Long
Dim lComando As Long
Dim tBloqueioPV As typeBloqueioPV

On Error GoTo Erro_BloqueiosPV_Baixados_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60336
    
    tBloqueioPV.sCodUsuario = String(STRING_BLOQUEIOSPV_COD_USUARIO, 0)
    tBloqueioPV.sCodUsuarioLib = String(STRING_BLOQUEIOSPV_COD_USUARIO, 0)
    tBloqueioPV.sResponsavel = String(STRING_BLOQUEIOSPV_RESPONSAVEL, 0)
    tBloqueioPV.sResponsavelLib = String(STRING_BLOQUEIOSPV_RESPONSAVEL, 0)
    tBloqueioPV.sObservacao = String(STRING_BLOQUEIOSPV_OBSERVACAO, 0)

    lErro = Comando_Executar(lComando, "SELECT Sequencial, TipoDeBloqueio, CodUsuario, Responsavel, Data, CodUsuarioLib, ResponsavelLib, DataLib, Observacao FROM BloqueiosPVBaixados WHERE FilialEmpresa = ? AND PedidoDeVenda = ? ORDER BY Sequencial", tBloqueioPV.iSequencial, tBloqueioPV.iTipoDeBloqueio, tBloqueioPV.sCodUsuario, tBloqueioPV.sResponsavel, tBloqueioPV.dtData, tBloqueioPV.sCodUsuarioLib, tBloqueioPV.sResponsavelLib, tBloqueioPV.dtDataLib, tBloqueioPV.sObservacao, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 60337
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60338
       
    Do While lErro <> AD_SQL_SEM_DADOS
    
        With tBloqueioPV
            objPedidoVenda.colBloqueiosPV.Add objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, .iSequencial, .iTipoDeBloqueio, .sCodUsuario, .sResponsavel, .dtData, .sCodUsuarioLib, .sResponsavelLib, .dtDataLib, .sObservacao
        End With
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60339
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    BloqueiosPV_Baixados_Le = SUCESSO
    
    Exit Function

Erro_BloqueiosPV_Baixados_Le:

    BloqueiosPV_Baixados_Le = Err
    
    Select Case Err
    
        Case 60336
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 60337, 60338, 60339
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV_BLOQUEIOSPVBAIXADOS", Err)
               
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150172)
            
    End Select
    
    Call Comando_Fechar(lComando)
        
    Exit Function
    
End Function

Function PedidoDeVenda_Le_ItensBaixados_ComTributacao(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

Dim lErro As Long
Dim objItemPedido As ClassItemPedido

On Error GoTo Erro_PedidoDeVenda_Le_ItensBaixados_ComTributacao

    lErro = CF("ItensPedido_Le_Inclusive_Baixados", objPedidoVenda, STATUS_BAIXADO, True)
    If lErro <> SUCESSO Then gError 86352
        
    PedidoDeVenda_Le_ItensBaixados_ComTributacao = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Le_ItensBaixados_ComTributacao:

    PedidoDeVenda_Le_ItensBaixados_ComTributacao = gErr

    Select Case gErr

        Case 86352
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150173)

    End Select

    Exit Function

End Function

Function ParcelasPV_Baixados_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê as parcelas associadas ao objPedidoVenda Baixados

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPV As typeParcelaPedidoVenda
Dim objParcPV As ClassParcelaPedidoVenda

On Error GoTo Erro_ParcelasPV_Baixados_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60344
    
    tParcelaPV.sAgenciaCheque = String(STRING_AGENCIA, 0)
    tParcelaPV.sAprovacaoCartao = String(STRING_APROVACAO_CARTAO, 0)
    tParcelaPV.sContaCorrenteCheque = String(STRING_CONTA_CORRENTE, 0)
    tParcelaPV.sNumeroCartao = String(STRING_NUMERO_CARTAO, 0)

    'Seleciona Parcelas vinculadas ao Pedido de Venda Baixados
    lErro = Comando_Executar(lComando, "SELECT NumParcela, DataVencimento, Valor, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao FROM ParcelasPedidoDeVendaBaixado WHERE PedidodeVenda = ? AND FilialEmpresa = ? ORDER BY DataVencimento", _
    tParcelaPV.iNumParcela, tParcelaPV.dtDataVencimento, tParcelaPV.dValor, tParcelaPV.iDesconto1Codigo, tParcelaPV.dtDesconto1Ate, tParcelaPV.dDesconto1Valor, tParcelaPV.iDesconto2Codigo, tParcelaPV.dtDesconto2Ate, tParcelaPV.dDesconto2Valor, tParcelaPV.iDesconto3Codigo, tParcelaPV.dtDesconto3Ate, tParcelaPV.dDesconto3Valor, _
    tParcelaPV.iTipoPagto, tParcelaPV.iCodConta, tParcelaPV.dtDataCredito, tParcelaPV.dtDataEmissaoCheque, tParcelaPV.iBancoCheque, tParcelaPV.sAgenciaCheque, tParcelaPV.sContaCorrenteCheque, tParcelaPV.lNumeroCheque, tParcelaPV.dtDataDepositoCheque, tParcelaPV.iAdmMeioPagto, tParcelaPV.iParcelamento, tParcelaPV.sNumeroCartao, tParcelaPV.dtValidadeCartao, tParcelaPV.sAprovacaoCartao, tParcelaPV.dtDataTransacaoCartao, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60345

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60346

    Do While lErro <> AD_SQL_SEM_DADOS

        With tParcelaPV
            Set objParcPV = objPedidoVenda.colParcelas.Add(.dValor, .dtDataVencimento, .iNumParcela, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .dtDesconto3Ate, .dDesconto3Valor, .iDesconto3Codigo)
            
            objParcPV.iTipoPagto = .iTipoPagto
            objParcPV.iCodConta = .iCodConta
            objParcPV.dtDataCredito = .dtDataCredito
            objParcPV.dtDataEmissaoCheque = .dtDataEmissaoCheque
            objParcPV.iBancoCheque = .iBancoCheque
            objParcPV.sAgenciaCheque = .sAgenciaCheque
            objParcPV.sContaCorrenteCheque = .sContaCorrenteCheque
            objParcPV.lNumeroCheque = .lNumeroCheque
            objParcPV.dtDataDepositoCheque = .dtDataDepositoCheque
            objParcPV.iAdmMeioPagto = .iAdmMeioPagto
            objParcPV.iParcelamento = .iParcelamento
            objParcPV.sNumeroCartao = .sNumeroCartao
            objParcPV.dtValidadeCartao = .dtValidadeCartao
            objParcPV.sAprovacaoCartao = .sAprovacaoCartao
            objParcPV.dtDataTransacaoCartao = .dtDataTransacaoCartao
            
        End With

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60347

    Loop

    Call Comando_Fechar(lComando)

    ParcelasPV_Baixados_Le = SUCESSO

    Exit Function

Erro_ParcelasPV_Baixados_Le:

    ParcelasPV_Baixados_Le = Err

    Select Case Err

        Case 60344
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60345, 60346, 60347
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPEDIDODEVENDA_BAIXADAS", Err, objPedidoVenda.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150174)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscal_Le_Pedido_TipoDocInfo(ByVal objNFiscal As ClassNFiscal, sTela As String) As Long
'Lê a Nota Fiscal com o Número, Serie, DataEmissao, NumPedidoVenda e FilialPedido e Retorna a Tela pelo Tipo doc Info

Dim lErro As Long
Dim lComando As Long
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NFiscal_Le_Pedido_TipoDocInfo

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60219

    With tNFiscal

        .sMensagemNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sMensagemCorpoNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
        .sPlaca = String(STRING_NFISCAL_PLACA, 0)
        .sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
        .sSerie = String(STRING_SERIE, 0)
        .sNumPedidoTerc = String(STRING_NUM_PEDIDO_TERC, 0)
        .sVolumeNumero = String(STRING_NFISCAL_VOLUME_NUMERO, 0)
        sTela = String(STRING_NOME_TELA, 0)
        
        'Pesquisa a Nota Fiscal com o Número, Serie, DataEmissao, NumPedidoVenda e FilialPedido
        lErro = Comando_Executar(lComando, "SELECT NFiscal.TipoNFiscal,Status, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEntrada, DataSaida, DataVencimento,DataReferencia, NumIntDoc, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal,VolumeNumero,FreteRespons, TiposDocInfo.NomeTelaNFiscal, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota FROM NFiscal, TiposDocInfo WHERE NumPedidoVenda = ? AND FilialPedido = ? AND Status <> ? AND FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal =? AND DataEmissao = ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo ORDER BY DataEmissao DESC", .iTipoNFiscal, .iStatus, _
            .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumIntDoc, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, sTela, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, objNFiscal.lNumPedidoVenda, objNFiscal.iFilialPedido, STATUS_EXCLUIDO, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
        If lErro <> AD_SQL_SUCESSO Then Error 60220

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60221
        
        'Se não encontrar
        If lErro = AD_SQL_SEM_DADOS Then Error 60222

        'Preenche objNFiscal com os dados lidos
        objNFiscal.dPesoBruto = .dPesoBruto
        objNFiscal.dPesoLiq = .dPesoLiq
        objNFiscal.dtDataEntrada = .dtDataEntrada
        objNFiscal.dtDataSaida = .dtDataSaida
        objNFiscal.dtDataVencimento = .dtDataVencimento
        objNFiscal.dValorDesconto = .dValorDesconto
        objNFiscal.dValorFrete = .dValorFrete
        objNFiscal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscal.dValorProdutos = .dValorProdutos
        objNFiscal.dValorSeguro = .dValorSeguro
        objNFiscal.dValorTotal = .dValorTotal
        objNFiscal.iCanal = .iCanal
        objNFiscal.iClasseDocCPR = .iClasseDocCPR
        objNFiscal.iCodTransportadora = .iCodTransportadora
        objNFiscal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscal.iDetPagFrete = .iDetPagFrete
        objNFiscal.iSemDataSaida = .iSemDataSaida
        objNFiscal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscal.iFilialCli = .iFilialCli
        objNFiscal.iFilialEntrega = .iFilialEntrega
        objNFiscal.iFilialForn = .iFilialForn
        objNFiscal.iStatus = .iStatus
        objNFiscal.iTabelaPreco = .iTabelaPreco
        objNFiscal.iTipoNFiscal = .iTipoNFiscal
        objNFiscal.lVolumeQuant = .lVolumeQuant
        objNFiscal.lCliente = .lCliente
        objNFiscal.lFornecedor = .lFornecedor
        objNFiscal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscal.lNumIntTrib = .lNumIntTrib
        objNFiscal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscal.lNumIntDoc = .lNumIntDoc
        objNFiscal.sMensagemNota = .sMensagemNota
        objNFiscal.sNaturezaOp = .sNaturezaOp
        objNFiscal.sPlaca = .sPlaca
        objNFiscal.sPlacaUF = .sPlacaUF
        objNFiscal.lVolumeEspecie = .lVolumeEspecie
        objNFiscal.lVolumeMarca = .lVolumeMarca
        objNFiscal.sVolumeNumero = .sVolumeNumero
        objNFiscal.dtDataReferencia = .dtDataReferencia
        objNFiscal.sMensagemCorpoNota = .sMensagemCorpoNota
        
    End With

    'Fecha o comando
    Call Comando_Fechar(lComando)

    NFiscal_Le_Pedido_TipoDocInfo = SUCESSO

    Exit Function

Erro_NFiscal_Le_Pedido_TipoDocInfo:

    NFiscal_Le_Pedido_TipoDocInfo = Err

    Select Case Err

        Case 60219
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60220, 60221
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)

        Case 60222 'Tratado pela rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150175)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PedidoDeVenda_Le_Todos_Completo(ByVal objPedidoDeVenda As ClassPedidoDeVenda, iStatus As Integer, Optional ByVal bExibeErroNaoCad As Boolean = True) As Long
'Le o Pedido Inclusive se ele estiver Baixado

Dim lErro As Long

On Error GoTo Erro_PedidoDeVenda_Le_Todos_Completo
    
    'Lê o Pedido de Venda
    lErro = CF("PedidoDeVenda_Le", objPedidoDeVenda)
    If lErro <> SUCESSO And lErro <> 26509 Then gError 60302
        
    If lErro = SUCESSO Then iStatus = STATUS_ABERTO
    
    'Se não encontrar
    If lErro = 26509 Then
        
        'Procura em Pedido de Venda Baixados
        lErro = CF("PedidoVendaBaixado_Le", objPedidoDeVenda)
        If lErro <> SUCESSO And lErro <> 46135 Then gError 60303
                    
        If lErro = SUCESSO Then iStatus = STATUS_BAIXADO
        
        'Se não encontrou ---> ERRO
        If lErro <> SUCESSO Then gError 60304
        
    End If
    
    If iStatus = STATUS_BAIXADO Then
    'BAIXADOS
        
        'Le a Tributação do Pedido
        lErro = PedidoDeVenda_Baixado_Le_Tributacao(objPedidoDeVenda)
        If lErro <> SUCESSO And lErro <> 27611 Then gError 64102
        
        'Le as Parcelas do Pedido Baixado
        lErro = CF("ParcelasPV_Baixados_Le", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60305
        
        'Le as comissoes do Pedido Baixado
        lErro = CF("ComissoesPV_Baixadas_Le", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60306
            
        'Le os Bloqueios do Pedido Baixado
        lErro = CF("BloqueiosPV_Baixados_Le", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60307
        
'        'Está Função vai sair quando entrar a Tributacao Item Baixado
'        lErro = CF("ItensPedido_Le_Inclusive_Baixados",objPedidoDeVenda)
'        If lErro <> SUCESSO Then gError 60308
        
        'Le os Itens Baixados e a Tributacao (Mudar esta Funcao Mais Tarde)
        lErro = CF("PedidoDeVenda_Le_ItensBaixados_ComTributacao", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60309
        
    ElseIf iStatus = STATUS_ABERTO Then
    'NAO BAIXADO
        
        'Le a Tributação do Pedido
        lErro = CF("PedidoDeVenda_Le_Tributacao", objPedidoDeVenda)
        If lErro <> SUCESSO And lErro <> 27611 Then gError 60310
                       
        'Le as Parcelas do Pedido
        lErro = CF("ParcelasPV_Le", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60311
        
        'Le as Comissoes do Pedido
        lErro = CF("ComissoesPV_Le", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60312
        
        'Le os Bloqueios do Pedido
        lErro = CF("BloqueiosPV_Le", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60313
        
        'Le os Itens e a Tributacao
        lErro = CF("PedidoDeVenda_Le_Itens_ComTributacao", objPedidoDeVenda)
        If lErro <> SUCESSO Then gError 60314
                
    End If
    
    'Lê o Pedido de Venda
    lErro = CF("ItensPVEntrega_Le", objPedidoDeVenda)
    If lErro <> SUCESSO And lErro <> 26509 Then gError 183198
    
    objPedidoDeVenda.objInfoAdic.iTipoDoc = TIPODOC_INFOADIC_PV
    objPedidoDeVenda.objInfoAdic.lNumIntDoc = objPedidoDeVenda.lNumIntDoc
    lErro = CF("InfoAdicionais_Le", objPedidoDeVenda.objInfoAdic)
    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 183198
    
    PedidoDeVenda_Le_Todos_Completo = SUCESSO
    
    Exit Function
    
Erro_PedidoDeVenda_Le_Todos_Completo:

    PedidoDeVenda_Le_Todos_Completo = gErr
    
    Select Case gErr
        
        'Retirado o tratamento do Erro 60304 por Daniel
        Case 60302, 60303, 60305, 60306, 60307, 60308, 60309, 60310, 60311, 60312, 60313, 60314, 64102, 183198
        
        Case 60304
            If bExibeErroNaoCad Then Call Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO", gErr, objPedidoDeVenda.lCodigo)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150176)
    
    End Select
        
End Function

Function PedidoDeVenda_Le_Todos(ByVal objPedidoDeVenda As ClassPedidoDeVenda) As Long
'Le o Pedido Inclusive se ele estiver Baixado

Dim lErro As Long

On Error GoTo Erro_PedidoDeVenda_Le_Todos
    
    'Lê o Pedido de Venda
    lErro = CF("PedidoDeVenda_Le", objPedidoDeVenda)
    If lErro <> SUCESSO And lErro <> 26509 Then gError ERRO_SEM_MENSAGEM
    
    'Se não encontrar
    If lErro <> SUCESSO Then
        
        'Procura em Pedido de Venda Baixados
        lErro = CF("PedidoVendaBaixado_Le", objPedidoDeVenda)
        If lErro <> SUCESSO And lErro <> 46135 Then gError ERRO_SEM_MENSAGEM
                    
        If lErro <> SUCESSO Then gError ERRO_LEITURA_SEM_DADOS
        
    End If
    
    PedidoDeVenda_Le_Todos = SUCESSO
    
    Exit Function
    
Erro_PedidoDeVenda_Le_Todos:

    PedidoDeVenda_Le_Todos = gErr
    
    Select Case gErr
        
        Case ERRO_SEM_MENSAGEM
        
        Case ERRO_LEITURA_SEM_DADOS
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150176)
    
    End Select
        
End Function

Function TipoDocInfo_Le_NomeTela_NFiscal(ByVal objNFiscal As ClassNFiscal, sTela As String) As Long
'Lê o Nome da Tela Nota Fiscal com a Série e o Número passado em objNFiscal.

Dim lErro As Long
Dim lComando As Long
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_TipoDocInfo_Le_NomeTela_NFiscal

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58177

    sTela = String(STRING_NOME_TELA, 0)
    
    'Pesquisa o Nome da Tela com a Série e o Número passado
    lErro = Comando_Executar(lComando, "SELECT TiposDocInfo.NomeTelaNFiscal, NFiscal.NumIntDoc, NFiscal.DataEmissao FROM NFiscal, TiposDocInfo WHERE NFiscal.Serie = ? AND NFiscal.NumNotaFiscal = ? AND NFiscal.FilialEmpresa = ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo ORDER BY NFiscal.DataEmissao DESC ", sTela, tNFiscal.lNumIntDoc, tNFiscal.dtDataEmissao, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 58178

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58179
    
    'Se não encontrar
    If lErro = AD_SQL_SEM_DADOS Then Error 58180
    
    objNFiscal.lNumIntDoc = tNFiscal.lNumIntDoc
    objNFiscal.dtDataEmissao = tNFiscal.dtDataEmissao
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    TipoDocInfo_Le_NomeTela_NFiscal = SUCESSO

    Exit Function

Erro_TipoDocInfo_Le_NomeTela_NFiscal:

    TipoDocInfo_Le_NomeTela_NFiscal = Err

    Select Case Err

        Case 58177
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58178, 58179
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDOCINFO", Err)

        Case 58180 'Tratado pela rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150177)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NF_NFFatura_Le_NumeroSerie(ByVal objNFiscal As ClassNFiscal) As Long
'Lê a Nota Fiscal com o Número, Série e Filial passados em objNFiscal.

Dim lErro As Long
Dim lComando As Long
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NF_NFFatura_Le_NumeroSerie

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58321

    With tNFiscal

        .sMensagemNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sMensagemCorpoNota = String(STRING_NFISCAL_MENSAGEM, 0)
        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
        .sPlaca = String(STRING_NFISCAL_PLACA, 0)
        .sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
        .sNumPedidoTerc = String(STRING_NUM_PEDIDO_TERC, 0)

        'Pesquisa a Nota Fiscal com o Número, Série e Filial
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, FilialPedido, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota FROM NF_NFFatura WHERE FilialEmpresa = ? AND Serie = ? AND Status <> ? AND NumNotaFiscal = ?", _
            .lNumIntDoc, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .iFilialPedido, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, giFilialEmpresa, objNFiscal.sSerie, STATUS_EXCLUIDO, objNFiscal.lNumNotaFiscal)
        If lErro <> AD_SQL_SUCESSO Then Error 58322

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58323
        
        'Se não encontrar a Nota Fiscal --> Erro
        If lErro = AD_SQL_SEM_DADOS Then Error 58324

        'Preenche objNFiscal com os dados lidos
        objNFiscal.lNumIntDoc = .lNumIntDoc
        objNFiscal.lCliente = .lCliente
        objNFiscal.iFilialCli = .iFilialCli
        objNFiscal.iFilialEntrega = .iFilialEntrega
        objNFiscal.lFornecedor = .lFornecedor
        objNFiscal.iFilialForn = .iFilialForn
        objNFiscal.dtDataEmissao = .dtDataEmissao
        objNFiscal.dtDataEntrada = .dtDataEntrada
        objNFiscal.dtDataSaida = .dtDataSaida
        objNFiscal.dtDataVencimento = .dtDataVencimento
        objNFiscal.iFilialPedido = .iFilialPedido
        objNFiscal.lNumPedidoVenda = .lNumPedidoVenda
        objNFiscal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscal.iClasseDocCPR = .iClasseDocCPR
        objNFiscal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscal.dValorTotal = .dValorTotal
        objNFiscal.dValorProdutos = .dValorProdutos
        objNFiscal.dValorFrete = .dValorFrete
        objNFiscal.dValorSeguro = .dValorSeguro
        objNFiscal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscal.dValorDesconto = .dValorDesconto
        objNFiscal.iCodTransportadora = .iCodTransportadora
        objNFiscal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscal.iDetPagFrete = .iDetPagFrete
        objNFiscal.iSemDataSaida = .iSemDataSaida
        objNFiscal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscal.sMensagemNota = .sMensagemNota
        objNFiscal.iTabelaPreco = .iTabelaPreco
        objNFiscal.iTipoNFiscal = .iTipoNFiscal
        objNFiscal.sNaturezaOp = .sNaturezaOp
        objNFiscal.dPesoLiq = .dPesoLiq
        objNFiscal.dPesoBruto = .dPesoBruto
        objNFiscal.lNumIntTrib = .lNumIntTrib
        objNFiscal.sPlaca = .sPlaca
        objNFiscal.sPlacaUF = .sPlacaUF
        objNFiscal.lVolumeQuant = .lVolumeQuant
        objNFiscal.lVolumeEspecie = .lVolumeEspecie
        objNFiscal.lVolumeMarca = .lVolumeMarca
        objNFiscal.iCanal = .iCanal
        objNFiscal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscal.sMensagemCorpoNota = .sMensagemCorpoNota
        
    End With

    'Fecha o comando
    Call Comando_Fechar(lComando)

    NF_NFFatura_Le_NumeroSerie = SUCESSO

    Exit Function

Erro_NF_NFFatura_Le_NumeroSerie:

    NF_NFFatura_Le_NumeroSerie = Err

    Select Case Err

        Case 58321
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58322, 58323
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL5", Err, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 58324 'Sem dados, Tratado na Rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150178)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PedidoDeVenda_Baixado_Le_Tributacao(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

'Dim lComando As Long, tTributacaoPV As typeTributacaoPV, objTributacaoPV As New ClassTributacaoPV
Dim lErro As Long

On Error GoTo Erro_PedidoDeVenda_Baixado_Le_Tributacao

'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 64091
'
'    'ler tributacaopv
'    lErro = Comando_Executar(lComando, "SELECT TaxacaoAutomatica, TipoTributacao, TipoTributacaoManual, IPIBase, IPIBaseManual, IPIValor, IPIValorManual, ICMSBase, ICMSBaseManual, ICMSValor, ICMSValorManual, ICMSSubstBase, ICMSSubstBaseManual, ICMSSubstValor, ICMSSubstValorManual, ISSIncluso, ISSBase, ISSAliquota, ISSAliquotaManual, ISSValor, ISSValorManual, IRRFBase, IRRFAliquota, IRRFAliquotaManual, IRRFValor, IRRFValorManual, PISRetidoManual, ISSRetidoManual, COFINSRetidoManual, CSLLRetidoManual, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM TributacaoPVBaixado WHERE FilialEmpresa = ? AND CodPedido = ?", _
'        tTributacaoPV.iTaxacaoAutomatica, tTributacaoPV.iTipoTributacao, tTributacaoPV.iTipoTributacaoManual, tTributacaoPV.dIPIBase, tTributacaoPV.iIPIBaseManual, tTributacaoPV.dIPIValor, tTributacaoPV.iIPIValorManual, tTributacaoPV.dICMSBase, tTributacaoPV.iICMSBaseManual, tTributacaoPV.dICMSValor, tTributacaoPV.iICMSValorManual, tTributacaoPV.dICMSSubstBase, tTributacaoPV.iICMSSubstBaseManual, tTributacaoPV.dICMSSubstValor, tTributacaoPV.iICMSSubstValorManual, tTributacaoPV.iISSIncluso, _
'        tTributacaoPV.dISSBase, tTributacaoPV.dISSAliquota, tTributacaoPV.iISSAliquotaManual, tTributacaoPV.dISSValor, tTributacaoPV.iISSValorManual, tTributacaoPV.dIRRFBase, tTributacaoPV.dIRRFAliquota, tTributacaoPV.iIRRFAliquotaManual, tTributacaoPV.dIRRFValor, tTributacaoPV.iIRRFValorManual, tTributacaoPV.iPISRetidoManual, tTributacaoPV.iISSRetidoManual, tTributacaoPV.iCOFINSRetidoManual, tTributacaoPV.iCSLLRetidoManual, tTributacaoPV.dPISRetido, tTributacaoPV.dISSRetido, tTributacaoPV.dCOFINSRetido, tTributacaoPV.dCSLLRetido, _
'        objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
'    If lErro <> AD_SQL_SUCESSO Then Error 64092
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64093
'
'    If lErro = AD_SQL_SEM_DADOS Then Error 64094
'
'    objPedidoVenda.iNaturezaOpManual = VAR_PREENCH_MANUAL
'    objTributacaoPV.lCodPedido = objPedidoVenda.lCodigo
'    objTributacaoPV.iFilialEmpresa = giFilialEmpresa
'
'    'transferir dados lidos p/objeto
'    With objTributacaoPV
'
'        .iTaxacaoAutomatica = tTributacaoPV.iTaxacaoAutomatica
'        .iTipoTributacao = tTributacaoPV.iTipoTributacao
'        .iTipoTributacaoManual = tTributacaoPV.iTipoTributacaoManual
'        .dIPIBase = tTributacaoPV.dIPIBase
'        .iIPIBaseManual = tTributacaoPV.iIPIBaseManual
'        .dIPIValor = tTributacaoPV.dIPIValor
'        .iIPIValorManual = tTributacaoPV.iIPIValorManual
'        .dICMSBase = tTributacaoPV.dICMSBase
'        .iICMSBaseManual = tTributacaoPV.iICMSBaseManual
'        .dICMSValor = tTributacaoPV.dICMSValor
'        .iICMSValorManual = tTributacaoPV.iICMSValorManual
'        .dICMSSubstBase = tTributacaoPV.dICMSSubstBase
'        .iICMSSubstBaseManual = tTributacaoPV.iICMSSubstBaseManual
'        .dICMSSubstValor = tTributacaoPV.dICMSSubstValor
'        .iICMSSubstValorManual = tTributacaoPV.iICMSSubstValorManual
'        .iISSIncluso = tTributacaoPV.iISSIncluso
'        .dISSBase = tTributacaoPV.dISSBase
'        .dISSAliquota = tTributacaoPV.dISSAliquota
'        .iISSAliquotaManual = tTributacaoPV.iISSAliquotaManual
'        .dISSValor = tTributacaoPV.dISSValor
'        .iISSValorManual = tTributacaoPV.iISSValorManual
'        .dIRRFBase = tTributacaoPV.dIRRFBase
'        .dIRRFAliquota = tTributacaoPV.dIRRFAliquota
'        .iIRRFAliquotaManual = tTributacaoPV.iIRRFAliquotaManual
'        .dIRRFValor = tTributacaoPV.dIRRFValor
'        .iIRRFValorManual = tTributacaoPV.iIRRFValorManual
'        .dPISRetido = tTributacaoPV.dPISRetido
'        .iPISRetidoManual = tTributacaoPV.iPISRetidoManual
'        .dISSRetido = tTributacaoPV.dISSRetido
'        .iISSRetidoManual = tTributacaoPV.iISSRetidoManual
'        .dCOFINSRetido = tTributacaoPV.dCOFINSRetido
'        .iCOFINSRetidoManual = tTributacaoPV.iCOFINSRetidoManual
'        .dCSLLRetido = tTributacaoPV.dCSLLRetido
'        .iCSLLRetidoManual = tTributacaoPV.iCSLLRetidoManual
'    End With
'
'    Set objPedidoVenda.objTributacaoPV = objTributacaoPV
'
'    lErro = PedidoDeVenda_Le_ComplementosBaixados(objPedidoVenda)
'    If lErro <> SUCESSO Then Error 64095
'
'    Call Comando_Fechar(lComando)

    objPedidoVenda.objTributacao.iTipoDoc = TIPODOC_TRIB_PV
    objPedidoVenda.objTributacao.lNumIntDoc = objPedidoVenda.lNumIntDoc

    lErro = CF("TributacaoDoc_Le", objPedidoVenda.objTributacao)
    If lErro <> SUCESSO Then gError 64094

    PedidoDeVenda_Baixado_Le_Tributacao = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Baixado_Le_Tributacao:

    PedidoDeVenda_Baixado_Le_Tributacao = Err

    Select Case Err

'        Case 64091
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 64092, 64093, 64095
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDODEVENDA", Err)
        
        Case 64094
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150179)

    End Select

'    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Private Function PedidoDeVenda_Le_ComplementosBaixados(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'
'Dim lComando As Long, objTributacaoPV As ClassTributacaoPV
'Dim tTributacaoComplPV As typeTributacaoComplPV, objTributacaoItemPV As ClassTributacaoItemPV
'Dim lErro As Long
'
'On Error GoTo Erro_PedidoDeVenda_Le_ComplementosBaixados
'
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 64096
'
'    Set objTributacaoPV = objPedidoVenda.objTributacaoPV
'
'    tTributacaoComplPV.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
'
'    'ler dados de frete, seguro, despesas, descontos da tabela TributacaoComplPV
'    lErro = Comando_Executar(lComando, "SELECT Item, NaturezaOp, NaturezaOpManual, TipoTributacao, TipoTributacaoManual, IPITipo, IPITipoManual, IPIBaseCalculo, IPIBaseManual, IPIPercRedBase, IPIPercRedBaseManual, IPIAliquota, " & _
'        "IPIAliquotaManual, IPIValor, IPIValorManual, ICMSTipo, ICMSTipoManual, ICMSBase, ICMSBaseManual, ICMSPercRedBase, ICMSPercRedBaseManual, ICMSAliquota, ICMSAliquotaManual, ICMSValor, ICMSValorManual, ICMSSubstBase, ICMSSubstBaseManual, " & _
'        "ICMSSubstAliquota, ICMSSubstAliquotaManual, ICMSSubstValor, ICMSSubstValorManual, ICMSCredito, IPICredito, PISCredito, COFINSCredito FROM TributacaoComplPVBaixado WHERE FilialEmpresa = ? AND CodPedido = ?", _
'        tTributacaoComplPV.iItem, tTributacaoComplPV.sNaturezaOp, tTributacaoComplPV.iNaturezaOpManual, tTributacaoComplPV.iTipoTributacao, tTributacaoComplPV.iTipoTributacaoManual, tTributacaoComplPV.iIPITipo, tTributacaoComplPV.iIPITipoManual, tTributacaoComplPV.dIPIBaseCalculo, tTributacaoComplPV.iIPIBaseManual, tTributacaoComplPV.dIPIPercRedBase, _
'        tTributacaoComplPV.iIPIPercRedBaseManual, tTributacaoComplPV.dIPIAliquota, tTributacaoComplPV.iIPIAliquotaManual, tTributacaoComplPV.dIPIValor, tTributacaoComplPV.iIPIValorManual, tTributacaoComplPV.iICMSTipo, tTributacaoComplPV.iICMSTipoManual, tTributacaoComplPV.dICMSBase, tTributacaoComplPV.iICMSBaseManual, tTributacaoComplPV.dICMSPercRedBase, _
'        tTributacaoComplPV.iICMSPercRedBaseManual, tTributacaoComplPV.dICMSAliquota, tTributacaoComplPV.iICMSAliquotaManual, tTributacaoComplPV.dICMSValor, tTributacaoComplPV.iICMSValorManual, tTributacaoComplPV.dICMSSubstBase, tTributacaoComplPV.iICMSSubstBaseManual, _
'        tTributacaoComplPV.dICMSSubstAliquota, tTributacaoComplPV.iICMSSubstAliquotaManual, tTributacaoComplPV.dICMSSubstValor, tTributacaoComplPV.iICMSSubstValorManual, tTributacaoComplPV.dICMSCredito, tTributacaoComplPV.dIPICredito, tTributacaoComplPV.dPISCredito, tTributacaoComplPV.dCOFINSCredito, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
'    If lErro <> AD_SQL_SUCESSO Then Error 64097
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64098
'
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        Set objTributacaoItemPV = New ClassTributacaoItemPV
'
'        With objTributacaoItemPV
'
'            .lNumIntDoc = tTributacaoComplPV.iItem
'            .sNaturezaOp = tTributacaoComplPV.sNaturezaOp
'            .iNaturezaOpManual = tTributacaoComplPV.iNaturezaOpManual
'            .iTipoTributacao = tTributacaoComplPV.iTipoTributacao
'            .iTipoTributacaoManual = tTributacaoComplPV.iTipoTributacaoManual
'            .iIPITipo = tTributacaoComplPV.iIPITipo
'            .iIPITipoManual = tTributacaoComplPV.iIPITipoManual
'            .dIPIBaseCalculo = tTributacaoComplPV.dIPIBaseCalculo
'            .iIPIBaseManual = tTributacaoComplPV.iIPIBaseManual
'            .dIPIPercRedBase = tTributacaoComplPV.dIPIPercRedBase
'            .iIPIPercRedBaseManual = tTributacaoComplPV.iIPIPercRedBaseManual
'            .dIPIAliquota = tTributacaoComplPV.dIPIAliquota
'            .iIPIAliquotaManual = tTributacaoComplPV.iIPIAliquotaManual
'            .dIPIValor = tTributacaoComplPV.dIPIValor
'            .iIPIValorManual = tTributacaoComplPV.iIPIValorManual
'            .iICMSTipo = tTributacaoComplPV.iICMSTipo
'            .iICMSTipoManual = tTributacaoComplPV.iICMSTipoManual
'            .dICMSBase = tTributacaoComplPV.dICMSBase
'            .iICMSBaseManual = tTributacaoComplPV.iICMSBaseManual
'            .dICMSPercRedBase = tTributacaoComplPV.dICMSPercRedBase
'            .iICMSPercRedBaseManual = tTributacaoComplPV.iICMSPercRedBaseManual
'            .dICMSAliquota = tTributacaoComplPV.dICMSAliquota
'            .iICMSAliquotaManual = tTributacaoComplPV.iICMSAliquotaManual
'            .dICMSValor = tTributacaoComplPV.dICMSValor
'            .iICMSValorManual = tTributacaoComplPV.iICMSValorManual
'            .dICMSSubstBase = tTributacaoComplPV.dICMSSubstBase
'            .iICMSSubstBaseManual = tTributacaoComplPV.iICMSSubstBaseManual
'            .dICMSSubstAliquota = tTributacaoComplPV.dICMSSubstAliquota
'            .iICMSSubstAliquotaManual = tTributacaoComplPV.iICMSSubstAliquotaManual
'            .dICMSSubstValor = tTributacaoComplPV.dICMSSubstValor
'            .iICMSSubstValorManual = tTributacaoComplPV.iICMSSubstValorManual
'            .dICMSCredito = tTributacaoComplPV.dICMSCredito
'            .dIPICredito = tTributacaoComplPV.dIPICredito
'            .dPISCredito = tTributacaoComplPV.dPISCredito
'            .dCOFINSCredito = tTributacaoComplPV.dCOFINSCredito
'
'        End With
'
'        Select Case tTributacaoComplPV.iItem
'
'            Case ITEM_TIPO_FRETE
'                Set objTributacaoPV.objTributacaoFrete = objTributacaoItemPV
'
'            Case ITEM_TIPO_SEGURO
'                Set objTributacaoPV.objTributacaoSeguro = objTributacaoItemPV
'
'            Case ITEM_TIPO_DESCONTO
'                Set objTributacaoPV.objTributacaoDesconto = objTributacaoItemPV
'
'            Case ITEM_TIPO_OUTRAS_DESP
'                Set objTributacaoPV.objTributacaoOutras = objTributacaoItemPV
'
'            Case Else 'item invalido
'                Error 64099
'
'        End Select
'
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64100
'
'    Loop
'
'    Call Comando_Fechar(lComando)
'
'    PedidoDeVenda_Le_ComplementosBaixados = SUCESSO
'
'    Exit Function
'
'Erro_PedidoDeVenda_Le_ComplementosBaixados:
'
'    PedidoDeVenda_Le_ComplementosBaixados = Err
'
'    Select Case Err
'
'        Case 64096
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 64097, 64098, 64100
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDABAIXADOS", Err, objPedidoVenda.lCodigo)
'
'        Case 64099
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMPL_PV_BAIXADO_TIPO_INVALIDO", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150180)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function

Function Serie_Le_Padrao(sSeriePadrao As String) As Long

Dim objFATConfig As New ClassFATConfig
Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_Serie_Le_Padrao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 64114
    
    objFATConfig.iFilialEmpresa = giFilialEmpresa
    objFATConfig.sCodigo = FATCFG_SERIE_PADRAO
    
    lErro = FATConfig_Le_Batch(objFATConfig, lComando)
    If lErro <> SUCESSO Then Error 64115
    
    sSeriePadrao = objFATConfig.sConteudo
    
    Call Comando_Fechar(lComando)
    
    Serie_Le_Padrao = SUCESSO
    
    Exit Function
    
Erro_Serie_Le_Padrao:

    Serie_Le_Padrao = Err
    
    Select Case Err
        
        Case 64114
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 64115
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150181)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Function Consultas_Le_Todos(ByVal sNomeTela As String, ByVal colConsultas As Collection) As Long
'Le Todas as Consultas para a Tela Passada

Dim lErro As Long
Dim tConsultas As typeConsultas
Dim objConsulta As ClassConsultas
Dim lComando As Long

On Error GoTo Erro_Consultas_Le_Todos

    'abre conexao com o BD (DIC)
    lComando = Comando_AbrirExt(GL_lConexaoDic)
    If lComando = 0 Then Error 60470

    tConsultas.sNomeTela = String(STRING_NOME_TELA, 0)
    tConsultas.sSigla = String(STRING_MODULO_SIGLA, 0)
    tConsultas.sTelaRelacionada = String(STRING_NOME_TELA, 0)
    tConsultas.sConsulta = String(STRING_CONSULTA, 0)
    tConsultas.sDescricao = String(STRING_CONSULTA_DESCRICAO, 0)
    
    'Le todos os modulos e Consultas
    lErro = Comando_Executar(lComando, "SELECT Consultas.Sigla, Consultas.Consulta,Consultas.Descricao, Consultas.Posicao, Consultas.Nivel, Consultas.TelaRelacionada, Consultas.IconeModulo, Consultas.IconeConsulta FROM Consultas, ModuloFilEmp WHERE ModuloFilEmp.SiglaModulo = Consultas.Sigla AND Consultas.NomeTela = ? AND ModuloFilEmp.CodEmpresa = ? AND ModuloFilEmp.CodFilial = ? ORDER BY Consultas.Sigla , Consultas.Posicao", tConsultas.sSigla, tConsultas.sConsulta, tConsultas.sDescricao, tConsultas.iPosicao, tConsultas.iNivel, tConsultas.sTelaRelacionada, tConsultas.iIconeModulo, tConsultas.iIconeConsulta, sNomeTela, glEmpresa, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60471

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60472

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objConsulta = New ClassConsultas

        objConsulta.sNomeTela = tConsultas.sNomeTela
        objConsulta.sSigla = tConsultas.sSigla
        objConsulta.sDescricao = tConsultas.sDescricao
        objConsulta.sConsulta = tConsultas.sConsulta
        objConsulta.iPosicao = tConsultas.iPosicao
        objConsulta.iNivel = tConsultas.iNivel
        objConsulta.sTelaRelacionada = tConsultas.sTelaRelacionada
        objConsulta.iIconeConsulta = tConsultas.iIconeConsulta
        objConsulta.iIconeModulo = tConsultas.iIconeModulo

        'Coloca na Colecao
        colConsultas.Add objConsulta

        'Busca o Proximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60473

    Loop

    Call Comando_Fechar(lComando)

    Consultas_Le_Todos = SUCESSO

    Exit Function

Erro_Consultas_Le_Todos:

    Consultas_Le_Todos = Err

    Select Case Err
        
        Case 60470
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60471, 60472, 60473
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONSULTAS", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 150182)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Maristela(Inicio) Alteração: Não seleciona mais as Datas da tabela FilialClienteFilEmp
Function CliFilEmp_Le_Rel(ByVal objFilCliFilEmp As ClassFilCliFilEmp, lComando As Long) As Long
'Le em FilialClienteFilEmp dados estatísticos de compras do Cliente e FilialCliente para Relatório.
'IMPORTANTE : O lComando somente é aberto se vier zerado
'IMPORTANTE : O lComando não é fechado, só é fechado em caso de Erro

Dim lErro As Long
Dim tFilCliFilEmp As typeFilCliFilEmp
Dim lNumFiliaisCli As Long

On Error GoTo Erro_CliFilEmp_Le_Rel
    
    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 60461
    End If
    
    'Lê a tabela FilCliFilEmp para trazer os dados
    lErro = Comando_Executar(lComando, "SELECT SUM(NumeroCompras), SUM(MediaCompra), COUNT(*), SUM(ValorAcumuladoCompras) FROM FilialClienteFilEmp WHERE FilialEmpresa = ? AND CodCliente =? AND CodFilial =?", tFilCliFilEmp.lNumeroCompras, tFilCliFilEmp.dMediaCompra, lNumFiliaisCli, tFilCliFilEmp.dValorAcumuladoCompras, objFilCliFilEmp.iFilialEmpresa, objFilCliFilEmp.lCodCliente, objFilCliFilEmp.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 60462

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 60463
    
    objFilCliFilEmp.lNumeroCompras = tFilCliFilEmp.lNumeroCompras
     
    'Maristela(Inicio)
    If objFilCliFilEmp.lNumeroCompras = 0 Then
        objFilCliFilEmp.dtDataPrimeiraCompra = DATA_NULA
        objFilCliFilEmp.dtDataUltimaCompra = DATA_NULA
    Else
        'pesquisa a primeira e última compra
        lErro = FilialClienteFilEmp_Pesquisa_Compra(objFilCliFilEmp)
        If lErro <> SUCESSO Then gError 90515
    End If
    'Maristela(Fim)

'    objFilCliFilEmp.dValorAcumuladoCompras = tFilCliFilEmp.dValorAcumuladoCompras
'
'    If lNumFiliaisCli > 0 Then
'
'        objFilCliFilEmp.dMediaCompra = tFilCliFilEmp.dMediaCompra / lNumFiliaisCli
'
'    Else
'
'        objFilCliFilEmp.dMediaCompra = 0
'
'    End If
    
    CliFilEmp_Le_Rel = SUCESSO

    Exit Function

Erro_CliFilEmp_Le_Rel:

    CliFilEmp_Le_Rel = gErr

    Select Case gErr

        Case 60461
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 60462, 60463
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALCLIENTEFILEMP", gErr)
     
        Case 90515
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150183)
    
    End Select

    'Libera comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function
'Maristela(Fim)

Function NFiscal_Le_UltimaCadastrada(ByVal objNFiscal As ClassNFiscal) As Long

Dim tNFiscal As typeNFiscal
Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFiscal_Le_UltimaCadastrada

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60428
    
    'Le última Nota Fiscal gravada no BD
    lErro = Comando_Executar(lComando, "SELECT NFiscal.NumNotaFiscal, NFiscal.DataEmissao FROM NFiscal, TiposDocInfo WHERE NFiscal.Serie = ? AND NFiscal.FilialEmpresa  = ? AND TiposDocInfo.Codigo = NFiscal.TipoNFiscal AND (TiposDocInfo.Tipo = ? OR TiposDocInfo.Tipo = ?) ORDER BY NumIntDoc DESC", tNFiscal.lNumNotaFiscal, tNFiscal.dtDataEmissao, objNFiscal.sSerie, objNFiscal.iFilialEmpresa, TIPODOCINFO_TIPO_NFIE, TIPODOCINFO_TIPO_NFIS)
    If lErro <> AD_SQL_SUCESSO Then Error 60429
    
    'Busca a primeira
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60430
    
    'Se não encontrou ---> Erro
    If lErro <> AD_SQL_SUCESSO Then Error 60431
    
    objNFiscal.lNumNotaFiscal = tNFiscal.lNumNotaFiscal
    objNFiscal.dtDataEmissao = tNFiscal.dtDataEmissao
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    NFiscal_Le_UltimaCadastrada = SUCESSO
    
    Exit Function

Erro_NFiscal_Le_UltimaCadastrada:

    NFiscal_Le_UltimaCadastrada = Err
    
    Select Case Err
    
        Case 60428
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60429, 60430
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", Err)

        Case 60431 'Não encontrou nº NF Cadastrada. A ser tratado na rotina chamadora.
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150184)
            
    End Select
        
    'Fecha o comando
    Call Comando_Fechar(lComando)
        
    Exit Function
    
End Function

Function Series_Le_TipoFormulario(ByVal colSerie As colSerie, ByVal iTipoFormulario As Integer) As Long
'Lê todos as Séries que tenham o mesmo tipoFormulario passado contidas na tabela Serie e as coloca na coleçao colSerie

Dim lErro As Long
Dim lComando As Long
Dim sSerie As String
Dim lProxNumNFiscal As Long
Dim lProxNumNFiscalEntrada As Long, objSerie As ClassSerie
Dim lProxNumNFiscalImpressa As Long, iMaxLinhasNF As Integer

On Error GoTo Erro_Series_Le_TipoFormulario

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 64055

    sSerie = String(STRING_SERIE, 0)

    'Lê a tabela Serie
    lErro = Comando_Executar(lComando, "SELECT Serie, ProxNumNFiscal, ProxNumNFiscalEntrada, ProxNumNFiscalImpressa, MaxLinhasNF FROM Serie WHERE FilialEmpresa = ? AND TipoFormulario = ? ORDER BY Serie", sSerie, lProxNumNFiscal, lProxNumNFiscalEntrada, lProxNumNFiscalImpressa, iMaxLinhasNF, giFilialEmpresa, iTipoFormulario)
    If lErro <> AD_SQL_SUCESSO Then Error 64056

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64057

    'Enquanto a tabela tiver dados
    Do While lErro <> AD_SQL_SEM_DADOS

        'Coloca a Serie lida na coleção
        Set objSerie = colSerie.Add(iFilialEmpresa, sSerie, lProxNumNFiscal, lProxNumNFiscalEntrada, lProxNumNFiscalImpressa, 0, 0, iTipoFormulario)

        objSerie.iMaxLinhasNF = iMaxLinhasNF

        'Lê a próxima Serie
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64058

    Loop

    Call Comando_Fechar(lComando)

    Series_Le_TipoFormulario = SUCESSO

    Exit Function

Erro_Series_Le_TipoFormulario:

    Series_Le_TipoFormulario = Err

    Select Case Err

        Case 64055
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 64056, 64057, 64058
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150185)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscal_ObterDebCredICMS(ByVal lNumIntNF As Long, dValorBase As Double, dValor As Double, dValorBaseSubst As Double, dValorSubst As Double, lComandoTribNF As Long, lComandoTribItemNF As Long) As Long
'obtem informacoes sobre valores de credito ou debito de icms de uma nota fiscal

Dim lErro As Long
Dim iTipo As Integer, dICMSBase As Double, dICMSCredito As Double, dICMSSubstBase As Double, dICMSSubstValor As Double

On Error GoTo Erro_NFiscal_ObterDebCredICMS

    If lComandoTribNF = 0 Then
        lComandoTribNF = Comando_AbrirExt(GL_lConexaoRel)
        If lComandoTribNF = 0 Then Error 59428
    End If
    
    If lComandoTribItemNF = 0 Then
        lComandoTribItemNF = Comando_AbrirExt(GL_lConexaoRel)
        If lComandoTribItemNF = 0 Then Error 59429
    End If
    
    dValorBase = 0
    dValor = 0
    dValorBaseSubst = 0
    dValorSubst = 0
    
'    'obtem valores dos complementos da nf (frete, seguro, descontos e outras desp)
'    lErro = Comando_Executar(lComandoTribNF, "SELECT Tipo, ICMSBase, ICMSCredito, ICMSSubstBase, ICMSSubstValor FROM TributacaoComplNF WHERE NumIntDoc = ?", _
'        iTipo, dICMSBase, dICMSCredito, dICMSSubstBase, dICMSSubstValor, lNumIntNF)
'    If lErro <> AD_SQL_SUCESSO Then Error 59430
'
'    lErro = Comando_BuscarPrimeiro(lComandoTribNF)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59431
'
'    Do While lErro = AD_SQL_SUCESSO
'
'        If iTipo <> ITEM_TIPO_DESCONTO Then
'
'            dValorBase = dValorBase + dICMSBase
'            dValor = dValor + dICMSCredito
'            dValorBaseSubst = dValorBaseSubst + dICMSSubstBase
'            dValorSubst = dValorSubst + dICMSSubstValor
'
'        Else
'
'            dValorBase = dValorBase - dICMSBase
'            dValor = dValor - dICMSCredito
'            dValorBaseSubst = dValorBaseSubst - dICMSSubstBase
'            dValorSubst = dValorSubst - dICMSSubstValor
'
'        End If
'
'        lErro = Comando_BuscarProximo(lComandoTribNF)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59432
'
'    Loop
    
    lErro = Comando_Executar(lComandoTribItemNF, "SELECT ICMSBase, ICMSCredito, ICMSSubstBase, ICMSSubstValor FROM TributacaoDocItem WHERE NumIntDoc = ? AND TipoDoc = ?", _
        dICMSBase, dICMSCredito, dICMSSubstBase, dICMSSubstValor, lNumIntNF, TIPODOC_TRIB_NF)
    If lErro <> AD_SQL_SUCESSO Then Error 59433

    lErro = Comando_BuscarPrimeiro(lComandoTribItemNF)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59434
    
    Do While lErro = AD_SQL_SUCESSO
    
        dValorBase = dValorBase + dICMSBase
        dValor = dValor + dICMSCredito
        dValorBaseSubst = dValorBaseSubst + dICMSSubstBase
        dValorSubst = dValorSubst + dICMSSubstValor
        
        lErro = Comando_BuscarProximo(lComandoTribItemNF)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59435
        
    Loop
    
    dValorBase = Round(dValorBase, 2)
    dValor = Round(dValor, 2)
    dValorBaseSubst = Round(dValorBaseSubst, 2)
    dValorSubst = Round(dValorSubst, 2)
    
    NFiscal_ObterDebCredICMS = SUCESSO
     
    Exit Function
    
Erro_NFiscal_ObterDebCredICMS:

    NFiscal_ObterDebCredICMS = Err
     
    Select Case Err
          
        Case 59428, 59429
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 59430, 59431, 59432
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRIBCOMPLNFISCAL", Err)
        
        Case 59433, 59434, 59435
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRIBITEMNFISCAL", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 150186)
     
    End Select
     
    Exit Function

End Function

Function NF_Obter_NumeroItens(ByVal lNumIntDoc As Long, iNumItens As Integer, lComando As Long) As Long
'OBS: Função para o cálculo de Número de Itens de Nota Fiscal para Relatorio
'Se o Comando vier zerado vai ser aberto e não será fechado

Dim lErro As Long

On Error GoTo Erro_NF_Obter_NumeroItens

    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 69088
    End If

    lErro = Comando_Executar(lComando, "SELECT COUNT(*) FROM ItensNFiscal WHERE NumIntNF = ?", iNumItens, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 69089

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69090

    NF_Obter_NumeroItens = SUCESSO
    
    Exit Function
    
Erro_NF_Obter_NumeroItens:

    NF_Obter_NumeroItens = gErr
    
    Select Case gErr
    
        Case 69088
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 69089, 69090
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL2", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150187)
     
    End Select
     
    Exit Function

End Function
'??? Atenção Já exite em ClassPVSelect
'Maristela (Inicio)
Function FilialClienteFilEmp_Pesquisa_Compra(ByVal objFilCliFilEmp As ClassFilCliFilEmp) As Long
'Pesquisa a primeira e a ultima nota fiscal da FilialEmpresa (data de emissao mais antiga e a mais nova) para a Filial do Cliente em questão.

Dim lErro As Long
Dim lComando As Long
Dim dtDataEmissaoPri As Date
Dim dtDataEmissaoUlt As Date
Dim tFilCliFilEmp As typeFilCliFilEmp

On Error GoTo Erro_FilialClienteFilEmp_Pesquisa_Compra

     'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90512
    
    'Inicializa as Datas
    dtDataEmissaoPri = DATA_NULA
    dtDataEmissaoUlt = DATA_NULA
    
    lErro = Comando_Executar(lComando, "SELECT MIN(NFiscal.DataEmissao), MAX(NFiscal.DataEmissao) FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = ? AND TiposDocInfo.Complementar = ? AND NFiscal.DataEmissao <> ? AND NFiscal.Cliente =? AND NFiscal.FilialEmpresa = ? AND NFiscal.FilialCli = ? ", dtDataEmissaoPri, dtDataEmissaoUlt, TIPODOCINFO_FATURAVEL, DOCINFO_NORMAL, DATA_NULA, objFilCliFilEmp.lCodCliente, objFilCliFilEmp.iFilialEmpresa, objFilCliFilEmp.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 90513
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90514
    
    If lErro = AD_SQL_SUCESSO Then
        objFilCliFilEmp.dtDataPrimeiraCompra = dtDataEmissaoPri
        objFilCliFilEmp.dtDataUltimaCompra = dtDataEmissaoUlt
    End If
    
    Call Comando_Fechar(lComando)
       
    FilialClienteFilEmp_Pesquisa_Compra = SUCESSO
    
    Exit Function
    
Erro_FilialClienteFilEmp_Pesquisa_Compra:

    FilialClienteFilEmp_Pesquisa_Compra = gErr
    
    Select Case gErr
        
        Case 90512
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 90513, 90514
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150188)
        
    End Select
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
       
    Exit Function

End Function

'Copiadas de CTNFiscalfatura em 01/02/02 por Cyntia

Public Function NFiscal_Consulta_DocCPR(ByVal objNFiscal As ClassNFiscal) As Long
'Exibe na tela um documento (título a pagar, título a receber, crédito a pagar, etc.), vinculado à uma nota fiscal

Dim lErro As Long
Dim sNomeTela As String
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objTituloPagar As New ClassTituloPagar
Dim objTituloReceber As New ClassTituloReceber
Dim objCreditoPagar As New ClassCreditoPagar
Dim objDebitoReceber As New ClassDebitoRecCli
Dim objNFsPag As New ClassNFsPag

On Error GoTo Erro_NFiscal_Consulta_DocCPR

    'Obtem ClasseDocCPR e NumIntDocCPR da Nota Fiscal
    lErro = CF("NFiscal_Le_SemNumIntDoc", objNFiscal)
    If lErro <> SUCESSO And lErro <> 79714 Then gError 79716
    
    'Se não encontrou a Nota Fiscal => erro
    If lErro = 79714 Then gError 79717
    
    'Define o parâmetro que será utilizado para ler a sigla do DocCPR
    objTipoDocInfo.iCodigo = objNFiscal.iTipoDocInfo
    
    'Lê os dados do TipoDocInfo no BD (a intenção é pegar a sigla do DocCPR)
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 79729
    
    'Se não encontrou => erro
    If lErro = 31415 Then gError 79730
       
    
    'Seleciona o nome da tela que será aberta
    Select Case objNFiscal.iClasseDocCPR
    
        'Consulta de títulos a pagar
        Case CPR_TITULO_PAGAR
            
            'Chama a tela de consulta de Títulos a Pagar
            lErro = NFiscal_Consulta_TituloPagar(objNFiscal, objTipoDocInfo)
            If lErro <> SUCESSO Then gError 79731
            
        'Consulta de títulos a receber
        Case CPR_TITULO_RECEBER
        
            'Chama a tela de consulta de Títulos a Receber
            lErro = NFiscal_Consulta_TituloReceber(objNFiscal)
            If lErro <> SUCESSO Then gError 79732
        
        'Consulta de notas fiscais no cp (daqui o usuário pode ir para a tela de faturas)
        Case CPR_NF_PAGAR
        
            lErro = NFiscal_Consulta_NFPag(objNFiscal)
            If lErro <> SUCESSO Then gError 79733
        
        'Tela de Cadastro de Débitos a Receber
        Case CPR_DEBITO_RECEBER
        
            lErro = NFiscal_Consulta_DebitosReceb(objNFiscal)
            If lErro <> SUCESSO Then gError 79734
        
        'Tela de Cadastro de Débitos a Receber
        Case CPR_CREDITO_PAGAR
        
            lErro = NFiscal_Consulta_CreditoPagar(objNFiscal)
            If lErro <> SUCESSO Then gError 79735
            
        'O título não tem uma tela de Doc Correspondente
        Case Else
            gError 79715
          
    End Select
    
    NFiscal_Consulta_DocCPR = SUCESSO
    
    Exit Function

Erro_NFiscal_Consulta_DocCPR:

    NFiscal_Consulta_DocCPR = gErr
    
    Select Case gErr
    
        Case 79716, 79717, 79729, 79731 To 79735
        
        Case 79715
            Call Rotina_Erro(vbOKOnly, "ERRO_NF_SEM_DOCCPR_VINCULADO", gErr)
        
        Case 79730
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPODOCINFO_NAO_CADASTRADO2", gErr, objTipoDocInfo.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150189)
            
    End Select
    
    Exit Function

End Function

Private Function NFiscal_Consulta_TituloPagar(ByVal objNFiscal As ClassNFiscal, objTipoDocInfo As ClassTipoDocInfo) As Long

Dim objTituloPagar As New ClassTituloPagar

On Error GoTo Erro_NFiscal_Consulta_TituloPagar

    With objTituloPagar
    
        .lNumTitulo = objNFiscal.lNumNotaFiscal
        .lFornecedor = objNFiscal.lFornecedor
        .iFilial = objNFiscal.iFilialForn
        .dtDataEmissao = objNFiscal.dtDataEmissao
        .sSiglaDocumento = objTipoDocInfo.sTipoDocCPR
    
    End With
    
    Call Chama_Tela("TituloPagar_Consulta", objTituloPagar)
    
    NFiscal_Consulta_TituloPagar = SUCESSO
    
    Exit Function

Erro_NFiscal_Consulta_TituloPagar:

    NFiscal_Consulta_TituloPagar = gErr
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150190)
        
    End Select
    
    Exit Function

End Function

Private Function NFiscal_Consulta_TituloReceber(ByVal objNFiscal As ClassNFiscal) As Long

Dim objTituloReceber As New ClassTituloReceber

On Error GoTo Erro_NFiscal_Consulta_TituloReceber

    objTituloReceber.lNumIntDoc = objNFiscal.lNumIntDocCPR
            
    Call Chama_Tela("TituloReceber_Consulta", objTituloReceber)

    NFiscal_Consulta_TituloReceber = SUCESSO
    
    Exit Function

Erro_NFiscal_Consulta_TituloReceber:

    NFiscal_Consulta_TituloReceber = gErr
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150191)
    
    End Select
    
    Exit Function
        
End Function

Private Function NFiscal_Consulta_NFPag(ByVal objNFiscal As ClassNFiscal) As Long

Dim objNFsPag As New ClassNFsPag

On Error GoTo Erro_NFiscal_Consulta_NFPag

    With objNFsPag
    
        .lNumNotaFiscal = objNFiscal.lNumNotaFiscal
        .lFornecedor = objNFiscal.lFornecedor
        .iFilial = objNFiscal.iFilialForn
        .iFilialEmpresa = objNFiscal.iFilialEmpresa
        .dtDataEmissao = objNFiscal.dtDataEmissao
    
    End With
            
    Call Chama_Tela("NFPag_Consulta", objNFsPag)

    NFiscal_Consulta_NFPag = SUCESSO
    
    Exit Function

Erro_NFiscal_Consulta_NFPag:

    NFiscal_Consulta_NFPag = gErr
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150192)
        
    End Select
    
    Exit Function
    
End Function

Private Function NFiscal_Consulta_DebitosReceb(ByVal objNFiscal As ClassNFiscal) As Long

Dim objDebitoReceber As New ClassDebitoRecCli

On Error GoTo Erro_NFiscal_Consulta_DebitosReceb

    objDebitoReceber.lNumIntDoc = objNFiscal.lNumIntDocCPR
    
    Call Chama_Tela("DebitosReceb", objDebitoReceber)
        
    NFiscal_Consulta_DebitosReceb = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Consulta_DebitosReceb:
    
    NFiscal_Consulta_DebitosReceb = gErr
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150193)
        
    End Select
    
    Exit Function
    
End Function

Private Function NFiscal_Consulta_CreditoPagar(ByVal objNFiscal As ClassNFiscal) As Long

Dim objCreditoPagar As New ClassCreditoPagar

On Error GoTo Erro_NFiscal_Consulta_CreditoPagar

    objCreditoPagar.lNumIntDoc = objNFiscal.lNumIntDocCPR
            
    Call Chama_Tela("CreditosPagar", objCreditoPagar)

    NFiscal_Consulta_CreditoPagar = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Consulta_CreditoPagar:
    
    NFiscal_Consulta_CreditoPagar = gErr
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150194)
        
    End Select
    
    Exit Function
    
End Function

'Até aqui Copiadas de CTNFiscalfatura em 01/02/02 por Cyntia

'Por Leo em 01/03/02
Public Function ParcelasRec_Cli_Abertas_Le(ByVal colParcRec As Collection, ByVal lCliente As Long) As Long
'Retorna para a coleção todas parcelas em aberto de um Cliente, ordenado por NumTitulo e DataVenctoReal.

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim lNumTitulo As Long
Dim iNumParcela As Integer
Dim dValor As Double
Dim dSaldo As Double
Dim dtVenctoReal As Date
Dim objInfoParcRec As ClassInfoParcRec
Dim sSQL As String, sFiltro As String
    
On Error GoTo Erro_ParcelasRec_Cli_Abertas_Le
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94395
    
    lErro = CF("FilialEmpresa_Le_Filtro_Filial2", sFiltro, "TitulosRec")
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    'Seleciona todas parcelas em aberto de um Cliente, ordenado por NumTitulo e DataVenctoReal.
    sSQL = "SELECT TitulosRec.NumTitulo, ParcelasRec.NumParcela, ParcelasRec.Valor, ParcelasRec.Saldo, ParcelasRec.DataVencimentoReal FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND TitulosRec.Cliente = ? " & sFiltro & " ORDER BY TitulosRec.NumTitulo, ParcelasRec.DataVencimentoReal"
    
    lErro = Comando_Executar(lComando, sSQL _
    , lNumTitulo, iNumParcela, dValor, dSaldo, dtVenctoReal, STATUS_EXCLUIDO, STATUS_BAIXADO, lCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 94392
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94393
            
    If lErro <> AD_SQL_SUCESSO Then gError 94399
            
    Do While lErro = AD_SQL_SUCESSO
    
        Set objInfoParcRec = New ClassInfoParcRec
    
        objInfoParcRec.lNumTitulo = lNumTitulo
        objInfoParcRec.iNumParcela = iNumParcela
        objInfoParcRec.dValor = dValor
        objInfoParcRec.dSaldoParcela = dSaldo
        objInfoParcRec.dtDataVencimentoReal = dtVenctoReal
        
        colParcRec.Add objInfoParcRec
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94394
    
    Loop
    
    Call Comando_Fechar(lComando)
    
    ParcelasRec_Cli_Abertas_Le = SUCESSO
    
    Exit Function
    
Erro_ParcelasRec_Cli_Abertas_Le:
    
    ParcelasRec_Cli_Abertas_Le = gErr
    
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
    
        Case 94399 'Tratado na rotina chamadora
        
        Case 94396
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 94392, 94393, 94394
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXECUCAO_COMANDO_SQL", gErr, sSQL)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150195)

    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


'Por Leo em 01/03/02
Public Function ParcelasRec_Atraso_Le(ByVal colParcRec As Collection, ByVal lCliente As Long) As Long
'Retorna para a coleção todas parcelas em Atraso de um Cliente, ordenado por NumTitulo e DataVenctoReal.
'DENTRO DO LIMITE DE BLOQUEIO POR ATRASO

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim lNumTitulo As Long
Dim iNumParcela As Integer
Dim dValor As Double
Dim dSaldo As Double
Dim dtVenctoReal As Date
Dim objInfoParcRec As ClassInfoParcRec
Dim sSQL As String
Dim dtDataLimite As Date
Dim sFiltro As String
    
On Error GoTo Erro_ParcelasRec_Atraso_Le
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94401
        
    'Verifica a data limite p/ atraso de uma parcela. Retorna DATA_NULA caso a empresa não use o Bloqueio por atraso.
    lErro = CF("Verifica_DataLimite_Bloqueio_Atraso", dtDataLimite)
    If lErro <> SUCESSO Then gError 94402
        
    'se o bloqueio por atraso está ativo
    If dtDataLimite <> DATA_NULA Then
    
        lErro = CF("FilialEmpresa_Le_Filtro_Filial", sFiltro)
        If lErro <> SUCESSO Then gError 94402
        
        'Seleciona todas parcelas em aberto de um Cliente, ordenado por NumTitulo e DataVenctoReal.
        sSQL = "SELECT TitulosRec.NumTitulo, ParcelasRec.NumParcela, ParcelasRec.Valor, ParcelasRec.Saldo, ParcelasRec.DataVencimentoReal FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND TitulosRec.Cliente = ? AND ParcelasRec.DataVencimentoReal <= ? "
        sSQL = sSQL & sFiltro
        sSQL = sSQL & " ORDER BY TitulosRec.NumTitulo, ParcelasRec.DataVencimentoReal"
        
        lErro = Comando_Executar(lComando, sSQL _
        , lNumTitulo, iNumParcela, dValor, dSaldo, dtVenctoReal, STATUS_EXCLUIDO, STATUS_BAIXADO, lCliente, dtDataLimite)
        If lErro <> AD_SQL_SUCESSO Then gError 94403
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94404
                
        If lErro <> AD_SQL_SUCESSO Then gError 94405
                
        Do While lErro = AD_SQL_SUCESSO
        
            Set objInfoParcRec = New ClassInfoParcRec
        
            objInfoParcRec.lNumTitulo = lNumTitulo
            objInfoParcRec.iNumParcela = iNumParcela
            objInfoParcRec.dValor = dValor
            objInfoParcRec.dSaldoParcela = dSaldo
            objInfoParcRec.dtDataVencimentoReal = dtVenctoReal
            
            colParcRec.Add objInfoParcRec
        
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94406
        
        Loop
    
    End If
    
    Call Comando_Fechar(lComando)
    
    ParcelasRec_Atraso_Le = SUCESSO
    
    Exit Function
    
Erro_ParcelasRec_Atraso_Le:
    
    ParcelasRec_Atraso_Le = gErr
    
    Select Case gErr
    
        Case 94405 'Tratado na rotina chamadora
        
        Case 94401
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 94402
            
        Case 94403, 94404, 94406
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXECUCAO_COMANDO_SQL", gErr, sSQL)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150196)

    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function ComissoesRegras_Le_Todas(ByVal colComissoesRegras As Collection) As Long
'Lê todas as regras de comissões na tabela ComissoesRegras
'colComissoesRegras RETORNA(Output) as regras lidas na tabela

Dim lErro As Long
Dim lComando As Long
Dim objComissoesRegras As ClassComissoesRegras
Dim tComissoesRegras As typeComissoesRegras

On Error GoTo Erro_ComissoesRegras_Le_Todas

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94913
    
    'Inicializa as string que serão utilizadas na leitura
    With tComissoesRegras
        .sRegra = String(STRING_COMISSOESREGRAS_REGRA, 0)
        .sValorBase = String(STRING_COMISSOESREGRAS_VALORBASE, 0)
        .sPercComissao = String(STRING_COMISSOESREGRAS_PERCCOMISSAO, 0)
    End With
    
    'Lê do BD o conjunto de Regras que estão em ComissoesRegras
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Vendedor, Regra, Ordenacao, ValorBase, PercComissao, PercComissaoEmiss, VendedorIndireto, NumIntDocOrigem FROM ComissoesRegras ORDER BY VendedorIndireto, Vendedor, Ordenacao", tComissoesRegras.lNumIntDoc, tComissoesRegras.iVendedor, tComissoesRegras.sRegra, tComissoesRegras.lOrdenacao, tComissoesRegras.sValorBase, tComissoesRegras.sPercComissao, tComissoesRegras.dPercComissaoEmiss, tComissoesRegras.iVendedorIndireto, tComissoesRegras.lNumIntDocOrigem)
    If lErro <> AD_SQL_SUCESSO Then gError 94914
    
    'Obtém a primeira regra
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94915
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 94916
    
    'Enquanto houverem regras
    Do While lErro = SUCESSO
    
        'Instancia um novo objComissoesRegras
        Set objComissoesRegras = New ClassComissoesRegras
        
        'Transfere os dados lidos do type para o objComissoesRegras
        With objComissoesRegras
        
            .lNumIntDoc = tComissoesRegras.lNumIntDoc
            .iVendedor = tComissoesRegras.iVendedor
            .sRegra = tComissoesRegras.sRegra
            .lOrdenacao = tComissoesRegras.lOrdenacao
            .sValorBase = tComissoesRegras.sValorBase
            .sPercComissao = tComissoesRegras.sPercComissao
            .dPercComissaoEmiss = tComissoesRegras.dPercComissaoEmiss
            .iVendedorIndireto = tComissoesRegras.iVendedorIndireto
            .lNumIntDocOrigem = tComissoesRegras.lNumIntDocOrigem
        
        End With
        
        'Guarda o obj na coleção que será devolvida pela função
        colComissoesRegras.Add objComissoesRegras
        
        'Obtém a próxima regra lida
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94917
    
    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    ComissoesRegras_Le_Todas = SUCESSO
    
    Exit Function

Erro_ComissoesRegras_Le_Todas:

    ComissoesRegras_Le_Todas = gErr
    
    Select Case gErr
        
        Case 94913
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 94914, 94915, 94917
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESREGRAS", gErr)
        
        Case 94916 'SEM DADOS
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150197)

    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function MnemonicoComissoes_Todos_Le_Todos(ByVal colMnemonicosComissoes As Collection) As Long
'Lê todos os mnemônicos da view MnemonicosComissoes_Todos
'A view retorna os mnemônicos presentes nas tabelas MnemonicoComissoes e MnemonicoComissoesAux,
'excluindo os mnemônicos de MnemonicoComissoes que possuem substitutos em MnemonicoComissoesAux
'colMnemonicosComissoes RETORNA (Output) os mnemônicos lidos

' *** Alterado por Luiz Nogueira em 07/05/02 ***
' Incluída leitura dos campos ClasseBrowser, NomeBrowser, PropertyBrowser
' **********************************************

Dim lErro As Long
Dim lComando As Long
Dim sTabela As String
Dim objMnemonicoComissoes As ClassMnemonicoComissoes
Dim tMnemonicoComissoes As typeMnemonicoComissoes

On Error GoTo Erro_MnemonicoComissoes_Todos_Le_Todos

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94940

    'Inicializa as string que serão utilizadas na leitura
    With tMnemonicoComissoes
        .sMnemonico = String(STRING_MNEMONICOCOMISSOES_MNEMONICO, 0)
        .sDescricao = String(STRING_MNEMONICOCOMISSOES_DESCRICAO, 0)
        .sGrid = String(STRING_MNEMONICOCOMISSOES_NOMEGRID, 0)
        .sNomeBrowser = String(STRING_NOME_TELA, 0)
        .sClasseBrowser = String(STRING_NOME_CLASSEBROWSER, 0)
        .sPropertyBrowser = String(STRING_NOME_PROPERTY, 0)
    End With

    'Guarda o nome da tabela que será lida => apenas para exibir caso ocorra erro
    'de leitura
    sTabela = "MnemonicoComissoes_Todos"

    'Lê do BD o conjunto de Mnemônicos que estão em sTabela
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Mnemonico, Descricao, NomeBrowser, ClasseBrowser, PropertyBrowser, NomeGrid, Tipo, NumParam, Param1, Param2, Param3 FROM MnemonicoComissoes_Todos ORDER BY Mnemonico", tMnemonicoComissoes.lNumIntDoc, tMnemonicoComissoes.sMnemonico, tMnemonicoComissoes.sDescricao, tMnemonicoComissoes.sNomeBrowser, tMnemonicoComissoes.sClasseBrowser, tMnemonicoComissoes.sPropertyBrowser, tMnemonicoComissoes.sGrid, tMnemonicoComissoes.iTipo, tMnemonicoComissoes.iNumParam, tMnemonicoComissoes.iParam1, tMnemonicoComissoes.iParam2, tMnemonicoComissoes.iParam3)
    If lErro <> AD_SQL_SUCESSO Then gError 94941

    'Obtém o primeiro mnemônico
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94942

    'Se não encontrou =>
    If lErro = AD_SQL_SEM_DADOS Then gError 94944

    'Enquanto houverem mnemônicos
    Do While lErro = SUCESSO

        'Instancia um novo objMnemonicosComissoes
        Set objMnemonicoComissoes = New ClassMnemonicoComissoes

        'Transfere os dados lidos do type para o objMnemonicosComissoes
        With objMnemonicoComissoes

            .lNumIntDoc = tMnemonicoComissoes.lNumIntDoc
            .sMnemonico = tMnemonicoComissoes.sMnemonico
            .sDescricao = tMnemonicoComissoes.sDescricao
            .sNomeBrowser = tMnemonicoComissoes.sNomeBrowser
            .sClasseBrowser = tMnemonicoComissoes.sClasseBrowser
            .sPropertyBrowser = tMnemonicoComissoes.sPropertyBrowser
            .sGrid = tMnemonicoComissoes.sGrid
            .iTipo = tMnemonicoComissoes.iTipo
            .iNumParam = tMnemonicoComissoes.iNumParam
            .iParam1 = tMnemonicoComissoes.iParam1
            .iParam2 = tMnemonicoComissoes.iParam2
            .iParam3 = tMnemonicoComissoes.iParam3

        End With

        'Guarda o obj na coleção que será devolvida pela função
        colMnemonicosComissoes.Add objMnemonicoComissoes

        'Obtém o próximo mnemônico lido
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94943

    Loop

    'Fecha o comando
    Call Comando_Fechar(lComando)

    MnemonicoComissoes_Todos_Le_Todos = SUCESSO

    Exit Function

Erro_MnemonicoComissoes_Todos_Le_Todos:

    MnemonicoComissoes_Todos_Le_Todos = gErr

    Select Case gErr

        Case 94940
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 94941 To 94943
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_GENERICO", gErr, sTabela)

        Case 94944 'SEM DADOS

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150198)

    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function OrcamentoVenda_Le_NumIntPedVenda(objOrcamentoVenda As ClassOrcamentoVenda) As Long
'Lê o Orcamento de Venda a partir do NumIntPedVenda passado.

Dim lComando As Long
Dim lErro As Long
Dim tOrcamentoVenda As typeOrcamentoVenda
Dim iPrazoValidade As Integer

On Error GoTo Erro_OrcamentoVenda_Le_NumIntPedVenda

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94453

    tOrcamentoVenda.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    tOrcamentoVenda.sNomeCli = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    tOrcamentoVenda.sNomeFilialCli = String(STRING_FILIAL_CLIENTE_NOME, 0)
    
    lErro = Comando_Executar(lComando, "SELECT NaturezaOp, NumIntNFiscal, Codigo, FilialEmpresa, NomeCli, NomeFilialCli, Vendedor, Cliente, Filial, CondicaoPagto, PercAcrescFinanceiro, DataEmissao,  ValorTotal, ValorFrete, ValorDesconto, ValorSeguro, TabelaPreco, DataReferencia, NumIntDoc,ValorOutrasDespesas,ValorProdutos, PrazoValidade FROM OrcamentoVenda WHERE NumIntPedVenda = ? ", _
    tOrcamentoVenda.sNaturezaOp, tOrcamentoVenda.lNumIntNFiscal, tOrcamentoVenda.lCodigo, tOrcamentoVenda.iFilialEmpresa, tOrcamentoVenda.sNomeCli, tOrcamentoVenda.sNomeFilialCli, tOrcamentoVenda.iVendedor, tOrcamentoVenda.lCliente, tOrcamentoVenda.iFilial, tOrcamentoVenda.iCondicaoPagto, tOrcamentoVenda.dPercAcrescFinanceiro, tOrcamentoVenda.dtDataEmissao, tOrcamentoVenda.dValorTotal, tOrcamentoVenda.dValorFrete, tOrcamentoVenda.dValorDesconto, tOrcamentoVenda.dValorSeguro, tOrcamentoVenda.iTabelaPreco, tOrcamentoVenda.dtDataReferencia, tOrcamentoVenda.lNumIntDoc, tOrcamentoVenda.dValorOutrasDespesas, tOrcamentoVenda.dValorProdutos, iPrazoValidade, objOrcamentoVenda.lNumIntPedVenda)
    If lErro <> AD_SQL_SUCESSO Then gError 94454

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94455
    
    'Se não encontrou ---> Erro tratado na rotina Chamadora
    If lErro = AD_SQL_SEM_DADOS Then gError 94456

    objOrcamentoVenda.lCodigo = tOrcamentoVenda.lCodigo
    objOrcamentoVenda.iFilialEmpresa = tOrcamentoVenda.iFilialEmpresa
    objOrcamentoVenda.lNumIntNFiscal = tOrcamentoVenda.lNumIntNFiscal
    objOrcamentoVenda.sNomeFilialCli = tOrcamentoVenda.sNomeFilialCli
    objOrcamentoVenda.sNomeCli = tOrcamentoVenda.sNomeCli
    objOrcamentoVenda.iPrazoValidade = iPrazoValidade
    objOrcamentoVenda.lCliente = tOrcamentoVenda.lCliente
    objOrcamentoVenda.iFilial = tOrcamentoVenda.iFilial
    objOrcamentoVenda.iCondicaoPagto = tOrcamentoVenda.iCondicaoPagto
    objOrcamentoVenda.dPercAcrescFinanceiro = tOrcamentoVenda.dPercAcrescFinanceiro
    objOrcamentoVenda.dtDataEmissao = tOrcamentoVenda.dtDataEmissao
    objOrcamentoVenda.sNaturezaOp = tOrcamentoVenda.sNaturezaOp
    objOrcamentoVenda.dValorTotal = tOrcamentoVenda.dValorTotal
    objOrcamentoVenda.dValorFrete = tOrcamentoVenda.dValorFrete
    objOrcamentoVenda.dValorDesconto = tOrcamentoVenda.dValorDesconto
    objOrcamentoVenda.dValorOutrasDespesas = tOrcamentoVenda.dValorOutrasDespesas
    objOrcamentoVenda.dValorSeguro = tOrcamentoVenda.dValorSeguro
    objOrcamentoVenda.iTabelaPreco = tOrcamentoVenda.iTabelaPreco
    objOrcamentoVenda.dtDataReferencia = tOrcamentoVenda.dtDataReferencia
    objOrcamentoVenda.lNumIntDoc = tOrcamentoVenda.lNumIntDoc
    objOrcamentoVenda.dValorProdutos = tOrcamentoVenda.dValorProdutos
    objOrcamentoVenda.iVendedor = tOrcamentoVenda.iVendedor
    
    Call Comando_Fechar(lComando)

    OrcamentoVenda_Le_NumIntPedVenda = SUCESSO

    Exit Function

Erro_OrcamentoVenda_Le_NumIntPedVenda:

    OrcamentoVenda_Le_NumIntPedVenda = gErr

    Select Case gErr

        Case 94456 'Tratado na rotina chamadora

        Case 94454, 94455
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)
        
        Case 94453
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150199)
    
    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function
 
Function OrcamentoVenda_Le_NumIntNFiscal(objOrcamentoVenda As ClassOrcamentoVenda) As Long
'Lê o Orcamento de Venda a partir do NumIntNFiscal passado.

Dim lComando As Long
Dim lErro As Long
Dim tOrcamentoVenda As typeOrcamentoVenda
Dim iPrazoValidade As Integer

On Error GoTo Erro_OrcamentoVenda_Le_NumIntNFiscal

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 101302

    tOrcamentoVenda.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    tOrcamentoVenda.sNomeCli = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    tOrcamentoVenda.sNomeFilialCli = String(STRING_FILIAL_CLIENTE_NOME, 0)
    
    lErro = Comando_Executar(lComando, "SELECT NaturezaOp, NumIntNFiscal, Codigo, FilialEmpresa, NomeCli, NomeFilialCli, Vendedor, Cliente, Filial, CondicaoPagto, PercAcrescFinanceiro, DataEmissao,  ValorTotal, ValorFrete, ValorDesconto, ValorSeguro, TabelaPreco, DataReferencia, NumIntDoc,ValorOutrasDespesas,ValorProdutos, PrazoValidade FROM OrcamentoVenda WHERE NumIntNFiscal = ? ", _
    tOrcamentoVenda.sNaturezaOp, tOrcamentoVenda.lNumIntNFiscal, tOrcamentoVenda.lCodigo, tOrcamentoVenda.iFilialEmpresa, tOrcamentoVenda.sNomeCli, tOrcamentoVenda.sNomeFilialCli, tOrcamentoVenda.iVendedor, tOrcamentoVenda.lCliente, tOrcamentoVenda.iFilial, tOrcamentoVenda.iCondicaoPagto, tOrcamentoVenda.dPercAcrescFinanceiro, tOrcamentoVenda.dtDataEmissao, tOrcamentoVenda.dValorTotal, tOrcamentoVenda.dValorFrete, tOrcamentoVenda.dValorDesconto, tOrcamentoVenda.dValorSeguro, tOrcamentoVenda.iTabelaPreco, tOrcamentoVenda.dtDataReferencia, tOrcamentoVenda.lNumIntDoc, tOrcamentoVenda.dValorOutrasDespesas, tOrcamentoVenda.dValorProdutos, iPrazoValidade, objOrcamentoVenda.lNumIntNFiscal)
    If lErro <> AD_SQL_SUCESSO Then gError 101303

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 101304
    
    'Se não encontrou ---> Erro tratado na rotina Chamadora
    If lErro = AD_SQL_SEM_DADOS Then gError 101305

    objOrcamentoVenda.lCodigo = tOrcamentoVenda.lCodigo
    objOrcamentoVenda.iFilialEmpresa = tOrcamentoVenda.iFilialEmpresa
    objOrcamentoVenda.lNumIntNFiscal = tOrcamentoVenda.lNumIntNFiscal
    objOrcamentoVenda.sNomeFilialCli = tOrcamentoVenda.sNomeFilialCli
    objOrcamentoVenda.sNomeCli = tOrcamentoVenda.sNomeCli
    objOrcamentoVenda.iPrazoValidade = iPrazoValidade
    objOrcamentoVenda.lCliente = tOrcamentoVenda.lCliente
    objOrcamentoVenda.iFilial = tOrcamentoVenda.iFilial
    objOrcamentoVenda.iCondicaoPagto = tOrcamentoVenda.iCondicaoPagto
    objOrcamentoVenda.dPercAcrescFinanceiro = tOrcamentoVenda.dPercAcrescFinanceiro
    objOrcamentoVenda.dtDataEmissao = tOrcamentoVenda.dtDataEmissao
    objOrcamentoVenda.sNaturezaOp = tOrcamentoVenda.sNaturezaOp
    objOrcamentoVenda.dValorTotal = tOrcamentoVenda.dValorTotal
    objOrcamentoVenda.dValorFrete = tOrcamentoVenda.dValorFrete
    objOrcamentoVenda.dValorDesconto = tOrcamentoVenda.dValorDesconto
    objOrcamentoVenda.dValorOutrasDespesas = tOrcamentoVenda.dValorOutrasDespesas
    objOrcamentoVenda.dValorSeguro = tOrcamentoVenda.dValorSeguro
    objOrcamentoVenda.iTabelaPreco = tOrcamentoVenda.iTabelaPreco
    objOrcamentoVenda.dtDataReferencia = tOrcamentoVenda.dtDataReferencia
    objOrcamentoVenda.lNumIntDoc = tOrcamentoVenda.lNumIntDoc
    objOrcamentoVenda.dValorProdutos = tOrcamentoVenda.dValorProdutos
    objOrcamentoVenda.iVendedor = tOrcamentoVenda.iVendedor
    
    Call Comando_Fechar(lComando)

    OrcamentoVenda_Le_NumIntNFiscal = SUCESSO

    Exit Function

Erro_OrcamentoVenda_Le_NumIntNFiscal:

    OrcamentoVenda_Le_NumIntNFiscal = gErr

    Select Case gErr

        Case 101305 'Tratado na rotina chamadora

        Case 101303, 101304
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)
        
        Case 101302
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150200)
    
    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CustoEmbMP_Le(ByVal objCustoEmb As ClassCustoEmbMP) As Long
'faz uma leitura na tabela CustoEmbMP. Parametros :ClassCustoEmbMP.sproduto e ClassCustoEmbMP.ifilialempresa

Dim lComando As Long
Dim lErro As Long
Dim tCustoEmbMP As typeCustoEmbMP

On Error GoTo Erro_CustoEmbMP_Le

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116306

    'Verifica se a relação produto/custo existe, e se existir carrega seus dados em objCustoEmb
    With tCustoEmbMP
        lErro = Comando_Executar(lComando, "SELECT DataAtualizacao, Custo, AliquotaICMS, FretePorKg, CondicaoPagto, AliquotaICMSInf, CondicaoPagtoInf, FretePorKGInf FROM CustoEmbMP WHERE Produto =? AND FilialEmpresa =?", _
            .dtDataAtualizacao, .dCusto, .dAliquotaICMS, .dFretePorKg, .iCondicaoPagto, .iAliquotaICMSInf, .iCondicaoPagtoInf, .iFretePorKGInf, objCustoEmb.sProduto, objCustoEmb.iFilialEmpresa)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 116307

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116308

    'não encontrou relação
    If lErro = AD_SQL_SEM_DADOS Then gError 116309

    'guarda os dados lidos no objcustoemb
    With tCustoEmbMP
        objCustoEmb.dAliquotaICMS = .dAliquotaICMS
        objCustoEmb.dCusto = .dCusto
        objCustoEmb.dFretePorKg = .dFretePorKg
        objCustoEmb.dtDataAtualizacao = .dtDataAtualizacao
        objCustoEmb.iCondicaoPagto = .iCondicaoPagto
        objCustoEmb.iAliquotaICMSInf = .iAliquotaICMSInf
        objCustoEmb.iCondicaoPagtoInf = .iCondicaoPagtoInf
        objCustoEmb.iFretePorKGInf = .iFretePorKGInf
    End With
    
    'fecha o comando
    Call Comando_Fechar(lComando)

    CustoEmbMP_Le = SUCESSO

    Exit Function

Erro_CustoEmbMP_Le:

    CustoEmbMP_Le = gErr

    Select Case gErr

        Case 116306
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116307, 116308
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMP", gErr)

        Case 116309 'não achou custos referentes ao produto

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150201)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Criado por Adriano em 31/03/03
Public Function CustoDirFabr_Le(ByVal objCustoDirFabr As ClassCustoDirFabr) As Long
'Lê no Bd à partir do Ano e FilialEmpresa passados como parametro

Dim lErro As Long
Dim lComando As Long
Dim tCusto As typeCustoDirFabr

On Error GoTo Erro_CustoDirFabr_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 117234

    tCusto.sCodigoPrevVenda = String(STRING_PREVVENDA_CODIGO, 0)
         
    'Busca no BD um registro
    With tCusto
        lErro = Comando_Executar(lComando, "SELECT CodigoPrevVenda, Data, CustoTotal, CustoFator1, CustoFator2, CustoFator3, CustoFator4, CustoFator5, CustoFator6, QuantFator1, QuantFator2, QuantFator3, QuantFator4, QuantFator5, QuantFator6, MesIni, MesFim FROM CustoDirFabr WHERE FilialEmpresa =? AND Ano=?", _
            .sCodigoPrevVenda, .dtData, .dCustoTotal, .dCustoFator1, .dCustoFator2, .dCustoFator3, .dCustoFator4, .dCustoFator5, .dCustoFator6, _
            .dQuantFator1, .dQuantFator2, .dQuantFator3, .dQuantFator4, .dQuantFator5, .dQuantFator6, .iMesIni, .iMesFim, objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.iAno)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 117235

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 117236

    If lErro = AD_SQL_SEM_DADOS Then gError 117237
    
    'Preenche o obj
    With objCustoDirFabr
        .sCodigoPrevVenda = tCusto.sCodigoPrevVenda
        .dtData = tCusto.dtData
        .dCustoTotal = tCusto.dCustoTotal
        .dCustoFator1 = tCusto.dCustoFator1
        .dCustoFator2 = tCusto.dCustoFator2
        .dCustoFator3 = tCusto.dCustoFator3
        .dCustoFator4 = tCusto.dCustoFator4
        .dCustoFator5 = tCusto.dCustoFator5
        .dCustoFator6 = tCusto.dCustoFator6
        .dQuantFator1 = tCusto.dQuantFator1
        .dQuantFator2 = tCusto.dQuantFator2
        .dQuantFator3 = tCusto.dQuantFator3
        .dQuantFator4 = tCusto.dQuantFator4
        .dQuantFator5 = tCusto.dQuantFator5
        .dQuantFator6 = tCusto.dQuantFator6
        .iMesIni = tCusto.iMesIni
        .iMesFim = tCusto.iMesFim
    End With
    
    'fecha o comando
    Call Comando_Fechar(lComando)

    CustoDirFabr_Le = SUCESSO

    Exit Function

Erro_CustoDirFabr_Le:

    CustoDirFabr_Le = gErr

    Select Case gErr

        Case 117234
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 117235, 117236
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTODIRFABRCALCULA_ANO_INVALIDO", gErr) 'Cadastrar mensagem

        Case 117237 'registro nao encontrado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150202)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PrevVendaMensal_Le_Codigo(ByVal sCodigo As String, ByVal iFilialEmpresa As Integer) As Long
'Verifica se a previsão de Vendas Mensal de códio e FilialEmpresa passados existem

Dim lErro As Long
Dim iFilial As Integer
Dim lComando As Long

On Error GoTo Erro_PrevVendaMensal_Le_Codigo

    'Abertura de comandos
    lComando = Comando_Abrir()
    If lErro <> SUCESSO Then gError 90200
    
    If iFilialEmpresa = EMPRESA_TODA Then
    
        'Pesquisa no BD se existe a Previsão de Vendas Mensais com o código passado, para a Empresa toda
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa FROM PrevVendaMensal WHERE Codigo = ? ", iFilial, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 90201
    Else
        'Pesquisa no BD se existe a Previsão de Vendas Mensais com o código passado, para uma FilialEmpresa
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa FROM PrevVendaMensal WHERE Codigo = ? AND FilialEmpresa = ?", iFilial, sCodigo, iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 90201
    
    End If
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90202
    
    'PrevVendas não encontradas
    If lErro = AD_SQL_SEM_DADOS Then gError 90203
    
    'Fechamento de comandos
    Call Comando_Fechar(lComando)
    
    PrevVendaMensal_Le_Codigo = SUCESSO
    
    Exit Function
    
Erro_PrevVendaMensal_Le_Codigo:
    
    PrevVendaMensal_Le_Codigo = gErr
    
    Select Case gErr
        
        Case 90200
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 90201, 90202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDAMENSAL", gErr, sCodigo)
        
        Case 90203 'PrevVendas não cadastrada
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150203)
    
    End Select
    
    'Fechamento de comandos
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function CustoFixoProd_Le(ByVal objCustoFixoProd As ClassCustoFixoProd) As Long
'Lê o registro na tabela CustoFixoProd

Dim lErro As Long
Dim lComando As Long
Dim tCustoFixoProd As typeCustoFixoProd

On Error GoTo Erro_CustoFixoProd_Le

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116388

    tCustoFixoProd.sProduto = String(STRING_PRODUTO, 0)

    'faz um select na tabela c/ a data, produto e filial como parametro
    lErro = Comando_Executar(lComando, "SELECT DataReferencia, Produto, Custo, CustoCalculado, Automatico FROM CustoFixoProd WHERE DataReferencia = ? AND FilialEmpresa = ? AND Produto = ?", tCustoFixoProd.dtDataReferencia, tCustoFixoProd.sProduto, tCustoFixoProd.dCusto, tCustoFixoProd.dCustoCalculado, tCustoFixoProd.iAutomatico, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 116389

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116390

    'se não encontrar, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 116391

    'carrega o obj c/ os dados lidos
    With tCustoFixoProd
        objCustoFixoProd.dCusto = .dCusto
        objCustoFixoProd.dCustoCalculado = .dCustoCalculado
        objCustoFixoProd.dtDataReferencia = .dtDataReferencia
        objCustoFixoProd.sProduto = .sProduto
        objCustoFixoProd.iAutomatico = .iAutomatico
    End With

    Call Comando_Fechar(lComando)

    CustoFixoProd_Le = SUCESSO

    Exit Function

Erro_CustoFixoProd_Le:

    CustoFixoProd_Le = gErr

    Select Case gErr

        Case 116391 'sem dados ==> tratado na rotina chamadora
        
        Case 116388
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116389, 116390
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOFIXOPROD", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150204)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CustoFixoProd_Le_Anterior(ByVal objCustoFixoProd As ClassCustoFixoProd, dCusto As Double) As Long
'Le na tabela CustoFixoProd o Custo do produto na data referente anterior

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_CustoFixoProd_Le_Anterior
    
    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116392

    'Seleciona o custo da data referente anterior c/ o mesmo produto
    lErro = Comando_Executar(lComando, "SELECT Custo FROM CustoFixoProd WHERE DataReferencia < ? AND FilialEmpresa = ? AND Produto = ? ORDER BY DataReferencia DESC ", dCusto, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 116393

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116394

    'se não achou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 116395
        
    Call Comando_Fechar(lComando)

    CustoFixoProd_Le_Anterior = SUCESSO

    Exit Function

Erro_CustoFixoProd_Le_Anterior:

    CustoFixoProd_Le_Anterior = gErr
    
    Select Case gErr

        Case 116392
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116393, 116394
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOFIXOPROD", gErr)

        Case 116395 'sem dados ==> tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150205)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TipoFreteFP_Le(ByVal objTipo As ClassTipoFreteFP) As Long
'Lê os dados do Tipo, cujo codigo foi passado como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim tTipo As typeTipoFreteFP

On Error GoTo Erro_TipoFreteFP_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116910

    With tTipo
        .sNomeReduzido = String(STRING_TIPO_FRETE_NOME_REDUZIDO, 0)
        .sDescricao = String(STRING_TIPO_FRETE_DESCRICAO, 0)

        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, NomeReduzido, Descricao, Preco, DataAtualizacao FROM TipoFreteFP WHERE Codigo = ? ", .iFilialEmpresa, .sNomeReduzido, .sDescricao, .dPreco, .dtDataAtualizacao, objTipo.iCodigo)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 116911

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116912

    'Se não encontrou Tipo -> Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 116913

    With tTipo
        objTipo.iFilialEmpresa = .iFilialEmpresa
        objTipo.sNomeReduzido = .sNomeReduzido
        objTipo.sDescricao = .sDescricao
        objTipo.dPreco = .dPreco
        objTipo.dtDataAtualizacao = .dtDataAtualizacao
    End With
    
    lErro = Comando_Fechar(lComando)

    TipoFreteFP_Le = SUCESSO

    Exit Function

Erro_TipoFreteFP_Le:

    TipoFreteFP_Le = gErr

    Select Case gErr

        Case 116910
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116911, 116912
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116913
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150206)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function DVVCliente_Le(ByVal objDVVCliente As ClassDVVCliente) As Long
'faz leitura no BD a partir do Cód. do cliente, cód. da filial e filialempresa

Dim lComando As Long
Dim lErro As Long
Dim tDVVCliente As typeDVVCliente

On Error GoTo Erro_DVVCliente_Le

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116478

    'Verifica se existe o registro na tabela DVVCLiente
    lErro = Comando_Executar(lComando, "SELECT TipoFrete FROM DVVCliente WHERE FilialEmpresa =? AND CodCliente =? AND CodFilial = ?", tDVVCliente.iTipoFrete, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 116479

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116480

    'não encontrou registro
    If lErro = AD_SQL_SEM_DADOS Then gError 116481

    objDVVCliente.iTipoFrete = tDVVCliente.iTipoFrete
    
    'fecha o comando
    Call Comando_Fechar(lComando)

    DVVCliente_Le = SUCESSO

    Exit Function

Erro_DVVCliente_Le:

    DVVCliente_Le = gErr

    Select Case gErr

        Case 116478
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116479, 116480
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTE", gErr)

        Case 116481 'não achou registros

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150207)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Public Function DVVCliente_Le_Itens(ByVal objDVVCliente As ClassDVVCliente) As Long
'Le na tabela de DVVCLienteProd todos os registros de uma filialempresa/Cliente/filial
'parametros:cód. cliente, cód. filial, filialempresa

Dim lErro As Long
Dim iIndice As Integer
Dim lComando As Long
Dim objDVVClienteProd As ClassDVVClienteProd
Dim tDVVClienteProd As typeDVVClienteProd

On Error GoTo Erro_DVVCliente_Le_Itens

    'Inicializar comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116482

    'inicializa a string
    tDVVClienteProd.sProduto = String(STRING_PRODUTO, 0)
    
    'Executar comando SQL de busca na tabela DVVCleinteProd
    lErro = Comando_Executar(lComando, "SELECT Produto, PercDVV, Paletizacao FROM DVVClienteProd WHERE CodCliente = ? AND CodFilial = ? AND FilialEmpresa = ? ", tDVVClienteProd.sProduto, tDVVClienteProd.dPercDVV, tDVVClienteProd.iPaletizacao, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial, objDVVCliente.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116483

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116484

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 116486

    'Passa todos para a collection
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objDVVClienteProd = New ClassDVVClienteProd

        'preenche o obj com os dados lidos
        With tDVVClienteProd
            objDVVClienteProd.iFilialEmpresa = objDVVCliente.iFilialEmpresa
            objDVVClienteProd.lCodCliente = objDVVCliente.lCodCliente
            objDVVClienteProd.iCodFilial = objDVVCliente.iCodFilial
            objDVVClienteProd.sProduto = .sProduto
            objDVVClienteProd.dPercDVV = .dPercDVV
            objDVVClienteProd.iPaletizacao = .iPaletizacao
        End With
        
        'adiciona o obj na collection
        objDVVCliente.colDVVCLienteProd.Add objDVVClienteProd

        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116485

    Loop

    Call Comando_Fechar(lComando)

    DVVCliente_Le_Itens = SUCESSO

    Exit Function

Erro_DVVCliente_Le_Itens:

    DVVCliente_Le_Itens = gErr

    Select Case gErr

        Case 116486

        Case 116482
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116483, 116484, 116485
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTEPROD", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150208)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CustoFixo_ObterDataUltCalc(ByVal iFilialEmpresa As Integer, dtDataUltCalc As Date) As Long
'obtem a maior data de execucao da rotina de rateio de custo fixo para a filialempresa informada

Dim lErro As Long, lComando As Long

On Error GoTo Erro_CustoFixo_ObterDataUltCalc

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 106650
            
    lErro = Comando_Executar(lComando, "SELECT MAX(DataReferencia) FROM CustoFixo WHERE FilialEmpresa = ?", dtDataUltCalc, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 106651
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106652
    
    If lErro <> AD_SQL_SUCESSO Then dtDataUltCalc = DATA_NULA
    
    Call Comando_Fechar(lComando)
    
    CustoFixo_ObterDataUltCalc = SUCESSO
     
    Exit Function
    
Erro_CustoFixo_ObterDataUltCalc:

    CustoFixo_ObterDataUltCalc = gErr
     
    Select Case gErr
          
        Case 106650
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 106651, 106652
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOFIXO_DATA", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150209)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function MargContr_Le_DVV(ByVal objMargContr As ClassMargContr) As Long
'le os registros nas tabelas DVVlin e DVVlinCol

Dim lErro As Long

On Error GoTo Erro_MargContr_Le_DVV

    'le a tabela DVVlin
    lErro = CF("DVVLin_Le_Todos", objMargContr.colDVVLin)
    If lErro <> SUCESSO And lErro <> 119636 Then gError 119604

    'le a tablela DVVlinCol
    lErro = CF("DVVLinCol_Le_Todos", objMargContr.colDVVLinCol)
    If lErro <> SUCESSO And lErro <> 119637 Then gError 119605
    
    MargContr_Le_DVV = SUCESSO

    Exit Function

Erro_MargContr_Le_DVV:

    MargContr_Le_DVV = gErr

    Select Case gErr

        Case 119605, 119604
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150210)

    End Select
    
    Exit Function
        
End Function

Public Function DVVLin_Le_Todos(ByVal colDVVLin As Collection) As Long
'Lê e retorna todos os registros da tabela DVVLin

Dim lErro As Long
Dim lComando As Long
Dim objDVVLin As ClassDVVLin
Dim tDVVLin As TypeDVVLin

On Error GoTo Erro_DVVLin_Le_Todos

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119584
    
    'inicializa a string de descricao
    tDVVLin.sDescricao = String(STRING_DVVLIN_DESCRICAO, 0)
    
    'Executar comando SQL de busca na tabela DVVlin
    lErro = Comando_Executar(lComando, "SELECT Linha, Descricao FROM DVVLin ORDER BY Linha", tDVVLin.iLinha, tDVVLin.sDescricao)
    If lErro <> AD_SQL_SUCESSO Then gError 119585

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119586

    'erro sem dados
    If lErro = AD_SQL_SEM_DADOS Then gError 119636
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS

        'instancia o obj
        Set objDVVLin = New ClassDVVLin

        'preenche o obj com os dados lidos
        With tDVVLin
            objDVVLin.sDescricao = .sDescricao
            objDVVLin.iLinha = .iLinha
        End With
        
        'adiciona o obj na collection
        colDVVLin.Add objDVVLin

        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119587

    Loop
    
    Call Comando_Fechar(lComando)
    
    DVVLin_Le_Todos = SUCESSO

    Exit Function

Erro_DVVLin_Le_Todos:

    DVVLin_Le_Todos = gErr

    Select Case gErr

        Case 119636 'erro sem dados

        Case 119584
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119586, 119585, 119587
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVLIN", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150211)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function DVVLinCol_Le_Todos(ByVal colDVVLinCol As Collection) As Long
'Lê e retorna todos os registros da tabela DVVLinCol

Dim lErro As Long
Dim lComando As Long
Dim objDVVLinCol As ClassDVVLinCol
Dim tDVVLinCol As TypeDVVLinCol

On Error GoTo Erro_DVVLinCol_Le_Todos

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119603
    
    'inicializa a string de formula
    tDVVLinCol.sFormula = String(STRING_FORMACAOPRECO_EXPRESSAO, 0)
    
    'Executar comando SQL de busca na tabela DVVLinCol
    lErro = Comando_Executar(lComando, "SELECT Coluna, Linha, Formula FROM DVVLinCol ORDER BY Linha,Coluna", tDVVLinCol.iColuna, tDVVLinCol.iLinha, tDVVLinCol.sFormula)
    If lErro <> AD_SQL_SUCESSO Then gError 119588

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119589

    'erro sem dados
    If lErro = AD_SQL_SEM_DADOS Then gError 119637

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS

        'instancia o ojb
        Set objDVVLinCol = New ClassDVVLinCol

        'preenche o obj com os dados lidos
        With tDVVLinCol
            objDVVLinCol.sFormula = .sFormula
            objDVVLinCol.iLinha = .iLinha
            objDVVLinCol.iColuna = .iColuna
        End With
        
        'adiciona o obj na collection
        colDVVLinCol.Add objDVVLinCol

        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119590

    Loop
    
    Call Comando_Fechar(lComando)
    
    DVVLinCol_Le_Todos = SUCESSO

    Exit Function

Erro_DVVLinCol_Le_Todos:

    DVVLinCol_Le_Todos = gErr

    Select Case gErr

        Case 119637 'erro sem dados

        Case 119603
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119588, 119589, 119590
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVLINCOL", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150212)

    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function MargContr_Le_Analise(ByVal objMargContr As ClassMargContr) As Long
'Faz uma leitura no bd p/ preencher as col. referentes ao grid de analise

Dim lErro As Long

On Error GoTo Erro_MargContr_Le_Analise

    'le a tabela PlanMargContrCol
    lErro = CF("PlanMargContrCol_Le_Todos", objMargContr.colPlanMargContrCol)
    If lErro <> SUCESSO And lErro <> 119639 Then gError 119606

    'le a tablela PlanMargContrlin
    lErro = CF("PlanMargContrLin_Le_Todos", objMargContr.colPlanMargContrLin)
    If lErro <> SUCESSO And lErro <> 119640 Then gError 119607

    'le a tabela PlanMargContrLinCol
    lErro = CF("PlanMargContrLinCol_Le_Todos", objMargContr.colPlanMargContrLinCol)
    If lErro <> SUCESSO And lErro <> 119641 Then gError 119608
        
    MargContr_Le_Analise = SUCESSO

    Exit Function

Erro_MargContr_Le_Analise:

    MargContr_Le_Analise = gErr

    Select Case gErr

        Case 119606, 119607, 119608
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150213)

    End Select
    
    Exit Function
        
End Function

Public Function PlanMargContrCol_Le_Todos(ByVal colPlanMargContrCol As Collection) As Long
'Lê e retorna todos os registros da tabela PlanMargContrCol

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrCol As ClassPlanMargContrCol
Dim tPlanMargContrCol As TypePlanMargContrCol

On Error GoTo Erro_PlanMargContrCol_Le_Todos

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119591
        
    'inicializa as strings
    tPlanMargContrCol.sDescricao = String(STRING_PLANMARGCONTRLIN_DESCRICAO, 0)
    tPlanMargContrCol.sTitulo = String(STRING_PLANMARGCONTRCOL_TITULO, 0)
    
    'Executar comando SQL de busca na tabela PlanMargContrCol
    lErro = Comando_Executar(lComando, "SELECT Coluna, Titulo, Descricao FROM PlanMargContrCol ORDER BY Coluna", tPlanMargContrCol.iColuna, tPlanMargContrCol.sTitulo, tPlanMargContrCol.sDescricao)
    If lErro <> AD_SQL_SUCESSO Then gError 119592
    
    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119593

    'erro sem dados
    If lErro = AD_SQL_SEM_DADOS Then gError 119639

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objPlanMargContrCol = New ClassPlanMargContrCol

        'preenche o obj com os dados lidos
        With tPlanMargContrCol
            objPlanMargContrCol.iColuna = .iColuna
            objPlanMargContrCol.sTitulo = .sTitulo
            objPlanMargContrCol.sDescricao = .sDescricao
        End With
        
        'adiciona o obj na collection
        colPlanMargContrCol.Add objPlanMargContrCol

        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119594

    Loop
    
    'fecha o comando
    Call Comando_Fechar(lComando)

    PlanMargContrCol_Le_Todos = SUCESSO

    Exit Function

Erro_PlanMargContrCol_Le_Todos:

    PlanMargContrCol_Le_Todos = gErr

    Select Case gErr

        Case 119639 'erro sem dados

        Case 119591
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119592, 119593, 119594
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150214)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function PlanMargContrLin_Le_Todos(ByVal colPlanMargContrLin As Collection) As Long
'Lê e retorna todos os registros da tabela PlanMargControlLin

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLin As ClassPlanMargContrLin
Dim tPlanMargContrLin As TypePlanMargContrLin

On Error GoTo Erro_PlanMargContrLin_Le_Todos

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119609

    'inicializa as strings
    tPlanMargContrLin.sDescricao = String(STRING_DVVLIN_DESCRICAO, 0)
    tPlanMargContrLin.sFormulaGeral = String(STRING_FORMACAOPRECO_EXPRESSAO, 0)
    tPlanMargContrLin.sFormulaL1 = String(STRING_FORMACAOPRECO_EXPRESSAO, 0)
    
    'Executar comando SQL de busca na tabela PlanMargContrLin
    lErro = Comando_Executar(lComando, "SELECT Linha, Descricao, FormulaGeral, FormulaL1, Formato, Editavel FROM PlanMargContrLin ORDER BY Linha", tPlanMargContrLin.iLinha, tPlanMargContrLin.sDescricao, tPlanMargContrLin.sFormulaGeral, tPlanMargContrLin.sFormulaL1, tPlanMargContrLin.iFormato, tPlanMargContrLin.iEditavel)
    If lErro <> AD_SQL_SUCESSO Then gError 119595

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119596

    'erro sem dados
    If lErro = AD_SQL_SEM_DADOS Then gError 119640

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objPlanMargContrLin = New ClassPlanMargContrLin

        'preenche o obj com os dados lidos
        With tPlanMargContrLin
            objPlanMargContrLin.iFormato = .iFormato
            objPlanMargContrLin.iLinha = .iLinha
            objPlanMargContrLin.sDescricao = .sDescricao
            objPlanMargContrLin.sFormulaGeral = .sFormulaGeral
            objPlanMargContrLin.sFormulaL1 = .sFormulaL1
            objPlanMargContrLin.iEditavel = .iEditavel
        End With
        
        'adiciona o obj na collection
        colPlanMargContrLin.Add objPlanMargContrLin

        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119597

    Loop
    
    Call Comando_Fechar(lComando)

    PlanMargContrLin_Le_Todos = SUCESSO

    Exit Function

Erro_PlanMargContrLin_Le_Todos:

    PlanMargContrLin_Le_Todos = gErr

    Select Case gErr

        Case 119640 'erro sem dados

        Case 119609
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119595, 119596, 119597
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRLIN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150215)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function PlanMargContrLinCol_Le_Todos(ByVal colPlanMargContrLinCol As Collection) As Long
'Lê e retorna todos os registros da tabela PlanMargControlLinCol

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLinCol As ClassPlanMargContrLinCol
Dim tPlanMargContrLinCol As TypePlanMargContrLinCol

On Error GoTo Erro_PlanMargContrLinCol_Le_Todos

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119610
        
    'inicializa a string
    tPlanMargContrLinCol.sFormula = String(STRING_FORMACAOPRECO_EXPRESSAO, 0)
    
    'Executar comando SQL de busca na tabela PlanMargContrLinCol
    lErro = Comando_Executar(lComando, "SELECT Coluna, Linha, Formula FROM PlanMargContrLinCol ORDER BY Linha, Coluna", tPlanMargContrLinCol.iColuna, tPlanMargContrLinCol.iLinha, tPlanMargContrLinCol.sFormula)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119598

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119599

    'erro sem dados
    If lErro = AD_SQL_SEM_DADOS Then gError 119641

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objPlanMargContrLinCol = New ClassPlanMargContrLinCol

        'preenche o obj com os dados lidos
        With tPlanMargContrLinCol
            objPlanMargContrLinCol.iColuna = .iColuna
            objPlanMargContrLinCol.iLinha = .iLinha
            objPlanMargContrLinCol.sFormula = .sFormula
        End With
        
        'adiciona o obj na collection
        colPlanMargContrLinCol.Add objPlanMargContrLinCol

        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119600

    Loop
        
    'fecha o comando
    Call Comando_Fechar(lComando)

    PlanMargContrLinCol_Le_Todos = SUCESSO

    Exit Function

Erro_PlanMargContrLinCol_Le_Todos:

    PlanMargContrLinCol_Le_Todos = gErr

    Select Case gErr

        Case 119641 'erro sem dados

        Case 119610
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119598, 119599, 119600
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRLINCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150216)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function Produto_ObtemKGsOrcados(ByVal iFilialEmpresa As Integer, ByVal sProduto As String, ByVal iAno As Integer, ByVal sCodigoPrevVenda As String, dQtde As Double, lComando As Long) As Long
'retorna a qtde media mensal de previsao de venda para os dados informados (produto,filialempresa,ano,...)

Dim lErro As Long, tPrev As typePrevVendaMensal2, dAcumQuantMedia As Double

On Error GoTo Erro_Produto_ObtemKGsOrcados

    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 60461
    End If
    
    With tPrev
        lErro = Comando_Executar(lComando, "SELECT Quantidade1, Valor1, DataAtualizacao1, Quantidade2, Valor2, DataAtualizacao2, Quantidade3, Valor3, DataAtualizacao3, Quantidade4, Valor4, DataAtualizacao4" & _
            ", Quantidade5, Valor5, DataAtualizacao5, Quantidade6, Valor6, DataAtualizacao6, Quantidade7, Valor7, DataAtualizacao7, Quantidade8, Valor8, DataAtualizacao8, Quantidade9, Valor9, DataAtualizacao9" & _
            ", Quantidade10, Valor10, DataAtualizacao10, Quantidade11, Valor11, DataAtualizacao11, Quantidade12, Valor12, DataAtualizacao12" & _
            " FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND Produto = ?", _
            .adQuantidade(1), .adValor(1), .adtDataAtualizacao(1), .adQuantidade(2), .adValor(2), .adtDataAtualizacao(2), .adQuantidade(3), .adValor(3), .adtDataAtualizacao(3), .adQuantidade(4), .adValor(4), .adtDataAtualizacao(4), _
            .adQuantidade(5), .adValor(5), .adtDataAtualizacao(5), .adQuantidade(6), .adValor(6), .adtDataAtualizacao(6), .adQuantidade(7), .adValor(7), .adtDataAtualizacao(7), .adQuantidade(8), .adValor(8), .adtDataAtualizacao(8), .adQuantidade(9), .adValor(9), .adtDataAtualizacao(9), _
            .adQuantidade(10), .adValor(10), .adtDataAtualizacao(10), .adQuantidade(11), .adValor(11), .adtDataAtualizacao(11), .adQuantidade(12), .adValor(12), .adtDataAtualizacao(12), _
            iFilialEmpresa, sCodigoPrevVenda, iAno, sProduto)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 130519
        
    'ler 1o registro
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130520
    
    'se houver algum registro entao
    If lErro = AD_SQL_SUCESSO Then
    
        Do While lErro = AD_SQL_SUCESSO
        
            'acumular qtde media do produto para os meses validos
            Call CustoDiretoFabricacao_Calcula2(dAcumQuantMedia, tPrev, 1, 12)
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130521
        
        Loop
        
        lErro = CF("FPreco_ConvQtdeOrcCusto", sProduto, dAcumQuantMedia)
        If lErro <> SUCESSO Then gError 130522
        
        dQtde = dAcumQuantMedia
            
    Else
        dQtde = 0
    End If
    
    Produto_ObtemKGsOrcados = SUCESSO
     
    Exit Function
    
Erro_Produto_ObtemKGsOrcados:

    Produto_ObtemKGsOrcados = gErr
     
    Select Case gErr
          
        Case 130522
        
        Case 60461
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 130519, 130520, 130521
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDAMENSAL_REL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150217)
     
    End Select
     
    'Libera comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Produto_ObtemPrecoData(ByVal iFilialEmpresa As Integer, ByVal iTabelaPreco As Integer, ByVal sProduto As String, ByVal dtData As Date, dPreco As Double) As Long

Dim lErro As Long, dPrecoAux As Double, lComando As Long

On Error GoTo Erro_Produto_ObtemPrecoData

    'abrir comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 106956
    
    If giSQLTipoOrdParam = SQL_ORD_PARAM_ESQ_DIR Then
        lErro = Comando_Executar(lComando, "SELECT T1.Preco FROM TabelasDePrecoItens T1 WHERE T1.CodTabela = ? AND T1.FilialEmpresa = ? AND T1.CodProduto = ? AND DataVigencia = (SELECT MAX(DataVigencia) FROM TabelasDePrecoItens T2 WHERE T2.CodTabela = T1.CodTabela AND T2.FilialEmpresa = T1.FilialEmpresa AND T2.CodProduto = T1.CodProduto AND T2.DataVigencia <= ? )", _
            dPrecoAux, iTabelaPreco, iFilialEmpresa, sProduto, dtData)
    Else
        lErro = Comando_Executar(lComando, "SELECT T1.Preco FROM TabelasDePrecoItens T1 WHERE T1.CodTabela = ? AND T1.FilialEmpresa = ? AND T1.CodProduto = ? AND DataVigencia = (SELECT MAX(DataVigencia) FROM TabelasDePrecoItens T2 WHERE T2.CodTabela = T1.CodTabela AND T2.FilialEmpresa = T1.FilialEmpresa AND T2.CodProduto = T1.CodProduto AND T2.DataVigencia <= ? )", _
            dPrecoAux, dtData, iTabelaPreco, iFilialEmpresa, sProduto)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 106957
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106958
    
    If lErro = AD_SQL_SUCESSO Then
        dPreco = dPrecoAux
    Else
    
        If giSQLTipoOrdParam = SQL_ORD_PARAM_ESQ_DIR Then
            lErro = Comando_Executar(lComando, "SELECT T1.Preco FROM TabelasDePrecoItens T1 WHERE T1.CodTabela = ? AND T1.FilialEmpresa = ? AND T1.CodProduto = ? AND DataVigencia = (SELECT MAX(DataVigencia) FROM TabelasDePrecoItens T2 WHERE T2.CodTabela = T1.CodTabela AND T2.FilialEmpresa = T1.FilialEmpresa AND T2.CodProduto = T1.CodProduto AND T2.DataVigencia <= ? )", _
                dPrecoAux, iTabelaPreco, EMPRESA_TODA, sProduto, dtData)
        Else
            lErro = Comando_Executar(lComando, "SELECT T1.Preco FROM TabelasDePrecoItens T1 WHERE T1.CodTabela = ? AND T1.FilialEmpresa = ? AND T1.CodProduto = ? AND DataVigencia = (SELECT MAX(DataVigencia) FROM TabelasDePrecoItens T2 WHERE T2.CodTabela = T1.CodTabela AND T2.FilialEmpresa = T1.FilialEmpresa AND T2.CodProduto = T1.CodProduto AND T2.DataVigencia <= ? )", _
                dPrecoAux, dtData, iTabelaPreco, EMPRESA_TODA, sProduto)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 106957
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106958
    
        If lErro = AD_SQL_SUCESSO Then
            dPreco = dPrecoAux
        Else
            dPreco = 0
        End If
        
    End If
    
    Call Comando_Fechar(lComando)
    
    Produto_ObtemPrecoData = SUCESSO
     
    Exit Function
    
Erro_Produto_ObtemPrecoData:

    Produto_ObtemPrecoData = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150218)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Le_Completo(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Lê os dados de um campo genéricos e seus valores

Dim lErro As Long

On Error GoTo Erro_CamposGenericos_Le_Completo

    'Lê os dados do campo com código passado como parâmetro
    lErro = CF("CamposGenericos_Le", objCamposGenericos)
    If lErro <> SUCESSO And lErro <> 102295 Then gError 102317
    
    'Se não encontrou o campo = erro
    If lErro = 102295 Then gError 102318
    
    'Lê os valores cadastrados para o campo em questão
    lErro = CF("CamposGenericosValores_Le_CodCampo", objCamposGenericos)
    If lErro <> SUCESSO And lErro <> 102300 Then gError 102319
    
    'Se não encontrou valores para o campo = > erro
    If lErro = 102300 Then gError 102320
    
    CamposGenericos_Le_Completo = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_Le_Completo:

    CamposGenericos_Le_Completo = gErr
    
    Select Case gErr
    
        Case 102317, 102319
        
        Case 102318 'Campo não encontrado. Tratado na rotina chamadora
        
        Case 102320 'Valores para o campo não encontrado. Tratado na rotina chamadora.
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150219)
    
    End Select
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Le(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Lê um registro na tabela CamposGenericos a partir do código passado em objCamposGenericos

Dim lComando As Long
Dim lErro As Long
Dim tCamposGenericos As typeCamposGenericos

On Error GoTo Erro_CamposGenericos_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102292
    
    'Inicializa as variáveis que receberão strings
    tCamposGenericos.sDescricao = String(STRING_CAMPOSGENERICOS_DESCRICAO, 0)
    tCamposGenericos.sComentarios = String(STRING_CAMPOSGENERICOS_COMENTARIOS, 0)
    tCamposGenericos.sValidaExclusao = String(STRING_CAMPOSGENERICOS_VALIDAEXCLUSAO, 0)
    
    'Lê os dados do campo genérico com código passado como parâmetro
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, Comentarios, ProxCodValor, ValidaExclusao FROM CamposGenericos WHERE Codigo =  ?", tCamposGenericos.lCodigo, tCamposGenericos.sDescricao, tCamposGenericos.sComentarios, tCamposGenericos.lProxCodValor, tCamposGenericos.sValidaExclusao, objCamposGenericos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 102293
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102294
    
    'Se não encontrou o campo => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102295
    
    'Guarda no obj os valores lidos para o type
    With tCamposGenericos
    
        objCamposGenericos.lCodigo = .lCodigo
        objCamposGenericos.sDescricao = .sDescricao
        objCamposGenericos.sComentarios = .sComentarios
        objCamposGenericos.lProxCodValor = .lProxCodValor
        objCamposGenericos.sValidaExclusao = .sValidaExclusao
    
    End With
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_Le = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_Le:

    CamposGenericos_Le = gErr
    
    Select Case gErr
    
        Case 102292
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102293, 102294
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
        
        Case 102295 'Erro Sem Dados. Tratado na rotina chamadora.
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150220)
    
    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Le_CodCampo(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Lê os valores de um campo a partir do código do campo

Dim lComando As Long
Dim lErro As Long
Dim tCamposGenericosValores As typeCamposGenericosValores
Dim objCamposGenericosValores As ClassCamposGenericosValores

On Error GoTo Erro_CamposGenericosValores_Le_CodCampo

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102296
    
    'Inicializa as variáveis que receberão strings
    tCamposGenericosValores.sValor = String(STRING_CAMPOSGENERICOSVALORES_VALOR, 0)
    tCamposGenericosValores.sComplemento1 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento2 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento3 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento4 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento5 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    
    'Lê os valores cadastrados para o campo passado como parâmetro. A leitura é ordenada conforme a ordem a ser exibida no grid
    lErro = Comando_Executar(lComando, "SELECT CodCampo, CodValor, Padrao, Valor, Complemento1, Complemento2, Complemento3, Complemento4, Complemento5 FROM CamposGenericosValores WHERE CodCampo = ? ORDER BY CodValor", tCamposGenericosValores.lCodCampo, tCamposGenericosValores.lCodValor, tCamposGenericosValores.iPadrao, tCamposGenericosValores.sValor, tCamposGenericosValores.sComplemento1, tCamposGenericosValores.sComplemento2, tCamposGenericosValores.sComplemento3, tCamposGenericosValores.sComplemento4, tCamposGenericosValores.sComplemento5, objCamposGenericos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 102297
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102298
    
    'Se não encontrou o campo => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102300
    
    'Enquanto houverem valores para o campo em questão
    Do While lErro = AD_SQL_SUCESSO
    
        'Instancia um novo obj
        Set objCamposGenericosValores = New ClassCamposGenericosValores
        
        'Transfere para o obj os dados lidos para o type
        With tCamposGenericosValores
        
            objCamposGenericosValores.lCodCampo = .lCodCampo
            objCamposGenericosValores.lCodValor = .lCodValor
            objCamposGenericosValores.iPadrao = .iPadrao
            objCamposGenericosValores.sValor = .sValor
            objCamposGenericosValores.sComplemento1 = .sComplemento1
            objCamposGenericosValores.sComplemento2 = .sComplemento2
            objCamposGenericosValores.sComplemento3 = .sComplemento3
            objCamposGenericosValores.sComplemento4 = .sComplemento4
            objCamposGenericosValores.sComplemento5 = .sComplemento5
        
        End With
        
        'Guarda o obj na coleção de valores do campo em questão
        objCamposGenericos.colCamposGenericosValores.Add objCamposGenericosValores
        
        'Busca o próximo valor para o campo em questão
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102299
        
    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    CamposGenericosValores_Le_CodCampo = SUCESSO
    
    Exit Function
    
Erro_CamposGenericosValores_Le_CodCampo:

    CamposGenericosValores_Le_CodCampo = gErr
    
    Select Case gErr
    
        Case 102296
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102297 To 102299
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOSVALORES", gErr, objCamposGenericos.lCodigo)
        
        Case 102300 'Erro Sem Dados. Tratado na rotina chamadora.
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150221)
    
    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Le_CodCampo_CodValor(ByVal objCamposGenericosValores As ClassCamposGenericosValores) As Long
'Lê em CamposGenericosValores o valor com código e codcampo passados como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim tCamposGenericosValores As typeCamposGenericosValores

On Error GoTo Erro_CamposGenericosValores_Le_CodCampo_CodValor

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102396
    
    'Inicializa as variáveis que receberão strings
    tCamposGenericosValores.sValor = String(STRING_CAMPOSGENERICOSVALORES_VALOR, 0)
    tCamposGenericosValores.sComplemento1 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento2 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento3 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento4 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento5 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    
    'Lê os valores cadastrados para o campo passado como parâmetro. A leitura é ordenada conforme a ordem a ser exibida no grid
    lErro = Comando_Executar(lComando, "SELECT CodCampo, CodValor, Padrao, Valor, Complemento1, Complemento2, Complemento3, Complemento4, Complemento5 FROM CamposGenericosValores WHERE CodCampo = ? AND CodValor = ?", tCamposGenericosValores.lCodCampo, tCamposGenericosValores.lCodValor, tCamposGenericosValores.iPadrao, tCamposGenericosValores.sValor, tCamposGenericosValores.sComplemento1, tCamposGenericosValores.sComplemento2, tCamposGenericosValores.sComplemento3, tCamposGenericosValores.sComplemento4, tCamposGenericosValores.sComplemento5, objCamposGenericosValores.lCodCampo, objCamposGenericosValores.lCodValor)
    If lErro <> AD_SQL_SUCESSO Then gError 102397
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102398
    
    'Se não encontrou o campo => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102399

    'Transfere para o obj os dados lidos para o type
    With tCamposGenericosValores
    
        objCamposGenericosValores.lCodCampo = .lCodCampo
        objCamposGenericosValores.lCodValor = .lCodValor
        objCamposGenericosValores.iPadrao = .iPadrao
        objCamposGenericosValores.sValor = .sValor
        objCamposGenericosValores.sComplemento1 = .sComplemento1
        objCamposGenericosValores.sComplemento2 = .sComplemento2
        objCamposGenericosValores.sComplemento3 = .sComplemento3
        objCamposGenericosValores.sComplemento4 = .sComplemento4
        objCamposGenericosValores.sComplemento5 = .sComplemento5
    
    End With
    
    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    CamposGenericosValores_Le_CodCampo_CodValor = SUCESSO

    Exit Function

Erro_CamposGenericosValores_Le_CodCampo_CodValor:

    CamposGenericosValores_Le_CodCampo_CodValor = gErr

    Select Case gErr

        Case 102396
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102397, 102398
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOSVALORES1", gErr, objCamposGenericosValores.lCodValor, objCamposGenericosValores.lCodCampo)
        
        Case 102399 'Erro Sem Dados. Tratado na rotina chamadora.

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150222)

    End Select

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Le_CodCampo_Valor(ByVal objCamposGenericosValores As ClassCamposGenericosValores) As Long
'Lê em CamposGenericosValores o valor passados como parâmetro considerando o codcampo passado também

Dim lErro As Long
Dim lComando As Long
Dim tCamposGenericosValores As typeCamposGenericosValores

On Error GoTo Erro_CamposGenericosValores_Le_CodCampo_Valor

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102414
    
    'Inicializa as variáveis que receberão strings
    tCamposGenericosValores.sValor = String(STRING_CAMPOSGENERICOSVALORES_VALOR, 0)
    tCamposGenericosValores.sComplemento1 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento2 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento3 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento4 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    tCamposGenericosValores.sComplemento5 = String(STRING_CAMPOSGENERICOSVALORES_COMPLEMENTO, 0)
    
    'Lê os valores cadastrados para o campo passado como parâmetro. A leitura é ordenada conforme a ordem a ser exibida no grid
    lErro = Comando_Executar(lComando, "SELECT CodCampo, CodValor, Padrao, Valor, Complemento1, Complemento2, Complemento3, Complemento4, Complemento5 FROM CamposGenericosValores WHERE CodCampo = ? AND Valor = ?", tCamposGenericosValores.lCodCampo, tCamposGenericosValores.lCodValor, tCamposGenericosValores.iPadrao, tCamposGenericosValores.sValor, tCamposGenericosValores.sComplemento1, tCamposGenericosValores.sComplemento2, tCamposGenericosValores.sComplemento3, tCamposGenericosValores.sComplemento4, tCamposGenericosValores.sComplemento5, objCamposGenericosValores.lCodCampo, objCamposGenericosValores.sValor)
    If lErro <> AD_SQL_SUCESSO Then gError 102411
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102412
    
    'Se não encontrou o campo => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102413

    'Transfere para o obj os dados lidos para o type
    With tCamposGenericosValores
    
        objCamposGenericosValores.lCodCampo = .lCodCampo
        objCamposGenericosValores.lCodValor = .lCodValor
        objCamposGenericosValores.iPadrao = .iPadrao
        objCamposGenericosValores.sValor = .sValor
        objCamposGenericosValores.sComplemento1 = .sComplemento1
        objCamposGenericosValores.sComplemento2 = .sComplemento2
        objCamposGenericosValores.sComplemento3 = .sComplemento3
        objCamposGenericosValores.sComplemento4 = .sComplemento4
        objCamposGenericosValores.sComplemento5 = .sComplemento5
    
    End With
    
    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    CamposGenericosValores_Le_CodCampo_Valor = SUCESSO

    Exit Function

Erro_CamposGenericosValores_Le_CodCampo_Valor:

    CamposGenericosValores_Le_CodCampo_Valor = gErr

    Select Case gErr

        Case 102414
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102411, 102412
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOSVALORES1", gErr, objCamposGenericosValores.sValor, objCamposGenericosValores.lCodCampo)
        
        Case 102413 'Erro Sem Dados. Tratado na rotina chamadora.

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150223)

    End Select

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Le_Todos(ByVal colCamposGenericos As Collection) As Long
'Lê todos os campos genéricos existentes no BD

Dim lComando As Long
Dim lErro As Long
Dim tCamposGenericos As typeCamposGenericos
Dim objCamposGenericos As ClassCamposGenericos

On Error GoTo Erro_CamposGenericos_Le_Todos

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102304
    
    'Inicializa as variáveis que receberão strings
    tCamposGenericos.sDescricao = String(STRING_CAMPOSGENERICOS_DESCRICAO, 0)
    tCamposGenericos.sComentarios = String(STRING_CAMPOSGENERICOS_COMENTARIOS, 0)
    tCamposGenericos.sValidaExclusao = String(STRING_CAMPOSGENERICOS_VALIDAEXCLUSAO, 0)
    
    'Lê os dados dos campos genéricos existentes no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, Comentarios, ProxCodValor, ValidaExclusao FROM CamposGenericos ORDER BY Codigo", tCamposGenericos.lCodigo, tCamposGenericos.sDescricao, tCamposGenericos.sComentarios, tCamposGenericos.lProxCodValor, tCamposGenericos.sValidaExclusao)
    If lErro <> AD_SQL_SUCESSO Then gError 102305
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102306
    
    'Se não encontrou o campo => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102308
    
    Do While lErro = AD_SQL_SUCESSO
    
        'Instancia um novo obj
        Set objCamposGenericos = New ClassCamposGenericos
        
        'Guarda no obj os valores lidos para o type
        With tCamposGenericos
        
            objCamposGenericos.lCodigo = .lCodigo
            objCamposGenericos.sDescricao = .sDescricao
            objCamposGenericos.sComentarios = .sComentarios
            objCamposGenericos.lProxCodValor = .lProxCodValor
            objCamposGenericos.sValidaExclusao = .sValidaExclusao
        
        End With
        
        'Adiciona o campo à coleção de campos
        colCamposGenericos.Add objCamposGenericos
    
        'Busca o próximo campo cadastrado
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102307
    
    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_Le_Todos = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_Le_Todos:

    CamposGenericos_Le_Todos = gErr
    
    Select Case gErr
    
        Case 102304
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102305 To 102307
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
        
        Case 102308 'Erro Sem Dados. Tratado na rotina chamadora.
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150224)
    
    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_ValidaExclusao_Especie() As Long
'Verifica se é válida a exclusão de valores para o campo Espécie de Volume

Dim lComando As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim lCodEspecie As Long
Dim iUtilizacao As Integer
Dim sMsgErro As String

On Error GoTo Erro_CamposGenericos_ValidaExclusao_Especie
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102358
    
    'Busca em notas fiscais código de espécie de volume que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, VolumeEspecie, 1 AS Utilizacao FROM NFiscal WHERE VolumeEspecie NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND VolumeEspecie <> 0 UNION SELECT NumIntDoc, VolumeEspecie, 2 AS Utilizacao FROM PedidosDeVenda WHERE VolumeEspecie NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND VolumeEspecie <> 0 UNION SELECT NumIntDoc, VolumeEspecie, 2 AS Utilizacao FROM PedidosDeVendaBaixados WHERE VolumeEspecie NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND VolumeEspecie <> 0", lNumIntDoc, lCodEspecie, iUtilizacao, CAMPOSGENERICOS_VOLUMEESPECIE, CAMPOSGENERICOS_VOLUMEESPECIE, CAMPOSGENERICOS_VOLUMEESPECIE)
    If lErro <> AD_SQL_SUCESSO Then gError 102359
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102360
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 102361
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_Especie = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_Especie:

    CamposGenericos_ValidaExclusao_Especie = gErr
    
    Select Case gErr
    
        Case 102358
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102359, 102360
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL_CAMPOSGENERICOS", gErr)
        
        Case 102361
            
            Select Case iUtilizacao
                Case 1: sMsgErro = "ERRO_EXCLUSAO_VOLUMEESPECIE_NFISCAL"
                Case 2: sMsgErro = "ERRO_EXCLUSAO_VOLUMEESPECIE_PEDVENDA"
                Case 3: sMsgErro = "ERRO_EXCLUSAO_VOLUMEESPECIE_RECEBMATERIAIS"
            End Select
                
            Call Rotina_Erro(vbOKOnly, sMsgErro, gErr, lCodEspecie, lNumIntDoc)
            
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150225)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_ValidaExclusao_Marca() As Long
'Verifica se é válida a exclusão de valores para o campo Marca de Volume

Dim lComando As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim lCodMarca As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_Marca
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102362
    
    'Busca em notas fiscais códigos de marcas de volume que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, VolumeMarca FROM NFiscal WHERE VolumeMarca NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND VolumeMarca <> 0 UNION SELECT NumIntDoc, VolumeMarca FROM PedidosDeVenda WHERE VolumeMarca NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND VolumeMarca <> 0 UNION SELECT NumIntDoc, VolumeMarca FROM PedidosDeVendaBaixados WHERE VolumeMarca NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND VolumeMarca <> 0", lNumIntDoc, lCodMarca, CAMPOSGENERICOS_VOLUMEMARCA, CAMPOSGENERICOS_VOLUMEMARCA, CAMPOSGENERICOS_VOLUMEMARCA)
    If lErro <> AD_SQL_SUCESSO Then gError 102363
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102364
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 102365
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_Marca = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_Marca:

    CamposGenericos_ValidaExclusao_Marca = gErr
    
    Select Case gErr
    
        Case 102362
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102363, 102364
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL_CAMPOSGENERICOS", gErr)
        
        Case 102365
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_VOLUMEMARCA_NFISCAL", gErr, lCodMarca, lNumIntDoc)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150226)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_ValidaExclusao_Especie1() As Long
'Verifica se é válida a exclusão de valores para o campo Espécie de Volume

Dim lComando As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim sCodEspecie As String

On Error GoTo Erro_CamposGenericos_ValidaExclusao_Especie1
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102358
    
    sCodEspecie = String(STRING_NFISCAL_VOLUME_ESPECIE, 0)
    
    'Busca em notas fiscais código de espécie de volume que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, VolumeEspecie FROM NFiscal WHERE VolumeEspecie NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) UNION SELECT NumIntDoc, VolumeEspecie FROM PedidosDeVenda WHERE VolumeEspecie NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) UNION SELECT NumIntDoc, VolumeEspecie FROM PedidosDeVendaBaixados WHERE VolumeEspecie NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?)", lNumIntDoc, sCodEspecie, CAMPOSGENERICOS_VOLUMEESPECIE, CAMPOSGENERICOS_VOLUMEESPECIE, CAMPOSGENERICOS_VOLUMEESPECIE)
    If lErro <> AD_SQL_SUCESSO Then gError 102359
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102360
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 102361
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_Especie1 = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_Especie1:

    CamposGenericos_ValidaExclusao_Especie1 = gErr
    
    Select Case gErr
    
        Case 102358
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102359, 102360
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL_CAMPOSGENERICOS", gErr)
        
        Case 102361
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_VOLUMEESPECIE_NFISCAL", gErr, sCodEspecie, lNumIntDoc)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150227)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_ValidaExclusao_Marca1() As Long
'Verifica se é válida a exclusão de valores para o campo Marca de Volume
'ESSA FUNÇÃO É USADA APENAS PELA FUNÇÃO CamposGenericos_CorrigeBD_MarcaEspecie,
'POIS NESSE MOMENTO, O CAMPO VOLUMEMARCA AINDA É UMA STRING

Dim lComando As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim sCodMarca As String

On Error GoTo Erro_CamposGenericos_ValidaExclusao_Marca1
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102362
    
    sCodMarca = String(STRING_NFISCAL_VOLUME_MARCA, 0)
    
    'Busca em notas fiscais códigos de marcas de volume que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, VolumeMarca FROM NFiscal WHERE VolumeMarca NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) UNION SELECT NumIntDoc, VolumeMarca FROM PedidosDeVenda WHERE VolumeMarca NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) UNION SELECT NumIntDoc, VolumeMarca FROM PedidosDeVendaBaixados WHERE VolumeMarca NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?)", lNumIntDoc, sCodMarca, CAMPOSGENERICOS_VOLUMEMARCA, CAMPOSGENERICOS_VOLUMEMARCA, CAMPOSGENERICOS_VOLUMEMARCA)
    If lErro <> AD_SQL_SUCESSO Then gError 102363
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102364
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 102365
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_Marca1 = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_Marca1:

    CamposGenericos_ValidaExclusao_Marca1 = gErr
    
    Select Case gErr
    
        Case 102362
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102363, 102364
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL_CAMPOSGENERICOS", gErr)
        
        Case 102365
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_VOLUMEMARCA_NFISCAL", gErr, sCodMarca, lNumIntDoc)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150228)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function
 
'Incluído por Luiz Nogueira em 21/08/03
Public Function Carrega_CamposGenericos(ByVal lCodCampo As Long, ByVal objControle As Object, Optional ByVal bSelecionaPadrao As Boolean = True, Optional ByVal bComCodigo As Boolean = True, Optional ByVal bLinhaEmBranco As Boolean = False, Optional ByVal sComplemento1 As String = "") As Long
'Alterado por Wagner, Inserido <Optional byval bLinhaEmBranco as Boolean = False, Optional ByVal sComplemento1 As string = "">
'Carrega a combo passada como parâmetro com valores de campos genéricos, conforme o campo passado em lCodCampo

Dim lErro As Long
Dim objCamposGenericos As New ClassCamposGenericos
Dim objCamposGenericosValores As ClassCamposGenericosValores

On Error GoTo Erro_Carrega_CamposGenericos

    'Limpa o conteúdo da combo
    objControle.Clear
    
    '#####################################################
    'Inserido por Wagner 23/02/2005
    If bLinhaEmBranco Then
        objControle.AddItem ""
        objControle.ItemData(objControle.NewIndex) = 0
    End If
    '#####################################################
    
    'Indica o campo para o qual devem ser lidos os valores
    objCamposGenericos.lCodigo = lCodCampo
    
    'Lê todos os valores para o campo em questão
    lErro = CF("CamposGenericosValores_Le_CodCampo", objCamposGenericos)
    If lErro <> SUCESSO And lErro <> 102300 Then gError 102388
    
    'Para cada valor lido
    For Each objCamposGenericosValores In objCamposGenericos.colCamposGenericosValores
    
        '#####################################################
        'Inserido por Wagner 23/02/2005
        If sComplemento1 = "" Or objCamposGenericosValores.sComplemento1 = sComplemento1 Then
        '#####################################################
    
            'Carrega o valor na combo
            If bComCodigo Then
                objControle.AddItem objCamposGenericosValores.lCodValor & SEPARADOR & objCamposGenericosValores.sValor
            Else
                objControle.AddItem objCamposGenericosValores.sValor
            End If
            objControle.ItemData(objControle.NewIndex) = objCamposGenericosValores.lCodValor
            
            'Alterado por Luiz Nogueira em 27/10/03
            'Se é para selecionar o valor padrão
            If bSelecionaPadrao Then
            
                'Se for o valor padrão, seleciona-o na combo
                If objCamposGenericosValores.iPadrao = MARCADO Then objControle.ListIndex = objControle.NewIndex
            
            End If
    
        '#####################################################
        'Inserido por Wagner 23/02/2005
        End If
        '#####################################################
    
    Next
    
    Carrega_CamposGenericos = SUCESSO

    Exit Function

Erro_Carrega_CamposGenericos:

    Carrega_CamposGenericos = gErr

    Select Case gErr

        Case 102388
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150229)

    End Select

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Validate(ByVal lCodCampo As Long, ByVal objControle As Object, ByVal sMsgCriacao As String) As Long

Dim lErro As Long
Dim vbMsgRes As VbMsgBoxResult
Dim objCamposGenericos As ClassCamposGenericos
Dim objCamposGenericosValores As New ClassCamposGenericosValores
Dim lCodigo As Long

On Error GoTo Erro_CamposGenericos_Validate

    'Verifica se foi preenchida a ComboBox
    If Len(Trim(objControle.Text)) = 0 Then Exit Function

    'Verifica se está preenchida com o item selecionado na ComboBox
    If objControle.Text = objControle.List(objControle.ListIndex) Then Exit Function

    
    'Se o conteúdo do controle for numérico, significa que deve ser o código
    If LCodigo_Extrai(objControle.Text) > 0 Then
    
        'Verifica se o código digitado é um long positivo
'        lErro = Long_Critica(objControle.Text)
'        If lErro <> SUCESSO Then gError 102406
        
        'Guarda o código digitado
        lCodigo = LCodigo_Extrai(objControle.Text)
        
        'Pesquisa o item na combo pelo código. A pesquisa é feita pelo itemdata, pois o código
        'pode ser do tipo long e a função combo_seleciona não suporta esse tipo
        Call Combo_Seleciona_ItemData(objControle, lCodigo)
        'If lErro <> SUCESSO Then gError 102391
        
        'Se o conteúdo do controle continua sendo só o código, significa que não encontrou
        'pelo item data
        If objControle.Text = lCodigo Then
        
            'Guarda o código a ser pesquisado em CamposGenericosValores
            objCamposGenericosValores.lCodValor = lCodigo
            
            'Indica o campo ao qual pertence o valor pesquisado
            objCamposGenericosValores.lCodCampo = lCodCampo
            
            'Tentar encontrar o item em CamposGenericosValores
            lErro = CF("CamposGenericosValores_Le_CodCampo_CodValor", objCamposGenericosValores)
            If lErro <> SUCESSO And lErro <> 102399 Then gError 102392
            
            'Se não encontrou => erro
            If lErro = 102399 Then gError 102393
            
            'Exibe o registro encontrado
            objControle.Text = objCamposGenericosValores.lCodValor & SEPARADOR & objCamposGenericosValores.sValor
        
        End If
        
    'Se não é numérico, pesquisa usando combo_seleciona, pois a pesquisa será feita pelo nome
    Else
    
        'Verifica se existe o item na List da Combo. Se existir seleciona.
        lErro = Combo_Seleciona(objControle, CInt(lCodigo))
        If lErro <> SUCESSO And lErro <> 6730 And lErro <> 6731 Then gError 102394
        
        'Se não encontrou o código=> erro
        If lErro = 6730 Then gError 102395
        
        'Se não encontrou o valor
        If lErro = 6731 Then
        
            'Guarda o valor a ser pesquisado em CamposGenericosValores
            objCamposGenericosValores.sValor = Trim(objControle.Text)
            
            'Indica o campo ao qual pertence o valor pesquisado
            objCamposGenericosValores.lCodCampo = lCodCampo
            
            'Tentar encontrar o item em CamposGenericosValores
            lErro = CF("CamposGenericosValores_Le_CodCampo_Valor", objCamposGenericosValores)
            If lErro <> SUCESSO And lErro <> 102413 Then gError 102410
            
            'Se não encontrou => erro
            If lErro = 102413 Then gError 102395
            
            'Exibe o código - valor
            objControle.Text = objCamposGenericosValores.lCodValor & SEPARADOR & objCamposGenericosValores.sValor
        
        End If
    
    End If

    CamposGenericos_Validate = SUCESSO
    
    Exit Function

Erro_CamposGenericos_Validate:

    CamposGenericos_Validate = gErr

    Select Case gErr

        Case 102391, 102392, 102394, 102406, 102410

        Case 102393, 102395 'Não encontrou no BD

            vbMsgRes = Rotina_Aviso(vbYesNo, sMsgCriacao, objControle.Text, lCodCampo)

            If vbMsgRes = vbYes Then

                Set objCamposGenericos = New ClassCamposGenericos
                
                objCamposGenericos.lCodigo = lCodCampo
                
                Call Chama_Tela("CamposGenericos", objCamposGenericos, objControle.Text)

            End If

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150230)

    End Select

    Exit Function

End Function


Public Function ItensPVGrade_Le(ByVal objItemPedido As ClassItemPedido) As Long

Dim lComando As Long
Dim lErro As Long
Dim tItemRomaneio As typeItemRomaneioGrade
Dim objItemRomaneio As ClassItemRomaneioGrade

On Error GoTo Erro_ItensPVGrade_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86353
    
    With tItemRomaneio
    
        .sProduto = String(STRING_PRODUTO, 0)
        .sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
        .sSiglaUMEstoque = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc,NumIntItemPV,Produto,Quantidade,QuantCancelada,QuantReservada,QuantFaturada,QuantOP,QuantSC, Descricao, SiglaUMEstoque FROM ItensPedidoDeVendaGrade, Produtos WHERE Produtos.Codigo = ItensPedidoDeVendaGrade.Produto AND NumIntItemPV = ?", _
        .lNumIntDoc, .lNumIntItemPV, .sProduto, .dQuantidade, .dQuantCancelada, .dQuantReservada, .dQuantFaturada, .dQuantOP, .dQuantSC, .sDescricao, .sSiglaUMEstoque, objItemPedido.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 86354
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86355
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            objItemPedido.iPossuiGrade = MARCADO
            
            Set objItemRomaneio = New ClassItemRomaneioGrade
            
            objItemRomaneio.dQuantAFaturar = .dQuantAFaturar
            objItemRomaneio.dQuantCancelada = .dQuantCancelada
            objItemRomaneio.dQuantFaturada = .dQuantFaturada
            objItemRomaneio.dQuantidade = .dQuantidade
            objItemRomaneio.dQuantOP = .dQuantOP
            objItemRomaneio.dQuantReservada = .dQuantReservada
            objItemRomaneio.dQuantSC = .dQuantSC
            objItemRomaneio.lNumIntDoc = .lNumIntDoc
            objItemRomaneio.sDescricao = .sDescricao
            objItemRomaneio.sProduto = .sProduto
            objItemRomaneio.sUMEstoque = .sSiglaUMEstoque
            
            objItemPedido.colItensRomaneioGrade.Add objItemRomaneio
        
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86356
            
        Loop

    End With
    
    Call Comando_Fechar(lComando)
    
    ItensPVGrade_Le = SUCESSO
    
    Exit Function

Erro_ItensPVGrade_Le:
    
    ItensPVGrade_Le = gErr
        
    Select Case gErr
    
        Case 86353
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        
        Case 86354 To 86356
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPVGRADE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150231)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'************** FUNÇÃO CRIADA PARA TRATAR GRADE **********************
Public Function Produto_Le_PaiGrade(ByVal objProduto As ClassProduto, ByRef sProdutoPai As String) As Long
'Retorna o Código do Produto Pai de Grade para o objProduto passado
'Caso ele não tenha um pai de grade, ou apesar do pai ter uma grade, ele não
'seja um filho de grade (categorias nao preenchidas) o sProdutoPai retorna em Branco

Dim lComando As Long
Dim lErro As Long
Dim sCodigo As String
Dim sGrade As String
Dim objProdutoAux As New ClassProduto
Dim colItensRomaneioGrade As New Collection
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim iClasseUM As Integer

On Error GoTo Erro_Produto_Le_PaiGrade

    sProdutoPai = ""

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86323
    
    sCodigo = String(STRING_PRODUTO, 0)
    sGrade = String(STRING_GRADE_CODIGO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Codigo, Grade, CLasseUM FROM Produtos WHERE Codigo < ? AND Nivel = ? ORDER BY Codigo DESC", sCodigo, sGrade, iClasseUM, objProduto.sCodigo, objProduto.iNivel - 1)
    If lErro <> AD_SQL_SUCESSO Then gError 86324

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86325
    
    If (lErro = AD_SQL_SUCESSO) And Len(Trim(sGrade)) > 0 Then
            
        objProdutoAux.sCodigo = sCodigo
        objProdutoAux.sGrade = sGrade
        objProdutoAux.iNivel = objProduto.iNivel - 1
        objProdutoAux.iClasseUM = iClasseUM
    
        lErro = CF("Produto_Le_Filhos_Grade", objProdutoAux, colItensRomaneioGrade)
        If lErro <> SUCESSO Then Error 86326
    
        For Each objItemRomaneio In colItensRomaneioGrade
            If objItemRomaneio.sProduto = objProduto.sCodigo Then
                sProdutoPai = sCodigo
                Exit For
            End If
        Next
    
    End If
    
    Call Comando_Fechar(lComando)
    
    Produto_Le_PaiGrade = SUCESSO
    
    Exit Function

Erro_Produto_Le_PaiGrade:

    Produto_Le_PaiGrade = gErr
    
    Select Case gErr
    
        Case 86323
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 86324, 86325
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objProduto.sCodigo)

        Case 86326
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150232)

    End Select

    Exit Function

End Function

Public Function ItensNFGrade_Le(objItemNF As ClassItemNF) As Long

Dim lComando As Long
Dim lErro As Long
Dim tItemRomaneio As typeItemRomaneioGrade
Dim objItemRomaneio As ClassItemRomaneioGrade

On Error GoTo Erro_ItensNFGrade_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86353
    
    With tItemRomaneio
    
        .sProduto = String(STRING_PRODUTO, 0)
        .sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
        .sSiglaUMEstoque = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        
        lErro = Comando_Executar(lComando, "SELECT ControleEstoque,NumIntDoc,Produto,Quantidade, Descricao, SiglaUMEstoque, NumIntItemPVGrade,Almoxarifado  FROM ItensNFiscalGrade, Produtos WHERE Produtos.Codigo = ItensNFiscalGrade.Produto AND NumIntItemNF = ?", _
        .iControleEstoque, .lNumIntDoc, .sProduto, .dQuantidade, .sDescricao, .sSiglaUMEstoque, .lNumIntItemPV, .iAlmoxarifado, objItemNF.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 86354
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86355
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            objItemNF.iPossuiGrade = MARCADO
            
            Set objItemRomaneio = New ClassItemRomaneioGrade
            
            objItemRomaneio.dQuantidade = .dQuantidade
            objItemRomaneio.lNumIntDoc = .lNumIntDoc
            objItemRomaneio.sDescricao = .sDescricao
            objItemRomaneio.sProduto = .sProduto
            objItemRomaneio.sUMEstoque = .sSiglaUMEstoque
            objItemRomaneio.lNumIntItemPV = .lNumIntItemPV
            objItemRomaneio.iAlmoxarifado = .iAlmoxarifado
            objItemRomaneio.iControleEstoque = .iControleEstoque
            
            objItemNF.colItensRomaneioGrade.Add objItemRomaneio
        
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86356
            
        Loop

    End With
    
    Call Comando_Fechar(lComando)
    
    ItensNFGrade_Le = SUCESSO
    
    Exit Function

Erro_ItensNFGrade_Le:
    
    ItensNFGrade_Le = gErr
        
    Select Case gErr
    
        Case 86353
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 86354 To 86356
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFGRADE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150233)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Le_Todos(ByVal colClienteContatos As Collection, objClienteContatos As ClassClienteContatos) As Long
'Lê todos os contatos para o cliente/filial passados como parâmetros
'objClienteContatos recebe o código do cliente e da filial
'colClienteContatos retorna os contatos encontrados

Dim lErro As Long

Dim lComando As Long
Dim tClienteContatos As typeClienteContatos
Dim objClienteContatos1 As ClassClienteContatos

On Error GoTo Erro_ClienteContatos_Le_Todos

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102570

    'Inicializa as string que serão lidas
    tClienteContatos.sContato = String(STRING_CONTATOGERAL_CONTATO, 0)
    tClienteContatos.sSetor = String(STRING_CONTATOGERAL_SETOR, 0)
    tClienteContatos.sCargo = String(STRING_CONTATOGERAL_CARGO, 0)
    tClienteContatos.stelefone = String(STRING_TELEFONE, 0)
    tClienteContatos.sFax = String(STRING_FAX, 0)
    tClienteContatos.sEmail = String(STRING_EMAIL, 0)
    tClienteContatos.sOutrosMeioComunic = String(STRING_CONTATOGERAL_OUTMEIOCOMUNIC, 0)
    
    'Lê os contatos no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo, Contato, Setor, Cargo, Telefone, Fax, Email, Padrao, DataNasc, OutrosMeioComunic FROM ClienteContatos WHERE Cliente=? AND FilialCliente=? ORDER BY Codigo", tClienteContatos.iCodigo, tClienteContatos.sContato, tClienteContatos.sSetor, tClienteContatos.sCargo, tClienteContatos.stelefone, tClienteContatos.sFax, tClienteContatos.sEmail, tClienteContatos.iPadrao, tClienteContatos.dtDataNasc, tClienteContatos.sOutrosMeioComunic, objClienteContatos.lCliente, objClienteContatos.iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 102571
    
    'Busca o primeiro contato encontrado
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102572
    
    'Se não encontrou contatos cadastrados para o cliente em questão
    If lErro = AD_SQL_SEM_DADOS Then gError 102574
    
    'Enquanto houverem contatos
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Instancia um novo objClienteContatos
        Set objClienteContatos1 = New ClassClienteContatos
        
        'Move os dados lidos para o obj
        With objClienteContatos1
            .iCodigo = tClienteContatos.iCodigo
            .sContato = tClienteContatos.sContato
            .sSetor = tClienteContatos.sSetor
            .sCargo = tClienteContatos.sCargo
            .stelefone = tClienteContatos.stelefone
            .sFax = tClienteContatos.sFax
            .sEmail = tClienteContatos.sEmail
            .iPadrao = tClienteContatos.iPadrao
            .dtDataNasc = tClienteContatos.dtDataNasc
            .sOutrosMeioComunic = tClienteContatos.sOutrosMeioComunic
        End With
        
        'Guarda na coleção, os dados do contato
        colClienteContatos.Add objClienteContatos1
        
        'Busca o próximo contato encontrado
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102573
            
    Loop
    
    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    ClienteContatos_Le_Todos = SUCESSO

    Exit Function

Erro_ClienteContatos_Le_Todos:

    ClienteContatos_Le_Todos = gErr

    Select Case gErr

        Case 102570
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102571 To 102573
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 102574 'Não encontrado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150234)

    End Select

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Valida_Exclusao(ByVal objClienteContatos As ClassClienteContatos) As Long
'Verifica se sobrou alguma inconsistência no BD após a exclusão de contatos de cliente
'A tabela verifica se foram excluídos contatos que estão sendo referenciados em outras tabelas do sistema
'Caso tenha encontrado alguma inconsistência, sai por erro e a exclusão não é efetuada
'objClienteContatos recebe código do cliente/filial para os quais deve ser checada a consistência

Dim lErro As Long
Dim lComando As Long
Dim iContato As Integer
Dim lCliente As Long
Dim iFilialCliente As Integer
Dim lRelacionamentoCliente As Long

On Error GoTo Erro_ClienteContatos_Valida_Exclusao

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102595
    
    'Busca os registro em RelacionamentoClientes que utilizam um contato que não
    'está mais na tabela ClienteContatos
    lErro = Comando_Executar(lComando, "SELECT RelacionamentoClientes.Codigo, RelacionamentoClientes.Cliente, RelacionamentoClientes.FilialCliente, RelacionamentoClientes.Contato FROM RelacionamentoClientes WHERE RelacionamentoClientes.Contato NOT IN (SELECT Codigo FROM ClienteContatos WHERE ClienteContatos.Cliente=? AND ClienteContatos.FilialCliente=?) AND Contato<>0 AND RelacionamentoClientes.Cliente=? AND RelacionamentoClientes.FilialCliente=?", lRelacionamentoCliente, lCliente, iFilialCliente, iContato, objClienteContatos.lCliente, objClienteContatos.iFilialCliente, objClienteContatos.lCliente, objClienteContatos.iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 102596
    
    'Posiciona no primeiro registro encontrado
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102597
    
    'Se encontrou algum registro => erro, pois significa que foi excluído um contato utilizado em outra tabela
    If lErro = AD_SQL_SUCESSO Then gError 102598

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    ClienteContatos_Valida_Exclusao = SUCESSO

    Exit Function

Erro_ClienteContatos_Valida_Exclusao:

    ClienteContatos_Valida_Exclusao = gErr

    Select Case gErr

        Case 102595
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102596, 102597
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 102598
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CLIENTECONTATOS_INVALIDA", gErr, iContato, lCliente, iFilialCliente, lRelacionamentoCliente)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150235)

    End Select

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

End Function

'Incluída por Luiz Nogueira em 27/10/03
Public Function CamposGenericos_Lock_Shared(ByVal lCodCampo As Long) As Long
'Efetua um lock shared no campo genérico passado como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim iIndice As Integer
Dim lCodigo As Long

On Error GoTo Erro_CamposGenericos_Lock_Shared

    'Executa a abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102549

    'Seleciona o Campo Genérico a ser lockado
    lErro = Comando_ExecutarLockado(lComando, "SELECT Codigo FROM CamposGenericos WHERE Codigo =?", lCodigo, lCodCampo)
    If lErro <> AD_SQL_SUCESSO Then gError 102550

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102551

    'Não encontrou o campo genérico --> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102552

    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 102553

    'Executa o fechamento dos Comandos
    Call Comando_Fechar(lComando)

    CamposGenericos_Lock_Shared = SUCESSO

    Exit Function

Erro_CamposGenericos_Lock_Shared:

    CamposGenericos_Lock_Shared = gErr

    Select Case gErr

        Case 102549
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102550, 102551
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOS", gErr, lCodCampo)
            
        Case 102552
            Call Rotina_Erro(vbOKOnly, "ERRO_CAMPOGENERICO_NAO_ENCONTRADO", gErr, lCodCampo)
        
        Case 102553
            Call Rotina_Erro(vbOKOnly, "ERRO_CAMPOGENERICO_LOCKSHARED", gErr, lCodCampo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150236)

    End Select

    'Executa o fechamento dos Comandos
    Call Comando_Fechar(lComando)

End Function

'Incluída por Luiz Nogueira em 27/10/03
Public Function Carrega_ClienteContatos(ByVal objControle As Object, objClienteContatos As ClassClienteContatos, Optional ByVal stelefone As String = "", Optional ByVal sContato As String = "") As Long
'Carrega uma combo com os contatos de um determinado cliente/filial
'objControle é a combo que será carregada
'objClienteContatos recebe o código do cliente e da filial que terão seus contatos adicionados à combo

Dim lErro As Long
Dim colClienteContatos As New Collection
Dim iIndice As Integer

On Error GoTo Erro_Carrega_ClienteContatos

    'Limpa a combo
    objControle.Clear
    
    'Le os dados da tabela ContatoGeral e Preenche a colContatoGeral
    lErro = CF("ClienteContatos_Le_Todos", colClienteContatos, objClienteContatos)
    If lErro <> SUCESSO And lErro <> 102574 Then gError 102621
    
    'Se não encontrou contatos => erro
    If lErro = 102574 Then gError 102622
    
    'Para cada contato encontrado
    For Each objClienteContatos In colClienteContatos
    
        'Adiciona o contato a combo
        objControle.AddItem objClienteContatos.iCodigo & SEPARADOR & objClienteContatos.sContato
        objControle.ItemData(objControle.NewIndex) = objClienteContatos.iCodigo
        
        'Se o contato adicionado está marcado como padrão => seleciona-o
        If objClienteContatos.iPadrao = MARCADO Then iIndice = objControle.NewIndex

    Next
    
    If stelefone <> "" Or sContato <> "" Then
    
        'Para cada contato encontrado
        For Each objClienteContatos In colClienteContatos
            If Compara_Contato(objClienteContatos.sContato, sContato) Then iIndice = objControle.NewIndex
        Next
        'Para cada contato encontrado
        For Each objClienteContatos In colClienteContatos
            If Compara_Telefone(objClienteContatos.stelefone, stelefone) Then iIndice = objControle.NewIndex
        Next
        'Para cada contato encontrado
        For Each objClienteContatos In colClienteContatos
            If Compara_Telefone(objClienteContatos.stelefone, stelefone) And Compara_Contato(objClienteContatos.sContato, sContato) Then iIndice = objControle.NewIndex
        Next
    
    End If
    
    objControle.ListIndex = iIndice

    Carrega_ClienteContatos = SUCESSO

    Exit Function

Erro_Carrega_ClienteContatos:

    Carrega_ClienteContatos = gErr

    Select Case gErr

        Case 102621
        
        Case 102622 'Sem dados... deve ser tratado na rotina chamadora
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150237)

    End Select

End Function

'Incluída por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Le(ByVal objClienteContatos As ClassClienteContatos) As Long
'Lê um contato a partir de cliente/filial + código do contato
'objContatoClientes recebe o código do cliente e da filial
'objContatoClientes retorna os dados lidos

Dim lErro As Long
Dim lComando As Long
Dim tClienteContatos As typeClienteContatos

On Error GoTo Erro_ClienteContatos_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102654
    
    'Inicializa as string que serão lidas
    tClienteContatos.sContato = String(STRING_CONTATOGERAL_CONTATO, 0)
    tClienteContatos.sSetor = String(STRING_CONTATOGERAL_SETOR, 0)
    tClienteContatos.sCargo = String(STRING_CONTATOGERAL_CARGO, 0)
    tClienteContatos.stelefone = String(STRING_TELEFONE, 0)
    tClienteContatos.sFax = String(STRING_FAX, 0)
    tClienteContatos.sEmail = String(STRING_EMAIL, 0)
    tClienteContatos.sOutrosMeioComunic = String(STRING_CONTATOGERAL_OUTMEIOCOMUNIC, 0)
    
    'Lê o contato no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo, Contato, Setor, Cargo, Telefone, Fax, Email, Padrao, DataNasc, OutrosMeioComunic FROM ClienteContatos WHERE Cliente=? AND FilialCliente=? AND Codigo=?", tClienteContatos.iCodigo, tClienteContatos.sContato, tClienteContatos.sSetor, tClienteContatos.sCargo, tClienteContatos.stelefone, tClienteContatos.sFax, tClienteContatos.sEmail, tClienteContatos.iPadrao, tClienteContatos.dtDataNasc, tClienteContatos.sOutrosMeioComunic, objClienteContatos.lCliente, objClienteContatos.iFilialCliente, objClienteContatos.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 102651
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102652
    
    'Se não encontrou o contato => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102653
    
    'Move os dados lidos para o obj
    With objClienteContatos
        .iCodigo = tClienteContatos.iCodigo
        .sContato = tClienteContatos.sContato
        .sSetor = tClienteContatos.sSetor
        .sCargo = tClienteContatos.sCargo
        .stelefone = tClienteContatos.stelefone
        .sFax = tClienteContatos.sFax
        .sEmail = tClienteContatos.sEmail
        .iPadrao = tClienteContatos.iPadrao
        .dtDataNasc = tClienteContatos.dtDataNasc
        .sOutrosMeioComunic = tClienteContatos.sOutrosMeioComunic
    End With
        
    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    ClienteContatos_Le = SUCESSO

    Exit Function

Erro_ClienteContatos_Le:

    ClienteContatos_Le = gErr

    Select Case gErr

        Case 102654
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102651, 102652
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 102653 'Não encontrado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150238)

    End Select

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 27/10/03
Public Function CamposGenericos_ValidaExclusao_TipoRelacionamento() As Long
'Verifica se é válida a exclusão de valores para o campo Tipo de Relacionamento

Dim lComando As Long
Dim lErro As Long
Dim lCodigo As Long
Dim lTipo As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_TipoRelacionamento
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102663
    
    'Busca em relacionamentos com clientes, tipos de relacionamentos que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Codigo, Tipo FROM RelacionamentoClientes WHERE Tipo NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Tipo <> 0", lCodigo, lTipo, CAMPOSGENERICOS_TIPORELACIONAMENTOCLIENTES)
    If lErro <> AD_SQL_SUCESSO Then gError 102664
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102665
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 102666
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_TipoRelacionamento = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_TipoRelacionamento:

    CamposGenericos_ValidaExclusao_TipoRelacionamento = gErr
    
    Select Case gErr
    
        Case 102663
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102664, 102665
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL_CAMPOSGENERICOS", gErr)
        
        Case 102666
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPORELACIONAMENTO", gErr, lTipo, lCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150239)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

'Incluída por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Le_Telefone(ByVal stelefone As String, ByVal colClienteContatos As Collection) As Long
'Lê no bd os contatos de clientes que possuem o telefone passado como parâmetro
'sTelefone recebe o telefone que será usado para pesquisa
'colClienteContatos retorna os contatos encontrados com o telefone em questão

Dim lErro As Long
Dim lComando As Long
Dim tClienteContatos As typeClienteContatos
Dim objClienteContatos As ClassClienteContatos

On Error GoTo Erro_ClienteContatos_Le_Telefone

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102667
    
    'Inicializa as strings que serão usadas na leitura
    tClienteContatos.sContato = String(STRING_CONTATOGERAL_CONTATO, 0)
    tClienteContatos.sSetor = String(STRING_CONTATOGERAL_SETOR, 0)
    tClienteContatos.sCargo = String(STRING_CONTATOGERAL_CARGO, 0)
    tClienteContatos.stelefone = String(STRING_TELEFONE, 0)
    tClienteContatos.sFax = String(STRING_FAX, 0)
    tClienteContatos.sEmail = String(STRING_EMAIL, 0)
    tClienteContatos.sOutrosMeioComunic = String(STRING_CONTATOGERAL_OUTMEIOCOMUNIC, 0)
    
    'Busca no BD um contato de cliente com o telefone passado como parâmetro
    lErro = Comando_Executar(lComando, "SELECT Cliente, FilialCliente, Codigo, Contato, Setor, Cargo, Telefone, Fax, Email, Padrao, DataNasc, OutrosMeioComunic FROM ClienteContatos WHERE Telefone=?", tClienteContatos.lCliente, tClienteContatos.iFilialCliente, tClienteContatos.iCodigo, tClienteContatos.sContato, tClienteContatos.sSetor, tClienteContatos.sCargo, tClienteContatos.stelefone, tClienteContatos.sFax, tClienteContatos.sEmail, tClienteContatos.iPadrao, tClienteContatos.dtDataNasc, tClienteContatos.sOutrosMeioComunic, stelefone)
    If lErro <> AD_SQL_SUCESSO Then gError 102668
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102669
    
    'Se não encontrou o contato => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102671

    'Para cada contato encontrado
    Do While lErro = AD_SQL_SUCESSO
    
        'Instancia um novo obj
        Set objClienteContatos = New ClassClienteContatos
        
        'Transfere os dados lidos para obj
        With objClienteContatos
            .lCliente = tClienteContatos.lCliente
            .iFilialCliente = tClienteContatos.iFilialCliente
            .iCodigo = tClienteContatos.iCodigo
            .sContato = tClienteContatos.sContato
            .sSetor = tClienteContatos.sSetor
            .sCargo = tClienteContatos.sCargo
            .stelefone = tClienteContatos.stelefone
            .sFax = tClienteContatos.sFax
            .sEmail = tClienteContatos.sEmail
            .iPadrao = tClienteContatos.iPadrao
            .dtDataNasc = tClienteContatos.dtDataNasc
            .sOutrosMeioComunic = tClienteContatos.sOutrosMeioComunic
        End With
        
        'Adiciona o contato à coleção
        colClienteContatos.Add objClienteContatos
        
        'Busca o próximo contato encontrado
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102670
    
    Loop

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    ClienteContatos_Le_Telefone = SUCESSO

    Exit Function

Erro_ClienteContatos_Le_Telefone:

    ClienteContatos_Le_Telefone = gErr

    Select Case gErr

        Case 102667
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102668 To 102670
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
            
        Case 102671 'Não encontrado

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150240)

    End Select

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Validate2(ByVal lCodCampo As Long, ByVal objControle As Object, ByVal sMsgCriacao As String) As Long

Dim lErro As Long
Dim vbMsgRes As VbMsgBoxResult
Dim objCamposGenericos As ClassCamposGenericos
Dim objCamposGenericosValores As New ClassCamposGenericosValores
Dim lCodigo As Long

On Error GoTo Erro_CamposGenericos_Validate2

    'Verifica se foi preenchida a ComboBox
    If Len(Trim(objControle.Text)) = 0 Then Exit Function

    'Verifica se está preenchida com o item selecionado na ComboBox
    If objControle.Text = objControle.List(objControle.ListIndex) Then Exit Function

    'Verifica se existe o item na List da Combo. Se existir seleciona.
    lErro = Combo_Item_Igual_CI(objControle)
    If lErro <> SUCESSO And lErro <> 58583 Then gError 102394
    
    'Se não encontrou o valor
    If lErro = 58583 Then
    
        'Guarda o valor a ser pesquisado em CamposGenericosValores
        objCamposGenericosValores.sValor = Trim(objControle.Text)
        
        'Indica o campo ao qual pertence o valor pesquisado
        objCamposGenericosValores.lCodCampo = lCodCampo
        
        'Tentar encontrar o item em CamposGenericosValores
        lErro = CF("CamposGenericosValores_Le_CodCampo_Valor", objCamposGenericosValores)
        If lErro <> SUCESSO And lErro <> 102413 Then gError 102410
        
        'Se não encontrou => erro
        If lErro = 102413 Then gError 102395
        
        'Exibe o código - valor
        objControle.Text = objCamposGenericosValores.sValor
    
    End If

    CamposGenericos_Validate2 = SUCESSO
    
    Exit Function

Erro_CamposGenericos_Validate2:

    CamposGenericos_Validate2 = gErr

    Select Case gErr

        Case 102391, 102392, 102394, 102406, 102410

        Case 102393, 102395 'Não encontrou no BD

            vbMsgRes = Rotina_Aviso(vbYesNo, sMsgCriacao, objControle.Text, lCodCampo)

            If vbMsgRes = vbYes Then

                Set objCamposGenericos = New ClassCamposGenericos
                
                objCamposGenericos.lCodigo = lCodCampo
                
                Call Chama_Tela("CamposGenericos", objCamposGenericos, objControle.Text)

            End If

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150241)

    End Select

    Exit Function

End Function

Function Cliente_Obtem_SaldoAtraso(ByVal lCliente As Long, dSaldoAtraso As Double) As Long

Dim lErro As Long, lComando As Long

On Error GoTo Erro_Cliente_Obtem_SaldoAtraso

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 124200
    
    dSaldoAtraso = 0
    
    lErro = Comando_Executar(lComando, "SELECT SUM(ParcelasRec.Saldo) FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND ParcelasRec.DataVencimentoReal <= ? AND TitulosRec.Cliente = ?", dSaldoAtraso, STATUS_EXCLUIDO, STATUS_BAIXADO, gdtDataHoje - 1, lCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 124201
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 124202
    
    Call Comando_Fechar(lComando)
    
    Cliente_Obtem_SaldoAtraso = SUCESSO
     
    Exit Function
    
Erro_Cliente_Obtem_SaldoAtraso:

    Cliente_Obtem_SaldoAtraso = gErr
     
    Select Case gErr
          
        Case 124200
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 124201, 124202
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ATRASO_CLIENTE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150242)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Produto_ObtemPrevVenda(ByVal sPrevisao As String, ByVal iFilialEmpresa As Integer, ByVal iAno As Integer, ByVal iMes As Integer, ByVal sProduto As String, dQtde As Double, dValor As Double, lComando As Long) As Long
'Obtem a qtde e valor de previsao de venda para um produto

Dim lErro As Long, sSQL As String
Dim tPrevVMensal As typePrevVendaMensal

On Error GoTo Erro_Produto_ObtemPrevVenda

    sSQL = "SELECT SUM(Quantidade" & iMes & "), SUM(Valor" & iMes & ") FROM PrevVendaMensal WHERE Codigo = ? AND FilialEmpresa = ? AND Ano = ? AND Produto = ?"

    With tPrevVMensal

        .sCodigo = String(STRING_PREVVENDA_CODIGO, 0)
        .sProduto = String(STRING_PRODUTO, 0)

        'Seleciona os dados de PrevVendaMensal de acordo com o Código, FilialEmpresa e Ano recebidos
        lErro = Comando_Executar(lComando, sSQL, dQtde, dValor, sPrevisao, iFilialEmpresa, iAno, sProduto)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 103193

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103189
    
    Produto_ObtemPrevVenda = SUCESSO
     
    Exit Function
    
Erro_Produto_ObtemPrevVenda:

    Produto_ObtemPrevVenda = gErr
     
    Select Case gErr
          
        Case 103189, 103193
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDAMENSAL", gErr, sPrevisao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150243)
     
    End Select
     
    Exit Function

End Function

'####################################################
'INSERIDO POR WAGNER - IMPAL 12/11/04
Public Function CustoDirFabrProdInf_Le(ByVal objCustoDirFabr As ClassCustoDirFabr) As Long

Dim lErro As Long
Dim lComando As Long
Dim tCustoDirFabr As typeCustoDirFabr

On Error GoTo Erro_CustoDirFabrProdInf_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 131220
    
    lErro = Comando_Executar(lComando, "SELECT Custo FROM CustoDirFabrProdInf WHERE FilialEmpresa = ? AND Ano = ? AND Produto = ?", tCustoDirFabr.dCustoTotal, objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.iAno, objCustoDirFabr.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 131221
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131222
    
    If lErro <> AD_SQL_SUCESSO Then gError 131223
    
    objCustoDirFabr.dCustoTotal = tCustoDirFabr.dCustoTotal
    
    Call Comando_Fechar(lComando)
    
    CustoDirFabrProdInf_Le = SUCESSO
     
    Exit Function
    
Erro_CustoDirFabrProdInf_Le:

    CustoDirFabrProdInf_Le = gErr
     
    Select Case gErr
          
        Case 131220
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 131221, 131222
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTODIRFABRPRODINF", gErr)
        
        Case 131223
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150244)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function CustoDirFabrProdInf_Le_Anterior(ByVal objCustoDirFabr As ClassCustoDirFabr, ByVal objCustoDirFabrAnt As ClassCustoDirFabr) As Long

Dim lErro As Long
Dim lComando As Long
Dim tCustoDirFabr As typeCustoDirFabr

On Error GoTo Erro_CustoDirFabrProdInf_Le_Anterior

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 131232
    
    lErro = Comando_Executar(lComando, "SELECT Ano, Custo FROM CustoDirFabrProdInf WHERE FilialEmpresa = ? AND Ano < ? AND Produto = ? ORDER BY Ano DESC", tCustoDirFabr.iAno, tCustoDirFabr.dCustoTotal, objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.iAno, objCustoDirFabr.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 131233
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131234
    
    If lErro <> AD_SQL_SUCESSO Then gError 131235
    
    objCustoDirFabrAnt.dCustoTotal = tCustoDirFabr.dCustoTotal
    objCustoDirFabrAnt.iAno = tCustoDirFabr.iAno
    objCustoDirFabrAnt.sProduto = objCustoDirFabr.sProduto
    objCustoDirFabrAnt.iFilialEmpresa = objCustoDirFabr.iFilialEmpresa
    
    Call Comando_Fechar(lComando)
    
    CustoDirFabrProdInf_Le_Anterior = SUCESSO
     
    Exit Function
    
Erro_CustoDirFabrProdInf_Le_Anterior:

    CustoDirFabrProdInf_Le_Anterior = gErr
     
    Select Case gErr
          
        Case 131232
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 131233, 131234
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTODIRFABRPRODINF", gErr)
        
        Case 131235
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150245)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function
'####################################################


Function Serie_FilialEmpresa_Customiza(objSerie As ClassSerie) As Long

    Serie_FilialEmpresa_Customiza = SUCESSO

End Function

Function NFiscal_FilialEmpresa_Customiza(objNFiscal As ClassNFiscal) As Long

    NFiscal_FilialEmpresa_Customiza = SUCESSO

End Function


Function LiberacaoBloqueio_FilialEmpresa(objLiberacaoBloqueios As ClassLiberacaoBloqueios) As Long

    objLiberacaoBloqueios.iFilialEmpresa = giFilialEmpresa
    
    LiberacaoBloqueio_FilialEmpresa = SUCESSO

End Function

Function Vendedor_Comissao_Customiza(objVendedor As ClassVendedor, dPercComissao As Double) As Long
    
    Vendedor_Comissao_Customiza = SUCESSO

End Function

Function Vendedor_Comissao_Customiza1(objVendedor As ClassVendedor, objComissaoNF As ClassComissaoNF, objFilialCliente As ClassFilialCliente) As Long
    
    Vendedor_Comissao_Customiza1 = SUCESSO

End Function

'######################################################################
'Inserido por Wagner
Public Function CamposGenericos_ValidaExclusao_Requisitante() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lRequisitante As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_Requisitante
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 131871
    
    'Busca MovimentoEstoque códigos de requisitante que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Requisitante, Codigo FROM MovimentoEstoque WHERE Requisitante NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Requisitante <> 0", lRequisitante, lNumIntDoc, CAMPOSGENERICOS_REQUISITANTE)
    If lErro <> AD_SQL_SUCESSO Then gError 131872
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131873
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 131874
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_Requisitante = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_Requisitante:

    CamposGenericos_ValidaExclusao_Requisitante = gErr
    
    Select Case gErr
    
        Case 131871
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 131872, 131873
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_CAMPOSGENERICOS", gErr)
        
        Case 131874
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_REQUISTANTE_MOVESTOQUE", gErr, lRequisitante, lNumIntDoc)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150246)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function
'######################################################################


'######################################################################
'Inserido por Wagner
Public Function CamposGenericos_ValidaExclusao_Situacao() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lSituacao As Long
Dim lNumero As Long
Dim lFornecedor As Long
Dim iFilial As Integer

On Error GoTo Erro_CamposGenericos_ValidaExclusao_Situacao
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 132201
    
    'Busca Situacoes em NFsPad_Todas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Situacao, Fornecedor, Filial, NumNotaFiscal FROM NFsPag_Todas WHERE Situacao NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Situacao <> 0", lSituacao, lNumero, lFornecedor, iFilial, CAMPOSGENERICOS_SITUACAO)
    If lErro <> AD_SQL_SUCESSO Then gError 132202
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132203
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 132204
    
    'Busca Situacoes em TitulosPagTodos que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Situacao, Fornecedor, Filial, NumTitulo FROM TitulosPagTodos WHERE Situacao NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Situacao <> 0", lSituacao, lNumero, lFornecedor, iFilial, CAMPOSGENERICOS_SITUACAO)
    If lErro <> AD_SQL_SUCESSO Then gError 132205
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132206
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 132207
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_Situacao = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_Situacao:

    CamposGenericos_ValidaExclusao_Situacao = gErr
    
    Select Case gErr
    
        Case 132201
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 132202, 132203
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFPAG_CAMPOSGENERICOS", gErr)
        
        Case 132204
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SITUACAO_NFPAG", gErr, lSituacao, lNumero, lFornecedor, iFilial)
            
        Case 132205, 132206
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG_CAMPOSGENERICOS", gErr)
        
        Case 132207
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SITUACAO_TITULOSPAG", gErr, lSituacao, lNumero, lFornecedor, iFilial)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150247)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

Public Function CamposGenericos_ValidaExclusao_Historico() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lHistorico As Long
Dim lNumero As Long
Dim lFornecedor As Long
Dim iFilial As Integer

On Error GoTo Erro_CamposGenericos_ValidaExclusao_Historico
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 132208
    
    'Busca Históricos em NFsPad_Todas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Historico, Fornecedor, Filial, NumNotaFiscal FROM NFsPag_Todas WHERE Historico NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Historico <> 0", lHistorico, lNumero, lFornecedor, iFilial, CAMPOSGENERICOS_HISTORICO)
    If lErro <> AD_SQL_SUCESSO Then gError 132209
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132210
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 132211
    
    'Busca Históricos em TitulosPagTodos que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Historico, Fornecedor, Filial, NumTitulo FROM TitulosPagTodos WHERE Historico NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Historico <> 0", lHistorico, lNumero, lFornecedor, iFilial, CAMPOSGENERICOS_HISTORICO)
    If lErro <> AD_SQL_SUCESSO Then gError 132212
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132213
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 132214
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_Historico = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_Historico:

    CamposGenericos_ValidaExclusao_Historico = gErr
    
    Select Case gErr
    
        Case 132208
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 132209, 132210
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFPAG_CAMPOSGENERICOS", gErr)
        
        Case 132211
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_HISTORICO_NFPAG", gErr, lHistorico, lNumero, lFornecedor, iFilial)
            
        Case 132212, 132213
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG_CAMPOSGENERICOS", gErr)
        
        Case 132214
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_HISTORICO_TITULOSPAG", gErr, lHistorico, lNumero, lFornecedor, iFilial)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150248)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

Public Function CamposGenericos_ValidaExclusao_SubConta() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lSubConta As Long
Dim lNumero As Long
Dim lFornecedor As Long
Dim iFilial As Integer

On Error GoTo Erro_CamposGenericos_ValidaExclusao_SubConta
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 132215
    
    'Busca Situacoes em NFsPad_Todas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT SubConta, Fornecedor, Filial, NumNotaFiscal FROM NFsPag_Todas WHERE SubConta NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND SubConta <> 0", lSubConta, lNumero, lFornecedor, iFilial, CAMPOSGENERICOS_SUBCONTA)
    If lErro <> AD_SQL_SUCESSO Then gError 132216
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132217
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 132218
    
    'Busca Situacoes em TitulosPagTodos que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT SubConta, Fornecedor, Filial, NumTitulo FROM TitulosPagTodos WHERE SubConta NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND SubConta <> 0", lSubConta, lNumero, lFornecedor, iFilial, CAMPOSGENERICOS_SUBCONTA)
    If lErro <> AD_SQL_SUCESSO Then gError 132219
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132220
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 132221
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_SubConta = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_SubConta:

    CamposGenericos_ValidaExclusao_SubConta = gErr
    
    Select Case gErr
    
        Case 132215
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 132216, 132217
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFPAG_CAMPOSGENERICOS", gErr)
        
        Case 132218
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SUBCONTA_NFPAG", gErr, lSubConta, lNumero, lFornecedor, iFilial)
            
        Case 132219, 132220
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG_CAMPOSGENERICOS", gErr)
        
        Case 132221
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SUBCONTA_TITULOSPAG", gErr, lSubConta, lNumero, lFornecedor, iFilial)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150249)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function
'######################################################################

Public Function CTPedidoVenda_Produto_Change(ByVal objProduto As Object) As Long

On Error GoTo Erro_CTPedidoVenda_Produto_Change
 
    CTPedidoVenda_Produto_Change = SUCESSO
    
    Exit Function
    
Erro_CTPedidoVenda_Produto_Change:

    CTPedidoVenda_Produto_Change = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150250)
            
    End Select
    
    Exit Function
        
End Function

Function ItensPedido_Le_NumIntDoc(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê no BD a coleção de ítens do Pedido de Venda e devolve em colItensPedido dentro de objPedidoVenda
 
Dim lErro As Long
Dim tItemPedido As typeItemPedido
Dim lComando As Long
 
On Error GoTo Erro_ItensPedido_Le_NumIntDoc
 
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 133087
 
    tItemPedido.sDescricao = String(STRING_ITEM_PEDIDO_DESCRICAO, 0)
    tItemPedido.sLote = String(STRING_ITEM_PEDIDO_LOTE, 0)
    tItemPedido.sProduto = String(STRING_PRODUTO, 0)
    tItemPedido.sProdutoDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    tItemPedido.sProdutoNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
    tItemPedido.sUMEstoque = String(STRING_UM_SIGLA_UM_BASE, 0)
    tItemPedido.sUnidadeMed = String(STRING_UM_SIGLA_UM_BASE, 0)
 
    lErro = Comando_Executar(lComando, "SELECT Produto, Quantidade, PrecoUnitario, PrecoTotal, ClasseUM, UnidadeMed, ValorDesconto, DataEntrega, Descricao, Lote, Status, ValorAbatComissao, QuantCancelada, QuantReservada, QuantFaturada, QuantOP, QuantSC, NumIntDoc FROM ItensPedidoDeVenda WHERE FilialEmpresa = ? And CodPedido = ?", tItemPedido.sProduto, tItemPedido.dQuantidade, tItemPedido.dPrecoUnitario, tItemPedido.dPrecoTotal, tItemPedido.iClasseUM, tItemPedido.sUnidadeMed, tItemPedido.dValorDesconto, tItemPedido.dtDataEntrega, _
    tItemPedido.sDescricao, tItemPedido.sLote, tItemPedido.iStatus, tItemPedido.dValorAbatComissao, tItemPedido.dQuantCancelada, tItemPedido.dQuantReservada, tItemPedido.dQuantFaturada, tItemPedido.dQuantOP, tItemPedido.dQuantSC, tItemPedido.lNumIntDoc, giFilialEmpresa, objPedidoVenda.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 133082
 
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133083
 
    If lErro = AD_SQL_SEM_DADOS Then gError 133084
 
    Do While lErro <> AD_SQL_SEM_DADOS
 
        With tItemPedido
            objPedidoVenda.colItensPedido.Add giFilialEmpresa, objPedidoVenda.lCodigo, 0, .sProduto, .dQuantidade, .dPrecoUnitario, .dPrecoTotal, .dValorDesconto, .dtDataEntrega, .sProdutoDescricao, .dValorAbatComissao, .dQuantCancelada, .dQuantReservada, .colReservaItem, .sProdutoNomeReduzido, .sUnidadeMed, .sLote, .sUMEstoque, .iClasseUM, .dQuantFaturada, .dQuantFaturada, .sDescricao, .iStatus, .iControleEstoque, .dQuantOP, .dQuantSC, 0, 0, 0, 0, 0, 0, .lNumIntDoc
        End With
 
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133085
    Loop
 
    Call Comando_Fechar(lComando)
 
    ItensPedido_Le_NumIntDoc = SUCESSO
 
    Exit Function
 
Erro_ItensPedido_Le_NumIntDoc:
 
    ItensPedido_Le_NumIntDoc = gErr
 
    Select Case gErr
 
        Case 133082, 133083, 133085
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA2", gErr, objPedidoVenda.lCodigo)
 
        Case 133084
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150251)
 
    End Select
 
    Call Comando_Fechar(lComando)
 
    Exit Function
 
End Function

'#######################################################################
'INSERIDO POR WAGNER
'#######################################################################
Function Contrato_Le(ByVal objContrato As ClassContrato) As Long
'Le o Contrato pelo código e filial empresa

Dim lErro As Long
Dim lComando As Long
Dim tContrato As typeContrato

On Error GoTo Erro_Contrato_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129330

    With tContrato
    
        'Aloca espaço nos buffers
        .sCodigo = String(STRING_CONTRATO_CODIGO, 0)
        .sContaContabil = String(STRING_CONTRATO_CONTACONTABIL, 0)
        .sDescricao = String(STRING_CONTRATO_DESCRICAO, 0)
        .sHistoricoContabil = String(STRING_CONTRATO_HISTORICOCONTABIL, 0)
        .sObservacao = String(STRING_CONTRATO_OBSERVACAO, 0)
        .sCcl = String(STRING_CONTRATO_CCL, 0)
        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
        .sSerie = String(STRING_SERIE, 0)

        'Le o contrato
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP, TipoTributacao, Tipo, Fornecedor, FilialFornecedor, Recibo, Serie, NFe FROM Contratos WHERE Codigo = ? AND FilialEmpresa = ? ", _
                                                .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .lFornecedor, .iFilialFornecedor, .iRecibo, .sSerie, .iNFe, objContrato.sCodigo, objContrato.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 129331
   
        'Busca o item
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129900
        If lErro = AD_SQL_SEM_DADOS Then gError 129332

        'Preenche o objContrato com os dados trazido do BD
        objContrato.sCodigo = .sCodigo
        objContrato.sDescricao = .sDescricao
        objContrato.iAtivo = .iAtivo
        objContrato.lCliente = .lCliente
        objContrato.iFilCli = .iFilCli
        objContrato.sObservacao = .sObservacao
        objContrato.dtDataIniContrato = .dtDataIniContrato
        objContrato.dtDataFimContrato = .dtDataFimContrato
        objContrato.dtDataRenovContrato = .dtDataRenovContrato
        objContrato.sContaContabil = .sContaContabil
        objContrato.sHistoricoContabil = .sHistoricoContabil
        objContrato.dtDataIniCobrancaPadrao = .dtDataIniCobrancaPadrao
        objContrato.iPeriodicidadePadrao = .iPeriodicidadePadrao
        objContrato.iCondPagtoPadrao = .iCondPagtoPadrao
        objContrato.sCcl = .sCcl
        objContrato.lNumIntDoc = .lNumIntDoc
        objContrato.iFilialEmpresa = .iFilialEmpresa
        objContrato.sNaturezaOp = .sNaturezaOp
        objContrato.iTipoTributacao = .iTipoTributacao
        objContrato.iTipo = .iTipo
        objContrato.iFilForn = .iFilialFornecedor
        objContrato.lFornecedor = .lFornecedor
        objContrato.iRecibo = .iRecibo
        objContrato.sSerie = .sSerie
        objContrato.iNFe = .iNFe
    
    End With
    
    'Le os itens do Contrato
    lErro = CF("ItensDeContrato_Le", objContrato)
    If lErro <> SUCESSO Then gError 129333
    
    'Fecha comando
    Call Comando_Fechar(lComando)

    Contrato_Le = SUCESSO

    Exit Function

Erro_Contrato_Le:

    Contrato_Le = gErr

    Select Case gErr

        Case 129330
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129331, 129900
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)

        Case 129332, 129333
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150252)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Contrato_Le2(ByVal objContrato As ClassContrato) As Long
'Le o Contrato pelo número interno

Dim lErro As Long
Dim lComando As Long
Dim tContrato As typeContrato

On Error GoTo Erro_Contrato_Le2

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129258

    With tContrato
    
        'Aloca espaço nos buffers
        .sCodigo = String(STRING_CONTRATO_CODIGO, 0)
        .sContaContabil = String(STRING_CONTRATO_CONTACONTABIL, 0)
        .sDescricao = String(STRING_CONTRATO_DESCRICAO, 0)
        .sHistoricoContabil = String(STRING_CONTRATO_HISTORICOCONTABIL, 0)
        .sObservacao = String(STRING_CONTRATO_OBSERVACAO, 0)
        .sCcl = String(STRING_CONTRATO_CCL, 0)
        .sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
        .sSerie = String(STRING_SERIE, 0)

        'Le o Contrato do BD
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP, TipoTributacao, Tipo, Fornecedor, FilialFornecedor, Recibo, Serie, NFe FROM Contratos WHERE NumIntDoc = ? ", _
                                                .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .lFornecedor, .iFilialFornecedor, .iRecibo, .sSerie, .iNFe, objContrato.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 129259
   
        'Busca o contrato
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116260
        If lErro = AD_SQL_SEM_DADOS Then gError 129261

        'Preenche o contrato com os dados trazidos do BD
        objContrato.sCodigo = .sCodigo
        objContrato.sDescricao = .sDescricao
        objContrato.iAtivo = .iAtivo
        objContrato.lCliente = .lCliente
        objContrato.iFilCli = .iFilCli
        objContrato.sObservacao = .sObservacao
        objContrato.dtDataIniContrato = .dtDataIniContrato
        objContrato.dtDataFimContrato = .dtDataFimContrato
        objContrato.dtDataRenovContrato = .dtDataRenovContrato
        objContrato.sContaContabil = .sContaContabil
        objContrato.sHistoricoContabil = .sHistoricoContabil
        objContrato.dtDataIniCobrancaPadrao = .dtDataIniCobrancaPadrao
        objContrato.iPeriodicidadePadrao = .iPeriodicidadePadrao
        objContrato.iCondPagtoPadrao = .iCondPagtoPadrao
        objContrato.sCcl = .sCcl
        objContrato.lNumIntDoc = .lNumIntDoc
        objContrato.iFilialEmpresa = .iFilialEmpresa
        objContrato.sNaturezaOp = .sNaturezaOp
        objContrato.iTipoTributacao = .iTipoTributacao
        objContrato.iTipo = .iTipo
        objContrato.iFilForn = .iFilialFornecedor
        objContrato.lFornecedor = .lFornecedor
        objContrato.iRecibo = .iRecibo
        objContrato.sSerie = .sSerie
        objContrato.iNFe = .iNFe
        
    End With
    
    'Le os itens do contrato
    lErro = CF("ItensDeContrato_Le", objContrato)
    If lErro <> SUCESSO Then gError 129262
    
    'Fecha comando
    Call Comando_Fechar(lComando)

    Contrato_Le2 = SUCESSO

    Exit Function

Erro_Contrato_Le2:

    Contrato_Le2 = gErr

    Select Case gErr

        Case 129258
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129259, 129260
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)

        Case 129261, 129262
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150253)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeContrato_Le(ByVal objContrato As ClassContrato) As Long
'Le os Itens de Contrato Pelo Numero Interno

Dim lErro As Long
Dim lComando As Long
Dim tItensDeContrato As typeItensDeContrato
Dim objItensDeContrato As ClassItensDeContrato

On Error GoTo Erro_ItensDeContrato_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129334

    With tItensDeContrato
    
        'Aloca espaço nos buffers
        .sDescProd = String(STRING_ITENSDECONTRATO_DESCPROD, 0)
        .sObservacao = String(STRING_ITENSDECONTRATO_OBSERVACAO, 0)
        .sProduto = String(STRING_ITENSDECONTRATO_PRODUTO, 0)
        .sUM = String(STRING_ITENSDECONTRATO_UM, 0)

        'Le os itens de contrato do BD
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim, QtdeParcelas, UltParcCobrada FROM ItensDeContrato WHERE NumIntContrato = ? ORDER BY Seq ", _
                                                 .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim, .iQtdeParcelas, .iUltParcCobrada, objContrato.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 129335
   
        'Busca o primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129628
        
        'Equanto existirem registros
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'Aloca espaço para um novo Item de Contrato
            Set objItensDeContrato = New ClassItensDeContrato
            
            'Preenche item de contrato com os dados trazidos do BD
            objItensDeContrato.lNumIntDoc = .lNumIntDoc
            objItensDeContrato.lNumIntContrato = .lNumIntContrato
            objItensDeContrato.iSeq = .iSeq
            objItensDeContrato.iCobrar = .iCobrar
            objItensDeContrato.sProduto = .sProduto
            objItensDeContrato.sDescProd = .sDescProd
            objItensDeContrato.dQuantidade = .dQuantidade
            objItensDeContrato.sUM = .sUM
            objItensDeContrato.dValor = .dValor
            objItensDeContrato.iMedicao = .iMedicao
            objItensDeContrato.dtDataIniCobranca = .dtDataIniCobranca
            objItensDeContrato.iPeriodicidade = .iPeriodicidade
            objItensDeContrato.iCondPagto = .iCondPagto
            objItensDeContrato.sObservacao = .sObservacao
            objItensDeContrato.dtDataProxCobranca = .dtDataProxCobranca
            objItensDeContrato.dtDataRefIni = .dtDataRefIni
            objItensDeContrato.dtDataRefFim = .dtDataRefFim
            objItensDeContrato.iQtdeParcelas = .iQtdeParcelas
            objItensDeContrato.iUltParcCobrada = .iUltParcCobrada
            
            'Adiciona o item de contrato a coleção objContrato.colItens.Add
            objContrato.colItens.Add objItensDeContrato
        
            'Busca o próximo item de contrato
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129536

        Loop
    
    End With
        
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContrato_Le = SUCESSO

    Exit Function

Erro_ItensDeContrato_Le:

    ItensDeContrato_Le = gErr

    Select Case gErr

        Case 129334
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129335, 129628, 129536
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150254)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeContrato_Le2(ByVal objItensDeContrato As ClassItensDeContrato) As Long
'Le os Itens de Contrato Pela seqüência e NumIntDoc do contrato

Dim lErro As Long
Dim lComando As Long
Dim tItensDeContrato As typeItensDeContrato

On Error GoTo Erro_ItensDeContrato_Le2

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129263

    With tItensDeContrato
    
        'Aloca espaço no buffers
        .sDescProd = String(STRING_ITENSDECONTRATO_DESCPROD, 0)
        .sObservacao = String(STRING_ITENSDECONTRATO_OBSERVACAO, 0)
        .sProduto = String(STRING_ITENSDECONTRATO_PRODUTO, 0)
        .sUM = String(STRING_ITENSDECONTRATO_UM, 0)

        'Le o Item de Contrato do BD
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim, QtdeParcelas, UltParcCobrada FROM ItensDeContrato WHERE NumIntContrato = ? AND Seq = ? ORDER BY Seq ", _
                                                 .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim, .iQtdeParcelas, .iUltParcCobrada, objItensDeContrato.lNumIntContrato, objItensDeContrato.iSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 129264
   
        'Busca o item
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129265
        If lErro = AD_SQL_SEM_DADOS Then gError 129266
        
        'Preenche o objItensDeContrato com os dados trazidos do BD
        objItensDeContrato.lNumIntDoc = .lNumIntDoc
        objItensDeContrato.lNumIntContrato = .lNumIntContrato
        objItensDeContrato.iSeq = .iSeq
        objItensDeContrato.iCobrar = .iCobrar
        objItensDeContrato.sProduto = .sProduto
        objItensDeContrato.sDescProd = .sDescProd
        objItensDeContrato.dQuantidade = .dQuantidade
        objItensDeContrato.sUM = .sUM
        objItensDeContrato.dValor = .dValor
        objItensDeContrato.iMedicao = .iMedicao
        objItensDeContrato.dtDataIniCobranca = .dtDataIniCobranca
        objItensDeContrato.iPeriodicidade = .iPeriodicidade
        objItensDeContrato.iCondPagto = .iCondPagto
        objItensDeContrato.sObservacao = .sObservacao
        objItensDeContrato.dtDataProxCobranca = .dtDataProxCobranca
        objItensDeContrato.dtDataRefIni = .dtDataRefIni
        objItensDeContrato.dtDataRefFim = .dtDataRefFim
        objItensDeContrato.iQtdeParcelas = .iQtdeParcelas
        objItensDeContrato.iUltParcCobrada = .iUltParcCobrada
                
    End With
        
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContrato_Le2 = SUCESSO

    Exit Function

Erro_ItensDeContrato_Le2:

    ItensDeContrato_Le2 = gErr

    Select Case gErr

        Case 129263
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129264, 129265
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
        
        Case 129266
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150255)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function MedicaoContrato_Le(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Le a medição de contrato através do código

Dim lErro As Long
Dim lComando As Long
Dim tMedicaoContrato As typeMedicaoContrato

On Error GoTo Erro_MedicaoContrato_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129620

    With tMedicaoContrato
    
        'Le a medição de contrato no BD
        lErro = Comando_Executar(lComando, "SELECT Data, Codigo, NumIntContrato FROM MedicaoContrato WHERE Codigo = ? ", _
                                                .dtData, .lCodigo, .lNumIntContrato, objMedicaoContrato.lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 129621
   
        'Busca a medição
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116912
        If lErro = AD_SQL_SEM_DADOS Then gError 129622

        'Preenche o objMedicaoContrato com os dados trazidos do BD
        objMedicaoContrato.lCodigo = .lCodigo
        objMedicaoContrato.dtData = .dtData
        objMedicaoContrato.lNumIntContrato = .lNumIntContrato
    
    End With
    
    'Le os itens da Medição
    lErro = CF("ItensDeMedicaoContrato_Le", objMedicaoContrato)
    If lErro <> SUCESSO Then gError 129623
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    MedicaoContrato_Le = SUCESSO

    Exit Function

Erro_MedicaoContrato_Le:

    MedicaoContrato_Le = gErr

    Select Case gErr

        Case 129620
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129621
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MEDICAOCONTRATO", gErr)

        Case 129622, 129623
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150256)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeMedicaoContrato_Le(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Le os itens de uma medição de contrato

Dim lErro As Long
Dim lComando As Long
Dim tItensDeMedicaoContrato As typeItensDeMedicaoContrato
Dim objItensDeMedicaoContrato As ClassItensMedCtr
Dim objItensDeContrato As ClassItensDeContrato
Dim tItensDeContrato As typeItensDeContrato
Dim sContrato As String

On Error GoTo Erro_ItensDeMedicaoContrato_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129624
    
    'Aloca espaço nos buffers
    tItensDeContrato.sDescProd = String(STRING_ITENSDECONTRATO_DESCPROD, 0)
    tItensDeContrato.sObservacao = String(STRING_ITENSDECONTRATO_OBSERVACAO, 0)
    tItensDeContrato.sProduto = String(STRING_ITENSDECONTRATO_PRODUTO, 0)
    tItensDeContrato.sUM = String(STRING_ITENSDECONTRATO_UM, 0)
    sContrato = String(STRING_CONTRATO_CODIGO, 0)

    With tItensDeMedicaoContrato
    
        'Le os itens do BD
        lErro = Comando_Executar(lComando, "SELECT IM.Custo, IM.Quantidade, IM.VlrCobrar, IM.Status, IM.NumIntItensContrato, IM.Medicao, IM.DataCobranca, IM.DataRefIni, IM.DataRefFim, " & _
                                                    "IC.NumIntDoc, IC.NumIntContrato, IC.Seq, IC.Cobrar, IC.Produto, IC.DescProd, IC.Quantidade, IC.UM, IC.Valor, IC.Medicao, IC.DataIniCobranca, IC.Periodicidade, IC.CondPagto, IC.Observacao, IC.DataRefIni, IC.DataRefFim, C.Codigo " & _
                                                    "FROM ItensDeMedicaoContrato AS IM, ItensDEContrato AS IC, Contratos AS C WHERE C.NumIntDoc = IC.NumIntContrato AND IC.NumIntDoc = IM.NumIntItensContrato AND IM.Medicao = ? ", _
                                                 .dCusto, .dQuantidade, .dVlrCobrar, .iStatus, .lNumIntItensContrato, .lMedicao, .dtDataCobranca, .dtDataRefIni, .dtDataRefFim, _
                                                 tItensDeContrato.lNumIntDoc, tItensDeContrato.lNumIntContrato, tItensDeContrato.iSeq, tItensDeContrato.iCobrar, tItensDeContrato.sProduto, tItensDeContrato.sDescProd, tItensDeContrato.dQuantidade, tItensDeContrato.sUM, tItensDeContrato.dValor, _
                                                 tItensDeContrato.iMedicao, tItensDeContrato.dtDataIniCobranca, tItensDeContrato.iPeriodicidade, tItensDeContrato.iCondPagto, tItensDeContrato.sObservacao, _
                                                 tItensDeContrato.dtDataRefIni, tItensDeContrato.dtDataRefFim, sContrato, objMedicaoContrato.lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 129625
   
        'Busca o primeiro item de medição
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129626
        
        'Equando existirem registros
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'Aloca espaço para um novo Item de Medição
            Set objItensDeMedicaoContrato = New ClassItensMedCtr
            
            'Preenche o objItensDeMedicaoContrato com os dados trazidos do BD
            objItensDeMedicaoContrato.lMedicao = objMedicaoContrato.lCodigo
            objItensDeMedicaoContrato.dCusto = .dCusto
            objItensDeMedicaoContrato.dQuantidade = .dQuantidade
            objItensDeMedicaoContrato.dVlrCobrar = .dVlrCobrar
            objItensDeMedicaoContrato.iStatus = .iStatus
            objItensDeMedicaoContrato.lNumIntItensContrato = .lNumIntItensContrato
            objItensDeMedicaoContrato.dtDataRefIni = .dtDataRefIni
            objItensDeMedicaoContrato.dtDataRefFim = .dtDataRefFim
            objItensDeMedicaoContrato.dtDataCobranca = .dtDataCobranca
            objItensDeMedicaoContrato.iItem = tItensDeContrato.iSeq
            objItensDeMedicaoContrato.sContrato = sContrato
            
            'Aloca espaço para um novo Item de Contrato
            Set objItensDeContrato = New ClassItensDeContrato
            
            objItensDeContrato.lNumIntDoc = tItensDeContrato.lNumIntDoc
            objItensDeContrato.lNumIntContrato = tItensDeContrato.lNumIntContrato
            objItensDeContrato.iSeq = tItensDeContrato.iSeq
            objItensDeContrato.iCobrar = tItensDeContrato.iCobrar
            objItensDeContrato.sProduto = tItensDeContrato.sProduto
            objItensDeContrato.sDescProd = tItensDeContrato.sDescProd
            objItensDeContrato.dQuantidade = tItensDeContrato.dQuantidade
            objItensDeContrato.sUM = tItensDeContrato.sUM
            objItensDeContrato.dValor = tItensDeContrato.dValor
            objItensDeContrato.iMedicao = tItensDeContrato.iMedicao
            objItensDeContrato.dtDataIniCobranca = tItensDeContrato.dtDataIniCobranca
            objItensDeContrato.iPeriodicidade = tItensDeContrato.iPeriodicidade
            objItensDeContrato.iCondPagto = tItensDeContrato.iCondPagto
            objItensDeContrato.sObservacao = tItensDeContrato.sObservacao
            objItensDeContrato.dtDataRefIni = tItensDeContrato.dtDataRefIni
            objItensDeContrato.dtDataRefFim = tItensDeContrato.dtDataRefFim
           
            'Associa o item de contrato ao item de medição
            Set objItensDeMedicaoContrato.objItensDeContrato = objItensDeContrato
            
            'Adiciona o item de medição a coleção objMedicaoContrato.colItens
            objMedicaoContrato.colItens.Add objItensDeMedicaoContrato
        
            'Busca o próximo item de medição
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129627

        Loop
    
    End With
        
    'Fecha o comando
    Call Comando_Fechar(lComando)

    ItensDeMedicaoContrato_Le = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Le:

    ItensDeMedicaoContrato_Le = gErr

    Select Case gErr

        Case 129624
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129625 To 129627
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150257)

    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeContrato_Le_DadosFatura(ByVal objNF As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
'Le os Dados da última Fatura Gerada Por um Item de Contrato
'ou por um Item de Medição

Dim lErro As Long
Dim lComando As Long
Dim lNumIntNF As Long
Dim lNumIntItemNF As Long
Dim dtDataUltCobranca As Date
Dim dtDataRefIni As Date
Dim dtDataRefFim As Date
Dim lMedicao As Long

On Error GoTo Erro_ItensDeContrato_Le_DadosFatura

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129901

    'Se tiver medições
    If objItemNF.objCobrItensContrato.colMedicoes.Count = 0 Then
    
        'Se fatura estiver associada a um item de Contrato = > Le ItensDeContratoCobranca
        lErro = Comando_Executar(lComando, "SELECT NF.NumIntDoc, INF.NumIntDoc, IC.DataUltCobranca, IC.DataRefIni, IC.DataRefFim FROM ItensNFiscal AS INF, NFiscal AS NF, ItensDeContratoCobranca As IC WHERE IC.NumIntItemNFiscal = INF.NumIntDoc AND NF.NumIntDoc = INF.NumIntNF AND IC.NumIntItensContrato = ? AND IC.DataUltCobranca = (SELECT Max(ICAux.DataUltCobranca) FROM ItensDeContratoCobranca AS ICAux WHERE ICAux.NumIntItensContrato = IC.NumIntItensContrato)", _
                                                lNumIntNF, lNumIntItemNF, dtDataUltCobranca, dtDataRefIni, dtDataRefFim, objItemNF.objCobrItensContrato.lNumIntItensContrato)
    Else
    
        'Se fatura estiver associada a um item de Medição = > Le ItensDeMedicaoCobranca
        lErro = Comando_Executar(lComando, "SELECT NF.NumIntDoc, INF.NumIntDoc, IM.DataUltCobranca, IM.DataRefIni, IM.DataRefFim,IM.Medicao FROM ItensNFiscal AS INF, NFiscal AS NF, ItensDeMedicaoCobranca As IM WHERE IM.NumIntItemNFiscal = INF.NumIntDoc AND NF.NumIntDoc = INF.NumIntNF AND IM.NumIntItensContrato = ? AND IM.DataUltCobranca = (SELECT Max(IMAux.DataUltCobranca) FROM ItensDeMedicaoCobranca AS IMAux WHERE IM.NumIntItensContrato = IMAux.NumIntItensContrato AND IM.Medicao = IMAux.Medicao) AND IM.Medicao = ? ", _
                                                lNumIntNF, lNumIntItemNF, dtDataUltCobranca, dtDataRefIni, dtDataRefFim, lMedicao, objItemNF.objCobrItensContrato.lNumIntItensContrato, objItemNF.objCobrItensContrato.lMedicao)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 129902
    
    'Busca item
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129903
    
    'Se não encontrar e for um item de contrato
    If lErro = AD_SQL_SEM_DADOS And objItemNF.objCobrItensContrato.colMedicoes.Count = 0 Then
        
        'Verifica se o item de contrato foi faturado como item de medição
        lErro = Comando_Executar(lComando, "SELECT NF.NumIntDoc, INF.NumIntDoc, IM.DataUltCobranca,IM.DataRefIni, IM.DataRefFim FROM ItensNFiscal AS INF, NFiscal AS NF, ItensDeMedicaoCobranca As IM WHERE IM.NumIntItemNFiscal = INF.NumIntDoc AND NF.NumIntDoc = INF.NumIntNF AND IM.NumIntItensContrato = ? AND IM.DataUltCobranca = (SELECT Max(IMAux.DataUltCobranca) FROM ItensDeMedicaoCobranca AS IMAux WHERE IM.NumIntItensContrato = IMAux.NumIntItensContrato)", _
                                                lNumIntNF, lNumIntItemNF, dtDataUltCobranca, dtDataRefIni, dtDataRefFim, objItemNF.objCobrItensContrato.lNumIntItensContrato)
        If lErro <> AD_SQL_SUCESSO Then gError 131025
   
        'Busca item
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131026
    
    End If

    'Se não encontrar => Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 129904

    objNF.lNumIntDoc = lNumIntNF
    objItemNF.lNumIntDoc = lNumIntItemNF
    objItemNF.objCobrItensContrato.dtDataUltCobranca = dtDataUltCobranca
    objItemNF.objCobrItensContrato.dtDataRefIni = dtDataRefIni
    objItemNF.objCobrItensContrato.dtDataRefFim = dtDataRefFim

    'Le a Nota Fiscal Para garantir que ela ainda existe
    lErro = CF("NFiscal_Le", objNF)
    If lErro <> SUCESSO And lErro <> 31442 Then gError 129905
    If lErro = 31442 Then gError 129907
    
    'Le o Item da Nota Fiscal Para garantir que ele ainda existe
    lErro = CF("ItemNFiscal_Le", objItemNF)
    If lErro <> SUCESSO And lErro <> 35225 Then gError 129906
    If lErro = 31442 Then gError 129908
    
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContrato_Le_DadosFatura = SUCESSO

    Exit Function

Erro_ItensDeContrato_Le_DadosFatura:

    ItensDeContrato_Le_DadosFatura = gErr

    Select Case gErr

        Case 129901
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129902 To 129903, 131025 To 131026
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 129904 To 129908

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150258)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'#######################################################################
'FIM
'#######################################################################

'######################################################
'Inserido por Wagner
Function ItensDeContrato_Le3(ByVal objItensDeContrato As ClassItensDeContrato) As Long
'Le os Itens de Contrato Pelo NumIntDoc do Item

Dim lErro As Long
Dim lComando As Long
Dim tItensDeContrato As typeItensDeContrato

On Error GoTo Erro_ItensDeContrato_Le3

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129263

    With tItensDeContrato
    
        'Aloca espaço no buffers
        .sDescProd = String(STRING_ITENSDECONTRATO_DESCPROD, 0)
        .sObservacao = String(STRING_ITENSDECONTRATO_OBSERVACAO, 0)
        .sProduto = String(STRING_ITENSDECONTRATO_PRODUTO, 0)
        .sUM = String(STRING_ITENSDECONTRATO_UM, 0)

        'Le o Item de Contrato do BD
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim, QtdeParcelas, UltParcCobrada FROM ItensDeContrato WHERE NumIntDoc = ? ORDER BY Seq ", _
                                                 .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim, .iQtdeParcelas, .iUltParcCobrada, objItensDeContrato.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 129264
   
        'Busca o item
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129265
        If lErro = AD_SQL_SEM_DADOS Then gError 129266
        
        'Preenche o objItensDeContrato com os dados trazidos do BD
        objItensDeContrato.lNumIntDoc = .lNumIntDoc
        objItensDeContrato.lNumIntContrato = .lNumIntContrato
        objItensDeContrato.iSeq = .iSeq
        objItensDeContrato.iCobrar = .iCobrar
        objItensDeContrato.sProduto = .sProduto
        objItensDeContrato.sDescProd = .sDescProd
        objItensDeContrato.dQuantidade = .dQuantidade
        objItensDeContrato.sUM = .sUM
        objItensDeContrato.dValor = .dValor
        objItensDeContrato.iMedicao = .iMedicao
        objItensDeContrato.dtDataIniCobranca = .dtDataIniCobranca
        objItensDeContrato.iPeriodicidade = .iPeriodicidade
        objItensDeContrato.iCondPagto = .iCondPagto
        objItensDeContrato.sObservacao = .sObservacao
        objItensDeContrato.dtDataProxCobranca = .dtDataProxCobranca
        objItensDeContrato.dtDataRefIni = .dtDataRefIni
        objItensDeContrato.dtDataRefFim = .dtDataRefFim
        objItensDeContrato.iQtdeParcelas = .iQtdeParcelas
        objItensDeContrato.iUltParcCobrada = .iUltParcCobrada
                
    End With
        
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContrato_Le3 = SUCESSO

    Exit Function

Erro_ItensDeContrato_Le3:

    ItensDeContrato_Le3 = gErr

    Select Case gErr

        Case 129263
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129264, 129265
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
        
        Case 129266
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150259)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscal_Le_Contrato(ByVal objItemNF As ClassItemNF) As Long

Dim lErro As Long
Dim lComando As Long
Dim lMedicao As Long
Dim lNumIntItemContrato As Long
Dim dtDataUltCobranca As Date
Dim lNumIntDocCobranca As Long
Dim dtDataRefIni As Date
Dim dtDataRefFim As Date
Dim objItemMedicao As ClassItensMedCtr
Dim iItem As Integer
Dim sContrato As String

On Error GoTo Erro_NFiscal_Le_Contrato

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 132980

    lErro = Comando_Executar(lComando, "SELECT ICC.NumIntItensContrato, ICC.DataUltCobranca, ICC.NumIntDocCobranca, ICC.DataRefIni, ICC.DataRefFim FROM ItensDeContratoCobranca AS ICC WHERE ICC.NumIntItemNFiscal = ?", lNumIntItemContrato, dtDataUltCobranca, lNumIntDocCobranca, dtDataRefIni, dtDataRefFim, objItemNF.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 132981
    
    'Busca item
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132982
       
    If lErro = AD_SQL_SEM_DADOS Then
        
        sContrato = String(STRING_CONTRATO_CODIGO, 0)
        
        lErro = Comando_Executar(lComando, "SELECT IMC.NumIntItensContrato, IMC.Medicao, IMC.DataUltCobranca, IMC.NumIntDocCobranca, IMC.DataRefIni, IMC.DataRefFim, IC.Seq, C.Codigo FROM ItensDeMedicaoCobranca AS IMC, ItensDeContrato AS IC, Contratos AS C WHERE C.NumIntDoc = IC.NumIntContrato AND IC.Numintdoc = IMC.NumIntItensContrato AND IMC.NumIntItemNFiscal = ?", lNumIntItemContrato, lMedicao, dtDataUltCobranca, lNumIntDocCobranca, dtDataRefIni, dtDataRefFim, iItem, sContrato, objItemNF.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 132983
        
        'Busca item
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132984
        
        If lErro = AD_SQL_SEM_DADOS Then gError 132986
    
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objItemMedicao = New ClassItensMedCtr
        
            objItemMedicao.lMedicao = lMedicao
            objItemMedicao.iItem = iItem
        
            lErro = CF("ItensDeMedicaoContrato_Le2", objItemMedicao)
            If lErro <> SUCESSO And lErro <> 136173 Then gError 136221
            
            If lErro = 136173 Then gError 136222
            
            objItemNF.objCobrItensContrato.colMedicoes.Add objItemMedicao
        
            'Busca item
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132984
        
        Loop
    
    End If
    
    objItemNF.objCobrItensContrato.dtDataUltCobranca = dtDataUltCobranca
    objItemNF.objCobrItensContrato.lMedicao = lMedicao
    objItemNF.objCobrItensContrato.lNumIntDocCobranca = lNumIntDocCobranca
    objItemNF.objCobrItensContrato.lNumIntItemNF = objItemNF.lNumIntDoc
    objItemNF.objCobrItensContrato.lNumIntItensContrato = lNumIntItemContrato
    objItemNF.objCobrItensContrato.dtDataRefIni = dtDataRefIni
    objItemNF.objCobrItensContrato.dtDataRefFim = dtDataRefFim
       
    'Fecha comando
    Call Comando_Fechar(lComando)

    NFiscal_Le_Contrato = SUCESSO

    Exit Function

Erro_NFiscal_Le_Contrato:

    NFiscal_Le_Contrato = gErr

    Select Case gErr

        Case 132980
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 132981 To 132984
        
        Case 132986, 136221
        
        Case 136222
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMMEDICAO_NAO_CADASTRADO", gErr, objItemMedicao.lMedicao, sContrato, objItemMedicao.iItem)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150260)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeMedicaoContrato_Le2(ByVal objItemMedicao As ClassItensMedCtr) As Long
'Le um item de uma medição de contrato com o código da medição e o item

Dim lErro As Long
Dim lComando As Long
Dim tItensDeMedicaoContrato As typeItensDeMedicaoContrato
Dim objItensDeContrato As ClassItensDeContrato
Dim tItensDeContrato As typeItensDeContrato
Dim sContrato As String

On Error GoTo Erro_ItensDeMedicaoContrato_Le2

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 136170
    
    'Aloca espaço nos buffers
    tItensDeContrato.sDescProd = String(STRING_ITENSDECONTRATO_DESCPROD, 0)
    tItensDeContrato.sObservacao = String(STRING_ITENSDECONTRATO_OBSERVACAO, 0)
    tItensDeContrato.sProduto = String(STRING_ITENSDECONTRATO_PRODUTO, 0)
    tItensDeContrato.sUM = String(STRING_ITENSDECONTRATO_UM, 0)
    sContrato = String(STRING_CONTRATO_CODIGO, 0)

    With tItensDeMedicaoContrato
    
        'Le os itens do BD
        lErro = Comando_Executar(lComando, "SELECT IM.Custo, IM.Quantidade, IM.VlrCobrar, IM.Status, IM.NumIntItensContrato, IM.Medicao, IM.DataCobranca, IM.DataRefIni, IM.DataRefFim, " & _
                                                    "IC.NumIntDoc, IC.NumIntContrato, IC.Seq, IC.Cobrar, IC.Produto, IC.DescProd, IC.Quantidade, IC.UM, IC.Valor, IC.Medicao, IC.DataIniCobranca, IC.Periodicidade, IC.CondPagto, IC.Observacao, IC.DataRefIni, IC.DataRefFim, C.Codigo " & _
                                                    "FROM ItensDeMedicaoContrato AS IM, ItensDEContrato AS IC, Contratos AS C WHERE IC.NumIntContrato=C.NumintDoc AND IC.NumIntDoc = IM.NumIntItensContrato AND IM.Medicao = ? AND IC.Seq = ? ", _
                                                 .dCusto, .dQuantidade, .dVlrCobrar, .iStatus, .lNumIntItensContrato, .lMedicao, .dtDataCobranca, .dtDataRefIni, .dtDataRefFim, _
                                                 tItensDeContrato.lNumIntDoc, tItensDeContrato.lNumIntContrato, tItensDeContrato.iSeq, tItensDeContrato.iCobrar, tItensDeContrato.sProduto, tItensDeContrato.sDescProd, tItensDeContrato.dQuantidade, tItensDeContrato.sUM, tItensDeContrato.dValor, _
                                                 tItensDeContrato.iMedicao, tItensDeContrato.dtDataIniCobranca, tItensDeContrato.iPeriodicidade, tItensDeContrato.iCondPagto, tItensDeContrato.sObservacao, _
                                                 tItensDeContrato.dtDataRefIni, tItensDeContrato.dtDataRefFim, sContrato, objItemMedicao.lMedicao, objItemMedicao.iItem)
        If lErro <> AD_SQL_SUCESSO Then gError 136171
   
        'Busca o primeiro item de medição
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136172
        
        'Equando existirem registros
        If lErro = AD_SQL_SEM_DADOS Then gError 136173
        
        'Preenche o objItemMedicao com os dados trazidos do BD
        objItemMedicao.dCusto = .dCusto
        objItemMedicao.dQuantidade = .dQuantidade
        objItemMedicao.dVlrCobrar = .dVlrCobrar
        objItemMedicao.iStatus = .iStatus
        objItemMedicao.lNumIntItensContrato = .lNumIntItensContrato
        objItemMedicao.dtDataRefIni = .dtDataRefIni
        objItemMedicao.dtDataRefFim = .dtDataRefFim
        objItemMedicao.dtDataCobranca = .dtDataCobranca
        objItemMedicao.iItem = tItensDeContrato.iSeq
        objItemMedicao.sContrato = sContrato
            
         'Aloca espaço para um novo Item de Contrato
         Set objItensDeContrato = New ClassItensDeContrato
         
         objItensDeContrato.lNumIntDoc = tItensDeContrato.lNumIntDoc
         objItensDeContrato.lNumIntContrato = tItensDeContrato.lNumIntContrato
         objItensDeContrato.iSeq = tItensDeContrato.iSeq
         objItensDeContrato.iCobrar = tItensDeContrato.iCobrar
         objItensDeContrato.sProduto = tItensDeContrato.sProduto
         objItensDeContrato.sDescProd = tItensDeContrato.sDescProd
         objItensDeContrato.dQuantidade = tItensDeContrato.dQuantidade
         objItensDeContrato.sUM = tItensDeContrato.sUM
         objItensDeContrato.dValor = tItensDeContrato.dValor
         objItensDeContrato.iMedicao = tItensDeContrato.iMedicao
         objItensDeContrato.dtDataIniCobranca = tItensDeContrato.dtDataIniCobranca
         objItensDeContrato.iPeriodicidade = tItensDeContrato.iPeriodicidade
         objItensDeContrato.iCondPagto = tItensDeContrato.iCondPagto
         objItensDeContrato.sObservacao = tItensDeContrato.sObservacao
         objItensDeContrato.dtDataRefIni = tItensDeContrato.dtDataRefIni
         objItensDeContrato.dtDataRefFim = tItensDeContrato.dtDataRefFim
        
         'Associa o item de contrato ao item de medição
         Set objItemMedicao.objItensDeContrato = objItensDeContrato
                
    End With
        
    'Fecha o comando
    Call Comando_Fechar(lComando)

    ItensDeMedicaoContrato_Le2 = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Le2:

    ItensDeMedicaoContrato_Le2 = gErr

    Select Case gErr

        Case 136170
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 136171 To 136172
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr)

        Case 136173

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150261)

    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function
'############################################################################

Function NFiscalRemVendaForaEstab_Le(ByVal objNFiscalOriginal As ClassNFiscal) As Long
'Busca Nota Fiscal, em [NFiscal e TiposDocInfo] com a Série e o Número Passados
'Nota Remessa Venda Fora Estabelecimento e com o Tipo com o Complementar NOrmal

Dim lErro As Long
Dim lComando As Long
Dim sComandoSQL As String
Dim tNFiscal As typeNFiscal

On Error GoTo Erro_NFiscalRemVendaForaEstab_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 126509

    With tNFiscal

        .sMensagemNota = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sMensagemCorpoNota = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sNaturezaOp = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sPlaca = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sPlacaUF = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sSerie = String(STRING_BUFFER_MAX_TEXTO, 0)
        .sNumPedidoTerc = String(STRING_BUFFER_MAX_TEXTO, 0)

        sComandoSQL = "SELECT NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, CodTranspRedesp, DetPagFrete, SemDataSaida, NaoImpCobranca, MensagemCorpoNota FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND NFiscal.NumNotaFiscal = ? AND NFiscal.Serie = ? AND NFiscal.Status <> ? AND TiposDocInfo.Sigla = ? AND NFiscal.FilialEmpresa = ? ORDER BY DataEmissao DESC "
        
        'Busca a Nota Fiscal
        lErro = Comando_Executar(lComando, sComandoSQL, .lNumIntDoc, .iStatus, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .iCodTranspRedesp, .iDetPagFrete, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, objNFiscalOriginal.lNumNotaFiscal, objNFiscalOriginal.sSerie, STATUS_EXCLUIDO, "NFISRVFE", giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 126510

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126511
        'Não encontrou
        If lErro = AD_SQL_SEM_DADOS Then gError 126512

        objNFiscalOriginal.dPesoBruto = .dPesoBruto
        objNFiscalOriginal.dPesoLiq = .dPesoLiq
        objNFiscalOriginal.dtDataEmissao = .dtDataEmissao
        objNFiscalOriginal.dtDataEntrada = .dtDataEntrada
        objNFiscalOriginal.dtDataSaida = .dtDataSaida
        objNFiscalOriginal.dtDataVencimento = .dtDataVencimento
        objNFiscalOriginal.dValorDesconto = .dValorDesconto
        objNFiscalOriginal.dValorFrete = .dValorFrete
        objNFiscalOriginal.dValorOutrasDespesas = .dValorOutrasDespesas
        objNFiscalOriginal.dValorProdutos = .dValorProdutos
        objNFiscalOriginal.dValorSeguro = .dValorSeguro
        objNFiscalOriginal.dValorTotal = .dValorTotal
        objNFiscalOriginal.iCanal = .iCanal
        objNFiscalOriginal.iClasseDocCPR = .iClasseDocCPR
        objNFiscalOriginal.iCodTransportadora = .iCodTransportadora
        objNFiscalOriginal.iCodTranspRedesp = .iCodTranspRedesp
        objNFiscalOriginal.iDetPagFrete = .iDetPagFrete
        objNFiscalOriginal.iSemDataSaida = .iSemDataSaida
        objNFiscalOriginal.iNaoImpCobranca = .iNaoImpCobranca
        objNFiscalOriginal.iFilialCli = .iFilialCli
        objNFiscalOriginal.iFilialEntrega = .iFilialEntrega
        objNFiscalOriginal.iFilialForn = .iFilialForn
        objNFiscalOriginal.iStatus = .iStatus
        objNFiscalOriginal.iTabelaPreco = .iTabelaPreco
        objNFiscalOriginal.iTipoNFiscal = .iTipoNFiscal
        objNFiscalOriginal.lVolumeQuant = .lVolumeQuant
        objNFiscalOriginal.lCliente = .lCliente
        objNFiscalOriginal.lFornecedor = .lFornecedor
        objNFiscalOriginal.lNumIntDocCPR = .lNumIntDocCPR
        objNFiscalOriginal.lNumIntNotaOriginal = .lNumIntNotaOriginal
        objNFiscalOriginal.lNumIntTrib = .lNumIntTrib
        objNFiscalOriginal.lNumNotaFiscal = .lNumNotaFiscal
        objNFiscalOriginal.sNumPedidoTerc = .sNumPedidoTerc
        objNFiscalOriginal.lNumPedidoVenda = .lNumPedidoVenda
        objNFiscalOriginal.sMensagemNota = .sMensagemNota
        objNFiscalOriginal.sNaturezaOp = .sNaturezaOp
        objNFiscalOriginal.sPlaca = .sPlaca
        objNFiscalOriginal.sPlacaUF = .sPlacaUF
        objNFiscalOriginal.sSerie = .sSerie
        objNFiscalOriginal.lVolumeEspecie = .lVolumeEspecie
        objNFiscalOriginal.lVolumeMarca = .lVolumeMarca
        objNFiscalOriginal.lNumIntDoc = .lNumIntDoc
        objNFiscalOriginal.iFilialEmpresa = .iFilialEmpresa
        objNFiscalOriginal.sMensagemCorpoNota = .sMensagemCorpoNota

    End With
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    NFiscalRemVendaForaEstab_Le = SUCESSO

    Exit Function

Erro_NFiscalRemVendaForaEstab_Le:

    NFiscalRemVendaForaEstab_Le = gErr

    Select Case gErr

        Case 126509
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126510, 126511
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 126512

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150262)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function MargContr_CalculaComissoes(gcolComissoes As Collection, ByVal gobjMargContr As ClassMargContr, gdPrecoComissoes As Double, gobjTelaComissoes As Object, ByVal sNomeRedCliente As String, ByVal sUM As String) As Long

Dim lErro As Long
Dim objItemPedido As New ClassItemPedido, dPrecoUnitario As Double
Dim objItemNF As New ClassItemNF

On Error GoTo Erro_MargContr_CalculaComissoes

    Set gcolComissoes = New Collection
    
    If gobjMargContr.dPrecoPraticadoInformado <> 0 Then
    
        dPrecoUnitario = gobjMargContr.dPrecoPraticadoInformado
    
    Else
    
        objItemPedido.iFilialEmpresa = gobjMargContr.iFilialFaturamento
        objItemPedido.sProduto = gobjMargContr.sProduto
        lErro = CF("ClienteFilial_Le_UltimoItemPedido", objItemPedido, gobjMargContr.lCodCliente, gobjMargContr.iCodFilial)
        If lErro <> SUCESSO And lErro <> 94412 Then gError 106677
    
        'Se encontrou o Item de pedido
        If lErro = SUCESSO Then
        
            lErro = CF("Produto_ConvPrecoUMAnalise", objItemPedido.sProduto, objItemPedido.sUnidadeMed, objItemPedido.dPrecoUnitario, dPrecoUnitario)
            If lErro <> SUCESSO Then gError 130002
            
        Else
        
            objItemNF.sProduto = gobjMargContr.sProduto
            lErro = CF("ClienteFilial_Le_UltimoItemNFVenda", objItemNF, gobjMargContr.iFilialFaturamento, gobjMargContr.lCodCliente, gobjMargContr.iCodFilial)
            If lErro = SUCESSO Then
            
                lErro = CF("Produto_ConvPrecoUMAnalise", objItemNF.sProduto, objItemNF.sUnidadeMed, objItemNF.dPrecoUnitario, dPrecoUnitario)
                If lErro <> SUCESSO Then gError 130001
                
            End If
                
        End If

        If dPrecoUnitario = 0 Then dPrecoUnitario = 1
    
    End If
    
    gdPrecoComissoes = dPrecoUnitario
    
    lErro = gobjTelaComissoes.Trata_Parametros(gobjMargContr.iFilialFaturamento, sNomeRedCliente, gobjMargContr.iCodFilial, gobjMargContr.sProduto, gobjMargContr.dQuantidade, sUM, dPrecoUnitario, gcolComissoes)
    If lErro <> SUCESSO Then gError 106861
        
    MargContr_CalculaComissoes = SUCESSO
     
    Exit Function
    
Erro_MargContr_CalculaComissoes:

    MargContr_CalculaComissoes = gErr
     
    Select Case gErr
          
        Case 130002, 130003
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150263)
     
    End Select
     
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function FormacaoPrecoCalc_Le(ByVal objCalcPrecoVenda As ClassCalcPrecoVenda) As Long

Dim lErro As Long
Dim lComando As Long
Dim iFilialEmpresa As Integer
Dim dtData As Date

On Error GoTo Erro_FormacaoPrecoCalc_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 138925

    'Alocação de espaço no buffer

    'Le a tabelaFormacaoPrecoCalcData
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Data FROM FormacaoPrecoCalcData WHERE FilialEmpresa= ?  AND Data= ? ", _
                iFilialEmpresa, dtData, _
                objCalcPrecoVenda.iFilialEmpresa, objCalcPrecoVenda.dtDataReferencia)
    If lErro <> AD_SQL_SUCESSO Then gError 138926

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 138927

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError 138928

    objCalcPrecoVenda.iFilialEmpresa = iFilialEmpresa
    objCalcPrecoVenda.dtDataReferencia = dtData

    'Fecha Comando
    Call Comando_Fechar(lComando)

    FormacaoPrecoCalc_Le = SUCESSO

    Exit Function

Erro_FormacaoPrecoCalc_Le:

    FormacaoPrecoCalc_Le = gErr

    Select Case gErr

        Case 138925
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 138926, 138927
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORMACAOPRECOCALCDATA", gErr)

        Case 138928 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150274)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'#############################
'Inserido por Wagner 12/09/05
Public Function Cliente_Le_Faixa(ByVal objClienteFaixa As ClassClienteFaixa, ByVal colCliente As Collection, ByVal colClienteEstatistica As Collection) As Long
 
Dim lErro As Long
Dim iIndice As Integer
Dim sSQL As String
Dim sWhere As String
Dim vlCliente As Variant
Dim alComando(1 To 1) As Long
Dim objCliente As ClassCliente
Dim objClienteEstatistica As ClassFilialClienteEst
Dim vlCliIni As Variant
Dim vlCliFim As Variant
Dim viAtivo As Variant

On Error GoTo Erro_Cliente_Le_Faixa
    
    vlCliIni = objClienteFaixa.lClienteDe
    vlCliFim = objClienteFaixa.lClienteAte
    vlCliente = CLng(0)
    viAtivo = CLIENTE_ATIVO
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140161
    Next
    
    sSQL = "SELECT Codigo FROM Clientes WHERE 1 = 1 "
 
    If vlCliIni <> 0 Then
        sWhere = sWhere & "AND Codigo >= ? "
    End If
    If vlCliFim <> 0 Then
        sWhere = sWhere & "AND Codigo <= ? "
    End If
    
    sSQL = sSQL & sWhere
    
    sSQL = sSQL & "ORDER BY Codigo "
 
    lErro = Comando_PrepararInt(alComando(1), sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140162
 
    lErro = Comando_BindVarInt(alComando(1), vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140163
 
'    lErro = Comando_BindVarInt(alComando(1), viAtivo)
'    If (lErro <> AD_SQL_SUCESSO) Then gError 140242
 
    If vlCliIni <> 0 Then
        lErro = Comando_BindVarInt(alComando(1), vlCliIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140164
    End If
    
    If vlCliFim <> 0 Then
        lErro = Comando_BindVarInt(alComando(1), vlCliFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140165
    End If
 
    lErro = Comando_ExecutarInt(alComando(1))
    If (lErro <> AD_SQL_SUCESSO) Then gError 140166
 
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140167
        
    'Para cada Produto
    Do While lErro = SUCESSO
    
        Set objCliente = New ClassCliente
        Set objClienteEstatistica = New ClassFilialClienteEst

        objCliente.lCodigo = vlCliente
        
        'Lê o produto
        lErro = CF("Cliente_Le_Estendida", objCliente, objClienteEstatistica)
        If lErro <> SUCESSO And lErro <> 52591 Then gError 140168
        
        colCliente.Add objCliente
        colClienteEstatistica.Add objClienteEstatistica
     
        'Busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140169
 
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Cliente_Le_Faixa = SUCESSO
 
    Exit Function
 
Erro_Cliente_Le_Faixa:
 
    Cliente_Le_Faixa = gErr
 
    Select Case gErr
 
        Case 140161
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 140162 To 140167, 140169, 140242
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case 140168
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150275)
 
    End Select
 
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Exit Function
 
End Function

Public Function FilialCliente_Le_Faixa(ByVal objClienteFaixa As ClassClienteFaixa, ByVal colFilialCliente As Collection, ByVal colFilialClienteEst As Collection) As Long
 
Dim lErro As Long
Dim iIndice As Integer
Dim sSQL As String
Dim sWhere As String
Dim vlCliente As Variant
Dim viFilialCliente As Variant
Dim alComando(1 To 1) As Long
Dim objFilialClienteEstatistica As New ClassFilialClienteEst
Dim objFilialCliente As ClassFilialCliente
Dim vlCliIni As Variant
Dim vlCliFim As Variant
Dim viVendIni As Variant
Dim viVendFim As Variant
Dim viAtivo As Variant
Dim vlNumIntRelFiltroFilCliCat As Long

On Error GoTo Erro_FilialCliente_Le_Faixa
    
    vlCliIni = objClienteFaixa.lClienteDe
    vlCliFim = objClienteFaixa.lClienteAte
    viVendIni = objClienteFaixa.iVendedorDe
    viVendFim = objClienteFaixa.iVendedorAte
    vlCliente = CLng(0)
    viFilialCliente = CInt(0)
    viAtivo = CLIENTE_ATIVO
    vlNumIntRelFiltroFilCliCat = objClienteFaixa.lNumIntRelFiltroFilCliCat
 
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140243
    Next
 
    If vlNumIntRelFiltroFilCliCat = 0 Then
        
        sSQL = "SELECT CodCliente, CodFilial FROM FiliaisClientes WHERE 1 = 1 "
        
        If vlCliIni <> 0 Then
            sWhere = sWhere & "AND CodCliente >= ? "
        End If
        If vlCliFim <> 0 Then
            sWhere = sWhere & "AND CodCliente <= ? "
        End If
    
        If viVendIni <> 0 Then
            sWhere = sWhere & "AND Vendedor >= ? "
        End If
        If viVendFim <> 0 Then
            sWhere = sWhere & "AND Vendedor <= ? "
        End If
    
        sSQL = sSQL & sWhere
        
        sSQL = sSQL & "ORDER BY CodCliente, CodFilial "
    
    Else
        sSQL = "SELECT Cliente, Filial FROM RelFiltroFilCliCat WHERE NumIntRel = ? ORDER BY Cliente, Filial "
    End If
    
 
    lErro = Comando_PrepararInt(alComando(1), sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140244
 
    lErro = Comando_BindVarInt(alComando(1), vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140245
 
    lErro = Comando_BindVarInt(alComando(1), viFilialCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140246
 
'    lErro = Comando_BindVarInt(alComando(1), viAtivo)
'    If (lErro <> AD_SQL_SUCESSO) Then gError 140247
 
    If vlNumIntRelFiltroFilCliCat = 0 Then
       If vlCliIni <> 0 Then
           lErro = Comando_BindVarInt(alComando(1), vlCliIni)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140248
       End If
       
       If vlCliFim <> 0 Then
           lErro = Comando_BindVarInt(alComando(1), vlCliFim)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140249
       End If
    
       If viVendIni <> 0 Then
           lErro = Comando_BindVarInt(alComando(1), viVendIni)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140250
       End If
       
       If viVendFim <> 0 Then
           lErro = Comando_BindVarInt(alComando(1), viVendFim)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140251
       End If
    Else
        lErro = Comando_BindVarInt(alComando(1), vlNumIntRelFiltroFilCliCat)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140251
    End If
    
    lErro = Comando_ExecutarInt(alComando(1))
    If (lErro <> AD_SQL_SUCESSO) Then gError 140252
 
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140253
        
    'Para cada Produto
    Do While lErro = SUCESSO
    
        Set objFilialCliente = New ClassFilialCliente

        objFilialCliente.lCodCliente = vlCliente
        objFilialCliente.iCodFilial = viFilialCliente
        
        'Lê o produto
        lErro = CF("FilialCliente_Le_Estendida", objFilialCliente, objFilialClienteEstatistica)
        If lErro <> SUCESSO And lErro <> 52545 Then gError 140254
        
        colFilialCliente.Add objFilialCliente
        colFilialClienteEst.Add objFilialClienteEstatistica
     
        'Busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140255
 
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    FilialCliente_Le_Faixa = SUCESSO
 
    Exit Function
 
Erro_FilialCliente_Le_Faixa:
 
    FilialCliente_Le_Faixa = gErr
 
    Select Case gErr
 
        Case 140243
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 140244 To 140253, 140255
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case 140254
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150276)
 
    End Select
 
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Exit Function
 
End Function

Public Function FilialCliente_Le_Faixa2(ByVal objClienteFaixa As ClassClienteFaixa, ByVal lComando As Long, vlCliente As Variant, viFilialCliente As Variant) As Long
 
Dim lErro As Long
Dim iIndice As Integer
Dim sSQL As String
Dim sWhere As String
'Dim vlCliente As Variant
'Dim viFilialCliente As Variant
Dim alComando(1 To 1) As Long
'Dim objFilialClienteEstatistica As New ClassFilialClienteEst
'Dim objFilialCliente As ClassFilialCliente
Dim vlCliIni As Variant
Dim vlCliFim As Variant
Dim viVendIni As Variant
Dim viVendFim As Variant
Dim viAtivo As Variant
Dim vlNumIntRelFiltroFilCliCat As Long

On Error GoTo Erro_FilialCliente_Le_Faixa2
    
    vlCliIni = objClienteFaixa.lClienteDe
    vlCliFim = objClienteFaixa.lClienteAte
    viVendIni = objClienteFaixa.iVendedorDe
    viVendFim = objClienteFaixa.iVendedorAte
    'vlCliente = CLng(0)
    'viFilialCliente = CInt(0)
    viAtivo = CLIENTE_ATIVO
    vlNumIntRelFiltroFilCliCat = objClienteFaixa.lNumIntRelFiltroFilCliCat
 
    If vlNumIntRelFiltroFilCliCat = 0 Then
        
        sSQL = "SELECT CodCliente, CodFilial FROM FiliaisClientes WHERE 1 = 1 "
        
        If vlCliIni <> 0 Then
            sWhere = sWhere & "AND CodCliente >= ? "
        End If
        If vlCliFim <> 0 Then
            sWhere = sWhere & "AND CodCliente <= ? "
        End If
    
        If viVendIni <> 0 Then
            sWhere = sWhere & "AND Vendedor >= ? "
        End If
        If viVendFim <> 0 Then
            sWhere = sWhere & "AND Vendedor <= ? "
        End If
    
        sSQL = sSQL & sWhere
        
        sSQL = sSQL & "ORDER BY CodCliente, CodFilial "
    
    Else
        sSQL = "SELECT Cliente, Filial FROM RelFiltroFilCliCat WHERE NumIntRel = ? ORDER BY Cliente, Filial "
    End If
    
 
    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140244
 
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140245
 
    lErro = Comando_BindVarInt(lComando, viFilialCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140246
 
'    lErro = Comando_BindVarInt(lComando, viAtivo)
'    If (lErro <> AD_SQL_SUCESSO) Then gError 140247
 
    If vlNumIntRelFiltroFilCliCat = 0 Then
       If vlCliIni <> 0 Then
           lErro = Comando_BindVarInt(lComando, vlCliIni)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140248
       End If
       
       If vlCliFim <> 0 Then
           lErro = Comando_BindVarInt(lComando, vlCliFim)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140249
       End If
    
       If viVendIni <> 0 Then
           lErro = Comando_BindVarInt(lComando, viVendIni)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140250
       End If
       
       If viVendFim <> 0 Then
           lErro = Comando_BindVarInt(lComando, viVendFim)
           If (lErro <> AD_SQL_SUCESSO) Then gError 140251
       End If
    Else
        lErro = Comando_BindVarInt(lComando, vlNumIntRelFiltroFilCliCat)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140251
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140252
 
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140253
        
'    'Para cada Produto
'    Do While lErro = SUCESSO
'
'        Set objFilialCliente = New ClassFilialCliente
'
'        objFilialCliente.lCodCliente = vlCliente
'        objFilialCliente.iCodFilial = viFilialCliente
'
'        'Lê o produto
'        lErro = CF("FilialCliente_Le_Estendida", objFilialCliente, objFilialClienteEstatistica)
'        If lErro <> SUCESSO And lErro <> 52545 Then gError 140254
'
'        colFilialCliente.Add objFilialCliente
'        colFilialClienteEst.Add objFilialClienteEstatistica
'
'        'Busca o próximo registro
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140255
'
'    Loop
    

    FilialCliente_Le_Faixa2 = SUCESSO
 
    Exit Function
 
Erro_FilialCliente_Le_Faixa2:
 
    FilialCliente_Le_Faixa2 = gErr
 
    Select Case gErr
 
        Case 140243
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 140244 To 140253, 140255
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case 140254
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150276)
 
    End Select
 
    Exit Function
 
End Function

Public Function FilialCliente_Le_Compras_Periodo(ByVal objFilialCliente As ClassFilialCliente, ByVal vdtDataIni As Variant, vdtDataFim As Variant, ByVal colNFs As Collection, Optional ByVal vsProdDe As Variant = "", Optional ByVal vsProdAte As Variant = "", Optional ByVal bOtimizar As Boolean = False, Optional ByRef viCount As Variant) As Long
 
Dim lErro As Long
Dim iIndice As Integer
Dim sSQL As String
Dim sWhere As String
Dim alComando(1 To 1) As Long
Dim vlNumIntDoc As Variant
Dim vlCliente As Variant
Dim viFilial As Variant
Dim viFaturavel As Variant
Dim objNF As ClassNFiscal

On Error GoTo Erro_FilialCliente_Le_Compras_Periodo
    
    vlNumIntDoc = CLng(0)
    vlCliente = objFilialCliente.lCodCliente
    viFilial = objFilialCliente.iCodFilial
    viFaturavel = TIPODOCINFO_FATURAMENTO_SIM
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140256
    Next
    
    If bOtimizar Then
        sSQL = "SELECT COUNT(*) FROM NFiscal AS NF, TiposDocInfo AS T WHERE NF.TipoNFiscal = T.Codigo AND T.Faturamento = ? AND NF.Cliente = ? AND NF.FilialCli = ? "
    Else
        sSQL = "SELECT NF.NumIntDoc FROM NFiscal AS NF, TiposDocInfo AS T WHERE NF.TipoNFiscal = T.Codigo AND T.Faturamento = ? AND NF.Cliente = ? AND NF.FilialCli = ? "
    End If
    
    If vdtDataIni <> DATA_NULA Then
        sWhere = sWhere & "AND DataEmissao >= ? "
    End If
    If vdtDataFim <> DATA_NULA Then
        sWhere = sWhere & "AND DataEmissao <= ? "
    End If
    
    If vsProdDe <> "" Or vsProdAte <> "" Then
        sWhere = sWhere & " AND NF.NumIntDoc IN (SELECT NumIntNF FROM ItensNFiscal WHERE "
        If vsProdDe <> "" Then sWhere = sWhere & "Produto >= ? "
        If vsProdDe <> "" And vsProdAte <> "" Then sWhere = sWhere & " AND "
        If vsProdAte <> "" Then sWhere = sWhere & "Produto <= ? "
        sWhere = sWhere & ")"
    End If
    
    sSQL = sSQL & sWhere
    
    If Not bOtimizar Then sSQL = sSQL & "ORDER BY NumIntDoc "
 
    lErro = Comando_PrepararInt(alComando(1), sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140257
 
    If bOtimizar Then
        lErro = Comando_BindVarInt(alComando(1), viCount)
    Else
        lErro = Comando_BindVarInt(alComando(1), vlNumIntDoc)
    End If
    If (lErro <> AD_SQL_SUCESSO) Then gError 140258
 
    lErro = Comando_BindVarInt(alComando(1), viFaturavel)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140259
 
    lErro = Comando_BindVarInt(alComando(1), vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140260
 
    lErro = Comando_BindVarInt(alComando(1), viFilial)
    If (lErro <> AD_SQL_SUCESSO) Then gError 140261
    
    If vdtDataIni <> DATA_NULA Then
        lErro = Comando_BindVarInt(alComando(1), vdtDataIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140262
    End If
    
    If vdtDataFim <> DATA_NULA Then
        lErro = Comando_BindVarInt(alComando(1), vdtDataFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140263
    End If
 
     If vsProdDe <> "" Then
        lErro = Comando_BindVarInt(alComando(1), vsProdDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140262
    End If
    
    If vsProdAte <> "" Then
        lErro = Comando_BindVarInt(alComando(1), vsProdAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 140263
    End If
    lErro = Comando_ExecutarInt(alComando(1))
    If (lErro <> AD_SQL_SUCESSO) Then gError 140264
 
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140265
        
    If Not bOtimizar Then
    
        'Para cada Produto
        Do While lErro = AD_SQL_SUCESSO
        
            Set objNF = New ClassNFiscal
    
            objNF.lNumIntDoc = vlNumIntDoc
            
            colNFs.Add objNF
         
            'Busca o próximo registro
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140266
     
        Loop
        
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    FilialCliente_Le_Compras_Periodo = SUCESSO
 
    Exit Function
 
Erro_FilialCliente_Le_Compras_Periodo:
 
    FilialCliente_Le_Compras_Periodo = gErr
 
    Select Case gErr
 
        Case 140256
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 140257 To 140266
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150277)
 
    End Select
 
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Exit Function
 
End Function

Public Function FilialCliente_Le_Compras(ByVal objFilialCliente As ClassFilialCliente, ByVal colNFs As Collection, dtDataPrimeiraCompra As Date, dtDataUltimaCompra As Date, Optional ByVal sProdDe As String = "", Optional ByVal sProdAte As String = "", Optional ByVal bOtimizar As Boolean = False, Optional ByRef iCount As Integer) As Long
 
Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim dtDataEmissaoAux As Date
Dim objNF As ClassNFiscal
Dim sFiltro As String

On Error GoTo Erro_FilialCliente_Le_Compras
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140275
    Next
    
    dtDataPrimeiraCompra = DATA_NULA
    dtDataUltimaCompra = DATA_NULA
    
    If sProdDe <> "" Or sProdAte <> "" Then
        sFiltro = " AND NF.NumIntDoc IN (SELECT NumIntNF FROM ItensNFiscal WHERE "
        If sProdDe <> "" Then sFiltro = sFiltro & "Produto >= '" & sProdDe & "'"
        If sProdDe <> "" And sProdAte <> "" Then sFiltro = sFiltro & " AND "
        If sProdAte <> "" Then sFiltro = sFiltro & "Produto <= '" & sProdAte & "'"
        sFiltro = sFiltro & ")"
    End If
    
    If bOtimizar Then
    
        lErro = Comando_Executar(alComando(1), "SELECT COUNT(*), MIN(NF.DataEmissao), MAX(NF.DataEmissao) FROM NFiscal AS NF, TiposDocInfo AS T WHERE NF.TipoNFiscal = T.Codigo AND T.Faturamento = ? AND NF.Cliente = ? AND NF.FilialCli = ? " & sFiltro, iCount, dtDataPrimeiraCompra, dtDataUltimaCompra, TIPODOCINFO_FATURAMENTO_SIM, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 140276
     
        'Busca o primeiro registro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140277
    
    Else
    
        lErro = Comando_Executar(alComando(1), "SELECT NF.NumIntDoc, NF.DataEmissao FROM NFiscal AS NF, TiposDocInfo AS T WHERE NF.TipoNFiscal = T.Codigo AND T.Faturamento = ? AND NF.Cliente = ? AND NF.FilialCli = ? " & sFiltro & " ORDER BY DataEmissao", lNumIntDoc, dtDataEmissao, TIPODOCINFO_FATURAMENTO_SIM, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 140276
     
        'Busca o primeiro registro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140277
            
        iIndice = 0
            
        'Para cada Produto
        Do While lErro = AD_SQL_SUCESSO
        
            iIndice = iIndice + 1
            
            If iIndice = 1 Then dtDataPrimeiraCompra = dtDataEmissao
        
            Set objNF = New ClassNFiscal
    
            objNF.lNumIntDoc = lNumIntDoc
            
            colNFs.Add objNF
            
            dtDataEmissaoAux = dtDataEmissao
         
            'Busca o próximo registro
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140278
     
            If lErro = AD_SQL_SEM_DADOS Then dtDataUltimaCompra = dtDataEmissaoAux
     
        Loop
        
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    FilialCliente_Le_Compras = SUCESSO
 
    Exit Function
 
Erro_FilialCliente_Le_Compras:
 
    FilialCliente_Le_Compras = gErr
 
    Select Case gErr
 
        Case 140275
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 140276 To 140278
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150278)
 
    End Select
 
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Exit Function
 
End Function
'######################################################

'######################################################
'Inserido por Wagner 28/09/05
'Código copiado da versão ASP
Sub TabelaPrecoItem_Valor_GotFocus(ByVal objValor As Object)
'Esta funcao foi criada pois existe funcao customizada em clientes

End Sub
'######################################################

'####################################################################
Public Function CamposGenericos_ValidaExclusao_TipoParadaMaquina() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim iTipo As Integer
Dim lCodigo As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_CamposGenericos_ValidaExclusao_TipoParadaMaquina
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 140968
    
    'Busca Tipos de Paradas em CTMaquinasParadas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Tipo, Codigo, FilialEmpresa FROM CTMaquinasParadas WHERE Tipo NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Tipo <> 0", iTipo, lCodigo, iFilialEmpresa, CAMPOSGENERICOS_TIPOPARADA)
    If lErro <> AD_SQL_SUCESSO Then gError 140969
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140970
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 140971

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_TipoParadaMaquina = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_TipoParadaMaquina:

    CamposGenericos_ValidaExclusao_TipoParadaMaquina = gErr
    
    Select Case gErr
    
        Case 140968
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 140969, 140970
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CTMAQUINASPARADAS", gErr)
        
        Case 140971
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOGENERICO_TIPOPARADA", gErr, iTipo, lCodigo, iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150279)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function
'######################################################################

'####################################################################################
'Inserido por Wagner 07/12/2005
'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function CustoEmbMPAux_Le(ByVal objCustoEmbMPAux As ClassCustoEmbMPAux) As Long

Dim lErro As Long
Dim lComando As Long
Dim tCustoEmbMPAux As typeCustoEmbMPAux

On Error GoTo Erro_CustoEmbMPAux_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 141301

    'Alocação de espaço no buffer
    tCustoEmbMPAux.sProduto = String(STRING_PRODUTO, 0)
    tCustoEmbMPAux.sMnemonico = String(STRING_MNEMONICOFPRECO_MNEMONICO, 0)
    tCustoEmbMPAux.sValor = String(STRING_MNEMONICOFPRECO_MNEMONICO, 0)

    'Le a tabelaCustoEmbMPAux
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Produto, Mnemonico, Valor FROM CustoEmbMPAux WHERE FilialEmpresa= ?  AND Produto= ?  AND Mnemonico= ? ", _
                tCustoEmbMPAux.iFilialEmpresa, tCustoEmbMPAux.sProduto, tCustoEmbMPAux.sMnemonico, tCustoEmbMPAux.sValor, _
                objCustoEmbMPAux.iFilialEmpresa, objCustoEmbMPAux.sProduto, objCustoEmbMPAux.sMnemonico)
    If lErro <> AD_SQL_SUCESSO Then gError 141302

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141303

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError 141304

    objCustoEmbMPAux.iFilialEmpresa = tCustoEmbMPAux.iFilialEmpresa
    objCustoEmbMPAux.sProduto = tCustoEmbMPAux.sProduto
    objCustoEmbMPAux.sMnemonico = tCustoEmbMPAux.sMnemonico
    objCustoEmbMPAux.sValor = tCustoEmbMPAux.sValor

    'Fecha Comando
    Call Comando_Fechar(lComando)

    CustoEmbMPAux_Le = SUCESSO

    Exit Function

Erro_CustoEmbMPAux_Le:

    CustoEmbMPAux_Le = gErr

    Select Case gErr

        Case 141301
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 141302, 141303
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMPAUX", gErr)

        Case 141304 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150280)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function
'####################################################################################

'####################################################################
'Inserido por Wagner 09/12/05
Public Function CamposGenericos_ValidaExclusao_StatusOV() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lStatus As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_StatusOV
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 141377
    
    'Busca Tipos de Paradas em CTMaquinasParadas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Status FROM OrcamentoVenda WHERE Status NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Status <> 0", lStatus, CAMPOSGENERICOS_STATUSOV)
    If lErro <> AD_SQL_SUCESSO Then gError 141378
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141379
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 141380

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_StatusOV = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_StatusOV:

    CamposGenericos_ValidaExclusao_StatusOV = gErr
    
    Select Case gErr
    
        Case 141377
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 141378, 141379
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)
        
        Case 141380
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, lStatus, CAMPOSGENERICOS_STATUSOV)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150281)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function CamposGenericos_ValidaExclusao_MotivosOV() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lMotivo As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_MotivosOV
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 141381
    
    'Busca Tipos de Paradas em CTMaquinasParadas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT MotivoPerda FROM OrcamentoVenda WHERE MotivoPerda NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND MotivoPerda <> 0", lMotivo, CAMPOSGENERICOS_MOTIVOSOV)
    If lErro <> AD_SQL_SUCESSO Then gError 141382
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141383
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 141384

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_MotivosOV = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_MotivosOV:

    CamposGenericos_ValidaExclusao_MotivosOV = gErr
    
    Select Case gErr
    
        Case 141381
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 141382, 141383
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)
        
        Case 141384
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, lMotivo, CAMPOSGENERICOS_MOTIVOSOV)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150282)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function
'######################################################################

Function ParcelasPV_Le_Rel(ByVal iFilialEmpresa As Integer, ByVal lCodigo As Long, ByVal colParc As ColParcelaPedidoVenda, lComando As Long) As Long
'Lê as parcelas associadas ao Pedido de Venda

Dim lErro As Long
Dim tParcelaPV As typeParcelaPedidoVenda
Dim objParcPV As ClassParcelaPedidoVenda

On Error GoTo Erro_ParcelasPV_Le_Rel

    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 130468
    End If
    
    tParcelaPV.sAgenciaCheque = String(STRING_AGENCIA, 0)
    tParcelaPV.sContaCorrenteCheque = String(STRING_CONTA_CORRENTE, 0)
    tParcelaPV.sNumeroCartao = String(STRING_NUMERO_CARTAO, 0)
    tParcelaPV.sAprovacaoCartao = String(STRING_APROVACAO_CARTAO, 0)
    
    'Seleciona Parcelas vinculadas ao Pedido de Venda
    lErro = Comando_Executar(lComando, "SELECT NumParcela, DataVencimento, Valor, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao FROM ParcelasPedVendaTodas WHERE PedidodeVenda = ? AND FilialEmpresa = ? ORDER BY NumParcela", _
    tParcelaPV.iNumParcela, tParcelaPV.dtDataVencimento, tParcelaPV.dValor, tParcelaPV.iDesconto1Codigo, tParcelaPV.dtDesconto1Ate, tParcelaPV.dDesconto1Valor, tParcelaPV.iDesconto2Codigo, tParcelaPV.dtDesconto2Ate, tParcelaPV.dDesconto2Valor, tParcelaPV.iDesconto3Codigo, tParcelaPV.dtDesconto3Ate, tParcelaPV.dDesconto3Valor, _
    tParcelaPV.iTipoPagto, tParcelaPV.iCodConta, tParcelaPV.dtDataCredito, tParcelaPV.dtDataEmissaoCheque, tParcelaPV.iBancoCheque, tParcelaPV.sAgenciaCheque, tParcelaPV.sContaCorrenteCheque, tParcelaPV.lNumeroCheque, tParcelaPV.dtDataDepositoCheque, tParcelaPV.iAdmMeioPagto, tParcelaPV.iParcelamento, tParcelaPV.sNumeroCartao, tParcelaPV.dtValidadeCartao, tParcelaPV.sAprovacaoCartao, tParcelaPV.dtDataTransacaoCartao, lCodigo, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 130469

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130470

    Do While lErro <> AD_SQL_SEM_DADOS

        With tParcelaPV
            Set objParcPV = colParc.Add(.dValor, .dtDataVencimento, .iNumParcela, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .dtDesconto3Ate, .dDesconto3Valor, .iDesconto3Codigo)
            
            objParcPV.iTipoPagto = .iTipoPagto
            objParcPV.iCodConta = .iCodConta
            objParcPV.dtDataCredito = .dtDataCredito
            objParcPV.dtDataEmissaoCheque = .dtDataEmissaoCheque
            objParcPV.iBancoCheque = .iBancoCheque
            objParcPV.sAgenciaCheque = .sAgenciaCheque
            objParcPV.sContaCorrenteCheque = .sContaCorrenteCheque
            objParcPV.lNumeroCheque = .lNumeroCheque
            objParcPV.dtDataDepositoCheque = .dtDataDepositoCheque
            objParcPV.iAdmMeioPagto = .iAdmMeioPagto
            objParcPV.iParcelamento = .iParcelamento
            objParcPV.sNumeroCartao = .sNumeroCartao
            objParcPV.dtValidadeCartao = .dtValidadeCartao
            objParcPV.sAprovacaoCartao = .sAprovacaoCartao
            objParcPV.dtDataTransacaoCartao = .dtDataTransacaoCartao
            
        End With

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130471

    Loop

    ParcelasPV_Le_Rel = SUCESSO

    Exit Function

Erro_ParcelasPV_Le_Rel:

    ParcelasPV_Le_Rel = gErr

    Select Case gErr

        Case 130468
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 130469, 130470, 130471
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPEDIDODEVENDA", gErr, lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 130472)

    End Select

    Exit Function

End Function

'##############################################################################
'Inserido por Wagner 22/03/2006
Function NFiscalItens_Le_Customizado(ByVal objNFiscal As ClassNFiscal) As Long
    NFiscalItens_Le_Customizado = SUCESSO
End Function

Function PVItens_Le_Customizado(ByVal objPV As ClassPedidoDeVenda) As Long
    PVItens_Le_Customizado = SUCESSO
End Function

Function OVItens_Le_Customizado(ByVal objOV As ClassOrcamentoVenda) As Long
    OVItens_Le_Customizado = SUCESSO
End Function

Function ItemNF_Get_ValorTotal(ByVal objItemNF As ClassItemNF, dValorTotal As Double) As Long

Dim lErro As Long

On Error GoTo Erro_ItemNF_Get_ValorTotal
            
    dValorTotal = Arredonda_Moeda(objItemNF.dQuantidade * objItemNF.dPrecoUnitario - objItemNF.dValorDesconto)
    
    ItemNF_Get_ValorTotal = SUCESSO
    
    Exit Function

Erro_ItemNF_Get_ValorTotal:

    ItemNF_Get_ValorTotal = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 177403)

    End Select

    Exit Function
    
End Function

'##############################################################################

'####################################################
'Inserido por Wagner 19/05/2006
Function FilialEmpresa_Le_Filtro(sFiltro As String) As Long
    
    sFiltro = ""
    
    FilialEmpresa_Le_Filtro = SUCESSO
        
End Function
'####################################################

'####################################################
'Inserido por Wagner 22/05/2006
Function Empresa_Le_Nome_Customizado(sNomeEmpresa As String) As Long
    Empresa_Le_Nome_Customizado = SUCESSO
End Function

Function FilialEmpresa_Le_Filtro_Filial(sFiltro As String) As Long
   
    sFiltro = ""
    
    FilialEmpresa_Le_Filtro_Filial = SUCESSO
        
End Function
'####################################################

'#################################################################
'Inserido por Wagner 17/05/2006
'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function KitVenda_Le(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim lComando As Long
Dim tKitVenda As typeKitVenda

On Error GoTo Erro_KitVenda_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 177423

    'Alocação de espaço no buffer
    tKitVenda.sProduto = String(STRING_PRODUTO, 0)
    tKitVenda.sUM = String(STRING_UM_SIGLA, 0)
    tKitVenda.sObservacao = String(STRING_OBSERVACAO_OBSERVACAO, 0)

    'Le a tabelaKitVenda
    lErro = Comando_Executar(lComando, "SELECT Produto, UM, Quantidade, Data, Observacao FROM KitVenda WHERE Produto= ? ", _
                tKitVenda.sProduto, tKitVenda.sUM, tKitVenda.dQuantidade, tKitVenda.dtData, _
                tKitVenda.sObservacao, _
                objKitVenda.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 177424

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177425

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError 177426

    objKitVenda.sProduto = tKitVenda.sProduto
    objKitVenda.sUM = tKitVenda.sUM
    objKitVenda.dQuantidade = tKitVenda.dQuantidade
    objKitVenda.dtData = tKitVenda.dtData
    objKitVenda.sObservacao = tKitVenda.sObservacao
    
    lErro = ProdutoKitVenda_Le(objKitVenda)
    If lErro <> SUCESSO Then gError 177487

    'Fecha Comando
    Call Comando_Fechar(lComando)

    KitVenda_Le = SUCESSO

    Exit Function

Erro_KitVenda_Le:

    KitVenda_Le = gErr

    Select Case gErr

        Case 177423
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177424, 177425
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KITVENDA", gErr)

        Case 177426 'Sem dados -> Tratado na rotina chamadora
        
        Case 177487

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177488)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ProdutoKitVenda_Le(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim lComando As Long
Dim tProdutoKitVenda As typeProdutoKitVenda
Dim objProdutoKitVenda As ClassProdutoKitVenda

On Error GoTo Erro_ProdutoKitVenda_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 177490

    'Alocação de espaço no buffer
    tProdutoKitVenda.sProdutoKit = String(STRING_PRODUTO, 0)
    tProdutoKitVenda.sProduto = String(STRING_PRODUTO, 0)
    tProdutoKitVenda.sUM = String(STRING_UM_SIGLA, 0)

    'Le a tabelaProdutoKitVenda
    lErro = Comando_Executar(lComando, "SELECT ProdutoKit, Produto, Seq, Quantidade, UM FROM ProdutoKitVenda WHERE ProdutoKit= ? ORDER BY Seq", _
                tProdutoKitVenda.sProdutoKit, tProdutoKitVenda.sProduto, tProdutoKitVenda.iSeq, tProdutoKitVenda.dQuantidade, _
                tProdutoKitVenda.sUM, _
                objKitVenda.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 177491

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177492

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objProdutoKitVenda = New ClassProdutoKitVenda

        objProdutoKitVenda.sProdutoKit = tProdutoKitVenda.sProdutoKit
        objProdutoKitVenda.sProduto = tProdutoKitVenda.sProduto
        objProdutoKitVenda.iSeq = tProdutoKitVenda.iSeq
        objProdutoKitVenda.dQuantidade = tProdutoKitVenda.dQuantidade
        objProdutoKitVenda.sUM = tProdutoKitVenda.sUM
        
        objKitVenda.colComponentes.Add objProdutoKitVenda
        
        'Busca Primeiro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177493
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ProdutoKitVenda_Le = SUCESSO

    Exit Function

Erro_ProdutoKitVenda_Le:

    ProdutoKitVenda_Le = gErr

    Select Case gErr

        Case 177490
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177491 To 177493
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKITVENDA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177494)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function ProdutoKitVenda_Le_Romaneio(ByVal objProduto As ClassProduto, ByVal colRomaneio As Collection) As Long

Dim lErro As Long
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objKitVenda As New ClassKitVenda
Dim objProdutoKitVenda As ClassProdutoKitVenda
Dim objProdutoComp As ClassProduto

On Error GoTo Erro_ProdutoKitVenda_Le_Romaneio

    objKitVenda.sProduto = objProduto.sCodigo
    
    lErro = KitVenda_Le(objKitVenda)
    If lErro <> SUCESSO And lErro <> 177426 Then gError 177588
    
    For Each objProdutoKitVenda In objKitVenda.colComponentes
    
        Set objItemRomaneio = New ClassItemRomaneioGrade
        Set objProdutoComp = New ClassProduto
        
        objProdutoComp.sCodigo = objProdutoKitVenda.sProduto
        
        lErro = CF("Produto_Le", objProdutoComp)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 177591
            
        objItemRomaneio.sProduto = objProdutoComp.sCodigo
        objItemRomaneio.sDescricao = objProdutoComp.sDescricao
        objItemRomaneio.sUMEstoque = objProdutoComp.sSiglaUMEstoque
        
        colRomaneio.Add objItemRomaneio
    
    Next

    ProdutoKitVenda_Le_Romaneio = SUCESSO

    Exit Function

Erro_ProdutoKitVenda_Le_Romaneio:

    ProdutoKitVenda_Le_Romaneio = gErr

    Select Case gErr
    
        Case 177588, 177591

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177589)

    End Select

    Exit Function
    
End Function

Public Function ProdutoKitVenda_Atualiza_Romaneio(ByVal objProduto As ClassProduto, ByVal objKitVenda As ClassKitVenda, ByVal colRomaneio As Collection) As Long

Dim lErro As Long
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objKitVendaBD As New ClassKitVenda
Dim objProdutoKitVenda As ClassProdutoKitVenda
Dim objProdutoComp As ClassProduto
Dim dFator As Double
Dim dFatorConversao As Double

On Error GoTo Erro_ProdutoKitVenda_Atualiza_Romaneio

    'Se a Unidade de Medida e a Quantidade estão preenchidas
    If objKitVenda.sUM <> "" Then

        'Le o Kit de Venda do BD
        objKitVendaBD.sProduto = objProduto.sCodigo
        
        lErro = KitVenda_Le(objKitVendaBD)
        If lErro <> SUCESSO Then gError 177592
        
        'Acha o fator de conversão da quantidade do BD para informada
        lErro = CF("UM_Conversao", objProduto.iClasseUM, objKitVendaBD.sUM, objKitVenda.sUM, dFator)
        If lErro <> SUCESSO Then gError 177593
        
        dFatorConversao = objKitVenda.dQuantidade / (objKitVendaBD.dQuantidade * dFator)
        
        'Para cada produto do kit de venda
        For Each objProdutoKitVenda In objKitVendaBD.colComponentes
        
            'Para cada romaneio passado
            For Each objItemRomaneio In colRomaneio
            
                'Se for o mesmo produto
                If objProdutoKitVenda.sProduto = objItemRomaneio.sProduto Then
                
                    'Le o Produto
                    Set objProdutoComp = New ClassProduto
                    
                    objProdutoComp.sCodigo = objProdutoKitVenda.sProduto
                    
                    lErro = CF("Produto_Le", objProdutoComp)
                    If lErro <> SUCESSO And lErro <> 28030 Then gError 177594
                
                    'Calcula a quantidade do romaneio com base no fator de conversão do kit de venda
                    lErro = CF("UM_Conversao", objProdutoComp.iClasseUM, objProdutoKitVenda.sUM, objItemRomaneio.sUMEstoque, dFator)
                    If lErro <> SUCESSO Then gError 177595
                    
                    objItemRomaneio.dQuantidade = objProdutoKitVenda.dQuantidade * dFatorConversao * dFator
                    
                    Exit For
                
                End If
            
            Next
        
        Next
        
    End If
    
    ProdutoKitVenda_Atualiza_Romaneio = SUCESSO

    Exit Function

Erro_ProdutoKitVenda_Atualiza_Romaneio:

    ProdutoKitVenda_Atualiza_Romaneio = gErr

    Select Case gErr
    
        Case 177592 To 177595

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177596)

    End Select

    Exit Function
    
End Function
'#################################################################

Public Function ClienteContatos_Le_Nome(ByVal objClienteContatos As ClassClienteContatos) As Long
'Lê um contato a partir de cliente/filial + nome do contato
'objContatoClientes recebe o código do cliente e da filial
'objContatoClientes retorna os dados lidos

Dim lErro As Long
Dim lComando As Long
Dim tClienteContatos As typeClienteContatos

On Error GoTo Erro_ClienteContatos_Le_Nome

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 178437
    
    'Inicializa as string que serão lidas
    tClienteContatos.sContato = String(STRING_CONTATOGERAL_CONTATO, 0)
    tClienteContatos.sSetor = String(STRING_CONTATOGERAL_SETOR, 0)
    tClienteContatos.sCargo = String(STRING_CONTATOGERAL_CARGO, 0)
    tClienteContatos.stelefone = String(STRING_TELEFONE, 0)
    tClienteContatos.sFax = String(STRING_FAX, 0)
    tClienteContatos.sEmail = String(STRING_EMAIL, 0)
    tClienteContatos.sOutrosMeioComunic = String(STRING_CONTATOGERAL_OUTMEIOCOMUNIC, 0)
    
    'Lê o contato no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo, Contato, Setor, Cargo, Telefone, Fax, Email, Padrao, DataNasc, OutrosMeioComunic FROM ClienteContatos WHERE Cliente=? AND FilialCliente=? AND Contato=?", tClienteContatos.iCodigo, tClienteContatos.sContato, tClienteContatos.sSetor, tClienteContatos.sCargo, tClienteContatos.stelefone, tClienteContatos.sFax, tClienteContatos.sEmail, tClienteContatos.iPadrao, tClienteContatos.dtDataNasc, tClienteContatos.sOutrosMeioComunic, objClienteContatos.lCliente, objClienteContatos.iFilialCliente, objClienteContatos.sContato)
    If lErro <> AD_SQL_SUCESSO Then gError 178438
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 178439
    
    'Se não encontrou o contato => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 178440
    
    'Move os dados lidos para o obj
    With objClienteContatos
        .iCodigo = tClienteContatos.iCodigo
        .sContato = tClienteContatos.sContato
        .sSetor = tClienteContatos.sSetor
        .sCargo = tClienteContatos.sCargo
        .stelefone = tClienteContatos.stelefone
        .sFax = tClienteContatos.sFax
        .sEmail = tClienteContatos.sEmail
        .iPadrao = tClienteContatos.iPadrao
        .dtDataNasc = tClienteContatos.dtDataNasc
        .sOutrosMeioComunic = tClienteContatos.sOutrosMeioComunic
    End With
        
    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    ClienteContatos_Le_Nome = SUCESSO

    Exit Function

Erro_ClienteContatos_Le_Nome:

    ClienteContatos_Le_Nome = gErr

    Select Case gErr

        Case 178437
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 178438, 178439
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 178440
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 178441)

    End Select

    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

End Function

Function Cod_Nomes_Le_FilEmp(ByVal colCodigoNome As AdmColCodigoNome) As Long

Dim lErro As Long
Dim objFiliais As AdmFiliais

On Error GoTo Erro_Cod_Nomes_Le_FilEmp

    For Each objFiliais In gcolFiliais
        
        If objFiliais.iInativa = 0 And objFiliais.iCodFilial <> EMPRESA_TODA Then
        
            Call colCodigoNome.Add(objFiliais.iCodFilial, objFiliais.sNome)
        
        End If
        
    Next
    
    Cod_Nomes_Le_FilEmp = SUCESSO
     
    Exit Function
    
Erro_Cod_Nomes_Le_FilEmp:

    Cod_Nomes_Le_FilEmp = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 130531)
     
    End Select
     
    Exit Function

End Function

Function ItensPedido_Le_NumIntDoc1(ByVal objItemPV As ClassItemPedido) As Long
'Lê no BD o item de pedido de venda que pode estar baixado

Dim lErro As Long
Dim tItemPedido As typeItemPedido
Dim lComando As Long

On Error GoTo Erro_ItensPedido_Le_NumIntDoc1

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 178562

    tItemPedido.sDescricao = String(STRING_ITEM_PEDIDO_DESCRICAO, 0)
    tItemPedido.sLote = String(STRING_ITEM_PEDIDO_LOTE, 0)
    tItemPedido.sProduto = String(STRING_PRODUTO, 0)
    tItemPedido.sProdutoDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    tItemPedido.sProdutoNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
    tItemPedido.sUMEstoque = String(STRING_UM_SIGLA_UM_BASE, 0)
    tItemPedido.sUnidadeMed = String(STRING_UM_SIGLA_UM_BASE, 0)

    lErro = Comando_Executar(lComando, "SELECT CodPedido, Produto, Quantidade, PrecoUnitario, PrecoTotal, ClasseUM, UnidadeMed, ValorDesconto, DataEntrega, Descricao, Lote, Status, ValorAbatComissao, QuantCancelada, QuantReservada, QuantFaturada, QuantOP, QuantSC FROM ItensPedidoDeVenda WHERE FilialEmpresa = ? AND NumIntDoc = ?", tItemPedido.lCodPedido, tItemPedido.sProduto, tItemPedido.dQuantidade, tItemPedido.dPrecoUnitario, tItemPedido.dPrecoTotal, tItemPedido.iClasseUM, tItemPedido.sUnidadeMed, tItemPedido.dValorDesconto, tItemPedido.dtDataEntrega, _
    tItemPedido.sDescricao, tItemPedido.sLote, tItemPedido.iStatus, tItemPedido.dValorAbatComissao, tItemPedido.dQuantCancelada, tItemPedido.dQuantReservada, tItemPedido.dQuantFaturada, tItemPedido.dQuantOP, tItemPedido.dQuantSC, objItemPV.iFilialEmpresa, objItemPV.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 178563

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 178564

    If lErro = AD_SQL_SEM_DADOS Then
    
        lErro = Comando_Executar(lComando, "SELECT CodPedido, Produto, Quantidade, PrecoUnitario, PrecoTotal, ClasseUM, UnidadeMed, ValorDesconto, DataEntrega, Descricao, Lote, Status, ValorAbatComissao, QuantCancelada, QuantReservada, QuantFaturada, QuantOP, QuantSC FROM ItensPedidoDeVendaBaixados WHERE FilialEmpresa = ? AND NumIntDoc = ?", tItemPedido.lCodPedido, tItemPedido.sProduto, tItemPedido.dQuantidade, tItemPedido.dPrecoUnitario, tItemPedido.dPrecoTotal, tItemPedido.iClasseUM, tItemPedido.sUnidadeMed, tItemPedido.dValorDesconto, tItemPedido.dtDataEntrega, _
        tItemPedido.sDescricao, tItemPedido.sLote, tItemPedido.iStatus, tItemPedido.dValorAbatComissao, tItemPedido.dQuantCancelada, tItemPedido.dQuantReservada, tItemPedido.dQuantFaturada, tItemPedido.dQuantOP, tItemPedido.dQuantSC, objItemPV.iFilialEmpresa, objItemPV.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 178565
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 178566

        If lErro = AD_SQL_SEM_DADOS Then gError 178567
    
    End If
    
    With tItemPedido
        objItemPV.lCodPedido = .lCodPedido
        objItemPV.sProduto = .sProduto
        objItemPV.dQuantidade = .dQuantidade
        objItemPV.dPrecoUnitario = .dPrecoUnitario
        objItemPV.dPrecoTotal = .dPrecoTotal
        objItemPV.iClasseUM = .iClasseUM
        objItemPV.sUnidadeMed = .sUnidadeMed
        objItemPV.dValorDesconto = .dValorDesconto
        objItemPV.dtDataEntrega = .dtDataEntrega
        objItemPV.sDescricao = .sDescricao
        objItemPV.sLote = .sLote
        objItemPV.iStatus = .iStatus
        objItemPV.dValorAbatComissao = .dValorAbatComissao
        objItemPV.dQuantCancelada = .dQuantCancelada
        objItemPV.dQuantReservada = .dQuantReservada
        objItemPV.dQuantFaturada = .dQuantFaturada
        objItemPV.dQuantOP = .dQuantOP
        objItemPV.dQuantSC = .dQuantSC
    End With

    Call Comando_Fechar(lComando)

    ItensPedido_Le_NumIntDoc1 = SUCESSO

    Exit Function

Erro_ItensPedido_Le_NumIntDoc1:

    ItensPedido_Le_NumIntDoc1 = gErr

    Select Case gErr

        Case 178562
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 178563, 178564
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA", gErr)

        Case 178565, 178566
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDABAIXADOS1", gErr)
        
        Case 178567
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 178568)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function Menu_Obtem_Sigla_FilialEmpresa(ByVal iFilialEmpresa As Integer, sSigla As String) As Long

    sSigla = CStr(iFilialEmpresa)

    Menu_Obtem_Sigla_FilialEmpresa = SUCESSO
    
End Function

Public Function Verifica_TipoPagto_Preenchido(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

    Verifica_TipoPagto_Preenchido = SUCESSO
    
End Function

'####################################################################
'Inserido por Wagner 15/09/06
Public Function CamposGenericos_ValidaExclusao_StatusRelacCli() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lStatus As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_StatusRelacCli
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 182363
    
    'Busca Tipos de Paradas em CTMaquinasParadas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT StatusCG FROM RelacionamentoClientes WHERE StatusCG NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND StatusCG <> 0", lStatus, CAMPOSGENERICOS_STATUSRELACCLI)
    If lErro <> AD_SQL_SUCESSO Then gError 182364
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182365
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 182366

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_StatusRelacCli = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_StatusRelacCli:

    CamposGenericos_ValidaExclusao_StatusRelacCli = gErr
    
    Select Case gErr
    
        Case 182363
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 182364, 182365
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELACIONAMENTOCLIENTES", gErr)
        
        Case 182366
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, lStatus, CAMPOSGENERICOS_STATUSRELACCLI)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 182367)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function
'####################################################################

Function ItensPVEntrega_Le(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

Dim lComando As Long
Dim tItemPVEntrega As typeItemPVEntrega
Dim objDataEntrega As ClassDataEntrega
Dim objItemPV As ClassItemPedido
Dim lErro As Long, bLerNFs As Boolean

On Error GoTo Erro_ItensPVEntrega_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 183199
    
    bLerNFs = False
    
    For Each objItemPV In objPedidoVenda.colItensPedido
    
        tItemPVEntrega.sPedidoCliente = String(STRING_PEDIDOVENDA_PEDIDO_CLIENTE, 0)
    
        With tItemPVEntrega
            
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumIntPV, NumIntItemPV, DataEntrega, Quantidade, PedidoCliente FROM ItensPVEntrega WHERE NumIntItemPV = ?", _
            .lNumIntDoc, .lNumIntPV, .lNumIntItemPV, .dtDataEntrega, .dQuantidade, .sPedidoCliente, objItemPV.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 183200
    
        End With
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 183201
    
        Do While lErro <> AD_SQL_SEM_DADOS
            
            Set objDataEntrega = New ClassDataEntrega
    
            With objDataEntrega
                            
                .lNumIntDoc = tItemPVEntrega.lNumIntDoc
                .lNumIntPVNF = tItemPVEntrega.lNumIntPV
                .lNumIntItemPVNF = tItemPVEntrega.lNumIntItemPV
                .dtDataEntrega = tItemPVEntrega.dtDataEntrega
                .dQuantidade = tItemPVEntrega.dQuantidade
                .sPedidoCliente = Trim(tItemPVEntrega.sPedidoCliente)
            
            End With
            
            objItemPV.colItemPVEntrega.Add objDataEntrega
        
            bLerNFs = True
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 183240
        
        Loop
    
    Next
    
    Call Comando_Fechar(lComando)
    
    If bLerNFs Then
    
        lErro = CF("NFiscal_Le_DatasEntrega", objPedidoVenda)
        If lErro <> SUCESSO Then gError 195083
        
    End If
            
    ItensPVEntrega_Le = SUCESSO

    Exit Function

Erro_ItensPVEntrega_Le:

    ItensPVEntrega_Le = gErr

    Select Case gErr

        Case 183199
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 183200, 183201, 183240
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPVENTREGA", gErr)
        
        Case 195083
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 183202)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensNFEntrega_Le(ByVal objNFiscal As ClassNFiscal) As Long

Dim lComando As Long
Dim tItemNFEntrega As typeItemNFEntrega
Dim objDataEntrega As ClassDataEntrega
Dim objItemNF As ClassItemNF
Dim lErro As Long

On Error GoTo Erro_ItensNFEntrega_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 183230
    
    For Each objItemNF In objNFiscal.colItensNF
    
        tItemNFEntrega.sPedidoCliente = String(STRING_PEDIDOVENDA_PEDIDO_CLIENTE, 0)
    
        With tItemNFEntrega
            
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumIntNF, NumIntItemNF, DataEntrega, Quantidade, PedidoCliente FROM ItensNFEntrega WHERE NumIntItemNF = ?", _
            .lNumIntDoc, .lNumIntNF, .lNumIntItemNF, .dtDataEntrega, .dQuantidade, .sPedidoCliente, objItemNF.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 183231
    
        End With
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 183232
    
        Do While lErro <> AD_SQL_SEM_DADOS
            
            Set objDataEntrega = New ClassDataEntrega
    
            With objDataEntrega
                            
                .lNumIntDoc = tItemNFEntrega.lNumIntDoc
                .lNumIntPVNF = tItemNFEntrega.lNumIntNF
                .lNumIntItemPVNF = tItemNFEntrega.lNumIntItemNF
                .dtDataEntrega = tItemNFEntrega.dtDataEntrega
                .dQuantidade = tItemNFEntrega.dQuantidade
                .sPedidoCliente = Trim(tItemNFEntrega.sPedidoCliente)
            
            End With
            
            objItemNF.colDataEntrega.Add objDataEntrega
        
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 183241
        
        Loop
    
    Next
    
    Call Comando_Fechar(lComando)
    
    ItensNFEntrega_Le = SUCESSO

    Exit Function

Erro_ItensNFEntrega_Le:

    ItensNFEntrega_Le = gErr

    Select Case gErr

        Case 183230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 183231, 183232, 183241
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 183233)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFiscal_Le_DatasEntrega(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

Dim lComando As Long
Dim tItemNFEntrega As typeItemNFEntrega
Dim objDataEntrega As ClassDataEntrega
Dim lErro As Long
Dim objItemPV As ClassItemPedido

On Error GoTo Erro_NFiscal_Le_DatasEntrega

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 183538
    
    For Each objItemPV In objPedidoVenda.colItensPedido
    
        lErro = Comando_Executar(lComando, "SELECT ItensNFEntrega.DataEntrega, SUM(ItensNFEntrega.Quantidade) FROM NFiscal, ItensNFiscal, ItensNFEntrega WHERE NFiscal.FilialPedido = ? AND NFiscal.NumPedidoVenda = ? AND ItensNFiscal.Produto =? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND ItensNFiscal.NumIntDoc = ItensNFEntrega.NumIntItemNF AND NFiscal.Status <> 7 AND ItensNFiscal.Status <> 7 Group By ItensNFEntrega.DataEntrega ", tItemNFEntrega.dtDataEntrega, tItemNFEntrega.dQuantidade, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, objItemPV.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 183539
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 183540
    
        Do While lErro <> AD_SQL_SEM_DADOS
            
            For Each objDataEntrega In objItemPV.colItemPVEntrega
            
                If objDataEntrega.dtDataEntrega = tItemNFEntrega.dtDataEntrega Then
                    objDataEntrega.dQuantidadeEntregue = tItemNFEntrega.dQuantidade
                    Exit For
                End If
                
            Next
        
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 183541
        
        Loop
    
    Next
    
    Call Comando_Fechar(lComando)
    
    NFiscal_Le_DatasEntrega = SUCESSO

    Exit Function

Erro_NFiscal_Le_DatasEntrega:

    NFiscal_Le_DatasEntrega = gErr

    Select Case gErr

        Case 183538
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 183539, 183540, 183541
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 183542)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Contrato_Lock_Shared(ByVal iFilialEmpresa As Integer, ByVal sCodigo As String, Optional ByVal objContrato As ClassContrato = Nothing) As Long
'Loca o Contrato pelo código e filial empresa

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long
Dim iAtivo As Integer

On Error GoTo Erro_Contrato_Lock_Shared

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 195708

    'Le o contrato
    lErro = Comando_ExecutarLockado(lComando, "SELECT NumIntDoc, Ativo FROM Contratos WHERE Codigo = ? AND FilialEmpresa = ? ", _
                                            lNumIntDoc, iAtivo, sCodigo, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 195709
    
    'Busca o item
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195710
    
    If lErro = AD_SQL_SEM_DADOS Then gError 195711
    
    'Efetua o lock do contrato
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 195712
    
    If Not (objContrato Is Nothing) Then
    
        objContrato.sCodigo = sCodigo
        objContrato.lNumIntDoc = lNumIntDoc
        objContrato.iAtivo = iAtivo
        objContrato.iFilialEmpresa = iFilialEmpresa
    
    End If
    
    'Fecha comando
    Call Comando_Fechar(lComando)

    Contrato_Lock_Shared = SUCESSO

    Exit Function

Erro_Contrato_Lock_Shared:

    Contrato_Lock_Shared = gErr

    Select Case gErr

        Case 195708
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 195709, 195710
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)

        Case 195711
            
        Case 195712
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTRATO", gErr, iFilialEmpresa, sCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 195713)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ContratoCli_Le_Valor(ByVal lCliente As Long, ByVal iFilial As Integer, dValor As Double) As Long

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_ContratoCli_Le_Valor

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 195708

    'Le o contrato
    lErro = Comando_Executar(lComando, "SELECT SUM(Valor) FROM ContratosCli WHERE Cliente = ? AND FilCli = ? AND Ativo = 1 ", dValor, lCliente, iFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 195709
    
    'Busca o item
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195710
       
    'Fecha comando
    Call Comando_Fechar(lComando)

    ContratoCli_Le_Valor = SUCESSO

    Exit Function

Erro_ContratoCli_Le_Valor:

    ContratoCli_Le_Valor = gErr

    Select Case gErr

        Case 195708
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 195709, 195710
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 195713)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CamposGenericos_ValidaExclusao_StatusItemOS() As Long
'Verifica se é válida a exclusão de valores para o campos StatusItemOS

Dim lComando As Long
Dim lErro As Long
Dim iTipo As Integer
Dim sCodigo As String
Dim iFilialEmpresa As Integer

On Error GoTo Erro_CamposGenericos_ValidaExclusao_StatusItemOS
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 195023
    
    sCodigo = String(STRING_OS_CODIGO, 0)
    
    'Busca StatusItem em ItemOS que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa FROM ItemOS WHERE StatusItem NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND StatusItem <> 0", sCodigo, iFilialEmpresa, CAMPOSGENERICOS_OS_STATUSITEM)
    If lErro <> AD_SQL_SUCESSO Then gError 195024
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195025
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 195026

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_StatusItemOS = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_StatusItemOS:

    CamposGenericos_ValidaExclusao_StatusItemOS = gErr
    
    Select Case gErr
    
        Case 195023
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 195024, 195025
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMOS", gErr)
        
        Case 195026
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, sCodigo, CAMPOSGENERICOS_OS_STATUSITEM)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 195027)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

Public Function CamposGenericos_ValidaExclusao_StatusItemSolicSRV() As Long
'Verifica se é válida a exclusão de valores para o campos StatusItemOS

Dim lComando As Long
Dim lErro As Long
Dim iTipo As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_StatusItemSolicSRV
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 195521
    
    'Busca StatusItem em ItensSolicSRV que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM ItensSolicSRV WHERE StatusItem NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND StatusItem <> 0", lNumIntDoc, CAMPOSGENERICOS_SOLICSRV_STATUSITEM)
    If lErro <> AD_SQL_SUCESSO Then gError 195522
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195523
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 195524

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_StatusItemSolicSRV = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_StatusItemSolicSRV:

    CamposGenericos_ValidaExclusao_StatusItemSolicSRV = gErr
    
    Select Case gErr
    
        Case 195521
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 195522, 195523
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSSOLICSRV", gErr)
        
        Case 195524
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, lNumIntDoc, CAMPOSGENERICOS_SOLICSRV_STATUSITEM)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 195525)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

Function NFiscal_Le_Customizado(ByVal objNFiscal As ClassNFiscal) As Long
    NFiscal_Le_Customizado = SUCESSO
End Function

Function PedidoVenda_Le_NumIntDoc(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Lê o Pedido de Venda

Dim lErro As Long
Dim tPedidoVenda As typePedidoVenda
Dim lComando As Long

On Error GoTo Erro_PedidoVenda_Le_NumIntDoc

    'ABre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185020

    'Le em pedido de venda aberto
    lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa FROM PedidosDeVenda WHERE NumIntDoc = ?", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, objPedidoVenda.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 185021

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185022
    
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Le em pedido de venda baixados
        lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa FROM PedidosDeVendaBaixados WHERE NumIntDoc = ?", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, objPedidoVenda.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 185023
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185024

    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 185025

    With tPedidoVenda
    
        'Armazena os dados lidos
        objPedidoVenda.lCodigo = .lCodigo
        objPedidoVenda.iFilialEmpresa = .iFilialEmpresa
        
    End With

    'Fecha o comando
    Call Comando_Fechar(lComando)

    PedidoVenda_Le_NumIntDoc = SUCESSO

    Exit Function

Erro_PedidoVenda_Le_NumIntDoc:

    PedidoVenda_Le_NumIntDoc = gErr

    Select Case gErr

        Case 185020
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 185021, 185022
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA", gErr)

        Case 185023, 185024
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDABAIXADOS", gErr)

        Case 185025
            'Tratado pela rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185026)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeContratoCobranca_Le(ByVal objItensDeContratoCob As ClassItensDeContratoCob) As Long

Dim lErro As Long
Dim lComando As Long
Dim tItensDeContratoCob As typeItensDeContratoCob

On Error GoTo Erro_ItensDeContratoCobranca_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 188441

    lErro = Comando_Executar(lComando, "SELECT DataUltCobranca, NumIntDocCobranca, DataRefIni, DataRefFim FROM ItensDeContratoCobranca WHERE NumIntItemNFiscal = ? AND NumIntItensContrato = ?", _
                                    tItensDeContratoCob.dtDataUltCobranca, tItensDeContratoCob.lNumIntDocCobranca, tItensDeContratoCob.dtDataRefIni, tItensDeContratoCob.dtDataRefFim, objItensDeContratoCob.lNumIntItemNFiscal, objItensDeContratoCob.lNumIntItensContrato)
    If lErro <> AD_SQL_SUCESSO Then gError 188442
    
    'Busca item
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188443
       
    If lErro = AD_SQL_SEM_DADOS Then gError 188444
        
    objItensDeContratoCob.dtDataUltCobranca = tItensDeContratoCob.dtDataUltCobranca
    objItensDeContratoCob.dtDataRefIni = tItensDeContratoCob.dtDataRefIni
    objItensDeContratoCob.dtDataRefFim = tItensDeContratoCob.dtDataRefFim
    objItensDeContratoCob.lNumIntDocCobranca = tItensDeContratoCob.lNumIntDocCobranca
       
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContratoCobranca_Le = SUCESSO

    Exit Function

Erro_ItensDeContratoCobranca_Le:

    ItensDeContratoCobranca_Le = gErr

    Select Case gErr

        Case 188441
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188442, 188443
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATOCOBRANCA", gErr, objItensDeContratoCob.lNumIntItemNFiscal, objItensDeContratoCob.lNumIntItensContrato)

        Case 188444
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 188445)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function NFiscalContrato_Le1(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato, ByVal iTipoContrato As Integer) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim sSQL As String
Dim iIndice As Integer

'Variáveis Auxiliares
Dim iCondPagtoAux As Integer
Dim sContratoAux As String

'Variáveis de retorno de dados do BD
Dim lNumIntContrato As Long
Dim sContrato  As String
Dim sDescContrato  As String
Dim lFornecedor As Long
Dim iFilialFornecedor As Integer
Dim sCcl As String
Dim lNumIntItensContrato As Long
Dim sProduto  As String
Dim sDescProd  As String
Dim sUM  As String
Dim iCondPagto  As Integer
Dim iPeriodicidade  As Integer
Dim dtDataIniCobranca  As Date
Dim dtDataProxCobranca  As Date
Dim dValor As Double
Dim lMedicao As Long
Dim dQuantidade  As Double
Dim dCusto  As Double
Dim dVlrCobrar As Double
Dim iItem As Integer
Dim iTipoTributacao As Integer
Dim sNaturezaOp As String
Dim dtDataRefIni As Date
Dim dtDataRefFim As Date
Dim lCliente As Long
Dim iFilCli As Integer

Dim sSeriePadrao As String

Dim objContratoFat As ClassContratoFat
Dim objContratoFatItens As ClassContratoFatItens

On Error GoTo Erro_NFiscalContrato_Le1

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188470
    Next
   
    'Lê a Serie Padrão
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then gError 188471

    'Monta o Select
    Call NFiscalContratoSQL_Prepara1(objGeracaoFatContrato, sSQL)

    'Aloca espaço suficiente para o retorno dos dados do BD
    sContrato = String(STRING_CONTRATO_CODIGO, 0)
    sDescContrato = String(STRING_CONTRATO_DESCRICAO, 0)
    sCcl = String(STRING_CONTRATO_CCL, 0)
    sProduto = String(STRING_PRODUTO, 0)
    sDescProd = String(STRING_PRODUTO_DESCRICAO, 0)
    sUM = String(STRING_UM_SIGLA, 0)
    sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)

    'Passa os Binds
    lErro = NFiscalContratoInt_Prepara1(alComando(1), lNumIntContrato, sContrato, sDescContrato, lFornecedor, iFilialFornecedor, sCcl, lNumIntItensContrato, iItem, sProduto, sDescProd, sUM, iCondPagto, iPeriodicidade, dtDataIniCobranca, dtDataProxCobranca, dValor, lMedicao, dtDataRefIni, dtDataRefFim, dQuantidade, dCusto, dVlrCobrar, sNaturezaOp, iTipoTributacao, objGeracaoFatContrato.sContratoIni, objGeracaoFatContrato.iFilialEmpresa, iTipoContrato, sSQL, lCliente, iFilCli)
    If lErro <> AD_SQL_SUCESSO Then gError 188473

    'Busca primeiro Item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188474
      
    If lErro <> AD_SQL_SUCESSO Then gError 188511
      
    Set objContratoFat = New ClassContratoFat
    
    objContratoFat.dtDataRef = gdtDataAtual
    objContratoFat.iCondPagto = iCondPagto
    objContratoFat.iFilialFornecedor = iFilialFornecedor
    objContratoFat.lFornecedor = lFornecedor
    objContratoFat.iFilCli = iFilCli
    objContratoFat.lCliente = lCliente
    
    If Len(Trim(sNaturezaOp)) = 0 Then
        objContratoFat.sNaturezaOp = ""
    Else
        objContratoFat.sNaturezaOp = sNaturezaOp
    End If
    
    objContratoFat.iTipoTributacao = iTipoTributacao
    
    objContratoFat.sSerie = sSeriePadrao
    objContratoFat.sContrato = sContrato
    
    sContratoAux = sContrato
    iCondPagtoAux = iCondPagto
                        
    Do While lErro = AD_SQL_SUCESSO
                                   
        
        Set objContratoFatItens = New ClassContratoFatItens
        
        objContratoFatItens.dCusto = dCusto
        objContratoFatItens.dQuantidade = dQuantidade
        objContratoFatItens.dValor = dValor
        objContratoFatItens.dVlrCobrar = dVlrCobrar
        objContratoFatItens.iItem = iItem
        objContratoFatItens.sCcl = sCcl
        objContratoFatItens.sDescProd = sDescProd
        objContratoFatItens.sProduto = sProduto
        objContratoFatItens.lMedicao = lMedicao
        objContratoFatItens.lNumIntItensContrato = lNumIntItensContrato
        objContratoFatItens.sUM = sUM
        objContratoFatItens.dtDataProxCobranca = dtDataProxCobranca
        objContratoFatItens.sNaturezaOp = objContratoFat.sNaturezaOp
        objContratoFatItens.dtDataRefIni = dtDataRefIni
        objContratoFatItens.dtDataRefFim = dtDataRefFim
                   
        objContratoFat.colItens.Add objContratoFatItens
                   
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188475
            
    Loop

    objGeracaoFatContrato.colItens.Add objContratoFat

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscalContrato_Le1 = SUCESSO

    Exit Function

Erro_NFiscalContrato_Le1:

    NFiscalContrato_Le1 = gErr

    Select Case gErr

        Case 188470
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188471 To 188475

        Case 188511
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTRATO_NAO_CADASTRADO2", gErr, objGeracaoFatContrato.iFilialEmpresa, objGeracaoFatContrato.sContratoIni, iTipoContrato)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 188476)

    End Select

    'Fecha o Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub NFiscalContratoSQL_Prepara1(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato, sSQL As String)
'Monta o SELECT que traz os dados necessários para o faturamento de uma nota fiscal

Dim sSelect1 As String, sWhere1 As String, sFrom1 As String, sSubSelect1 As String, sOrderBy As String
Dim sSelect2 As String, sWhere2 As String, sFrom2 As String, sSubSelect2 As String
Dim sSQL1 As String, sSQL2 As String, sWhereAux

On Error GoTo Erro_NFiscalContratoSQL_Prepara1
    
    'Traz os Itens de Contratos Com Medição
    sSelect1 = "SELECT  C.NumIntDoc, " & _
                        "C.Codigo, " & _
                        "C.Descricao, " & _
                        "C.Fornecedor, " & _
                        "C.FilialFornecedor, C.Cliente, C.FilCli, " & _
                        "C.Ccl, " & _
                        "IC.NumIntDoc, " & _
                        "IC.Seq, " & _
                        "IC.Produto, " & _
                        "IC.DescProd, " & _
                        "IC.UM, " & _
                        "IC.CondPagto, " & _
                        "IC.Periodicidade, " & _
                        "IC.DataIniCobranca, " & _
                        "IM.DataCobranca, " & _
                        "IC.Valor, " & _
                        "M.Codigo AS NumIntMedicao, " & _
                        "IM.DataRefIni  AS RefIni, " & _
                        "IM.DataRefFim  AS RefFim, " & _
                        "IM.Quantidade AS Quantidade, " & _
                        "IM.Custo AS Custo, " & _
                        "IM.VlrCobrar AS ValorCobrar, " & _
                        "C.NaturezaOP, " & _
                        "C.TipoTributacao "

    sFrom1 = "FROM      Contratos                AS C, " & _
                        "ItensDeContrato         AS IC, " & _
                        "MedicaoContrato         AS M, " & _
                        "ItensDeMedicaoContrato  AS IM "
                    
    sWhere1 = "WHERE    C.NumIntDoc          = IC.NumIntContrato AND " & _
                        "C.NumIntDoc         = M.NumIntContrato AND " & _
                        "IC.NumIntDoc        = IM.NumIntItensContrato AND " & _
                        "IM.Medicao          = M.Codigo AND " & _
                        "C.Ativo             = 1 AND " & _
                        "IC.Cobrar           = 1 AND " & _
                        "C.FilialEmpresa     = ? AND " & _
                        "C.Tipo = ? AND C.Codigo = ? AND " & _
                        "NOT EXISTS "

    'Verifica se o Item de Medição ainda não foi faturada
    sSubSelect1 = "( SELECT   NumIntItemNFiscal " & _
                    "FROM   ItensDeMedicaoCobranca AS IMNF, ItensNFiscal AS INF " & _
                    "WHERE  IMNF.NumIntItensContrato    = IM.NumIntItensContrato AND " & _
                            "IMNF.Medicao = IM.Medicao AND  " & _
                            "INF.NumIntDoc = IMNF.NumIntItemNFiscal ) "
    sWhere1 = sWhere1 & sSubSelect1
                            
    'Traz os Itens de Contratos Sem Medição
    sSelect2 = "SELECT  C.NumIntDoc, " & _
                        "C.Codigo, " & _
                        "C.Descricao, " & _
                        "C.Fornecedor, " & _
                        "C.FilialFornecedor, C.Cliente, C.FilCli, " & _
                        "C.Ccl, " & _
                        "IC.NumIntDoc, " & _
                        "IC.Seq, " & _
                        "IC.Produto, " & _
                        "IC.DescProd, " & _
                        "IC.UM, " & _
                        "IC.CondPagto, " & _
                        "IC.Periodicidade, " & _
                        "IC.DataIniCobranca, " & _
                        "IC.DataProxCobranca, " & _
                        "IC.Valor, " & _
                        "0 AS NumIntMedicao, " & _
                        "IC.DataRefIni  AS RefIni, " & _
                        "IC.DataRefFim  AS RefFim, " & _
                        "IC.Quantidade AS Quantidade, " & _
                        "0 AS Custo, " & _
                        "IC.Valor * IC.Quantidade AS ValorCobrar, " & _
                        "C.NaturezaOP, " & _
                        "C.TipoTributacao "

    sFrom2 = "FROM  Contratos        AS C, " & _
                    "ItensDeContrato AS IC "
                    
    sWhere2 = "WHERE     C.NumIntDoc         = IC.NumIntContrato AND " & _
                        "C.Ativo             = 1 AND " & _
                        "IC.Cobrar           = 1 AND " & _
                        "IC.Medicao          = 0 AND " & _
                        "C.FilialEmpresa     = ? AND " & _
                        "C.Tipo = ? AND C.Codigo = ? "

    sOrderBy = "ORDER BY IC.Seq "

    sSQL1 = sSelect1 & sFrom1 & sWhere1
    sSQL2 = sSelect2 & sFrom2 & sWhere2 & sOrderBy
    
    sSQL = sSQL1 & " UNION " & sSQL2

    Exit Sub

Erro_NFiscalContratoSQL_Prepara1:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 188477)

    End Select

    Exit Sub

End Sub

Private Function NFiscalContratoInt_Prepara1(ByVal lComando As Long, vlNumIntContrato As Variant, vsContrato As Variant, vsDescContrato As Variant, vlFornecedor As Variant, viFilialFornecedor As Variant, vsCcl As Variant, vlNumIntItem, viItem As Variant, vsProduto As Variant, vsDescProd As Variant, vsUM As Variant, viCondPagto As Variant, viPeriodicidade As Variant, vdtIniCobr As Variant, vdtProxCobr As Variant, vdValor As Variant, vlMedicao As Variant, vdtRefIni As Variant, vdtRefFim As Variant, vdQtd As Variant, vdCusto As Variant, vdVlrCobrar As Variant, vsNaturezaOP As Variant, viTipoTributacao As Variant, ByVal vsContratoIni As Variant, ByVal viFilialEmpresa As Variant, ByVal viTipo As Variant, ByVal sSQL As String, vlCliente As Variant, viFilialCliente As Variant) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados a serem faturados

Dim lErro As Long

On Error GoTo Erro_NFiscalContratoInt_Prepara1

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188478

    lErro = Comando_BindVarInt(lComando, vlNumIntContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188479

    lErro = Comando_BindVarInt(lComando, vsContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188480
    
    lErro = Comando_BindVarInt(lComando, vsDescContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188481
    
    lErro = Comando_BindVarInt(lComando, vlFornecedor)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188482
    
    lErro = Comando_BindVarInt(lComando, viFilialFornecedor)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188483
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188573
    
    lErro = Comando_BindVarInt(lComando, viFilialCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188574
    
    lErro = Comando_BindVarInt(lComando, vsCcl)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188484
    
    lErro = Comando_BindVarInt(lComando, vlNumIntItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188485
    
    lErro = Comando_BindVarInt(lComando, viItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188486
    
    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188487
    
    lErro = Comando_BindVarInt(lComando, vsDescProd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188488
    
    lErro = Comando_BindVarInt(lComando, vsUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188489
    
    lErro = Comando_BindVarInt(lComando, viCondPagto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188490
    
    lErro = Comando_BindVarInt(lComando, viPeriodicidade)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188491
    
    lErro = Comando_BindVarInt(lComando, vdtIniCobr)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188492
    
    lErro = Comando_BindVarInt(lComando, vdtProxCobr)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188493
    
    lErro = Comando_BindVarInt(lComando, vdValor)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188494
    
    lErro = Comando_BindVarInt(lComando, vlMedicao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188495
       
    lErro = Comando_BindVarInt(lComando, vdtRefIni)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188496
    
    lErro = Comando_BindVarInt(lComando, vdtRefFim)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188497
    
    lErro = Comando_BindVarInt(lComando, vdQtd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188498
    
    lErro = Comando_BindVarInt(lComando, vdCusto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188499
    
    lErro = Comando_BindVarInt(lComando, vdVlrCobrar)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188500
        
    lErro = Comando_BindVarInt(lComando, vsNaturezaOP)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188501
   
    lErro = Comando_BindVarInt(lComando, viTipoTributacao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188502
   
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188503
    
    lErro = Comando_BindVarInt(lComando, viTipo)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188504
   
    lErro = Comando_BindVarInt(lComando, vsContratoIni)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188505

    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188506
    
    lErro = Comando_BindVarInt(lComando, viTipo)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188507
   
    lErro = Comando_BindVarInt(lComando, vsContratoIni)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188508

    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 188509

    NFiscalContratoInt_Prepara1 = SUCESSO

    Exit Function

Erro_NFiscalContratoInt_Prepara1:

    NFiscalContratoInt_Prepara1 = gErr

    Select Case gErr

        Case 188478 To 188509, 188573, 188574
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 188510)

    End Select

    Exit Function

End Function

Public Function TipoArqIntegracao_Le_Todos(ByVal colTipoArqIntegracao As Collection, Optional ByVal iTipoInt As Integer = 0) As Long

Dim lErro As Long
Dim lComando As Long
Dim tTipoArqIntegracao As typeTipoArqIntegracao
Dim objTipoArqIntegracao As ClassTipoArqIntegracao

On Error GoTo Erro_TipoArqIntegracao_Le_Todos

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 189738

    'Alocação de espaço no buffer
    tTipoArqIntegracao.sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
    tTipoArqIntegracao.sSiglaArq = String(STRING_SIGLA_ARQ, 0)
    tTipoArqIntegracao.sTabela = String(STRING_TABELA, 0)

    'Le a tabelaTipoArqIntegracao
    If iTipoInt = TIPO_INTEGRACAO_EXPORTACAO Then
        lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, SiglaArq, Tabela FROM TipoArqIntegracao WHERE ValidoExp = ? ORDER BY Descricao ", _
                    tTipoArqIntegracao.iCodigo, tTipoArqIntegracao.sDescricao, tTipoArqIntegracao.sSiglaArq, tTipoArqIntegracao.sTabela, MARCADO)
    ElseIf iTipoInt = TIPO_INTEGRACAO_IMPORTACAO Then
        lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, SiglaArq, Tabela FROM TipoArqIntegracao WHERE ValidoImp = ? ORDER BY Descricao ", _
                    tTipoArqIntegracao.iCodigo, tTipoArqIntegracao.sDescricao, tTipoArqIntegracao.sSiglaArq, tTipoArqIntegracao.sTabela, MARCADO)
    Else
        lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, SiglaArq, Tabela FROM TipoArqIntegracao ORDER BY Descricao ", _
                    tTipoArqIntegracao.iCodigo, tTipoArqIntegracao.sDescricao, tTipoArqIntegracao.sSiglaArq, tTipoArqIntegracao.sTabela)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 189739

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189740

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objTipoArqIntegracao = New ClassTipoArqIntegracao

        objTipoArqIntegracao.iCodigo = tTipoArqIntegracao.iCodigo
        objTipoArqIntegracao.sDescricao = tTipoArqIntegracao.sDescricao
        objTipoArqIntegracao.sSiglaArq = tTipoArqIntegracao.sSiglaArq
        objTipoArqIntegracao.sTabela = tTipoArqIntegracao.sTabela
        
        colTipoArqIntegracao.Add objTipoArqIntegracao
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189741
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    TipoArqIntegracao_Le_Todos = SUCESSO

    Exit Function

Erro_TipoArqIntegracao_Le_Todos:

    TipoArqIntegracao_Le_Todos = gErr

    Select Case gErr
    
        Case 189738
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 189739 To 189741
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOARQINTEGRACAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189742)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function


Public Function Enderecos_Le_FiliaisClientes(colEnderecos As Collection, objFilialCliente As ClassFilialCliente) As Long
'Lê cada um dos 3 tipos de enderecos(principal,entrega e cobranca) na tabela Enderecos e coloca na colecao

Dim lErro As Long
Dim objEndereco As ClassEndereco

On Error GoTo Erro_Enderecos_Le_FiliaisClientes

    'Endereco Principal

    Set objEndereco = New ClassEndereco

    objEndereco.lCodigo = objFilialCliente.lEndereco

    lErro = CF("Endereco_Le", objEndereco)
    If lErro <> SUCESSO And lErro <> 12309 Then gError 189930

    colEnderecos.Add objEndereco

    'Endereco de Entrega

    Set objEndereco = New ClassEndereco

    objEndereco.lCodigo = objFilialCliente.lEnderecoEntrega

    lErro = CF("Endereco_Le", objEndereco)
    If lErro <> SUCESSO And lErro <> 12309 Then gError 189931

    colEnderecos.Add objEndereco

    'Endereco de Cobranca

    Set objEndereco = New ClassEndereco

    objEndereco.lCodigo = objFilialCliente.lEnderecoCobranca

    lErro = CF("Endereco_Le", objEndereco)
    If lErro <> SUCESSO And lErro <> 12309 Then gError 189932

    colEnderecos.Add objEndereco

    Enderecos_Le_FiliaisClientes = SUCESSO

Exit Function

Erro_Enderecos_Le_FiliaisClientes:

    Enderecos_Le_FiliaisClientes = gErr

    Select Case gErr

        Case 189930 To 189932

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189933)

    End Select

    Exit Function

End Function

Public Function ArqImport_Verifica_JaImportado(ByVal sNomeArq As String, bJaImportado As Boolean)

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim lNumIntArq As Long

On Error GoTo Erro_ArqImport_Verifica_JaImportado

    bJaImportado = False
    
    'Abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 189870
    Next
    
    'Le a tabelaArqImportacao
    lErro = Comando_Executar(alComando(1), "SELECT NumIntArq  FROM ArqImportacao WHERE NomeArquivo= ? ", lNumIntArq, sNomeArq)
    If lErro <> AD_SQL_SUCESSO Then gError 189960

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189961
    If lErro = AD_SQL_SUCESSO Then bJaImportado = True
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
   
    ArqImport_Verifica_JaImportado = SUCESSO
    
    Exit Function

Erro_ArqImport_Verifica_JaImportado:

    ArqImport_Verifica_JaImportado = gErr

    Select Case gErr
    
        Case 189870
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 189960, 189961
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ARQIMPORTACAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189872)

    End Select
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
       
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function RPS_Le(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim lComando As Long
Dim tRPS As typeRPS

On Error GoTo Erro_RPS_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 192378

    'Alocação de espaço no buffer
    tRPS.sSerie = String(STRING_RPS_SERIE, 0)
    tRPS.sSituacao = String(STRING_RPS_SITUACAO, 0)
    tRPS.sCgc = String(STRING_RPS_CGC, 0)
    tRPS.sInscricaoMunicipal = String(STRING_RPS_INSCMUNI, 0)
    tRPS.sInscricaoEstadual = String(STRING_RPS_INSCEST, 0)
    tRPS.sRazaoSocial = String(STRING_RPS_RAZAOSOCIAL, 0)
    tRPS.sEndereco = String(STRING_RPS_ENDERECO, 0)
    tRPS.sEndNumero = String(STRING_RPS_ENDNUM, 0)
    tRPS.sEndComplemento = String(STRING_RPS_ENDCOMP, 0)
    tRPS.sBairro = String(STRING_RPS_BAIRRO, 0)
    tRPS.sCidade = String(STRING_RPS_CIDADE, 0)
    tRPS.sUF = String(STRING_RPS_UF, 0)
    tRPS.sCEP = String(STRING_RPS_CEP, 0)
    tRPS.sEmail = String(STRING_RPS_EMAIL, 0)
    tRPS.sDiscriminacao = String(STRING_RPS_DISCRIMINACAO, 0)
    tRPS.sTipo = String(STRING_RPS_TIPO, 0)

    'Le a tabelaRPS
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc,Tipo, Serie, Numero, DataEmissao,FilialEmpresa, Situacao, ValorServico, " & _
                "ValorDeducao, CodigoServico, Aliquota, ISSRetido, TipoCGC, CGC, InscricaoMunicipal, " & _
                "InscricaoEstadual, RazaoSocial, Endereco, EndNumero, EndComplemento, Bairro, Cidade, " & _
                "UF, CEP, Email, Discriminacao, NumIntDocNF, Cliente, FilialCliente, ValorCofins, ValorCSLL, ValorINSS, ValorIRPJ, ValorPIS FROM RPS WHERE Serie= ?  AND Numero= ?  AND DataEmissao= ? AND FilialEmpresa = ? ", _
                tRPS.lNumIntDoc, tRPS.sTipo, tRPS.sSerie, tRPS.lNumero, tRPS.dtDataEmissao, tRPS.iFilialEmpresa, _
                tRPS.sSituacao, tRPS.dValorServico, tRPS.dValorDeducao, tRPS.lCodigoServico, tRPS.dAliquota, _
                tRPS.iISSRetido, tRPS.iTipoCGC, tRPS.sCgc, tRPS.sInscricaoMunicipal, tRPS.sInscricaoEstadual, _
                tRPS.sRazaoSocial, tRPS.sEndereco, tRPS.sEndNumero, tRPS.sEndComplemento, tRPS.sBairro, _
                tRPS.sCidade, tRPS.sUF, tRPS.sCEP, tRPS.sEmail, tRPS.sDiscriminacao, tRPS.lNumIntDocNF, tRPS.lCliente, tRPS.iFilialCliente, tRPS.dValorCofins, tRPS.dValorCSLL, tRPS.dValorINSS, tRPS.dValorIRPJ, tRPS.dValorPIS, _
                objRPS.sSerie, objRPS.lNumero, objRPS.dtDataEmissao, objRPS.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 192379

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192380

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objRPS.lNumIntDoc = tRPS.lNumIntDoc
    objRPS.sSerie = tRPS.sSerie
    objRPS.sTipo = tRPS.sTipo
    objRPS.lNumero = tRPS.lNumero
    objRPS.dtDataEmissao = tRPS.dtDataEmissao
    objRPS.iFilialEmpresa = tRPS.iFilialEmpresa
    objRPS.sSituacao = tRPS.sSituacao
    objRPS.dValorServico = tRPS.dValorServico
    objRPS.dValorDeducao = tRPS.dValorDeducao
    objRPS.lCodigoServico = tRPS.lCodigoServico
    objRPS.dAliquota = tRPS.dAliquota
    objRPS.iISSRetido = tRPS.iISSRetido
    objRPS.iTipoCGC = tRPS.iTipoCGC
    objRPS.sCgc = tRPS.sCgc
    objRPS.sInscricaoMunicipal = tRPS.sInscricaoMunicipal
    objRPS.sInscricaoEstadual = tRPS.sInscricaoEstadual
    objRPS.sRazaoSocial = tRPS.sRazaoSocial
    objRPS.sEndereco = tRPS.sEndereco
    objRPS.sEndNumero = tRPS.sEndNumero
    objRPS.sEndComplemento = tRPS.sEndComplemento
    objRPS.sBairro = tRPS.sBairro
    objRPS.sCidade = tRPS.sCidade
    objRPS.sUF = tRPS.sUF
    objRPS.sCEP = tRPS.sCEP
    objRPS.sEmail = tRPS.sEmail
    objRPS.sDiscriminacao = tRPS.sDiscriminacao
    objRPS.lNumIntDocNF = tRPS.lNumIntDocNF
    objRPS.lCliente = tRPS.lCliente
    objRPS.iFilialCliente = tRPS.iFilialCliente
    
    objRPS.dValorCofins = tRPS.dValorCofins
    objRPS.dValorCSLL = tRPS.dValorCSLL
    objRPS.dValorINSS = tRPS.dValorINSS
    objRPS.dValorIRPJ = tRPS.dValorIRPJ
    objRPS.dValorPIS = tRPS.dValorPIS
        
    'Fecha Comando
    Call Comando_Fechar(lComando)

    RPS_Le = SUCESSO

    Exit Function

Erro_RPS_Le:

    RPS_Le = gErr

    Select Case gErr

        Case 192378
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192379, 192380
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192381)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RPS_Le_NumIntDoc(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim lComando As Long
Dim tRPS As typeRPS

On Error GoTo Erro_RPS_Le_NumIntDoc

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 192401

    'Alocação de espaço no buffer
    tRPS.sSerie = String(STRING_RPS_SERIE, 0)
    tRPS.sSituacao = String(STRING_RPS_SITUACAO, 0)
    tRPS.sCgc = String(STRING_RPS_CGC, 0)
    tRPS.sInscricaoMunicipal = String(STRING_RPS_INSCMUNI, 0)
    tRPS.sInscricaoEstadual = String(STRING_RPS_INSCEST, 0)
    tRPS.sRazaoSocial = String(STRING_RPS_RAZAOSOCIAL, 0)
    tRPS.sEndereco = String(STRING_RPS_ENDERECO, 0)
    tRPS.sEndNumero = String(STRING_RPS_ENDNUM, 0)
    tRPS.sEndComplemento = String(STRING_RPS_ENDCOMP, 0)
    tRPS.sBairro = String(STRING_RPS_BAIRRO, 0)
    tRPS.sCidade = String(STRING_RPS_CIDADE, 0)
    tRPS.sUF = String(STRING_RPS_UF, 0)
    tRPS.sCEP = String(STRING_RPS_CEP, 0)
    tRPS.sEmail = String(STRING_RPS_EMAIL, 0)
    tRPS.sDiscriminacao = String(STRING_RPS_DISCRIMINACAO, 0)
    tRPS.sTipo = String(STRING_RPS_TIPO, 0)
    
    'Le a tabelaRPS
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Tipo, Serie, Numero, DataEmissao,FilialEmpresa, Situacao, ValorServico, " & _
                "ValorDeducao, CodigoServico, Aliquota, ISSRetido, TipoCGC, CGC, InscricaoMunicipal, " & _
                "InscricaoEstadual, RazaoSocial, Endereco, EndNumero, EndComplemento, Bairro, Cidade, " & _
                "UF, CEP, Email, Discriminacao, NumIntDocNF, Cliente, FilialCliente, ValorCofins, ValorCSLL, ValorINSS, ValorIRPJ, ValorPIS FROM RPS WHERE NumIntDoc = ? ", _
                tRPS.lNumIntDoc, tRPS.sTipo, tRPS.sSerie, tRPS.lNumero, tRPS.dtDataEmissao, tRPS.iFilialEmpresa, _
                tRPS.sSituacao, tRPS.dValorServico, tRPS.dValorDeducao, tRPS.lCodigoServico, tRPS.dAliquota, _
                tRPS.iISSRetido, tRPS.iTipoCGC, tRPS.sCgc, tRPS.sInscricaoMunicipal, tRPS.sInscricaoEstadual, _
                tRPS.sRazaoSocial, tRPS.sEndereco, tRPS.sEndNumero, tRPS.sEndComplemento, tRPS.sBairro, _
                tRPS.sCidade, tRPS.sUF, tRPS.sCEP, tRPS.sEmail, tRPS.sDiscriminacao, tRPS.lNumIntDocNF, tRPS.lCliente, tRPS.iFilialCliente, tRPS.dValorCofins, tRPS.dValorCSLL, tRPS.dValorINSS, tRPS.dValorIRPJ, tRPS.dValorPIS, _
                objRPS.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 192402

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192403

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objRPS.lNumIntDoc = tRPS.lNumIntDoc
    objRPS.sSerie = tRPS.sSerie
    objRPS.sTipo = tRPS.sTipo
    objRPS.lNumero = tRPS.lNumero
    objRPS.dtDataEmissao = tRPS.dtDataEmissao
    objRPS.iFilialEmpresa = tRPS.iFilialEmpresa
    objRPS.sSituacao = tRPS.sSituacao
    objRPS.dValorServico = tRPS.dValorServico
    objRPS.dValorDeducao = tRPS.dValorDeducao
    objRPS.lCodigoServico = tRPS.lCodigoServico
    objRPS.dAliquota = tRPS.dAliquota
    objRPS.iISSRetido = tRPS.iISSRetido
    objRPS.iTipoCGC = tRPS.iTipoCGC
    objRPS.sCgc = tRPS.sCgc
    objRPS.sInscricaoMunicipal = tRPS.sInscricaoMunicipal
    objRPS.sInscricaoEstadual = tRPS.sInscricaoEstadual
    objRPS.sRazaoSocial = tRPS.sRazaoSocial
    objRPS.sEndereco = tRPS.sEndereco
    objRPS.sEndNumero = tRPS.sEndNumero
    objRPS.sEndComplemento = tRPS.sEndComplemento
    objRPS.sBairro = tRPS.sBairro
    objRPS.sCidade = tRPS.sCidade
    objRPS.sUF = tRPS.sUF
    objRPS.sCEP = tRPS.sCEP
    objRPS.sEmail = tRPS.sEmail
    objRPS.sDiscriminacao = tRPS.sDiscriminacao
    objRPS.lNumIntDocNF = tRPS.lNumIntDocNF
    objRPS.lCliente = tRPS.lCliente
    objRPS.iFilialCliente = tRPS.iFilialCliente
        
    objRPS.dValorCofins = tRPS.dValorCofins
    objRPS.dValorCSLL = tRPS.dValorCSLL
    objRPS.dValorINSS = tRPS.dValorINSS
    objRPS.dValorIRPJ = tRPS.dValorIRPJ
    objRPS.dValorPIS = tRPS.dValorPIS
        
    'Fecha Comando
    Call Comando_Fechar(lComando)

    RPS_Le_NumIntDoc = SUCESSO

    Exit Function

Erro_RPS_Le_NumIntDoc:

    RPS_Le_NumIntDoc = gErr

    Select Case gErr

        Case 192401
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192402, 192403
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192404)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function RPS_Verifica_Existencia_DataProxima(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim lComando As Long
Dim tRPS As typeRPS

On Error GoTo Erro_RPS_Verifica_Existencia_DataProxima

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 192405

    'Alocação de espaço no buffer
    tRPS.sSerie = String(STRING_RPS_SERIE, 0)

    'Le a tabelaRPS
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Serie, Numero, DataEmissao FROM RPS WHERE Serie= ?  AND Numero= ?  AND DataEmissao <> ? AND (DataEmissao > ? AND DataEmissao < ?) AND FilialEmpresa = ? ", _
                tRPS.lNumIntDoc, tRPS.sSerie, tRPS.lNumero, tRPS.dtDataEmissao, _
                objRPS.sSerie, objRPS.lNumero, objRPS.dtDataEmissao, objRPS.dtDataEmissao - PERIODO_EMISSAO, objRPS.dtDataEmissao + PERIODO_EMISSAO, objRPS.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 192406

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192407

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objRPS.lNumIntDoc = tRPS.lNumIntDoc
    objRPS.sSerie = tRPS.sSerie
    objRPS.lNumero = tRPS.lNumero
    objRPS.dtDataEmissao = tRPS.dtDataEmissao

    'Fecha Comando
    Call Comando_Fechar(lComando)

    RPS_Verifica_Existencia_DataProxima = SUCESSO

    Exit Function

Erro_RPS_Verifica_Existencia_DataProxima:

    RPS_Verifica_Existencia_DataProxima = gErr

    Select Case gErr

        Case 192405
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192406, 192407
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192408)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RPS_Le_Periodo(ByVal dtDataEmiIni As Date, ByVal dtDataEmiFim As Date, ByVal iFilialEmpresa As Integer, ByVal colRPS As Collection, Optional ByVal lRPSDe As Long) As Long

Dim lErro As Long
Dim lComando As Long
Dim tRPS As typeRPS
Dim objRPS As ClassRPS

On Error GoTo Erro_RPS_Le_Periodo

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 192409

    'Alocação de espaço no buffer
    tRPS.sSerie = String(STRING_RPS_SERIE, 0)
    tRPS.sSituacao = String(STRING_RPS_SITUACAO, 0)
    tRPS.sCgc = String(STRING_RPS_CGC, 0)
    tRPS.sInscricaoMunicipal = String(STRING_RPS_INSCMUNI, 0)
    tRPS.sInscricaoEstadual = String(STRING_RPS_INSCEST, 0)
    tRPS.sRazaoSocial = String(STRING_RPS_RAZAOSOCIAL, 0)
    tRPS.sEndereco = String(STRING_RPS_ENDERECO, 0)
    tRPS.sEndNumero = String(STRING_RPS_ENDNUM, 0)
    tRPS.sEndComplemento = String(STRING_RPS_ENDCOMP, 0)
    tRPS.sBairro = String(STRING_RPS_BAIRRO, 0)
    tRPS.sCidade = String(STRING_RPS_CIDADE, 0)
    tRPS.sUF = String(STRING_RPS_UF, 0)
    tRPS.sCEP = String(STRING_RPS_CEP, 0)
    tRPS.sEmail = String(STRING_RPS_EMAIL, 0)
    tRPS.sDiscriminacao = String(STRING_RPS_DISCRIMINACAO, 0)
    tRPS.sTipo = String(STRING_RPS_TIPO, 0)
    
    'Le a tabelaRPS
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Tipo, Serie, Numero, DataEmissao,FilialEmpresa, Situacao, ValorServico, " & _
                "ValorDeducao, CodigoServico, Aliquota, ISSRetido, TipoCGC, CGC, InscricaoMunicipal, " & _
                "InscricaoEstadual, RazaoSocial, Endereco, EndNumero, EndComplemento, Bairro, Cidade, " & _
                "UF, CEP, Email, Discriminacao, NumIntDocNF, Cliente, FilialCliente, ValorCofins, ValorCSLL, ValorINSS, ValorIRPJ, ValorPIS FROM RPS WHERE DataEmissao BETWEEN ? AND ? AND FilialEmpresa = ? AND NumIntDocNF IN (SELECT NumIntDoc FROM NFiscal ) AND Numero >= ?", _
                tRPS.lNumIntDoc, tRPS.sTipo, tRPS.sSerie, tRPS.lNumero, tRPS.dtDataEmissao, tRPS.iFilialEmpresa, _
                tRPS.sSituacao, tRPS.dValorServico, tRPS.dValorDeducao, tRPS.lCodigoServico, tRPS.dAliquota, _
                tRPS.iISSRetido, tRPS.iTipoCGC, tRPS.sCgc, tRPS.sInscricaoMunicipal, tRPS.sInscricaoEstadual, _
                tRPS.sRazaoSocial, tRPS.sEndereco, tRPS.sEndNumero, tRPS.sEndComplemento, tRPS.sBairro, _
                tRPS.sCidade, tRPS.sUF, tRPS.sCEP, tRPS.sEmail, tRPS.sDiscriminacao, tRPS.lNumIntDocNF, tRPS.lCliente, tRPS.iFilialCliente, tRPS.dValorCofins, tRPS.dValorCSLL, tRPS.dValorINSS, tRPS.dValorIRPJ, tRPS.dValorPIS, _
                dtDataEmiIni, dtDataEmiFim, iFilialEmpresa, lRPSDe)
    If lErro <> AD_SQL_SUCESSO Then gError 192410

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192411

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objRPS = New ClassRPS

        objRPS.lNumIntDoc = tRPS.lNumIntDoc
        objRPS.sSerie = tRPS.sSerie
        objRPS.sTipo = tRPS.sTipo
        objRPS.lNumero = tRPS.lNumero
        objRPS.dtDataEmissao = tRPS.dtDataEmissao
        objRPS.iFilialEmpresa = tRPS.iFilialEmpresa
        objRPS.sSituacao = tRPS.sSituacao
        objRPS.dValorServico = tRPS.dValorServico
        objRPS.dValorDeducao = tRPS.dValorDeducao
        objRPS.lCodigoServico = tRPS.lCodigoServico
        objRPS.dAliquota = tRPS.dAliquota
        objRPS.iISSRetido = tRPS.iISSRetido
        objRPS.iTipoCGC = tRPS.iTipoCGC
        objRPS.sCgc = tRPS.sCgc
        objRPS.sInscricaoMunicipal = tRPS.sInscricaoMunicipal
        objRPS.sInscricaoEstadual = tRPS.sInscricaoEstadual
        objRPS.sRazaoSocial = tRPS.sRazaoSocial
        objRPS.sEndereco = tRPS.sEndereco
        objRPS.sEndNumero = tRPS.sEndNumero
        objRPS.sEndComplemento = tRPS.sEndComplemento
        objRPS.sBairro = tRPS.sBairro
        objRPS.sCidade = tRPS.sCidade
        objRPS.sUF = tRPS.sUF
        objRPS.sCEP = tRPS.sCEP
        objRPS.sEmail = tRPS.sEmail
        objRPS.sDiscriminacao = tRPS.sDiscriminacao
        objRPS.lNumIntDocNF = tRPS.lNumIntDocNF
        objRPS.lCliente = tRPS.lCliente
        objRPS.iFilialCliente = tRPS.iFilialCliente
        
        objRPS.dValorCofins = tRPS.dValorCofins
        objRPS.dValorCSLL = tRPS.dValorCSLL
        objRPS.dValorINSS = tRPS.dValorINSS
        objRPS.dValorIRPJ = tRPS.dValorIRPJ
        objRPS.dValorPIS = tRPS.dValorPIS
        
        colRPS.Add objRPS
        
        Set objRPS.gobjNF = New ClassNFiscal
        Set objRPS.gobjCli = New ClassCliente
        Set objRPS.gobjFilCli = New ClassFilialCliente
        Set objRPS.gobjEnd = New ClassEndereco
        
        objRPS.gobjNF.lNumIntDoc = objRPS.lNumIntDocNF

        lErro = CF("NFiscal_Le", objRPS.gobjNF)
        If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM
        
        'Lê os Ítens da Nota Fiscal
        lErro = CF("NFiscalItens_Le", objRPS.gobjNF)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        'Lê a parte de Tributação
        lErro = CF("NFiscal_Le_Tributacao", objRPS.gobjNF)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        'Lê a parte de tributacao dos Ítens da Nota Fiscal
        lErro = CF("NFiscalItens_Le_Trib", objRPS.gobjNF)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        lErro = CF("ParcelasRecNF_Le", objRPS.gobjNF)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        'carrega dados do titulo a receber associado à nota fiscal para obter a condicao de pagto
        If objRPS.gobjNF.lNumIntDocCPR > 0 Then
            Set objRPS.gobjTitRec = New ClassTituloReceber
            objRPS.gobjTitRec.lNumIntDoc = objRPS.gobjNF.lNumIntDocCPR
            lErro = CF("TituloReceber_Le", objRPS.gobjTitRec, 1)
            If lErro <> SUCESSO And lErro <> 26061 Then gError ERRO_SEM_MENSAGEM
            If lErro <> SUCESSO Then
                lErro = CF("TituloReceberBaixado_Le", objRPS.gobjTitRec, 1)
                If lErro <> SUCESSO And lErro <> 56570 Then gError ERRO_SEM_MENSAGEM
            End If
        End If
                
        objRPS.gobjCli.lCodigo = objRPS.lCliente
        objRPS.gobjFilCli.lCodCliente = objRPS.lCliente
        objRPS.gobjFilCli.iCodFilial = objRPS.iFilialCliente
    
        lErro = CF("Cliente_Le", objRPS.gobjCli)
        If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM
        
        lErro = CF("FilialCliente_Le", objRPS.gobjFilCli)
        If lErro <> SUCESSO And lErro <> 12567 Then gError ERRO_SEM_MENSAGEM
    
        objRPS.gobjEnd.lCodigo = objRPS.gobjFilCli.lEndereco
        
        lErro = CF("Endereco_Le", objRPS.gobjEnd)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192412

    Loop
    'Fecha Comando
    Call Comando_Fechar(lComando)

    RPS_Le_Periodo = SUCESSO

    Exit Function

Erro_RPS_Le_Periodo:

    RPS_Le_Periodo = gErr

    Select Case gErr

        Case 192409
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192410 To 192412
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192413)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function NFe_Le(ByVal objNFe As ClassNFe) As Long

Dim lErro As Long
Dim lComando As Long
Dim tNFe As typeNFe

On Error GoTo Erro_NFe_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 192516

    'Alocação de espaço no buffer
    tNFe.sCodVerificacao = String(STRING_MAXIMO, 0)
    tNFe.sTipoRPS = String(STRING_RPS_TIPO, 0)
    tNFe.sSerieRPS = String(STRING_RPS_SERIE, 0)
    tNFe.sInscricaoMunicialPrest = String(STRING_RPS_INSCMUNI, 0)
    tNFe.sCGCPrest = String(STRING_RPS_CGC, 0)
    tNFe.sRazaoSocialPrest = String(STRING_RPS_RAZAOSOCIAL, 0)
    tNFe.sTipoEnderecoPrest = String(STRING_RPS_ENDTIPO, 0)
    tNFe.sEnderecoPrest = String(STRING_RPS_ENDERECO, 0)
    tNFe.sEndNumeroPrest = String(STRING_RPS_ENDNUM, 0)
    tNFe.sEndComplementoPrest = String(STRING_RPS_ENDCOMP, 0)
    tNFe.sBairroPrest = String(STRING_RPS_BAIRRO, 0)
    tNFe.sCidadePrest = String(STRING_RPS_CIDADE, 0)
    tNFe.sUFPrest = String(STRING_RPS_UF, 0)
    tNFe.sCEPPrest = String(STRING_RPS_CEP, 0)
    tNFe.sEmailPrest = String(STRING_RPS_EMAIL, 0)
    tNFe.sSituacaoNF = String(STRING_RPS_SITUACAO, 0)
    tNFe.sNumGuia = String(STRING_MAXIMO, 0)
    tNFe.sISSRetido = String(STRING_NFE_ISSRETIDO, 0)
    tNFe.sCGCTom = String(STRING_RPS_CGC, 0)
    tNFe.sInscricaoMunicipalTom = String(STRING_RPS_INSCMUNI, 0)
    tNFe.sInscricaoEstadualTom = String(STRING_RPS_INSCEST, 0)
    tNFe.sRazaoSocialTom = String(STRING_RPS_RAZAOSOCIAL, 0)
    tNFe.sTipoEnderecoTom = String(STRING_RPS_ENDTIPO, 0)
    tNFe.sEnderecoTom = String(STRING_RPS_ENDERECO, 0)
    tNFe.sEndNumeroTom = String(STRING_RPS_ENDNUM, 0)
    tNFe.sEndComplementoTom = String(STRING_RPS_ENDCOMP, 0)
    tNFe.sBairroTom = String(STRING_RPS_BAIRRO, 0)
    tNFe.sCidadeTom = String(STRING_RPS_CIDADE, 0)
    tNFe.sUFTom = String(STRING_RPS_UF, 0)
    tNFe.sCEPTom = String(STRING_RPS_CEP, 0)
    tNFe.sEmailTom = String(STRING_RPS_EMAIL, 0)
    tNFe.sDiscriminacao = String(STRING_RPS_DISCRIMINACAO, 0)

    'Le a tabelaNFe
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumIntDocNF, NumNFe, Data, Hora, CodVerificacao, " & _
                "TipoRPS, SerieRPS, NumeroRPS, DataEmissaoRPS, InscricaoMunicialPrest, TipoCGCPrest, CGCPrest, " & _
                "RazaoSocialPrest, TipoEnderecoPrest, EnderecoPrest, EndNumeroPrest, EndComplementoPrest, BairroPrest, CidadePrest, " & _
                "UFPrest, CEPPrest, EmailPrest, OPTSimples, SituacaoNF, DataCancelamento, NumGuia, " & _
                "DataQuitacaoGuia, ValorServicos, ValorDeducoes, CodServico, Aliquota, ValorISS, ValorCredito, " & _
                "ISSRetido, TipoCGCTom, CGCTom, InscricaoMunicipalTom, InscricaoEstadualTom, RazaoSocialTom, TipoEnderecoTom, " & _
                "EnderecoTom, EndNumeroTom, EndComplementoTom, BairroTom, CidadeTom, UFTom, CEPTom, " & _
                "EmailTom, Discriminacao, FilialEmpresa FROM NFe WHERE SerieRPS= ?  AND NumeroRPS= ?  AND DataEmissaoRPS BETWEEN ? AND ? ", _
                tNFe.lNumIntDoc, tNFe.lNumIntDocNF, tNFe.lNumNFe, tNFe.dtData, _
                tNFe.dHora, tNFe.sCodVerificacao, tNFe.sTipoRPS, tNFe.sSerieRPS, tNFe.lNumeroRPS, _
                tNFe.dtDataEmissaoRPS, tNFe.sInscricaoMunicialPrest, tNFe.iTipoCGCPrest, tNFe.sCGCPrest, tNFe.sRazaoSocialPrest, _
                tNFe.sTipoEnderecoPrest, tNFe.sEnderecoPrest, tNFe.sEndNumeroPrest, tNFe.sEndComplementoPrest, tNFe.sBairroPrest, _
                tNFe.sCidadePrest, tNFe.sUFPrest, tNFe.sCEPPrest, tNFe.sEmailPrest, tNFe.iOPTSimples, _
                tNFe.sSituacaoNF, tNFe.dtDataCancelamento, tNFe.sNumGuia, tNFe.dtDataQuitacaoGuia, tNFe.dValorServicos, _
                tNFe.dValorDeducoes, tNFe.lCodServico, tNFe.dAliquota, tNFe.dValorISS, tNFe.dValorCredito, _
                tNFe.sISSRetido, tNFe.iTipoCGCTom, tNFe.sCGCTom, tNFe.sInscricaoMunicipalTom, tNFe.sInscricaoEstadualTom, _
                tNFe.sRazaoSocialTom, tNFe.sTipoEnderecoTom, tNFe.sEnderecoTom, tNFe.sEndNumeroTom, tNFe.sEndComplementoTom, _
                tNFe.sBairroTom, tNFe.sCidadeTom, tNFe.sUFTom, tNFe.sCEPTom, tNFe.sEmailTom, _
                tNFe.sDiscriminacao, tNFe.iFilialEmpresa, _
                objNFe.sSerieRPS, objNFe.lNumeroRPS, objNFe.dtDataEmissaoRPS - 14, objNFe.dtDataEmissaoRPS + 14)
    If lErro <> AD_SQL_SUCESSO Then gError 192517

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192518

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objNFe.lNumIntDoc = tNFe.lNumIntDoc
    objNFe.lNumIntDocNF = tNFe.lNumIntDocNF
    objNFe.lNumNFe = tNFe.lNumNFe
    objNFe.dtData = tNFe.dtData
    objNFe.dHora = tNFe.dHora
    objNFe.sCodVerificacao = tNFe.sCodVerificacao
    objNFe.sTipoRPS = tNFe.sTipoRPS
    objNFe.sSerieRPS = tNFe.sSerieRPS
    objNFe.lNumeroRPS = tNFe.lNumeroRPS
    objNFe.dtDataEmissaoRPS = tNFe.dtDataEmissaoRPS
    objNFe.sInscricaoMunicialPrest = tNFe.sInscricaoMunicialPrest
    objNFe.iTipoCGCPrest = tNFe.iTipoCGCPrest
    objNFe.sCGCPrest = tNFe.sCGCPrest
    objNFe.sRazaoSocialPrest = tNFe.sRazaoSocialPrest
    objNFe.sTipoEnderecoPrest = tNFe.sTipoEnderecoPrest
    objNFe.sEnderecoPrest = tNFe.sEnderecoPrest
    objNFe.sEndNumeroPrest = tNFe.sEndNumeroPrest
    objNFe.sEndComplementoPrest = tNFe.sEndComplementoPrest
    objNFe.sBairroPrest = tNFe.sBairroPrest
    objNFe.sCidadePrest = tNFe.sCidadePrest
    objNFe.sUFPrest = tNFe.sUFPrest
    objNFe.sCEPPrest = tNFe.sCEPPrest
    objNFe.sEmailPrest = tNFe.sEmailPrest
    objNFe.iOPTSimples = tNFe.iOPTSimples
    objNFe.sSituacaoNF = tNFe.sSituacaoNF
    objNFe.dtDataCancelamento = tNFe.dtDataCancelamento
    objNFe.sNumGuia = tNFe.sNumGuia
    objNFe.dtDataQuitacaoGuia = tNFe.dtDataQuitacaoGuia
    objNFe.dValorServicos = tNFe.dValorServicos
    objNFe.dValorDeducoes = tNFe.dValorDeducoes
    objNFe.lCodServico = tNFe.lCodServico
    objNFe.dAliquota = tNFe.dAliquota
    objNFe.dValorISS = tNFe.dValorISS
    objNFe.dValorCredito = tNFe.dValorCredito
    objNFe.sISSRetido = tNFe.sISSRetido
    objNFe.iTipoCGCTom = tNFe.iTipoCGCTom
    objNFe.sCGCTom = tNFe.sCGCTom
    objNFe.sInscricaoMunicipalTom = tNFe.sInscricaoMunicipalTom
    objNFe.sInscricaoEstadualTom = tNFe.sInscricaoEstadualTom
    objNFe.sRazaoSocialTom = tNFe.sRazaoSocialTom
    objNFe.sTipoEnderecoTom = tNFe.sTipoEnderecoTom
    objNFe.sEnderecoTom = tNFe.sEnderecoTom
    objNFe.sEndNumeroTom = tNFe.sEndNumeroTom
    objNFe.sEndComplementoTom = tNFe.sEndComplementoTom
    objNFe.sBairroTom = tNFe.sBairroTom
    objNFe.sCidadeTom = tNFe.sCidadeTom
    objNFe.sUFTom = tNFe.sUFTom
    objNFe.sCEPTom = tNFe.sCEPTom
    objNFe.sEmailTom = tNFe.sEmailTom
    objNFe.sDiscriminacao = tNFe.sDiscriminacao
    objNFe.iFilialEmpresa = tNFe.iFilialEmpresa

    'Fecha Comando
    Call Comando_Fechar(lComando)

    NFe_Le = SUCESSO

    Exit Function

Erro_NFe_Le:

    NFe_Le = gErr

    Select Case gErr

        Case 192516
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192517, 192518
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFE", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192519)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RPS_Preenche_CabPadrao(ByVal objRPSCab As ClassRPSCab) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataInicio As Date
Dim dtDataFim As Date
Dim objFATConfig As New ClassFATConfig

On Error GoTo Erro_RPS_Preenche_CabPadrao

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192658
    Next

    'Le a tabelaRPS
    lErro = Comando_Executar(alComando(1), "SELECT MIN(DataEmissao), MAX(DataEmissao) FROM RPS WHERE FilialEmpresa = ? AND Enviado = ? ", dtDataInicio, dtDataFim, objRPSCab.iFilialEmpresa, DESMARCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 192659

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192660
    
    If lErro <> AD_SQL_SEM_DADOS Then
        objRPSCab.dtDataInicio = dtDataInicio
        objRPSCab.dtDataFim = dtDataFim
    Else
        objRPSCab.dtDataInicio = DATA_NULA
        objRPSCab.dtDataFim = DATA_NULA
    End If
    
    objFATConfig.iFilialEmpresa = EMPRESA_TODA
    objFATConfig.sCodigo = FATCFG_DIR_GERACAO_RPS
    
    lErro = FATConfig_Le_Batch(objFATConfig, alComando(2))
    If lErro <> SUCESSO Then gError 192661
    
    objRPSCab.sNomeArquivo = objFATConfig.sConteudo
   
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RPS_Preenche_CabPadrao = SUCESSO

    Exit Function

Erro_RPS_Preenche_CabPadrao:

    RPS_Preenche_CabPadrao = gErr

    Select Case gErr

        Case 192658
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192659, 192660
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case 192661

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192662)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Cliente_Le_Customizado(ByVal objCliente As ClassCliente) As Long
    Cliente_Le_Customizado = SUCESSO
End Function

Function ItensDeMedicaoCobranca_Le(ByVal objItensMedCtr As ClassItensMedCtr, ByVal colItensMedCtr As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim tItensMedCtr As typeItensDeMedicaoContrato
Dim objItensMedCtr1 As ClassItensMedCtr
Dim objItemContrato As New ClassItensDeContrato

On Error GoTo Erro_ItensDeMedicaoCobranca_Le

    objItemContrato.lNumIntDoc = objItensMedCtr.lNumIntItensContrato
    
    'Le os itens de contrato
    lErro = CF("ItensDeContrato_Le3", objItemContrato)
    If lErro <> SUCESSO And lErro <> 129266 Then gError 193847

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 193838

    lErro = Comando_Executar(lComando, "SELECT ItensDeMedicaoCobranca.Medicao, ItensDeMedicaoCobranca.DataUltCobranca, ItensDeMedicaoCobranca.DataRefIni, ItensDeMedicaoCobranca.DataRefFim, ItensDeMedicaoContrato.VlrCobrar, ItensDeMedicaoContrato.Quantidade FROM ItensDeMedicaoCobranca, ItensDeMedicaoContrato WHERE ItensDeMedicaoCobranca.NumIntItemNFiscal = ? AND ItensDeMedicaoCobranca.NumIntItensContrato = ? AND ItensDeMedicaoCobranca.NumIntItensContrato = ItensDeMedicaoContrato.NumIntItensContrato AND ItensDeMedicaoCobranca.Medicao = ItensDeMedicaoContrato.Medicao", _
                                    tItensMedCtr.lMedicao, tItensMedCtr.dtDataCobranca, tItensMedCtr.dtDataRefIni, tItensMedCtr.dtDataRefFim, tItensMedCtr.dVlrCobrar, tItensMedCtr.dQuantidade, objItensMedCtr.lNumIntItemNFiscal, objItensMedCtr.lNumIntItensContrato)
    If lErro <> AD_SQL_SUCESSO Then gError 193839
    
    'Busca item
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 193840
       
    Do While lErro = AD_SQL_SUCESSO
        
        Set objItensMedCtr1 = New ClassItensMedCtr
            
        objItensMedCtr1.lMedicao = tItensMedCtr.lMedicao
        objItensMedCtr1.dtDataCobranca = tItensMedCtr.dtDataCobranca
        objItensMedCtr1.dtDataRefIni = tItensMedCtr.dtDataRefIni
        objItensMedCtr1.dtDataRefFim = tItensMedCtr.dtDataRefFim
        objItensMedCtr1.dVlrCobrar = tItensMedCtr.dVlrCobrar
        objItensMedCtr1.dQuantidade = tItensMedCtr.dQuantidade
       
        Set objItensMedCtr1.objItensDeContrato = objItemContrato
       
        colItensMedCtr.Add objItensMedCtr1
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 193841
        
    Loop
       
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeMedicaoCobranca_Le = SUCESSO

    Exit Function

Erro_ItensDeMedicaoCobranca_Le:

    ItensDeMedicaoCobranca_Le = gErr

    Select Case gErr

        Case 193838
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 193839, 193840, 193841
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCOBRANCA", gErr, objItensMedCtr.lNumIntItemNFiscal, objItensMedCtr.lNumIntItensContrato)

        Case 193847

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 193842)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function Cliente_Obtem_NomeBrowse(sNomeBrowse As String) As Long
    Cliente_Obtem_NomeBrowse = SUCESSO
End Function


Public Function Endereco_Le_Customizado(ByVal objEndereco As ClassEndereco) As Long
    Endereco_Le_Customizado = SUCESSO
End Function

Public Function Endereco_Trata_Customizacao(ByVal objEndereco As ClassEndereco) As Long
    Endereco_Trata_Customizacao = SUCESSO
End Function

Function ItensDeContrato_Lock_Shared(ByVal objItensContrato As ClassItensDeContrato) As Long
'Lock o Item de Contrato Pelo Numero Interno

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDocAux As Long
Dim dQuantidade As Double
Dim sUM As String

On Error GoTo Erro_ItensDeContrato_Lock_Shared

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 195666

    sUM = String(STRING_ITENSDECONTRATO_UM, 0)

    'Le os itens de contrato do BD
    lErro = Comando_ExecutarLockado(lComando, "SELECT Quantidade, UM FROM ItensDeContrato WHERE NumIntDoc = ? ", _
                                             dQuantidade, sUM, objItensContrato.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 195667

    'Busca o primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195668
    
    If lErro <> SUCESSO Then gError 195669
        
    'Efetua o lock do contrato
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 195670
        
    objItensContrato.dQuantidade = dQuantidade
    objItensContrato.sUM = sUM
        
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContrato_Lock_Shared = SUCESSO

    Exit Function

Erro_ItensDeContrato_Lock_Shared:

    ItensDeContrato_Lock_Shared = gErr

    Select Case gErr

        Case 195666
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 195667, 195668
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
            
        Case 195669
        
        Case 195670
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITENSDECONTRATO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 195671)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Calcula_Mnemonico_ComissoesCust(ByVal objMnemonicoComissCalcAux As ClassMnemonicoComissCalcAux, ByVal objMnemonicoValor As ClassMnemonicoValor) As Long
    Calcula_Mnemonico_ComissoesCust = MNEMONICOCOMISSOES_NAO_ENCONTRADO
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function MapeamentoBloqGen_Le(ByVal objMapeamentoBloqGen As ClassMapeamentoBloqGen) As Long

Dim lErro As Long
Dim lComando As Long
Dim tMapeamentoBloqGen As typeMapeamentoBloqGen

On Error GoTo Erro_MapeamentoBloqGen_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198311

    'Alocação de espaço no buffer
    tMapeamentoBloqGen.sNomeTelaEditaDocBloq = String(STRING_MAPBLOQGEN_NOMETELAEDITADOCBLOQ, 0)
    tMapeamentoBloqGen.sNomeClasseDocBloq = String(STRING_MAPBLOQGEN_NOMECLASSEDOCBLOQ, 0)
    tMapeamentoBloqGen.sClasseNomeCampoChave = String(STRING_MAPBLOQGEN_CLASSENOMECAMPOCHAVE, 0)
    tMapeamentoBloqGen.sNomeBrowseChave = String(STRING_MAPBLOQGEN_NOMEBROWSECHAVE, 0)
    tMapeamentoBloqGen.sNomeTabelaBloqueios = String(STRING_MAPBLOQGEN_NOMETABELABLOQUEIOS, 0)
    tMapeamentoBloqGen.sNomeTelaTestaPermissao = String(STRING_MAPBLOQGEN_NOMETELATESTAPERMISSAO, 0)
    tMapeamentoBloqGen.sNomeFuncLiberaCust = String(STRING_MAPBLOQGEN_NOMEFUNCLIBERACUST, 0)
    tMapeamentoBloqGen.sProjetoClasseDocBloq = String(STRING_MAPBLOQGEN_PROJETOCLASSEDOCBLOQ, 0)
    tMapeamentoBloqGen.sNomeViewLeBloqueios = String(STRING_MAPBLOQGEN_NOMEVIEWLEBLOQUEIOS, 0)
    tMapeamentoBloqGen.sTabelaNomeCampoChave = String(STRING_MAPBLOQGEN_TABELANOMECAMPOCHAVE, 0)
    tMapeamentoBloqGen.sNomeFuncLeDoc = String(STRING_MAPBLOQGEN_NOMEFUNCLEDOC, 0)
    tMapeamentoBloqGen.sNomeColecaoBloqDoc = String(STRING_MAPBLOQGEN_NOMECOLECAOBLOQDOC, 0)
    tMapeamentoBloqGen.sClasseDocNomeQTD = String(STRING_MAPBLOQGEN_CLASSEDOCNOMEQTD, 0)
    tMapeamentoBloqGen.sClasseDocNomeQTDReservada = String(STRING_MAPBLOQGEN_CLASSEDOCNOMEQTDRESERVADA, 0)
    tMapeamentoBloqGen.sClasseDocNomeUM = String(STRING_MAPBLOQGEN_CLASSEDOCNOMEUM, 0)
    tMapeamentoBloqGen.sClasseDocNomeColItem = String(STRING_MAPBLOQGEN_CLASSEDOCNOMECOLITEM, 0)
    tMapeamentoBloqGen.sClasseDocNomeProduto = String(STRING_MAPBLOQGEN_CLASSEDOCNOMEPRODUTO, 0)
    tMapeamentoBloqGen.sClasseDocNomeValor = String(STRING_MAPBLOQGEN_CLASSEDOCNOMEVALOR, 0)
    tMapeamentoBloqGen.sDescricao = String(STRING_MAPBLOQGEN_DESCRICAO, 0)

    'Le a tabelaMapeamentoBloqGen
    lErro = Comando_Executar(lComando, "SELECT TipoTelaBloqueio, ClassePossuiFilEmp, NomeTelaEditaDocBloq, NomeClasseDocBloq, ClasseNomeCampoChave, NomeBrowseChave, " & _
                "NomeTabelaBloqueios, NomeTelaTestaPermissao, NomeFuncLiberaCust, ProjetoClasseDocBloq, NomeViewLeBloqueios, TabelaNomeCampoChave,TabelaBloqPossuiTipoTela, NomeFuncLeDoc, NomeColecaoBloqDoc, ClasseDocNomeQTD, ClasseDocNomeQTDReservada, ClasseDocNomeUM, ClasseDocNomeColItem , ClasseDocQTDNoItem, ClasseDocNomeProduto, ClasseDocNomeValor, Descricao FROM MapeamentoBloqGen WHERE TipoTelaBloqueio= ? ", _
                tMapeamentoBloqGen.iTipoTelaBloqueio, tMapeamentoBloqGen.iClassePossuiFilEmp, tMapeamentoBloqGen.sNomeTelaEditaDocBloq, tMapeamentoBloqGen.sNomeClasseDocBloq, _
                tMapeamentoBloqGen.sClasseNomeCampoChave, tMapeamentoBloqGen.sNomeBrowseChave, tMapeamentoBloqGen.sNomeTabelaBloqueios, tMapeamentoBloqGen.sNomeTelaTestaPermissao, tMapeamentoBloqGen.sNomeFuncLiberaCust, _
                tMapeamentoBloqGen.sProjetoClasseDocBloq, tMapeamentoBloqGen.sNomeViewLeBloqueios, tMapeamentoBloqGen.sTabelaNomeCampoChave, tMapeamentoBloqGen.iTabelaBloqPossuiTipoTela, tMapeamentoBloqGen.sNomeFuncLeDoc, tMapeamentoBloqGen.sNomeColecaoBloqDoc, tMapeamentoBloqGen.sClasseDocNomeQTD, tMapeamentoBloqGen.sClasseDocNomeQTDReservada, tMapeamentoBloqGen.sClasseDocNomeUM, tMapeamentoBloqGen.sClasseDocNomeColItem, tMapeamentoBloqGen.iClasseDocQTDNoItem, tMapeamentoBloqGen.sClasseDocNomeProduto, tMapeamentoBloqGen.sClasseDocNomeValor, tMapeamentoBloqGen.sDescricao, _
                objMapeamentoBloqGen.iTipoTelaBloqueio)
    If lErro <> AD_SQL_SUCESSO Then gError 198312

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198313

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError 198314

    objMapeamentoBloqGen.iTipoTelaBloqueio = tMapeamentoBloqGen.iTipoTelaBloqueio
    objMapeamentoBloqGen.iClassePossuiFilEmp = tMapeamentoBloqGen.iClassePossuiFilEmp
    objMapeamentoBloqGen.sNomeTelaEditaDocBloq = tMapeamentoBloqGen.sNomeTelaEditaDocBloq
    objMapeamentoBloqGen.sNomeClasseDocBloq = tMapeamentoBloqGen.sNomeClasseDocBloq
    objMapeamentoBloqGen.sClasseNomeCampoChave = tMapeamentoBloqGen.sClasseNomeCampoChave
    objMapeamentoBloqGen.sNomeBrowseChave = tMapeamentoBloqGen.sNomeBrowseChave
    objMapeamentoBloqGen.sNomeTabelaBloqueios = tMapeamentoBloqGen.sNomeTabelaBloqueios
    objMapeamentoBloqGen.sNomeTelaTestaPermissao = tMapeamentoBloqGen.sNomeTelaTestaPermissao
    objMapeamentoBloqGen.sNomeFuncLiberaCust = tMapeamentoBloqGen.sNomeFuncLiberaCust
    objMapeamentoBloqGen.sProjetoClasseDocBloq = tMapeamentoBloqGen.sProjetoClasseDocBloq
    objMapeamentoBloqGen.sNomeViewLeBloqueios = tMapeamentoBloqGen.sNomeViewLeBloqueios
    objMapeamentoBloqGen.sTabelaNomeCampoChave = tMapeamentoBloqGen.sTabelaNomeCampoChave
    objMapeamentoBloqGen.iTabelaBloqPossuiTipoTela = tMapeamentoBloqGen.iTabelaBloqPossuiTipoTela
    objMapeamentoBloqGen.sNomeFuncLeDoc = tMapeamentoBloqGen.sNomeFuncLeDoc
    objMapeamentoBloqGen.sNomeColecaoBloqDoc = tMapeamentoBloqGen.sNomeColecaoBloqDoc
    objMapeamentoBloqGen.sClasseDocNomeQTD = tMapeamentoBloqGen.sClasseDocNomeQTD
    objMapeamentoBloqGen.sClasseDocNomeQTDReservada = tMapeamentoBloqGen.sClasseDocNomeQTDReservada
    objMapeamentoBloqGen.sClasseDocNomeUM = tMapeamentoBloqGen.sClasseDocNomeUM
    objMapeamentoBloqGen.sClasseDocNomeColItem = tMapeamentoBloqGen.sClasseDocNomeColItem
    objMapeamentoBloqGen.iClasseDocQTDNoItem = tMapeamentoBloqGen.iClasseDocQTDNoItem
    objMapeamentoBloqGen.sClasseDocNomeProduto = tMapeamentoBloqGen.sClasseDocNomeProduto
    objMapeamentoBloqGen.sClasseDocNomeValor = tMapeamentoBloqGen.sClasseDocNomeValor
    objMapeamentoBloqGen.sDescricao = tMapeamentoBloqGen.sDescricao

    'Fecha Comando
    Call Comando_Fechar(lComando)

    MapeamentoBloqGen_Le = SUCESSO

    Exit Function

Erro_MapeamentoBloqGen_Le:

    MapeamentoBloqGen_Le = gErr

    Select Case gErr

        Case 198311
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198312, 198313
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPEAMENTOBLOQGEN", gErr)

        Case 198314
            Call Rotina_Erro(vbOKOnly, "ERRO_MAPEAMENTOBLOQGEN_NAO_CADASTRADO", gErr, objMapeamentoBloqGen.iTipoTelaBloqueio)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198314)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function TiposDeBloqueioGen_Le(ByVal objTiposDeBloqueioGen As ClassTiposDeBloqueioGen) As Long

Dim lErro As Long
Dim lComando As Long
Dim tTiposDeBloqueioGen As typeTiposDeBloqueioGen

On Error GoTo Erro_TiposDeBloqueioGen_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198357

    'Alocação de espaço no buffer
    tTiposDeBloqueioGen.sNomeReduzido = String(STRING_TIPOBLOQGEN_NOMEREDUZIDO, 0)
    tTiposDeBloqueioGen.sDescricao = String(STRING_TIPOBLOQGEN_DESCRICAO, 0)
    tTiposDeBloqueioGen.sNomeFuncTrataTipo = String(STRING_TIPOBLOQGEN_NOMEFUNCTRATATIPO, 0)
    tTiposDeBloqueioGen.sNomeFuncGeraTipo = String(STRING_TIPOBLOQGEN_NOMEFUNCGERATIPO, 0)
    tTiposDeBloqueioGen.sNomeFuncTrataGravaReserva = String(STRING_TIPOBLOQGEN_NOMEFUNCTRATAGRAVARESERVA, 0)

    'Le a tabelaTiposDeBloqueioGen
    lErro = Comando_Executar(lComando, "SELECT TipoTelaBloqueio, Codigo, NomeReduzido, Descricao, NomeFuncTrataTipo, NaoApareceTelaLib, NomeFuncGeraTipo, TestaValorAlteracao, AlteracaoForcaInclusao, NomeFuncTrataGravaReserva, BloqueioTotal,BloqueioReserva, Interno FROM TiposDeBloqueioGen WHERE TipoTelaBloqueio= ?  AND Codigo= ? ", _
                tTiposDeBloqueioGen.iTipoTelaBloqueio, tTiposDeBloqueioGen.iCodigo, tTiposDeBloqueioGen.sNomeReduzido, tTiposDeBloqueioGen.sDescricao, tTiposDeBloqueioGen.sNomeFuncTrataTipo, tTiposDeBloqueioGen.iNaoApareceTelaLib, tTiposDeBloqueioGen.sNomeFuncGeraTipo, tTiposDeBloqueioGen.iTestaValorAlteracao, tTiposDeBloqueioGen.iAlteracaoForcaInclusao, tTiposDeBloqueioGen.sNomeFuncTrataGravaReserva, tTiposDeBloqueioGen.iBloqueioTotal, tTiposDeBloqueioGen.iBloqueioReserva, tTiposDeBloqueioGen.iInterno, _
                objTiposDeBloqueioGen.iTipoTelaBloqueio, objTiposDeBloqueioGen.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 198358

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198359

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objTiposDeBloqueioGen.iTipoTelaBloqueio = tTiposDeBloqueioGen.iTipoTelaBloqueio
    objTiposDeBloqueioGen.iCodigo = tTiposDeBloqueioGen.iCodigo
    objTiposDeBloqueioGen.sNomeReduzido = tTiposDeBloqueioGen.sNomeReduzido
    objTiposDeBloqueioGen.sDescricao = tTiposDeBloqueioGen.sDescricao
    objTiposDeBloqueioGen.sNomeFuncTrataTipo = tTiposDeBloqueioGen.sNomeFuncTrataTipo
    objTiposDeBloqueioGen.iNaoApareceTelaLib = tTiposDeBloqueioGen.iNaoApareceTelaLib
    objTiposDeBloqueioGen.sNomeFuncGeraTipo = tTiposDeBloqueioGen.sNomeFuncGeraTipo
    objTiposDeBloqueioGen.iTestaValorAlteracao = tTiposDeBloqueioGen.iTestaValorAlteracao
    objTiposDeBloqueioGen.iAlteracaoForcaInclusao = tTiposDeBloqueioGen.iAlteracaoForcaInclusao
    objTiposDeBloqueioGen.sNomeFuncTrataGravaReserva = tTiposDeBloqueioGen.sNomeFuncTrataGravaReserva
    objTiposDeBloqueioGen.iBloqueioTotal = tTiposDeBloqueioGen.iBloqueioTotal
    objTiposDeBloqueioGen.iBloqueioReserva = tTiposDeBloqueioGen.iBloqueioReserva
    objTiposDeBloqueioGen.iInterno = tTiposDeBloqueioGen.iInterno
        
    'Fecha Comando
    Call Comando_Fechar(lComando)

    TiposDeBloqueioGen_Le = SUCESSO

    Exit Function

Erro_TiposDeBloqueioGen_Le:

    TiposDeBloqueioGen_Le = gErr

    Select Case gErr

        Case 198357
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198358, 198359
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEBLOQUEIOGEN", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198360)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function TiposDeBloqueioGen_Le_TipoTela(ByVal iTipoTela As Integer, ByVal colTiposDeBloqueioGen As Collection, Optional ByVal bSoBloqReserva As Boolean = False) As Long

Dim lErro As Long
Dim lComando As Long
Dim tTiposDeBloqueioGen As typeTiposDeBloqueioGen
Dim objTiposDeBloqueioGen As ClassTiposDeBloqueioGen
Dim sSQL As String

On Error GoTo Erro_TiposDeBloqueioGen_Le_TipoTela

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198352

    'Alocação de espaço no buffer
    tTiposDeBloqueioGen.sNomeReduzido = String(STRING_TIPOBLOQGEN_NOMEREDUZIDO, 0)
    tTiposDeBloqueioGen.sDescricao = String(STRING_TIPOBLOQGEN_DESCRICAO, 0)
    tTiposDeBloqueioGen.sNomeFuncTrataTipo = String(STRING_TIPOBLOQGEN_NOMEFUNCTRATATIPO, 0)
    tTiposDeBloqueioGen.sNomeFuncGeraTipo = String(STRING_TIPOBLOQGEN_NOMEFUNCGERATIPO, 0)
    tTiposDeBloqueioGen.sNomeFuncTrataGravaReserva = String(STRING_TIPOBLOQGEN_NOMEFUNCTRATAGRAVARESERVA, 0)

    sSQL = "SELECT TipoTelaBloqueio, Codigo, NomeReduzido, Descricao, NomeFuncTrataTipo, NaoApareceTelaLib, NomeFuncGeraTipo, TestaValorAlteracao, AlteracaoForcaInclusao, NomeFuncTrataGravaReserva, BloqueioTotal, BloqueioReserva, Interno FROM TiposDeBloqueioGen WHERE TipoTelaBloqueio = ? "

    If bSoBloqReserva Then
        sSQL = sSQL & " AND BloqueioTotal = 0 AND BloqueioReserva = 1 "
    End If

    'Le a tabelaTiposDeBloqueioGen
    lErro = Comando_Executar(lComando, sSQL, tTiposDeBloqueioGen.iTipoTelaBloqueio, tTiposDeBloqueioGen.iCodigo, tTiposDeBloqueioGen.sNomeReduzido, tTiposDeBloqueioGen.sDescricao, tTiposDeBloqueioGen.sNomeFuncTrataTipo, tTiposDeBloqueioGen.iNaoApareceTelaLib, tTiposDeBloqueioGen.sNomeFuncGeraTipo, tTiposDeBloqueioGen.iTestaValorAlteracao, tTiposDeBloqueioGen.iAlteracaoForcaInclusao, tTiposDeBloqueioGen.sNomeFuncTrataGravaReserva, tTiposDeBloqueioGen.iBloqueioTotal, tTiposDeBloqueioGen.iBloqueioReserva, tTiposDeBloqueioGen.iInterno, iTipoTela)
    If lErro <> AD_SQL_SUCESSO Then gError 198353

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198354

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objTiposDeBloqueioGen = New ClassTiposDeBloqueioGen

        objTiposDeBloqueioGen.iTipoTelaBloqueio = tTiposDeBloqueioGen.iTipoTelaBloqueio
        objTiposDeBloqueioGen.iCodigo = tTiposDeBloqueioGen.iCodigo
        objTiposDeBloqueioGen.sNomeReduzido = tTiposDeBloqueioGen.sNomeReduzido
        objTiposDeBloqueioGen.sDescricao = tTiposDeBloqueioGen.sDescricao
        objTiposDeBloqueioGen.sNomeFuncTrataTipo = tTiposDeBloqueioGen.sNomeFuncTrataTipo
        objTiposDeBloqueioGen.iNaoApareceTelaLib = tTiposDeBloqueioGen.iNaoApareceTelaLib
        objTiposDeBloqueioGen.sNomeFuncGeraTipo = tTiposDeBloqueioGen.sNomeFuncGeraTipo
        objTiposDeBloqueioGen.iTestaValorAlteracao = tTiposDeBloqueioGen.iTestaValorAlteracao
        objTiposDeBloqueioGen.iAlteracaoForcaInclusao = tTiposDeBloqueioGen.iAlteracaoForcaInclusao
        objTiposDeBloqueioGen.sNomeFuncTrataGravaReserva = tTiposDeBloqueioGen.sNomeFuncTrataGravaReserva
        objTiposDeBloqueioGen.iBloqueioTotal = tTiposDeBloqueioGen.iBloqueioTotal
        objTiposDeBloqueioGen.iBloqueioReserva = tTiposDeBloqueioGen.iBloqueioReserva
        objTiposDeBloqueioGen.iInterno = tTiposDeBloqueioGen.iInterno
        
        colTiposDeBloqueioGen.Add objTiposDeBloqueioGen
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198355

    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    TiposDeBloqueioGen_Le_TipoTela = SUCESSO

    Exit Function

Erro_TiposDeBloqueioGen_Le_TipoTela:

    TiposDeBloqueioGen_Le_TipoTela = gErr

    Select Case gErr

        Case 198352
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198353, 198354, 198355
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEBLOQUEIOGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198356)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LiberacaoDeBloqueiosGen_ObterBloqueios(ByVal objMapBloqGen As ClassMapeamentoBloqGen, ByVal objLibBloqGen As ClassLibBloqGen, ByVal colTiposBloqueio As Collection) As Long
'Preenche colBloqueioLiberacaoInfo em objLibBloqGen

Dim lErro As Long
Dim sSelect As String
Dim lComando As Long
Dim sCodUsuario As String
Dim sNomeRedCli As String
Dim sNomeTipoBloqueio As String
Dim sObservacao As String
Dim iFilialEmpresa As Integer
Dim lCodigo As Long
Dim iSequencial As Integer
Dim dtData As Date
Dim iTipoDeBloqueio As Integer
Dim dtDataBloq As Date
Dim dtDataDoc As Date
Dim dValorTotalDoc As Double
Dim dtDataNula As Date

On Error GoTo Erro_LiberacaoDeBloqueiosGen_ObterBloqueios

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198316

    'Montar SELECT dinamicamente
    Call LiberacaoDeBloqueiosGen_ObterBloqueios1(objMapBloqGen, objLibBloqGen, sSelect)

    sCodUsuario = String(STRING_SIGLA_USUARIO, 0)
    sNomeRedCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    sNomeTipoBloqueio = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    sObservacao = String(STRING_BLOQUEIOSPV_OBSERVACAO, 0)
    dtDataNula = DATA_NULA
    
    'Preparar parte fixa do SELECT
    lErro = LiberacaoDeBloqueiosGen_ObterBloqueios2(lComando, sSelect, iFilialEmpresa, lCodigo, iSequencial, sCodUsuario, sObservacao, dtDataBloq, iTipoDeBloqueio, dtDataDoc, dValorTotalDoc, sNomeRedCli, sNomeTipoBloqueio, dtDataNula)
    If lErro <> SUCESSO Then gError 198317

    'Complementa a passagem dos parâmetros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao dos bloqueios
    lErro = LiberacaoDeBloqueiosGen_ObterBloqueios3(lComando, objLibBloqGen)
    If lErro <> SUCESSO Then gError 198318

    'Processar os registros lidos
    lErro = LiberacaoDeBloqueiosGen_ObterBloqueios4(lComando, objLibBloqGen, iFilialEmpresa, lCodigo, iSequencial, sCodUsuario, sObservacao, dtDataBloq, iTipoDeBloqueio, dtDataDoc, dValorTotalDoc, sNomeRedCli, sNomeTipoBloqueio, colTiposBloqueio)
    If lErro <> SUCESSO And lErro <> 27120 Then gError 198319

    If lErro = 27120 Then gError 198320
    
    Call Comando_Fechar(lComando)

    LiberacaoDeBloqueiosGen_ObterBloqueios = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueiosGen_ObterBloqueios:

    LiberacaoDeBloqueiosGen_ObterBloqueios = gErr

    Select Case gErr
        
        Case 198316
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198317 To 198319
        
        Case 198320

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198321)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub LiberacaoDeBloqueiosGen_ObterBloqueios1(ByVal objMapBloqGen As ClassMapeamentoBloqGen, ByVal objLibBloqGen As ClassLibBloqGen, sSelect As String)
'Montar SELECT dinamicamente

Dim sFields As String, sFrom As String, sWhere As String, sOrderBy As String

    sFields = "FilialEmpresa, Codigo, Sequencial, CodUsuario, Observacao, Data, TipoDeBloqueio, DataEmissaoDoc, ValorDoc, NomeClienteDoc, NomeTipoDeBloqueio"
    sFrom = " FROM " & objMapBloqGen.sNomeViewLeBloqueios
    sWhere = " WHERE DataLib = ? AND TipoTelaBloqueio = " & CStr(objMapBloqGen.iTipoTelaBloqueio) & " "

    If objLibBloqGen.iFilialEmpresa <> EMPRESA_TODA Then
        sWhere = sWhere & " AND FilialEmpresa = ?"
    End If

    If objLibBloqGen.lCodigoDe <> 0 Then
        sWhere = sWhere & " AND Codigo >= ?"
    End If

    If objLibBloqGen.lCodigoAte <> 0 Then
        sWhere = sWhere & " AND Codigo <= ?"
    End If

    If objLibBloqGen.dtBloqueioDe <> DATA_NULA Then
        sWhere = sWhere & " AND Data >= ?"
    End If

    If objLibBloqGen.dtBloqueioAte <> DATA_NULA Then
        sWhere = sWhere & " AND Data <= ?"
    End If

    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function LiberacaoDeBloqueiosGen_ObterBloqueios2(ByVal lComando As Long, ByVal sSelect As String, viFilialEmpresa As Variant, vlCodigo As Variant, viSequencial As Variant, vsCodUsuario As Variant, vsObs As Variant, vdtData As Variant, viTipoDeBloqueio As Variant, vdtDataDoc As Variant, vdValorTotalDoc As Variant, vsNomeCliente As Variant, vsNomeTipoBloqueio As Variant, vdtDataNula As Variant) As Long
'Preparar parte fixa do SELECT

Dim RET As Integer, lErro As Long

On Error GoTo Erro_LiberacaoDeBloqueiosGen_ObterBloqueios2

    RET = Comando_PrepararInt(lComando, sSelect)
    If (RET <> AD_SQL_SUCESSO) Then gError 198322

    RET = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (RET <> AD_SQL_SUCESSO) Then gError 198323

    RET = Comando_BindVarInt(lComando, vlCodigo)
    If (RET <> AD_SQL_SUCESSO) Then gError 198324

    RET = Comando_BindVarInt(lComando, viSequencial)
    If (RET <> AD_SQL_SUCESSO) Then gError 198325

    RET = Comando_BindVarInt(lComando, vsCodUsuario)
    If (RET <> AD_SQL_SUCESSO) Then gError 198326

    RET = Comando_BindVarInt(lComando, vsObs)
    If (RET <> AD_SQL_SUCESSO) Then gError 198327

    RET = Comando_BindVarInt(lComando, vdtData)
    If (RET <> AD_SQL_SUCESSO) Then gError 198328

    RET = Comando_BindVarInt(lComando, viTipoDeBloqueio)
    If (RET <> AD_SQL_SUCESSO) Then gError 198329

    RET = Comando_BindVarInt(lComando, vdtDataDoc)
    If (RET <> AD_SQL_SUCESSO) Then gError 198330

    RET = Comando_BindVarInt(lComando, vdValorTotalDoc)
    If (RET <> AD_SQL_SUCESSO) Then gError 198331

    RET = Comando_BindVarInt(lComando, vsNomeCliente)
    If (RET <> AD_SQL_SUCESSO) Then gError 198332

    RET = Comando_BindVarInt(lComando, vsNomeTipoBloqueio)
    If (RET <> AD_SQL_SUCESSO) Then gError 198333

    RET = Comando_BindVarInt(lComando, vdtDataNula)
    If (RET <> AD_SQL_SUCESSO) Then gError 198334

    LiberacaoDeBloqueiosGen_ObterBloqueios2 = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueiosGen_ObterBloqueios2:

    LiberacaoDeBloqueiosGen_ObterBloqueios2 = gErr

    Select Case gErr

        Case 198322 To 198334
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOS_PV_LIBERACAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198335)

    End Select

    Exit Function

End Function

Private Function LiberacaoDeBloqueiosGen_ObterBloqueios3(ByVal lComando As Long, ByVal objLibBloqGen As ClassLibBloqGen) As Long
'Complementa a passagem dos parametros que variam de acordo com a selecao do usuario
'e executa o SELECT p/obtencao dos bloqueios

Dim lErro As Long
Dim viFilialEmpresa As Variant, vlCodigoDe As Variant, vlCodigoAte As Variant, vdtBloqueioDe As Variant, vdtBloqueioAte As Variant

On Error GoTo Erro_LiberacaoDeBloqueiosGen_ObterBloqueios3

    If (objLibBloqGen.iFilialEmpresa <> EMPRESA_TODA) Then
        viFilialEmpresa = objLibBloqGen.iFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198336
    End If

    If objLibBloqGen.lCodigoDe <> 0 Then
        vlCodigoDe = objLibBloqGen.lCodigoDe
        lErro = Comando_BindVarInt(lComando, vlCodigoDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198337
    End If

    If objLibBloqGen.lCodigoAte <> 0 Then
        vlCodigoAte = objLibBloqGen.lCodigoAte
        lErro = Comando_BindVarInt(lComando, vlCodigoAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198338
    End If

    If objLibBloqGen.dtBloqueioDe <> DATA_NULA Then
        vdtBloqueioDe = objLibBloqGen.lCodigoDe
        lErro = Comando_BindVarInt(lComando, vdtBloqueioDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198339
    End If

    If objLibBloqGen.dtBloqueioAte <> DATA_NULA Then
        vdtBloqueioAte = objLibBloqGen.dtBloqueioAte
        lErro = Comando_BindVarInt(lComando, vdtBloqueioAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198340
    End If

    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 198341

    LiberacaoDeBloqueiosGen_ObterBloqueios3 = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueiosGen_ObterBloqueios3:

    LiberacaoDeBloqueiosGen_ObterBloqueios3 = gErr

    Select Case gErr

        Case 198336 To 198341
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOS_PV_LIBERACAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198342)

    End Select

    Exit Function

End Function

Private Function LiberacaoDeBloqueiosGen_ObterBloqueios4(ByVal lComando As Long, ByVal objLibBloqGen As ClassLibBloqGen, iBloqueiosPVFilialEmpresa As Integer, lCodigo As Long, iSeqBloqueio As Integer, sUsuario As String, sObservacao As String, dtDataBloqueio As Date, iTipoDeBloqueio As Integer, dtData As Date, dValor As Double, sNomeRedCliForn As String, sNomeRedTipoBloq As String, ByVal colTiposBloqueio As Collection) As Long
'Processar os registros lidos

Dim lErro As Long, objBloqLibInfoGen As ClassBloqLibInfoGen, iContador As Integer
Dim iIndice As Integer

On Error GoTo Erro_LiberacaoDeBloqueiosGen_ObterBloqueios4

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198343

    If lErro = AD_SQL_SEM_DADOS Then gError 198344

    iContador = 0
    
    Do While lErro = AD_SQL_SUCESSO

        iContador = iContador + 1
        
        Set objBloqLibInfoGen = New ClassBloqLibInfoGen
        
        For iIndice = 1 To colTiposBloqueio.Count
        
            If colTiposBloqueio.Item(iIndice) = iTipoDeBloqueio Then
        
                objBloqLibInfoGen.iFilialEmpresa = iBloqueiosPVFilialEmpresa
                objBloqLibInfoGen.lCodigo = lCodigo
                objBloqLibInfoGen.iSeqBloqueio = iSeqBloqueio
                objBloqLibInfoGen.sNomeRedCliForn = sNomeRedCliForn
                objBloqLibInfoGen.dtData = dtData
                objBloqLibInfoGen.dValor = dValor
                objBloqLibInfoGen.iTipoDeBloqueio = iTipoDeBloqueio
                objBloqLibInfoGen.sNomeRedTipoBloq = sNomeRedTipoBloq
                objBloqLibInfoGen.sUsuario = sUsuario
                objBloqLibInfoGen.dtDataBloqueio = dtDataBloqueio
                objBloqLibInfoGen.iMarcado = MARCADO
                objBloqLibInfoGen.sObservacao = sObservacao
        
                objLibBloqGen.colBloqueioLiberacaoInfo.Add objBloqLibInfoGen
                
            End If
            
        Next
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198345
            
    Loop

    LiberacaoDeBloqueiosGen_ObterBloqueios4 = SUCESSO

    Exit Function

Erro_LiberacaoDeBloqueiosGen_ObterBloqueios4:

    LiberacaoDeBloqueiosGen_ObterBloqueios4 = gErr

    Select Case gErr

        Case 198343, 198345
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOS_PV_LIBERACAO", gErr)

        Case 198344

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198346)

    End Select

    Exit Function

End Function

Public Function BloqueiosGen_Le(ByVal objMapBloqGen As ClassMapeamentoBloqGen, ByVal objDocBloq As Object) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSelect As String
Dim objBloqueioGen As ClassBloqueioGen
Dim colBloqueios As New Collection
Dim colBloqueiosObj As Variant
Dim tBloqueioGen As typeBloqueioGen
Dim lCodigo As Long

On Error GoTo Erro_BloqueiosGen_Le

    tBloqueioGen.sCodUsuario = String(STRING_USUARIO_CODIGO, 0)
    tBloqueioGen.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    tBloqueioGen.sNomeClienteDoc = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tBloqueioGen.sNomeTipoDeBloqueio = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    tBloqueioGen.sObservacao = String(STRING_BLOQUEIOSPV_OBSERVACAO, 0)
    tBloqueioGen.sResponsavel = String(STRING_BLOQUEIOSPV_RESPONSAVEL, 0)
    tBloqueioGen.sResponsavelLib = String(STRING_BLOQUEIOSPV_RESPONSAVEL, 0)

    sSelect = "SELECT FilialEmpresa, Codigo, Sequencial, CodUsuario, Observacao, Data, TipoDeBloqueio, TipoTelaBloqueio, CodUsuarioLib, ResponsavelLib, DataLib, DataEmissaoDoc, ValorDoc, NomeClienteDoc, ClienteDoc, NomeTipoDeBloqueio, ValorDocAnt FROM " & objMapBloqGen.sNomeViewLeBloqueios
    
    sSelect = sSelect & " WHERE " & objMapBloqGen.sTabelaNomeCampoChave & " = ? "
    
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        sSelect = sSelect & " AND FilialEmpresa = " & CStr(objDocBloq.iFilialEmpresa)
    End If
    
    If objMapBloqGen.iTabelaBloqPossuiTipoTela = MARCADO Then
        sSelect = sSelect & " AND TipoTelaBloqueio = " & CStr(objMapBloqGen.iTipoTelaBloqueio)
    End If
    
    lCodigo = CallByName(objDocBloq, objMapBloqGen.sClasseNomeCampoChave, VbGet)

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198429

    'Le a tabelaMapeamentoBloqGen
    With tBloqueioGen
        lErro = Comando_Executar(lComando, sSelect, .iFilialEmpresa, .lCodigo, .iSequencial, .sCodUsuario, .sObservacao, .dtData, .iTipoDeBloqueio, .iTipoTelaBloqueio, .sCodUsuarioLib, .sResponsavelLib, .dtDataLib, .dtDataEmissaoDoc, .dValorDoc, .sNomeClienteDoc, .lClienteDoc, .sNomeTipoDeBloqueio, .dValorDocAnt, lCodigo)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 198430

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198431

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objBloqueioGen = New ClassBloqueioGen
        
        objBloqueioGen.dtData = tBloqueioGen.dtData
        objBloqueioGen.dtDataLib = tBloqueioGen.dtDataLib
        objBloqueioGen.iFilialEmpresa = tBloqueioGen.iFilialEmpresa
        objBloqueioGen.iSequencial = tBloqueioGen.iSequencial
        objBloqueioGen.iTipoDeBloqueio = tBloqueioGen.iTipoDeBloqueio
        objBloqueioGen.iTipoTelaBloqueio = tBloqueioGen.iTipoTelaBloqueio
        objBloqueioGen.lCodigo = tBloqueioGen.lCodigo
        objBloqueioGen.sCodUsuario = tBloqueioGen.sCodUsuario
        objBloqueioGen.sCodUsuarioLib = tBloqueioGen.sCodUsuarioLib
        objBloqueioGen.sObservacao = tBloqueioGen.sObservacao
        objBloqueioGen.sResponsavel = tBloqueioGen.sResponsavel
        objBloqueioGen.sResponsavelLib = tBloqueioGen.sResponsavelLib
        objBloqueioGen.sNomeClienteDoc = tBloqueioGen.sNomeClienteDoc
        objBloqueioGen.dtDataEmissaoDoc = tBloqueioGen.dtDataEmissaoDoc
        objBloqueioGen.dValorDoc = tBloqueioGen.dValorDoc
        objBloqueioGen.lClienteDoc = tBloqueioGen.lClienteDoc
        objBloqueioGen.sNomeTipoDeBloqueio = tBloqueioGen.sNomeTipoDeBloqueio
        objBloqueioGen.dValorDocAnt = tBloqueioGen.dValorDocAnt
        
        colBloqueios.Add objBloqueioGen
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198432
    
    Loop
        
    Set colBloqueiosObj = CallByName(objDocBloq, objMapBloqGen.sNomeColecaoBloqDoc, VbGet)
    
    Call Collection_Trans_ColecaoDef(colBloqueios, colBloqueiosObj)

    'Fecha Comando
    Call Comando_Fechar(lComando)

    BloqueiosGen_Le = SUCESSO

    Exit Function

Erro_BloqueiosGen_Le:

    BloqueiosGen_Le = gErr

    Select Case gErr

        Case 198429
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198430, 198431, 198432
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198433)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function MapeamentoBloqGen_Le_Todos(ByVal colMapeamentoBloqGen As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim tMapeamentoBloqGen As typeMapeamentoBloqGen
Dim objMapeamentoBloqGen As ClassMapeamentoBloqGen

On Error GoTo Erro_MapeamentoBloqGen_Le_Todos

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198585

    'Alocação de espaço no buffer
    tMapeamentoBloqGen.sDescricao = String(STRING_MAPBLOQGEN_DESCRICAO, 0)

    'Le a tabelaMapeamentoBloqGen
    lErro = Comando_Executar(lComando, "SELECT TipoTelaBloqueio, Descricao FROM MapeamentoBloqGen ORDER BY TipoTelaBloqueio ", _
                tMapeamentoBloqGen.iTipoTelaBloqueio, tMapeamentoBloqGen.sDescricao)
    If lErro <> AD_SQL_SUCESSO Then gError 198586

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198587

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objMapeamentoBloqGen = New ClassMapeamentoBloqGen

        objMapeamentoBloqGen.iTipoTelaBloqueio = tMapeamentoBloqGen.iTipoTelaBloqueio
        objMapeamentoBloqGen.sDescricao = tMapeamentoBloqGen.sDescricao
        
        colMapeamentoBloqGen.Add objMapeamentoBloqGen
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198588
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    MapeamentoBloqGen_Le_Todos = SUCESSO

    Exit Function

Erro_MapeamentoBloqGen_Le_Todos:

    MapeamentoBloqGen_Le_Todos = gErr

    Select Case gErr

        Case 198585
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198586 To 198588
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPEAMENTOBLOQGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198589)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FilialEmpresa_Le_Filtro_Filial2(sFiltro As String, Optional ByVal sNomeTab As String = "") As Long
    FilialEmpresa_Le_Filtro_Filial2 = SUCESSO
End Function

Public Function Carrega_Combo_Texto(ByVal objCombo As Object, ByVal sTabela As String, ByVal iTamanho As Integer, ByVal sCampo As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim sValor As String
Dim sSQL As String

On Error GoTo Erro_Carrega_Combo_Texto

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 190147

    'Alocação de espaço no buffer
    sValor = String(iTamanho, 0)
    
    sSQL = "SELECT DISTINCT " & sCampo & " FROM " & sTabela & " ORDER BY " & sCampo

    'Le a tabelaTRVOcorrencias
    lErro = Comando_Executar(lComando, sSQL, sValor)
    If lErro <> AD_SQL_SUCESSO Then gError 190148

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 190149

    objCombo.Clear

    Do While lErro <> AD_SQL_SEM_DADOS
    
        objCombo.AddItem sValor
  
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 190150
    
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Carrega_Combo_Texto = SUCESSO

    Exit Function

Erro_Carrega_Combo_Texto:

    Carrega_Combo_Texto = gErr

    Select Case gErr

        Case 190147
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 190148 To 190150
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 190151)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function Importa_Dados_Cliente_Arq_Aux(sNomeFunc As String) As Long
    sNomeFunc = "Importa_Dados_Cliente_Arq_Aux1"
    Importa_Dados_Cliente_Arq_Aux = SUCESSO
End Function

Public Function Integracao_Obtem_NomeID_Cust(ByVal sRegistro As String, sNomeArqID As String) As Long
    Integracao_Obtem_NomeID_Cust = SUCESSO
End Function

Public Function Importa_Dados_Cliente_ProcuraCGC(bProcuraPeloCGC As Boolean) As Long
    Importa_Dados_Cliente_ProcuraCGC = SUCESSO
End Function

'Public Function Retornar_ItensNF_Orig(ByVal colItensNF As Collection, ByVal sProduto As String, ByVal dQuantidade As Double, ByVal sUMParam As String, ByVal lCliente As Long, ByVal iFilialCli As Integer, dQuantResto As Double) As Long
'
'Dim lErro As Long
'Dim iIndice As Integer
'Dim alComando(1 To 3) As Long
'Dim dQuantEst As Double
'Dim objProduto As New ClassProduto
'Dim objItemNF As New ClassItemNF
'Dim dQuantDev As Double
'Dim dQuantDevEst As Double
'Dim sUMDev As String
'Dim tItemNF As typeItemNF
'Dim dFator As Double
'
'
'On Error GoTo Erro_Retornar_ItensNF_Orig
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 199031
'    Next
'
'
'    dQuantResto = dQuantidade
'
'    tItemNF.sUnidadeMed = String(STRING_UM_SIGLA, 0)
'    tItemNF.sSerieNF = String(STRING_SERIE, 0)
'
'    lErro = Comando_Executar(alComando(1), "SELECT Serie, NumNotaFiscal,  Item, INF.NumIntDoc, Quantidade, UnidadeMed, PrecoUnitario, PercDesc  FROM NFiscal AS NF, ItensNFiscal AS INF WHERE NF.NumIntDoc = INF.NumIntNF AND " & _
'    "(NF.TipoNFiscal = 12 Or NF.TipoNFiscal = 28) AND NF.Status <> 7 AND INF.Produto = ? AND Cliente = ? AND FilialCli = ? ORDER BY DataEntrada", tItemNF.sSerieNF, tItemNF.lNumNotaFiscal, tItemNF.iItem, tItemNF.lNumIntDoc, tItemNF.dQuantidade, tItemNF.sUnidadeMed, tItemNF.dPrecoUnitario, tItemNF.dPercDesc, sProduto, lCliente, iFilialCli)
'    If lErro <> AD_SQL_SUCESSO Then gError 199034
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199035
'
'    Do While lErro <> AD_SQL_SEM_DADOS And dQuantResto > 0
'
'        objProduto.sCodigo = sProduto
'
'        'ler dados do produto
'        lErro = CF("Produto_Le", objProduto)
'        If lErro <> SUCESSO And lErro <> 28030 Then gError 199036
'
'        'converter qtde a faturar p/UMEstoque do produto
'        lErro = CF("UM_Conversao", objProduto.iClasseUM, tItemNF.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
'        If lErro <> SUCESSO Then gError 199037
'
'        dQuantEst = tItemNF.dQuantidade * dFator
'
'        sUMDev = String(STRING_UM_SIGLA, 0)
'        dQuantDevEst = 0
'        lErro = Comando_Executar(alComando(2), "SELECT Quantidade, UnidadeMed FROM NFiscal AS NF, ItensNFiscal AS INF WHERE NF.NumIntDoc = INF.NumIntNF AND " & _
'        "NF.TipoNFiscal = 44 AND NF.Status <> 7 AND INF.Produto = ? AND INF.NumIntDocOrig = ?", dQuantDev, sUMDev, sProduto, tItemNF.lNumIntDoc)
'        If lErro <> AD_SQL_SUCESSO Then gError 199038
'
'        lErro = Comando_BuscarPrimeiro(alComando(2))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199039
'
'        Do While lErro = AD_SQL_SUCESSO
'
'            'converter qtde a faturar p/UMEstoque do produto
'            lErro = CF("UM_Conversao", objProduto.iClasseUM, sUMDev, objProduto.sSiglaUMEstoque, dFator)
'            If lErro <> SUCESSO Then gError 199040
'
'            dQuantDevEst = dQuantDevEst + (dQuantDev * dFator)
'
'            lErro = Comando_BuscarProximo(alComando(2))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199041
'
'        Loop
'
'        dQuantEst = dQuantEst - dQuantDevEst
'
'        If dQuantEst > 0 Then
'
'            Set objItemNF = New ClassItemNF
'
'            objItemNF.sSerieNFOrig = tItemNF.sSerieNF
'            objItemNF.lNumNFOrig = tItemNF.lNumNotaFiscal
'            objItemNF.iItemNFOrig = tItemNF.iItem
'            objItemNF.sUnidadeMed = objProduto.sSiglaUMEstoque
'            objItemNF.dPrecoUnitario = tItemNF.dPrecoUnitario
'            objItemNF.dPercDesc = tItemNF.dPercDesc
'
'            If dQuantResto - dQuantEst > 0 Then
'
'                objItemNF.dQuantidade = dQuantEst
'
'                colItensNF.Add objItemNF
'
'                dQuantResto = dQuantResto - dQuantEst
'
'            Else
'
'                objItemNF.dQuantidade = dQuantResto
'
'                colItensNF.Add objItemNF
'
'                dQuantResto = 0
'
'            End If
'
'        End If
'
'        lErro = Comando_BuscarProximo(alComando(1))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199042
'
'    Loop
'
'    'Fecha o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Retornar_ItensNF_Orig = SUCESSO
'
'    Exit Function
'
'Erro_Retornar_ItensNF_Orig:
'
'    Retornar_ItensNF_Orig = gErr
'
'    Select Case gErr
'
'        Case 199031
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 199032, 199033, 199036, 199037, 199040
'
'        Case 199034, 199035, 199038, 199039, 199041, 199042
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 199043)
'
'    End Select
'
'    'Fecha o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Public Function Retornar_ItensNF_Orig(ByVal colItensNF As Collection, ByVal sProduto As String, ByVal lCliente As Long, ByVal iFilialCli As Integer, dQuantResto As Double) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim dQuantEst As Double
Dim objProduto As New ClassProduto
Dim objItemNF As New ClassItemNF
Dim dQuantDev As Double
Dim dQuantDevEst As Double
Dim sUMDev As String
Dim tItemNF As typeItemNF
Dim dFator As Double

On Error GoTo Erro_Retornar_ItensNF_Orig

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199031
    Next


    tItemNF.sUnidadeMed = String(STRING_UM_SIGLA, 0)
    tItemNF.sSerieNF = String(STRING_SERIE, 0)

    lErro = Comando_Executar(alComando(1), "SELECT Serie, NumNotaFiscal, Item, QuantResto, UnidadeMed, PrecoUnitario, PercDesc FROM ItemNFResto AS INFR, ItensNFiscal AS INF, NFiscal AS NF WHERE " & _
    " INFR.NumIntItemNF = INF.NumIntDoc AND NF.NumIntDoc = INF.NumIntNF AND INF.Produto = ? AND NF.Status <> 7  AND Cliente = ? AND FilialCli = ? ORDER BY NF.DataEntrada", _
    tItemNF.sSerieNF, tItemNF.lNumNotaFiscal, tItemNF.iItem, tItemNF.dQuantidade, tItemNF.sUnidadeMed, tItemNF.dPrecoUnitario, tItemNF.dPercDesc, sProduto, lCliente, iFilialCli)
    If lErro <> AD_SQL_SUCESSO Then gError 199034

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199035

    Do While lErro <> AD_SQL_SEM_DADOS And dQuantResto > 0
    
        objProduto.sCodigo = sProduto
        
        'ler dados do produto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 199036
        
        'converter qtde a faturar p/UMEstoque do produto
        lErro = CF("UM_Conversao", objProduto.iClasseUM, tItemNF.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then gError 199037
    
        dQuantEst = tItemNF.dQuantidade * dFator
        
        Set objItemNF = New ClassItemNF
        
        objItemNF.sSerieNFOrig = tItemNF.sSerieNF
        objItemNF.lNumNFOrig = tItemNF.lNumNotaFiscal
        objItemNF.iItemNFOrig = tItemNF.iItem
        objItemNF.sUnidadeMed = objProduto.sSiglaUMEstoque
        objItemNF.dPrecoUnitario = tItemNF.dPrecoUnitario
        objItemNF.dPercDesc = tItemNF.dPercDesc
    
        If dQuantResto - dQuantEst >= 0 Then
            
            objItemNF.dQuantidade = dQuantEst
            
            colItensNF.Add objItemNF
            
            dQuantResto = dQuantResto - dQuantEst
                
        Else
        
            objItemNF.dQuantidade = dQuantResto
            
            colItensNF.Add objItemNF
            
            dQuantResto = 0
        
        End If
            
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199042
    
    Loop

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Retornar_ItensNF_Orig = SUCESSO
    
    Exit Function
    
Erro_Retornar_ItensNF_Orig:

    Retornar_ItensNF_Orig = gErr
    
    Select Case gErr
    
        Case 199031
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 199032, 199033, 199036, 199037, 199040
        
        Case 199034, 199035, 199038, 199039, 199041, 199042
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 199043)

    End Select
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function GeracaoNFe_SelecionarItens(ByVal iFilialEmpresa As Integer, ByVal objGeracaoNFe As ClassGeracaoNFe, ByVal colNFe1 As Collection) As Long
'pesquisa no bd os itens candidatos preenchendo colNFe1 a partir das outras informacoes em

Dim lErro As Long, lComando As Long, sSelect As String, iStatusNaoAtendido As Integer
'buffers para receber registros selecionados
Dim lNumIntNF As Long, lNumNotaFiscal As Long, dtDataEmissao As Date, sSigla As String
Dim sSerie As String, lCliente As Long, sClienteNomeReduzido As String, iFilialCli As Integer
Dim lFornecedor As Long, sFornecedorNomeReduzido As String, iFilialForn As Integer
Dim dValorTotal As Double

On Error GoTo Erro_GeracaoNFe_SelecionarItens

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27434

    Call GeracaoNFe_SelecionarItens1(objGeracaoNFe, sSelect)

    sSerie = String(STRING_SERIE, 0)
    sSigla = String(STRING_TIPO_DOC_INFO_SIGLA, 0)
    sClienteNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    sFornecedorNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
        
    'executa a preparacao da parte fixa do SELECT
    lErro = GeracaoNFe_SelecionarItens2(lComando, sSelect, _
    lNumIntNF, sSerie, lNumNotaFiscal, dtDataEmissao, sSigla, lCliente, sClienteNomeReduzido, iFilialCli, _
    lFornecedor, sFornecedorNomeReduzido, iFilialForn, dValorTotal)
    If lErro <> SUCESSO Then Error 27435

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT
    lErro = GeracaoNFe_SelecionarItens3(iFilialEmpresa, lComando, objGeracaoNFe)
    If lErro <> SUCESSO Then Error 27436

    'processa todos os registros retornados pelo SELECT executado acima
    lErro = GeracaoNFe_SelecionarItens4(lComando, objGeracaoNFe, _
        lNumIntNF, sSerie, lNumNotaFiscal, dtDataEmissao, _
        sSigla, lCliente, sClienteNomeReduzido, iFilialCli, lFornecedor, sFornecedorNomeReduzido, iFilialForn, dValorTotal, colNFe1)
    If lErro <> SUCESSO Then Error 27437

    lErro = Comando_Fechar(lComando)

    GeracaoNFe_SelecionarItens = SUCESSO

    Exit Function

Erro_GeracaoNFe_SelecionarItens:

    GeracaoNFe_SelecionarItens = Err

    Select Case Err

        Case 27435, 27436, 27437

        Case 27434
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149640)

    End Select

    lErro = Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub GeracaoNFe_SelecionarItens1(ByVal objGeracaoNFe As ClassGeracaoNFe, sSelect As String)
'auxiliar a GeracaoOP_SelecionarItens
'monta o SELECT para obtencao dos itens dinamicamente.

Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

        sFields = "NFiscal.NumIntDoc, NFiscal.Serie, NFiscal.NumNotaFiscal, NFiscal.DataEmissao, TiposDocInfo.Sigla, NFiscal.Cliente, Clientes.NomeReduzido, NFiscal.FilialCli, "
        sFields = sFields & " NFiscal.Fornecedor, Fornecedores.NomeReduzido, NFiscal.FilialForn, NFiscal.ValorTotal "
    
        sFrom = " FROM NFiscal INNER JOIN TiposDocInfo ON NFiscal.TipoNFiscal = TiposDocInfo.Codigo LEFT OUTER JOIN Clientes ON NFiscal.Cliente = Clientes.Codigo "
        sFrom = sFrom & "LEFT OUTER JOIN Fornecedores ON NFiscal.Fornecedor = Fornecedores.Codigo"

        sWhere = " WHERE NFiscal.NFe = 1 AND NFiscal.FilialEmpresa = ? AND NFiscal.Status <> ? AND (TiposDocInfo.Tipo = 1 Or TiposDocInfo.Tipo = 2)"
        
    If giFilialEmpresa = 51 And left(gsNomeEmpresa, 12) = "Via Amazonas" Then
        sWhere = sWhere & " AND NFiscal.DataEmissao >= {d '2018-01-01'} "
    End If

    If objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_NAO_ENVIADOS Then
        
        sWhere = sWhere & " AND NOT EXISTS (Select * FROM NFeFedLote WHERE NumIntNF = NFiscal.NumIntDoc)"

    ElseIf objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_NAO_ACEITOS Then
    
        sWhere = sWhere & " AND EXISTS (Select * FROM NFeFedLote WHERE NumIntNF = NFiscal.NumIntDoc) "
        sWhere = sWhere & " AND NOT EXISTS (Select * FROM NFeFedProtNfe WHERE NumIntNF = NFiscal.NumIntDoc AND cStat = '100')"
    
    Else
    
        sWhere = sWhere & " AND NOT EXISTS (Select * FROM NFeFedProtNfe WHERE NumIntNF = NFiscal.NumIntDoc AND cStat = '100')"

    End If

    If (Len(Trim(objGeracaoNFe.sSerieDe)) <> 0) Then
       sWhere = sWhere & " AND NFiscal.Serie >= ?"
    End If

    If (Len(Trim(objGeracaoNFe.sSerieAte)) <> 0) Then
       sWhere = sWhere & " AND NFiscal.Serie <= ?"
    End If

    If (objGeracaoNFe.lNFiscalDe <> 0) Then
       sWhere = sWhere & " AND NFiscal.NumNotaFiscal >= ?"
    End If

    If (objGeracaoNFe.lNFiscalAte <> 0) Then
       sWhere = sWhere & " AND NFiscal.NumNotaFiscal <= ?"
    End If

    If (objGeracaoNFe.lClienteDe <> 0) Then
       sWhere = sWhere & " AND NFiscal.Cliente >= ?"
    End If

    If (objGeracaoNFe.lClienteAte <> 0) Then
       sWhere = sWhere & " AND NFiscal.Cliente <= ?"
    End If

    If (objGeracaoNFe.lFornecedorDe <> 0) Then
       sWhere = sWhere & " AND NFiscal.Fornecedor >= ?"
    End If

    If (objGeracaoNFe.lFornecedorAte <> 0) Then
       sWhere = sWhere & " AND NFiscal.Fornecedor <= ?"
    End If

    If (objGeracaoNFe.dtEmissaoDe <> DATA_NULA) Then
       sWhere = sWhere & " AND NFiscal.DataEmissao >= ?"
    End If

    If (objGeracaoNFe.dtEmissaoAte <> DATA_NULA) Then
       sWhere = sWhere & " AND NFiscal.DataEmissao <= ?"
    End If


    sOrderBy = " ORDER BY " & objGeracaoNFe.sOrdenacao

    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function GeracaoNFe_SelecionarItens2(ByVal lComando As Long, ByVal sSelect As String, _
    vNumIntNF As Variant, _
    vSerie As Variant, vNumNotaFiscal As Variant, _
    vDataEmissao As Variant, vSigla As Variant, _
    vCliente As Variant, vCliNomeRed As Variant, _
    vFilialCli As Variant, vFornecedor As Variant, _
    vFornNomeRed As Variant, vFilialForn As Variant, vValorTotal) As Integer

'isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de GeracaoOP_SelecionarItens
Dim RET As Integer, lErro As Long

On Error GoTo Erro_GeracaoNFe_SelecionarItens2

    RET = Comando_PrepararInt(lComando, sSelect)
    If (RET <> AD_SQL_SUCESSO) Then gError 199879

    RET = Comando_BindVarInt(lComando, vNumIntNF)
    If (RET <> AD_SQL_SUCESSO) Then gError 199906

    RET = Comando_BindVarInt(lComando, vSerie)
    If (RET <> AD_SQL_SUCESSO) Then gError 199880

    RET = Comando_BindVarInt(lComando, vNumNotaFiscal)
    If (RET <> AD_SQL_SUCESSO) Then gError 199881

    RET = Comando_BindVarInt(lComando, vDataEmissao)
    If (RET <> AD_SQL_SUCESSO) Then gError 199882

    RET = Comando_BindVarInt(lComando, vSigla)
    If (RET <> AD_SQL_SUCESSO) Then gError 199883

    RET = Comando_BindVarInt(lComando, vCliente)
    If (RET <> AD_SQL_SUCESSO) Then gError 199884

    RET = Comando_BindVarInt(lComando, vCliNomeRed)
    If (RET <> AD_SQL_SUCESSO) Then gError 199885

    RET = Comando_BindVarInt(lComando, vFilialCli)
    If (RET <> AD_SQL_SUCESSO) Then gError 199886

    RET = Comando_BindVarInt(lComando, vFornecedor)
    If (RET <> AD_SQL_SUCESSO) Then gError 199887

    RET = Comando_BindVarInt(lComando, vFornNomeRed)
    If (RET <> AD_SQL_SUCESSO) Then gError 199888

    RET = Comando_BindVarInt(lComando, vFilialForn)
    If (RET <> AD_SQL_SUCESSO) Then gError 199889
    
    RET = Comando_BindVarInt(lComando, vValorTotal)
    If (RET <> AD_SQL_SUCESSO) Then gError 199890
    
    GeracaoNFe_SelecionarItens2 = SUCESSO

    Exit Function

Erro_GeracaoNFe_SelecionarItens2:

    GeracaoNFe_SelecionarItens2 = gErr

    Select Case gErr

        Case 199879 To 199890, 199906
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199891)

    End Select

    Exit Function

End Function

Private Function GeracaoNFe_SelecionarItens3(ByVal iFilialEmpresa As Integer, ByVal lComando As Long, ByVal objGeracaoNFe As ClassGeracaoNFe) As Long

Dim lErro As Long, RET As Integer, vFilialEmpresa As Variant, vSerieDe As Variant, vSerieAte As Variant
Dim vNFiscalDe As Variant, vNFiscalAte As Variant
Dim vClienteDe As Variant, vClienteAte As Variant, vFornecedorDe As Variant, vFornecedorAte As Variant
Dim vEmissaoDe As Variant, vEmissaoAte As Variant
Dim vStatus As Variant

On Error GoTo Erro_GeracaoNFe_SelecionarItens3

    vFilialEmpresa = iFilialEmpresa
    RET = Comando_BindVarInt(lComando, vFilialEmpresa)
    If (RET <> AD_SQL_SUCESSO) Then gError 199892

    vStatus = STATUS_CANCELADO
    RET = Comando_BindVarInt(lComando, vStatus)
    If (RET <> AD_SQL_SUCESSO) Then gError 199893

    If Len(Trim(objGeracaoNFe.sSerieDe)) > 0 Then
        vSerieDe = objGeracaoNFe.sSerieDe
        RET = Comando_BindVarInt(lComando, vSerieDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 199894
    End If

    If Len(Trim(objGeracaoNFe.sSerieAte)) > 0 Then
        vSerieAte = objGeracaoNFe.sSerieAte
        RET = Comando_BindVarInt(lComando, vSerieAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 199895
    End If

    If (objGeracaoNFe.lNFiscalDe <> 0) Then
        vNFiscalDe = objGeracaoNFe.lNFiscalDe
        RET = Comando_BindVarInt(lComando, vNFiscalDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 199896
    End If

    If (objGeracaoNFe.lNFiscalAte <> 0) Then
        vNFiscalAte = objGeracaoNFe.lNFiscalAte
        RET = Comando_BindVarInt(lComando, vNFiscalAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 199897
    End If

    If (objGeracaoNFe.lClienteDe <> 0) Then
        vClienteDe = objGeracaoNFe.lClienteDe
        RET = Comando_BindVarInt(lComando, vClienteDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 199898
    End If

    If (objGeracaoNFe.lClienteAte <> 0) Then
        vClienteAte = objGeracaoNFe.lClienteAte
        RET = Comando_BindVarInt(lComando, vClienteAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 199899
    End If

    If (objGeracaoNFe.lFornecedorDe <> 0) Then
        vFornecedorDe = objGeracaoNFe.lFornecedorDe
        RET = Comando_BindVarInt(lComando, vFornecedorDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 199900
    End If

    If (objGeracaoNFe.lFornecedorAte <> 0) Then
        vFornecedorAte = objGeracaoNFe.lFornecedorAte
        RET = Comando_BindVarInt(lComando, vFornecedorAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 199901
    End If

    If (objGeracaoNFe.dtEmissaoDe <> DATA_NULA) Then
        vEmissaoDe = objGeracaoNFe.dtEmissaoDe
        RET = Comando_BindVarInt(lComando, vEmissaoDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 199902
    End If

    If (objGeracaoNFe.dtEmissaoAte <> DATA_NULA) Then
        vEmissaoAte = objGeracaoNFe.dtEmissaoAte
        RET = Comando_BindVarInt(lComando, vEmissaoAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 199903
    End If


    RET = Comando_ExecutarInt(lComando)
    If (RET <> AD_SQL_SUCESSO) Then gError 199904

    GeracaoNFe_SelecionarItens3 = SUCESSO

    Exit Function

Erro_GeracaoNFe_SelecionarItens3:

    GeracaoNFe_SelecionarItens3 = gErr

    Select Case gErr
        
        Case 199892 To 199904
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199905)

    End Select

    Exit Function

End Function

Private Function GeracaoNFe_SelecionarItens4(ByVal lComando As Long, ByVal objGeracaoNFe As ClassGeracaoNFe, _
        lNumIntNF As Long, sSerie As String, lNumNotaFiscal As Long, dtDataEmissao As Date, sSigla As String, _
        lCliente As Long, sClienteNomeReduzido As String, iFilialCli As Integer, _
        lFornecedor As Long, sFornecedorNomeReduzido As String, iFilialForn As Integer, dValorTotal As Double, _
        colNFe1 As Collection) As Long

Dim lErro As Long, objNFe1 As ClassNFe1
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim lLote As Long
Dim scStat As String
Dim snRec As String
Dim sxMotivo As String

On Error GoTo Erro_GeracaoNFe_SelecionarItens4

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199907
    Next


    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199908

    Do While lErro = AD_SQL_SUCESSO

        Set objNFe1 = New ClassNFe1

        objNFe1.objNFiscal.lNumIntDoc = lNumIntNF
        objNFe1.objNFiscal.sSerie = sSerie
        objNFe1.objNFiscal.lNumNotaFiscal = lNumNotaFiscal
        objNFe1.objNFiscal.dtDataEmissao = dtDataEmissao
        objNFe1.sTipoNFiscal = sSigla
        objNFe1.objNFiscal.lCliente = lCliente
        objNFe1.sClienteNomeReduzido = sClienteNomeReduzido
        objNFe1.objNFiscal.iFilialCli = iFilialCli
        objNFe1.objNFiscal.lFornecedor = lFornecedor
        objNFe1.sFornecedorNomeReduzido = sFornecedorNomeReduzido
        objNFe1.objNFiscal.iFilialForn = iFilialForn
        objNFe1.objNFiscal.dValorTotal = dValorTotal
        
        If objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_NAO_ACEITOS Or objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_AMBOS Then
        
        
            lErro = Comando_Executar(alComando(1), "SELECT Lote FROM NFeFedLote WHERE NumIntNF = ? ORDER BY Lote DESC", lLote, lNumIntNF)
            If lErro <> AD_SQL_SUCESSO Then gError 199910
        
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199911
            
            If lErro = AD_SQL_SUCESSO Then
                    
                objNFe1.lLote = lLote
                objNFe1.sStatus = "Lote ainda não enviado"
                    
                scStat = String(STRING_NFE_CSTAT, 0)
                snRec = String(STRING_NFE_NREC, 0)
                sxMotivo = String(STRING_NFE_XMOTIVO, 0)
                    
                '******* verifica se o lote foi enviado **********
                lErro = Comando_Executar(alComando(2), "SELECT nRec, cStat, xMotivo FROM NFeFedRetEnvi WHERE Lote = ? ORDER BY Data DESC, Hora DESC", snRec, scStat, sxMotivo, lLote)
                If lErro <> AD_SQL_SUCESSO Then gError 199912
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199913
                    
                If lErro = AD_SQL_SUCESSO Then
                
                    '**** retorna o motivo do envio/nao envio do lote *******
                    objNFe1.sStatus = sxMotivo
                    
                    scStat = String(STRING_NFE_CSTAT, 0)
                    sxMotivo = String(STRING_NFE_XMOTIVO, 0)
                    
                    '***** tenta pegar o motivo da nao aceitacao da nota *************
                    lErro = Comando_Executar(alComando(3), "SELECT cStat, xMotivo FROM NFeFedProtNfe WHERE NumIntNF = ? AND nRec = ? ", scStat, sxMotivo, lNumIntNF, snRec)
                    If lErro <> AD_SQL_SUCESSO Then gError 199914
                
                    lErro = Comando_BuscarPrimeiro(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199915
                    
                    If lErro = AD_SQL_SUCESSO Then
                    
                        '***** retorna o motivo da nao aceitacao da nota *******
                        objNFe1.sStatus = sxMotivo
                        
                    Else
                    
                        scStat = String(STRING_NFE_CSTAT, 0)
                        sxMotivo = String(STRING_NFE_XMOTIVO, 0)
                    
                        'se nao tinha motivo da nota ==> algum problema com o lote ==> pega o motivo do nao processamento do lote
                        lErro = Comando_Executar(alComando(4), "SELECT cStat, xMotivo FROM NFeFedRetConsReci WHERE nRec = ? ", scStat, sxMotivo, snRec)
                        If lErro <> AD_SQL_SUCESSO Then gError 199916
                    
                        lErro = Comando_BuscarPrimeiro(alComando(4))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199917
                    
                        '***** retorna o motivo do nao processamento do lote *******
                        objNFe1.sStatus = sxMotivo
                    
                    End If
                    
                End If

            End If
        
        End If
        
        
        colNFe1.Add objNFe1
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199918

    Loop

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    GeracaoNFe_SelecionarItens4 = SUCESSO

    Exit Function

Erro_GeracaoNFe_SelecionarItens4:

    GeracaoNFe_SelecionarItens4 = gErr

    Select Case gErr

        Case 199907
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 199908, 199918
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 199910, 199911
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDLOTE", gErr)

        Case 199912, 199913
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDRETENVI", gErr)

        Case 199914, 199915
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDPROTNFE", gErr)

        Case 199916, 199917
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDRETCONSRECI", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199919)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TipoDocInfo_Le_NomeTela_NFiscal1(ByVal objNFiscal As ClassNFiscal, sTela As String) As Long
'Lê o Nome da Tela Nota Fiscal com a Série e o Número passado em objNFiscal.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_TipoDocInfo_Le_NomeTela_NFiscal1

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 199920

    sTela = String(STRING_NOME_TELA, 0)
    
    'Pesquisa o Nome da Tela com a Série e o Número passado
    lErro = Comando_Executar(lComando, "SELECT TiposDocInfo.NomeTelaNFiscal FROM NFiscal, TiposDocInfo WHERE NFiscal.NumIntDoc = ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo ", sTela, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 199921

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199922
    
    'Se não encontrar
    If lErro = AD_SQL_SEM_DADOS Then gError 199923
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    TipoDocInfo_Le_NomeTela_NFiscal1 = SUCESSO

    Exit Function

Erro_TipoDocInfo_Le_NomeTela_NFiscal1:

    TipoDocInfo_Le_NomeTela_NFiscal1 = gErr

    Select Case gErr

        Case 199920
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 199921, 199922
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDOCINFO", gErr)

        Case 199923

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 199924)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function


Public Function ClienteExpresso_Le(ByVal objClienteExpresso As ClassClienteExpressoSel) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim sSQL As String
Dim tCliente As typeCliente
Dim tFilial As typeFilialCliente
Dim objCliente As ClassCliente
Dim objFilial As ClassFilialCliente

On Error GoTo Erro_ClienteExpresso_Le

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 200988
    Next
    
    lErro = ClienteExpresso_PreparaSQL(objClienteExpresso, sSQL)
    If lErro <> SUCESSO Then gError 200989
    
    tCliente.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tCliente.sUsuarioCobrador = String(STRING_USUARIO, 0)
    tCliente.sUsuRespCallCenter = String(STRING_USUARIO, 0)
    tFilial.sNome = String(STRING_FILIAL_NOME, 0)

    lErro = ClienteExpresso_PreparaInt(alComando(1), sSQL, objClienteExpresso.lClienteDe, objClienteExpresso.lClienteAte, objClienteExpresso.iRegiao, objClienteExpresso.iVendedor, objClienteExpresso.iCodTransportadora, objClienteExpresso.sUsuCobrador, objClienteExpresso.sUsuRespCallCenter, objClienteExpresso.sCategoria, objClienteExpresso.sCategoriaDe, objClienteExpresso.sCategoriaAte, objClienteExpresso.iTodasUFs, objClienteExpresso.iTodosTipoCli, objClienteExpresso.colCidades, objClienteExpresso.colBairros, objClienteExpresso.colUFs, objClienteExpresso.colTipoCli, tCliente.lCodigo, tCliente.sNomeReduzido, tFilial.iCodFilial, tFilial.sNome, tFilial.iRegiao, tFilial.iVendedor, tFilial.iCodTransportadora, tCliente.sUsuarioCobrador, tCliente.sUsuRespCallCenter, tFilial.lEndereco)
    If lErro <> SUCESSO Then gError 200990

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 200991

    'Enquanto existirem dados de acordo com o filtro passado
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCliente = New ClassCliente
        Set objFilial = New ClassFilialCliente
        
        objCliente.lCodigo = tCliente.lCodigo
        objCliente.sNomeReduzido = tCliente.sNomeReduzido
        objCliente.sUsuarioCobrador = tCliente.sUsuarioCobrador
        objCliente.sUsuRespCallCenter = tCliente.sUsuRespCallCenter
    
        objFilial.lCodCliente = tFilial.lCodCliente
        objFilial.iCodFilial = tFilial.iCodFilial
        objFilial.sNome = tFilial.sNome
        objFilial.iRegiao = tFilial.iRegiao
        objFilial.iVendedor = tFilial.iVendedor
        objFilial.iCodTransportadora = tFilial.iCodTransportadora
        objFilial.lEndereco = tFilial.lEndereco
        
        objClienteExpresso.colClientes.Add objCliente
        objClienteExpresso.colFiliais.Add objFilial
            
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 200992
    
    Loop
        
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ClienteExpresso_Le = SUCESSO
     
    Exit Function
    
Erro_ClienteExpresso_Le:

    ClienteExpresso_Le = gErr
     
    Select Case gErr
          
        Case 200988
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 200989, 200990
        
        Case 200991, 200992
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 200993)
     
    End Select
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ClienteExpresso_PreparaSQL(ByVal objClienteExpresso As ClassClienteExpressoSel, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sGroupBy As String
Dim sOrderBy As String
Dim sSubWhere As String
Dim vValor As Variant

On Error GoTo Erro_ClienteExpresso_PreparaSQL

    sSQL = "SELECT F.CodCliente,C.NomeReduzido, F.CodFilial, F.Nome , F.Regiao, F.Vendedor, F.CodTransportadora, C.UsuarioCobrador, C.UsuRespCallCenter, F.Endereco FROM Clientes AS C, FiliaisClientes AS F, Enderecos As E "
    sWhere = "WHERE C.Codigo = F.CodCliente And F.Endereco = E.Codigo "
    sOrderBy = "ORDER BY F.CodCliente, F.CodFilial "
    
    If objClienteExpresso.iCodTransportadora <> -1 Then
        sWhere = sWhere & "AND F.CodTransportadora = ? "
    End If
 
    If objClienteExpresso.iRegiao <> -1 Then
        sWhere = sWhere & "AND F.Regiao = ? "
    End If
    
    If objClienteExpresso.iVendedor <> -1 Then
        sWhere = sWhere & "AND F.Vendedor = ? "
    End If
    
    If objClienteExpresso.lClienteAte <> 0 Then
        sWhere = sWhere & "AND F.CodCliente <= ? "
    End If
    
    If objClienteExpresso.lClienteDe <> 0 Then
        sWhere = sWhere & "AND F.CodCliente >= ? "
    End If
    
    If objClienteExpresso.sUsuCobrador <> "-1" Then
        sWhere = sWhere & "AND C.UsuarioCobrador = ? "
    End If
    
    If objClienteExpresso.sUsuRespCallCenter <> "-1" Then
        sWhere = sWhere & "AND C.UsuRespCallCenter = ? "
    End If
    
    sSubWhere = ""
    If objClienteExpresso.colCidades.Count <> 0 Then
        sWhere = sWhere & "AND E.Cidade IN ( "
        For Each vValor In objClienteExpresso.colCidades
            sSubWhere = sSubWhere & IIf(Len(Trim(sSubWhere)) > 0, ",", "") & "?"
        Next
        sWhere = sWhere & sSubWhere & ")"
    End If
    
    sSubWhere = ""
    If objClienteExpresso.colBairros.Count <> 0 Then
        sWhere = sWhere & "AND E.Bairro IN ( "
        For Each vValor In objClienteExpresso.colBairros
            sSubWhere = sSubWhere & IIf(Len(Trim(sSubWhere)) > 0, ",", "") & "?"
        Next
        sWhere = sWhere & sSubWhere & ")"
    End If
    
    sSubWhere = ""
    If objClienteExpresso.iTodasUFs <> MARCADO Then
        sWhere = sWhere & "AND E.SiglaEstado IN ( "
        For Each vValor In objClienteExpresso.colUFs
            sSubWhere = sSubWhere & IIf(Len(Trim(sSubWhere)) > 0, ",", "") & "?"
        Next
        sWhere = sWhere & sSubWhere & ")"
    End If
    
    sSubWhere = ""
    If objClienteExpresso.iTodosTipoCli <> MARCADO Then
        sWhere = sWhere & "AND C.Tipo IN ( "
        For Each vValor In objClienteExpresso.colTipoCli
            sSubWhere = sSubWhere & IIf(Len(Trim(sSubWhere)) > 0, ",", "") & "?"
        Next
        sWhere = sWhere & sSubWhere & ")"
    End If
    
    sSubWhere = ""
    If Len(Trim(objClienteExpresso.sCategoria)) > 0 Then
        If Len(Trim(objClienteExpresso.sCategoriaDe)) > 0 Then
            sSubWhere = sSubWhere & "AND X.Item >= ? "
        End If
        If Len(Trim(objClienteExpresso.sCategoriaAte)) > 0 Then
            sSubWhere = sSubWhere & "AND X.Item <= ? "
        End If
        sWhere = sWhere & " AND EXISTS ( SELECT X.Cliente FROM FilialClienteCategorias AS X WHERE F.CodCliente= X.Cliente AND F.CodFilial = X.Filial AND " & _
        "X.Categoria = ? " & sSubWhere & ") "
    End If
    
    sSQL = sSQL & sWhere & sGroupBy & sOrderBy
    
    ClienteExpresso_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_ClienteExpresso_PreparaSQL:

    ClienteExpresso_PreparaSQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 200994)
     
    End Select
     
    Exit Function

End Function

Private Function ClienteExpresso_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal vlClienteDe As Variant, ByVal vlClienteAte As Variant, ByVal viRegiao As Variant, ByVal viVendedor As Variant, ByVal viTransp As Variant, ByVal vsUsuCobr As Variant, ByVal vsUsuCallCenter As Variant, ByVal vsCategoria As Variant, ByVal vsCategoriaDe As Variant, ByVal vsCategoriaAte As Variant, ByVal viTodasUFs As Variant, ByVal viTodosTipoCli As Variant, ByVal colCidades As Collection, ByVal colBairros As Collection, ByVal colUFs As Collection, ByVal colTipoCli As Collection, vlClienteRet As Variant, vsNomeClienteRet As Variant, viFilialRet As Variant, vsNomeFilialRet As Variant, viRegiaoRet As Variant, viVendRet As Variant, viTranspRet As Variant, vsUsuCobrRet As Variant, vsUsuCallCenterRet As Variant, vlEndereco As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant
Dim avValor1(1 To 100) As Variant
Dim avValor2(1 To 100) As Variant
Dim avValor3(1 To 100) As Variant
Dim avValor4(1 To 100) As Variant
Dim vValor As Variant
Dim iIndice As Integer

On Error GoTo Erro_ClienteExpresso_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202000

    lErro = Comando_BindVarInt(lComando, vlClienteRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202001

    lErro = Comando_BindVarInt(lComando, vsNomeClienteRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202002
    
    lErro = Comando_BindVarInt(lComando, viFilialRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202003
    
    lErro = Comando_BindVarInt(lComando, vsNomeFilialRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202004
    
    lErro = Comando_BindVarInt(lComando, viRegiaoRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202005
    
    lErro = Comando_BindVarInt(lComando, viVendRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202006
    
    lErro = Comando_BindVarInt(lComando, viTranspRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202007
    
    lErro = Comando_BindVarInt(lComando, vsUsuCobrRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202008
    
    lErro = Comando_BindVarInt(lComando, vsUsuCallCenterRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202009
    
    lErro = Comando_BindVarInt(lComando, vlEndereco)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202009
    
    If viTransp <> -1 Then
        lErro = Comando_BindVarInt(lComando, viTransp)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202010
    End If

    If viRegiao <> -1 Then
        lErro = Comando_BindVarInt(lComando, viRegiao)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202011
    End If

    If viVendedor <> -1 Then
        lErro = Comando_BindVarInt(lComando, viVendedor)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202012
    End If
    
    If vlClienteAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202013
    End If
    
    If vlClienteDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202014
    End If
    
    If vsUsuCobr <> "-1" Then
        lErro = Comando_BindVarInt(lComando, vsUsuCobr)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202015
    End If
    
    If vsUsuCallCenter <> "-1" Then
        lErro = Comando_BindVarInt(lComando, vsUsuCallCenter)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202016
    End If
    
    iIndice = 0
    For Each vValor In colCidades
        iIndice = iIndice + 1
        avValor1(iIndice) = vValor
        lErro = Comando_BindVarInt(lComando, avValor1(iIndice))
        If (lErro <> AD_SQL_SUCESSO) Then gError 202017
    Next
    
    iIndice = 0
    For Each vValor In colBairros
        iIndice = iIndice + 1
        avValor2(iIndice) = vValor
        lErro = Comando_BindVarInt(lComando, avValor2(iIndice))
        If (lErro <> AD_SQL_SUCESSO) Then gError 202017
    Next
       
    If viTodasUFs <> MARCADO Then
        iIndice = 0
        For Each vValor In colUFs
            iIndice = iIndice + 1
            avValor3(iIndice) = vValor
            lErro = Comando_BindVarInt(lComando, avValor3(iIndice))
            If (lErro <> AD_SQL_SUCESSO) Then gError 202017
        Next
    End If
    
    If viTodosTipoCli <> MARCADO Then
        iIndice = 0
        For Each vValor In colTipoCli
            iIndice = iIndice + 1
            avValor4(iIndice) = vValor
            lErro = Comando_BindVarInt(lComando, avValor4(iIndice))
            If (lErro <> AD_SQL_SUCESSO) Then gError 202017
        Next
    End If
    
    If Len(Trim(vsCategoria)) > 0 Then
        lErro = Comando_BindVarInt(lComando, vsCategoria)
        If (lErro <> AD_SQL_SUCESSO) Then gError 202018

        If Len(Trim(vsCategoriaDe)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaDe)
            If (lErro <> AD_SQL_SUCESSO) Then gError 202019
        End If
        If Len(Trim(vsCategoriaAte)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaAte)
            If (lErro <> AD_SQL_SUCESSO) Then gError 202020
        End If
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 202021
    
    ClienteExpresso_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_ClienteExpresso_PreparaInt:

    ClienteExpresso_PreparaInt = gErr
     
    Select Case gErr

        Case 202000 To 202021
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202022)
     
    End Select
     
    Exit Function

End Function

Function NCM_Le_Aliquota_ComProduto(ByVal sProdutoTela As String, ByVal sImposto As String, dAliquota As Double) As Long
'Lê a alíquota na Classificação Fiscal para o produto e imposto passados

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim sProduto As String
Dim iProdutoPreenchido As Integer
Dim sNCM As String
Dim sCampo As String
Dim dAliquotaAux As Double

On Error GoTo Erro_NCM_Le_Aliquota_ComProduto

    dAliquota = 0

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 202327
    Next

    lErro = CF("Produto_Formata", sProdutoTela, sProduto, iProdutoPreenchido)
    If lErro <> SUCESSO Then gError 202328
    
    sNCM = String(STRING_PRODUTO_IPI_CODIGO, 0)
    sCampo = sImposto & "Aliquota"
    
    lErro = Comando_Executar(alComando(1), "SELECT IPICodigo FROM Produtos WHERE Codigo = ? ", sNCM, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 202329

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202340
    
    'Se não encontrar
    If lErro = AD_SQL_SEM_DADOS Then gError 202341 'Produto não cadastrado
    
    If UCase(sImposto) <> "II" And UCase(sImposto) <> "PIS" And UCase(sImposto) <> "COFINS" And UCase(sImposto) <> "ICMS" And UCase(sImposto) <> "IPI" Then gError 202342 'Imposto errado
    
    lErro = Comando_Executar(alComando(2), "SELECT " & sCampo & " FROM ClassificacaoFiscal WHERE Codigo = ? ", dAliquotaAux, sNCM)
    If lErro <> AD_SQL_SUCESSO Then gError 202343

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202344
    
    dAliquota = dAliquotaAux
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NCM_Le_Aliquota_ComProduto = SUCESSO

    Exit Function

Erro_NCM_Le_Aliquota_ComProduto:

    NCM_Le_Aliquota_ComProduto = gErr

    Select Case gErr

        Case 202327
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 202328

        Case 202329, 202340
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, sProduto)

        Case 202341
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, sProduto)

        Case 202342
            Call Rotina_Erro(vbOKOnly, "ERRO_CAMPO_IMPOSTO_INVALIDO", gErr)

        Case 202343, 202344
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSIFICACAOFISCAL", gErr, sNCM)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 202345)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ProdutoGenero_Le(ByVal objProdutoGenero As ClassProdutoGenero) As Long

Dim lErro As Long
Dim lComando As Long
Dim tProdutoGenero As typeProdutoGenero

On Error GoTo Erro_ProdutoGenero_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 202765

    'Alocação de espaço no buffer
    tProdutoGenero.sCodigo = String(STRING_PRODUTOGENERO_CODIGO, 0)
    tProdutoGenero.sDescricao = String(STRING_PRODUTOGENERO_DESCRICAO, 0)

    'Le a tabelaProdutoGenero
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao FROM ProdutoGenero WHERE Codigo= ? ", _
                tProdutoGenero.sCodigo, tProdutoGenero.sDescricao, _
                objProdutoGenero.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 202766

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202767

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objProdutoGenero.sCodigo = tProdutoGenero.sCodigo
    objProdutoGenero.sDescricao = tProdutoGenero.sDescricao

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ProdutoGenero_Le = SUCESSO

    Exit Function

Erro_ProdutoGenero_Le:

    ProdutoGenero_Le = gErr

    Select Case gErr

        Case 202765
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 202766, 202767
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOGENERO", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202768)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ISSQN_Le(ByVal objISSQN As ClassISSQN) As Long

Dim lErro As Long
Dim lComando As Long
Dim tISSQN As typeISSQN

On Error GoTo Erro_ISSQN_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 202769

    'Alocação de espaço no buffer
    tISSQN.sCodigo = String(STRING_ISSQN_CODIGO, 0)
    tISSQN.sDescricao = String(STRING_ISSQN_DESCRICAO, 0)

    'Le a tabelaISSQN
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, Tipo, CodServNFe FROM ISSQN WHERE Codigo= ? ", _
                tISSQN.sCodigo, tISSQN.sDescricao, tISSQN.iTipo, tISSQN.lCodServNFe, _
                objISSQN.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 202770

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202771

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objISSQN.sCodigo = tISSQN.sCodigo
    objISSQN.sDescricao = tISSQN.sDescricao
    objISSQN.iTipo = tISSQN.iTipo
    objISSQN.lCodServNFe = tISSQN.lCodServNFe

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ISSQN_Le = SUCESSO

    Exit Function

Erro_ISSQN_Le:

    ISSQN_Le = gErr

    Select Case gErr

        Case 202769
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 202770, 202771
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ISSQN", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202772)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function


'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function EmailConfig_Le(ByVal objEmailConfig As ClassEmailConfig) As Long

Dim lErro As Long
Dim lComando As Long
Dim tEmailConfig As typeEmailConfig

On Error GoTo Erro_EmailConfig_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 202813

    'Alocação de espaço no buffer
    tEmailConfig.sUsuario = String(STRING_USUARIO_CODIGO, 0)
    tEmailConfig.sSMTP = String(STRING_SMTP, 0)
    tEmailConfig.sSMTPUsu = String(STRING_SMTP_USUARIO, 0)
    tEmailConfig.sSMTPSenha = String(STRING_SMTP_SENHA, 0)
    tEmailConfig.sEmail = String(STRING_MAXIMO, 0)
    tEmailConfig.sNome = String(STRING_MAXIMO, 0)

    'Le a tabelaEmailConfig
    lErro = Comando_Executar(lComando, "SELECT Usuario, SMTP, SMTPUsu, SMTPSenha, SMTPPorta, SSL, ConfirmacaoLeitura, PgmEmail, Email, Nome FROM EmailConfig WHERE (Usuario= ? OR Usuario= ?) AND SMTP <> ? ORDER BY Usuario DESC", _
                tEmailConfig.sUsuario, tEmailConfig.sSMTP, tEmailConfig.sSMTPUsu, tEmailConfig.sSMTPSenha, tEmailConfig.lSMTPPorta, tEmailConfig.iSSL, tEmailConfig.iConfirmacaoLeitura, tEmailConfig.iPgmEmail, tEmailConfig.sEmail, tEmailConfig.sNome, _
                objEmailConfig.sUsuario, "", "")
    If lErro <> AD_SQL_SUCESSO Then gError 202814

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202815

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objEmailConfig.sUsuario = tEmailConfig.sUsuario
    objEmailConfig.sSMTP = tEmailConfig.sSMTP
    objEmailConfig.sSMTPUsu = tEmailConfig.sSMTPUsu
    objEmailConfig.sSMTPSenha = tEmailConfig.sSMTPSenha
    objEmailConfig.lSMTPPorta = tEmailConfig.lSMTPPorta
    
    objEmailConfig.iSSL = tEmailConfig.iSSL
    objEmailConfig.iConfirmacaoLeitura = tEmailConfig.iConfirmacaoLeitura
    objEmailConfig.iPgmEmail = tEmailConfig.iPgmEmail
    objEmailConfig.sEmail = tEmailConfig.sEmail
    objEmailConfig.sNome = tEmailConfig.sNome
    
    If Len(Trim(objEmailConfig.sEmail)) = 0 Then objEmailConfig.sEmail = objEmailConfig.sSMTPUsu
    If Len(Trim(objEmailConfig.sSMTPUsu)) = 0 Then objEmailConfig.sSMTPUsu = objEmailConfig.sEmail

    'Fecha Comando
    Call Comando_Fechar(lComando)

    EmailConfig_Le = SUCESSO

    Exit Function

Erro_EmailConfig_Le:

    EmailConfig_Le = gErr

    Select Case gErr

        Case 202813
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 202814, 202815
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMAILCONFIG", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202816)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NF_Obter_Letras(lComando As Long, ByVal lNumIntNF As Long, ByVal colProdutos As Collection) As Long

Dim lErro As Long
Dim objProduto As ClassProduto
Dim sClass As String

On Error GoTo Erro_NF_Obter_Letras
    
    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 202885
    End If
    
    sClass = String(STRING_PRODUTO_IPI_CODIGO, 0)
    
    'Lê a tabela FilCliFilEmp para trazer os dados
    lErro = Comando_Executar(lComando, "SELECT P.IPICodigo FROM ItensNFiscal AS I, Produtos As P WHERE I.Produto = P.Codigo AND I.NumIntNF = ? ORDER BY I.Item", sClass, lNumIntNF)
    If lErro <> AD_SQL_SUCESSO Then gError 202886

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202887
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objProduto = New ClassProduto
        objProduto.sIPICodigo = sClass
        colProdutos.Add objProduto
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202888
    
    Loop
    
    NF_Obter_Letras = SUCESSO

    Exit Function

Erro_NF_Obter_Letras:

    NF_Obter_Letras = gErr

    Select Case gErr

        Case 202885
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 202886 To 202888
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 202889)
    
    End Select

    'Libera comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CodConvBanco_Obtem_Customizado(ByVal objCarteiraCobrador As ClassCarteiraCobrador, sCodConvBanco As String) As Long
    CodConvBanco_Obtem_Customizado = SUCESSO
End Function

Function BB_Obter_Dados_DetalheSegP_Customizado(ByVal gobjCobrancaEletronica As ClassCobrancaEletronica, ByVal objOcorrRemParcRem As ClassOcorrRemParcRec, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal objParcelaRec As ClassParcelaReceber, sTipoDocumento As String, sNumDocCobranca As String, sDVAgencia As String, sCodProtesto As String, sNumDiasProtesto As String) As Long
    BB_Obter_Dados_DetalheSegP_Customizado = SUCESSO
End Function

Function TipoNFiscal_Testar_Credito(ByVal iTipoNFiscal As Integer, iTestar As Integer) As Long
    TipoNFiscal_Testar_Credito = SUCESSO
End Function

Function EncComissoesCliProd_Cust(ByVal objVendedor As ClassVendedor, dFator As Double) As Long
    EncComissoesCliProd_Cust = SUCESSO
End Function

Function CobrancaEletronica_Obter_DadosParcelaRec_Cust(ByVal objCobrancaEletronica As ClassCobrancaEletronica) As Long
    CobrancaEletronica_Obter_DadosParcelaRec_Cust = SUCESSO
End Function

Function Itau_Obter_Dados_DetalheSegP_Customizado(ByVal gobjCobrancaEletronica As ClassCobrancaEletronica, sNumDocCobranca As String, ByVal objParcelaRec As ClassParcelaReceber, Optional ByVal objOcorrRemParcRem As ClassOcorrRemParcRec, Optional sInstrucao1 As String, Optional sInstrucao2 As String) As Long
    Itau_Obter_Dados_DetalheSegP_Customizado = SUCESSO
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function Rotas_Le(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim lComando As Long
Dim tRotas As typeRotas

On Error GoTo Erro_Rotas_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205076
    
    If objRotas.iFilialEmpresa = 0 Then objRotas.iFilialEmpresa = giFilialEmpresa

    'Alocação de espaço no buffer
    tRotas.sDescricao = String(STRING_ROTA_DESCRICAO, 0)

    'Le a tabelaRotas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Descricao, Ativo FROM Rotas WHERE Codigo= ?  AND Chave= ? AND FilialEmpresa = ? ", _
                tRotas.lNumIntDoc, tRotas.sDescricao, tRotas.iAtivo, _
                objRotas.sCodigo, objRotas.lChave, objRotas.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 205077

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205078

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objRotas.lNumIntDoc = tRotas.lNumIntDoc
    objRotas.sDescricao = tRotas.sDescricao
    objRotas.iAtivo = tRotas.iAtivo
    
    lErro = CF("RotasVend_Le", objRotas)
    If lErro <> SUCESSO Then gError 205079

    lErro = CF("RotasPontos_Le", objRotas)
    If lErro <> SUCESSO Then gError 205080

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Rotas_Le = SUCESSO

    Exit Function

Erro_Rotas_Le:

    Rotas_Le = gErr

    Select Case gErr

        Case 205076
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205077, 205078
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTAS", gErr)
            
        Case 205079, 205080

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205081)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function Cliente_Le_Rotas(ByVal lCliente As Long, ByVal colRotas As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim objRotas As ClassRotas
Dim sChave As String, sRota As String, sFilial As String
Dim lNumIntDoc As Long, lChave As Long, iFilial As Integer

On Error GoTo Erro_Cliente_Le_Rotas

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205076

    'Alocação de espaço no buffer
    sChave = String(STRING_CAMPOSGENERICOSVALORES_VALOR, 0)
    sRota = String(STRING_ROTA_CODIGO, 0)
    sFilial = String(STRING_FILIAL_CLIENTE_NOME, 0)

    'Le a tabelaRotas
    lErro = Comando_Executar(lComando, "SELECT R.NumIntDoc, R.Chave, C.Valor, R.Codigo, F.CodFilial, F.Nome  FROM Rotas AS R, RotasPontos AS P, Rotas1 AS C, FiliaisClientes AS F WHERE R.Chave = C.CodValor AND R.NumIntDoc = P.NumIntDocRota AND P.FilialCliente = F.CodFilial AND P.Cliente = F.CodCliente AND P.Cliente = ? AND R.FilialEmpresa = ? AND R.Ativo = ? ORDER BY R.Chave, R.Codigo ", _
    lNumIntDoc, lChave, sChave, sRota, iFilial, sFilial, lCliente, giFilialEmpresa, MARCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 205077

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205078

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objRotas = New ClassRotas

        objRotas.lNumIntDoc = lNumIntDoc
        objRotas.sCodigo = sRota
        objRotas.lChave = lChave
        objRotas.sChave = sChave
        objRotas.sFilial = sFilial
        objRotas.iFilial = iFilial
        
        colRotas.Add objRotas
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205079
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Cliente_Le_Rotas = SUCESSO

    Exit Function

Erro_Cliente_Le_Rotas:

    Cliente_Le_Rotas = gErr

    Select Case gErr

        Case 205076
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205077, 205078, 205079
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTAS", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205081)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function RotasVend_Le(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim lComando As Long
Dim objRotasVend As ClassRotasVend
Dim tRotasVend As typeRotasVend

On Error GoTo Erro_RotasVend_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205082

    'Le a tabelaRotasVend
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Seq, Vendedor FROM RotasVend WHERE NumIntDocRota= ?  ORDER BY Seq ", _
                tRotasVend.lNumIntDoc, tRotasVend.iSeq, tRotasVend.iVendedor, _
                objRotas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205083

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205084

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objRotasVend = New ClassRotasVend

        objRotasVend.lNumIntDoc = tRotasVend.lNumIntDoc
        objRotasVend.iSeq = tRotasVend.iSeq
        objRotasVend.iVendedor = tRotasVend.iVendedor
        
        objRotas.colVend.Add objRotasVend
        
        'Busca Próxima
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205085
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    RotasVend_Le = SUCESSO

    Exit Function

Erro_RotasVend_Le:

    RotasVend_Le = gErr

    Select Case gErr

        Case 205082
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205083 To 205085
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTASVEND", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205086)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function RotasPontos_Le(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim lComando As Long
Dim tRotasPontos As typeRotasPontos
Dim objRotasPontos As ClassRotasPontos

On Error GoTo Erro_RotasPontos_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205087

    'Alocação de espaço no buffer
    tRotasPontos.sObservacao = String(STRING_ROTAPONTO_OBS, 0)

    'Le a tabelaRotasPontos
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc,  Seq, Cliente,FilialCliente, Observacao, Meio, " & _
                "Tempo, Distancia, Selecionado FROM RotasPontos WHERE NumIntDocRota= ? ORDER BY Seq ", _
                tRotasPontos.lNumIntDoc, tRotasPontos.iSeq, tRotasPontos.lCliente, tRotasPontos.iFilialCliente, _
                tRotasPontos.sObservacao, tRotasPontos.lMeio, tRotasPontos.dTempo, tRotasPontos.dDistancia, tRotasPontos.iSelecionado, _
                objRotas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205088

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205089

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objRotasPontos = New ClassRotasPontos

        objRotasPontos.lNumIntDoc = tRotasPontos.lNumIntDoc
        objRotasPontos.iSeq = tRotasPontos.iSeq
        objRotasPontos.lCliente = tRotasPontos.lCliente
        objRotasPontos.sObservacao = tRotasPontos.sObservacao
        objRotasPontos.lMeio = tRotasPontos.lMeio
        objRotasPontos.dTempo = tRotasPontos.dTempo
        objRotasPontos.dDistancia = tRotasPontos.dDistancia
        objRotasPontos.iSelecionado = tRotasPontos.iSelecionado
        objRotasPontos.iFilialCliente = tRotasPontos.iFilialCliente
        
        objRotas.colPontos.Add objRotasPontos

        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205090
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    RotasPontos_Le = SUCESSO

    Exit Function

Erro_RotasPontos_Le:

    RotasPontos_Le = gErr

    Select Case gErr

        Case 205087
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205088 To 205090
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTASPONTOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205091)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RotasPontos_Testa_Filial(ByVal lCliente As Long, ByVal iFilial As Integer) As Long

Dim lErro As Long
Dim lComando As Long
Dim objRotasPontos As ClassRotasPontos
Dim sRota As String
Dim sChave As String
Dim iFilialCli As Integer

On Error GoTo Erro_RotasPontos_Testa_Filial

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 206412

    'Alocação de espaço no buffer
    sRota = String(STRING_ROTA_CODIGO, 0)
    sChave = String(STRING_CAMPOSGENERICOSVALORES_VALOR, 0)

    'Le a tabelaRotasPontos
    If iFilial <> 0 Then
        lErro = Comando_Executar(lComando, "SELECT R.Codigo, R.Chave, P.FilialCliente FROM RotasView AS R, RotasPontos AS P WHERE P.NumIntDocRota = R.NumIntDoc AND Cliente = ? AND FilialCliente = ?", sRota, sChave, iFilialCli, lCliente, iFilial)
    Else
        lErro = Comando_Executar(lComando, "SELECT R.Codigo, R.Chave, P.FilialCliente FROM RotasView AS R, RotasPontos AS P WHERE P.NumIntDocRota = R.NumIntDoc AND Cliente = ? ", sRota, sChave, iFilialCli, lCliente)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 206413

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206414
    
    If lErro = AD_SQL_SUCESSO Then gError 206415
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    RotasPontos_Testa_Filial = SUCESSO

    Exit Function

Erro_RotasPontos_Testa_Filial:

    RotasPontos_Testa_Filial = gErr

    Select Case gErr

        Case 206412
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 206413 To 206414
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTASPONTOS", gErr)
            
        Case 206415
            Call Rotina_Erro(vbOKOnly, "ERRO_EXC_FILCLI_COM_ROTA", gErr, iFilialCli, lCliente, sRota, sChave)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 206416)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CamposGenericos_ValidaExclusao_ChaveRota() As Long

Dim lComando As Long
Dim lErro As Long
Dim sCodigo As String
Dim lChave As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_ChaveRota
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205143
    
    sCodigo = String(STRING_ROTA_CODIGO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Codigo, Chave FROM Rotas WHERE Chave NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Chave <> 0", sCodigo, lChave, CAMPOSGENERICOS_CHAVE_ROTA)
    If lErro <> AD_SQL_SUCESSO Then gError 205144
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205145
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 205146
        
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_ChaveRota = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_ChaveRota:

    CamposGenericos_ValidaExclusao_ChaveRota = gErr
    
    Select Case gErr
    
        Case 205143
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 205144, 205145
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTAS", gErr)
        
        Case 205146
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHAVE_ROTA", gErr, sCodigo, lChave)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205147)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

Public Function CamposGenericos_ValidaExclusao_MeiosTransp() As Long

Dim lComando As Long
Dim lErro As Long
Dim sCodigo As String
Dim lChave As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_MeiosTransp
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205143
    
    sCodigo = String(STRING_ROTA_CODIGO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT R.Codigo, R.Chave FROM Rotas AS R, RotasPontos AS P WHERE R.NumIntDoc = P.NumIntDocRota AND P.Meio NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND P.Meio <> 0", sCodigo, lChave, CAMPOSGENERICOS_MEIOS_TRANSP)
    If lErro <> AD_SQL_SUCESSO Then gError 205144
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205145
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 205146
        
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_MeiosTransp = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_MeiosTransp:

    CamposGenericos_ValidaExclusao_MeiosTransp = gErr
    
    Select Case gErr
    
        Case 205143
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 205144, 205145
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTAS", gErr)
        
        Case 205146
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MEIOS_TRANSP", gErr, sCodigo, lChave)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205147)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

Public Function MapaDeEntrega_Le_NFs(ByVal objMapa As ClassMapaDeEntrega, ByVal iRegiao As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal dtDataEntregaDe As Date, ByVal dtDataEntregaAte As Date) As Long

Dim lErro As Long
Dim lComando As Long
Dim objNF As ClassNFiscal
Dim lNumIntDoc As Long
Dim iOrdem As Integer

On Error GoTo Erro_MapaDeEntrega_Le_NFs

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205333

    For iOrdem = 1 To 2
        
        'Le a tabelaRotasPontos
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM NFiscal_MapaEntrega WHERE (Regiao = ? OR ? = ?) AND (DataEmissao >= ? OR ? = ?) AND (DataEmissao <= ? OR ? = ?) AND (DataEntrega >= ? OR ? = ?) AND (DataEntrega <= ? OR ? = ?) AND ((Ordem <> ? AND ? = ?) OR (Ordem = ? AND ? = ?)) ORDER BY Regiao, Ordem, Cliente", lNumIntDoc, iRegiao, iRegiao, 0, dtDataDe, dtDataDe, DATA_NULA, dtDataAte, dtDataAte, DATA_NULA, dtDataEntregaDe, dtDataEntregaDe, DATA_NULA, dtDataEntregaAte, dtDataEntregaAte, DATA_NULA, 0, iOrdem, 1, 0, iOrdem, 2)
        If lErro <> AD_SQL_SUCESSO Then gError 205334
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205335
    
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objNF = New ClassNFiscal
    
            objNF.lNumIntDoc = lNumIntDoc
            
            lErro = CF("NFiscal_Le", objNF)
            If lErro <> SUCESSO And lErro <> 31442 Then gError 205336
            
            objMapa.colDocs.Add objNF
    
            'Busca Primeiro
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205337
            
        Loop
        
    Next

    'Fecha Comando
    Call Comando_Fechar(lComando)

    MapaDeEntrega_Le_NFs = SUCESSO

    Exit Function

Erro_MapaDeEntrega_Le_NFs:

    MapaDeEntrega_Le_NFs = gErr

    Select Case gErr

        Case 205333
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205334, 205335, 205337
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
            
        Case 205336

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205338)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function MapaDeEntrega_Le_PVs(ByVal objMapa As ClassMapaDeEntrega, ByVal iRegiao As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal dtDataEntregaDe As Date, ByVal dtDataEntregaAte As Date, ByVal iStatus As Integer) As Long

Dim lErro As Long
Dim lComando As Long
Dim objPV As ClassPedidoDeVenda
Dim lNumIntDoc As Long
Dim iOrdem As Integer

On Error GoTo Erro_MapaDeEntrega_Le_PVs

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205333

    For iOrdem = 1 To 2
        
        'Le a tabelaRotasPontos
        If iStatus = STATUS_ABERTO Then
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM PedVenda_MapaEntrega WHERE (Regiao = ? OR ? = ?) AND (DataEmissao >= ? OR ? = ?) AND (DataEmissao <= ? OR ? = ?) AND (DataEntrega >= ? OR ? = ?) AND (DataEntrega <= ? OR ? = ?) AND ((Ordem <> ? AND ? = ?) OR (Ordem = ? AND ? = ?)) AND Status = 4 ORDER BY Regiao, Ordem, Cliente", lNumIntDoc, iRegiao, iRegiao, 0, dtDataDe, dtDataDe, DATA_NULA, dtDataAte, dtDataAte, DATA_NULA, dtDataEntregaDe, dtDataEntregaDe, DATA_NULA, dtDataEntregaAte, dtDataEntregaAte, DATA_NULA, 0, iOrdem, 1, 0, iOrdem, 2)
        Else
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM PedVenda_MapaEntrega WHERE (Regiao = ? OR ? = ?) AND (DataEmissao >= ? OR ? = ?) AND (DataEmissao <= ? OR ? = ?) AND (DataEntrega >= ? OR ? = ?) AND (DataEntrega <= ? OR ? = ?) AND ((Ordem <> ? AND ? = ?) OR (Ordem = ? AND ? = ?)) ORDER BY Regiao, Ordem, Cliente", lNumIntDoc, iRegiao, iRegiao, 0, dtDataDe, dtDataDe, DATA_NULA, dtDataAte, dtDataAte, DATA_NULA, dtDataEntregaDe, dtDataEntregaDe, DATA_NULA, dtDataEntregaAte, dtDataEntregaAte, DATA_NULA, 0, iOrdem, 1, 0, iOrdem, 2)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 205334
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205335
    
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objPV = New ClassPedidoDeVenda
    
            objPV.lNumIntDoc = lNumIntDoc
            
            lErro = CF("PedidoDeVenda_Le_Todos", objPV)
            If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 205336
            
            objMapa.colDocs.Add objPV
    
            'Busca Primeiro
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205337
            
        Loop
        
    Next

    'Fecha Comando
    Call Comando_Fechar(lComando)

    MapaDeEntrega_Le_PVs = SUCESSO

    Exit Function

Erro_MapaDeEntrega_Le_PVs:

    MapaDeEntrega_Le_PVs = gErr

    Select Case gErr

        Case 205333
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205334, 205335, 205337
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOVENDA", gErr)
            
        Case 205336

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205338)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CamposGenericos_ValidaExclusao_TiposDeVeiculos() As Long

Dim lComando As Long
Dim lErro As Long
Dim lCodigo As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_TiposDeVeiculos
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205143
    
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM Veiculos WHERE Tipo NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Tipo <> 0", lCodigo, CAMPOSGENERICOS_TIPOS_VEICULOS)
    If lErro <> AD_SQL_SUCESSO Then gError 205144
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205145
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 205146
        
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_TiposDeVeiculos = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_TiposDeVeiculos:

    CamposGenericos_ValidaExclusao_TiposDeVeiculos = gErr
    
    Select Case gErr
    
        Case 205143
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 205144, 205145
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTAS", gErr)
        
        Case 205146
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPO_DE_VEICULO", gErr, lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205147)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function Veiculos_Le(ByVal objVeiculos As ClassVeiculos) As Long

Dim lErro As Long
Dim lComando As Long
Dim tVeiculos As typeVeiculos

On Error GoTo Erro_Veiculos_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205266

    'Alocação de espaço no buffer
    tVeiculos.sDescricao = String(STRING_VEICULO_DESCRICAO, 0)
    tVeiculos.sPlaca = String(STRING_VEICULO_PLACA, 0)
    tVeiculos.sPlacaUF = String(STRING_VEICULO_PLACA_UF, 0)

    'Le a tabelaVeiculos
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, Tipo, Proprio, Placa, PlacaUF, CapacidadeKg, " & _
                "VolumeM3, CustoHora, DispPadraoDe, DispPadraoAte FROM Veiculos WHERE Codigo= ? ", _
                tVeiculos.lCodigo, tVeiculos.sDescricao, tVeiculos.lTipo, tVeiculos.iProprio, _
                tVeiculos.sPlaca, tVeiculos.sPlacaUF, tVeiculos.dCapacidadeKg, tVeiculos.dVolumeM3, tVeiculos.dCustoHora, tVeiculos.dDispPadraoDe, _
                tVeiculos.dDispPadraoAte, _
                objVeiculos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 205267

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205268

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objVeiculos.lCodigo = tVeiculos.lCodigo
    objVeiculos.sDescricao = tVeiculos.sDescricao
    objVeiculos.lTipo = tVeiculos.lTipo
    objVeiculos.iProprio = tVeiculos.iProprio
    objVeiculos.sPlaca = tVeiculos.sPlaca
    objVeiculos.sPlacaUF = tVeiculos.sPlacaUF
    objVeiculos.dCapacidadeKg = tVeiculos.dCapacidadeKg
    objVeiculos.dVolumeM3 = tVeiculos.dVolumeM3
    objVeiculos.dCustoHora = tVeiculos.dCustoHora
    objVeiculos.dDispPadraoDe = tVeiculos.dDispPadraoDe
    objVeiculos.dDispPadraoAte = tVeiculos.dDispPadraoAte

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Veiculos_Le = SUCESSO

    Exit Function

Erro_Veiculos_Le:

    Veiculos_Le = gErr

    Select Case gErr

        Case 205266
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205267, 205268
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VEICULOS", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205270)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function MapaDeEntrega_Le(ByVal objMapaDeEntrega As ClassMapaDeEntrega, Optional ByVal bLeNFs As Boolean = False) As Long

Dim lErro As Long
Dim lComando As Long
Dim tMapaDeEntrega As typeMapaDeEntrega

On Error GoTo Erro_MapaDeEntrega_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205339

    'Alocação de espaço no buffer
    tMapaDeEntrega.sResponsavel = String(STRING_MAPA_RESPONSAVEL, 0)

    'Le a tabelaMapaDeEntrega
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, Codigo, Data, Regiao, Veiculo, " & _
                "VolumeTotal, PesoTotal, NumViagens, HoraSaida, HoraRetorno, Responsavel, TipoDoc, Transportadora FROM MapaDeEntrega WHERE FilialEmpresa= ?  AND Codigo= ? ", _
                tMapaDeEntrega.lNumIntDoc, tMapaDeEntrega.iFilialEmpresa, tMapaDeEntrega.lCodigo, tMapaDeEntrega.dtData, _
                tMapaDeEntrega.iRegiao, tMapaDeEntrega.lVeiculo, tMapaDeEntrega.dVolumeTotal, tMapaDeEntrega.dPesoTotal, tMapaDeEntrega.iNumViagens, _
                tMapaDeEntrega.dHoraSaida, tMapaDeEntrega.dHoraRetorno, tMapaDeEntrega.sResponsavel, tMapaDeEntrega.iTipoDoc, tMapaDeEntrega.iTransportadora, _
                objMapaDeEntrega.iFilialEmpresa, objMapaDeEntrega.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 205340

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205341

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objMapaDeEntrega.lNumIntDoc = tMapaDeEntrega.lNumIntDoc
    objMapaDeEntrega.iFilialEmpresa = tMapaDeEntrega.iFilialEmpresa
    objMapaDeEntrega.lCodigo = tMapaDeEntrega.lCodigo
    objMapaDeEntrega.dtData = tMapaDeEntrega.dtData
    objMapaDeEntrega.iRegiao = tMapaDeEntrega.iRegiao
    objMapaDeEntrega.lVeiculo = tMapaDeEntrega.lVeiculo
    objMapaDeEntrega.dVolumeTotal = tMapaDeEntrega.dVolumeTotal
    objMapaDeEntrega.dPesoTotal = tMapaDeEntrega.dPesoTotal
    objMapaDeEntrega.iNumViagens = tMapaDeEntrega.iNumViagens
    objMapaDeEntrega.dHoraSaida = tMapaDeEntrega.dHoraSaida
    objMapaDeEntrega.dHoraRetorno = tMapaDeEntrega.dHoraRetorno
    objMapaDeEntrega.sResponsavel = tMapaDeEntrega.sResponsavel
    objMapaDeEntrega.iTipoDoc = tMapaDeEntrega.iTipoDoc
    objMapaDeEntrega.iTransportadora = tMapaDeEntrega.iTransportadora
    
    If bLeNFs Then
    
        If objMapaDeEntrega.iTipoDoc = MAPAENTREGA_TIPODOC_PV Then
            lErro = MapaDeEntregaPV_Le(objMapaDeEntrega)
        Else
            lErro = MapaDeEntregaNF_Le(objMapaDeEntrega)
        End If
        If lErro <> SUCESSO Then gError 205342
    End If

    'Fecha Comando
    Call Comando_Fechar(lComando)

    MapaDeEntrega_Le = SUCESSO

    Exit Function

Erro_MapaDeEntrega_Le:

    MapaDeEntrega_Le = gErr

    Select Case gErr

        Case 205339
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205340, 205341
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)
            
        Case 205342

        Case ERRO_LEITURA_SEM_DADOS

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205343)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function MapaDeEntregaNF_Le(ByVal objMapaDeEntrega As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim lComando As Long
Dim tMapaDeEntregaNF As typeMapaDeEntregaDoc
Dim objMapaDeEntregaNF As ClassMapaDeEntregaDoc
Dim objNF As ClassNFiscal

On Error GoTo Erro_MapaDeEntregaNF_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205339

    'Le a tabelaMapaDeEntregaNF
    lErro = Comando_Executar(lComando, "SELECT NumIntDocMapa, NumIntDocNF, Seq FROM MapaDeEntregaNF WHERE NumIntDocMapa= ? ORDER BY Seq ", _
                tMapaDeEntregaNF.lNumIntDocMapa, tMapaDeEntregaNF.lNumIntDoc, tMapaDeEntregaNF.lSeq, _
                objMapaDeEntrega.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205340

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205341

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objMapaDeEntregaNF = New ClassMapaDeEntregaDoc
        Set objNF = New ClassNFiscal

        objMapaDeEntregaNF.lNumIntDocMapa = tMapaDeEntregaNF.lNumIntDocMapa
        objMapaDeEntregaNF.lNumIntDoc = tMapaDeEntregaNF.lNumIntDoc
        objMapaDeEntregaNF.lSeq = tMapaDeEntregaNF.lSeq

        objNF.lNumIntDoc = objMapaDeEntregaNF.lNumIntDoc
        
        lErro = CF("NFiscal_Le", objNF)
        If lErro <> SUCESSO And lErro <> 31442 Then gError 205342
        
        If lErro = SUCESSO And objNF.iStatus <> STATUS_CANCELADO Then
            objMapaDeEntrega.colDocs.Add objNF
            objMapaDeEntrega.colMapaDoc.Add objMapaDeEntregaNF
        End If

        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205341
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    MapaDeEntregaNF_Le = SUCESSO

    Exit Function

Erro_MapaDeEntregaNF_Le:

    MapaDeEntregaNF_Le = gErr

    Select Case gErr

        Case 205339
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205340, 205341
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGANF", gErr)

        Case 205342

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205343)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function MapaDeEntregaPV_Le(ByVal objMapaDeEntrega As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim lComando As Long
Dim tMapaDeEntregaPV As typeMapaDeEntregaDoc
Dim objMapaDeEntregaPV As ClassMapaDeEntregaDoc
Dim objPV As ClassPedidoDeVenda

On Error GoTo Erro_MapaDeEntregaPV_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205339

    'Le a tabelaMapaDeEntregaPV
    lErro = Comando_Executar(lComando, "SELECT NumIntDocMapa, NumIntDocPV, Seq FROM MapaDeEntregaPV WHERE NumIntDocMapa= ? ORDER BY Seq ", _
                tMapaDeEntregaPV.lNumIntDocMapa, tMapaDeEntregaPV.lNumIntDoc, tMapaDeEntregaPV.lSeq, _
                objMapaDeEntrega.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205340

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205341

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objMapaDeEntregaPV = New ClassMapaDeEntregaDoc
        Set objPV = New ClassPedidoDeVenda

        objMapaDeEntregaPV.lNumIntDocMapa = tMapaDeEntregaPV.lNumIntDocMapa
        objMapaDeEntregaPV.lNumIntDoc = tMapaDeEntregaPV.lNumIntDoc
        objMapaDeEntregaPV.lSeq = tMapaDeEntregaPV.lSeq

        objPV.lNumIntDoc = objMapaDeEntregaPV.lNumIntDoc
        
        lErro = CF("PedidoDeVenda_Le_Todos", objPV)
        If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 205342
        
        If lErro = SUCESSO Then
            objMapaDeEntrega.colDocs.Add objPV
            objMapaDeEntrega.colMapaDoc.Add objMapaDeEntregaPV
        End If

        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205341
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    MapaDeEntregaPV_Le = SUCESSO

    Exit Function

Erro_MapaDeEntregaPV_Le:

    MapaDeEntregaPV_Le = gErr

    Select Case gErr

        Case 205339
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205340, 205341
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MapaDeEntregaPV", gErr)

        Case 205342

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205343)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function Veiculos_le_UltViagem(ByVal lVeiculo As Long, ByVal dtData As Date, lUltViagem As Long, dHoraRetorno As Double) As Long

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_Veiculos_le_UltViagem

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205371
    
    lUltViagem = 0
    dHoraRetorno = 0

    'Le a tabela MapaDeEntrega
    lErro = Comando_Executar(lComando, "SELECT Codigo, HoraRetorno FROM MapaDeEntrega WHERE Veiculo= ? AND Data = ? ORDER BY HoraRetorno Desc ", _
                lUltViagem, dHoraRetorno, lVeiculo, dtData)
    If lErro <> AD_SQL_SUCESSO Then gError 205372

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205373
        
    'Fecha Comando
    Call Comando_Fechar(lComando)

    Veiculos_le_UltViagem = SUCESSO

    Exit Function

Erro_Veiculos_le_UltViagem:

    Veiculos_le_UltViagem = gErr

    Select Case gErr

        Case 205371
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205372, 205373
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205374)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Public Function Veiculos_Le_Capacidade_Prox(ByVal objVeiculo As ClassVeiculos, ByVal dPeso As Double, ByVal dVolume As Double) As Long

Dim lErro As Long
Dim lComando As Long
Dim lVeiculo As Long

On Error GoTo Erro_Veiculos_Le_Capacidade_Prox

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 205375

    'Le a tabela MapaDeEntrega
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM Veiculos WHERE (CapacidadeKg >= ? OR CapacidadeKg = 0) AND (VolumeM3 >= ? OR VolumeM3 = 0) AND (CapacidadeKg <> 0 OR VolumeM3 <> 0) ORDER BY CapacidadeKg,VolumeM3 ", _
                 lVeiculo, dPeso, dVolume)
    If lErro <> AD_SQL_SUCESSO Then gError 205376

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205377
    
    If lErro <> AD_SQL_SUCESSO Then gError ERRO_LEITURA_SEM_DADOS
    
    objVeiculo.lCodigo = lVeiculo
        
    'Fecha Comando
    Call Comando_Fechar(lComando)

    Veiculos_Le_Capacidade_Prox = SUCESSO

    Exit Function

Erro_Veiculos_Le_Capacidade_Prox:

    Veiculos_Le_Capacidade_Prox = gErr

    Select Case gErr

        Case 205375
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205376, 205377
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VEICULOS", gErr)
            
        Case ERRO_LEITURA_SEM_DADOS

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205378)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Public Function CamposGenericos_ValidaExclusao_MotivoRelacCli() As Long
'Verifica se é válida a exclusão de valores para o campo Requisitante

Dim lComando As Long
Dim lErro As Long
Dim lMotivo As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_MotivoRelacCli
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 182363
    
    'Busca Tipos de Paradas em CTMaquinasParadas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Motivo FROM RelacionamentoClientes WHERE Motivo NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Motivo <> 0", lMotivo, CAMPOSGENERICOS_RELACCLI_MOTIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 182364
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182365
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 182366

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_MotivoRelacCli = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_MotivoRelacCli:

    CamposGenericos_ValidaExclusao_MotivoRelacCli = gErr
    
    Select Case gErr
    
        Case 182363
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 182364, 182365
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELACIONAMENTOCLIENTES", gErr)
        
        Case 182366
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, lMotivo, CAMPOSGENERICOS_RELACCLI_MOTIVO)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 182367)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Verifica_Bloqueios_Filial(ByVal iFilialEmpresa As Integer, bBloqueio As Boolean, iFilialAux As Integer) As Long
        
    bBloqueio = False
    iFilialAux = iFilialEmpresa

    Verifica_Bloqueios_Filial = SUCESSO

End Function

Function GeracaoRPSWEB_SelecionarItens(ByVal iFilialEmpresa As Integer, ByVal objGeracaoNFe As ClassGeracaoNFe, ByVal colNFe1 As Collection) As Long
'pesquisa no bd os itens candidatos preenchendo colNFe1 a partir das outras informacoes em

Dim lErro As Long, lComando As Long, sSelect As String, iStatusNaoAtendido As Integer
Dim lNumIntNF As Long, lNumNotaFiscal As Long, dtDataEmissao As Date, sSigla As String
Dim sSerie As String, lCliente As Long, sClienteNomeReduzido As String, iFilialCli As Integer
Dim lFornecedor As Long, sFornecedorNomeReduzido As String, iFilialForn As Integer
Dim dValorTotal As Double
Dim lComando1 As Long
Dim iRPSAmbiente As Long

On Error GoTo Erro_GeracaoRPSWEB_SelecionarItens

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 204934

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 204977

    lErro = Comando_Executar(lComando1, "SELECT RPSAmbiente FROM FiliaisEmpresa WHERE FilialEmpresa = ?", _
        iRPSAmbiente, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 204978
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 204979
    
    Call GeracaoRPSWEB_SelecionarItens1(objGeracaoNFe, sSelect, iFilialEmpresa, iRPSAmbiente)

    sSerie = String(STRING_SERIE, 0)
    sSigla = String(STRING_TIPO_DOC_INFO_SIGLA, 0)
    sClienteNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    sFornecedorNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
        
    'executa a preparacao da parte fixa do SELECT
    lErro = GeracaoRPSWEB_SelecionarItens2(lComando, sSelect, _
    lNumIntNF, sSerie, lNumNotaFiscal, dtDataEmissao, sSigla, lCliente, sClienteNomeReduzido, iFilialCli, _
    lFornecedor, sFornecedorNomeReduzido, iFilialForn, dValorTotal)
    If lErro <> SUCESSO Then gError 204935

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT
    lErro = GeracaoRPSWEB_SelecionarItens3(iFilialEmpresa, lComando, objGeracaoNFe)
    If lErro <> SUCESSO Then gError 204936

    'processa todos os registros retornados pelo SELECT executado acima
    lErro = GeracaoRPSWEB_SelecionarItens4(lComando, objGeracaoNFe, _
        lNumIntNF, sSerie, lNumNotaFiscal, dtDataEmissao, _
        sSigla, lCliente, sClienteNomeReduzido, iFilialCli, lFornecedor, sFornecedorNomeReduzido, iFilialForn, dValorTotal, colNFe1, iFilialEmpresa, iRPSAmbiente)
    If lErro <> SUCESSO Then gError 204937

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)

    GeracaoRPSWEB_SelecionarItens = SUCESSO

    Exit Function

Erro_GeracaoRPSWEB_SelecionarItens:

    GeracaoRPSWEB_SelecionarItens = gErr

    Select Case gErr

        Case 204934, 204977
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 204935 To 204937

        Case 204978, 204979
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALEMPRESA", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 204938)

    End Select

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)

    Exit Function

End Function

Private Sub GeracaoRPSWEB_SelecionarItens1(ByVal objGeracaoNFe As ClassGeracaoNFe, sSelect As String, ByVal iFilialEmpresa As Integer, ByVal iRPSAmbiente As Integer)
'auxiliar a GeracaoOP_SelecionarItens
'monta o SELECT para obtencao dos itens dinamicamente.

Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

        sFields = "NFiscal.NumIntDoc, NFiscal.Serie, NFiscal.NumNotaFiscal, NFiscal.DataEmissao, TiposDocInfo.Sigla, NFiscal.Cliente, Clientes.NomeReduzido, NFiscal.FilialCli, "
        sFields = sFields & " NFiscal.Fornecedor, Fornecedores.NomeReduzido, NFiscal.FilialForn, NFiscal.ValorTotal "
    '
        sFrom = " FROM NFiscal INNER JOIN TiposDocInfo ON NFiscal.TipoNFiscal = TiposDocInfo.Codigo LEFT OUTER JOIN Clientes ON NFiscal.Cliente = Clientes.Codigo "
        sFrom = sFrom & "LEFT OUTER JOIN Fornecedores ON NFiscal.Fornecedor = Fornecedores.Codigo"

        sWhere = " WHERE NFiscal.RPS = 1 AND NFiscal.FilialEmpresa = ? AND NFiscal.Status <> ? AND (TiposDocInfo.Tipo = 1 Or TiposDocInfo.Tipo = 2) AND NFiscal.DataEmissao >= ? "

    If objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_NAO_ENVIADOS Then
        
        sWhere = sWhere & " AND NOT EXISTS (Select * FROM RPSWEBLote WHERE NumIntNF = NFiscal.NumIntDoc)"

    ElseIf objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_NAO_ACEITOS Then
    
        sWhere = sWhere & " AND EXISTS (Select * FROM RPSWEBLote WHERE NumIntNF = NFiscal.NumIntDoc AND FilialEmpresa = " & CStr(iFilialEmpresa) & " ) "
        sWhere = sWhere & " AND NOT EXISTS (Select * FROM RPSWEBProt WHERE NumIntNF = NFiscal.NumIntDoc AND FilialEmpresa = " & CStr(iFilialEmpresa) & " AND Ambiente = " & CStr(iRPSAmbiente) & " )"
    
    Else
    
        sWhere = sWhere & " AND NOT EXISTS (Select * FROM RPSWEBProt WHERE NumIntNF = NFiscal.NumIntDoc AND FilialEmpresa = " & CStr(iFilialEmpresa) & " AND Ambiente = " & CStr(iRPSAmbiente) & " )"

    End If

    If (Len(Trim(objGeracaoNFe.sSerieDe)) <> 0) Then
       sWhere = sWhere & " AND NFiscal.Serie >= ?"
    End If

    If (Len(Trim(objGeracaoNFe.sSerieAte)) <> 0) Then
       sWhere = sWhere & " AND NFiscal.Serie <= ?"
    End If

    If (objGeracaoNFe.lNFiscalDe <> 0) Then
       sWhere = sWhere & " AND NFiscal.NumNotaFiscal >= ?"
    End If

    If (objGeracaoNFe.lNFiscalAte <> 0) Then
       sWhere = sWhere & " AND NFiscal.NumNotaFiscal <= ?"
    End If

    If (objGeracaoNFe.lClienteDe <> 0) Then
       sWhere = sWhere & " AND NFiscal.Cliente >= ?"
    End If

    If (objGeracaoNFe.lClienteAte <> 0) Then
       sWhere = sWhere & " AND NFiscal.Cliente <= ?"
    End If

    If (objGeracaoNFe.lFornecedorDe <> 0) Then
       sWhere = sWhere & " AND NFiscal.Fornecedor >= ?"
    End If

    If (objGeracaoNFe.lFornecedorAte <> 0) Then
       sWhere = sWhere & " AND NFiscal.Fornecedor <= ?"
    End If

    If (objGeracaoNFe.dtEmissaoDe <> DATA_NULA) Then
       sWhere = sWhere & " AND NFiscal.DataEmissao >= ?"
    End If

    If (objGeracaoNFe.dtEmissaoAte <> DATA_NULA) Then
       sWhere = sWhere & " AND NFiscal.DataEmissao <= ?"
    End If


    sOrderBy = " ORDER BY " & objGeracaoNFe.sOrdenacao

    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function GeracaoRPSWEB_SelecionarItens2(ByVal lComando As Long, ByVal sSelect As String, _
    vNumIntNF As Variant, _
    vSerie As Variant, vNumNotaFiscal As Variant, _
    vDataEmissao As Variant, vSigla As Variant, _
    vCliente As Variant, vCliNomeRed As Variant, _
    vFilialCli As Variant, vFornecedor As Variant, _
    vFornNomeRed As Variant, vFilialForn As Variant, vValorTotal) As Integer

'isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de GeracaoOP_SelecionarItens
Dim RET As Integer, lErro As Long

On Error GoTo Erro_GeracaoRPSWEB_SelecionarItens2

    RET = Comando_PrepararInt(lComando, sSelect)
    If (RET <> AD_SQL_SUCESSO) Then gError 204939

    RET = Comando_BindVarInt(lComando, vNumIntNF)
    If (RET <> AD_SQL_SUCESSO) Then gError 204940

    RET = Comando_BindVarInt(lComando, vSerie)
    If (RET <> AD_SQL_SUCESSO) Then gError 204941

    RET = Comando_BindVarInt(lComando, vNumNotaFiscal)
    If (RET <> AD_SQL_SUCESSO) Then gError 204942

    RET = Comando_BindVarInt(lComando, vDataEmissao)
    If (RET <> AD_SQL_SUCESSO) Then gError 204943

    RET = Comando_BindVarInt(lComando, vSigla)
    If (RET <> AD_SQL_SUCESSO) Then gError 204944

    RET = Comando_BindVarInt(lComando, vCliente)
    If (RET <> AD_SQL_SUCESSO) Then gError 204945

    RET = Comando_BindVarInt(lComando, vCliNomeRed)
    If (RET <> AD_SQL_SUCESSO) Then gError 204946

    RET = Comando_BindVarInt(lComando, vFilialCli)
    If (RET <> AD_SQL_SUCESSO) Then gError 204947

    RET = Comando_BindVarInt(lComando, vFornecedor)
    If (RET <> AD_SQL_SUCESSO) Then gError 204948

    RET = Comando_BindVarInt(lComando, vFornNomeRed)
    If (RET <> AD_SQL_SUCESSO) Then gError 204949

    RET = Comando_BindVarInt(lComando, vFilialForn)
    If (RET <> AD_SQL_SUCESSO) Then gError 204950
    
    RET = Comando_BindVarInt(lComando, vValorTotal)
    If (RET <> AD_SQL_SUCESSO) Then gError 204951
    
    GeracaoRPSWEB_SelecionarItens2 = SUCESSO

    Exit Function

Erro_GeracaoRPSWEB_SelecionarItens2:

    GeracaoRPSWEB_SelecionarItens2 = gErr

    Select Case gErr

        Case 204939 To 204951
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 204952)

    End Select

    Exit Function

End Function

Private Function GeracaoRPSWEB_SelecionarItens3(ByVal iFilialEmpresa As Integer, ByVal lComando As Long, ByVal objGeracaoNFe As ClassGeracaoNFe) As Long

Dim lErro As Long, RET As Integer, vFilialEmpresa As Variant, vSerieDe As Variant, vSerieAte As Variant
Dim vNFiscalDe As Variant, vNFiscalAte As Variant
Dim vClienteDe As Variant, vClienteAte As Variant, vFornecedorDe As Variant, vFornecedorAte As Variant
Dim vEmissaoDe As Variant, vEmissaoAte As Variant
Dim vStatus As Variant, vDataMinima As Variant

On Error GoTo Erro_GeracaoRPSWEB_SelecionarItens3

    vFilialEmpresa = iFilialEmpresa
    RET = Comando_BindVarInt(lComando, vFilialEmpresa)
    If (RET <> AD_SQL_SUCESSO) Then gError 204953

    vStatus = STATUS_CANCELADO
    RET = Comando_BindVarInt(lComando, vStatus)
    If (RET <> AD_SQL_SUCESSO) Then gError 204954

    vDataMinima = DateAdd("m", -3, Date)
    RET = Comando_BindVarInt(lComando, vDataMinima)
    If (RET <> AD_SQL_SUCESSO) Then gError 204954

    If Len(Trim(objGeracaoNFe.sSerieDe)) > 0 Then
        vSerieDe = objGeracaoNFe.sSerieDe
        RET = Comando_BindVarInt(lComando, vSerieDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 204955
    End If

    If Len(Trim(objGeracaoNFe.sSerieAte)) > 0 Then
        vSerieAte = objGeracaoNFe.sSerieAte
        RET = Comando_BindVarInt(lComando, vSerieAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 204956
    End If

    If (objGeracaoNFe.lNFiscalDe <> 0) Then
        vNFiscalDe = objGeracaoNFe.lNFiscalDe
        RET = Comando_BindVarInt(lComando, vNFiscalDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 204957
    End If

    If (objGeracaoNFe.lNFiscalAte <> 0) Then
        vNFiscalAte = objGeracaoNFe.lNFiscalAte
        RET = Comando_BindVarInt(lComando, vNFiscalAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 204958
    End If

    If (objGeracaoNFe.lClienteDe <> 0) Then
        vClienteDe = objGeracaoNFe.lClienteDe
        RET = Comando_BindVarInt(lComando, vClienteDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 204959
    End If

    If (objGeracaoNFe.lClienteAte <> 0) Then
        vClienteAte = objGeracaoNFe.lClienteAte
        RET = Comando_BindVarInt(lComando, vClienteAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 204960
    End If

    If (objGeracaoNFe.lFornecedorDe <> 0) Then
        vFornecedorDe = objGeracaoNFe.lFornecedorDe
        RET = Comando_BindVarInt(lComando, vFornecedorDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 204961
    End If

    If (objGeracaoNFe.lFornecedorAte <> 0) Then
        vFornecedorAte = objGeracaoNFe.lFornecedorAte
        RET = Comando_BindVarInt(lComando, vFornecedorAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 204962
    End If

    If (objGeracaoNFe.dtEmissaoDe <> DATA_NULA) Then
        vEmissaoDe = objGeracaoNFe.dtEmissaoDe
        RET = Comando_BindVarInt(lComando, vEmissaoDe)
        If (RET <> AD_SQL_SUCESSO) Then gError 204963
    End If

    If (objGeracaoNFe.dtEmissaoAte <> DATA_NULA) Then
        vEmissaoAte = objGeracaoNFe.dtEmissaoAte
        RET = Comando_BindVarInt(lComando, vEmissaoAte)
        If (RET <> AD_SQL_SUCESSO) Then gError 204964
    End If


    RET = Comando_ExecutarInt(lComando)
    If (RET <> AD_SQL_SUCESSO) Then gError 204965

    GeracaoRPSWEB_SelecionarItens3 = SUCESSO

    Exit Function

Erro_GeracaoRPSWEB_SelecionarItens3:

    GeracaoRPSWEB_SelecionarItens3 = gErr

    Select Case gErr
        
        Case 204953 To 204965
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 204966)

    End Select

    Exit Function

End Function

Private Function GeracaoRPSWEB_SelecionarItens4(ByVal lComando As Long, ByVal objGeracaoNFe As ClassGeracaoNFe, _
        lNumIntNF As Long, sSerie As String, lNumNotaFiscal As Long, dtDataEmissao As Date, sSigla As String, _
        lCliente As Long, sClienteNomeReduzido As String, iFilialCli As Integer, _
        lFornecedor As Long, sFornecedorNomeReduzido As String, iFilialForn As Integer, dValorTotal As Double, _
        colNFe1 As Collection, ByVal iFilialEmpresa As Integer, ByVal iRPSAmbiente As Integer) As Long

Dim lErro As Long, objNFe1 As ClassNFe1
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim lLote As Long
Dim sMsg As String
Dim sStatus As String
Dim iSituacao As Integer

On Error GoTo Erro_GeracaoRPSWEB_SelecionarItens4

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 204967
    Next

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204968

    Do While lErro = AD_SQL_SUCESSO

        Set objNFe1 = New ClassNFe1

        objNFe1.objNFiscal.lNumIntDoc = lNumIntNF
        objNFe1.objNFiscal.sSerie = sSerie
        objNFe1.objNFiscal.lNumNotaFiscal = lNumNotaFiscal
        objNFe1.objNFiscal.dtDataEmissao = dtDataEmissao
        objNFe1.sTipoNFiscal = sSigla
        objNFe1.objNFiscal.lCliente = lCliente
        objNFe1.sClienteNomeReduzido = sClienteNomeReduzido
        objNFe1.objNFiscal.iFilialCli = iFilialCli
        objNFe1.objNFiscal.lFornecedor = lFornecedor
        objNFe1.sFornecedorNomeReduzido = sFornecedorNomeReduzido
        objNFe1.objNFiscal.iFilialForn = iFilialForn
        objNFe1.objNFiscal.dValorTotal = dValorTotal
        
        If objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_NAO_ACEITOS Or objGeracaoNFe.iOpcaoNFiscais = GERACAONFE_AMBOS Then
        
            lErro = Comando_Executar(alComando(1), "SELECT Lote FROM RPSWEBLote WHERE FilialEmpresa = ? AND NumIntNF = ? ORDER BY Lote DESC", lLote, iFilialEmpresa, lNumIntNF)
            If lErro <> AD_SQL_SUCESSO Then gError 204969
        
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204970
            
            If lErro = AD_SQL_SUCESSO Then
                    
                objNFe1.lLote = lLote
                    
                sMsg = String(STRING_RPWSEBCONSSITLOTE_MSG, 0)
                    
                '******* verifica a situacao do lote **********
                lErro = Comando_Executar(alComando(2), "SELECT  Situacao, Msg FROM RPSWEBConsSitLote WHERE FilialEmpresa = ? AND Ambiente = ? AND Lote = ? ORDER BY Data DESC, Hora DESC", iSituacao, sMsg, iFilialEmpresa, iRPSAmbiente, lLote)
                If lErro <> AD_SQL_SUCESSO Then gError 204971
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204972
                    
                If lErro = AD_SQL_SUCESSO Then
                
                    'se nao foi enviado ou nao foi processado o lote
                    If iSituacao = 1 Or iSituacao = 3 Then
                
                        '**** retorna o motivo do envio/nao envio do lote *******
                        objNFe1.sStatus = sMsg
                    
                    Else
                    
                    
                        sStatus = String(STRING_RPSWEBLOTELOG_STATUS, 0)
                    
                        '******* verifica a situacao do lote **********
                        lErro = Comando_Executar(alComando(3), "SELECT  Status FROM RPSWEBLoteLog WHERE FilialEmpresa = ? AND Ambiente = ? AND Lote = ? AND NumIntNF = ? ORDER BY Data DESC, Hora DESC", sStatus, iFilialEmpresa, iRPSAmbiente, lLote, lNumIntNF)
                        If lErro <> AD_SQL_SUCESSO Then gError 204973
                    
                        lErro = Comando_BuscarPrimeiro(alComando(3))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204974
                    
                        If lErro = AD_SQL_SUCESSO Then
                        
                            objNFe1.sStatus = sStatus
                            
                        End If
                    
                    End If
                    
                End If

            End If
        
        End If
        
        
        colNFe1.Add objNFe1
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204975

    Loop

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    GeracaoRPSWEB_SelecionarItens4 = SUCESSO

    Exit Function

Erro_GeracaoRPSWEB_SelecionarItens4:

    GeracaoRPSWEB_SelecionarItens4 = gErr

    Select Case gErr

        Case 204967
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 204968, 204975
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 204969, 204970
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPSWEBLOTE", gErr)

        Case 204971, 204972
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPSWEBCONSSITLOTE", gErr)

        Case 204973, 204974
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPSWEBLOTELOG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 204976)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Verifica_NFiscal_Servico_Eletronica(objNFiscal As ClassNFiscal, iNFSE As Integer) As Long

Dim iRPSEletronica As Integer
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim lErro As Long

On Error GoTo Erro_Verifica_NFiscal_Servico_Eletronica

'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 207053
'    Next

    iNFSE = 0

    If objNFiscal.iRecibo = 1 And gobjCRFAT.iUsaNFSE = 1 Then
    
'        lErro = Comando_Executar(alComando(1), "SELECT RPSEletronica FROM FiliaisEmpresa WHERE FilialEmpresa = ?", _
'            iRPSEletronica, objNFiscal.iFilialEmpresa)
'        If lErro <> AD_SQL_SUCESSO Then gError 207054
'
'        lErro = Comando_BuscarPrimeiro(alComando(1))
'        If lErro <> AD_SQL_SUCESSO Then gError 207055
    
'        If iRPSEletronica = 1 Then iNFSE = 1
    
        iNFSE = 1
    
    End If

'    'Fecha o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next

    Verifica_NFiscal_Servico_Eletronica = SUCESSO
    
    Exit Function
    
Erro_Verifica_NFiscal_Servico_Eletronica:

    Verifica_NFiscal_Servico_Eletronica = gErr

    Select Case gErr

        Case 207053
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 207054, 207055
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALEMPRESA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207056)

    End Select


    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Function NFiscal_Testa_Numero(objNFiscal As ClassNFiscal) As Long
'testa se tem numeracao abaixo com data posterior
' ou numeracao acima com data anterior

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim lNumNF As Long, dtDataEmissao As Date
Dim objTipoDocInfo As New ClassTipoDocInfo

On Error GoTo Erro_NFiscal_Testa_Numero

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 206616
    Next

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
     
    'Le o Tipo para saber se tem Movimento de Estoque
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 207632

    'se for uma nota interna ==> faz os testes
    If objTipoDocInfo.iEmitente = EMITENTE_EMPRESA Then

        If gobjCRFAT.iNaoTestarNFe = 0 And objNFiscal.iNumNFManual = 0 And ((objNFiscal.iTipoNFiscal <> DOCINFO_NFISVFE And objNFiscal.iTipoNFiscal <> DOCINFO_NFISFVFE) Or gobjFAT.iVFEUsaTManual = DESMARCADO) Then
    
            'Procura NF com a mesma série e filial empresa e numeração abaixo com data posterior
            lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, DataEmissao FROM NFiscalTipoDocInfo WHERE FilialEmpresa = ? AND Serie = ? AND DataEmissao > ? AND NumNotaFiscal < ? AND Emitente = ? AND Status <> ?", _
                lNumNF, dtDataEmissao, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.dtDataEmissao, objNFiscal.lNumNotaFiscal, EMITENTE_EMPRESA, STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 206617
        
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206618
            
            If lErro = AD_SQL_SUCESSO Then gError 206619
        
            'Procura NF com a mesma série e filial empresa e numeração acima com data anterior
            lErro = Comando_Executar(alComando(2), "SELECT NumNotaFiscal, DataEmissao FROM NFiscalTipoDocInfo WHERE FilialEmpresa = ? AND Serie = ? AND DataEmissao < ? AND DataEmissao > ? AND NumNotaFiscal > ? AND Emitente = ? AND Status <> ?", _
                lNumNF, dtDataEmissao, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.dtDataEmissao, objNFiscal.dtDataEmissao - PERIODO_EMISSAO, objNFiscal.lNumNotaFiscal, EMITENTE_EMPRESA, STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 207579
        
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207580
            
            If lErro = AD_SQL_SUCESSO Then gError 207581

        End If

    End If

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscal_Testa_Numero = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Testa_Numero:

    NFiscal_Testa_Numero = gErr

    Select Case gErr

        Case 206616
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 206617, 206618, 207579, 207580
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
            
        Case 206619, 207581
            Call Rotina_Erro(vbOKOnly, "ERRO_NUMNF_INVALIDO", gErr, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, lNumNF, dtDataEmissao)

        Case 207632

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 206620)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function MnemonicoRegrasMsg_Le(ByVal colMnemonico As Collection, ByVal iTipoDoc As Integer) As Long
'retorna os mnemonicos

Dim lComando As Long
Dim tMnemonicoRegrasMsg As typeMnemonicoRegrasMsg
Dim lErro As Long
Dim objMnemonico As ClassMnemonicoRegrasMsg
Dim sTipo As String

On Error GoTo Erro_MnemonicoRegrasMsg_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 208243
    
    tMnemonicoRegrasMsg.sMnemonico = String(STRING_MNEMONICOCTB_MNEMONICO, 0)
    tMnemonicoRegrasMsg.sNomeGrid = String(STRING_NOME_CONTROLE, 0)
    tMnemonicoRegrasMsg.sMnemonicoCombo = String(STRING_MNEMONICOCTB_MNEMONICOCOMBO, 0)
    tMnemonicoRegrasMsg.sMnemonicoDesc = String(STRING_MNEMONICOCTB_MNEMONICODESC, 0)
    
    'seleciona os mnemonicos
    lErro = Comando_Executar(lComando, "SELECT Mnemonico, Tipo, NumParam, Param1, Param2, Param3, NomeGrid, MnemonicoCombo, MnemonicoDesc FROM MnemonicoRegrasMsg WHERE TipoDoc = ?", _
    tMnemonicoRegrasMsg.sMnemonico, tMnemonicoRegrasMsg.iTipo, tMnemonicoRegrasMsg.iNumParam, tMnemonicoRegrasMsg.iParam1, tMnemonicoRegrasMsg.iParam2, tMnemonicoRegrasMsg.iParam3, tMnemonicoRegrasMsg.sNomeGrid, tMnemonicoRegrasMsg.sMnemonicoCombo, tMnemonicoRegrasMsg.sMnemonicoDesc, iTipoDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 208244
    
    'le o primeiro mnemonico
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208245
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objMnemonico = New ClassMnemonicoRegrasMsg
    
        objMnemonico.sMnemonico = tMnemonicoRegrasMsg.sMnemonico
        objMnemonico.iTipo = tMnemonicoRegrasMsg.iTipo
        objMnemonico.iNumParam = tMnemonicoRegrasMsg.iNumParam
        objMnemonico.iParam1 = tMnemonicoRegrasMsg.iParam1
        objMnemonico.iParam2 = tMnemonicoRegrasMsg.iParam2
        objMnemonico.iParam3 = tMnemonicoRegrasMsg.iParam3
        objMnemonico.sNomeGrid = tMnemonicoRegrasMsg.sNomeGrid
        objMnemonico.sMnemonicoCombo = tMnemonicoRegrasMsg.sMnemonicoCombo
        objMnemonico.sMnemonicoDesc = tMnemonicoRegrasMsg.sMnemonicoDesc
        
        colMnemonico.Add objMnemonico
        
        'le o proximo mnemonico
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208246
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    MnemonicoRegrasMsg_Le = SUCESSO

    Exit Function

Erro_MnemonicoRegrasMsg_Le:

    MnemonicoRegrasMsg_Le = gErr
    
    Select Case gErr
    
        Case 208243
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 208244 To 208246
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MNEMONICOREGRASMSG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208247)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function RegrasMsg_Le(ByVal colRegras As Collection, ByVal iTipoDoc As Integer, Optional ByVal bSoEspecifico As Boolean = False) As Long

Dim lErro As Long
Dim lComando As Long
Dim tRegrasMsg As typeRegrasMsg
Dim objRegrasMsg As ClassRegrasMsg
Dim sFiltro As String

On Error GoTo Erro_RegrasMsg_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 208248

    'Alocação de espaço no buffer
    tRegrasMsg.sRegra1 = String(STRING_REGRAMSG, 0)
    tRegrasMsg.sRegra2 = String(STRING_REGRAMSG, 0)
    tRegrasMsg.sRegra3 = String(STRING_REGRAMSG, 0)
    tRegrasMsg.sRegra4 = String(STRING_REGRAMSG, 0)
    tRegrasMsg.sRegra5 = String(STRING_REGRAMSG, 0)
    tRegrasMsg.sMensagem = String(STRING_MENSAGEMREGRA, 0)
    
    If bSoEspecifico Then
        sFiltro = "AND Padrao = 0"
    Else
        sFiltro = ""
    End If

    'Le a tabelaRegrasMsg
    lErro = Comando_Executar(lComando, "SELECT TipoDoc, Seq, Regra1, Regra2, Regra3, Regra4, " & _
                "Regra5, Mensagem, TipoMsg FROM RegrasMsg WHERE TipoDoc= ? " & sFiltro & " ORDER BY TipoMsg, Seq", _
                tRegrasMsg.iTipoDoc, tRegrasMsg.iSeq, tRegrasMsg.sRegra1, tRegrasMsg.sRegra2, _
                tRegrasMsg.sRegra3, tRegrasMsg.sRegra4, tRegrasMsg.sRegra5, tRegrasMsg.sMensagem, _
                tRegrasMsg.iTipoMsg, iTipoDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 208249

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208250

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objRegrasMsg = New ClassRegrasMsg

        objRegrasMsg.iTipoDoc = iTipoDoc
        objRegrasMsg.iSeq = tRegrasMsg.iSeq
        objRegrasMsg.sRegra1 = tRegrasMsg.sRegra1
        objRegrasMsg.sRegra2 = tRegrasMsg.sRegra2
        objRegrasMsg.sRegra3 = tRegrasMsg.sRegra3
        objRegrasMsg.sRegra4 = tRegrasMsg.sRegra4
        objRegrasMsg.sRegra5 = tRegrasMsg.sRegra5
        objRegrasMsg.sMensagem = tRegrasMsg.sMensagem
        objRegrasMsg.iTipoMsg = tRegrasMsg.iTipoMsg
        
        colRegras.Add objRegrasMsg
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208251

    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    RegrasMsg_Le = SUCESSO

    Exit Function

Erro_RegrasMsg_Le:

    RegrasMsg_Le = gErr

    Select Case gErr

        Case 208248
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208249 To 208251
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REGRASMSG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208252)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function NFiscal_Le_Msg(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim colMsg As New Collection
Dim sMsg(0 To 1) As String
Dim objMsg As ClassMensagensRegra

On Error GoTo Erro_NFiscal_Le_Msg

    lErro = CF("MensagensRegra_Le", REGRAMSG_TIPODOC_NF, objNFiscal.lNumIntDoc, colMsg)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    If colMsg.Count > 0 Then
    
        For Each objMsg In colMsg
            sMsg(objMsg.iTipoMsg) = sMsg(objMsg.iTipoMsg) & objMsg.sMensagem
        Next
        
        objNFiscal.sMensagemNota = sMsg(REGRAMSG_TIPOMSG_NORMAL)
        objNFiscal.sMensagemCorpoNota = sMsg(REGRAMSG_TIPOMSG_CORPO)
        
        objNFiscal.sMensagemNota = Replace(objNFiscal.sMensagemNota, "|", vbNewLine)
        objNFiscal.sMensagemCorpoNota = Replace(objNFiscal.sMensagemCorpoNota, "|", vbNewLine)
    
    End If

    NFiscal_Le_Msg = SUCESSO

    Exit Function

Erro_NFiscal_Le_Msg:

    NFiscal_Le_Msg = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208264)

    End Select
    
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function MensagensRegra_Le(ByVal iTipoDoc As Integer, ByVal lNumIntDoc As Long, ByVal colMsg As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim tMensagensRegra As typeMensagensRegra
Dim objMensagensRegra As ClassMensagensRegra

On Error GoTo Erro_MensagensRegra_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 208265

    'Alocação de espaço no buffer
    tMensagensRegra.sMensagem = String(STRING_MENSAGEMREGRA, 0)

    'Le a tabelaMensagensRegra
    lErro = Comando_Executar(lComando, "SELECT TipoDoc, NumIntDoc, Seq, Mensagem, TipoMsg FROM MensagensRegra WHERE TipoDoc= ? AND NumIntDoc = ? ORDER BY Seq", _
                tMensagensRegra.iTipoDoc, tMensagensRegra.lNumIntDoc, tMensagensRegra.iSeq, tMensagensRegra.sMensagem, tMensagensRegra.iTipoMsg, _
                iTipoDoc, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 208266

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208267

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objMensagensRegra = New ClassMensagensRegra

        objMensagensRegra.iTipoDoc = tMensagensRegra.iTipoDoc
        objMensagensRegra.lNumIntDoc = tMensagensRegra.lNumIntDoc
        objMensagensRegra.iSeq = tMensagensRegra.iSeq
        objMensagensRegra.sMensagem = tMensagensRegra.sMensagem
        objMensagensRegra.iTipoMsg = tMensagensRegra.iTipoMsg
        
        colMsg.Add objMensagensRegra
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208268
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    MensagensRegra_Le = SUCESSO

    Exit Function

Erro_MensagensRegra_Le:

    MensagensRegra_Le = gErr

    Select Case gErr

        Case 208265
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208266 To 208268
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MENSAGENSREGRA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208269)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function TabelaPrecoGrupo_Le(ByVal objTabelaPrecoGrupo As ClassTabelaPrecoGrupo) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim sSQL As String, iIndice As Integer
Dim objTabelaPrecoGrupoItem As ClassTabelaPrecoGrupoItem
Dim sProduto As String, sDescricao As String, dPrecoAtual As Double, sUM As String
Dim sGrade As String, iKitVendaComp As Integer, bExibe As Boolean, bPaiGrade As Boolean
Dim objProduto As ClassProduto, sProdPai As String, iNivelPai As Integer, iNivel As Integer
Dim sProdutoAux As String, objTabelaPrecoItem As ClassTabelaPrecoItem, dtDataAux As Date

On Error GoTo Erro_TabelaPrecoGrupo_Le

    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208345
    Next
    
    If Len(Trim(objTabelaPrecoGrupo.sProdutoPai)) > 0 Then
    
        objTabelaPrecoGrupo.sProdutoDe = objTabelaPrecoGrupo.sProdutoPai
        objTabelaPrecoGrupo.sProdutoAte = objTabelaPrecoGrupo.sProdutoPai
    
        iNivel = Mascara_Produto_ObterNivel(objTabelaPrecoGrupo.sProdutoPai, iNivelPai)
        
        sProdutoAux = String(STRING_PRODUTO, 0)
    
        lErro = Comando_Executar(alComando(2), "SELECT Codigo, Nivel FROM Produtos WHERE Codigo > ? ORDER BY Codigo", sProdutoAux, iNivel, objTabelaPrecoGrupo.sProdutoPai)
        If lErro <> AD_SQL_SUCESSO Then gError 208368
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208369
   
        iIndice = 0
        Do While lErro <> AD_SQL_SEM_DADOS
    
            iIndice = iIndice + 1
            
            If iNivel <> iNivelPai + 1 Then Exit Do
            
            If iIndice = 1 Then
                objTabelaPrecoGrupo.sProdutoDe = sProdutoAux
            End If
            objTabelaPrecoGrupo.sProdutoAte = sProdutoAux
    
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208370
    
        Loop
    
    End If
    
    Call TabelaPrecoGrupo_PreparaSQL(objTabelaPrecoGrupo, sSQL)
    
    sProduto = String(STRING_PRODUTO, 0)
    sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    sUM = String(STRING_UM_SIGLA, 0)
    sGrade = String(STRING_GRADE_CODIGO, 0)

    lErro = TabelaPrecoGrupo_PreparaInt(alComando(1), sSQL, objTabelaPrecoGrupo, sProduto, sDescricao, sUM, sGrade, iKitVendaComp)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208346
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objTabelaPrecoGrupoItem = New ClassTabelaPrecoGrupoItem

        objTabelaPrecoGrupoItem.sDescricao = sDescricao
        objTabelaPrecoGrupoItem.sProduto = sProduto
        objTabelaPrecoGrupoItem.sUM = sUM
        
        bExibe = False
        
        If objTabelaPrecoGrupo.iGradeKitVenda = MARCADO Then
            If Len(Trim(sGrade)) > 0 Or iKitVendaComp = MARCADO Then
                bExibe = True
                objTabelaPrecoGrupoItem.iGradeKitVenda = MARCADO
            End If
        End If
        If Not bExibe And (objTabelaPrecoGrupo.iAnaliticoComGrade = MARCADO Or objTabelaPrecoGrupo.iAnaliticoSemGrade = MARCADO) Then
            
            bPaiGrade = False
            
            sProdPai = String(STRING_PRODUTO, 0)
            
            Call Mascara_RetornaProdutoPai(sProduto, sProdPai)
            
            If Len(Trim(sProdPai)) > 0 Then
        
                Set objProduto = New ClassProduto
                
                objProduto.sCodigo = sProdPai
            
                lErro = CF("Produto_Le", objProduto)
                If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
                
                Set objTabelaPrecoGrupoItem.objProdutoPai = objProduto
            
                If Len(Trim(objProduto.sGrade)) > 0 Then
                    bPaiGrade = True
                    objTabelaPrecoGrupoItem.iAnaliticoComGrade = MARCADO
                End If
                
            End If
        
        End If
        If Not bExibe Then
            If objTabelaPrecoGrupo.iAnaliticoComGrade = MARCADO Then
                If Len(Trim(sGrade)) = 0 And iKitVendaComp = DESMARCADO And bPaiGrade Then
                    bExibe = True
                End If
            End If
        End If
        If Not bExibe Then
            If objTabelaPrecoGrupo.iAnaliticoSemGrade = MARCADO Then
                If Len(Trim(sGrade)) = 0 And iKitVendaComp = DESMARCADO And Not bPaiGrade Then
                    bExibe = True
                End If
            End If
        End If
        
        If bExibe Then
        
            Set objTabelaPrecoItem = New ClassTabelaPrecoItem
        
            objTabelaPrecoItem.iCodTabela = objTabelaPrecoGrupo.iTabela
            objTabelaPrecoItem.iFilialEmpresa = objTabelaPrecoGrupo.iFilialEmpresa
            objTabelaPrecoItem.sCodProduto = objTabelaPrecoGrupoItem.sProduto
    
            dtDataAux = objTabelaPrecoGrupo.dtDataRef
            lErro = CF("TabelaPrecoItem_Le", objTabelaPrecoItem, dtDataAux)
            If lErro <> SUCESSO And lErro <> 28014 Then gError ERRO_SEM_MENSAGEM
            
            If lErro = SUCESSO Then
                objTabelaPrecoGrupoItem.dPrecoAtual = objTabelaPrecoItem.dPreco
                objTabelaPrecoGrupoItem.sTextoGrade = objTabelaPrecoItem.sTextoGrade
            Else
                Set objTabelaPrecoItem = New ClassTabelaPrecoItem
            
                objTabelaPrecoItem.iCodTabela = objTabelaPrecoGrupo.iTabela
                objTabelaPrecoItem.iFilialEmpresa = EMPRESA_TODA
                objTabelaPrecoItem.sCodProduto = objTabelaPrecoGrupoItem.sProduto
        
                dtDataAux = objTabelaPrecoGrupo.dtDataRef
                lErro = CF("TabelaPrecoItem_Le", objTabelaPrecoItem, dtDataAux)
                If lErro <> SUCESSO And lErro <> 28014 Then gError ERRO_SEM_MENSAGEM
                If lErro = SUCESSO Then
                    objTabelaPrecoGrupoItem.dPrecoAtual = objTabelaPrecoItem.dPreco
                    objTabelaPrecoGrupoItem.sTextoGrade = objTabelaPrecoItem.sTextoGrade
                End If
            End If
            
            If objTabelaPrecoGrupo.iTipoNovoPreco = PRECO_GRUPO_TIPO_VALOR Then
                objTabelaPrecoGrupoItem.dPrecoNovo = objTabelaPrecoGrupo.dPrecoNovoRS
            Else
                If objTabelaPrecoGrupoItem.dPrecoAtual > DELTA_VALORMONETARIO Then
                    objTabelaPrecoGrupoItem.dPrecoNovo = objTabelaPrecoGrupoItem.dPrecoAtual * (1 + objTabelaPrecoGrupo.dPrecoNovoPerc)
                End If
            End If
        
            objTabelaPrecoGrupo.colItens.Add objTabelaPrecoGrupoItem
            
        End If
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208347
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    TabelaPrecoGrupo_Le = SUCESSO

    Exit Function

Erro_TabelaPrecoGrupo_Le:

    TabelaPrecoGrupo_Le = gErr

    Select Case gErr

        Case 208345
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 208346, 208347, 208368 To 208370
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208348)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function TabelaPrecoGrupo_PreparaSQL(ByVal objTabelaPrecoGrupo As ClassTabelaPrecoGrupo, sSQL As String) As Long

Dim lErro As Long
Dim sOrderBy As String
Dim sWhere As String
Dim sSubWhere As String
Dim objProdCat As ClassProdutoCategoria

On Error GoTo Erro_TabelaPrecoGrupo_PreparaSQL

    sSQL = "SELECT P.Codigo, P.Descricao, P.SiglaUMVenda, P.Grade, P.KitVendaComp FROM Produtos AS P WHERE P.Ativo = 0 AND (P.Gerencial = 0 OR P.Grade <> '' OR P.KitVendaComp = 1) "
    
    If objTabelaPrecoGrupo.sProdutoDe <> "" Then
        sWhere = sWhere & "AND P.Codigo >= ? "
    End If
    
    If objTabelaPrecoGrupo.sProdutoAte <> "" Then
        sWhere = sWhere & "AND P.Codigo <= ? "
    End If
    
    If objTabelaPrecoGrupo.iTipoDeProduto <> 0 Then
        sWhere = sWhere & "AND P.Tipo = ? "
    End If
    
    If objTabelaPrecoGrupo.sCodigoLike <> "" Then
        sWhere = sWhere & "AND P.Codigo LIKE ? "
    End If
    
    If objTabelaPrecoGrupo.sDescricaoLike <> "" Then
        sWhere = sWhere & "AND P.Descricao LIKE ? "
    End If
    
    If objTabelaPrecoGrupo.sModeloLike <> "" Then
        sWhere = sWhere & "AND P.Modelo LIKE ? "
    End If
    
    If objTabelaPrecoGrupo.sNomeRedLike <> "" Then
        sWhere = sWhere & "AND P.NomeReduzido LIKE ? "
    End If
    
    If objTabelaPrecoGrupo.sReferenciaLike <> "" Then
        sWhere = sWhere & "AND P.Referencia LIKE ? "
    End If

    For Each objProdCat In objTabelaPrecoGrupo.colCategorias
        sSubWhere = ""
        If Len(Trim(objProdCat.sCategoria)) > 0 Then
            If Len(Trim(objProdCat.sItem)) > 0 Then
                sSubWhere = sSubWhere & "AND C.Item = ? "
            End If
            sWhere = sWhere & "AND EXISTS ( SELECT C.Produto FROM ProdutoCategoria AS C WHERE P.Codigo = C.Produto AND C.Categoria = ? " & sSubWhere & ") "
        End If
    
    Next
    
    sOrderBy = "ORDER BY Codigo "
    
    sSQL = sSQL & sWhere & sOrderBy

    TabelaPrecoGrupo_PreparaSQL = SUCESSO

    Exit Function

Erro_TabelaPrecoGrupo_PreparaSQL:

    TabelaPrecoGrupo_PreparaSQL = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208349)

    End Select


    Exit Function

End Function

Private Function TabelaPrecoGrupo_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal objTabelaPrecoGrupo As ClassTabelaPrecoGrupo, vsProduto As Variant, vsDescricao As Variant, vsUM As Variant, vsGrade As Variant, viKitVendaComp As Variant) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados do Grid
 
Dim lErro As Long
Dim vValor(1 To 30) As Variant, iIndice As Integer
Dim objProdCat As ClassProdutoCategoria

On Error GoTo Erro_TabelaPrecoGrupo_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 208350
                       
    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 208351

    lErro = Comando_BindVarInt(lComando, vsDescricao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 208352

    lErro = Comando_BindVarInt(lComando, vsUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError 208353
  
    lErro = Comando_BindVarInt(lComando, vsGrade)
    If (lErro <> AD_SQL_SUCESSO) Then gError 208354
  
    lErro = Comando_BindVarInt(lComando, viKitVendaComp)
    If (lErro <> AD_SQL_SUCESSO) Then gError 208355
    
    If objTabelaPrecoGrupo.sProdutoDe <> "" Then
        vValor(1) = objTabelaPrecoGrupo.sProdutoDe
        lErro = Comando_BindVarInt(lComando, vValor(1))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208356
    End If
    
    If objTabelaPrecoGrupo.sProdutoAte <> "" Then
        vValor(2) = objTabelaPrecoGrupo.sProdutoAte
        lErro = Comando_BindVarInt(lComando, vValor(2))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208357
    End If
    
    If objTabelaPrecoGrupo.iTipoDeProduto <> 0 Then
        vValor(3) = objTabelaPrecoGrupo.iTipoDeProduto
        lErro = Comando_BindVarInt(lComando, vValor(3))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208358
    End If
    
    If objTabelaPrecoGrupo.sCodigoLike <> "" Then
        vValor(4) = objTabelaPrecoGrupo.sCodigoLike
        lErro = Comando_BindVarInt(lComando, vValor(4))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208359
    End If
    
    If objTabelaPrecoGrupo.sDescricaoLike <> "" Then
        vValor(5) = objTabelaPrecoGrupo.sDescricaoLike
        lErro = Comando_BindVarInt(lComando, vValor(5))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208360
    End If
    
    If objTabelaPrecoGrupo.sModeloLike <> "" Then
        vValor(6) = objTabelaPrecoGrupo.sModeloLike
        lErro = Comando_BindVarInt(lComando, vValor(6))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208361
    End If
    
    If objTabelaPrecoGrupo.sNomeRedLike <> "" Then
        vValor(7) = objTabelaPrecoGrupo.sNomeRedLike
        lErro = Comando_BindVarInt(lComando, vValor(7))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208362
    End If
    
    If objTabelaPrecoGrupo.sReferenciaLike <> "" Then
        vValor(8) = objTabelaPrecoGrupo.sReferenciaLike
        lErro = Comando_BindVarInt(lComando, vValor(8))
        If (lErro <> AD_SQL_SUCESSO) Then gError 208363
    End If

    For Each objProdCat In objTabelaPrecoGrupo.colCategorias

        If Len(Trim(objProdCat.sCategoria)) > 0 Then
            vValor(9 + iIndice) = objProdCat.sCategoria
            lErro = Comando_BindVarInt(lComando, vValor(9 + iIndice))
            If (lErro <> AD_SQL_SUCESSO) Then gError 208364
            iIndice = iIndice + 1
            If Len(Trim(objProdCat.sItem)) > 0 Then
                vValor(9 + iIndice) = objProdCat.sItem
                lErro = Comando_BindVarInt(lComando, vValor(9 + iIndice))
                If (lErro <> AD_SQL_SUCESSO) Then gError 208365
                iIndice = iIndice + 1
            End If
        End If
    
    Next
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 208366
 
   TabelaPrecoGrupo_PreparaInt = SUCESSO
 
    Exit Function
 
Erro_TabelaPrecoGrupo_PreparaInt:
 
    TabelaPrecoGrupo_PreparaInt = gErr
 
    Select Case gErr
 
        Case 208350 To 208366
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208367)
 
    End Select
 
    Exit Function
 
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ImportTabelas_Le(ByVal objImportTabelas As ClassImportTabelas) As Long

Dim lErro As Long
Dim lComando As Long
Dim tImportTabelas As typeImportTabelas

On Error GoTo Erro_ImportTabelas_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 208911

    'Alocação de espaço no buffer
    tImportTabelas.sTabela = String(255, 0)
    tImportTabelas.sDescricao = String(255, 0)
    tImportTabelas.sFuncaoGrava = String(255, 0)
    tImportTabelas.sFuncaoValida = String(255, 0)

    'Le a tabelaImportTabelas
    lErro = Comando_Executar(lComando, "SELECT Codigo, Tabela, Descricao, FuncaoGrava, FuncaoValida FROM ImportTabelas WHERE Codigo= ? ", _
                tImportTabelas.lCodigo, tImportTabelas.sTabela, tImportTabelas.sDescricao, tImportTabelas.sFuncaoGrava, _
                tImportTabelas.sFuncaoValida, _
                objImportTabelas.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 208912

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208913

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objImportTabelas.lCodigo = tImportTabelas.lCodigo
    objImportTabelas.sTabela = tImportTabelas.sTabela
    objImportTabelas.sDescricao = tImportTabelas.sDescricao
    objImportTabelas.sFuncaoGrava = tImportTabelas.sFuncaoGrava
    objImportTabelas.sFuncaoValida = tImportTabelas.sFuncaoValida
    
    lErro = ImportTabelasCampos_Le(objImportTabelas)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ImportTabelas_Le = SUCESSO

    Exit Function

Erro_ImportTabelas_Le:

    ImportTabelas_Le = gErr

    Select Case gErr

        Case 208911
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208912, 208913
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPORTTABELAS", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208914)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ImportTabelasCampos_Le(ByVal objImportTabelas As ClassImportTabelas) As Long

Dim lErro As Long
Dim lComando As Long
Dim tImportTabelasCampos As typeImportTabelasCampos
Dim objImportTabelasCampos As ClassImportTabelasCampos

On Error GoTo Erro_ImportTabelasCampos_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 208915

    'Alocação de espaço no buffer
    tImportTabelasCampos.sCampo = String(255, 0)
    tImportTabelasCampos.sNomeExibicao = String(255, 0)
    tImportTabelasCampos.sNomeIgual1 = String(255, 0)
    tImportTabelasCampos.sNomeIgual2 = String(255, 0)
    tImportTabelasCampos.sNomeIgual3 = String(255, 0)
    tImportTabelasCampos.sNomeLike1 = String(255, 0)
    tImportTabelasCampos.sNomeLike2 = String(255, 0)
    tImportTabelasCampos.sNomeLike3 = String(255, 0)
    tImportTabelasCampos.sValorPadrao = String(255, 0)

    'Le a tabelaImportTabelasCampos
    lErro = Comando_Executar(lComando, "SELECT Tabela, Codigo, Campo, NomeExibicao, Tipo, Chave, " & _
                "Exibe, NomeIgual1, NomeIgual2, NomeIgual3, NomeLike1, NomeLike2, NomeLike3, " & _
                "ValorPadrao, Obrigatorio, TamMax FROM ImportTabelasCampos WHERE Tabela= ? ORDER BY Codigo", _
                tImportTabelasCampos.lTabela, tImportTabelasCampos.lCodigo, tImportTabelasCampos.sCampo, tImportTabelasCampos.sNomeExibicao, _
                tImportTabelasCampos.iTipo, tImportTabelasCampos.iChave, tImportTabelasCampos.iExibe, tImportTabelasCampos.sNomeIgual1, tImportTabelasCampos.sNomeIgual2, _
                tImportTabelasCampos.sNomeIgual3, tImportTabelasCampos.sNomeLike1, tImportTabelasCampos.sNomeLike2, tImportTabelasCampos.sNomeLike3, tImportTabelasCampos.sValorPadrao, tImportTabelasCampos.iObrigatorio, tImportTabelasCampos.iTamMax, _
                objImportTabelas.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 208916

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208917

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objImportTabelasCampos = New ClassImportTabelasCampos

        objImportTabelasCampos.lTabela = tImportTabelasCampos.lTabela
        objImportTabelasCampos.lCodigo = tImportTabelasCampos.lCodigo
        objImportTabelasCampos.sCampo = tImportTabelasCampos.sCampo
        objImportTabelasCampos.sNomeExibicao = tImportTabelasCampos.sNomeExibicao
        objImportTabelasCampos.iTipo = tImportTabelasCampos.iTipo
        objImportTabelasCampos.iChave = tImportTabelasCampos.iChave
        objImportTabelasCampos.iExibe = tImportTabelasCampos.iExibe
        objImportTabelasCampos.sNomeIgual1 = tImportTabelasCampos.sNomeIgual1
        objImportTabelasCampos.sNomeIgual2 = tImportTabelasCampos.sNomeIgual2
        objImportTabelasCampos.sNomeIgual3 = tImportTabelasCampos.sNomeIgual3
        objImportTabelasCampos.sNomeLike1 = tImportTabelasCampos.sNomeLike1
        objImportTabelasCampos.sNomeLike2 = tImportTabelasCampos.sNomeLike2
        objImportTabelasCampos.sNomeLike3 = tImportTabelasCampos.sNomeLike3
        objImportTabelasCampos.sValorPadrao = tImportTabelasCampos.sValorPadrao
        objImportTabelasCampos.iObrigatorio = tImportTabelasCampos.iObrigatorio
        objImportTabelasCampos.iTamMax = tImportTabelasCampos.iTamMax
        
        objImportTabelas.colCampos.Add objImportTabelasCampos
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208918

    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ImportTabelasCampos_Le = SUCESSO

    Exit Function

Erro_ImportTabelasCampos_Le:

    ImportTabelasCampos_Le = gErr

    Select Case gErr

        Case 208915
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208916 To 208918
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPORTTABELASCAMPOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208919)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFe_Obtem_Dir_Xml(sDiretorio As String) As Long
'Le Todas as Consultas para a Tela Passada

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim sRetorno As String, bAchou As Boolean, lCodigo As Long
Dim sDir As String, sFile As String, iPos As Integer

On Error GoTo Erro_NFe_Obtem_Dir_Xml

    sDiretorio = ""

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(GL_lConexaoDic)
        If alComando(iIndice) = 0 Then gError 209064
    Next

    bAchou = False
    
    For iIndice = 1 To 4
    
        Select Case iIndice
            Case 1
                lCodigo = 90000 + (glEmpresa * 100) + giFilialEmpresa
            Case 2
                lCodigo = 900 + glEmpresa
            Case 3
                lCodigo = 101
            Case 4
                lCodigo = 1
        End Select
    
        sRetorno = String(STRING_CONTROLE_CONTEUDO, 0)
    
        lErro = Comando_Executar(alComando(1), "SELECT Conteudo FROM Controle WHERE Codigo = ? ", sRetorno, lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 209065
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209066
    
        If lErro = AD_SQL_SUCESSO Then
            bAchou = True
            Exit For
        End If

    Next
    
    If bAchou Then
        
        If lCodigo = 1 Then
'            sFile = Dir(sRetorno)
'            iPos = InStr(sRetorno, sFile)
'            sDir = Mid(sRetorno, 1, iPos - 1)
            sDir = Replace(sRetorno, "adlock.dat", "")
        Else
            sDir = sRetorno
        End If
        
        If right(sDir, 1) <> "\" And right(sDir, 1) <> "/" Then
            iPos = InStr(1, sDir, "/")
            If iPos = 0 Then
                sDir = sDir & "\"
            Else
                sDir = sDir & "/"
            End If
        End If
    
        sDiretorio = sDir
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFe_Obtem_Dir_Xml = SUCESSO

    Exit Function

Erro_NFe_Obtem_Dir_Xml:

    NFe_Obtem_Dir_Xml = gErr

    Select Case gErr
        
        Case 209064
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 209065, 209066
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTROLE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 209067)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function NFeFedScan_Le(ByVal objNFeFedScan As ClassNFeFedScan) As Long

Dim lErro As Long
Dim tNFeFedScan As typeNFeFedScan
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFeFedScan_Le

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207479
    Next

    'Alocação de espaço no buffer
    tNFeFedScan.sJustificativa = String(255, 0)

    'Le a tabela NFeFedScan
    lErro = Comando_Executar(alComando(1), "SELECT FilialEmpresa, DataEntrada, HoraEntrada, DataSaida, HoraSaida, Justificativa FROM NFeFedScan WHERE Ocorrencia= ? ", _
                tNFeFedScan.iFilialEmpresa, tNFeFedScan.dtDataEntrada, tNFeFedScan.dHoraEntrada, tNFeFedScan.dtDataSaida, tNFeFedScan.dHoraSaida, tNFeFedScan.sJustificativa, _
                objNFeFedScan.lOcorrencia)
    If lErro <> AD_SQL_SUCESSO Then gError 207480

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207481

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objNFeFedScan.dtDataEntrada = tNFeFedScan.dtDataEntrada
    objNFeFedScan.dHoraEntrada = tNFeFedScan.dHoraEntrada
    objNFeFedScan.dtDataSaida = tNFeFedScan.dtDataSaida
    objNFeFedScan.dHoraSaida = tNFeFedScan.dHoraSaida
    objNFeFedScan.sJustificativa = tNFeFedScan.sJustificativa
    objNFeFedScan.iFilialEmpresa = tNFeFedScan.iFilialEmpresa

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFeFedScan_Le = SUCESSO

    Exit Function

Erro_NFeFedScan_Le:

    NFeFedScan_Le = gErr

    Select Case gErr

        Case 207479
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 207480, 207481
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDSCAN", gErr)

        Case ERRO_LEITURA_SEM_DADOS

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207482)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFeFedScan_Verifica_Datas(ByVal lOcr As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataEntrada As Date, ByVal dtDataSaida As Date, ByVal dHoraEntrada As Double, ByVal dHoraSaida As Double) As Long
'Le a tabela NFeFedScan para verificar se ha sobreposicao de horarios de scan
'le a tabela de nota fiscal para verificar se ha notas fiscais normais no periodo de scan

Dim lErro As Long
Dim tNFeFedScan As typeNFeFedScan
Dim sSerie As String
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim lOcorrencia As Long
Dim objNF As New ClassNFiscal

On Error GoTo Erro_NFeFedScan_Verifica_Datas

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207494
    Next
    
    objNF.iFilialEmpresa = iFilialEmpresa
    lErro = CF("NFiscal_FilialEmpresa_Customiza", objNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    iFilialEmpresa = objNF.iFilialEmpresa

    'Alocação de espaço no buffer
    sSerie = String(255, 0)

    If gobjCRFAT.sNFeSistemaContingencia = "SCAN" Then
        If iFilialEmpresa <> EMPRESA_TODA Then
            If dtDataSaida = DATA_NULA Then
                'Le a tabela NFiscal (Somente nfs internas, eletrônicas e de série não inclusa entre 900 e 999 da própria filial
                lErro = Comando_Executar(alComando(1), "SELECT Serie, NumIntDoc, DataEmissao FROM NFiscalTipoDocInfo WHERE DataEmissao > ? AND (LEN(Serie) < 3 OR (SUBSTRING(Serie, 1,1) <> '9' OR SUBSTRING(Serie, 2,1) < '0' OR SUBSTRING(Serie,2,1) > '9' " & _
                         " OR SUBSTRING(Serie,3,1) < '0' OR SUBSTRING(Serie,3,1) > '9')) AND FilialEmpresa = ? AND NFe = 1 AND Tipo IN (1,2) ", sSerie, lNumIntDoc, dtDataEmissao, dtDataEntrada, iFilialEmpresa)
                If lErro <> AD_SQL_SUCESSO Then gError 207495
            Else
            
                lErro = Comando_Executar(alComando(1), "SELECT Serie, NumIntDoc, DataEmissao FROM NFiscalTipoDocInfo WHERE DataEmissao > ? AND DataEmissao < ? AND (LEN(Serie) < 3 OR (SUBSTRING(Serie, 1,1) <> '9' OR SUBSTRING(Serie, 2,1) < '0' OR SUBSTRING(Serie,2,1) > '9' " & _
                         " OR SUBSTRING(Serie,3,1) < '0' OR SUBSTRING(Serie,3,1) > '9')) AND FilialEmpresa = ? AND NFe = 1 AND Tipo IN (1,2) ", sSerie, lNumIntDoc, dtDataEmissao, dtDataEntrada, dtDataSaida, iFilialEmpresa)
                If lErro <> AD_SQL_SUCESSO Then gError 207496
            End If
        Else
            If dtDataSaida = DATA_NULA Then
                'Le a tabela NFiscal
                lErro = Comando_Executar(alComando(1), "SELECT Serie, NumIntDoc, DataEmissao FROM NFiscalTipoDocInfo WHERE DataEmissao > ? AND (LEN(Serie) < 3 OR (SUBSTRING(Serie, 1,1) <> '9' OR SUBSTRING(Serie, 2,1) < '0' OR SUBSTRING(Serie,2,1) > '9' " & _
                         " OR SUBSTRING(Serie,3,1) < '0' OR SUBSTRING(Serie,3,1) > '9')) AND NFe = 1 AND Tipo IN (1,2) ", sSerie, lNumIntDoc, dtDataEmissao, dtDataEntrada)
                If lErro <> AD_SQL_SUCESSO Then gError 207495
            Else
            
                lErro = Comando_Executar(alComando(1), "SELECT Serie, NumIntDoc, DataEmissao FROM NFiscalTipoDocInfo WHERE DataEmissao > ? AND DataEmissao < ? AND (LEN(Serie) < 3 OR (SUBSTRING(Serie, 1,1) <> '9' OR SUBSTRING(Serie, 2,1) < '0' OR SUBSTRING(Serie,2,1) > '9' " & _
                         " OR SUBSTRING(Serie,3,1) < '0' OR SUBSTRING(Serie,3,1) > '9')) AND NFe = 1 AND Tipo IN (1,2) ", sSerie, lNumIntDoc, dtDataEmissao, dtDataEntrada, dtDataSaida)
                If lErro <> AD_SQL_SUCESSO Then gError 207496
            End If
        End If

        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207497
    
        If lErro = SUCESSO Then gError 207498
        
    End If

    If dtDataSaida = DATA_NULA Then
        
        'Le a tabela NFeFedScan para verificar se ha sobreposicao de horarios de scan
        lErro = Comando_Executar(alComando(2), "SELECT Ocorrencia FROM NFeFedScan WHERE (DataSaida = ? OR (DataSaida > ?) OR  (DataSaida = ? AND HoraSaida >= ?)) AND Ocorrencia <> ? AND (FilialEmpresa = ? OR FilialEmpresa = ?) ", _
              lOcorrencia, DATA_NULA, dtDataEntrada, dtDataEntrada, dHoraEntrada, lOcr, iFilialEmpresa, EMPRESA_TODA)
        If lErro <> AD_SQL_SUCESSO Then gError 207507
    Else
    
        'Le a tabela NFeFedScan para verificar se ha sobreposicao de horarios de scan
        lErro = Comando_Executar(alComando(2), "SELECT Ocorrencia FROM NFeFedScan WHERE ((DataEntrada < ? AND DataSaida = ?) OR (DataEntrada < ? AND DataSaida > ?) OR (DataEntrada < ? AND DataSaida = ? AND HoraSaida >= ?) OR (DataEntrada = ? AND HoraEntrada <= ? AND DataSaida = ? AND HoraSaida >= ?) OR (DataEntrada = ? AND HoraEntrada <= ? AND DataSaida > ?) OR (DataEntrada = ? AND HoraEntrada <= ? AND DataSaida = ?)) AND Ocorrencia <> ? AND (FilialEmpresa = ? OR FilialEmpresa = ?) ", _
              lOcorrencia, dtDataSaida, DATA_NULA, dtDataSaida, dtDataSaida, dtDataSaida, dtDataSaida, dHoraSaida, dtDataSaida, dHoraSaida, dtDataSaida, dHoraSaida, dtDataSaida, dHoraSaida, dtDataSaida, dtDataSaida, dHoraSaida, DATA_NULA, lOcr, iFilialEmpresa, EMPRESA_TODA)
        If lErro <> AD_SQL_SUCESSO Then gError 207508
    
    End If

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207509

    If lErro = SUCESSO Then gError 207510

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFeFedScan_Verifica_Datas = SUCESSO

    Exit Function

Erro_NFeFedScan_Verifica_Datas:

    NFeFedScan_Verifica_Datas = gErr

    Select Case gErr

        Case 207494
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 207495, 207469, 207497
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 207498
            Call Rotina_Erro(vbOKOnly, "ERRO_EXISTE_NFISCAL_NORMAL_PERIODO_SCAN", gErr)

        Case 207507 To 207509
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDSCAN", gErr)

        Case 207510
            Call Rotina_Erro(vbOKOnly, "ERRO_EXISTE_NFEFEDSCAN_SOBREPOSTO", gErr, lOcorrencia)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207499)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFeFedScan_Verifica_Contingencia(ByVal iFilialEmpresa As Integer, ByVal dtDataEmissao As Date, iScan As Integer) As Long
'Le a tabela NFeFedScan para verificar se a data de emissao esta em periodo de contingencia

Dim lErro As Long
Dim tNFeFedScan As typeNFeFedScan
Dim sSerie As String
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lOcorrencia As Long
Dim objNF As New ClassNFiscal

On Error GoTo Erro_NFeFedScan_Verifica_Contingencia

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207556
    Next

    objNF.iFilialEmpresa = iFilialEmpresa
    lErro = CF("NFiscal_FilialEmpresa_Customiza", objNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    iFilialEmpresa = objNF.iFilialEmpresa

    iScan = 0
    
    'Le a tabela NFeFedScan para verificar se ha sobreposicao de horarios de scan
    'Se o período do scan começou antes e
    'ou está marcado para acabar depois ou nem está marcado para acabar então está em scan
    lErro = Comando_Executar(alComando(1), "SELECT Ocorrencia FROM NFeFedScan WHERE DataEntrada <= ? AND (DataSaida > ? OR DataSaida = ? OR (DataSaida = ? AND HoraSaida >= ?)) AND (FilialEmpresa = ? OR FilialEmpresa = ?) ", _
          lOcorrencia, dtDataEmissao, dtDataEmissao, DATA_NULA, dtDataEmissao, CDbl(Time), iFilialEmpresa, EMPRESA_TODA)
    If lErro <> AD_SQL_SUCESSO Then gError 207557

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207558

    If lErro = SUCESSO Then iScan = 1

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFeFedScan_Verifica_Contingencia = SUCESSO

    Exit Function

Erro_NFeFedScan_Verifica_Contingencia:

    NFeFedScan_Verifica_Contingencia = gErr

    Select Case gErr

        Case 207557
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 207557, 207558
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDSCAN", gErr)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207559)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFiscal_Valida_NFE(ByVal objNFiscal As ClassNFiscal) As Long
'Le a tabela NFeFedScan para verificar se a data de emissao esta em periodo de contingencia

Dim lErro As Long
Dim sSerie As String
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lOcorrencia As Long
Dim iScan As Integer
Dim objTipoDocInfo As New ClassTipoDocInfo

On Error GoTo Erro_NFiscal_Valida_NFE

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207561
    Next

    'Insere o Recebimento em NFiscalBaixadas
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal

    'Lê o Tipo da Nota Fiscal
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 207891

    'se se trata de uma nota fiscal interna
    If objTipoDocInfo.iTipo = TIPODOCINFO_TIPO_NFIE Or objTipoDocInfo.iTipo = TIPODOCINFO_TIPO_NFIS Then

        If ISSerieEletronica(objNFiscal.sSerie) Then
        
            lErro = CF("NFeFedScan_Verifica_Contingencia", objNFiscal.iFilialEmpresa, objNFiscal.dtDataEmissao, iScan)
            If lErro <> SUCESSO Then gError 207562
    
            sSerie = CF("Serie_Sem_E", objNFiscal.sSerie)
            
            If StrParaDblErr(sSerie) >= 900 And StrParaDblErr(sSerie) <= 999 And (iScan = 0 Or gobjCRFAT.sNFeSistemaContingencia <> "SCAN") Then
                gError 207563
            ElseIf (StrParaDblErr(sSerie) < 900 Or StrParaDblErr(sSerie) > 999) And (iScan = 1 And gobjCRFAT.sNFeSistemaContingencia = "SCAN") Then
                gError 207564
            End If
               
        End If

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscal_Valida_NFE = SUCESSO

    Exit Function

Erro_NFiscal_Valida_NFE:

    NFiscal_Valida_NFE = gErr

    Select Case gErr

        Case 207561
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 207562, 207891

        Case 207563
            Call Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_SCAN_FORA_PERIODO", gErr)

        Case 207564
            Call Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_NORMAL_PERIODO_SCAN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207565)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Serie_Sem_E(ByVal sSerie As String) As String
    'retira -E da serie

    Dim iIndice As Integer, lErro As Long
    Dim sCaracter As String
    Dim sSerieNova As String
    Dim iPos As Integer

    iPos = InStr(sSerie, "-e")

    If iPos <> 0 Then
        sSerieNova = Mid(sSerie, 1, iPos - 1)
    Else
        sSerieNova = sSerie
    End If

    Serie_Sem_E = sSerieNova

End Function

Function NFiscal_Testa_Existencia1(ByVal objNFiscal As ClassNFiscal, Optional ByVal bSemAviso As Boolean = False) As Long
'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada

Dim lErro As Long
Dim vbMsgRes As VbMsgBoxResult
Dim sStat As String
Dim sMotivo As String
Dim sCodVerificacao As String
Dim lNumNFe As Long
Dim dtData As Date

On Error GoTo Erro_NFiscal_Testa_Existencia1

    If bSemAviso Then vbMsgRes = vbYes

    ''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    'se for serie eletronica e nao for recibo ==> é nfe
    '$$$$$ (ser for NFe mista vai vir com Recibo e como eletrônica e mesmo assim tem que validar)
    'If ISSerieEletronica(objNFiscal.sSerie) And objNFiscal.iRecibo = 0 Then
    If ISSerieEletronica(objNFiscal.sSerie) Then

        lErro = CF("NFeFedProtNFe_Le1", objNFiscal.lNumIntDoc, sStat, dtData)
        If lErro <> SUCESSO Then gError 207577
        
        'a nota  em questao esta denegada e portanto nao pode ser alterada
        If sStat = "205" Or sStat = "110" Or sStat = "301" Or sStat = "302" Then gError 207563
        
        'a nota em questão foi homologada e portanto nao pode ser alterada
        If sStat = "100" Then gError 207564
        
        'a nota em questão foi cancelada e portanto nao pode ser alterada
        If sStat = "101" Then gError 210364
        
        'a nota em questao foi enviada, deseja realmente alterar a nota em questao?
        If UCase(sStat) = "ENVIADO" Then
        
            '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
            'Msgbox dentro de transação não é uma boa
            If Not bSemAviso Then vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_ENVIADA")
        
            'precisa excluir nfefedlote, excluir a nota e inclui-la com o mesmo numero
            If vbMsgRes = vbYes Then
                gError 207565
            ElseIf vbMsgRes = vbNo Then
            'nao vai alterar a nota
                gError 207566
            End If
        
        End If


    '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    'se for serie eletronica e for recibo ==> é nfse
    '$$$$$ (não vem com o -e pois não é eletrônica federal, só se for mista mas aí é exceção)
    'ElseIf ISSerieEletronica(objNFiscal.sSerie) And objNFiscal.iRecibo <> 0 Then
    ElseIf objNFiscal.iRecibo <> 0 Then

        lErro = CF("RPSWEBProt_Le", objNFiscal.lNumIntDoc, sMotivo, sCodVerificacao, lNumNFe)
        If lErro <> SUCESSO Then gError 207621

        If sMotivo = "H - Cancelada" Or sMotivo = "P - Cancelada" Then
            gError 207622
        ElseIf sMotivo = "H - Autorizado" Or sMotivo = "P - Autorizado" Then
            gError 207623
        ElseIf sMotivo = "Enviado" Then
            
            '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
            'Msgbox dentro de transação não é uma boa
            If Not bSemAviso Then vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCALSRV_INTERNA_ENVIADA")

            'precisa excluir rpsweblote, excluir a nota e inclui-la com o mesmo numero
            If vbMsgRes = vbYes Then
                gError 207624
            ElseIf vbMsgRes = vbNo Then
            'nao vai alterar a nota
                gError 207625
            End If

        End If
        
    'RECIBO SEM SER POR WEB SERVICE É TRATADO POR NF_EXCLUI_RPS NA EXCLUSÃO
        
    End If

    'se veio pelo botao de gravacao ==> da a msg que e' uma alteracao
    ' se veio pelo botao de exclusao ==> nao precisa avisar ATE PQ E' UMA EXCLUSAO E NAO UMA ALTEERACAO E O AVISO JA FOI DADO
    
    If Not objNFiscal.objContabil.objGridInt Is Nothing Then
    
        If Not bSemAviso Then vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)

        'precisa excluir a nota e inclui-la com o mesmo numero
        If vbMsgRes = vbYes Then
            gError 207626
        ElseIf vbMsgRes = vbNo Then
        'nao vai alterar a nota
            gError 207627
        End If
    End If
        
    NFiscal_Testa_Existencia1 = SUCESSO

    Exit Function
    
Erro_NFiscal_Testa_Existencia1:

    NFiscal_Testa_Existencia1 = gErr
    
    Select Case gErr
    
        Case 207563
            Call Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_DENEGADA", gErr)
        
        Case 207564
            Call Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_HOMOLOGADA", gErr)
            
        Case 207565
        'vai excluir nfefedlote, excluir a nota e inclui-la com o mesmo numero
    
        Case 207566, 207568, 207577, 207625, 207627
        
        Case 207567
        'vai excluir a nota e inclui-la com o mesmo numero
        
        Case 207622
            Call Rotina_Erro(vbOKOnly, "ERRO_NFISCALSRV_CANCELADA", gErr)
        
        Case 207623
            Call Rotina_Erro(vbOKOnly, "ERRO_NFISCALSRV_HOMOLOGADA", gErr)
        
        Case 207624
        'precisa excluir rpsweblote, excluir a nota e inclui-la com o mesmo numero
        
        Case 207626
        'precisa excluir a nota e inclui-la com o mesmo numero
        
        Case 210364
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CANCELADA", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 207582)
            
    End Select
    
    Exit Function

End Function

Public Function NFeInutFaixa_Valida1(ByVal iFilialEmpresa As Integer, ByVal sSerie As String, ByVal lNumNFDe As Long, ByVal lNumNFAte As Long) As Long
'Verifica se pode inutilizar a faixa ou já existe NF lançada
Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, lNumNotaFiscal As Long
Dim dtDataDe As Date, dtDataAte As Date
Dim dtDataEmissao As Date

On Error GoTo Erro_NFeInutFaixa_Valida1

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209505
    Next
    
    dtDataDe = gdtDataAtual - PERIODO_EMISSAO
    dtDataAte = gdtDataAtual + PERIODO_EMISSAO
    
    If Not ISSerieEletronica(sSerie) Then sSerie = Converte_Serie_Eletronica(sSerie, vbChecked)

    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, DataEmissao FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal BETWEEN ? AND ? AND Status <> ? AND DataEmissao BETWEEN ? AND ? AND (Tipo = ? OR Tipo = ?) ", _
                                            lNumNotaFiscal, dtDataEmissao, iFilialEmpresa, sSerie, lNumNFDe, lNumNFAte, STATUS_EXCLUIDO, dtDataDe, dtDataAte, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 209506

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209507

    If lErro = AD_SQL_SUCESSO Then gError 209508 'Não pode inutilizar faixa pois existem NFs emitidas com essa numeração

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFeInutFaixa_Valida1 = SUCESSO

    Exit Function

Erro_NFeInutFaixa_Valida1:

    NFeInutFaixa_Valida1 = gErr

    Select Case gErr

        Case 209505
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 209506 To 209507
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case 209508
            Call Rotina_Erro(vbOKOnly, "ERRO_INUT_FX_NFE_NF_EMITIDA_FAIXA", gErr, sSerie, lNumNotaFiscal, Format(dtDataEmissao, "dd/mm/yyyy"))

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209509)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFeInutFaixa_Valida2(ByVal objNFiscal As ClassNFiscal) As Long
'Verifica se pode emitir com esse número ou ele foi inutilizado
Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim dtData As Date, sNumNFDe As String, sNumNFAte As String

On Error GoTo Erro_NFeInutFaixa_Valida2

    'Só chega NF interna nessa função, se também for eletrônica trata para ver se pode usar o número
    If ISSerieEletronica(objNFiscal.sSerie) Then
    
        'Executa a abertura do Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 209510
        Next
        
        sNumNFDe = String(STRING_MAXIMO, 0)
        sNumNFAte = String(STRING_MAXIMO, 0)
    
        'Verifica se já existe nota com esses dados
        lErro = Comando_Executar(alComando(1), "SELECT Data, nNFIni, nNFFim FROM NFeFedRetInutNFe WHERE cStat = '102' AND Serie = ? AND FilialEmpresa = ? AND CONVERT(INT,nNFIni) <= ? AND CONVERT(INT,nNFFim) >= ? ", _
                                                dtData, sNumNFDe, sNumNFAte, Desconverte_Serie_Eletronica(objNFiscal.sSerie), objNFiscal.iFilialEmpresa, objNFiscal.lNumNotaFiscal, objNFiscal.lNumNotaFiscal)
        If lErro <> AD_SQL_SUCESSO Then gError 209511
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209512
    
        If lErro = AD_SQL_SUCESSO Then gError 209513 'Não emitir uma NF com a série inutilizada
    
        'Fecha Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        
    End If

    NFeInutFaixa_Valida2 = SUCESSO

    Exit Function

Erro_NFeInutFaixa_Valida2:

    NFeInutFaixa_Valida2 = gErr

    Select Case gErr

        Case 209510
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209511 To 209512
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
            
        Case 209513
            Call Rotina_Erro(vbOKOnly, "ERRO_INUT_FX_NFE_NF_EMITIDA_FAIXA2", gErr, sNumNFDe, sNumNFAte, objNFiscal.sSerie, Format(dtData, "dd/mm/yyyy"))

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209514)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Cliente_EmAtraso_Destacar(ByVal objClienteMaskEdBox As Object) As Long

Dim lErro As Long, dSaldoAtraso As Double, objCliente As New ClassCliente
Dim bDestacar As Boolean
Dim Cliente As Object

On Error GoTo Erro_Cliente_EmAtraso_Destacar

    If giCliAtrasoDestacar <> 0 Then
    
        bDestacar = False
        
        Set Cliente = objClienteMaskEdBox
        
        'Verifica se o Cliente foi preenchido
        If Len(Trim(Cliente.ClipText)) > 0 Then
    
            objCliente.sNomeReduzido = Cliente.Text
    
            'Lê o Cliente através do Nome Reduzido
            lErro = CF("Cliente_Le_NomeReduzido", objCliente)
            If lErro <> SUCESSO And lErro <> 12348 Then gError ERRO_SEM_MENSAGEM
    
            If lErro = SUCESSO Then
    
                If objCliente.iAtivo <> CLIENTE_ATIVO Or objCliente.iBloqueado <> 0 Then
                
                    bDestacar = True
                    
                Else
                
                    'Verifica atrasos
                    lErro = CF("Cliente_Obtem_SaldoAtraso", objCliente.lCodigo, dSaldoAtraso)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
                    If dSaldoAtraso > DELTA_VALORMONETARIO Then bDestacar = True
            
                End If
        
            End If
        
        End If
        
        If bDestacar Then
            objClienteMaskEdBox.ForeColor = vbRed
        Else
            objClienteMaskEdBox.ForeColor = vbWindowText
        End If
    
    End If
    
    Cliente_EmAtraso_Destacar = SUCESSO
    
    Exit Function
    
Erro_Cliente_EmAtraso_Destacar:

    Cliente_EmAtraso_Destacar = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201205)

    End Select
    
    Exit Function

End Function

Public Function Cliente_EmAtraso_Destacar2(ByVal lCliente As Long, ByRef iVermelho As Integer) As Long

Dim lErro As Long, dSaldoAtraso As Double, objCliente As New ClassCliente
Dim bDestacar As Boolean
Dim Cliente As Object

On Error GoTo Erro_Cliente_EmAtraso_Destacar2

    iVermelho = DESMARCADO

    If giCliAtrasoDestacar <> 0 Then

        objCliente.lCodigo = lCliente

        'Lê o Cliente através do Nome Reduzido
        lErro = CF("Cliente_Le", objCliente)
        If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM

        If lErro = SUCESSO Then

            If objCliente.iAtivo <> CLIENTE_ATIVO Or objCliente.iBloqueado <> 0 Then
            
                iVermelho = MARCADO
                
            Else
            
                'Verifica atrasos
                lErro = CF("Cliente_Obtem_SaldoAtraso", objCliente.lCodigo, dSaldoAtraso)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
                If dSaldoAtraso > DELTA_VALORMONETARIO Then iVermelho = MARCADO
        
            End If
    
        End If
    
    End If
    
    Cliente_EmAtraso_Destacar2 = SUCESSO
    
    Exit Function
    
Erro_Cliente_EmAtraso_Destacar2:

    Cliente_EmAtraso_Destacar2 = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201205)

    End Select
    
    Exit Function

End Function

Public Function NFDevBenef_Obter_UltimaDev(ByVal objNFDevBenef As ClassNFDevBenef) As Long
'Obtem a data da última devolução para o cliente em questão

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, dtData As Date

On Error GoTo Erro_NFDevBenef_Obter_UltimaDev
        
    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209897
    Next

    'Le a última NF do tipo devolução de material\beneficiamento enviada para esse cliente
    lErro = Comando_Executar(alComando(1), "SELECT MAX(DataEmissao) FROM NFiscal WHERE FilialEmpresa = ? AND TipoNFiscal = ? AND Cliente = ? AND FilialCli = ? AND DataEmissao < ? ", _
                                            dtData, objNFDevBenef.iFilialEmpresa, DOCINFO_NFISDBFNE, objNFDevBenef.lCliente, objNFDevBenef.iFilialCliente, objNFDevBenef.dtData)
    If lErro <> AD_SQL_SUCESSO Then gError 209898

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209899

    objNFDevBenef.dtDataUltDev = dtData
        
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFDevBenef_Obter_UltimaDev = SUCESSO

    Exit Function

Erro_NFDevBenef_Obter_UltimaDev:

    NFDevBenef_Obter_UltimaDev = gErr

    Select Case gErr

        Case 209897
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209898 To 209899
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209900)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFDevBenef_Sugerir_OPs(ByVal objNFDevBenef As ClassNFDevBenef) As Long
'Obtem a data da última devolução para o cliente em questão

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, dtData As Date
Dim sCodOP As String

On Error GoTo Erro_NFDevBenef_Sugerir_OPs
        
    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209901
    Next
    
    Set objNFDevBenef.colOP = New Collection
    
    sCodOP = String(STRING_OPCODIGO, 0)

    'Le as OPs que deram entrada em produção de material de terceiros para benefiamento
    'filtrando pela filial empresa\cliente\filial e data posterios a última devolução
    lErro = Comando_Executar(alComando(1), "SELECT DISTINCT O.Codigo FROM OrdensProducaoTodas AS O, MovimentoEstoque AS M WHERE M.FilialEmpresa = O.FilialEmpresa AND M.CodigoOP = O.Codigo AND M.TipoMov = 154 AND O.FilialEmpresa = ? AND O.TipoTerc = 1 AND O.CodTerc = ? AND O.FilialTerc = ? AND M.Data >= ? AND M.Data <= ? AND M.Almoxarifado <> ? ORDER BY O.Codigo ", _
                                            sCodOP, objNFDevBenef.iFilialEmpresa, objNFDevBenef.lCliente, objNFDevBenef.iFilialCliente, objNFDevBenef.dtDataUltDev, objNFDevBenef.dtData, gobjFAT.iNFDevSimbAlmSobra)
    If lErro <> AD_SQL_SUCESSO Then gError 209902

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209903

    Do While lErro <> AD_SQL_SEM_DADOS
    
        objNFDevBenef.colOP.Add sCodOP
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209904
    
    Loop
        
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFDevBenef_Sugerir_OPs = SUCESSO

    Exit Function

Erro_NFDevBenef_Sugerir_OPs:

    NFDevBenef_Sugerir_OPs = gErr

    Select Case gErr

        Case 209901
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209902 To 209904
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209905)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFDevBenef_Calcula(ByVal objNFDevBenef As ClassNFDevBenef) As Long
'Obtem a data da última devolução para o cliente em questão

Dim lErro As Long
Dim vCodOP As Variant
Dim objItemOP As ClassNFDevBenefItemOP
Dim colItemOP As New Collection

On Error GoTo Erro_NFDevBenef_Calcula
    
    Set objNFDevBenef.colEntProd = New Collection
    Set objNFDevBenef.colItemOP = New Collection
    Set objNFDevBenef.colReqProd = New Collection
    
    Set objNFDevBenef.colItensDev = New Collection
    Set objNFDevBenef.colItens = New Collection
    
    For Each vCodOP In objNFDevBenef.colOP
    
        Set colItemOP = New Collection
    
        'Le as produções entradas da OP e agrupa por item de OP separando a Qtd Disponível da Qtd de Sobra
        lErro = NFDevBenef_Le_ProdEnt(objNFDevBenef, vCodOP, colItemOP, 0)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        'Para cada item de OP vai ler as requisições de maneira recursiva
        For Each objItemOP In colItemOP
            lErro = NFDevBenef_Le_ReqProd(objNFDevBenef, objItemOP, objItemOP, 1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        Next
        
    Next
    
    'Totaliza os insumos de todos itens de OP abatendo o que já foi devolvido
    lErro = NFDevBenef_Calcula_Dev(objNFDevBenef)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    'Le os saldos a devolver nas remessas para os produtos que serão devolvidos
    lErro = NFDevBenef_Le_Rem(objNFDevBenef)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    'Preenche a coleção de itens de acordo com as quantidades a serem devolvidas
    'com base nos preços disponíveis
    lErro = NFDevBenef_Calcula_Itens(objNFDevBenef)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    NFDevBenef_Calcula = SUCESSO

    Exit Function

Erro_NFDevBenef_Calcula:

    NFDevBenef_Calcula = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209906)

    End Select

    Exit Function

End Function

Private Function NFDevBenef_Le_ProdEnt(ByVal objNFDevBenef As ClassNFDevBenef, ByVal sOP As String, ByVal colItemOP As Collection, ByVal iNivel As Integer) As Long
'Le as entradas de produção para a OP passada

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objEntProd As ClassNFDevBenefEntProd
Dim objItemOP As ClassNFDevBenefItemOP
Dim tME As typeItemMovEstoque, dFator As Double
Dim lNumIntDocOrigemAnt As Long
Dim objProduto As ClassProduto

On Error GoTo Erro_NFDevBenef_Le_ProdEnt

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209907
    Next
    
    tME.sProduto = String(STRING_PRODUTO, 0)
    tME.sSiglaUM = String(STRING_UM_SIGLA, 0)
        
    lErro = Comando_Executar(alComando(1), "SELECT NumIntDocOrigem, NumIntDoc, Produto, SiglaUM, Quantidade, Almoxarifado, Data FROM MovimentoEstoque AS M WHERE M.FilialEmpresa = ? AND M.CodigoOP = ? AND M.TipoMov = 154 AND TipoNumIntDocOrigem = 5 ORDER BY NumIntDocOrigem, Data  ", _
                                            tME.lNumIntDocOrigem, tME.lNumIntDoc, tME.sProduto, tME.sSiglaUM, tME.dQuantidade, tME.iAlmoxarifado, tME.dtData, objNFDevBenef.iFilialEmpresa, sOP)
    If lErro <> AD_SQL_SUCESSO Then gError 209908

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209909

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objEntProd = New ClassNFDevBenefEntProd
        
        objEntProd.lNumIntMovto = tME.lNumIntDoc
        objEntProd.dtDataEntrada = tME.dtData
        objEntProd.sOP = sOP
        objEntProd.sProdutoOP = tME.sProduto
        objEntProd.sUM = tME.sSiglaUM
        objEntProd.dQuantEntrada = tME.dQuantidade
        objEntProd.iAlmoxarifado = tME.iAlmoxarifado
        objEntProd.lNumIntItemOP = tME.lNumIntDocOrigem
        
        'Carrega a coleção de produções entradas dessa OP
        objNFDevBenef.colEntProd.Add objEntProd
        
        If lNumIntDocOrigemAnt <> tME.lNumIntDocOrigem Then
            'Acumula as entradas entre disponível e sobra(saldo de fábrica)
            lNumIntDocOrigemAnt = tME.lNumIntDocOrigem
            Set objItemOP = New ClassNFDevBenefItemOP
            objItemOP.lNumIntItemOP = objEntProd.lNumIntItemOP
            objItemOP.sOP = objEntProd.sOP
            objItemOP.sProdutoOP = objEntProd.sProdutoOP
            objItemOP.sUM = objEntProd.sUM
            colItemOP.Add objItemOP
            
            'Só vai adicionar para as OPs de primeiro nível, na recursividade vai servir só para ir pegando os insumos
            'proporcionalizamdo as quantidades de acordo com dQuantSaldo e dQuantProdDisp
            If iNivel = 0 Then
                objNFDevBenef.colItemOP.Add objItemOP
            End If
        End If
        
        dFator = 1
        If UCase(objItemOP.sUM) <> UCase(objEntProd.sUM) Then
            Set objProduto = New ClassProduto
            objProduto.sCodigo = objEntProd.sProdutoOP
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM

            lErro = CF("UM_Conversao", objProduto.iClasseUM, objEntProd.sUM, objItemOP.sUM, dFator)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If
        
        If objEntProd.iAlmoxarifado = gobjFAT.iNFDevSimbAlmSobra Then
            objItemOP.dQuantSaldo = objItemOP.dQuantSaldo + (objEntProd.dQuantEntrada * dFator)
        Else
            objItemOP.dQuantProdDisp = objItemOP.dQuantProdDisp + (objEntProd.dQuantEntrada * dFator)
        End If
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209910
    
    Loop
    
    'Preenche o fator para cálculo dos insumos
    For Each objItemOP In colItemOP
        objItemOP.dFatorProd = (objItemOP.dQuantProdDisp / (objItemOP.dQuantSaldo + objItemOP.dQuantProdDisp))
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFDevBenef_Le_ProdEnt = SUCESSO

    Exit Function

Erro_NFDevBenef_Le_ProdEnt:

    NFDevBenef_Le_ProdEnt = gErr

    Select Case gErr
    
        Case 209907
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209908 To 209910
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209911)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFDevBenef_Le_ReqProd(ByVal objNFDevBenef As ClassNFDevBenef, ByVal objItemOPPrinc As ClassNFDevBenefItemOP, ByVal objItemOP As ClassNFDevBenefItemOP, ByVal iNivel As Integer) As Long
'Le as requisições de produção para o item de OP passado

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objReqProd As ClassNFDevBenefReqProd
Dim objInsumoOP As ClassNFDevBenefInsumo
Dim objProduto As ClassProduto
Dim colRatreamentoMovto As Collection
Dim objRatreamentoMovto As ClassRastreamentoMovto
Dim colItemOP As Collection, dFatorUM As Double
Dim tME As typeItemMovEstoque, bAchou As Boolean
Dim objItemOPFilho As ClassNFDevBenefItemOP

On Error GoTo Erro_NFDevBenef_Le_ReqProd

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209912
    Next
    
    tME.sProduto = String(STRING_PRODUTO, 0)
    tME.sSiglaUM = String(STRING_UM_SIGLA, 0)
        
    lErro = Comando_Executar(alComando(1), "SELECT NumIntDoc, Produto, SiglaUM, Quantidade, Data FROM MovimentoEstoque AS M WHERE M.TipoMov = 151 AND M.TipoNumIntDocOrigem = 5 AND M.NumIntDocOrigem = ? ORDER BY Data ", _
                                            tME.lNumIntDoc, tME.sProduto, tME.sSiglaUM, tME.dQuantidade, tME.dtData, objItemOP.lNumIntItemOP)
    If lErro <> AD_SQL_SUCESSO Then gError 209913

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209914

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objReqProd = New ClassNFDevBenefReqProd
        
        objReqProd.lNumIntMovto = tME.lNumIntDoc
        objReqProd.dtDataReqProd = tME.dtData
        objReqProd.sOP = objItemOP.sOP
        objReqProd.sProduto = tME.sProduto
        objReqProd.sUM = tME.sSiglaUM
        objReqProd.dQuantReqProd = tME.dQuantidade
        objReqProd.lNumIntItemOP = objItemOP.lNumIntItemOP
        objReqProd.lNumIntItemOPPrinc = objItemOPPrinc.lNumIntItemOP
        objReqProd.dFatorProd = objItemOP.dFatorProd
        
        objNFDevBenef.colReqProd.Add objReqProd
        
        Set objProduto = New ClassProduto
        
        objProduto.sCodigo = objReqProd.sProduto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
        'Se o item da requisição não é rastreado por OP
        'tem que incluir na coleção itens consumidos senão
        'Tem que refazer todos os cálculos para OP em questão
        If objProduto.iRastro <> PRODUTO_RASTRO_OP Then
        
            'Adiciona a quantidade nos insumos do Item de Op Principal já com o acerto de acordo com a quantidade produzida disponível
            dFatorUM = 1
            bAchou = False
            For Each objInsumoOP In objItemOPPrinc.colInsumos
                If objInsumoOP.sProduto = objReqProd.sProduto Then
                    lErro = CF("UM_Conversao", objProduto.iClasseUM, objReqProd.sUM, objInsumoOP.sUM, dFatorUM)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    bAchou = True
                    Exit For
                End If
            Next
            If Not bAchou Then
                Set objInsumoOP = New ClassNFDevBenefInsumo
                objInsumoOP.sProduto = objReqProd.sProduto
                objInsumoOP.sUM = objReqProd.sUM
                objItemOPPrinc.colInsumos.Add objInsumoOP
            End If
            objInsumoOP.dQuantidade = objInsumoOP.dQuantidade + objReqProd.dQuantReqProd * dFatorUM * objReqProd.dFatorProd
        
        Else
        
            Set colRatreamentoMovto = New Collection
            
            'Le o rastreamento
            lErro = CF("RastreamentoMovto_Le_DocOrigem", objReqProd.lNumIntMovto, TIPO_RASTREAMENTO_MOVTO_MOVTO_ESTOQUE, colRatreamentoMovto)
            If lErro <> SUCESSO And lErro <> 78414 Then gError ERRO_SEM_MENSAGEM
            
            If colRatreamentoMovto.Count <> 0 Then
            
                Set objRatreamentoMovto = colRatreamentoMovto(1)
                Set colItemOP = New Collection
                
                objReqProd.sLoteOP = objRatreamentoMovto.sLote
            
                'Le as produções entradas da OP e agrupa por item de OP separando a Qtd Disponível da Qtd de Sobra
                lErro = NFDevBenef_Le_ProdEnt(objNFDevBenef, objReqProd.sLoteOP, colItemOP, iNivel + 1)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                'Para cada item de OP vai ler as requisições de maneira recursiva
                For Each objItemOPFilho In colItemOP
                    'Se o item da OP é o mesmo da requisição
                    If objItemOPFilho.sProdutoOP = objReqProd.sProduto Then
                    
                        lErro = CF("UM_Conversao", objProduto.iClasseUM, objReqProd.sUM, objItemOPFilho.sUM, dFatorUM)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                        'Ajusta o fator para considerar também o fator pai e a proporcionalidade entre o que foi produzido e o que foi requitado
                        objItemOPFilho.dFatorProd = objItemOP.dFatorProd * ((objReqProd.dQuantReqProd * dFatorUM) / (objItemOPFilho.dQuantProdDisp + objItemOPFilho.dQuantSaldo))
                    
                        'RECURSIVO
                        lErro = NFDevBenef_Le_ReqProd(objNFDevBenef, objItemOPPrinc, objItemOPFilho, iNivel + 1)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                        
                        Exit For
                    End If
                Next
            
            End If
            
        End If
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209915
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFDevBenef_Le_ReqProd = SUCESSO

    Exit Function

Erro_NFDevBenef_Le_ReqProd:

    NFDevBenef_Le_ReqProd = gErr

    Select Case gErr
    
        Case 209912
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209913 To 209915
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209916)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFDevBenef_Calcula_Dev(ByVal objNFDevBenef As ClassNFDevBenef) As Long
'Acumula os insumos a serem devolvidos dos vários itens de OP
Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, dQtdeDevolvida As Double
Dim objInsumoOP As ClassNFDevBenefInsumo
Dim objInsumoDev As ClassNFDevBenefInsumo
Dim objItemOP As ClassNFDevBenefItemOP, bAchou As Boolean
Dim dFatorUM As Double, objProduto As ClassProduto, sUM As String
Dim objItemOPDev As ClassNFDevBenefInsumo

On Error GoTo Erro_NFDevBenef_Calcula_Dev

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209917
    Next
    
    'TEM QUE ABATER O QUE JÁ FOI UTILIZADO EM OUTRAS
    'DEVOLUÇÕES
    For Each objItemOP In objNFDevBenef.colItemOP
        For Each objInsumoOP In objItemOP.colInsumos
            
            sUM = String(STRING_UM_SIGLA, 0)
            
            lErro = Comando_Executar(alComando(1), "SELECT I.UnidadeMed, X.QuantDev FROM ItensNFDevBenefItemOP AS X, ItensNFiscal as I WHERE X.NumIntItemNFDev = I.NumIntDoc AND X.NumIntItemOP = ? AND I.Produto = ? ", _
                                                    sUM, dQtdeDevolvida, objItemOP.lNumIntItemOP, objInsumoOP.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 209918
        
            'Busca Primeiro
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209919
            
            Do While lErro <> AD_SQL_SEM_DADOS
            
                dFatorUM = 1
                If UCase(sUM) <> UCase(objInsumoOP.sUM) Then
                    Set objProduto = New ClassProduto
                    objProduto.sCodigo = objInsumoOP.sProduto
                    lErro = CF("Produto_Le", objProduto)
                    If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
                    lErro = CF("UM_Conversao", objProduto.iClasseUM, sUM, objInsumoOP.sUM, dFatorUM)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                End If
                
                objInsumoOP.dQuantDevolvida = objInsumoOP.dQuantDevolvida + ((dQtdeDevolvida * dFatorUM))
                        
                'Busca Próximo
                lErro = Comando_BuscarProximo(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209920
            
            Loop
            
            objInsumoOP.dQuantADevolver = objInsumoOP.dQuantidade - objInsumoOP.dQuantDevolvida
            
        Next
    Next
    
    For Each objItemOP In objNFDevBenef.colItemOP
        For Each objInsumoOP In objItemOP.colInsumos
            'Se ainda existe produto a se devolver
            If objInsumoOP.dQuantADevolver > 0.00009 Then
                dFatorUM = 1
                bAchou = False
                For Each objInsumoDev In objNFDevBenef.colItensDev
                    If objInsumoDev.sProduto = objInsumoOP.sProduto Then
                        'Se o produto já foi adicionado como insumo
                        If UCase(objInsumoDev.sUM) <> UCase(objInsumoOP.sUM) Then
                            Set objProduto = New ClassProduto
                            objProduto.sCodigo = objInsumoOP.sProduto
                            lErro = CF("Produto_Le", objProduto)
                            If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
                
                            lErro = CF("UM_Conversao", objProduto.iClasseUM, objInsumoOP.sUM, objInsumoDev.sUM, dFatorUM)
                            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                        End If
                        bAchou = True
                        Exit For
                    End If
                Next
                If Not bAchou Then
                    Set objInsumoDev = New ClassNFDevBenefInsumo
                    objInsumoDev.sProduto = objInsumoOP.sProduto
                    objInsumoDev.sUM = objInsumoOP.sUM
                    objNFDevBenef.colItensDev.Add objInsumoDev
                End If
                'Guarda a relação de Insumos\ItemOP que deram origem a quantidade total a devolver
                objInsumoDev.dQuantidade = objInsumoDev.dQuantidade + ((objInsumoOP.dQuantADevolver * dFatorUM))
                Set objItemOPDev = New ClassNFDevBenefInsumo
                objItemOPDev.dQuantDevolvida = ((objInsumoOP.dQuantDevolvida * dFatorUM))
                objItemOPDev.dQuantidade = ((objInsumoOP.dQuantidade * dFatorUM))
                objItemOPDev.dQuantADevolver = objItemOPDev.dQuantidade - objItemOPDev.dQuantDevolvida
                objItemOPDev.lNumIntItemOP = objItemOP.lNumIntItemOP
                objInsumoDev.colItemOP.Add objItemOPDev
            End If
        Next
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFDevBenef_Calcula_Dev = SUCESSO

    Exit Function

Erro_NFDevBenef_Calcula_Dev:

    NFDevBenef_Calcula_Dev = gErr

    Select Case gErr

        Case 209917
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209918 To 209920
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209921)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function NFDevBenef_Le_Rem(ByVal objNFDevBenef As ClassNFDevBenef) As Long
'Le as entradas de produção para a OP passada

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objInsumo As ClassNFDevBenefInsumo
Dim objItemNFRem As ClassItemNF
Dim tINF As typeItemNF

On Error GoTo Erro_NFDevBenef_Le_Rem

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209922
    Next
    
    For Each objInsumo In objNFDevBenef.colItensDev
    
        tINF.sUnidadeMed = String(STRING_UM_SIGLA, 0)
        
        'Le as remessas para beneficiamento que ainda possuem saldo a receber por ordem de emissão
        'para filialempresa\cliente\filial\produto específicos
        lErro = Comando_Executar(alComando(1), "SELECT I.NumIntDoc, I.PrecoUnitario, SaldoADevolver, I.UnidadeMed FROM ItensNFRemBenef AS X, ItensNFiscal as I, NFiscal AS N WHERE I.NumIntNF = N.NumIntDoc AND X.NumIntItemNF = I.NumIntDoc AND X.SaldoADevolver > ? AND N.FilialEmpresa = ? AND I.Produto = ? AND ((N.Cliente = ? AND N.FilialCli = ?) OR (N.ClienteBenef = ? AND N.FilialCliBenef = ?)) ORDER By DataEmissao", _
        tINF.lNumIntDoc, tINF.dPrecoUnitario, tINF.dQuantidade, tINF.sUnidadeMed, 0.00005, objNFDevBenef.iFilialEmpresa, objInsumo.sProduto, objNFDevBenef.lCliente, objNFDevBenef.iFilialCliente, objNFDevBenef.lCliente, objNFDevBenef.iFilialCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 209923
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209924
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objItemNFRem = New ClassItemNF
        
            objItemNFRem.lNumIntDoc = tINF.lNumIntDoc
            objItemNFRem.dPrecoUnitario = tINF.dPrecoUnitario
            objItemNFRem.dQuantidade = tINF.dQuantidade
            objItemNFRem.sUnidadeMed = tINF.sUnidadeMed
                   
            objInsumo.colItemRem.Add objItemNFRem
        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209925
        
        Loop
        
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFDevBenef_Le_Rem = SUCESSO

    Exit Function

Erro_NFDevBenef_Le_Rem:

    NFDevBenef_Le_Rem = gErr

    Select Case gErr

        Case 209922
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209923 To 209925
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209926)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFDevBenef_Calcula_Itens(ByVal objNFDevBenef As ClassNFDevBenef) As Long
'Com base em tudo que foi consumido e nas remessas calcula o que vai ser devolvido

Dim lErro As Long
Dim objInsumo As ClassNFDevBenefInsumo
Dim objItemNFRem As ClassItemNF
Dim objItemNFRemAdd As ClassItemNF
Dim objItemNF As ClassItemNF
Dim dPrecoUN As Double, dQtdePreco As Double
Dim dFatorUM As Double, objProduto As ClassProduto
Dim dFatorPreco As Double
Dim objItemOPDev As ClassNFDevBenefInsumo
Dim bAvisou As Boolean, iIndice As Integer, dFatorTON As Double
Dim dQtdeAnt As Double, sUMAnt As String

On Error GoTo Erro_NFDevBenef_Calcula_Itens

    bAvisou = False
    
    iIndice = 0
    For Each objInsumo In objNFDevBenef.colItensDev
    
        iIndice = iIndice + 1
    
        Set objItemNF = New ClassItemNF
        Set objProduto = New ClassProduto
    
        objProduto.sCodigo = objInsumo.sProduto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
        objItemNF.sProduto = objInsumo.sProduto
        objItemNF.sUnidadeMed = objInsumo.sUM
        objItemNF.iClasseUM = objProduto.iClasseUM
        objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
        objItemNF.sUMVenda = objProduto.sSiglaUMVenda
        objItemNF.iItem = iIndice
        objItemNF.sDescricaoItem = objProduto.sDescricao
    
        dPrecoUN = 0
        dQtdePreco = 0
        For Each objItemNFRem In objInsumo.colItemRem
  
            lErro = CF("UM_Conversao", objProduto.iClasseUM, objItemNFRem.sUnidadeMed, objInsumo.sUM, dFatorUM)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

            'Utiliza as remessas, das mais antigas para as mais novas, para ver
            'quanto é possível devolver com determinado preço
            If dPrecoUN = 0 Or Abs(dPrecoUN - Arredonda_Moeda(objItemNFRem.dPrecoUnitario / dFatorUM)) < DELTA_VALORMONETARIO Then
                Set objItemNFRemAdd = New ClassItemNF
                dPrecoUN = (objItemNFRem.dPrecoUnitario / dFatorUM)
                dQtdePreco = ((objItemNFRem.dQuantidade * dFatorUM))
                objItemNFRemAdd.dQuantidade = objItemNF.dQuantidade
                If dQtdePreco + objItemNF.dQuantidade - objInsumo.dQuantidade > QTDE_ESTOQUE_DELTA Then
                    objItemNF.dQuantidade = objInsumo.dQuantidade
                Else
                    objItemNF.dQuantidade = objItemNF.dQuantidade + dQtdePreco
                End If
                objItemNFRemAdd.dQuantidade = (((objItemNF.dQuantidade - objItemNFRemAdd.dQuantidade) / dFatorUM)) 'UM da remessa
                objItemNFRemAdd.lNumIntDoc = objItemNFRem.lNumIntDoc
                objItemNFRemAdd.sUnidadeMed = objItemNFRem.sUnidadeMed
                objItemNF.colItensNFDevBenefRem.Add objItemNFRemAdd
                
                objItemNF.dPrecoUnitario = dPrecoUN
                
                If Abs(objItemNF.dQuantidade - objInsumo.dQuantidade) < DELTA_VALORMONETARIO Then Exit For
            End If
        Next
        
        dFatorPreco = objItemNF.dQuantidade / objInsumo.dQuantidade
        
        For Each objItemOPDev In objInsumo.colItemOP
            'Ajusta a quantidade dos insumos das OPs de acordo com a quantidade devolvida
            'que pode ser menor por conta do preço na NF de remessa
            objItemOPDev.dQuantADevolver = (((objItemOPDev.dQuantidade - objItemOPDev.dQuantDevolvida) * dFatorPreco))
            objItemNF.colItensNFDevBenefItemOP.Add objItemOPDev
        Next
        
        If Abs(objItemNF.dQuantidade - objInsumo.dQuantidade) > DELTA_VALORMONETARIO And Not bAvisou Then
            bAvisou = True
            Call Rotina_Aviso(vbOKOnly, "AVISO_DEVBENEF_SEM_PRECO_SUF")
        End If
        
        If objItemNF.dQuantidade > QTDE_ESTOQUE_DELTA Then
            objNFDevBenef.colItens.Add objItemNF
        End If
    
    Next
    
    If objNFDevBenef.colItens.Count = 0 Then
        Call Rotina_Aviso(vbOKOnly, "AVISO_DEVBENEF_SEM_ITENS")
    Else
           
        'Coloca a UM conforme configuração e arredonda valores
        For Each objItemNF In objNFDevBenef.colItens
        
            dQtdeAnt = objItemNF.dQuantidade
            sUMAnt = objItemNF.sUnidadeMed

            Select Case gobjFAT.iNFDevSimbUM
            
                Case 0 'Utiliza a UM da Requisição para produção (Já está dessa forma)
                    'Só arredonda
                    objItemNF.dQuantidade = StrParaDbl(Formata_Estoque(objItemNF.dQuantidade))
                
                Case 1 ' Se tiver em KG troca para TON
                    If objItemNF.sUnidadeMed = "KG" Then
                        objItemNF.sUnidadeMed = "TON"
                        objItemNF.dQuantidade = StrParaDbl(Formata_Estoque(objItemNF.dQuantidade / 1000))
                        objItemNF.dPrecoUnitario = (objItemNF.dPrecoUnitario * 1000)
                    Else
                        objItemNF.dQuantidade = StrParaDbl(Formata_Estoque(objItemNF.dQuantidade))
                    End If
                
                Case 2 'Utiliza a UM da NF de Remessa
                    Set objItemNFRem = objItemNF.colItensNFDevBenefRem.Item(1)
                
                    lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, objItemNFRem.sUnidadeMed, dFatorUM)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                    objItemNF.sUnidadeMed = objItemNFRem.sUnidadeMed
                    objItemNF.dQuantidade = StrParaDbl(Formata_Estoque(objItemNF.dQuantidade * dFatorUM))
                    objItemNF.dPrecoUnitario = (objItemNF.dPrecoUnitario / dFatorUM)
                
            End Select
            objItemNF.dPrecoUnitario = Arredonda_Moeda(objItemNF.dPrecoUnitario)
            
            lErro = CF("NFDevBenef_Ajusta_Qtde", sUMAnt, dQtdeAnt, objItemNF)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
        Next
        
    End If

    NFDevBenef_Calcula_Itens = SUCESSO

    Exit Function

Erro_NFDevBenef_Calcula_Itens:

    NFDevBenef_Calcula_Itens = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 211705) '209927)

    End Select

    Exit Function

End Function

Public Function ItemNFiscalRem_Le_SaldoADevolver(ByVal lNumIntDoc As Long, dSaldoADevolver As Double) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_ItemNFiscalRem_Le_SaldoADevolver

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209956
    Next
    
    dSaldoADevolver = 0
        
    lErro = Comando_Executar(alComando(1), "SELECT SaldoADevolver FROM ItensNFRemBenef WHERE NumIntItemNF = ? ", dSaldoADevolver, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 209957

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209958
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItemNFiscalRem_Le_SaldoADevolver = SUCESSO

    Exit Function

Erro_ItemNFiscalRem_Le_SaldoADevolver:

    ItemNFiscalRem_Le_SaldoADevolver = gErr

    Select Case gErr

        Case 209956
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209957 To 209958
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFREMBENEF", gErr)
        
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209959)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFiscalDev_Le_Dados_Benef(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objItemNF As ClassItemNF
Dim objItemNFRem As ClassItemNF
Dim objItemOPDev As ClassNFDevBenefInsumo
Dim lNumIntItemNFRem As Long, dQuantidadeRem As Double
Dim lNumIntItemOP As Long, dQuantDev As Double, dQuantConsCalc As Double, dQuantDevAnt As Double

On Error GoTo Erro_NFiscalDev_Le_Dados_Benef

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209960
    Next
    
    For Each objItemNF In objNF.colItensNF
    
        lErro = Comando_Executar(alComando(1), "SELECT NumIntItemNFRem, Quantidade FROM ItensNFDevBenefRem WHERE NumIntItemNFDev = ? ", lNumIntItemNFRem, dQuantidadeRem, objItemNF.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 209961
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209962
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objItemNFRem = New ClassItemNF
            objItemNFRem.lNumIntDoc = lNumIntItemNFRem
            objItemNFRem.dQuantidade = dQuantidadeRem
            objItemNF.colItensNFDevBenefRem.Add objItemNFRem
        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209963
        
        Loop
        
        lErro = Comando_Executar(alComando(2), "SELECT NumIntItemOP, QuantDev, QuantConsCalc, QuantDevAnt FROM ItensNFDevBenefItemOP WHERE NumIntItemNFDev = ? ", lNumIntItemOP, dQuantDev, dQuantConsCalc, dQuantDevAnt, objItemNF.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 209964
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209965
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objItemOPDev = New ClassNFDevBenefInsumo
            objItemOPDev.lNumIntItemOP = lNumIntItemOP
            objItemOPDev.dQuantADevolver = dQuantDev 'Quantidade que foi devolvida para esse item
            objItemOPDev.dQuantDevolvida = dQuantDevAnt 'Quantidade devolvida anterior a essa
            objItemOPDev.dQuantidade = dQuantConsCalc 'QUantidade consumido que foi canculada
            objItemNF.colItensNFDevBenefItemOP.Add objItemOPDev
        
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209966
        
        Loop
        
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscalDev_Le_Dados_Benef = SUCESSO

    Exit Function

Erro_NFiscalDev_Le_Dados_Benef:

    NFiscalDev_Le_Dados_Benef = gErr

    Select Case gErr

        Case 209960
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209961 To 209963
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFDEVBENEFREM", gErr)

        Case 209964 To 209966
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFDEVBENEFITEMOP", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209967)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFDevBenef_Ajusta_Qtde(ByVal sUMAnt As String, ByVal dQtdeAnt As String, ByVal objItemNF As ClassItemNF) As Long
'Com base em tudo que foi consumido e nas remessas calcula o que vai ser devolvido

Dim lErro As Long
Dim objInsumo As ClassNFDevBenefInsumo
Dim objItemNFRem As ClassItemNF
Dim dFatorUM As Double, dFatorQtde As Double
Dim objProduto As New ClassProduto

On Error GoTo Erro_NFDevBenef_Ajusta_Qtde

    'Se trocou a UM tem que ajustar as quantidades consumidas na produção que estão se baseando nessa UM
    If objItemNF.sUnidadeMed <> sUMAnt Then
    
        If objItemNF.iClasseUM = 0 Then
        
            objProduto.sCodigo = objItemNF.sProduto
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
            
            objItemNF.iClasseUM = objProduto.iClasseUM
        
        End If
    
        lErro = CF("UM_Conversao", objItemNF.iClasseUM, sUMAnt, objItemNF.sUnidadeMed, dFatorUM)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        For Each objInsumo In objItemNF.colItensNFDevBenefItemOP
        
            'Preferi não arredondar para não perder precisão e o sistema acabar achando que falta
            'qtde a devolver da OP
            objInsumo.dQuantDevolvida = objInsumo.dQuantDevolvida * dFatorUM
            objInsumo.dQuantidade = objInsumo.dQuantidade * dFatorUM
            
        Next
        
        For Each objItemNFRem In objItemNF.colItensNFDevBenefRem
            objItemNFRem.dQuantidade = objItemNFRem.dQuantidade / dFatorUM
        Next
    
    End If
    
    'Se trocou a quantidade tem que acertar tanto o que vai baixar da remessa quando o consumo a ser
    'devolvido das OPs
    If Abs(objItemNF.dQuantidade - dQtdeAnt) > QTDE_ESTOQUE_DELTA Then
    
        dFatorQtde = dQtdeAnt / objItemNF.dQuantidade
    
        For Each objInsumo In objItemNF.colItensNFDevBenefItemOP
            objInsumo.dQuantADevolver = objInsumo.dQuantADevolver / dFatorQtde
        Next
        
        For Each objItemNFRem In objItemNF.colItensNFDevBenefRem
            objItemNFRem.dQuantidade = objItemNFRem.dQuantidade / dFatorQtde
        Next
        
    End If
    
    NFDevBenef_Ajusta_Qtde = SUCESSO

    Exit Function

Erro_NFDevBenef_Ajusta_Qtde:

    NFDevBenef_Ajusta_Qtde = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209927)

    End Select

    Exit Function

End Function

Public Function EstoqueTerc_Le_Reserva(ByVal objNF As ClassNFiscal, ByVal objEstTerc As ClassEstoqueTerc, ByVal objProduto As ClassProduto, dQtdeReserv As Double) As Long
    dQtdeReserv = 0
    EstoqueTerc_Le_Reserva = SUCESSO
End Function

Public Function NFe_Le_Nao_Autorizadas(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal colNFs As Collection) As Long
'Le as NFs eletrônicas internas, não canceladas da filial empresa que ainda não foram autorizadas

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, sSQL As String
Dim tNF As typeNFiscal, objNF As ClassNFiscal

On Error GoTo Erro_NFe_Le_Nao_Autorizadas

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211151
    Next
    
    tNF.sSerie = String(STRING_SERIE, 0)
    
    'Le as NFs eletrônicas internas, não canceladas da filial empresa que ainda não foram autorizadas
    sSQL = "SELECT N.NumIntDoc, N.Serie, N.NumNotaFiscal, N.DataEmissao FROM NFiscal AS N, TiposDocInfo AS T WHERE T.Codigo = N.TipoNFiscal AND T.Tipo IN (1,2) AND N.DataEmissao >= ? AND N.NFe = ? AND (N.FilialEmpresa = ? OR ?=?) AND N.FilialEmpresa < 50 AND N.Status NOT IN (?,?) AND "
    sSQL = sSQL & "NOT EXISTS (SELECT A.* FROM NFeFedProtNfe AS A WHERE A.NumIntNF = N.NumIntDoc AND A.cStat = '100')"
    
    lErro = Comando_Executar(alComando(1), sSQL, tNF.lNumIntDoc, tNF.sSerie, tNF.lNumNotaFiscal, tNF.dtDataEmissao, dtDataDe, MARCADO, iFilialEmpresa, iFilialEmpresa, EMPRESA_TODA, STATUS_CANCELADO, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 211152

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211153
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objNF = New ClassNFiscal
        objNF.lNumIntDoc = tNF.lNumIntDoc
        objNF.sSerie = tNF.sSerie
        objNF.lNumNotaFiscal = tNF.lNumNotaFiscal
        objNF.dtDataEmissao = tNF.dtDataEmissao
        colNFs.Add objNF
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211154
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFe_Le_Nao_Autorizadas = SUCESSO

    Exit Function

Erro_NFe_Le_Nao_Autorizadas:

    NFe_Le_Nao_Autorizadas = gErr

    Select Case gErr

        Case 211151
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211152 To 211154
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 211155)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFe_Le_Canc_Nao_Homologados(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal colNFs As Collection) As Long
'Obtem lista de nfes canceladas no Corporator que ainda nao tiveram o cancelamento homologado na receita

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, sSQL As String
Dim tNF As typeNFiscal, objNF As ClassNFiscal

On Error GoTo Erro_NFe_Le_Canc_Nao_Homologados

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211156
    Next

    tNF.sSerie = String(STRING_SERIE, 0)
    
    sSQL = "SELECT N.NumIntDoc, N.Serie, N.NumNotaFiscal, N.DataEmissao FROM NFiscal AS N, TiposDocInfo AS T, NFeFedProtNfe AS A WHERE T.Codigo = N.TipoNFiscal AND T.Tipo IN (1,2) AND A.NumIntNF = N.NumIntDoc AND A.cStat = '100' AND A.Data >= ? AND N.NFe = ? AND (N.FilialEmpresa = ? OR ?=?) AND N.FilialEmpresa < 50 AND N.Status = ? AND "
    sSQL = sSQL & "NOT EXISTS (SELECT C.* FROM NFEFedRetCancNFe AS C WHERE C.NumIntNF = N.NumIntDoc AND C.cStat IN ('101', '151', '135', '155') )"
    
    lErro = Comando_Executar(alComando(1), sSQL, tNF.lNumIntDoc, tNF.sSerie, tNF.lNumNotaFiscal, tNF.dtDataEmissao, dtDataDe, MARCADO, iFilialEmpresa, iFilialEmpresa, EMPRESA_TODA, STATUS_CANCELADO)
    If lErro <> AD_SQL_SUCESSO Then gError 211157

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211158
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objNF = New ClassNFiscal
        objNF.lNumIntDoc = tNF.lNumIntDoc
        objNF.sSerie = tNF.sSerie
        objNF.lNumNotaFiscal = tNF.lNumNotaFiscal
        objNF.dtDataEmissao = tNF.dtDataEmissao
        colNFs.Add objNF
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211159
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFe_Le_Canc_Nao_Homologados = SUCESSO

    Exit Function

Erro_NFe_Le_Canc_Nao_Homologados:

    NFe_Le_Canc_Nao_Homologados = gErr

    Select Case gErr

        Case 211156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211157 To 211159
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 211160)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CamposGenericos_ValidaExclusao_SatisfacaoRelacCli() As Long
'Verifica se é válida a exclusão de valores para o campo Satisfação

Dim lComando As Long
Dim lErro As Long
Dim lSatisfacao As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_SatisfacaoRelacCli
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 211230
    
    'Busca Tipos de Paradas em CTMaquinasParadas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Satisfacao FROM RelacionamentoClientes WHERE Satisfacao NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Satisfacao <> 0", lSatisfacao, CAMPOSGENERICOS_RELACCLI_SATIS)
    If lErro <> AD_SQL_SUCESSO Then gError 211231
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211232
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 211233

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_SatisfacaoRelacCli = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_SatisfacaoRelacCli:

    CamposGenericos_ValidaExclusao_SatisfacaoRelacCli = gErr
    
    Select Case gErr
    
        Case 211230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 211231, 211232
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELACIONAMENTOCLIENTES", gErr)
        
        Case 211233
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, lSatisfacao, CAMPOSGENERICOS_RELACCLI_SATIS)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211234)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function Calcula_Data(ByVal dtDataBase As Date, ByVal iNumDias As Integer, ByVal iModificado As Integer, ByVal iTipoIntervalo As Integer, dtData As Date)
'TipoIntervalo = CONDPAGTO_TIPOINTERVALO_DIAS_UTEIS
'              = CONDPAGTO_TIPOINTERVALO_DIAS
    
Dim lErro As Long
Dim objCondicaoPagto As New ClassCondicaoPagto
Dim objParc As New ClassCondicaoPagtoParc

On Error GoTo Erro_Calcula_Data
      
    objCondicaoPagto.colParcelas.Add objParc
    
    objParc.iTipoDataBase = CONDPAGTO_TIPODATABASE_EMISSAO
    objCondicaoPagto.dtDataEmissao = dtDataBase
    
    objParc.iModificador = iModificado
    objParc.iDias = iNumDias
    objParc.iTipoIntervalo = iTipoIntervalo
    objParc.dPercReceb = 1

    lErro = CF("CondicaoPagto_CalculaParcelas", objCondicaoPagto, False, True, False)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    dtData = objParc.dtVencimento
    
    Calcula_Data = SUCESSO
    
    Exit Function
    
Erro_Calcula_Data:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211481)

    End Select

    Exit Function
    
End Function

Public Function CamposGenericos_ValidaExclusao_ProdutoFabr() As Long
'Verifica se é válida a exclusão de valores para o campo Satisfação

Dim lComando As Long
Dim lErro As Long
Dim lFabricante As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_ProdutoFabr
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 211536
    
    'Busca Tipos de Paradas em CTMaquinasParadas que não existam na tabela CamposGenericos Valores
    lErro = Comando_Executar(lComando, "SELECT Fabricante FROM Produtos WHERE Fabricante NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Fabricante <> 0", lFabricante, CAMPOSGENERICOS_PROD_FABR)
    If lErro <> AD_SQL_SUCESSO Then gError 211537
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211538
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 211539

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_ProdutoFabr = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_ProdutoFabr:

    CamposGenericos_ValidaExclusao_ProdutoFabr = gErr
    
    Select Case gErr
    
        Case 211536
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 211537, 211538
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELACIONAMENTOCLIENTES", gErr)
        
        Case 211539
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, lFabricante, CAMPOSGENERICOS_PROD_FABR)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211540)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function NFe_Le_Cce(ByVal lNumIntNF As Long, lSeqEvento As Long) As Long

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_NFe_Le_Cce
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 211541
    
    lErro = Comando_Executar(lComando, "SELECT nSeqEvento FROM NFeFedRetEnvCce WHERE NumIntNF = ? AND cStat IN ('135', '136') AND tpEvento = 110110 ORDER BY nSeqEvento DESC", lSeqEvento, lNumIntNF)
    If lErro <> AD_SQL_SUCESSO Then gError 211542
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211543
    
    If lErro <> AD_SQL_SUCESSO Then gError ERRO_LEITURA_SEM_DADOS

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    NFe_Le_Cce = SUCESSO
    
    Exit Function
    
Erro_NFe_Le_Cce:

    NFe_Le_Cce = gErr
    
    Select Case gErr
    
        Case ERRO_LEITURA_SEM_DADOS
        
        Case 211541
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 211542, 211543
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDRETENVCCE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211544)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function NFe_Le_Cce2(ByVal lNumIntNF As Long, colSeqEvento As Collection) As Long

Dim lComando As Long
Dim lErro As Long, lSeqEvento As Long

On Error GoTo Erro_NFe_Le_Cce2
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 211541
    
    lErro = Comando_Executar(lComando, "SELECT nSeqEvento FROM NFeFedRetEnvCce WHERE NumIntNF = ? AND cStat IN ('135', '136') AND tpEvento = 110110 ORDER BY nSeqEvento DESC", lSeqEvento, lNumIntNF)
    If lErro <> AD_SQL_SUCESSO Then gError 211542
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211543
    
    Do While lErro = AD_SQL_SUCESSO
    
        colSeqEvento.Add lSeqEvento
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211543
    
    Loop

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    NFe_Le_Cce2 = SUCESSO
    
    Exit Function
    
Erro_NFe_Le_Cce2:

    NFe_Le_Cce2 = gErr
    
    Select Case gErr
    
        Case ERRO_LEITURA_SEM_DADOS
        
        Case 211541
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 211542, 211543
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDRETENVCCE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211544)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function CCE_Le_RetEnv(ByVal objCCE As ClassCartaCorrecao) As Long

Dim lErro As Long, scStat As String, sCorrecao As String, iSeq As Integer
Dim lComando As Long

On Error GoTo Erro_CCE_Le_RetEnv

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 201425
    
    scStat = String(STRING_NFE_CSTAT, 0)
    sCorrecao = String(1000, 0)
    
    lErro = Comando_Executar(lComando, "SELECT cStat, Correcao, CCE.nSeqEvento FROM CCE, NFeFedRetEnvCce WHERE CCE.NumIntDoc = ? AND CCE.chNFe = NFeFedRetEnvCce.chNFe AND CCE.nSeqEvento = NFeFedRetEnvCce.nSeqEvento", scStat, sCorrecao, iSeq, objCCE.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 201426
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201427
    
    If lErro <> AD_SQL_SUCESSO Then gError ERRO_LEITURA_SEM_DADOS
    
    objCCE.scStat = scStat
    objCCE.sCorrecao = sCorrecao
    objCCE.inSeqEvento = iSeq
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CCE_Le_RetEnv = SUCESSO
    
    Exit Function
    
Erro_CCE_Le_RetEnv:

    CCE_Le_RetEnv = gErr

    Select Case gErr

        Case ERRO_LEITURA_SEM_DADOS
        
        Case 201425
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 201426, 201427
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDRETENVCCE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201424)

    End Select
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function RegiaoVenda_Le_UsuarioCobrador(ByVal sUsuario As String, iAchou As Integer) As Long

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_RegiaoVenda_Le_UsuarioCobrador

    iAchou = 0

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 210630

    'Seleciona se um usuario é usuario cobrador de alguma regiao
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM RegioesVendas WHERE UsuarioCobrador = ? ", iCodigo, sUsuario)
    If lErro <> AD_SQL_SUCESSO Then gError 210631

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210632
    
    If lErro = AD_SQL_SUCESSO Then iAchou = 1
    
    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    RegiaoVenda_Le_UsuarioCobrador = SUCESSO

    Exit Function

Erro_RegiaoVenda_Le_UsuarioCobrador:

    RegiaoVenda_Le_UsuarioCobrador = gErr

    Select Case gErr
    
        Case 210630
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 210631, 210632
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REGIOESVENDAS2", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 210633)

    End Select
    
    'Executa o fechamento do Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function Prod_Obtem_QtdeEmOVPerRec(ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal iFilialEmpresa As Integer, ByVal sProduto As String, ByVal lStatusMin As Long, dQtdeEmOV As Double, lComando As Long) As Long

Dim lErro As Long
Dim dQtde As Double, dQtdeTot As Double, sUM As String
Dim iClasseUM As Integer, sUMEst As String, dFator As Double

On Error GoTo Erro_Prod_Obtem_QtdeEmOVPerRec
    
    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 60461
    End If
    
    sUM = String(STRING_UM_SIGLA, 0)
    sUMEst = String(STRING_UM_SIGLA, 0)
    
    If iFilialEmpresa = EMPRESA_TODA Then
        lErro = Comando_Executar(lComando, "SELECT I.Quantidade, I.UnidadeMed, P.ClasseUM, P.SiglaUMEstoque FROM OrcamentoVenda AS O, ItensOrcamentoVenda AS I, Produtos As P WHERE O.Codigo = I.CodOrcamento AND O.FilialEmpresa = I.FilialEmpresa AND P.Codigo = I.Produto AND (O.DataPrevReceb >= ? OR ?=?) AND (O.DataPrevReceb <= ? OR ?=?) AND O.Status >= ? AND I.Produto = ? ", dQtde, sUM, iClasseUM, sUMEst, dtDataDe, dtDataDe, DATA_NULA, dtDataAte, dtDataAte, DATA_NULA, lStatusMin, sProduto)
    Else
        lErro = Comando_Executar(lComando, "SELECT I.Quantidade, I.UnidadeMed, P.ClasseUM, P.SiglaUMEstoque FROM OrcamentoVenda AS O, ItensOrcamentoVenda AS I, Produtos As P WHERE O.Codigo = I.CodOrcamento AND O.FilialEmpresa = I.FilialEmpresa AND P.Codigo = I.Produto AND (O.DataPrevReceb >= ? OR ?=?) AND (O.DataPrevReceb <= ? OR ?=?) AND O.Status >= ? AND I.Produto = ? AND O.FilialEmpresa = ?", dQtde, sUM, iClasseUM, sUMEst, dtDataDe, dtDataDe, DATA_NULA, dtDataAte, dtDataAte, DATA_NULA, lStatusMin, sProduto, iFilialEmpresa)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 208033
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034
    
    dQtdeTot = 0
    Do While lErro <> AD_SQL_SEM_DADOS
    
        lErro = CF("UM_Conversao", iClasseUM, sUM, sUMEst, dFator)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        dQtdeTot = dQtdeTot + dQtde * dFator
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034
    
    Loop
    
    dQtdeEmOV = dQtdeTot

    Prod_Obtem_QtdeEmOVPerRec = SUCESSO

    Exit Function

Erro_Prod_Obtem_QtdeEmOVPerRec:

    Prod_Obtem_QtdeEmOVPerRec = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 60461
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150183)
    
    End Select

    'Libera comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function CamposGenericos_ValidaExclusao_GrupoNat() As Long

Dim lComando As Long
Dim lErro As Long
Dim sCodigo As String, lGrupo As Long

On Error GoTo Erro_CamposGenericos_ValidaExclusao_GrupoNat
    
    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 211919
    
    sCodigo = String(STRING_NATMOVCTA_CODIGO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Codigo, Grupo FROM NatMovCta WHERE Grupo NOT IN (SELECT CodValor FROM CamposGenericosValores WHERE CodCampo = ?) AND Grupo <> 0", sCodigo, lGrupo, CAMPOSGENERICOS_NATCTA_GRUPO)
    If lErro <> AD_SQL_SUCESSO Then gError 211920
    
    'Posiciona no primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211921
    
    'Se encontrou algum registro => erro de inconsistência
    If lErro = AD_SQL_SUCESSO Then gError 211922
        
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    CamposGenericos_ValidaExclusao_GrupoNat = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_ValidaExclusao_GrupoNat:

    CamposGenericos_ValidaExclusao_GrupoNat = gErr
    
    Select Case gErr
    
        Case 211919
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 211920, 211921
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA", gErr)
        
        Case 211922
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_GRUPO_NATUREZA", gErr, lGrupo, sCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211923)
    
    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

End Function

Public Function NFe_Le_Canc_Homologados(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal colNFs As Collection) As Long
'obtem lista de nfes canceladas na sefaz mas nao no Corporator

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, sSQL As String
Dim tNF As typeNFiscal, objNF As ClassNFiscal

On Error GoTo Erro_NFe_Le_Canc_Homologados

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211156
    Next

    tNF.sSerie = String(STRING_SERIE, 0)
    
    sSQL = "SELECT N.NumIntDoc, N.Serie, N.NumNotaFiscal, N.DataEmissao FROM NFiscal AS N, TiposDocInfo AS T, NFeFedProtNfe AS A WHERE T.Codigo = N.TipoNFiscal AND T.Tipo IN (1,2) AND A.NumIntNF = N.NumIntDoc AND A.cStat = '100' AND A.Data >= ? AND N.NFe = ? AND (N.FilialEmpresa = ? OR ?=?) AND N.FilialEmpresa < 50 AND N.Status <> ? AND "
    sSQL = sSQL & "EXISTS (SELECT C.* FROM NFEFedRetCancNFe AS C WHERE C.NumIntNF = N.NumIntDoc AND C.cStat IN ('101', '151', '135', '155') )"
    
    lErro = Comando_Executar(alComando(1), sSQL, tNF.lNumIntDoc, tNF.sSerie, tNF.lNumNotaFiscal, tNF.dtDataEmissao, dtDataDe, MARCADO, iFilialEmpresa, iFilialEmpresa, EMPRESA_TODA, STATUS_CANCELADO)
    If lErro <> AD_SQL_SUCESSO Then gError 211157

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211158
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objNF = New ClassNFiscal
        objNF.lNumIntDoc = tNF.lNumIntDoc
        objNF.sSerie = tNF.sSerie
        objNF.lNumNotaFiscal = tNF.lNumNotaFiscal
        objNF.dtDataEmissao = tNF.dtDataEmissao
        colNFs.Add objNF
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211159
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFe_Le_Canc_Homologados = SUCESSO

    Exit Function

Erro_NFe_Le_Canc_Homologados:

    NFe_Le_Canc_Homologados = gErr

    Select Case gErr

        Case 211156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211157 To 211159
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 211160)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFSe_Le_Canc_Homologados(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal colNFs As Collection) As Long
'obtem lista de nfes de serviço canceladas na sefaz mas nao no Corporator

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, sSQL As String
Dim tNF As typeNFiscal, objNF As ClassNFiscal

On Error GoTo Erro_NFSe_Le_Canc_Homologados

    If gobjCRFAT.iUsaNFSE = 1 Then
    
        'Executa a abertura do Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 211156
        Next
    
        tNF.sSerie = String(STRING_SERIE, 0)
        
        sSQL = "SELECT N.NumIntDoc, N.Serie, N.NumNotaFiscal, N.DataEmissao FROM NFiscal AS N, TiposDocInfo AS T, RPSWEBProt AS A WHERE T.Codigo = N.TipoNFiscal AND T.Tipo IN (1,2) AND A.NumIntNF = N.NumIntDoc AND A.Ambiente =1 AND A.Data >= ? AND N.RPS = ? AND (N.FilialEmpresa = ? OR ?=?) AND N.FilialEmpresa < 50 AND N.Status <> ? AND "
        sSQL = sSQL & "EXISTS (SELECT C.* FROM RPSWebRetCanc AS C WHERE C.NumIntNF = N.NumIntDoc AND (C.CodigoCancelamento = 1 Or C.CodigoCancelamento = 2) )"
        
        lErro = Comando_Executar(alComando(1), sSQL, tNF.lNumIntDoc, tNF.sSerie, tNF.lNumNotaFiscal, tNF.dtDataEmissao, dtDataDe, MARCADO, iFilialEmpresa, iFilialEmpresa, EMPRESA_TODA, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then gError 211157
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211158
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objNF = New ClassNFiscal
            objNF.lNumIntDoc = tNF.lNumIntDoc
            objNF.sSerie = tNF.sSerie
            objNF.lNumNotaFiscal = tNF.lNumNotaFiscal
            objNF.dtDataEmissao = tNF.dtDataEmissao
            colNFs.Add objNF
        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211159
        
        Loop
        
        'Fecha Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    NFSe_Le_Canc_Homologados = SUCESSO

    Exit Function

Erro_NFSe_Le_Canc_Homologados:

    NFSe_Le_Canc_Homologados = gErr

    Select Case gErr

        Case 211156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211157 To 211159
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 211160)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFSe_Le_Canc_Nao_Homologados(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal colNFs As Collection) As Long
'Obtem lista de nfes de serviço canceladas no Corporator que ainda nao tiveram o cancelamento homologado na receita

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, sSQL As String
Dim tNF As typeNFiscal, objNF As ClassNFiscal

On Error GoTo Erro_NFSe_Le_Canc_Nao_Homologados

    If gobjCRFAT.iUsaNFSE = 1 Then
    
        'Executa a abertura do Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 211156
        Next
    
        tNF.sSerie = String(STRING_SERIE, 0)
        
        sSQL = "SELECT N.NumIntDoc, N.Serie, N.NumNotaFiscal, N.DataEmissao FROM NFiscal AS N, TiposDocInfo AS T, RPSWEBProt AS A WHERE T.Codigo = N.TipoNFiscal AND T.Tipo IN (1,2) AND A.NumIntNF = N.NumIntDoc AND A.Ambiente = 1 AND A.Data >= ? AND N.RPS = ? AND (N.FilialEmpresa = ? OR ?=?) AND N.FilialEmpresa < 50 AND N.Status = ? AND "
        sSQL = sSQL & "NOT EXISTS (SELECT C.* FROM RPSWebRetCanc AS C WHERE C.NumIntNF = N.NumIntDoc AND (C.CodigoCancelamento = 1 Or C.CodigoCancelamento = 2) )"
        
        lErro = Comando_Executar(alComando(1), sSQL, tNF.lNumIntDoc, tNF.sSerie, tNF.lNumNotaFiscal, tNF.dtDataEmissao, dtDataDe, MARCADO, iFilialEmpresa, iFilialEmpresa, EMPRESA_TODA, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then gError 211157
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211158
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objNF = New ClassNFiscal
            objNF.lNumIntDoc = tNF.lNumIntDoc
            objNF.sSerie = tNF.sSerie
            objNF.lNumNotaFiscal = tNF.lNumNotaFiscal
            objNF.dtDataEmissao = tNF.dtDataEmissao
            colNFs.Add objNF
        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211159
        
        Loop
        
        'Fecha Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    NFSe_Le_Canc_Nao_Homologados = SUCESSO

    Exit Function

Erro_NFSe_Le_Canc_Nao_Homologados:

    NFSe_Le_Canc_Nao_Homologados = gErr

    Select Case gErr

        Case 211156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211157 To 211159
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 211160)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFSe_Le_Nao_Autorizadas(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal colNFs As Collection) As Long
'Le as NFs eletrônicas internas, não canceladas da filial empresa que ainda não foram autorizadas

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, sSQL As String
Dim tNF As typeNFiscal, objNF As ClassNFiscal

On Error GoTo Erro_NFSe_Le_Nao_Autorizadas

    If gobjCRFAT.iUsaNFSE = 1 Then
    
        'Executa a abertura do Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 211151
        Next
    
        tNF.sSerie = String(STRING_SERIE, 0)
        
        'Le as NFs eletrônicas internas, não canceladas da filial empresa que ainda não foram autorizadas
        sSQL = "SELECT N.NumIntDoc, N.Serie, N.NumNotaFiscal, N.DataEmissao FROM NFiscal AS N, TiposDocInfo AS T WHERE T.Codigo = N.TipoNFiscal AND T.Tipo IN (1,2) AND N.DataEmissao >= ? AND N.RPS = ? AND (N.FilialEmpresa = ? OR ?=?) AND N.FilialEmpresa < 50 AND N.Status NOT IN (?,?) AND "
        sSQL = sSQL & "NOT EXISTS (SELECT * FROM RPSWEBProt R WHERE R.NumIntNF = N.NumIntDoc AND R.Ambiente = 1)"
        
        lErro = Comando_Executar(alComando(1), sSQL, tNF.lNumIntDoc, tNF.sSerie, tNF.lNumNotaFiscal, tNF.dtDataEmissao, dtDataDe, MARCADO, iFilialEmpresa, iFilialEmpresa, EMPRESA_TODA, STATUS_CANCELADO, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 211152
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211153
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objNF = New ClassNFiscal
            objNF.lNumIntDoc = tNF.lNumIntDoc
            objNF.sSerie = tNF.sSerie
            objNF.lNumNotaFiscal = tNF.lNumNotaFiscal
            objNF.dtDataEmissao = tNF.dtDataEmissao
            colNFs.Add objNF
        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211154
        
        Loop
    
        'Fecha Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If
    
    NFSe_Le_Nao_Autorizadas = SUCESSO

    Exit Function

Erro_NFSe_Le_Nao_Autorizadas:

    NFSe_Le_Nao_Autorizadas = gErr

    Select Case gErr

        Case 211151
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211152 To 211154
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 211155)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function AnaliseVenda_ValidaDescMax(ByVal objAnaliseVenda As ClassAnaliseVendaInfo, Optional ByVal bComMsgErro As Boolean = True) As Long
'testa se o preços dos itens está abaixo do preço de tabela abatido do desconto maximo que está definido no cadastro da tabela

Dim lErro As Long, objItem As ClassItemAnaliseVenda, iTabela As Integer, iUltTabela As Integer
Dim objTabelaPreco As New ClassTabelaPreco
Dim objTabelaPrecoItem As New ClassTabelaPrecoItem
Dim dPrecoUnitTabela As Double, dPrecoUnitarioLiquido As Double, dPrecoUnitMinTabela As Double
Dim dQtde As Double, dPrecoTotal As Double
Dim objProduto As New ClassProduto
Dim dFator As Double, iItem As Integer
Dim objCotacao1 As New ClassCotacaoMoeda
Dim objCotacaoAnterior1 As New ClassCotacaoMoeda
Dim objCotacao2 As New ClassCotacaoMoeda
Dim objCotacaoAnterior2 As New ClassCotacaoMoeda
Dim dCotacao1 As Double, dCotacao2 As Double
Dim vbMsgResult As VbMsgBoxResult

On Error GoTo Erro_AnaliseVenda_ValidaDescMax

    If gobjCRFAT.iValidaDescMaxTabPreco <> 0 Then
    
        iUltTabela = 0
        iItem = 0
        
        For Each objItem In objAnaliseVenda.colItens
        
            iItem = iItem + 1
        
            If (objItem.dQuantidade <> 0 And objItem.dPrecoTotal <> 0) Then
            
                If objItem.iTabelaPreco <> 0 Then
                    iTabela = objItem.iTabelaPreco
                Else
                    iTabela = objAnaliseVenda.iTabelaPreco
                End If
            
                If iUltTabela <> iTabela And iTabela <> 0 Then
                
                    objTabelaPreco.iCodigo = iTabela
                    
                    'Tenta ler TabelaPreço com esse código no BD
                    lErro = CF("TabelaPreco_Le", objTabelaPreco)
                    If lErro <> SUCESSO And lErro <> 28004 Then gError ERRO_SEM_MENSAGEM
            
                    If lErro <> SUCESSO Then gError 84016 'Não encontrou Tabela Preço no BD
                    
                    iUltTabela = iTabela
                
                End If
                
                If iTabela <> 0 And objTabelaPreco.iDescontoLimitado <> 0 Then
                
                    objTabelaPrecoItem.sCodProduto = objItem.sProduto
                    objTabelaPrecoItem.iCodTabela = iTabela
                    objTabelaPrecoItem.iFilialEmpresa = IIf(objAnaliseVenda.iFilialEmpresa = 0, giFilialEmpresa, objAnaliseVenda.iFilialEmpresa)
            
                    'Lê a Tabela preço para filialEmpresa
                    lErro = CF("TabelaPrecoItem_Le", objTabelaPrecoItem)
                    If lErro <> SUCESSO And lErro <> 28014 Then gError 84022 '39148
            
                    'Se não encontrar
                    If lErro = 28014 Then
                        objTabelaPrecoItem.iFilialEmpresa = EMPRESA_TODA
                        'Lê a Tabela de Preço a nível de Empresa toda
                        lErro = CF("TabelaPrecoItem_Le", objTabelaPrecoItem)
                        If lErro <> SUCESSO And lErro <> 28014 Then gError 84023 '39149
            
                    End If
            
                    'Se  conseguir ler a Tabela de Preços
                    If lErro = SUCESSO Then
                    
                        objProduto.sCodigo = objItem.sProduto
                        'Lê o produto
                        lErro = CF("Produto_Le", objProduto)
                        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
                        If lErro = 28030 Then gError 84030 '26639
                        
                        'Converte a quantidade para a UM de Venda
                        lErro = CF("UM_Conversao", objProduto.iClasseUM, objItem.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                        dPrecoUnitTabela = objTabelaPrecoItem.dPreco * dFator
    
                        If objTabelaPreco.iMoeda <> objAnaliseVenda.iMoeda Then
                        'Se possuem moedas diferentes ou se trocou a moeda precisa calcular/recalcular a cotação
                            If objTabelaPreco.iMoeda <> MOEDA_REAL Then
                            
                                objCotacao1.dtData = objAnaliseVenda.dtDataEmissao
                                objCotacao1.iMoeda = objTabelaPreco.iMoeda
                                objCotacaoAnterior1.iMoeda = objTabelaPreco.iMoeda
                            
                                'Chama função de leitura
                                lErro = CF("CotacaoMoeda_Le_UltimasCotacoes", objCotacao1, objCotacaoAnterior1)
                                If lErro <> SUCESSO Then gError 84029
                                
                            Else
                                objCotacao1.dValor = 1
                            End If
                            
                            If objAnaliseVenda.iMoeda <> MOEDA_REAL Then
                            
                                objCotacao2.dtData = objAnaliseVenda.dtDataEmissao
                                objCotacao2.iMoeda = objAnaliseVenda.iMoeda
                                objCotacaoAnterior2.iMoeda = objAnaliseVenda.iMoeda
                            
                                'Chama função de leitura
                                lErro = CF("CotacaoMoeda_Le_UltimasCotacoes", objCotacao2, objCotacaoAnterior2)
                                If lErro <> SUCESSO Then gError 84029
                                
                            Else
                                objCotacao2.dValor = 1
                            End If
                            
                            If objCotacao1.dValor <> 0 Then
                                dCotacao1 = StrParaDbl(Format(objCotacao1.dValor, "#.0000"))
                            Else
                                vbMsgResult = Rotina_Aviso(vbYesNo, "AVISO_MOEDA_SEM_COTACAO_DATA", objCotacao1.iMoeda, Format(objAnaliseVenda.dtDataEmissao, "dd/mm/yyyy"), Format(objCotacaoAnterior1.dValor, "#.0000"), Format(objCotacaoAnterior1.dtData, "dd/mm/yyyy"))
                                If vbMsgResult = vbNo Then gError ERRO_SEM_MENSAGEM
                                dCotacao1 = StrParaDbl(Format(objCotacaoAnterior1.dValor, "#.0000"))
                            End If
                            
                            If objCotacao2.dValor <> 0 Then
                                dCotacao2 = StrParaDbl(Format(objCotacao2.dValor, "#.0000"))
                            Else
                                vbMsgResult = Rotina_Aviso(vbYesNo, "AVISO_MOEDA_SEM_COTACAO_DATA", objCotacao2.iMoeda, Format(objAnaliseVenda.dtDataEmissao, "dd/mm/yyyy"), Format(objCotacaoAnterior2.dValor, "#.0000"), Format(objCotacaoAnterior2.dtData, "dd/mm/yyyy"))
                                If vbMsgResult = vbNo Then gError ERRO_SEM_MENSAGEM
                                dCotacao2 = StrParaDbl(Format(objCotacaoAnterior2.dValor, "#.0000"))
                            End If
                            
                            If dCotacao1 = 0 Then gError 211631
                            If dCotacao2 = 0 Then gError 211632
                            
                            'Se nao existe cotacao para a data informada => Mostra a última.
                            dPrecoUnitTabela = dPrecoUnitTabela * dCotacao1 / dCotacao2
                        
                        End If
                    
                        If objItem.dValorDesconto = 0 Then
                            dPrecoUnitarioLiquido = objItem.dPrecoUnitario
                        Else
                            dPrecoUnitarioLiquido = objItem.dPrecoTotal / objItem.dQuantidade
                        End If
                    
                        If objTabelaPreco.dDescontoMaximo <> 0 Then
                            dPrecoUnitMinTabela = (dPrecoUnitTabela * (1 - objTabelaPreco.dDescontoMaximo))
                        Else
                            dPrecoUnitMinTabela = dPrecoUnitTabela
                        End If
                        
                        If dPrecoUnitarioLiquido - dPrecoUnitMinTabela < -0.01 Then gError 201561
                    
                    End If
    
                End If
                
            End If
        
        Next
    
    End If
    
    AnaliseVenda_ValidaDescMax = SUCESSO
    
    Exit Function
    
Erro_AnaliseVenda_ValidaDescMax:

    AnaliseVenda_ValidaDescMax = gErr

    Select Case gErr

        Case 201561
            If bComMsgErro Then Call Rotina_Erro(vbOKOnly, "ERRO_PRECO_ABAIXO_MIN_TABELA", gErr, CStr(iItem), Format(dPrecoUnitarioLiquido, gobjFAT.sFormatoPrecoUnitario), CStr(iTabela), Format(dPrecoUnitTabela, gobjFAT.sFormatoPrecoUnitario), Format(objTabelaPreco.dDescontoMaximo, "Percent"), Format(dPrecoUnitMinTabela, gobjFAT.sFormatoPrecoUnitario))
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201560)

    End Select
    
    Exit Function

End Function

Public Function NFe_Contingencia_Testa_Envio_Sem_Retorno(ByVal lNumIntNF As Long) As Long
'Verifica se a NF foi enviado sem ser em contingência anteriormente e ainda não teve retorno

Dim lErro As Long
Dim iIndice As Integer, lNumIntNFAux As Long
Dim dtDataLote As Date, dHoraLote As Double
Dim alComando(0 To 2) As Long, sChaveAux As String
Dim sSerie As String, lNumNotaFiscal As Long

On Error GoTo Erro_NFe_Contingencia_Testa_Envio_Sem_Retorno

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 213574
    Next
    
    sSerie = String(STRING_SERIE, 0)
    
    'Lê a nota fiscal
    lErro = Comando_Executar(alComando(0), "SELECT Serie, NumNotaFiscal FROM NFiscal WHERE NumIntDoc = ? ", _
          sSerie, lNumNotaFiscal, lNumIntNF)
    If lErro <> AD_SQL_SUCESSO Then gError 213575

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213576
    
    'Verifica se a NF foi enviada sem ser em contingência anteriormente
    lErro = Comando_Executar(alComando(1), "SELECT Data, Hora FROM NFeFedLote WHERE NumIntNF = ? AND SistemaContingencia = ? ORDER BY Data, Hora ", _
          dtDataLote, dHoraLote, lNumIntNF, "")
    If lErro <> AD_SQL_SUCESSO Then gError 213577

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213578
    
    If lErro = AD_SQL_SUCESSO Then
    
        sChaveAux = String(34, "_") & "1" & String(9, "_") 'tpEmis = 1
       
        'Verifica se teve retorno no ambente normal (tpEmis=1) após o envio do lote
        lErro = Comando_Executar(alComando(2), "SELECT NumIntNF FROM NFeFedProtNFe WHERE NumIntNF = ? AND ChNFe LIKE ? AND (DataRegistro > ? OR (DataRegistro = ? AND HoraRegistro >= ?)) ", _
              lNumIntNFAux, lNumIntNF, sChaveAux, dtDataLote, dtDataLote, dHoraLote)
        If lErro <> AD_SQL_SUCESSO Then gError 213579
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213580
        
        If lErro <> AD_SQL_SUCESSO Then gError 213581 'Não permite enviar em contigência uma NF já enviada normalmente que ainda não teve retorno (pois pode ter sido autorizada)
        
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFe_Contingencia_Testa_Envio_Sem_Retorno = SUCESSO

    Exit Function

Erro_NFe_Contingencia_Testa_Envio_Sem_Retorno:

    NFe_Contingencia_Testa_Envio_Sem_Retorno = gErr

    Select Case gErr

        Case 213574
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 213575, 213576
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 213577, 213578
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDLOTE", gErr)
            
        Case 213579, 213580
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDPROTNFE", gErr)
            
        Case 213581
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_AGUARDANDO_RETORNO_NAO_CONTINGENCIA", gErr, sSerie, lNumNotaFiscal)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213582)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ImportPrevVenda_Le(ByVal colPrev As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String
Dim iCodRegiao As Integer
Dim sProduto As String
Dim tPrev As typePrevVendaMensal
Dim objPrev As ClassPrevVendaMensal
Dim dtDataAtualizacao As Date, dValorPadrao As Double
Dim sProdutoConvertido As String, iPreenchido As Integer
 
On Error GoTo Erro_ImportPrevVenda_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 91056
    
    tPrev.sCodigo = String(STRING_MAXIMO, 0)
    tPrev.sProduto = String(STRING_MAXIMO, 0)

    'Lê os dados da tabela PrevVendaMensal
    lErro = Comando_Executar(lComando, "SELECT Codigo,Ano,CodRegiao,Cliente,Filial,Produto,DataAtualizacao,ValorPadrao,Quantidade1,Valor1,Quantidade2,Valor2,Quantidade3,Valor3,Quantidade4,Valor4,Quantidade5,Valor5,Quantidade6,Valor6,Quantidade7,Valor7,Quantidade8,Valor8,Quantidade9,Valor9,Quantidade10,Valor10,Quantidade11,Valor11,Quantidade12,Valor12 FROM ImportPrevVenda  WHERE FilialEmpresa = ? ", _
    tPrev.sCodigo, tPrev.iAno, tPrev.iCodRegiao, tPrev.lCliente, tPrev.iFilial, tPrev.sProduto, dtDataAtualizacao, dValorPadrao, tPrev.dQuantidade1, tPrev.dvalor1, tPrev.dQuantidade2, tPrev.dvalor2, tPrev.dQuantidade3, tPrev.dvalor3, tPrev.dQuantidade4, tPrev.dValor4, tPrev.dQuantidade5, tPrev.dValor5, tPrev.dQuantidade6, tPrev.dValor6, tPrev.dQuantidade7, tPrev.dValor7, tPrev.dQuantidade8, tPrev.dValor8, tPrev.dQuantidade9, tPrev.dValor9, tPrev.dQuantidade10, tPrev.dValor10, tPrev.dQuantidade11, tPrev.dValor11, tPrev.dQuantidade12, tPrev.dValor12, giFilialEmpresa)
    
    If lErro <> AD_SQL_SUCESSO Then gError 91057

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91058

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objPrev = New ClassPrevVendaMensal
        
        objPrev.sCodigo = tPrev.sCodigo
        objPrev.iAno = tPrev.iAno
        objPrev.iCodRegiao = tPrev.iCodRegiao
        objPrev.lCliente = tPrev.lCliente
        objPrev.iFilial = tPrev.iFilial
        objPrev.iFilialEmpresa = giFilialEmpresa
        
        lErro = CF("Produto_Formata", tPrev.sProduto, sProdutoConvertido, iPreenchido)
        If lErro <> SUCESSO Then gError 27682

        objPrev.sProduto = sProdutoConvertido
    
        'carrega os dados no Grid
        objPrev.dQuantidade1 = tPrev.dQuantidade1
        objPrev.dvalor1 = tPrev.dvalor1
        objPrev.dtDataAtualizacao1 = dtDataAtualizacao
        
        objPrev.dQuantidade2 = tPrev.dQuantidade2
        objPrev.dvalor2 = tPrev.dvalor2
        objPrev.dtDataAtualizacao2 = dtDataAtualizacao
        
        objPrev.dQuantidade3 = tPrev.dQuantidade3
        objPrev.dvalor3 = tPrev.dvalor3
        objPrev.dtDataAtualizacao3 = dtDataAtualizacao
        
        objPrev.dQuantidade4 = tPrev.dQuantidade4
        objPrev.dValor4 = tPrev.dValor4
        objPrev.dtDataAtualizacao4 = dtDataAtualizacao
        
        objPrev.dQuantidade5 = tPrev.dQuantidade5
        objPrev.dValor5 = tPrev.dValor5
        objPrev.dtDataAtualizacao5 = dtDataAtualizacao
        
        objPrev.dQuantidade6 = tPrev.dQuantidade6
        objPrev.dValor6 = tPrev.dValor6
        objPrev.dtDataAtualizacao6 = dtDataAtualizacao
        
        objPrev.dQuantidade7 = tPrev.dQuantidade7
        objPrev.dValor7 = tPrev.dValor7
        objPrev.dtDataAtualizacao7 = dtDataAtualizacao
        
        objPrev.dQuantidade8 = tPrev.dQuantidade8
        objPrev.dValor8 = tPrev.dValor8
        objPrev.dtDataAtualizacao8 = dtDataAtualizacao
        
        objPrev.dQuantidade9 = tPrev.dQuantidade9
        objPrev.dValor9 = tPrev.dValor9
        objPrev.dtDataAtualizacao9 = dtDataAtualizacao
        
        objPrev.dQuantidade10 = tPrev.dQuantidade10
        objPrev.dValor10 = tPrev.dValor10
        objPrev.dtDataAtualizacao10 = dtDataAtualizacao
        
        objPrev.dQuantidade11 = tPrev.dQuantidade11
        objPrev.dValor11 = tPrev.dValor11
        objPrev.dtDataAtualizacao11 = dtDataAtualizacao
        
        objPrev.dQuantidade12 = tPrev.dQuantidade12
        objPrev.dValor12 = tPrev.dValor12
        objPrev.dtDataAtualizacao12 = dtDataAtualizacao
        
        If dValorPadrao > DELTA_VALORMONETARIO Then
            objPrev.dvalor1 = dValorPadrao
            objPrev.dvalor2 = dValorPadrao
            objPrev.dvalor3 = dValorPadrao
            objPrev.dValor4 = dValorPadrao
            objPrev.dValor5 = dValorPadrao
            objPrev.dValor6 = dValorPadrao
            objPrev.dValor7 = dValorPadrao
            objPrev.dValor8 = dValorPadrao
            objPrev.dValor9 = dValorPadrao
            objPrev.dValor10 = dValorPadrao
            objPrev.dValor11 = dValorPadrao
            objPrev.dValor12 = dValorPadrao
        End If
        
        colPrev.Add objPrev
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91058
        
    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    ImportPrevVenda_Le = SUCESSO

    Exit Function

Erro_ImportPrevVenda_Le:

    ImportPrevVenda_Le = gErr

    Select Case gErr
        
        Case 91056
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 91057, 91058
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDAMENSAL", gErr, objPrev.sCodigo)

        Case 91152
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 165128)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RastreamentoIndireto_Le(ByVal objNF As ClassNFiscal) As Long
    RastreamentoIndireto_Le = SUCESSO
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function DEInfo_Le(ByVal objDEInfo As ClassDEInfo) As Long

Dim lErro As Long, iIndice As Integer
Dim alComando(0 To 1) As Long
Dim tDE As typeDEInfo
Dim tRE As typeDERegistro
Dim objRE As ClassDERegistro

On Error GoTo Erro_DEInfo_Le

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 213994
    Next

    'Alocação de espaço no buffer
    tDE.sNumero = String(STRING_MAXIMO, 0)
    tDE.sDescricao = String(STRING_MAXIMO, 0)
    tDE.sNumConhEmbarque = String(STRING_MAXIMO, 0)
    tDE.sUFEmbarque = String(STRING_MAXIMO, 0)
    tDE.sLocalEmbarque = String(STRING_MAXIMO, 0)

    'Le a tabelaDEInfo
    If objDEInfo.lNumIntDoc = 0 Then
        lErro = Comando_Executar(alComando(0), "SELECT NumIntDoc, Numero, Data, FilialEmpresa, Descricao, TipoDoc, " & _
                    "Natureza, NumConhEmbarque, UFEmbarque, LocalEmbarque, DataConhEmbarque, TipoConhEmbarque, CodPais, " & _
                    "DataAverbacao FROM DEInfo WHERE Numero= ? ", _
                    tDE.lNumIntDoc, tDE.sNumero, tDE.dtData, tDE.iFilialEmpresa, _
                    tDE.sDescricao, tDE.iTipoDoc, tDE.iNatureza, tDE.sNumConhEmbarque, tDE.sUFEmbarque, _
                    tDE.sLocalEmbarque, tDE.dtDataConhEmbarque, tDE.iTipoConhEmbarque, tDE.iCodPais, tDE.dtDataAverbacao, _
                    objDEInfo.sNumero)
    Else
        lErro = Comando_Executar(alComando(0), "SELECT NumIntDoc, Numero, Data, FilialEmpresa, Descricao, TipoDoc, " & _
                    "Natureza, NumConhEmbarque, UFEmbarque, LocalEmbarque, DataConhEmbarque, TipoConhEmbarque, CodPais, " & _
                    "DataAverbacao FROM DEInfo WHERE NumIntDoc= ? ", _
                    tDE.lNumIntDoc, tDE.sNumero, tDE.dtData, tDE.iFilialEmpresa, _
                    tDE.sDescricao, tDE.iTipoDoc, tDE.iNatureza, tDE.sNumConhEmbarque, tDE.sUFEmbarque, _
                    tDE.sLocalEmbarque, tDE.dtDataConhEmbarque, tDE.iTipoConhEmbarque, tDE.iCodPais, tDE.dtDataAverbacao, _
                    objDEInfo.lNumIntDoc)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 213995

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213996

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objDEInfo.lNumIntDoc = tDE.lNumIntDoc
    objDEInfo.sNumero = tDE.sNumero
    objDEInfo.dtData = tDE.dtData
    objDEInfo.iFilialEmpresa = tDE.iFilialEmpresa
    objDEInfo.sDescricao = tDE.sDescricao
    objDEInfo.iTipoDoc = tDE.iTipoDoc
    objDEInfo.iNatureza = tDE.iNatureza
    objDEInfo.sNumConhEmbarque = tDE.sNumConhEmbarque
    objDEInfo.sUFEmbarque = tDE.sUFEmbarque
    objDEInfo.sLocalEmbarque = tDE.sLocalEmbarque
    objDEInfo.dtDataConhEmbarque = tDE.dtDataConhEmbarque
    objDEInfo.iTipoConhEmbarque = tDE.iTipoConhEmbarque
    objDEInfo.iCodPais = tDE.iCodPais
    objDEInfo.dtDataAverbacao = tDE.dtDataAverbacao
    
    tRE.sNumRegistro = String(STRING_MAXIMO, 0)
    
    lErro = Comando_Executar(alComando(1), "SELECT NumRegistro, DataRegistro FROM DERegistro WHERE NumIntDE= ? ORDER BY Seq", _
                tRE.sNumRegistro, tRE.dtDataRegistro, objDEInfo.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 213997
    
    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213998
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objRE = New ClassDERegistro
        
        objRE.lNumIntDE = objDEInfo.lNumIntDoc
        objRE.sNumRegistro = tRE.sNumRegistro
        objRE.dtDataRegistro = tRE.dtDataRegistro
    
        objDEInfo.colRE.Add objRE
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213999
    
    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DEInfo_Le = SUCESSO

    Exit Function

Erro_DEInfo_Le:

    DEInfo_Le = gErr

    Select Case gErr

        Case 213994
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 213995, 213996
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEINFO", gErr)

        Case 213997 To 213999
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEREGISTRO", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216000)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NCM_Le_UMTrib(ByVal sNCM As String, sUMTrib As String) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim sUMTribAux As String

On Error GoTo Erro_NCM_Le_UMTrib

    sUMTrib = ""

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 216232
    Next

    sUMTribAux = String(STRING_MAXIMO, 0)
    
    lErro = Comando_Executar(alComando(1), "SELECT UMTribExport FROM NCM WHERE NCM = ? ", sUMTribAux, sNCM)
    If lErro <> AD_SQL_SUCESSO Then gError 216233

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216234
    
    'Se não encontrar
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_SEM_MENSAGEM

    sUMTrib = sUMTribAux
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NCM_Le_UMTrib = SUCESSO

    Exit Function

Erro_NCM_Le_UMTrib:

    NCM_Le_UMTrib = gErr

    Select Case gErr

        Case 216232
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 216233, 216234
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NCM", gErr, sNCM)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 216235)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function Retornar_ItensNF_Orig_Forn(ByVal colItensNF As Collection, ByVal sProduto As String, ByVal lFornecedor As Long, ByVal iFilialForn As Integer, dQuantResto As Double) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim dQuantEst As Double
Dim objProduto As New ClassProduto
Dim objItemNF As New ClassItemNF
Dim dQuantDev As Double
Dim dQuantDevEst As Double
Dim sUMDev As String
Dim tItemNF As typeItemNF
Dim dFator As Double

On Error GoTo Erro_Retornar_ItensNF_Orig_Forn

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199031
    Next

    tItemNF.sUnidadeMed = String(STRING_UM_SIGLA, 0)
    tItemNF.sSerieNF = String(STRING_SERIE, 0)

    lErro = Comando_Executar(alComando(1), "SELECT Serie, NumNotaFiscal, Item, QuantResto, UnidadeMed, PrecoUnitario, PercDesc FROM ItemNFResto AS INFR, ItensNFiscal AS INF, NFiscal AS NF WHERE " & _
        " INFR.NumIntItemNF = INF.NumIntDoc AND NF.NumIntDoc = INF.NumIntNF AND INF.Produto = ? AND NF.Status <> 7  AND Fornecedor = ? AND FilialForn = ? ORDER BY NF.DataEntrada", _
        tItemNF.sSerieNF, tItemNF.lNumNotaFiscal, tItemNF.iItem, tItemNF.dQuantidade, tItemNF.sUnidadeMed, tItemNF.dPrecoUnitario, tItemNF.dPercDesc, sProduto, lFornecedor, iFilialForn)
    If lErro <> AD_SQL_SUCESSO Then gError 199034

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199035

    Do While lErro <> AD_SQL_SEM_DADOS And dQuantResto > 0
    
        objProduto.sCodigo = sProduto
        
        'ler dados do produto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 199036
        
        'converter qtde a faturar p/UMEstoque do produto
        lErro = CF("UM_Conversao", objProduto.iClasseUM, tItemNF.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then gError 199037
    
        dQuantEst = tItemNF.dQuantidade * dFator
        
        Set objItemNF = New ClassItemNF
        
        objItemNF.sSerieNFOrig = tItemNF.sSerieNF
        objItemNF.lNumNFOrig = tItemNF.lNumNotaFiscal
        objItemNF.iItemNFOrig = tItemNF.iItem
        objItemNF.sUnidadeMed = objProduto.sSiglaUMEstoque
        objItemNF.dPrecoUnitario = tItemNF.dPrecoUnitario
        objItemNF.dPercDesc = tItemNF.dPercDesc
    
        If dQuantResto - dQuantEst >= 0 Then
            
            objItemNF.dQuantidade = dQuantEst
            
            colItensNF.Add objItemNF
            
            dQuantResto = dQuantResto - dQuantEst
                
        Else
        
            objItemNF.dQuantidade = dQuantResto
            
            colItensNF.Add objItemNF
            
            dQuantResto = 0
        
        End If
            
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199042
    
    Loop

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Retornar_ItensNF_Orig_Forn = SUCESSO
    
    Exit Function
    
Erro_Retornar_ItensNF_Orig_Forn:

    Retornar_ItensNF_Orig_Forn = gErr
    
    Select Case gErr
    
        Case 199031
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 199032, 199033, 199036, 199037, 199040
        
        Case 199034, 199035, 199038, 199039, 199041, 199042
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 199043)

    End Select
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ImportOVAcomp_Le(ByVal colOVAcomp As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim lCodigo As Long, sStatus As String, dtDataProxCobr As Date, dtDataPrevReceb As Date
Dim sTexto1 As String, sTexto2 As String
Dim objOV As ClassOrcamentoVenda
 
On Error GoTo Erro_ImportOVAcomp_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 91056
    
    sTexto1 = String(STRING_MAXIMO, 0)
    sTexto2 = String(STRING_MAXIMO, 0)
    sStatus = String(STRING_MAXIMO, 0)

    'Lê os dados da tabela PrevVendaMensal
    lErro = Comando_Executar(lComando, "SELECT Codigo, Status, DataProxCobr, DataPrevReceb, CONVERT(VARCHAR(255),SUBSTRING(Assunto,1,255)), CONVERT(VARCHAR(255),SUBSTRING(Assunto,256,255)) FROM ImportOVAcomp   ", _
    lCodigo, sStatus, dtDataProxCobr, dtDataPrevReceb, sTexto1, sTexto2)
    
    If lErro <> AD_SQL_SUCESSO Then gError 91057

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91058

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objOV = New ClassOrcamentoVenda
        
        objOV.lCodigo = lCodigo
        objOV.lStatus = Codigo_Extrai(sStatus)
        objOV.dtDataProxCobr = dtDataProxCobr
        objOV.dtDataPrevReceb = dtDataPrevReceb
        objOV.sMensagemNota = sTexto1 & sTexto2
       
        colOVAcomp.Add objOV
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91058
        
    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    ImportOVAcomp_Le = SUCESSO

    Exit Function

Erro_ImportOVAcomp_Le:

    ImportOVAcomp_Le = gErr

    Select Case gErr
        
        Case 91056
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 91057, 91058
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDAMENSAL", gErr)

        Case 91152
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 165128)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

