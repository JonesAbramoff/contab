VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassFATGrava"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Private Declare Function Comando_BindVarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_BindVar" (ByVal lComando As Long, lpVar As Variant) As Long
Private Declare Function Comando_PrepararInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Preparar" (ByVal lComando As Long, ByVal lpSQLStmt As String) As Long
Private Declare Function Comando_ExecutarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Executar" (ByVal lComando As Long) As Long

Private Function FATConfig_Grava_Trans(ByVal objFATConfig As ClassFATConfig, alComando() As Long) As Long
'grava registro em fatconfig. Apenas altera o conteudo, se nao existir dá erro.
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, tFATConfig As typeFATConfig

On Error GoTo Erro_FATConfig_Grava_Trans

    'inicializar buffer
    tFATConfig.sConteudo = String(STRING_FATCONFIG_CONTEUDO, 0)
    'ler registo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM FATConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, tFATConfig.sConteudo, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 19319
    
    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19320
    
    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then
            
        'trata valores que podem só estar disponiveis apos a inicializacao da filial da empresa
        Select Case objFATConfig.sCodigo
        
            Case FATCFG_FILIAL_FATURAMENTO
        
            Case Else
                Error 19321
            
        End Select
        
    Else

        'se o conteudo foi modificado
        If objFATConfig.sConteudo <> tFATConfig.sConteudo Then
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE FATConfig SET Conteudo = ?", alComando(1), objFATConfig.sConteudo)
            If lErro <> AD_SQL_SUCESSO Then Error 19322
        End If
    
    End If
    
    Exit Function
    
Erro_FATConfig_Grava_Trans:

    FATConfig_Grava_Trans = Err
     
    Select Case Err
     
        Case 19319, 19320
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATCONFIG2", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
     
        Case 19321
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATCONFIG_INEXISTENTE", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
        
        Case 19322
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FATCONFIG", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149745)
     
    End Select
     
    Exit Function

End Function

Function FATConfig_Grava_Configs(ByVal colConfigs As ColFATConfig) As Long
'grava na tabela FATConfig uma colecao de registros de configuracao

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_FATConfig_Grava_Configs
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 34504
    
    lErro = CF("FATConfig_Grava_Configs_Trans", colConfigs)
    If lErro <> SUCESSO Then Error 19323
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 34512
    
    FATConfig_Grava_Configs = SUCESSO
    
    Exit Function
    
Erro_FATConfig_Grava_Configs:
    
    FATConfig_Grava_Configs = Err
    
    Select Case Err
    
        Case 19323
        
        Case 34504
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
    
        Case 34512
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149746)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function FATConfig_Grava_Configs_Trans(ByVal colConfigs As ColFATConfig) As Long
'grava na tabela FATConfig uma colecao de registros de configuracao
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 2) As Long
Dim objFATConfig As ClassFATConfig

On Error GoTo Erro_FATConfig_Grava_Configs_Trans
    
    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 34505
    Next
    
   'para cada elemento da colecao
    For Each objFATConfig In colConfigs
    
        lErro = FATConfig_Grava_Trans(objFATConfig, alComando())
        If lErro <> SUCESSO Then Error 19323
        
    Next
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    FATConfig_Grava_Configs_Trans = SUCESSO
    
    Exit Function
    
Erro_FATConfig_Grava_Configs_Trans:
    
    FATConfig_Grava_Configs_Trans = Err
    
    Select Case Err
    
        Case 19323
        
        Case 34505, 34506
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149747)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function


Function TipoDeBloqueio_Exclui(ByVal objTipo As ClassTipoDeBloqueio) As Long
'Exclui o tipo do BD

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sNomeReduzido As String
Dim sDescricao As String

On Error GoTo Erro_TipoDeBloqueio_Exclui

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23667

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23668
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23669

    sNomeReduzido = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    sDescricao = String(STRING_TIPO_BLOQUEIO_DESCRICAO, 0)

    'pesquisa Tipo na tabela Tipos de Bloqueio
    lErro = Comando_ExecutarPos(lComando1, "SELECT NomeReduzido,Descricao FROM TiposdeBloqueio WHERE Codigo = ? ", 0, sNomeReduzido, sDescricao, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23670

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23671

    If lErro = AD_SQL_SEM_DADOS Then Error 23672

    lErro = Comando_LockExclusive(lComando1)
    If lErro <> SUCESSO Then Error 23675
    
    'verificar se está relacionado com alguma tabela
    lErro = TipoDeBloqueio_Testa_Vinculo(objTipo.iCodigo)
    If lErro <> SUCESSO Then Error 23684
    
    'exclui Tipo da tabela TipodeBloqueio
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM TiposdeBloqueio", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 23673
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23674

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    TipoDeBloqueio_Exclui = SUCESSO

    Exit Function

Erro_TipoDeBloqueio_Exclui:

    TipoDeBloqueio_Exclui = Err

    Select Case Err

        Case 23667, 23668
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23669
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23670, 23671
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEBLOQUEIO", Err, Error$)

        Case 23672
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPODEBLOQUEIO_NAO_CADASTRADO", Err, objTipo.iCodigo)

        Case 23673
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPODEBLOQUEIO", Err, objTipo.iCodigo)

        Case 23674
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 23675
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPODEBLOQUEIO", Err)
                    
        Case 23684 'Tratado na rotina chamada
                       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149748)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function TipoDeBloqueio_Testa_Vinculo(ByVal iCodigo As Integer) As Long
'Lê no BD se existe uso deste tipo de bloqueio em outras tabelas

Dim lErro As Long
Dim lComando As Long
Dim iFilialEmpresa As Integer
Dim lPedidoDeVenda As Long
Dim iSequencial As Integer

On Error GoTo Erro_TipoDeBloqueio_Testa_Vinculo
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23683
    
    'Procura no BD o uso deste Tipo de Bloqueio nas tabelas BloqueiosPV e BloqueiosPVBaixados
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, PedidoDeVenda, Sequencial FROM BloqueiosPV WHERE TipoDeBloqueio=? UNION SELECT FilialEmpresa, PedidoDeVenda, Sequencial FROM BloqueiosPVBaixados WHERE TipoDeBloqueio=?", iFilialEmpresa, lPedidoDeVenda, iSequencial, iCodigo, iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23680
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23681
    
    'Se Estiver sendo usado(se existe em outra tabela) ==>ERRO
    If lErro = AD_SQL_SUCESSO Then Error 23682
    
    Call Comando_Fechar(lComando)
    
    TipoDeBloqueio_Testa_Vinculo = SUCESSO
    
    Exit Function
    
Erro_TipoDeBloqueio_Testa_Vinculo:
    
    TipoDeBloqueio_Testa_Vinculo = Err
    
    Select Case Err
        
        Case 23680, 23681
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV_BLOQUEIOSPVBAIXADOS", Err)
        
        Case 23682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPODEBLOQUEIO_USADO", Err, iCodigo, iFilialEmpresa, lPedidoDeVenda, iSequencial)
             
        Case 23683
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149749)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function TipoDeBloqueio_Grava(ByVal objTipo As ClassTipoDeBloqueio) As Long
'Atualiza ou insere um novo registro na tabela Tipos de Bloqueio

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sNomeReduzido As String

On Error GoTo Erro_TipoDeBloqueio_Grava

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    If objTipo.iCodigo = BLOQUEIO_TOTAL Or objTipo.iCodigo = BLOQUEIO_PARCIAL Or objTipo.iCodigo = BLOQUEIO_NAO_RESERVA Or objTipo.iCodigo = BLOQUEIO_CREDITO Then Error 32125
                
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23686

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23687

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23688

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23689

    sNomeReduzido = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    
    'pesquisa se já é usado o nome reduzido para outro codigo
    lErro = Comando_Executar(lComando, "SELECT  NomeReduzido FROM TiposdeBloqueio WHERE Codigo <> ? AND NomeReduzido = ?", sNomeReduzido, objTipo.iCodigo, objTipo.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 23690

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23691

    If lErro <> AD_SQL_SEM_DADOS Then Error 23692

    'pesquisa Tipo no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT  NomeReduzido FROM TiposdeBloqueio WHERE Codigo = ? ", 0, sNomeReduzido, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23693

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23694

    If lErro = AD_SQL_SEM_DADOS Then
    'Tipo nao pertence ao BD

        'insere novo registro na tabela Tipos
        lErro = Comando_Executar(lComando2, "INSERT INTO TiposdeBloqueio(Codigo, NomeReduzido, Descricao) VALUES (?,?,?)", objTipo.iCodigo, objTipo.sNomeReduzido, objTipo.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 23695

    Else
    'tipo existe no BD

        'altera registro na tabela tipo
        lErro = Comando_ExecutarPos(lComando2, "UPDATE TiposdeBloqueio SET NomeReduzido = ? , Descricao = ? ", lComando1, objTipo.sNomeReduzido, objTipo.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 23696

    End If

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23697

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    TipoDeBloqueio_Grava = SUCESSO

    Exit Function

Erro_TipoDeBloqueio_Grava:

    TipoDeBloqueio_Grava = Err

        Select Case Err

        Case 32125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_BLOQUEIO_PRE_DEFINIDO", Err)
        
        Case 23686, 23687, 23688
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23689
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23690, 23691, 23693, 23694
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEBLOQUEIO1", Err, objTipo.iCodigo)

        Case 23692
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_TIPODEBLOQUEIO_REPETIDO", Err)

        Case 23695
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPODEBLOQUEIO", Err, objTipo.iCodigo)

        Case 23696
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TIPODEBLOQUEIO", Err, objTipo.iCodigo)

        Case 23697
             lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149750)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function TipoDeBloqueio_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo Tipo disponivel

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_TipoDeBloqueio_Automatico

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico", "FATConfig", "NUM_PROX_TIPO_DE_BLOQUEIO", "TiposDeBloqueio", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 16146
    
    iCodigo = lNumAuto

    TipoDeBloqueio_Automatico = SUCESSO

    Exit Function

Erro_TipoDeBloqueio_Automatico:

    TipoDeBloqueio_Automatico = Err

    Select Case Err

    Case 16146
        
    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149751)

    End Select

    Exit Function

End Function

Function CanalVenda_Grava(ByVal objCanal As ClassCanalVenda) As Long
'Atualiza ou insere um novo registro na tabela CanalVenda

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sNomeReduzido As String

On Error GoTo Erro_CanalVenda_Grava

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23629

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23630

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23631

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23632

    sNomeReduzido = String(STRING_CANAL_VENDA_NOME_REDUZIDO, 0)
    
    'pesquisa nome reduzido no BD
    lErro = Comando_Executar(lComando, "SELECT  NomeReduzido FROM CanalVenda WHERE Codigo <> ? AND NomeReduzido = ?", sNomeReduzido, objCanal.iCodigo, objCanal.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 23633

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23634

    If lErro <> AD_SQL_SEM_DADOS Then Error 23635

    'pesquisa Canal no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT  NomeReduzido FROM CanalVenda WHERE Codigo = ? ", 0, sNomeReduzido, objCanal.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23636

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23637

    If lErro = AD_SQL_SEM_DADOS Then
    'Canal nao pertence ao BD
        
        'insere novo registro na tabela CanalVenda
        lErro = Comando_Executar(lComando2, "INSERT INTO CanalVenda (Codigo, NomeReduzido, Nome) VALUES (?,?,?)", objCanal.iCodigo, objCanal.sNomeReduzido, objCanal.sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 23638

    Else
    'Canal existe no BD
        
        'altera registro na tabela CanalVenda
        lErro = Comando_ExecutarPos(lComando2, "UPDATE CanalVenda SET NomeReduzido = ? , Nome = ? ", lComando1, objCanal.sNomeReduzido, objCanal.sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 23639

    End If

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23640

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    CanalVenda_Grava = SUCESSO

    Exit Function

Erro_CanalVenda_Grava:

    CanalVenda_Grava = Err

        Select Case Err

        Case 23629, 23630, 23631
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23632
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23633, 23634, 23636, 23637
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CANALVENDA1", Err, objCanal.iCodigo)

        Case 23635
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_CANALVENDA_REPETIDO", Err)

        Case 23638
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CANALVENDA", Err, objCanal.iCodigo)

        Case 23639
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CANALVENDA", Err, objCanal.iCodigo)

        Case 23640
             lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149752)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function CanalVenda_Exclui(ByVal objCanal As ClassCanalVenda) As Long
'Exclui o Canal do BD

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sNomeReduzido As String
Dim sNome As String

On Error GoTo Erro_CanalVenda_Exclui

    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23601

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23602

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23603

    sNomeReduzido = String(STRING_CANAL_VENDA_NOME_REDUZIDO, 0)
    sNome = String(STRING_CANAL_VENDA_NOME, 0)

    'pesquisa Canal na tabela CanalVenda
    lErro = Comando_ExecutarPos(lComando1, "SELECT NomeReduzido,Nome FROM CanalVenda WHERE Codigo= ? ", 0, sNomeReduzido, sNome, objCanal.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23604

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23605

    If lErro = AD_SQL_SEM_DADOS Then Error 23606

    lErro = Comando_LockExclusive(lComando1)
    If lErro <> SUCESSO Then Error 16147
    
    'verificar se está relacionado com alguma tabela
    lErro = CanalVenda_Testa_Vinculos(objCanal.iCodigo)
    If lErro <> SUCESSO Then Error 23676
    
    'exclui Canal da tabela CanalVenda
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM CanalVenda", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 23607
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23608

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    CanalVenda_Exclui = SUCESSO

    Exit Function

Erro_CanalVenda_Exclui:

    CanalVenda_Exclui = Err

    Select Case Err
        
        Case 16147
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CANALVENDA", Err)
            
        Case 23601, 23602
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23603
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23604, 23605
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CANALVENDA", Err, Error$)

        Case 23606
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANALVENDA_NAO_CADASTRADO", Err, objCanal.iCodigo)

        Case 23607
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CANALVENDA", Err, objCanal.iCodigo)

        Case 23608
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 23676
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149753)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function CanalVenda_Testa_Vinculos(ByVal iCodigo As Integer) As Long
'Lê no BD se existe uso deste Canal de Venda em outras tabelas
'Retorna SUCESSO se puder excluir

Dim lErro As Long
Dim lComando As Long
Dim iCodigo1 As Integer
Dim lCodPedido As Long
Dim iFilialPV As Integer
Dim iFilialNF As Integer
Dim sSerie As String
Dim lNumNF As Long

On Error GoTo Erro_CanalVenda_Testa_Vinculos
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23677
    
    'Procura no BD o uso deste Canal de Venda nas tabelas PedidosDeVenda e PedidosDeVendaBaixados
    lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa FROM PedidosDeVenda WHERE CanalVenda=? UNION SELECT Codigo, FilialEmpresa FROM PedidosDeVendaBaixados WHERE CanalVenda=?", lCodPedido, iFilialPV, iCodigo, iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23678
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23679

    If lErro = AD_SQL_SUCESSO Then Error 19322
    
    sSerie = String(STRING_SERIE, 0)

'mario 2/7/99 Remover NFiscalBaixada comando reposicionado devido a retirada do codigo abaixo
'    'Procura no BD o uso deste Canal de Venda nas tabelas NFiscal e NFiscalBaixadas
'    lErro = Comando_Executar(lComando, "SELECT Canal FROM NFiscal WHERE Canal=? UNION SELECT Canal FROM NFiscalBaixadas WHERE Canal=?", iCodigo1, iCodigo, iCodigo)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19324
        
    'Procura no BD o uso deste Canal de Venda na tabela NFiscal
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Serie, NumNotaFiscal FROM NFiscal WHERE Canal=?", iFilialNF, sSerie, lNumNF, iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19324
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19325

    If lErro = AD_SQL_SUCESSO Then Error 19326
    
    CanalVenda_Testa_Vinculos = SUCESSO
    
    Call Comando_Fechar(lComando)
        
    Exit Function
    
Erro_CanalVenda_Testa_Vinculos:
    
    CanalVenda_Testa_Vinculos = Err
    
    Select Case Err
        
        Case 19322
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANAL_EM_PV", Err, iCodigo, lCodPedido, iFilialPV)

        Case 19326
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANAL_EM_NF", Err, iCodigo, lNumNF, sSerie, iFilialNF)
        
        Case 19324, 19325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL_NFISCALBAIXADAS", Err)
            
        Case 23677
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 23678, 23679
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA_PEDIDOSDEVENDABAIXADOS", Err)
             
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149754)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function CanalVenda_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo Canal disponivel

Dim lErro As Long, lNumAuto As Long

On Error GoTo Erro_CanalVenda_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", "NUM_PROX_CANALVENDA", "CanalVenda", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 23614
    
    iCodigo = lNumAuto
    
    CanalVenda_Automatico = SUCESSO
    
    Exit Function
    
Erro_CanalVenda_Automatico:

    CanalVenda_Automatico = Err
    
    Select Case Err

        Case 23614
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149755)

    End Select

    Exit Function
    
End Function

Function PedidoDeVenda_Grava_Comissoes(ByVal objPedidoDeVenda As ClassPedidoDeVenda) As Long
'grava no bd as comissoes de um PV (tabela ComissoesPedVendas)

Dim lErro As Long
Dim alComando(3) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objComissaoPedidoVenda As New ClassComissaoPedVendas
Dim tComissaoPedidoVenda As typeComissaoPedVenda

On Error GoTo Erro_PedidoDeVenda_Grava_Comissoes

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = 0
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58380

    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 58381
    
    'Lê o Pedido de Venda e Locka
    'Verifica se o (Total dos Pedidos - IRRF ) < Total das Comissoes
    lErro = ComissoesPV_Le_Lock_ObjetosRelacionados(alComando(3), objPedidoDeVenda)
    If lErro <> SUCESSO Then Error 58457
    
    'Exclui as Comissões do Pedido de Venda
    lErro = CF("ComissoesPV_Exclui", objPedidoDeVenda)
    If lErro <> SUCESSO Then Error 58382
    
    'Inclui as novas comissoes do Pedido de Venda
    lErro = CF("ComissoesPV_Grava", objPedidoDeVenda)
    If lErro <> SUCESSO Then Error 58383
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 58384

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PedidoDeVenda_Grava_Comissoes = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Grava_Comissoes:

    PedidoDeVenda_Grava_Comissoes = Err

    Select Case Err

        Case 58380
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err, Error$)

        Case 58381
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 58382, 58383, 58457 'Tratados nas Rotinas Chamadas

        Case 58384
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149756)

    End Select

   'Fechamento transação
    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ComissoesPV_Le_Lock_ObjetosRelacionados(ByVal lComando As Long, ByVal objPedidoDeVenda As ClassPedidoDeVenda) As Long
'Le os Dados Necessarios em Pedido de Venda e faz lock do Pedido de Venda
'verifica se o total das comissões não ultrapassa os totais do Pedido de Venda

Dim lErro As Long
Dim dValorTotalComissoes As Double
Dim iIndice As Integer

On Error GoTo Erro_ComissoesPV_Le_Lock_ObjetosRelacionados

    'Lê e Locka o Pedido
    lErro = CF("PedidoDeVenda_Le_Lock", lComando, objPedidoDeVenda)
    If lErro <> SUCESSO And lErro <> 36986 Then Error 58458
    
    'Se não encontrou ---> Erro
    If lErro = 36986 Then Error 58459
    
    'Le o IR da Fonte do Pedido de Venda
    lErro = CF("PedidoDeVenda_Le_Tributacao", objPedidoDeVenda)
    If lErro <> SUCESSO And lErro <> 27611 Then Error 58460
    
    For iIndice = 1 To objPedidoDeVenda.colComissoes.Count
        
        'Soma os Valores das Comissões para obter o Valor total das comissões
        dValorTotalComissoes = dValorTotalComissoes + objPedidoDeVenda.colComissoes(iIndice).dValor
        
    Next
    
    'Testa se o total de Comissão é menor que o Valor Total - Valor IRRF
    If dValorTotalComissoes > objPedidoDeVenda.dValorTotal - objPedidoDeVenda.objTributacaoPV.dIRRFValor Then Error 58461
        
    ComissoesPV_Le_Lock_ObjetosRelacionados = SUCESSO
    
    Exit Function
    
Erro_ComissoesPV_Le_Lock_ObjetosRelacionados:
    
    ComissoesPV_Le_Lock_ObjetosRelacionados = Err
    
    Select Case Err
        
        Case 58458, 58460 'Tratados nas Rotinas chamadas
        
        Case 58459
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO", Err, objPedidoDeVenda.lCodigo)
        
        Case 58461
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VALOR_TOTAL_COMISSAO_INVALIDO", Err, dValorTotalComissoes, objPedidoDeVenda.dValorTotal - objPedidoDeVenda.objTributacaoPV.dIRRFValor)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149757)
    
    End Select
        
    Exit Function
    
End Function

Function PrevVenda_Exclui(ByVal objPrevVenda As ClassPrevVenda) As Long
'Exclui a previsão de venda do BD

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sCodigo As String
Dim iFilialEmpresa As Integer

On Error GoTo Erro_PrevVenda_Exclui

    'Abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 34535

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 34536

    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 34537

    'Inicializa string com o tamanho do BD
    sCodigo = String(STRING_PREVVENDA_CODIGO, 0)

    'Pequisa a previsão em questão no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT FilialEmpresa, Codigo FROM PrevVenda WHERE FilialEmpresa = ? AND Codigo = ?", 0, iFilialEmpresa, sCodigo, giFilialEmpresa, objPrevVenda.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 34538

    'Lê a previsão se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34539

    'Não encontrou a previsão no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 34540

    'Lock da previsão
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 34541

    'Exclui a previsão do BD - Falta alterar filialempresa
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM PrevVenda", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 34542

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 34543

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)

    PrevVenda_Exclui = SUCESSO

    Exit Function

Erro_PrevVenda_Exclui:

    PrevVenda_Exclui = Err

    Select Case Err

        Case 34535, 34536
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 34537
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 34538, 34539
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDA", Err, objPrevVenda.sCodigo)

        Case 34540
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PREVVENDA_NAO_CADASTRADA", Err, objPrevVenda.sCodigo)

        Case 34541
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PREVVENDA", Err, objPrevVenda.sCodigo)

        Case 34542
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PREVVENDA", Err, objPrevVenda.sCodigo)

        Case 34543
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149758)
    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function PrevVenda_Grava(ByVal objPrevVenda As ClassPrevVenda) As Long
'Grava a Previsão de Venda no BD

Dim alComando(1 To 5) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sCodigo As String
Dim tProduto As typeProduto
Dim iAlmoxarifado As Integer
Dim iIndice As Integer
Dim objProdutoFilial As New ClassProdutoFilial

On Error GoTo Erro_PrevVenda_Grava

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 58256
    Next
    
    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 58257

    If objPrevVenda.iCodRegiao > 0 Then
        
        'Lock na Regiao de Venda
        lErro = CF("RegiaoVenda_Lock", alComando(4), objPrevVenda.iCodRegiao)
        If lErro <> SUCESSO Then gError 58259
    
    End If
    
    objProdutoFilial.sProduto = objPrevVenda.sProduto
    objProdutoFilial.iFilialEmpresa = objPrevVenda.iFilialEmpresa
    
    'Faz lock do registro associado na tabela ProdutoFilial
    lErro = CF("ProdutoFilial_Le_Lock", alComando(5), objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 41770 Then gError 25656
    If lErro = 41770 Then gError 25657
    
    'Lê no BD as caracteristicas do Produto e Locka (Gerencial, Faturamento)
    lErro = Comando_ExecutarLockado(alComando(1), "SELECT Gerencial, Faturamento FROM Produtos WHERE Codigo = ? ", tProduto.iGerencial, tProduto.iFaturamento, objPrevVenda.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 58258
    
    'Faz Lock Shared do Produto
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 58267
        
    'Faz Lock Shared do Produto
    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 58259
    
    'Se for um Produto Gerencial ---> ERRO
    If tProduto.iGerencial = GERENCIAL Then gError 58260
    
    'Se for um Produto não Vendavel ----> ERRO
    If tProduto.iFaturamento = PRODUTO_NAO_VENDAVEL Then gError 58261
    
    'Inicializa string com o tamanho do BD
    sCodigo = String(STRING_PREVVENDA_CODIGO, 0)

    'Pesquisa no BD a previsão em questão
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM PrevVenda WHERE FilialEmpresa = ? AND Codigo = ?", 0, sCodigo, giFilialEmpresa, objPrevVenda.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 58262

    'Lê a previsão se estiver no BD
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 58263
    
    'Se encontrou a previsão -> Alteração
    If lErro = AD_SQL_SUCESSO Then

        'Atualiza a Previsão
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE PrevVenda SET DataPrevisao = ? , Produto = ?, DataInicio = ?, DataFim = ?, CodRegiao = ?, Quantidade = ?, Valor = ?", alComando(2), objPrevVenda.dtDataPrevisao, objPrevVenda.sProduto, objPrevVenda.dtDataInicio, objPrevVenda.dtDataFim, objPrevVenda.iCodRegiao, objPrevVenda.dQuantidade, objPrevVenda.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 58264

    Else 'Não encontrou a previsão -> Inserção

        'Insere a Previsão
        lErro = Comando_Executar(alComando(3), "INSERT INTO PrevVenda (FilialEmpresa, Codigo, DataPrevisao, Produto, DataInicio, DataFim, CodRegiao, Quantidade, Valor) VALUES (?,?,?,?,?,?,?,?,?)", giFilialEmpresa, objPrevVenda.sCodigo, objPrevVenda.dtDataPrevisao, objPrevVenda.sProduto, objPrevVenda.dtDataInicio, objPrevVenda.dtDataFim, objPrevVenda.iCodRegiao, objPrevVenda.dQuantidade, objPrevVenda.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 58265

    End If

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 58266

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PrevVenda_Grava = SUCESSO

    Exit Function

Erro_PrevVenda_Grava:

    PrevVenda_Grava = gErr

    Select Case gErr

        Case 25656, 58259 'Tratado na Rotina chamada
        
        Case 25657
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILIAL_NAO_CADASTRADO", gErr, objProdutoFilial.sProduto, objProdutoFilial.iFilialEmpresa)
     
        Case 58256
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 58257
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 58258, 58259, 58267
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objPrevVenda.sProduto)
        
        Case 58260
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_GERENCIAL", gErr, objPrevVenda.sProduto)
        
        Case 58261
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_PODE_SER_VENDIDO2", gErr, objPrevVenda.sProduto)
        
        Case 58262, 58263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDA", gErr, objPrevVenda.sCodigo)

        Case 58264
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PREVVENDA", gErr, objPrevVenda.sCodigo)

        Case 58265
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PREVVENDA", gErr, objPrevVenda.sCodigo)

        Case 58266
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149759)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Bloqueio_Libera(ByVal colBloqueioPV As Collection) As Long
'libera os bloqueios passados na colecao colBloqueioPV

Dim alComando(1 To 17) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim objBloqueioPV As ClassBloqueioPV

On Error GoTo Erro_Bloqueio_Libera

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 36646
    Next

    For Each objBloqueioPV In colBloqueioPV

        'processa cada liberação de bloqueio. Mesmo que haja erro, prossegue para o proximo bloqueio
        lErro = Bloqueio_Libera_Trans(alComando(), objBloqueioPV)
        
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then Error 36646
        Next

    Next

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Bloqueio_Libera = SUCESSO

    Exit Function

Erro_Bloqueio_Libera:

    Bloqueio_Libera = Err

    Select Case Err

        Case 36646
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149760)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Bloqueio_Libera_Trans(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'tenta liberar o bloqueio passado como parametro

Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iSequencial As Integer
Dim lCodigoReserva As Long
Dim dPedidoFaltaReservar As Double
Dim dPedidoReserva As Double

On Error GoTo Erro_Bloqueio_Libera_Trans

    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 36994

    'descobre o próximo código de reserva disponível e loca-o
    lErro = CF("Reserva_Automatico1", alComando(3), lCodigoReserva, objBloqueioPV.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 36682

    'Pesquisa no BD o bloqueio em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Sequencial FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? AND TipoDeBloqueio = ? AND Datalib = ?", 0, iSequencial, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iTipoDeBloqueio, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then gError 36648

    'Lê o bloqueio
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 36649

    'Se encontrou o bloqueio
    If lErro = AD_SQL_SUCESSO Then

        'Loca o bloqueio
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 36650

        objBloqueioPV.iFilialEmpresa = giFilialEmpresa
        objBloqueioPV.iSequencial = iSequencial

        Select Case objBloqueioPV.iTipoDeBloqueio
        
            Case BLOQUEIO_TOTAL
                lErro = Processa_Bloqueio_Total(alComando(), objBloqueioPV, lCodigoReserva)
                If lErro <> SUCESSO Then gError 36706
            
            Case BLOQUEIO_PARCIAL
                lErro = Bloqueio_Parcial_Libera(alComando(), objBloqueioPV, lCodigoReserva, dPedidoFaltaReservar, dPedidoReserva)
                If lErro <> SUCESSO Then gError 36693
                
                'se não falta nada para reservar ==> libera o bloqueio parcial
                If dPedidoFaltaReservar = 0 Then
                    lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                    If lErro <> SUCESSO Then gError 36694
                End If
                
            Case BLOQUEIO_NAO_RESERVA
                lErro = Processa_Bloqueio_Nao_Reserva(alComando(), objBloqueioPV, lCodigoReserva)
                If lErro <> SUCESSO Then gError 36701
        
            Case BLOQUEIO_CREDITO
                lErro = Processa_Bloqueio_Credito(alComando(), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36961
        
                'Atualiza a tabela de BloqueiosPV com os dados da liberação do bloqueio em questão
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36997
            
            Case BLOQUEIO_DIAS_ATRASO 'Trecho incluido por leo em 21/02/02
                lErro = Processa_Bloqueio_DiasAtraso(objBloqueioPV)
                If lErro <> SUCESSO Then gError 94333
                
                'Atualiza a tabela de BloqueiosPV com os dados da liberação do bloqueio em questão
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36997
                                
            Case Else
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36651
        
        End Select
        
    End If

    'guarda o próximo código de reserva disponível
    lErro = CF("Reserva_Automatico3", alComando(3), alComando(4), lCodigoReserva)
    If lErro <> SUCESSO Then gError 36683

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 36995

    Bloqueio_Libera_Trans = SUCESSO

    Exit Function

Erro_Bloqueio_Libera_Trans:

    Bloqueio_Libera_Trans = gErr

    objBloqueioPV.sCodUsuarioLib = ""
    objBloqueioPV.sResponsavelLib = ""
    objBloqueioPV.dtDataLib = DATA_NULA

    Select Case gErr

        Case 36994
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 36648, 36649
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOPV", gErr, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iTipoDeBloqueio)

        Case 36650
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_BLOQUEIOPV", gErr, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iSequencial)

        Case 36651, 36682, 36683, 36693, 36694, 36701, 36706, 36961, 36997, 94333

        Case 36995
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149761)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Private Function Processa_Bloqueio_Total(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV, ByVal lCodigoReserva As Long) As Long
'trata os bloqueios totais

Dim lErro As Long

On Error GoTo Erro_Processa_Bloqueio_Total

    'libera o bloqueio total
    lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
    If lErro <> SUCESSO Then Error 36699

    'cria o bloqueio nao reserva
    objBloqueioPV.dtData = gdtDataAtual
    objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_NAO_RESERVA
    
    'insere o bloqueio não reserva
    lErro = CF("BloqueioPV_Insere", alComando(12), objBloqueioPV)
    If lErro <> SUCESSO Then Error 36700
        
    'processa o bloqueio não reserva
    lErro = Processa_Bloqueio_Nao_Reserva(alComando(), objBloqueioPV, lCodigoReserva)
    If lErro <> SUCESSO Then Error 36701

    Processa_Bloqueio_Total = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_Total:

    Processa_Bloqueio_Total = Err
    
    Select Case Err

        Case 36699, 36700, 36701

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149762)

    End Select

    Exit Function

End Function

Private Function Processa_Bloqueio_Credito(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'trata os bloqueios de crédito
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim dPedidoFaltaReservar As Double
Dim dPedidoReserva As Double
Dim objCliente As New ClassCliente
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objLiberacaoCredito As New ClassLiberacaoCredito
Dim objValorLiberadoCredito As New ClassValorLiberadoCredito
Dim objItemPedido As ClassItemPedido
Dim dValorPedido As Double
Dim objClienteEstatistica As New ClassFilialClienteEst

On Error GoTo Erro_Processa_Bloqueio_Credito

    objPedidoVenda.iFilialEmpresa = objBloqueioPV.iFilialEmpresa
    objPedidoVenda.lCodigo = objBloqueioPV.lPedidoDeVendas
    
    'Lê o Pedido de Venda a partir do Código passado.
    lErro = CF("PedidoDeVenda_Le_Lock", alComando(17), objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 36986 Then Error 36993

    'se o pedido não foi encontrado ==> erro
    If lErro = 36986 Then Error 36964
    
    'le os itens do pedido
    lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
    If lErro <> SUCESSO Then Error 36996
    
    'calcula o valor a ser liberado
    For Each objItemPedido In objPedidoVenda.colItensPedido
        dValorPedido = dValorPedido + ((objItemPedido.dQuantidade - objItemPedido.dQuantFaturada - objItemPedido.dQuantCancelada) * objItemPedido.dPrecoUnitario)
    Next
    
    objCliente.lCodigo = objPedidoVenda.lCliente

    'Le os dados do cliente relacionado ao pedido de venda
    lErro = CF("Cliente_ObterDadosBasicos1", alComando(13), objCliente)
    If lErro <> SUCESSO Then Error 36962
    
    objClienteEstatistica.lCodCliente = objCliente.lCodigo
    objClienteEstatistica.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
    
    'Lê os dados de estatística do cliente
    lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
    If lErro <> SUCESSO Then Error 52710
    
    'se o valor do pedido ultrapassar o credito do cliente menos o que ele já tem encomendado
    If dValorPedido > objCliente.dLimiteCredito - (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas) Then
        
        objLiberacaoCredito.sCodUsuario = objBloqueioPV.sCodUsuario
        
        'verificar se o usuário tem autorizacao para liberar o valor
        lErro = CF("LiberacaoCredito_Le", objLiberacaoCredito)
        If lErro <> SUCESSO And lErro <> 36968 Then Error 36975
        
        'se não foi encontrado autorização para o usuario liberar credito
        If lErro = 36968 Then Error 36976
        
        'se o valor do pedido ultrapassar o limite de credito que o usuario pode conceder por operacao
        If dValorPedido > objLiberacaoCredito.dLimiteOperacao Then Error 36977
        
        objValorLiberadoCredito.sCodUsuario = objBloqueioPV.sCodUsuario
        objValorLiberadoCredito.iAno = Year(objBloqueioPV.dtDataLib)
        
        'Lê a estatistica de liberação de credito de um usuario em um determinado ano
        lErro = CF("ValorLiberadoCredito_Lock", objValorLiberadoCredito)
        If lErro <> SUCESSO And lErro <> 44470 Then Error 36978
        
        'se o valor do pedido ultrapassar o valor mensal que o usuario tem capacidade de liberar
        If dValorPedido > objLiberacaoCredito.dLimiteMensal - objValorLiberadoCredito.adValorLiberado(Month(objBloqueioPV.dtDataLib)) Then Error 36980
        
        'Atualiza a estatistica de liberação de credito do usuario
        lErro = CF("ValorLiberadoCredito_Grava", objValorLiberadoCredito.sCodUsuario, dValorPedido, objBloqueioPV.dtDataLib)
        If lErro <> SUCESSO Then Error 44475
        
    End If
    
    Processa_Bloqueio_Credito = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_Credito:

    Processa_Bloqueio_Credito = Err
    
    Select Case Err

        Case 36962, 36975, 36978, 36996, 44475, 52710, 36993 'Tratados nas Rotinas Chamadas
        
        Case 36964
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO", Err, objPedidoVenda.lCodigo)

        Case 36976, 36979
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE1", Err, objLiberacaoCredito.sCodUsuario, objBloqueioPV.lPedidoDeVendas)
        
        Case 36977
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEOPERACAO1", Err, objBloqueioPV.lPedidoDeVendas, objLiberacaoCredito.sCodUsuario)
        
        Case 36980
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEMENSAL1", Err, objBloqueioPV.lPedidoDeVendas, objLiberacaoCredito.sCodUsuario)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149763)

    End Select

    Exit Function

End Function

Function ValorLiberadoCredito_Grava(ByVal sCodUsuario As String, ByVal dValor As Double, ByVal dtData As Date) As Long
'Atualiza a estatistica de liberação de credito de um usuario (sCodUsuario) em um determinado mes/ano (dtData) com o valor (dValor).
'se não existir a estitistica para o usuario/ano, cria.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lComando As Long
Dim lComando1 As Long
Dim lErro As Long
Dim tValorLiberadoCredito As typeValorLiberadoCredito
Dim iAno As Integer

On Error GoTo Erro_ValorLiberadoCredito_Grava

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44460
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 44461

    'Verifica se a os dados estatisticos de liberacao de credito existe
    lErro = Comando_ExecutarPos(lComando, "SELECT Ano FROM ValorLiberadoCredito WHERE CodUsuario = ? AND Ano = ? ", 0, iAno, sCodUsuario, Year(dtData))
    If lErro <> AD_SQL_SUCESSO Then Error 44462

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44463

    'Liberacao não cadastrada ==> insere a liberacao
    If lErro = AD_SQL_SEM_DADOS Then

        lErro = Comando_Executar(lComando1, "INSERT INTO ValorLiberadoCredito (CodUsuario, Ano, Liberado" + CStr(Month(dtData)) + ") VALUES (?,?,?)", sCodUsuario, Year(dtData), dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 44464
    
    Else
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 44465

        lErro = Comando_ExecutarPos(lComando1, "UPDATE ValorLiberadoCredito SET Liberado" + CStr(Month(dtData)) + " = Liberado" + CStr(Month(dtData)) + " + ?", lComando, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 44466

    End If

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ValorLiberadoCredito_Grava = SUCESSO

Exit Function

Erro_ValorLiberadoCredito_Grava:

    ValorLiberadoCredito_Grava = Err

    Select Case Err

        Case 44460, 44461
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44462, 44463
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case 44464
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case 44465
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case 44466
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149764)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Processa_NFiscal_Credito(ByVal objNFiscal As ClassNFiscal) As Long
'verifica se o cliente possui o crédito para faturar a nota fiscal.
'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim objLiberacaoCredito As New ClassLiberacaoCredito
Dim objValorLiberadoCredito As New ClassValorLiberadoCredito
Dim lComando As Long
Dim lComando1 As Long
Dim tCliente As typeCliente
Dim sCodUsuario As String
Dim dValor As Double
Dim dtData As Date
Dim objClienteEstatistica As New ClassFilialClienteEst
Dim bNFPedido As Boolean
Dim iCreditoAprovado As Integer
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objCliente As New ClassCliente 'Inserido por Wagner

On Error GoTo Erro_Processa_NFiscal_Credito

    If objNFiscal.iNaoVerificaCredito = VERIFICA_CREDITO_CLIENTE Then

        lComando = Comando_Abrir()
        If lComando = 0 Then gError 44482
    
        lComando1 = Comando_Abrir()
        If lComando1 = 0 Then gError 44483
    
        lErro = Processa_NFiscal_Atraso(objNFiscal)
        If lErro <> SUCESSO Then gError 94364
        
        'Verifica se NFiscal é oriunda de Pedido
        If objNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Or objNFiscal.iTipoNFiscal = DOCINFO_NFISVPV Then
            bNFPedido = True
        Else
            bNFPedido = False
        End If
        
        'Se for testa se Pedido tem crédito aprovado
        If bNFPedido Then
        
            objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
            objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
    
            'verifica se o pedido tem credito aprovado
            lErro = CF("BloqueiosPV_Credito_Aprovado_Testa", objPedidoVenda, iCreditoAprovado)
            If lErro <> SUCESSO Then gError 25740
    
        End If
        
        'Inserido por Wagner
        '##################
        objCliente.lCodigo = objNFiscal.lCliente
        'le os dados do cliente
        lErro = CF("Cliente_Le", objCliente)
        If lErro <> SUCESSO And lErro <> 12293 Then gError 129149
        
        If objCliente.iAtivo <> CLIENTE_ATIVO Then gError 129150
        '##################
        
        'tulio140103
        'se for pra verificar limite de credito
        If gobjCRFAT.iCreditoVerificaLimite = VERIFICAR_LIMITE_CREDITO Then
        
            'se NF não for oriunda de PV ou se crédito não está liberado
            If (Not bNFPedido) Or iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Then
            
                'Lê os saldos e o limite de credito do Cliente
                lErro = Comando_ExecutarLockado(lComando, "SELECT LimiteCredito FROM Clientes WHERE Codigo = ?", tCliente.dLimiteCredito, objNFiscal.lCliente)
                If lErro <> AD_SQL_SUCESSO Then gError 44484
            
                lErro = Comando_BuscarPrimeiro(lComando)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 44485
                
                'se não encontrou os dados do cliente
                If lErro = AD_SQL_SEM_DADOS Then gError 44486
            
                'loca o cliente
                lErro = Comando_LockExclusive(lComando)
                If lErro <> AD_SQL_SUCESSO Then gError 44487
                    
                'Passa chave de objClienteEstatistica
                objClienteEstatistica.lCodCliente = objNFiscal.lCliente
                objClienteEstatistica.iFilialEmpresa = objNFiscal.iFilialEmpresa
                
                'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
                lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
                If lErro <> SUCESSO Then gError 52955
                    
                'Verifica se a soma dos creditos em Pedidos, Titulos e NFs ultrapassa o limite de Credito do Cliente
                If tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + IIf(bNFPedido Or objNFiscal.iClasseDocCPR = CPR_TITULO_RECEBER, 0, objNFiscal.dValorTotal)) Then
                
                    'se um usuário não autorizou o credito ==> erro
                    If Len(objNFiscal.sCodUsuario) = 0 Then gError 44488
                        
                        objLiberacaoCredito.sCodUsuario = objNFiscal.sCodUsuario
                    
                    If giTipoVersao = VERSAO_FULL Then
                    
                        'verificar se o usuário tem autorizacao para liberar o valor
                        lErro = CF("LiberacaoCredito_Lock", objLiberacaoCredito)
                        If lErro <> SUCESSO And lErro <> 44479 Then gError 44489
                        
                        'se não foi encontrado autorização para o usuario liberar credito
                        If lErro = 44479 Then gError 44490
                        
                        'se o valor da nota ultrapassar o limite de credito que o usuario pode conceder por operacao
                        If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteOperacao Then gError 44491
                        
                        objValorLiberadoCredito.sCodUsuario = objNFiscal.sCodUsuario
                        objValorLiberadoCredito.iAno = Year(gdtDataAtual)
                        
                        'Lê a estatistica de liberação de credito de um usuario em um determinado ano
                        lErro = CF("ValorLiberadoCredito_Lock", objValorLiberadoCredito)
                        If lErro <> SUCESSO And lErro <> 44470 Then gError 44492
                        
                        'se o valor da nota ultrapassar o valor mensal que o usuario tem capacidade de liberar
                        If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteMensal - objValorLiberadoCredito.adValorLiberado(Month(gdtDataAtual)) Then gError 44493
                    
                        sCodUsuario = objValorLiberadoCredito.sCodUsuario
                    
                    ElseIf giTipoVersao = VERSAO_LIGHT Then
                    
                        sCodUsuario = objNFiscal.sCodUsuario
                    
                    End If
                    
                    dValor = objNFiscal.dValorTotal
                    dtData = gdtDataAtual
                    
                    'Atualiza a estatistica de liberação de credito do usuario
                    lErro = CF("ValorLiberadoCredito_Grava", sCodUsuario, dValor, dtData)
                    If lErro <> SUCESSO Then gError 44494
                    
                End If
                
            End If
            
        End If
        
        Call Comando_Fechar(lComando)
        Call Comando_Fechar(lComando1)
        
    End If
        
    Processa_NFiscal_Credito = SUCESSO
    
    Exit Function
    
Erro_Processa_NFiscal_Credito:

    Processa_NFiscal_Credito = gErr
    
    Select Case gErr

        Case 44482, 44483
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 44484, 44485
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", gErr, objNFiscal.lCliente)

        Case 44486
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", gErr, objNFiscal.lCliente)

        Case 44487
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", gErr, objNFiscal.lCliente)
        
        Case 44488
           lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_CREDITO", gErr, objNFiscal.lCliente)

        Case 25740, 44489, 44492, 44494, 52955, 94364

        Case 44490
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE", gErr, objLiberacaoCredito.sCodUsuario)
        
        Case 44491
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEOPERACAO", gErr, objLiberacaoCredito.sCodUsuario)
    
        Case 44493
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEMENSAL", gErr, objLiberacaoCredito.sCodUsuario)
        
        Case 44495
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", gErr, objNFiscal.lCliente)
            
        Case 129149
        
        Case 129150
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_INATIVO", gErr, objNFiscal.lCliente)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149765)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Private Function Processa_Bloqueio_Nao_Reserva(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV, ByVal lCodigoReserva As Long) As Long
'trata os bloqueios não reserva

Dim lErro As Long
Dim dPedidoFaltaReservar As Double
Dim dPedidoReserva As Double

On Error GoTo Erro_Processa_Bloqueio_Nao_Reserva

    lErro = Bloqueio_Parcial_Libera(alComando(), objBloqueioPV, lCodigoReserva, dPedidoFaltaReservar, dPedidoReserva)
    If lErro <> SUCESSO Then Error 36695
    
    'se não falta nada para reservar ==> libera o bloqueio
    If dPedidoFaltaReservar = 0 Then
        lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
        If lErro <> SUCESSO Then Error 36696
        
    'se foi reservado alguma coisa ==> libera o bloqueio não reserva e insere um bloqueio parcial para o pedido
    ElseIf dPedidoReserva <> dPedidoFaltaReservar Then
    
        'libera o bloqueio não reserva
        lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
        If lErro <> SUCESSO Then Error 36697
        
        'cria o bloqueio parcial
        objBloqueioPV.dtData = gdtDataAtual
        objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_PARCIAL
        
        lErro = CF("BloqueioPV_Insere", alComando(12), objBloqueioPV)
        If lErro <> SUCESSO Then Error 36698
        
    End If

    Processa_Bloqueio_Nao_Reserva = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_Nao_Reserva:

    Processa_Bloqueio_Nao_Reserva = Err
    
    Select Case Err

        Case 36695, 36696, 36697, 36698

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149766)

    End Select

    Exit Function

End Function

Private Function Bloqueio_Libera_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'grava as liberações de bloqueio

Dim lErro As Long

On Error GoTo Erro_Bloqueio_Libera_Atualiza

    'Atualiza o Bloqueio
    lErro = Comando_ExecutarPos(lComando2, "UPDATE BloqueiosPV SET CodUsuarioLib = ? , ResponsavelLib = ?, DataLib = ?, Observacao = ?", lComando1, objBloqueioPV.sCodUsuarioLib, objBloqueioPV.sResponsavelLib, objBloqueioPV.dtDataLib, objBloqueioPV.sObservacao)
    If lErro <> AD_SQL_SUCESSO Then Error 36652

    Bloqueio_Libera_Atualiza = SUCESSO

    Exit Function

Erro_Bloqueio_Libera_Atualiza:

    Bloqueio_Libera_Atualiza = Err

    Select Case Err

        Case 36652
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BLOQUEIOPV", Err, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iSequencial)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149767)

    End Select

    Exit Function

End Function

Function BloqueioPV_Insere(ByVal lComando As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'insere um bloqueio de pedido de venda
'IMPORTANTE: Tem que ser chamada dentro de TRANSACAO

Dim lErro As Long
Dim iProxSeqBloqueio As Integer

On Error GoTo Erro_BloqueioPV_Insere

        lErro = CF("BloqueioPV_Automatico", objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iFilialEmpresa, iProxSeqBloqueio)
        If lErro <> SUCESSO Then Error 36690

        lErro = Comando_Executar(lComando, "INSERT INTO BloqueiosPV(FilialEmpresa,PedidoDeVenda,Sequencial,TipoDeBloqueio,CodUsuario,Responsavel,Data) VALUES (?,?,?,?,?,?,?)", objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iProxSeqBloqueio, objBloqueioPV.iTipoDeBloqueio, objBloqueioPV.sCodUsuario, objBloqueioPV.sResponsavel, objBloqueioPV.dtData)
        If lErro <> AD_SQL_SUCESSO Then Error 36691

    BloqueioPV_Insere = SUCESSO

    Exit Function

Erro_BloqueioPV_Insere:

    BloqueioPV_Insere = Err

    Select Case Err

        Case 36690

        Case 36691
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BLOQUEIOPV", Err, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iProxSeqBloqueio)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149768)

    End Select

    Exit Function

End Function

Private Function Bloqueio_Parcial_Libera(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV, ByVal lCodigoReserva As Long, dPedidoFaltaReservar As Double, dPedidoReserva As Double) As Long
'IMPORTANTE: Tem que ser chamado dentro de TRANSACAO
'tenta liberar um bloqueio parcial
'Para cada ítem do pedido,
'1. Tenta reservar QAR (QP-QC-QF-QR) no almoxarifado default
'2. Se conseguir, passa ao próximo ítem.
'3. Se não conseguir, sai da rotina e não desbloqueia.
'Devolve em dPedidoFaltaReservar a quantidade do pedido que falta reservar do pedido
'Devolve em dPedidoReserva a quantidade total do pedido que está sendo solicitado reserva

Dim lErro As Long
Dim dQuantidadeFaltaReservar As Double
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objItemPedido As ClassItemPedido
Dim objProduto As New ClassProduto
Dim objProdutoFilial As New ClassProdutoFilial
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dFator As Double
Dim dQuantidadeReserva As Double


On Error GoTo Erro_Bloqueio_Parcial_Libera

    dPedidoFaltaReservar = 0
    dPedidoReserva = 0

    'Lê os itens de PedidoVenda associados
    objPedidoVenda.lCodigo = objBloqueioPV.lPedidoDeVendas

    lErro = CF("ItensPedido_Le_Todos", alComando(5), objPedidoVenda)
    If lErro <> SUCESSO Then Error 36653

    For Each objItemPedido In objPedidoVenda.colItensPedido

        objProduto.sCodigo = objItemPedido.sProduto

        lErro = CF("Produto_Le_ControleEstoque", alComando(6), objProduto)
        If lErro <> SUCESSO Then Error 36660

        If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then

            dQuantidadeFaltaReservar = 0
            
            'Quantidade Reservar na UM de Venda
            dQuantidadeFaltaReservar = objItemPedido.dQuantidade - objItemPedido.dQuantCancelada - objItemPedido.dQuantFaturada - objItemPedido.dQuantReservada
            
            If dQuantidadeFaltaReservar <> 0 Then
            
                objProdutoFilial.iFilialEmpresa = giFilialEmpresa
                objProdutoFilial.sProduto = objItemPedido.sProduto
            
                lErro = CF("ProdutoFilial_Le1", alComando(7), objProdutoFilial)
                If lErro <> SUCESSO Then Error 36661
                
                objEstoqueProduto.sProduto = objItemPedido.sProduto
                objEstoqueProduto.iAlmoxarifado = objProdutoFilial.iAlmoxarifado
                
                lErro = CF("EstoqueProduto_Le1", alComando(8), objEstoqueProduto)
                If lErro <> SUCESSO Then Error 36666

                'Descobre o fator de conversão da quantidade pedida
                lErro = CF("UM_Conversao", objItemPedido.iClasseUM, objItemPedido.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then Error 36673

                'converte o que falta reservar em unidades de estoque
                dQuantidadeFaltaReservar = dQuantidadeFaltaReservar * dFator
                dPedidoReserva = dPedidoReserva + dQuantidadeFaltaReservar
                dQuantidadeReserva = dQuantidadeFaltaReservar
                
                'se a quantidade a reservar ultrapassa o disponivel (soma do disponivel + em consignacao em dQUantDisponivel) ==>
                If objEstoqueProduto.dQuantDisponivel - dQuantidadeFaltaReservar < 0 Then
                
                    objEstoqueProduto.dQuantReservada = objEstoqueProduto.dQuantReservada + objEstoqueProduto.dQuantDispNossa
                    objEstoqueProduto.dQuantReservadaConsig = objEstoqueProduto.dQuantReservadaConsig + objEstoqueProduto.dQuantConsig3
                    dQuantidadeFaltaReservar = dQuantidadeFaltaReservar - objEstoqueProduto.dQuantDisponivel
                    objEstoqueProduto.dQuantDispNossa = 0
                    objEstoqueProduto.dQuantConsig3 = 0
                    
                'se a quantidade a reservar ultrapassa a quantidade disponivel ==> reserva toda a quantidade disponivel e o restante da consignacao
                ElseIf objEstoqueProduto.dQuantDispNossa - dQuantidadeFaltaReservar < 0 Then
                
                    objEstoqueProduto.dQuantReservada = objEstoqueProduto.dQuantReservada + objEstoqueProduto.dQuantDispNossa
                    objEstoqueProduto.dQuantReservadaConsig = objEstoqueProduto.dQuantReservadaConsig + dQuantidadeFaltaReservar - objEstoqueProduto.dQuantDispNossa
                    objEstoqueProduto.dQuantConsig3 = objEstoqueProduto.dQuantConsig3 + objEstoqueProduto.dQuantDispNossa - dQuantidadeFaltaReservar
                    objEstoqueProduto.dQuantDispNossa = 0
                    dQuantidadeFaltaReservar = 0
                    
                Else
                
                    'se a quantidade a reservar não ultrapassa a quantidade disponivel ==> reserva somente a quant. disponivel
                    objEstoqueProduto.dQuantDispNossa = objEstoqueProduto.dQuantDispNossa - dQuantidadeFaltaReservar
                    objEstoqueProduto.dQuantReservada = objEstoqueProduto.dQuantReservada + dQuantidadeFaltaReservar
                    dQuantidadeFaltaReservar = 0
                    
                End If

                dPedidoFaltaReservar = dPedidoFaltaReservar + dQuantidadeFaltaReservar
                
                dQuantidadeReserva = dQuantidadeReserva - dQuantidadeFaltaReservar
                
                'se há algo disponivel para reservar ==> reserva
                If dQuantidadeReserva > 0 Then
                
                    'atualiza EstoqueProduto
                    lErro = CF("EstoqueProduto_Atualiza2", alComando(8), alComando(9), objEstoqueProduto)
                    If lErro <> SUCESSO Then Error 36671
                
                    'insere a reserva
                    lErro = CF("Reserva_Insere", alComando(10), alComando(11), objItemPedido, dQuantidadeReserva, lCodigoReserva, objProdutoFilial.iAlmoxarifado)
                    If lErro <> SUCESSO Then Error 36672
                    
                End If
            End If
        End If
    Next


    Bloqueio_Parcial_Libera = SUCESSO

    Exit Function

Erro_Bloqueio_Parcial_Libera:

    Bloqueio_Parcial_Libera = Err

    Select Case Err

        Case 36653, 36660, 36661, 36671, 36672, 36673

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 149769)

    End Select

    Exit Function

End Function




Function SldMesFat_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaFat As ClassSldDiaFat) As Long
'Atualiza a tabela de SldMesFat utilizando os valores passados atraves de objSldDiaFat.
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesFat_Atualiza
    
    iMes = Month(objSldDiaFat.dtData)
    sMes = CStr(iMes)
    
    'Le a tabela de SldMesFat para o Ano/filial/produto em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesFat WHERE Ano=? AND FilialEmpresa=? AND Produto=?", 0, iAno, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 44299

    'leitura do registro referente ao Ano/filial/produto em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 44300
    
    'lock do registro em questão
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 44301

    'Atualiza a tabela de SldMesFat para o Ano/filial/produto em questão
    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" + sMes + " = ValorFaturado" + sMes + " + ?, ValorDevolvido" + sMes + " = ValorDevolvido" + sMes + " + ?, TotalDescontos" + sMes + " = TotalDescontos" + sMes + " + ?, QuantPedida" + sMes + " = QuantPedida" + sMes + " + ?, QuantFaturada" + sMes + " = QuantFaturada" + sMes + " + ?, QuantDevolvida" + sMes + " = QuantDevolvida" + sMes + " + ?", lComando1, objSldDiaFat.dValorFaturado, objSldDiaFat.dValorDevolvido, objSldDiaFat.dTotalDescontos, objSldDiaFat.dQuantPedida, objSldDiaFat.dQuantFaturada, objSldDiaFat.dQuantDevolvida)
    If lErro <> AD_SQL_SUCESSO Then Error 44302
        
    SldMesFat_Atualiza = SUCESSO

    Exit Function

Erro_SldMesFat_Atualiza:

    SldMesFat_Atualiza = Err

    Select Case Err

        Case 44299, 44300
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", Err, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)

        Case 44301
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFAT", Err, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)

        Case 44302
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", Err, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149770)

    End Select

    Exit Function


End Function

Function SldDiaFat_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaFat As ClassSldDiaFat) As Long
'Atualiza a tabela de SldDiaFat utilizando os valores passados atraves de objSldDiaFat.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim dtData As Date

On Error GoTo Erro_SldDiaFat_Atualiza

    'Le a tabela de SldDiaFat para a filial/produto/data em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Data FROM SldDiaFat WHERE FilialEmpresa = ? AND Produto = ? AND Data = ?", 0, dtData, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 44303

    'leitura do registro referente a filial/produto/data em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44304
    
    'se não encontrou um registro para a data em questão ==> insere um registro
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Insere um registro na tabela de SldDiaFat para a filial/produto/data em questão
        lErro = Comando_Executar(lComando2, "INSERT INTO SldDiaFat (FilialEmpresa, Produto, Data, ValorFaturado, TotalDescontos, QuantPedida, QuantFaturada, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?,?,?,?,?)", objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData, objSldDiaFat.dValorFaturado, objSldDiaFat.dTotalDescontos, objSldDiaFat.dQuantPedida, objSldDiaFat.dQuantFaturada, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
        If lErro <> AD_SQL_SUCESSO Then Error 44305
    
    
    Else
        'se encontrou ==> atualiza o registro
    
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 44306
    
        'Atualiza a tabela de SldDiaFat para a filial/produto/data em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado + ?, TotalDescontos = TotalDescontos + ?, QuantPedida = QuantPedida + ?, QuantFaturada = QuantFaturada + ?, ValorDevolvido = ValorDevolvido + ?, QuantDevolvida = QuantDevolvida + ?", lComando1, objSldDiaFat.dValorFaturado, objSldDiaFat.dTotalDescontos, objSldDiaFat.dQuantPedida, objSldDiaFat.dQuantFaturada, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
        If lErro <> AD_SQL_SUCESSO Then Error 44307
        
    End If

    SldDiaFat_Atualiza = SUCESSO

    Exit Function

Erro_SldDiaFat_Atualiza:

    SldDiaFat_Atualiza = Err

    Select Case Err

        Case 44303, 44304
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFAT", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))

        Case 44305
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAEST", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))
        
        Case 44306
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDDIAEST", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))

        Case 44307
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAEST", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149771)

    End Select

    Exit Function

End Function

'mario
Private Function Processa_Gravacao_NFiscal(alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal dValorFaturado As Double, ByVal objMovEstoque As ClassMovEstoque, ByVal objNFiscal As ClassNFiscal, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'processa a gravacao da Nota Fiscal e a Baixa do Pedido

Dim lErro As Long, objContabAutomatica As ClassContabAutomatica

On Error GoTo Erro_Processa_Gravacao_NFiscal

    'Grava os Movimentos de Estoque de Reserva (liberando as quantidades reservadas)
    lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
    If lErro <> SUCESSO Then Error 39002

    'gravar a nota fiscal fatura a partir de objNFiscal
    If objGeracaoNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Then

        'Insere uma Nota Fiscal Fatura de Saida no Banco de Dados
        lErro = CF("NFiscalFatura_Grava_Trans", alComando2(), objNFiscal)
        If lErro <> SUCESSO Then Error 44295

    Else
    
        'Insere uma Nota Fiscal Simples de Saida no Banco de Dados
        lErro = CF("NFiscal_Grava_Trans", alComando2(), objNFiscal)
        If lErro <> SUCESSO Then Error 44336
    
    End If

    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objGeracaoNFiscal, MODULO_FATURAMENTO, "FAT", objGeracaoNFiscal.dtContabil, objNFiscal.dtDataSaida)
        If lErro <> SUCESSO Then Error 59386
        
        lErro = objContabAutomatica.GeraContabilizacao(objNFiscal, objPedidoVenda)
        If lErro <> SUCESSO Then Error 44262

        lErro = objContabAutomatica.Finaliza_Contab()
        If lErro <> SUCESSO Then Error 59387
    
    End If
    
    Processa_Gravacao_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Processa_Gravacao_NFiscal:

    Processa_Gravacao_NFiscal = Err
    
    Select Case Err
    
        Case 39002, 44262, 44295, 44335, 44336, 59386, 59387
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149772)

     End Select

     Exit Function
    
End Function

'mario
Private Function Transfere_PV_NF(ByVal objNFiscalInfo As ClassNFiscalInfo, ByVal objNFiscal As ClassNFiscal, objPedidoVenda As ClassPedidoDeVenda) As Long
'transfere os dados do pedido de venda para a nova nota fiscal que está sendo criada

Dim lErro As Long

On Error GoTo Erro_Transfere_PV_NF

    Set objPedidoVenda = New ClassPedidoDeVenda
    
    objPedidoVenda.lCodigo = objNFiscalInfo.lPedido
    objPedidoVenda.iFilialEmpresa = objNFiscalInfo.iFilialEmpresa

    'le e bloqueia o pedido
    lErro = CF("PedidoDeVenda_Le_ComBloqueio", objPedidoVenda)
    If lErro <> SUCESSO Then gError 44172

    If giTipoVersao = VERSAO_FULL Then
        'só pode faturar pedidos direcionados para a filial corrente
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 44185
    
        'verifica se tem bloqueios que impeçam o faturamento
        lErro = PedidoDeVenda_VerificaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 44186 And lErro <> 51525 And lErro <> 94385 Then gError 44187
        If lErro = 44186 Then gError 51451
        If lErro = 51525 Then gError 51526
        If lErro = 94385 Then gError 94386
        
    End If
        
    'copiar dados basicos do PV para NF
    lErro = NFiscal_ExtrairPV(objNFiscal, objPedidoVenda)
    If lErro <> SUCESSO Then gError 44193
    
    If giTipoVersao = VERSAO_LIGHT Then
        lErro = CF("NFiscal_Testa_Credito", objNFiscal)
        If lErro <> SUCESSO And lErro <> 44453 Then gError 62131
        If lErro = 44453 Then gError 62129
        
    End If
    
    Transfere_PV_NF = SUCESSO
    
    Exit Function
    
Erro_Transfere_PV_NF:

    Transfere_PV_NF = gErr
    
    Select Case gErr

        Case 44172, 44187, 44193, 62131, 62129

        Case 44453
            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_FALTACREDITO
            
        Case 44185
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATURAR_PEDIDO_OUTRA_FILIAL", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresaFaturamento, giFilialEmpresa)

        Case 51451
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)
            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_BLOQUEIO

        Case 51526
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO_CREDITO", gErr, objPedidoVenda.lCodigo)
            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_BLOQUEIO_CREDITO

        Case 94386
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO_ATRASO", gErr, objPedidoVenda.lCodigo)
            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_BLOQUEIO_DIAS_ATRASO

        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149773)

     End Select

     Exit Function

End Function

'mario
Private Function Processa_Itens_NFiscal(alComando() As Long, iNumItensAbertos As Integer, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal dValorFaturado As Double, ByVal objMovEstoque As ClassMovEstoque, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'processa a geracao dos itens da Nota Fiscal a partir dos itens do pedido

Dim lErro As Long
Dim iItemNF As Integer
Dim objItemNF As ClassItemNF
Dim objItemPV As ClassItemPedido
Dim dQtdeEmFaltaNoEstoque As Double

Dim objNFiscalInfo As New ClassNFiscalInfo

On Error GoTo Erro_Processa_Itens_NFiscal

    'percorre cada item do pedido
    For Each objItemPV In objPedidoVenda.colItensPedido

        'para pular itens atendidos
        If objItemPV.iStatus = ITEM_PEDVENDA_ABERTO Then

            Set objItemNF = New ClassItemNF

            objItemPV.dQuantAFaturar = objItemPV.dQuantidade - objItemPV.dQuantCancelada - objItemPV.dQuantFaturada

            'o pedido já deveria estar marcado como "atendido"
            If objItemPV.dQuantAFaturar <= 0 Then Error 19354

            'se é um faturamento parcial
            If objItemPV.dQuantFaturada <> 0 Then

                'por enquanto o tratamento de faturamento parcial será realizado pela geração de Nota Fiscal Avulsa
                Error 44324

                '*******************************************************************
                'codigo para futura implantacao do faturamento parcial
                '*******************************************************************
                'lErro = Processa_Faturamento_Parcial1()
                'If lErro <> SUCESSO Then


            End If

            dQtdeEmFaltaNoEstoque = 0
            
            If objItemPV.iPossuiGrade = DESMARCADO Then
                'processa um item do pedido de venda, gerando movimentos de estoque relativos às reservas e excluindo as reservas
                lErro = Processa_Item_PV(alComando(), objItemPV, objItemNF, objMovEstoque, objPedidoVenda, objGeracaoNFiscal, dQtdeEmFaltaNoEstoque)
            Else
                Call Move_ItensGrade_Tela(objItemNF.colItensRomaneioGrade, objItemPV.colItensRomaneioGrade, True)
                lErro = Processa_Item_PV_ComGrade(alComando(), objItemPV, objItemNF, objMovEstoque, objPedidoVenda, objGeracaoNFiscal, dQtdeEmFaltaNoEstoque)
            End If
            If lErro <> SUCESSO And lErro <> 44325 Then Error 44326
            If lErro = 44325 Then Error 25746
            
            'transfere os dados gerais do pedido e a parte de tributacao para o item da nota fiscal que está sendo gerado
            lErro = Gera_Item_NF(dValorFaturado, iNumItensAbertos, iItemNF, objItemPV, objItemNF, objPedidoVenda, dQtdeEmFaltaNoEstoque)
            If lErro <> SUCESSO Then Error 44328
            
            'adiciona o objitemNF que acabou de ser preenchido na colecao de itens de nota fiscal
            objGeracaoNFiscal.objNFiscal.ColItensNF.Add1 objItemNF

        Else

            'significa que já tem pelo menos 1 item faturado ==> faturamento parcial do Pedido ==> a geracao de nfiscal não vai tratar de pedidos parciais por enquanto
            Error 44337

        End If

    Next

    Processa_Itens_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Processa_Itens_NFiscal:

    Processa_Itens_NFiscal = Err
    
    Select Case Err

        Case 19354
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_QAF_ZERO", Err, objItemPV.lCodPedido, objItemPV.sProdutoDescricao)

        Case 25746  'Faltou estoque p/ ítem. A ser tratado na chamadora.

        Case 44324, 44337
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_JA_FATURADO_PARCIALMENTE", Err, objPedidoVenda.lCodigo)
            
        Case 44326, 44328

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149774)

     End Select

     Exit Function
    
End Function

'mario
Private Function Processa_Item_PV(alComando() As Long, ByVal objItemPV As ClassItemPedido, ByVal objItemNF As ClassItemNF, ByVal objMovEstoque As ClassMovEstoque, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, dQtdeEmFaltaNoEstoque As Double) As Long
'processa um item do pedido de venda, gerando movimentos de estoque relativos às reservas e excluindo as reservas

Dim lErro As Long
Dim dFator As Double
Dim objProduto As New ClassProduto
Dim objAlmoxarifado As ClassAlmoxarifado
Dim objReserva As ClassReserva
Dim bReservaUtilizada As Boolean
Dim iIndice As Integer

On Error GoTo Erro_Processa_Item_PV

    objProduto.sCodigo = objItemPV.sProduto
    
    'ler dados do produto
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then Error 44201
    
    'se o produto não estiver cadastrado
    If lErro = 28030 Then Error 44202

    'se item for estoque+reserva ou estoque
    If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then

        'converter qtde a faturar p/UMEstoque do produto
        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemPV.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then Error 44203

        objItemPV.dQuantAFaturar = objItemPV.dQuantAFaturar * dFator
        
        objItemPV.sUMEstoque = objProduto.sSiglaUMEstoque

        'criar as movimentacoes de estoque de reserva
        lErro = GeracaoNFiscal_CriarMovtosEstoque(alComando(), objGeracaoNFiscal, objPedidoVenda, objItemPV, objMovEstoque, dQtdeEmFaltaNoEstoque, objItemNF)
        If lErro <> SUCESSO Then Error 44240

        'se há ainda material a faturar ==> faturamento parcial
        If dQtdeEmFaltaNoEstoque <> 0 Then

            'desfaz a nota fiscal pois não haverá faturamento parcial automático
            Error 44325
            '*******************************************************************
            'codigo para futura implantacao do faturamento parcial
            '*******************************************************************
            'lErro = Processa_Faturamento_Parcial()
            'If lErro <> SUCESSO Then

        Else
            
            'se não há mais quantidade a faturar
                                    
                    
            'retorna a unidade de venda
            objItemPV.dQuantAFaturar = (objItemPV.dQuantAFaturar / dFator)
            
            'excluir as reservas associadas ao item de estoque nos almoxarifados das outras filiais que não seja a de faturamento, que podem ter sobrado
            For Each objReserva In objItemPV.ColReserva
            
                bReservaUtilizada = False
                
                For iIndice = 1 To objItemNF.colAlocacoes.Count
                    If objItemNF.colAlocacoes(iIndice).iAlmoxarifado = objReserva.iAlmoxarifado Then bReservaUtilizada = True
                Next
            
                'verifica se almox pertence a filial do faturamento
                lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReserva.iAlmoxarifado)
                If lErro <> SUCESSO And lErro <> 44234 Then Error 44241

                'se o almoxarifado não pertence à filial do faturamento
                'ou se a utilização da rserva não foi feita
                If lErro = 44234 Or (Not bReservaUtilizada) Then
                    Set objAlmoxarifado = New ClassAlmoxarifado
                    objAlmoxarifado.iCodigo = objReserva.iAlmoxarifado

                    'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
                    lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPV, objAlmoxarifado)
                    If lErro <> SUCESSO Then Error 44242
                    
                End If

            Next

        End If 'se há falta de estoque

    End If 'se for item inventariado

    Processa_Item_PV = SUCESSO

    Exit Function

Erro_Processa_Item_PV:

    Processa_Item_PV = Err

    Select Case Err

        Case 44201, 44203, 44240, 44241, 44242

        Case 44202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)

        Case 44325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", Err, objPedidoVenda.lCodigo)


        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149775)

     End Select

     Exit Function

End Function

'mario
Private Function Gera_Item_NF(dValorFaturado As Double, iNumItensAbertos As Integer, iItemNF As Integer, ByVal objItemPV As ClassItemPedido, ByVal objItemNF As ClassItemNF, ByVal objPedidoVenda As ClassPedidoDeVenda, dQtdeEmFaltaNoEstoque As Double) As Long
'transfere os dados gerais do pedido e a parte de tributacao para o item da nota fiscal que está sendo gerado

Dim lErro As Long

On Error GoTo Erro_Gera_Item_NF

    'incluir o item da NF
    iItemNF = iItemNF + 1
    objItemNF.iItem = iItemNF
    
    objItemNF.lNumIntPedVenda = objPedidoVenda.lNumIntDoc
    
    'se faturou tudo
    If dQtdeEmFaltaNoEstoque = 0 Then

        'atualizar a qtde faturada qdo faturou tudo que faltava do item
        objItemPV.dQuantFaturada = objItemPV.dQuantidade - objItemPV.dQuantCancelada

        objItemPV.iStatus = ITEM_PEDVENDA_ATENDIDO
        iNumItensAbertos = iNumItensAbertos - 1

        dValorFaturado = dValorFaturado + objItemPV.dPrecoTotal

        'transfere os dados do item de pedido de vendas para o item da nota fiscal
        lErro = ItemNF_ExtrairItemPV(objItemNF, objItemPV)
        If lErro <> SUCESSO Then Error 44243
    
        'transfere a tributacao do item de pedido de venda para o item de nota fiscal
        lErro = ItemNFTrib_Obter_ItemPVTrib(objItemNF, objItemPV)
        If lErro <> SUCESSO Then Error 44244


    Else

        Error 44327
        
        '*******************************
        'Em caso de faturamento parcial, que não será tratado por enquanto
        '*******************************

        'atualizar a qtde faturada qdo faturou tudo que faltava do item
        'objItemPV.dQuantFaturada = objItemPV.dQuantidade - objItemPV.dQuantCancelada - dQtdeEmFaltaNoEstoque

        'dValorFaturado = dValorFaturado + (objItemPV.dPrecoTotal * objItemPV.dQuantAFaturar / (objItemPV.dQuantidade - objItemPV.dQuantCancelada))

    End If

    Gera_Item_NF = SUCESSO

    Exit Function

Erro_Gera_Item_NF:

    Gera_Item_NF = Err

    Select Case Err

        Case 44243, 44244

        Case 44327
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", Err, objPedidoVenda.lCodigo)

        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149776)

     End Select

     Exit Function

End Function

'jaques
Private Function PedidoDeVenda_TestaBloqueios(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'verifica se existe bloqueio que impeça o faturamento

Dim lErro As Long
Dim objBloqueioPV As ClassBloqueioPV

On Error GoTo Erro_PedidoDeVenda_TestaBloqueios

    For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
        If objBloqueioPV.dtDataLib = DATA_NULA Then
            If objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_PARCIAL And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_NAO_RESERVA And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_CREDITO Then Error 25741
        End If
    Next
    
    PedidoDeVenda_TestaBloqueios = SUCESSO

    Exit Function

Erro_PedidoDeVenda_TestaBloqueios:

    PedidoDeVenda_TestaBloqueios = Err

    Select Case Err

        Case 25741 'encontrou bloqueio que impede o faturamento
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149777)

     End Select

     Exit Function

End Function

Private Function PedidoDeVenda_VerificaBloqueios(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'verifica se existe bloqueio que impeça o faturamento

Dim lErro As Long
Dim objBloqueioPV As ClassBloqueioPV

On Error GoTo Erro_PedidoDeVenda_VerificaBloqueios

    For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
        If objBloqueioPV.dtDataLib = DATA_NULA Then
            If objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_PARCIAL And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_NAO_RESERVA Then gError 44186
        End If
    Next
    
    ' verifica dias de atraso
    lErro = PedidoDeVenda_VerificaAtraso(objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 94357 Then gError 94334
    If lErro <> SUCESSO Then gError 94385

    'verifica o crédito do cliente para o pedido em questão
    lErro = PedidoDeVenda_VerificaCredito(objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 51468 Then gError 44378
    If lErro <> SUCESSO Then gError 51525
    
    PedidoDeVenda_VerificaBloqueios = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaBloqueios:

    PedidoDeVenda_VerificaBloqueios = gErr

    Select Case gErr

        Case 44186 'encontrou bloqueio que impede o faturamento
        
        Case 44378, 94334

        Case 51525 'a ser tratado na rotina chamadora
        
        Case 94385 'a ser tratado na rotina chamadora
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149778)

     End Select

     Exit Function

End Function


Function PedidoDeVenda_VerificaCredito(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Verifica o crédito do cliente e se necessário adiciona um bloqueio de crédito ao Pedido de Venda passado

Dim lErro As Long
Dim iCreditoAprovado As Integer

On Error GoTo Erro_PedidoDeVenda_VerificaCredito

    'verifica se o pedido tem credito aprovado
    lErro = CF("BloqueiosPV_Credito_Aprovado_Testa", objPedidoVenda, iCreditoAprovado)
    If lErro <> SUCESSO Then Error 44384

    'se não tiver crédito liberado
    If iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Then
    
        'Verifica o crédito do cliente
        lErro = PedidoDeVenda_VerificaCredito2(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 51467 Then Error 44398
        If lErro = 51467 Then Error 51468
        
    End If

    PedidoDeVenda_VerificaCredito = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaCredito:

    PedidoDeVenda_VerificaCredito = Err

    Select Case Err

        Case 44384, 44398
        
        Case 51468

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149779)

    End Select

    Exit Function

End Function

Private Function BloqueioPV_Testa_Credito(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Remove o bloqueio de credito antigo se houver e se o cliente não tiver crédito, Inclui no BD um novo bloqueio de Credito
'Chamada EM TRANSAÇÃO

Dim lErro As Long
Dim objBloqueioPV As New ClassBloqueioPV

On Error GoTo Erro_BloqueioPV_Testa_Credito

    'Exclui bloqueios de Credito com data de liberacao = DATA_NULA
    lErro = CF("BloqueiosPV_Exclui_Credito", objPedidoVenda)
    If lErro <> SUCESSO Then Error 44397

    'Verifica se PedidoDeVenda está dentro do crédito do Cliente
    lErro = PedidoDeVenda_VerificaCredito2(objPedidoVenda)
    
    If lErro <> SUCESSO And lErro <> 51467 Then Error 25744
    'Se estourou limite de crédito do Cliente
    If lErro = 51467 Then

        objBloqueioPV.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
        objBloqueioPV.lPedidoDeVendas = objPedidoVenda.lCodigo
        objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_CREDITO
        objBloqueioPV.sCodUsuario = gsUsuario
        objBloqueioPV.sResponsavel = BLOQUEIO_AUTO_RESP
        objBloqueioPV.dtData = gdtDataHoje
        objBloqueioPV.dtDataLib = DATA_NULA
        
        lErro = CF("BloqueiosPV_Grava1", objPedidoVenda, objBloqueioPV)
        If lErro <> SUCESSO Then Error 44396
        
    End If

    BloqueioPV_Testa_Credito = SUCESSO

    Exit Function

Erro_BloqueioPV_Testa_Credito:

    BloqueioPV_Testa_Credito = Err

    Select Case Err

        Case 44396, 44397, 25744 'tratado nas rotinas chamadas

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149780)

    End Select

    Exit Function

End Function

Private Function PedidoDeVenda_VerificaCredito2(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Testa o Pedido de Venda contra o Credito do Cliente

Dim lComando As Long
Dim lErro As Long
Dim tCliente As typeCliente
Dim objClienteEstatistica As New ClassFilialClienteEst

On Error GoTo Erro_PedidoDeVenda_VerificaCredito2

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44385

    'Lê os saldos e o limite de credito do Cliente
    lErro = Comando_ExecutarPos(lComando, "SELECT LimiteCredito FROM Clientes WHERE Codigo = ?", 0, tCliente.dLimiteCredito, objPedidoVenda.lCliente)
    If lErro <> AD_SQL_SUCESSO Then Error 44386

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44387
    
    If lErro = AD_SQL_SEM_DADOS Then Error 44388 'Não encontrou

    'Faz o lock do Cliente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 44389
    
    objClienteEstatistica.lCodCliente = objPedidoVenda.lCliente
    objClienteEstatistica.iFilialEmpresa = giFilialEmpresa
    
    'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
    lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
    If lErro <> SUCESSO Then Error 52952
            
    'Verifica se soma dos saldos e a soma dos Produtos ultrapassa o limite de Credito do Cliente
    If tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + objPedidoVenda.dValorProdutos) Then
        
        Error 51467

    End If

    Call Comando_Fechar(lComando)

    PedidoDeVenda_VerificaCredito2 = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaCredito2:

    PedidoDeVenda_VerificaCredito2 = Err

    Select Case Err

        Case 44385
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44386, 44387
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", Err)

        Case 44388
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", Err, objPedidoVenda.lCliente)

        Case 44389
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", Err, objPedidoVenda.lCliente)

        Case 52952

        Case 51467 'Tratado na rotina chamadora
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149781)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function
'mario
Private Function ItemNFTrib_Obter_ItemPVTrib(ByVal objItemNF As ClassItemNF, ByVal objItemPV As ClassItemPedido) As Long
'transfere a tributacao do item de pedido de venda para o item de nota fiscal

Dim objTribItemPV As ClassTributacaoItemPV
Dim objTribItemNF As ClassTribItemNF
Dim lErro As Long

On Error GoTo Erro_ItemNFTrib_Obter_ItemPVTrib

    Set objTribItemPV = objItemPV.objTributacaoItemPV
    Set objTribItemNF = New ClassTribItemNF
    Set objItemNF.objTributacaoItemNF = objTribItemNF

    With objTribItemNF

        .dICMSAliquota = objTribItemPV.dICMSAliquota
        .dICMSBase = objTribItemPV.dICMSBase
        .dICMSCredito = 0
        .dICMSPercRedBase = objTribItemPV.dICMSPercRedBase
        .dICMSSubstAliquota = objTribItemPV.dICMSSubstAliquota
        .dICMSSubstBase = objTribItemPV.dICMSSubstBase
        .dICMSSubstValor = objTribItemPV.dICMSSubstValor
        .dICMSValor = objTribItemPV.dICMSValor
        .dIPIAliquota = objTribItemPV.dIPIAliquota
        .dIPIBaseCalculo = objTribItemPV.dIPIBaseCalculo
        .dIPICredito = 0
        .dIPIPercRedBase = objTribItemPV.dIPIPercRedBase
        .dIPIValor = objTribItemPV.dIPIValor
        .iICMSTipo = objTribItemPV.iICMSTipo
        .iIPITipo = objTribItemPV.iIPITipo
        .iItem = objItemNF.iItem
        .iTipoTributacao = objTribItemPV.iTipoTributacao
        .lNumIntDoc = 0 'vai ter que ser setado c/NumIntDoc do ItemNF
        .lNumIntNF = objItemNF.lNumIntNF
        .sIPICodProduto = "" 'obs.: vai ter que ser setado atraves de acesso ao bd qdo da gravacao da nf
        .sNaturezaOp = objTribItemPV.sNaturezaOp

    End With

    ItemNFTrib_Obter_ItemPVTrib = SUCESSO
    
    Exit Function
    
Erro_ItemNFTrib_Obter_ItemPVTrib:

    ItemNFTrib_Obter_ItemPVTrib = Err
    
    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149782)

    End Select

    Exit Function
    
End Function

'mario
Private Function NFiscal_ObterPVTribCompl(ByVal objTribComplNF As ClassTribComplNF, ByVal objTribComplPV As ClassTributacaoItemPV) As Long
'move dados da tributacao de complemento (frete, seguro,...) de PV p/NF

Dim lErro As Long

On Error GoTo Erro_NFiscal_ObterPVTribCompl

    With objTribComplNF

        .dICMSAliquota = objTribComplPV.dICMSAliquota
        .dICMSBase = objTribComplPV.dICMSBase
        .dICMSCredito = 0
        .dICMSPercRedBase = objTribComplPV.dICMSPercRedBase
        .dICMSSubstAliquota = objTribComplPV.dICMSSubstAliquota
        .dICMSSubstBase = objTribComplPV.dICMSSubstBase
        .dICMSSubstValor = objTribComplPV.dICMSSubstValor
        .dICMSValor = objTribComplPV.dICMSValor
        .dIPIAliquota = objTribComplPV.dIPIAliquota
        .dIPIBaseCalculo = objTribComplPV.dIPIBaseCalculo
        .dIPICredito = 0
        .dIPIPercRedBase = objTribComplPV.dIPIPercRedBase
        .dIPIValor = objTribComplPV.dIPIValor
        .iICMSTipo = objTribComplPV.iICMSTipo
        .iIPITipo = objTribComplPV.iIPITipo
        .iTipoTributacao = objTribComplPV.iTipoTributacao
        .lNumIntDoc = 0
        .sNaturezaOp = objTribComplPV.sNaturezaOp

    End With

    NFiscal_ObterPVTribCompl = SUCESSO

    Exit Function

Erro_NFiscal_ObterPVTribCompl:

    NFiscal_ObterPVTribCompl = Err

    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149783)

    End Select

    Exit Function

End Function

'mario
Private Function NFiscal_ExtrairTribDePV(ByVal objNFiscal As ClassNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'gera a parte de tributacao de uma NF a partir de um PV. Nao inclui a parte dos itens

Dim lErro As Long
Dim objTributacaoPV As ClassTributacaoPV
Dim objTributacaoNF As ClassTributacaoNF

On Error GoTo Erro_NFiscal_ExtrairTribDePV

    Set objNFiscal.objTributacaoNF = New ClassTributacaoNF
    Set objTributacaoPV = objPedidoVenda.objTributacaoPV
    Set objTributacaoNF = objNFiscal.objTributacaoNF

    With objTributacaoNF

        .dICMSBase = objTributacaoPV.dICMSBase
        .dICMSCredito = 0
        .dICMSSubstBase = objTributacaoPV.dICMSSubstBase
        .dICMSSubstValor = objTributacaoPV.dICMSSubstValor
        .dICMSValor = objTributacaoPV.dICMSValor
        .dIPIBase = objTributacaoPV.dIPIBase
        .dIPICredito = 0
        .dIPIValor = objTributacaoPV.dIPIValor
        .dIRRFAliquota = objTributacaoPV.dIRRFAliquota
        .dIRRFBase = objTributacaoPV.dIRRFBase
        .dIRRFValor = objTributacaoPV.dIRRFValor
        .dISSAliquota = objTributacaoPV.dISSAliquota
        .dISSBase = objTributacaoPV.dISSBase
        .dISSValor = objTributacaoPV.dISSValor
        .iISSIncluso = objTributacaoPV.iISSIncluso
        .iTipoTributacao = objTributacaoPV.iTipoTributacao
        .sNaturezaOpInterna = objPedidoVenda.sNaturezaOp
        .dPISRetido = objTributacaoPV.dPISRetido
        .dCOFINSRetido = objTributacaoPV.dCOFINSRetido
        .dCSLLRetido = objTributacaoPV.dCSLLRetido

    End With

    Set objTributacaoNF.objTributacaoDesconto = New ClassTribComplNF
    
    lErro = NFiscal_ObterPVTribCompl(objTributacaoNF.objTributacaoDesconto, objTributacaoPV.objTributacaoDesconto)
    If lErro <> SUCESSO Then Error 44188
    objTributacaoNF.objTributacaoDesconto.iTipo = ITEM_TIPO_DESCONTO

    Set objTributacaoNF.objTributacaoFrete = New ClassTribComplNF
    
    Call NFiscal_ObterPVTribCompl(objTributacaoNF.objTributacaoFrete, objTributacaoPV.objTributacaoFrete)
    If lErro <> SUCESSO Then Error 44189
    objTributacaoNF.objTributacaoFrete.iTipo = ITEM_TIPO_FRETE

    Set objTributacaoNF.objTributacaoOutras = New ClassTribComplNF
    
    Call NFiscal_ObterPVTribCompl(objTributacaoNF.objTributacaoOutras, objTributacaoPV.objTributacaoOutras)
    If lErro <> SUCESSO Then Error 44190
    objTributacaoNF.objTributacaoOutras.iTipo = ITEM_TIPO_OUTRAS_DESP

    Set objTributacaoNF.objTributacaoSeguro = New ClassTribComplNF
    
    Call NFiscal_ObterPVTribCompl(objTributacaoNF.objTributacaoSeguro, objTributacaoPV.objTributacaoSeguro)
    If lErro <> SUCESSO Then Error 44191
    objTributacaoNF.objTributacaoSeguro.iTipo = ITEM_TIPO_SEGURO

    NFiscal_ExtrairTribDePV = SUCESSO

    Exit Function

Erro_NFiscal_ExtrairTribDePV:

    NFiscal_ExtrairTribDePV = Err

    Select Case Err

        Case 44188, 44189, 44190, 44191

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149784)

    End Select

    Exit Function

End Function

'mario
Private Function NFiscal_ExtrairPV(ByVal objNFiscal As ClassNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'copiar dados basicos do PV para NF

Dim lErro As Long

On Error GoTo Erro_NFiscal_ExtrairPV

    'copiar dados PV->NF
    With objNFiscal

        .dValorDesconto = objPedidoVenda.dValorDesconto
        .dValorFrete = objPedidoVenda.dValorFrete
        .dValorOutrasDespesas = objPedidoVenda.dValorOutrasDespesas
        .dValorProdutos = objPedidoVenda.dValorProdutos
        .iFilialPedido = objPedidoVenda.iFilialEmpresa
        .dtDataEntrada = DATA_NULA
        .lNumPedidoVenda = objPedidoVenda.lCodigo
        .dValorSeguro = objPedidoVenda.dValorSeguro
        .dValorTotal = objPedidoVenda.dValorTotal
        .iCanal = objPedidoVenda.iCanalVenda
        .iCodTransportadora = objPedidoVenda.iCodTransportadora
        .iCodTranspRedesp = objPedidoVenda.iCodTranspRedesp
        .iDetPagFrete = objPedidoVenda.iDetPagFrete
        .iFilialCli = objPedidoVenda.iFilial
        .iFilialEmpresa = objPedidoVenda.iFilialEmpresaFaturamento
        .iFilialEntrega = objPedidoVenda.iFilialEntrega
        .iStatus = STATUS_LANCADO
        .iTabelaPreco = objPedidoVenda.iTabelaPreco
        .lCliente = objPedidoVenda.lCliente
        .sNumPedidoTerc = objPedidoVenda.sPedidoCliente
        .sMensagemNota = objPedidoVenda.sMensagemNota
        .sNaturezaOp = objPedidoVenda.sNaturezaOp
        .dPesoLiq = objPedidoVenda.dPesoLiq
        .dPesoBruto = objPedidoVenda.dPesoBruto
        .sPlaca = objPedidoVenda.sPlaca
        .sPlacaUF = objPedidoVenda.sPlacaUF
        .lVolumeQuant = objPedidoVenda.lVolumeQuant
        .lVolumeEspecie = objPedidoVenda.lVolumeEspecie
        .lVolumeMarca = objPedidoVenda.lVolumeMarca
        .sVolumeNumero = objPedidoVenda.sVolumeNumero
        .iFreteRespons = objPedidoVenda.iFreteRespons
        .dtDataReferencia = objPedidoVenda.dtDataReferencia
        .iMoeda = objPedidoVenda.iMoeda
        .dTaxaMoeda = 1
        .dVolumeTotal = 0
        .iSemDataSaida = 0
    End With

    lErro = NFiscal_ExtrairTribDePV(objNFiscal, objPedidoVenda)
    If lErro <> SUCESSO Then Error 44192

    NFiscal_ExtrairPV = SUCESSO

    Exit Function

Erro_NFiscal_ExtrairPV:

    NFiscal_ExtrairPV = Err

    Select Case Err

        Case 44192

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149785)

    End Select

    Exit Function

End Function

'mario
Private Function ItemNF_ExtrairItemPV(ByVal objItemNF As ClassItemNF, ByVal objItemPV As ClassItemPedido) As Long

Dim lErro As Long
Dim colAlocacoes As ColAlocacoesItemNF
Dim objReserva As ClassReserva

On Error GoTo Erro_ItemNF_ExtrairItemPV

    With objItemNF

        .dPercDesc = objItemPV.dValorDesconto / (objItemPV.dPrecoUnitario * (objItemPV.dQuantidade - objItemPV.dQuantCancelada))
        .dPrecoUnitario = objItemPV.dPrecoUnitario
        .dQuantidade = objItemPV.dQuantAFaturar
        .dtDataEntrega = objItemPV.dtDataEntrega
        .dValorAbatComissao = objItemPV.dValorAbatComissao
        .dValorDesconto = objItemPV.dValorDesconto
        .iAlmoxarifado = 0 'só preenchido para NF de entrada
        .lNumIntDocOrig = 0 'só preenchido em devolução
        .lNumNFOrig = 0 'só preenchido em devolução
        .sSerieNFOrig = "" 'só preenchido em devolução
        .iItemNFOrig = 0 'só preenchido em devolução
        .iStatus = STATUS_LANCADO
        .lNumIntDoc = 0 'numero interno deste registro. Preenchido posteriormente.
        .lNumIntItemPedVenda = objItemPV.lNumIntDoc
        .lNumIntNF = 0 'numero interno da nota fiscal. Preenchido posteriormente.
        .sDescricaoItem = objItemPV.sProdutoDescricao
        .sProduto = objItemPV.sProduto
        .sUMEstoque = objItemPV.sUMEstoque
        .sUnidadeMed = objItemPV.sUnidadeMed

    End With

    ItemNF_ExtrairItemPV = SUCESSO
    
    Exit Function
    
Erro_ItemNF_ExtrairItemPV:

    ItemNF_ExtrairItemPV = Err
    
    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149786)

    End Select

    Exit Function
    
End Function

'mario
Private Function GeracaoNFiscal_CriarMovtosEstoque(alComando() As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF) As Long
'cria os movimentos de estoque correspondentes a um item de pedido de venda
'Somente as reservas feitas em almoxarifados da filial que vai faturar poderao ser utilizadas
'   para estas reservas, se usadas, deverao ser criados movtos que retiram diretamente da qtde reservada
'primeiro tenta retirar do almoxarifado padrao, se nao der, dos outros com reserva e depois nos outros almoxarifados da filial
'vai mantendo numa colecao os almoxarifados percorridos

Dim lErro As Long
Dim colAlmoxPercorridos As New Collection
Dim iAlmoxarifadoPadrao As Integer
Dim objAlmoxarifado As New ClassAlmoxarifado
Dim objReserva As ClassReserva
Dim objProdutoFilial As New ClassProdutoFilial
Dim iIndice1 As Integer
Dim iIndice2 As Integer


On Error GoTo Erro_GeracaoNFiscal_CriarMovtosEstoque

    dQtdeEmFaltaNoEstoque = objItemPV.dQuantAFaturar

    objProdutoFilial.iFilialEmpresa = objPedidoVenda.iFilialEmpresaFaturamento
    objProdutoFilial.sProduto = objItemPV.sProduto
    
    'obter o almox padrao p/(produto, FilialEmpresaFaturamento)
    lErro = CF("ProdutoFilial_Le2", alComando(2), objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 44208 Then Error 44209
    
    'Se não encontrou o almoxarifado padrão do produto/filialempresaFaturamento
    If lErro = 44208 Or objProdutoFilial.iAlmoxarifado = 0 Then
    
        'pega o almoxarifado padrao da filial
        iAlmoxarifadoPadrao = objGeracaoNFiscal.iAlmoxarifadoPadrao
        
    Else
    
        'se encontrou o almoxarifado padrao
        iAlmoxarifadoPadrao = objProdutoFilial.iAlmoxarifado
        
    End If
    
    'se há um almoxarifado padrão ==> retira material do almoxarifado padrao
    If iAlmoxarifadoPadrao <> 0 Then

        objAlmoxarifado.iCodigo = iAlmoxarifadoPadrao
        
        'cria movtos de estoque retirando material do almoxarifado padrao
        lErro = GeracaoNFiscal_PercorreAlmox(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF)
        If lErro <> SUCESSO Then Error 44233

    End If

    'percorrer os almoxarifados das outras reservas
    If dQtdeEmFaltaNoEstoque > 0 Then
        For Each objReserva In objItemPV.ColReserva
    
            If iAlmoxarifadoPadrao <> objReserva.iAlmoxarifado Then
    
                'verifica se almox pertence a filial faturamento
                lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReserva.iAlmoxarifado)
                If lErro <> SUCESSO And lErro <> 44234 Then Error 44235
    
                'se o almoxarifado pertence à filial de faturamento
                If lErro = SUCESSO Then
                    Set objAlmoxarifado = New ClassAlmoxarifado
                    
                    objAlmoxarifado.iCodigo = objReserva.iAlmoxarifado
                    
                    'cria movtos de estoque retirando material deste almoxarifado
                    lErro = GeracaoNFiscal_PercorreAlmox(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF)
                    If lErro <> SUCESSO Then Error 44236
    
                End If
    
            End If
    
        Next
    End If

    If dQtdeEmFaltaNoEstoque > 0 Then
        'percorrer os almoxarifados da filial
        For Each objAlmoxarifado In objGeracaoNFiscal.colAlmoxFilial
    
            'verifica se almoxarifado já foi verificado acima
            lErro = Almoxarifado_NaColecao(colAlmoxPercorridos, objAlmoxarifado.iCodigo)
            If lErro <> SUCESSO And lErro <> 44234 Then Error 44239
            
            'se o almoxarifado ainda não foi verificado
            If lErro = 44234 Then
    
                'cria movtos de estoque retirando material deste almoxarifado
                lErro = GeracaoNFiscal_PercorreAlmox(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF)
                If lErro <> SUCESSO Then Error 44238
    
            End If
    
        Next
    End If
    
    GeracaoNFiscal_CriarMovtosEstoque = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_CriarMovtosEstoque:

    GeracaoNFiscal_CriarMovtosEstoque = Err

    Select Case Err

        Case 44209, 44233, 44235, 44236, 44238, 44239

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149787)

    End Select

    Exit Function

End Function

'mario
Private Function GeracaoNFiscal_PercorreAlmox(alComando() As Long, ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, ByVal colAlmoxPercorridos As Collection, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF) As Long
'cria os movtos de estoque retirando material da qtde reservada, disp nossa e consig3 para atender a qtde demandada

Dim lErro As Long
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dQtde As Double
Dim dQuantReserva As Double
Dim dQuantAloc As Double
Dim objItemNFAloc As ClassItemNFAlocacao

On Error GoTo Erro_GeracaoNFiscal_PercorreAlmox

    'obter qtde reservada neste almoxarifado correspondente ao item do pv
    lErro = CF("ItemPV_ObtemQtdeReservaAlmox", objItemPV, objAlmoxarifado.iCodigo, dQuantReserva)
    If lErro <> SUCESSO Then Error 44221

    'se houve reserva para o almoxarifado em questão
    If dQuantReserva <> 0 Then

        'se há quantidade a faturar
        If dQtdeEmFaltaNoEstoque <> 0 Then

            'se a quantidade a faturar for menor que a quantidade reservada
            If dQtdeEmFaltaNoEstoque <= dQuantReserva Then
                
                'esta será a quantidade da reserva a ser utilizada
                dQtde = dQtdeEmFaltaNoEstoque
            Else
                'se a quantidade faturada for maior que a quantidade reservada, toda a reserva será utilizada
                dQtde = dQuantReserva
            End If

            'Utiliza a reserva, ou seja, serão gerados movimentos de utilização e possivelmente cancelamento do que não foi utilizado. Além disso a reserva é excluida
            lErro = CF("Reserva_Utilizar", alComando(3), alComando(4), objMovEstoque, objItemPV, objAlmoxarifado, dQtde)
            If lErro <> SUCESSO Then Error 44220

            'ainda falta esta parte para faturar
            dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
            dQuantAloc = dQtde
    
        Else

            'se não há quantidade a faturar
            'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
            lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPV, objAlmoxarifado)
            If lErro <> SUCESSO Then Error 44226

        End If

    End If

    'se ainda há quantidade a faturar
    If dQtdeEmFaltaNoEstoque <> 0 Then

        objEstoqueProduto.sProduto = objItemPV.sProduto
        objEstoqueProduto.iAlmoxarifado = objAlmoxarifado.iCodigo
        
        'ler a tabela estoqueproduto e fazer lock exclusivo
        lErro = CF("EstoqueProduto_Le_Exclusivo", alComando(7), objEstoqueProduto)
        If lErro <> SUCESSO And lErro <> 44229 Then Error 44231

        If lErro = SUCESSO Then

            'retirar quanto possivel deste almoxarifado
            If objEstoqueProduto.dQuantDisponivel > 0 Then
    
                'se a quantidade que ainda tem a faturar for menor que a quantidade disponivel no almoxarifado
                If dQtdeEmFaltaNoEstoque <= objEstoqueProduto.dQuantDisponivel Then
                
                    'faturar tudo
                    dQtde = dQtdeEmFaltaNoEstoque
                    
                Else
                    
                    'senão, faturar só o que está disponível
                    dQtde = objEstoqueProduto.dQuantDisponivel
                    
                End If
    
                'esta é a quantidade que ainda falta faturar
                dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
                
                dQuantAloc = dQuantAloc + dQtde
            End If

        End If
    
    End If

    If dQuantAloc > 0 Then
        Set objItemNFAloc = objItemNF.colAlocacoes.Add(objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, dQuantAloc)
        objItemNFAloc.sUnidadeMed = objItemPV.sUMEstoque
    End If
        
        
    'inclui-lo em colAlmoxPercorridos
    colAlmoxPercorridos.Add objAlmoxarifado

    GeracaoNFiscal_PercorreAlmox = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_PercorreAlmox:

    GeracaoNFiscal_PercorreAlmox = Err

    Select Case Err

        Case 44220, 44221, 44226, 44231

        Case 44232
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEPRODUTO_NAO_CADASTRADO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149788)

    End Select

    Exit Function

End Function

'mario
Private Function Almoxarifado_NaColecao(ByVal colAlmoxarifados As Collection, ByVal iAlmoxarifado As Integer) As Long
'retorna se iAlmoxarifado está em colAlmoxarifados que contem objAlmoxarifados com codigo e nome reduzido

Dim lErro As Long
Dim objAlmoxarifado As ClassAlmoxarifado
Dim iAchou As Integer

On Error GoTo Erro_Almoxarifado_NaColecao

    iAchou = 0

    'pesquisa o almoxarifado na colecao
    For Each objAlmoxarifado In colAlmoxarifados

        'se encontrou o almoxarifado
        If objAlmoxarifado.iCodigo = iAlmoxarifado Then

            iAchou = 1
            Exit For

        End If

    Next

    'se não encontrou o almoxarifado na colecao
    If iAchou = 0 Then Error 44234
    
     Almoxarifado_NaColecao = SUCESSO

    Exit Function

Erro_Almoxarifado_NaColecao:

    Almoxarifado_NaColecao = Err

    Select Case Err

        Case 44234

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149789)

    End Select

    Exit Function

End Function

'mario
Private Function Cliente_AtualizarSaldoPedidos(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal lCliente As Long, ByVal dValor As Double) As Long
'Atualizar o saldo dos pedidos liberados na tabela de clientes
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO
'dValor é somado ao saldo nao faturado em pedidos de venda
'quando esta funcao for chamada para registrar o faturamento de um pedido, dValor deve ser negativo

Dim lErro As Long
Dim dSaldoAnterior As Double

On Error GoTo Erro_Cliente_AtualizarSaldoPedidos

    lErro = Comando_ExecutarPos(lComando1, "SELECT SaldoPedidosLiberados FROM Clientes WHERE Codigo = ?", 0, dSaldoAnterior, lCliente)
    If lErro <> AD_SQL_SUCESSO Then Error 44329

    lErro = Comando_BuscarProximo(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44330

    If lErro <> AD_SQL_SUCESSO Then Error 44331

    lErro = Comando_ExecutarPos(lComando2, "UPDATE Clientes SET SaldoPedidosLiberados = SaldoPedidosLiberados + ?", lComando1, dValor)
    If lErro <> AD_SQL_SUCESSO Then Error 44332

    Cliente_AtualizarSaldoPedidos = SUCESSO

    Exit Function

Erro_Cliente_AtualizarSaldoPedidos:

    Cliente_AtualizarSaldoPedidos = Err

    Select Case Err

        Case 44329, 44330
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", Err, lCliente)

        Case 44331
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", Err, lCliente)

        Case 44332
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", Err, lCliente)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149790)

    End Select

    Exit Function

End Function

'mario
Function GeracaoNFiscal_GerarNFs(ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'gera as notas fiscais a partir dos pedidos selecionados.

Dim lErro As Long
Dim alComando(1 To 10) As Long, iIndice As Integer
Dim objFilialEmpresa As New AdmFiliais
Dim objNFiscalInfo As ClassNFiscalInfo
Dim alComando1(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim alComando2(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
Dim alComando3(1 To 28) As Long
Dim alComando4(1 To 2) As Long

On Error GoTo Erro_GeracaoNFiscal_GerarNFs

    'abrir comandos
    lErro = GeracaoNFiscal_Abrir_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())
    If lErro <> SUCESSO Then gError 51436

    'obtém os almoxarifados da filial que está faturando, o almoxarifado padrao e os códigos das transacoes: pedido e geracao de nota fiscal
    lErro = GeracaoNFiscal_GerarNF1(alComando(1), objGeracaoNFiscal, objFilialEmpresa)
    If lErro <> SUCESSO Then gError 44319

    For Each objNFiscalInfo In objGeracaoNFiscal.colNFiscalInfo
        
        'se o pedido estiver marcado para gerar a nota fiscal
        If objNFiscalInfo.iMarcada = MARCADO Then
        
            'processa a geração da nota fiscal a partir do pedido
            lErro = Processa_Geracao_NFiscal(alComando(), alComando1(), alComando2(), alComando3(), alComando4(), objNFiscalInfo, objGeracaoNFiscal)
            If lErro <> SUCESSO Then
                
                If lErro = 51452 Then objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_FALTAESTOQUE
                                                
                'Trecho incluido por leo em 22/02/02
                If objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_BLOQUEIO_DIAS_ATRASO Then
                    'Inclui o bloqueio por atraso de pagamento no Pedido
                    lErro = PedidoVenda_Inclui_BloqueioAtraso(objNFiscalInfo.lPedido, objNFiscalInfo.iFilialEmpresa)
                    If lErro <> SUCESSO Then gError 94338
                
                End If
                
                If objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_BLOQUEIO_CREDITO Then
                    'Inclui o bloqueio de crédito no Pedido
                    lErro = PedidoVenda_Inclui_BloqueioCredito(objNFiscalInfo.lPedido, objNFiscalInfo.iFilialEmpresa)
                    If lErro <> SUCESSO Then gError 51527
                    
                End If
                                
                If objNFiscalInfo.iMotivoNaoGerada = 0 Then objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_OUTROS
                
            End If
            
            Call GeracaoNFiscal_Fechar_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())

            lErro = GeracaoNFiscal_Abrir_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())
            If lErro <> SUCESSO Then gError 51436
                
        End If
        
    Next

    Call GeracaoNFiscal_Fechar_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())

    GeracaoNFiscal_GerarNFs = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_GerarNFs:

    GeracaoNFiscal_GerarNFs = gErr

    Select Case gErr

        Case 19342, 19355, 19356, 19362, 44172, 44193, 44319, 51436, 51527, 94338

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149791)

    End Select

    'fechar comandos
    Call GeracaoNFiscal_Fechar_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())
    
    Exit Function

End Function



'mario
Private Function GeracaoNFiscal_GerarNF1(ByVal lComando As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, ByVal objFilialEmpresa As AdmFiliais) As Long
'obtem os almoxarifados da filial que está faturando, o almoxarifado padrao e os codigos das transacoes: pedido e geracao de nota fiscal

Dim lErro As Long
Dim objTransacaoCTB As New ClassTransacaoCTB

On Error GoTo Erro_GeracaoNFiscal_GerarNF1

    If Len(Trim(objGeracaoNFiscal.sSerie)) = 0 Then Error 44196

    'obter colecao de almoxarifados que pertencem a filial que está faturando pois somente poderá ser retirado material destes almoxarifados
    Set objGeracaoNFiscal.colAlmoxFilial = New Collection
    
    lErro = CF("Almoxarifados_Le_FilialEmpresa", giFilialEmpresa, objGeracaoNFiscal.colAlmoxFilial)
    If lErro <> SUCESSO Then Error 44166
    
    objFilialEmpresa.iCodFilial = giFilialEmpresa
    
    'le o almoxarifadopadrao associado à Filial
    lErro = CF("FilialEmpresa_Le1", lComando, objFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 44212 Then Error 44214

    If lErro = SUCESSO Then objGeracaoNFiscal.iAlmoxarifadoPadrao = objFilialEmpresa.iAlmoxarifadoPadrao

    'descobre o codigo da transacao associada à tela de pedido de geração de nota fiscal(esta tela)
    objTransacaoCTB.sSigla = MODULO_FATURAMENTO
    
    'De acordo com o Tipo de Nota que está sendo Gerada
    If objGeracaoNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Then
        objTransacaoCTB.sTransacao = "NFiscalFaturaPedido"
    Else
        objTransacaoCTB.sTransacao = "NFiscalPedido"
    End If
    
    lErro = CF("TransacaoCTB_Le1", objTransacaoCTB)
    If lErro <> SUCESSO Then Error 44261

    objGeracaoNFiscal.iTransacaoGerNFiscal = objTransacaoCTB.iCodigo
    
    GeracaoNFiscal_GerarNF1 = SUCESSO
    
    Exit Function
    
GeracaoNFiscal_GerarNF1:

    Exit Function

Erro_GeracaoNFiscal_GerarNF1:

    GeracaoNFiscal_GerarNF1 = Err

    Select Case Err
    
        Case 44166, 44214, 44261
        
        Case 44196
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_PREENCHIDA", Err)
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149792)

     End Select

     Exit Function

End Function

'mario
Private Function Processa_Geracao_NFiscal(alComando() As Long, alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long, ByVal objNFiscalInfo As ClassNFiscalInfo, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'processa a geração da nota fiscal a partir do pedido

'*** Alterada em 05/03/02 por Luiz Nogueira ***
'*** ClassNFiscal teve o tipo de ColComissoesNF alterado, por isso foi necessário adicionar
'os dados lidos a um obj e depois adicionar o obj à coleção ***

'Alterada em 28/03 por Tulio: Guardando o campo Direto/Indireto no obj

Dim lErro As Long
Dim objNFiscal As New ClassNFiscal
Dim objPedidoVenda As ClassPedidoDeVenda
Dim lNumAuto As Long
Dim lTransacao As Long
Dim dValorFaturado As Double
Dim objMovEstoque As ClassMovEstoque
Dim iNumItensAbertos As Integer
Dim objComissaoPV As ClassComissaoPedVendas
Dim objComissaoNF As ClassComissaoNF
Dim objParcelaPV As ClassParcelaPedidoVenda
Dim colDataVencimento As New Collection, objCondicaoPagto As New ClassCondicaoPagto, iIndice As Integer
Dim objRelatorio As New AdmRelatorio
Dim ColDesconto As ColDesconto
Dim iIndice2 As Integer

On Error GoTo Erro_Processa_Geracao_NFiscal

    'se o pedido estiver marcado para gerar a nota fiscal
    If objNFiscalInfo.iMarcada = MARCADO Then

        'abre transacao
        lTransacao = Transacao_Abrir()
        If lTransacao = 0 Then gError 44184
        
        objNFiscal.iTipoNFiscal = objGeracaoNFiscal.iTipoNFiscal
        
        'transfere os dados do pedido de venda para a nova nota fiscal que está sendo criada
        lErro = Transfere_PV_NF(objNFiscalInfo, objNFiscal, objPedidoVenda)
        If lErro <> SUCESSO Then gError 44323

        Set objGeracaoNFiscal.objNFiscal = objNFiscal

        objNFiscal.sSerie = objGeracaoNFiscal.sSerie

        objNFiscal.lNumNotaFiscal = lNumAuto
        
        objNFiscal.dtDataEmissao = gdtDataAtual
        
        objNFiscal.dtDataSaida = objGeracaoNFiscal.dtDataSaida
        
        objNFiscal.dtHoraSaida = Time
            
        objNFiscal.iTipoNFiscal = objGeracaoNFiscal.iTipoNFiscal
        
        objNFiscal.dtDataVencimento = DATA_NULA

        Set objMovEstoque = New ClassMovEstoque
        
        objMovEstoque.dtData = gdtDataAtual
        objMovEstoque.dtHora = objNFiscal.dtHoraSaida
        objMovEstoque.iFilialEmpresa = giFilialEmpresa

        iNumItensAbertos = objPedidoVenda.colItensPedido.Count
        
        dValorFaturado = 0

        'Lê as Reservas do pedido
        lErro = CF("ReservasPedido_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 44376

        'processa a geracao dos itens da Nota Fiscal a partir dos itens do pedido
        lErro = Processa_Itens_NFiscal(alComando(), iNumItensAbertos, objPedidoVenda, dValorFaturado, objMovEstoque, objGeracaoNFiscal)
        If lErro <> SUCESSO And lErro <> 25746 Then gError 44321
        If lErro = 25746 Then gError 51452

        'Transfere os dados das comissões do pedido para a coleção de coissões da Nota Fiscal
        For Each objComissaoPV In objPedidoVenda.colComissoes
            
            With objComissaoPV
                
                'Instancia um novo objComissaoNF
                Set objComissaoNF = New ClassComissaoNF
                
                'Transfere os dados do objComissaoPV para o objComissaoNF
                objComissaoNF.iCodVendedor = .iCodVendedor
                objComissaoNF.dValorBase = .dValorBase
                objComissaoNF.dPercentual = .dPercentual
                objComissaoNF.dValor = .dValor
                objComissaoNF.dPercentualEmissao = .dPercentualEmissao
                objComissaoNF.dValorEmissao = .dValorEmissao
                objComissaoNF.iIndireta = .iIndireta
                
            End With
                    
            'Adiciona o objComissaoNF à coleção
            objNFiscal.ColComissoesNF.Add objComissaoNF
        Next

        'se estiver gerando uma nota fiscal fatura
        If objGeracaoNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Then
          
            objNFiscal.iCondicaoPagto = objPedidoVenda.iCondicaoPagto
            objNFiscal.dtDataReferencia = objPedidoVenda.dtDataReferencia
            
            If objPedidoVenda.colParcelas.Count = 0 Then gError 44399
          
            'Gera parcelas de NF a partir das parcelas de PV
            lErro = ParcelasPV_Gerando_ParcelasNF(objPedidoVenda, objNFiscal)
            If lErro <> SUCESSO Then gError 25745
            
        End If
            
        'se todos os itens foram atendidos pode baixar o pedido
        If iNumItensAbertos = 0 Then

            'processa a gravacao da Nota Fiscal e a Baixa do Pedido
            lErro = Processa_Gravacao_NFiscal(alComando1(), alComando2(), alComando3(), alComando4(), objPedidoVenda, dValorFaturado, objMovEstoque, objNFiscal, objGeracaoNFiscal)
            If lErro <> SUCESSO Then gError 44334
            
            lErro = ItensPV_AtualizaQuantFaturada(alComando4(1), alComando4(2), objNFiscal)
            If lErro <> SUCESSO Then gError 69118
        
            lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
            If lErro <> SUCESSO Then gError 51464
        
            'Grava a Estatística do Cliente
            lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
            If lErro <> SUCESSO Then gError 64165
            
            'Grava a Estatística do Produto Vendido
            lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
            If lErro <> SUCESSO Then gError 64166
        
            'baixa o pedido de venda
            lErro = CF("PedidoDeVenda_Baixar1", alComando3(), objPedidoVenda, FATURA_TUDO)
            If lErro <> SUCESSO Then gError 44297
        
        Else

            gError 44318
            '**************** PROXIMA VERSAO **********************
            'percorrer todos os itens c/qtde a faturar <> 0 atualizando qtde faturada e status
            'lErro = PedidoDeVenda_AtualizarFat(objPedidoVenda)
            'if lErro <> SUCESSO then error
            '******************************************************

        End If

        lErro = Transacao_Commit()
        If lErro <> SUCESSO Then gError 19341
        
        objNFiscalInfo.iMotivoNaoGerada = 0
    
    End If

    Processa_Geracao_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Processa_Geracao_NFiscal:

    Processa_Geracao_NFiscal = gErr
    
    Select Case gErr

        Case 19341
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 25745, 44245, 44321, 44323, 44334, 44376, 51464, 59143, 59144, 51613, 64165, 64166, 69118, 44297
        
        Case 44184
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 44318
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", gErr, objPedidoVenda.lCodigo)
        
        Case 44399
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_SEM_COBRANCA", gErr, objPedidoVenda.lCodigo)
        
        Case 51452 'falta de estoque p/ ítem. A ser tratado na chamadora.
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149793)

     End Select

     Call Transacao_Rollback

     Exit Function
    
End Function

'mario
Function NFiscalSaidaNum_Automatico(ByVal sSerie As String, lNumAuto As Long) As Long
'Retorna o número do próximo NumNFiscal disponivel

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalSaidaNum_Automatico

    lTransacao = Transacao_Abrir()
    
    If lTransacao = 0 Then Error 39006

    lErro = NFiscalSaidaNum_Automatico_EmTrans(sSerie, lNumAuto)
    If lErro <> SUCESSO Then Error 51358
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 39007

    NFiscalSaidaNum_Automatico = SUCESSO

    Exit Function

Erro_NFiscalSaidaNum_Automatico:

    NFiscalSaidaNum_Automatico = Err

    Select Case Err

        Case 51358
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149794)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function NFiscalSaidaNum_Automatico_EmTrans(ByVal sSerie As String, lNumAuto As Long) As Long
'ATENÇÃO: Essa rotina deve ser chamada em transação
'Retorna o número do próximo NumNFiscal disponivel

Dim lComando As Long
Dim lComando1 As Long
Dim lErro As Long
Dim lNumNFiscal As Long
Dim lNumNFiscalUsado As Long
Dim iFim_de_Arquivo As Integer

On Error GoTo Erro_NFiscalSaidaNum_Automatico_EmTrans

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 30577

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 30579

    'Pesquisa o número do NumNFiscal gerado automaticamente pelo sistema
    lErro = Comando_ExecutarPos(lComando, "SELECT ProxNumNFiscal FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, lNumNFiscal, sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 30582

    'le o registro com o número do NumNFiscal automático
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30583

    'loca o registro que guarda o numero do NumNFiscal gerado automaticamente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30584
   
    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de NumNFiscal maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando1, "SELECT NFiscal.NumNotaFiscal FROM NFiscal, TiposDocInfo WHERE NFiscal.NumNotaFiscal >= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Tipo = ? AND NFiscal.Serie = ? ORDER BY NumNotaFiscal", lNumNFiscalUsado, lNumNFiscal, DOCINFO_NF_INT_SAIDA, sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 30585

    'le o primeiro codigo >= ao codigo automatico
    iFim_de_Arquivo = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42761

    'pesquisa o proximo número de codigo disponível
    Do While iFim_de_Arquivo <> AD_SQL_SEM_DADOS

        If lNumNFiscal < lNumNFiscalUsado Then Exit Do

        If lNumNFiscalUsado = lNumNFiscal Then
            lNumNFiscal = lNumNFiscal + 1
        End If

        iFim_de_Arquivo = Comando_BuscarProximo(lComando1)
        If iFim_de_Arquivo <> AD_SQL_SUCESSO And iFim_de_Arquivo <> AD_SQL_SEM_DADOS Then Error 42760
        
    Loop

    'Valor de retorno da funcao
    lNumAuto = lNumNFiscal

    lNumNFiscal = lNumNFiscal + 1

    'atualiza o numero do NumNFiscal gerado automaticamente
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET ProxNumNFiscal = ?", lComando, lNumNFiscal)
    If lErro <> AD_SQL_SUCESSO Then Error 30586

    Call Comando_Unlock(lComando)
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    NFiscalSaidaNum_Automatico_EmTrans = SUCESSO

    Exit Function

Erro_NFiscalSaidaNum_Automatico_EmTrans:

    NFiscalSaidaNum_Automatico_EmTrans = Err

    Select Case Err

        Case 30577, 30579
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 30582, 30583
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case 30584
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", Err)

        Case 30585, 42760, 42761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL4", Err)

        Case 30586
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149795)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'mario
Function NFiscal_Grava_Trans(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'grava a nota fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lNumIntDoc As Long
Dim vbMsgRes As VbMsgBoxResult
Dim alComando1(1 To 12) As Long
Dim alComando2(1 To NUM_MAX_LCOMANDO_MOVESTOQUE + 42) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscal_Grava_Trans

    'copia alguns alComando para alComando1
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = alComando(iIndice)
    Next

    'copia alguns alComando para alComando2
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = alComando(iIndice + UBound(alComando1))
    Next

    'executa o lock dos registros associados a nota fiscal.
    lErro = CF("NFiscal_Lock_Gravacao", alComando1(), objNFiscal)
    If lErro <> SUCESSO Then Error 35972

    'Insere uma Nota Fiscal de Saida no Banco de Dados
    lErro = NFiscal_Grava_BD(alComando2(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61400 Then Error 39003

    'Tratar a gravação da contabilidade
    If lErro = 61400 Then Error 61403
    
    NFiscal_Grava_Trans = SUCESSO

    Exit Function

Erro_NFiscal_Grava_Trans:

    NFiscal_Grava_Trans = Err

    Select Case Err

        Case 35963, 35964
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL2", Err, objNFiscal.iTipoNFiscal, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 35972, 39003, 42759

        Case 61403 'Tratar a gravação da contabilidade
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149796)

    End Select

    Exit Function

End Function

'mario
Public Function NFiscal_Lock_Gravacao(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'executa o lock dos registros associados a nota fiscal.

Dim lErro As Long
Dim iIndice As Long
Dim sNome As String
Dim sDescricao As String
Dim iCodigo As Integer
Dim iFilialEmpresa As Integer
Dim objItemNF As ClassItemNF
Dim objProduto As New ClassProduto
Dim colCodigoNome As New AdmColCodigoNome
Dim objCodigoNome As AdmCodigoNome
Dim iAlmoxarifadoLocado As Integer
Dim objItemAloc As ClassItemNFAlocacao
Dim objComissaoNF As ClassComissaoNF

On Error GoTo Erro_NFiscal_Lock_Gravacao

    lErro = CF("NaturezaOperacao_Lock", objNFiscal.sNaturezaOp, alComando(1))
    If lErro <> SUCESSO And lErro <> 40551 Then Error 35974
    
    If lErro = 40551 Then Error 35975
   
    lErro = CF("FilialCliente_Lock1", alComando(2), objNFiscal.lCliente, objNFiscal.iFilialCli)
    If lErro <> SUCESSO And lErro <> 43050 Then Error 35977
    
    'Não achou a Filial do Cliente --> erro
    If lErro = 43050 Then Error 43052

    lErro = CF("Serie_Lock", alComando(3), objNFiscal.sSerie)
    If lErro <> SUCESSO And lErro <> 43032 Then Error 35978
    
    'Não encontrou a Série --> erro
    If lErro = 43032 Then Error 43034
    
    If objNFiscal.iTabelaPreco > 0 Then
        lErro = CF("NFiscal_TabelaPreco_Lock", alComando(9), objNFiscal)
        If lErro <> SUCESSO Then Error 44292
    End If
    
    'Se a Transportadora estiver preenchida
    If objNFiscal.iCodTransportadora > 0 Then
        
        lErro = CF("Transportadora_Lock", alComando(4), objNFiscal.iCodTransportadora)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 35979
        
        'Não encontrou a Transportadora --> erro
        If lErro = 43038 Then Error 43040
        
    End If
    
    'Se a Transportadora de redespacho estiver preenchida
    If objNFiscal.iCodTranspRedesp > 0 Then
        
        lErro = CF("Transportadora_Lock", alComando(4), objNFiscal.iCodTranspRedesp)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 35979
        
        'Não encontrou a Transportadora --> erro
        If lErro = 43038 Then Error 43040
        
    End If
    
    'Se o Canal de Venda estiver preenchido
    If objNFiscal.iCanal <> 0 Then
    
        lErro = CF("CanalVenda_Lock", alComando(5), objNFiscal.iCanal)
        If lErro <> SUCESSO And lErro <> 43026 Then Error 43022
        
        'Não encontrou o Canal de Venda --> erro
        If lErro = 43026 Then Error 43028
        
    End If
    
    For Each objComissaoNF In objNFiscal.ColComissoesNF
        lErro = CF("Vendedor_Lock", alComando(8), objComissaoNF.iCodVendedor)
        If lErro <> SUCESSO Then Error 51581
    Next
    
    'Lock shared nos Produtos e Almoxarifados
    For Each objItemNF In objNFiscal.ColItensNF
        
        objProduto.sCodigo = objItemNF.sProduto
        
        lErro = CF("Produto_Lock_Shared", alComando(6), objProduto)
        If lErro <> SUCESSO Then Error 35990

        objItemNF.iControleEstoque = objProduto.iControleEstoque
        objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
        objItemNF.sUMVenda = objProduto.sSiglaUMVenda
        objItemNF.iClasseUM = objProduto.iClasseUM
        objItemNF.iApropriacaoProd = objProduto.iApropriacaoCusto

        If objItemNF.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then

            For Each objItemAloc In objItemNF.colAlocacoes
    
                iAlmoxarifadoLocado = False
                
                If colCodigoNome.Count > 0 Then
                    For Each objCodigoNome In colCodigoNome
                        If objCodigoNome.iCodigo = objItemAloc.iAlmoxarifado Then
                            iAlmoxarifadoLocado = True
                        End If
                    Next
                End If
                    
                If iAlmoxarifadoLocado = False Then
                
                    colCodigoNome.Add objItemAloc.iAlmoxarifado, objItemAloc.sAlmoxarifado
                
                    If objNFiscal.iFilialEmpresa = 0 Then objNFiscal.iFilialEmpresa = giFilialEmpresa
                    
                    lErro = Comando_ExecutarLockado(alComando(7), "SELECT FilialEmpresa FROM Almoxarifado WHERE Codigo = ? AND FilialEmpresa = ? ", iFilialEmpresa, objItemAloc.iAlmoxarifado, objNFiscal.iFilialEmpresa)
                    If lErro <> AD_SQL_SUCESSO Then Error 35991
        
                    lErro = Comando_BuscarPrimeiro(alComando(7))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 35994
                    If lErro = AD_SQL_SEM_DADOS Then Error 35992
        
                    lErro = Comando_LockShared(alComando(7))
                    If lErro <> AD_SQL_SUCESSO Then Error 35993
            
                End If
            Next
        End If
    Next

    NFiscal_Lock_Gravacao = SUCESSO

    Exit Function

Erro_NFiscal_Lock_Gravacao:

    NFiscal_Lock_Gravacao = Err

    Select Case Err

        Case 35974, 35975
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATUREZAOP", Err, objNFiscal.sNaturezaOp)

        Case 35976
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NATUREZAOP_INEXISTENTE", Err, objNFiscal.sNaturezaOp)

        Case 35977
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATUREZAOP", Err, objNFiscal.sNaturezaOp)

        Case 35979
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES1", Err, objNFiscal.lCliente, objNFiscal.iFilialCli)

        Case 35990, 43022, 35978, 44292, 51581

        Case 35991, 35994
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", Err, objItemNF.iAlmoxarifado)

        Case 35992
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_INEXISTENTE", Err, objItemAloc.iAlmoxarifado)

        Case 35993
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO1", Err, objItemNF.iAlmoxarifado)

        Case 43028
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANALVENDA_NAO_CADASTRADO", Err, objNFiscal.iCanal)

        Case 43034
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", Err, objNFiscal.sSerie)

        Case 43040
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TRANSPORTADORA_NAO_CADASTRADA", Err, objNFiscal.iCodTransportadora)

        Case 43052
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA", Err, objNFiscal.lCliente, objNFiscal.iFilialCli)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149797)

    End Select

    Exit Function

End Function

'mario
Private Function NFiscal_Grava_BD(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'Insere uma Nota Fiscal de Saida no Banco de Dados

Dim lErro As Long
Dim iClasseDocCPR As Integer
Dim lNumIntDocCPR As Long
Dim iIndice As Integer
Dim colComissoesEmissao As New colComissao
Dim alComando1(1 To 12) As Long
Dim alComando2(1 To 13) As Long
Dim alComando3(1 To 4) As Long
Dim alComando4(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim alComando5(1 To 2) As Long

On Error GoTo Erro_NFiscal_Grava_BD

    'copia alguns alComando para alComando1
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = alComando(iIndice)
    Next
    
    'copia alguns alComando para alComando2
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = alComando(iIndice + UBound(alComando1))
    Next
    
    'copia alguns alComando para alComando3
    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = alComando(iIndice + UBound(alComando1) + UBound(alComando2))
    Next
    
    'copia alguns alComando para alComando4
    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = alComando(iIndice + UBound(alComando1) + UBound(alComando2) + UBound(alComando3))
    Next
    
    'copia alguns alComando para alComando5
    For iIndice = LBound(alComando5) To UBound(alComando5)
        alComando5(iIndice) = alComando(iIndice + UBound(alComando1) + UBound(alComando2) + UBound(alComando3) + UBound(alComando4))
    Next
        
    If objNFiscal.lNumNotaFiscal = 0 Then
    
        'Gera o Número para a Nota Fiscal e atualiza a Tabela de Serie
        lErro = CF("NFiscalNumAuto", objNFiscal)
        If lErro <> SUCESSO Then gError 60443
    
        'verifica se a nota fiscal já está cadastrada ou se já existe uma nota com os mesmos dados em um dado periodo
        lErro = CF("NFiscal_Testa_Existencia", alComando5(1), alComando5(2), objNFiscal)
        If lErro <> SUCESSO And lErro <> 42417 And lErro <> 89802 Then gError 44291
    
        If lErro = 42417 Or lErro = 89802 Then gError 81504
    
    Else
    
        'verifica se a nota fiscal já está cadastrada ou se já existe uma nota com os mesmos dados em um dado periodo
        lErro = CF("NFiscal_Testa_Existencia", alComando5(1), alComando5(2), objNFiscal)
        If lErro <> SUCESSO And lErro <> 42417 And lErro <> 89802 Then gError 44291
    
        If lErro <> 42417 And lErro <> 89802 Then gError 81505
            
        'Tratar a gravação da contabilidade na rotina chamadora
        gError 61400
        
    End If
    
    'Busca iClasseDocCPR e lNumIntDocCPR
    lErro = CF("CPR_Gera", objNFiscal, iClasseDocCPR, lNumIntDocCPR)
    If lErro <> SUCESSO Then gError 44311

    objNFiscal.iClasseDocCPR = iClasseDocCPR
    objNFiscal.lNumIntDocCPR = lNumIntDocCPR
    
    'grava a nota fiscal, seus itens e a tributacao respectiva
    lErro = CF("NFiscal_Grava_NFiscal", alComando1(), objNFiscal)
    If lErro <> SUCESSO Then gError 44287

    'Insere no Banco de Dados as Comissões da Nota Fiscal passada em objNFiscal
    lErro = CF("ComissoesNF_Grava", alComando2(1), alComando2(2), objNFiscal)
    If lErro <> SUCESSO Then gError 39018

    'Gera as Comissões na Emissão com base nas comissões armazenadas em objNFiscal e coloca-os em colComissoesEmissao
    lErro = CF("Comissoes_Gera", alComando2(3), alComando2(4), objNFiscal, colComissoesEmissao)
    If lErro <> SUCESSO Then gError 42469

    'Grava as Comissões passadas em colComissao
    lErro = CF("Comissoes_Grava1", alComando2(5), alComando2(6), alComando2(7), alComando2(8), colComissoesEmissao)
    If lErro <> SUCESSO Then gError 42470
        
    'gera os movimentos de estoque, se necessários
    lErro = CF("MovEstoque_Gera", alComando3(), alComando4(), objNFiscal)
    If lErro <> SUCESSO Then gError 44288
    
    NFiscal_Grava_BD = SUCESSO

    Exit Function

Erro_NFiscal_Grava_BD:

    NFiscal_Grava_BD = gErr

    Select Case gErr

        Case 39018, 42469, 42470, 44287, 44288, 44291, 44311, 60443
        
        Case 61400 'Tratar a gravação da contabilidade na rotina chamadora
        
        Case 81504, 81505
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_NFISCAL_NUMAUTO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149798)

    End Select

    Exit Function

End Function

'''mario
''Private Function Atualiza_Saldos_Faturamento(lComando As Long, lComando1 As Long, lComando2 As Long, lComando3 As Long, lComando4 As Long, objNFiscal As ClassNFiscal) As Long
'''atualiza os saldos de faturamento
''
''Dim lErro As Long
''Dim objItemNF As ClassItemNF
''Dim objSldDiaFat As New ClassSldDiaFat
''
''On Error GoTo Erro_Atualiza_Saldos_Faturamento
''
''    'Para cada item da Nota
''    For Each objItemNF In objNFiscal.ColItensNF
''
''        lErro = Faturamento_Transforma_UM(lComando, objItemNF)
''        If lErro <> SUCESSO Then Error 44314
''
''        objSldDiaFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
''        objSldDiaFat.dtData = objNFiscal.dtDataEmissao
''        objSldDiaFat.sProduto = objItemNF.sProduto
''        objSldDiaFat.dQuantFaturada = objItemNF.dQuantUMVenda
''        objSldDiaFat.dValorFaturado = objItemNF.dPrecoUnitario * objItemNF.dQuantidade
''        objSldDiaFat.dTotalDescontos = objItemNF.dValorDesconto
''
''        'Atualiza a tabela SldDiaFat utilizando os valores passados atraves de objSldDiaFat.
''        lErro = CF("SldDiaFat_Atualiza",lComando1, lComando2, objSldDiaFat)
''        If lErro <> SUCESSO Then Error 44315
''
''        'Atualiza a tabela SldMesFat utilizando os valores passados atraves de objSldDiaFat.
''        lErro = CF("SldMesFat_Atualiza",lComando3, lComando4, objSldDiaFat)
''        If lErro <> SUCESSO Then Error 44316
''
''    Next
''
''    Atualiza_Saldos_Faturamento = SUCESSO
''
''    Exit Function
''
''Erro_Atualiza_Saldos_Faturamento:
''
''    Atualiza_Saldos_Faturamento = Err
''
''    Select Case Err
''
''        Case 44314, 44315, 44316
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149799)
''
''    End Select
''
''    Exit Function
''
''End Function
''
'mario
Private Function Faturamento_Transforma_UM(ByVal lComando As Long, ByVal objItemNF As ClassItemNF) As Long
'transforma a quantidade do movimento na quantidade em unidade de venda

Dim lErro As Long
Dim objUnidadeMedida As New ClassUnidadeDeMedida
Dim dQuantidade As Double

On Error GoTo Erro_Faturamento_Transforma_UM

    objUnidadeMedida.iClasse = objItemNF.iClasseUM
    objUnidadeMedida.sSigla = objItemNF.sUnidadeMed

    lErro = CF("UM_Le1", lComando, objUnidadeMedida)
    If lErro <> SUCESSO Then Error 44312

    dQuantidade = objUnidadeMedida.dQuantidade

    objUnidadeMedida.sSigla = objItemNF.sUMVenda

    lErro = CF("UM_Le1", lComando, objUnidadeMedida)
    If lErro <> SUCESSO Then Error 44313

    objItemNF.dQuantUMVenda = (objItemNF.dQuantidade * dQuantidade) / objUnidadeMedida.dQuantidade

    Faturamento_Transforma_UM = SUCESSO
    
    Exit Function
    
Erro_Faturamento_Transforma_UM:

    Faturamento_Transforma_UM = Err
    
    Select Case Err
    
        Case 44312, 44313
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149800)
    
    End Select
    
    Exit Function

End Function

'mario
Public Function NFiscal_Grava_NFiscal(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'Grava a nota fiscal, seus itens e a tributacao respectiva

Dim lErro As Long
Dim lNumIntDoc As Long
Dim objItemNF As ClassItemNF

On Error GoTo Erro_NFiscal_Grava_NFiscal

    'Obtem o Número Interno da nova Nota Fiscal
    lErro = CF("NFiscal_Automatico1", alComando(1), alComando(2), alComando(3), lNumIntDoc)
    If lErro <> SUCESSO Then gError 35997

    objNFiscal.lNumIntDoc = lNumIntDoc

    With objNFiscal

        'Insere a nova Nota Fiscal de Saida no BD
        lErro = Comando_Executar(alComando(4), "INSERT INTO NFiscal (DataAtualizacao, NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, DataReferencia,NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal,FilialPedido, VolumeNumero, FreteRespons, HoraSaida, CodTranspRedesp, DetPagFrete, Moeda, TaxaMoeda, VolumeTotal, SemDataSaida) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            gdtDataHoje, .lNumIntDoc, .iStatus, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .iFilialPedido, .sVolumeNumero, .iFreteRespons, CDbl(.dtHoraSaida), .iCodTranspRedesp, .iDetPagFrete, .iMoeda, .dTaxaMoeda, .dVolumeTotal, .iSemDataSaida)
        If lErro <> AD_SQL_SUCESSO Then gError 35998
        
    End With

    'grava a tributacao da nota como um todo
    lErro = CF("NFiscal_GravaTributacao", objNFiscal, alComando(5), alComando(6))
    If lErro <> SUCESSO Then gError 39042
   
    'Obtém o Número Interno dos itens da NF
    lErro = CF("CRFATConfig_ObterNumInt", alComando(7), alComando(8), "NUM_PROX_ITEM_NOTA_FISCAL", lNumIntDoc, objNFiscal.ColItensNF.Count)
    If lErro <> SUCESSO Then gError 35999
   
    'Para cada item da Nota
    For Each objItemNF In objNFiscal.ColItensNF

        objItemNF.lNumIntNF = objNFiscal.lNumIntDoc
        objItemNF.lNumIntDoc = lNumIntDoc

        With objItemNF
        
            'Insere o item no Banco de dados
            lErro = Comando_Executar(alComando(9), "INSERT INTO ItensNFiscal (NumIntNF, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, DataEntrega, DescricaoItem, ValorAbatComissao, NumIntPedVenda, NumIntItemPedVenda, NumIntDoc, NumIntTrib, NumIntDocOrig, Almoxarifado) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", .lNumIntNF, .iItem, STATUS_LANCADO, .sProduto, .sUnidadeMed, .dQuantidade, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, lNumIntDoc, .lNumIntTrib, 0, .iAlmoxarifado)
            If lErro <> AD_SQL_SUCESSO Then gError 35212
            
        End With
        
        lErro = CF("ItensNFGrade_Inclui", objItemNF)
        If lErro <> SUCESSO Then gError 86365
        
        '#############################################
        'Inserido Por Wagner
        If objItemNF.objCobrItensContrato.lNumIntItensContrato <> 0 Then
            lErro = ItensDeContrato_Insere_Fatura(objNFiscal, objItemNF)
            If lErro <> SUCESSO Then gError 129945
        End If
        '#############################################
        
        'grava a tributacao relativa a cada item da nota
        lErro = CF("NFiscal_GravaTributacaoItem", objItemNF, alComando(10), alComando(11))
        If lErro <> SUCESSO Then gError 39043
    
        lNumIntDoc = lNumIntDoc + 1
    
    Next

    NFiscal_Grava_NFiscal = SUCESSO

    Exit Function

Erro_NFiscal_Grava_NFiscal:

    NFiscal_Grava_NFiscal = gErr

    Select Case gErr

        Case 35212
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSNFISCAL", gErr, objNFiscal.lNumNotaFiscal)

        Case 35997, 35999, 39042, 39043, 86365
        
        Case 35998
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFISCAL_SAIDA", gErr, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)
        
        Case 129945
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149801)

    End Select

    Exit Function

End Function

'''mario
''Function NFiscal_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''grava uma nota fiscal
''
''Dim lErro As Long
''Dim lTransacao As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
''Dim iIndice As Integer
''
''On Error GoTo Erro_NFiscal_Grava
''
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 35961
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 35962
''    Next
''
''    'grava a nota fiscal
''    lErro = CF("NFiscal_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61403 Then Error 44259
''
''    'Se a Nota já existe grava só a contabilidade
''    If lErro = SUCESSO Then
''
''        'verifica se o cliente possui o crédito para faturar a nota fiscal.
''        'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 44496
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52964
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52965
''
''    End If
''
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 36502
''
''    'Confirma Transação
''    lErro = Transacao_Commit()
''    If lErro <> AD_SQL_SUCESSO Then Error 39004
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscal_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscal_Grava:
''
''    NFiscal_Grava = Err
''
''    Select Case Err
''
''        Case 35961
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 35962
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 36502, 44259, 44496, 52964, 52965
''
''        Case 39004
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149802)
''
''    End Select
''
''    Call Transacao_Rollback
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function
''
'mario
''Function NFiscalFatura_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''Grava NFiscal Fatura
''
''Dim lErro As Long
''Dim lTransacao As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
''Dim iIndice As Integer
''
''On Error GoTo Erro_NFiscalFatura_Grava
''
''    'Inicia Transação
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 42413
''
''    'Abre os Comandos
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 42414
''    Next
''
''    'Grava NFiscal Fatura
''    lErro = CF("NFiscalFatura_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61401 Then Error 44289
''
''    'Se for uma alteracao, altera somente a contabilidade
''    If lErro = SUCESSO Then
''
''        'verifica se o cliente possui o crédito para faturar a nota fiscal.
''        'Se tiver atualiza tabela de estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 44496
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52966
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52967
''
''    End If
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 36507
''
''    'Faz o Commit da Transação
''    lErro = Transacao_Commit()
''    If lErro <> AD_SQL_SUCESSO Then Error 42438
''
''    'Fecha os comandos
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscalFatura_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscalFatura_Grava:
''
''    NFiscalFatura_Grava = Err
''
''    Select Case Err
''
''        Case 36507, 44289, 44496, 52966, 52967
''
''        Case 42413
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 42414
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 42438
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149803)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function

'mario
Function NFiscalFatura_Grava_Trans(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'Grava NFiscal Fatura
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando1(1 To 9) As Long
Dim alComando2(1 To NUM_MAX_LCOMANDO_MOVESTOQUE + 31) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalFatura_Grava_Trans

    'copia alguns alComando para alComando1
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = alComando(iIndice) ' + UBound(alComando3))
    Next

    'copia alguns alComando para alComando2
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = alComando(iIndice + UBound(alComando1))
    Next

    'executa o lock dos registros associados a nota fiscal.
    lErro = NFiscal_Lock_Gravacao(alComando1(), objNFiscal)
    If lErro <> SUCESSO Then Error 44294
    
    'Insere uma Nota Fiscal de Saida no Banco de Dados
    lErro = NFiscal_Grava_BD(alComando2(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61400 Then Error 44290
    
    'Tratar a gravação da contabilidade
    If lErro = 61400 Then Error 61401
    
    NFiscalFatura_Grava_Trans = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_Grava_Trans:

    NFiscalFatura_Grava_Trans = Err
    
    Select Case Err
    
        Case 44290, 44294
        
        Case 61401 'Tratar a gravação da contabilidade na rotina chamadora
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149804)
            
    End Select
    
    Exit Function
    
End Function

'mario
Function Reserva_Utilizar(ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal objMovEstoque As ClassMovEstoque, ByVal objItemPV As ClassItemPedido, ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal dQtdeUtilizada As Double) As Long
'Utiliza a reserva. Ou seja serão gerados movimentos de utilização e possivelmente cancelamento do que não foi utilizado. Além disso a reserva é excluida
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long
Dim dQtdeReservada As Double

On Error GoTo Erro_Reserva_Utilizar

    'selecionar a reserva
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Quantidade FROM Reserva WHERE FilialEmpresa = ? AND DocOrigem = ? AND Produto = ? AND Almoxarifado = ? AND NumIntOrigem = ?", 0, dQtdeReservada, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 44215

    'obter registro
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44216

    If lErro = AD_SQL_SEM_DADOS Then Error 44217

    'se a qtde utilizada for maior que a reservada => erro
    If dQtdeUtilizada > dQtdeReservada Then Error 44218

    'se a qtde utilizada for <> zero
    If dQtdeUtilizada <> 0 Then

        'retirar da qtde reservada deste almoxarifado
        objMovEstoque.colItens.Add 0, MOV_EST_UTILIZA_RESERVA, 0, 0, objItemPV.sProduto, objItemPV.sProdutoDescricao, objItemPV.sUMEstoque, dQtdeUtilizada, objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, objItemPV.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA

    End If

    'se a qtde utilizada for menor que a reservada
    If dQtdeUtilizada < dQtdeReservada Then

        'retirar da qtde reservada deste almoxarifado devolvendo para qtde disponivel
        objMovEstoque.colItens.Add 0, MOV_EST_CANCELA_RESERVA, 0, 0, objItemPV.sProduto, objItemPV.sProdutoDescricao, objItemPV.sUMEstoque, dQtdeReservada - dQtdeUtilizada, objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, objItemPV.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA

    End If

    'excluir a reserva
    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM Reserva", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 44219

    Reserva_Utilizar = SUCESSO

    Exit Function

Erro_Reserva_Utilizar:

    Reserva_Utilizar = Err

    Select Case Err

        Case 44215, 44216
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case 44217
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RESERVA_NAO_CADASTRADA", Err, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case 44218
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_RESERVADA", Err, dQtdeUtilizada, dQtdeReservada, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case 44219
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149805)

    End Select

    Exit Function

End Function

'mario
Function Reserva_Cancelar(ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal objMovEstoque As ClassMovEstoque, ByVal objItemPV As ClassItemPedido, ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'exclui uma reserva da tabela de reservas e gera movto
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long
Dim dQtdeReservada As Double

On Error GoTo Erro_Reserva_Cancelar

    'selecionar a reserva
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Quantidade FROM Reserva WHERE FilialEmpresa = ? AND DocOrigem = ? AND Produto = ? AND Almoxarifado = ? AND NumIntOrigem = ?", 0, dQtdeReservada, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 44222

    'obter registro
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44223

    If lErro = AD_SQL_SEM_DADOS Then Error 44224

    'retirar da qtde reservada deste almoxarifado devolvendo para qtde disponivel
    objMovEstoque.colItens.Add 0, MOV_EST_CANCELA_RESERVA, 0, 0, objItemPV.sProduto, objItemPV.sProdutoDescricao, objItemPV.sUMEstoque, dQtdeReservada, objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, objItemPV.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA

    'excluir a reserva
    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM Reserva", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 44225

    Reserva_Cancelar = SUCESSO

    Exit Function

Erro_Reserva_Cancelar:

    Reserva_Cancelar = Err

    Select Case Err

        Case 44222, 44223
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.iItem)
        
        Case 44224
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RESERVA_NAO_CADASTRADA", Err, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.iItem)
        
        Case 44225
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.iItem)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149806)

    End Select

    Exit Function

End Function

Function MovEstoque_Gera(alComando() As Long, alComando1() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'gera os movimentos de estoque da NFiscal, se necessários

Dim lErro As Long, iIndice As Integer
Dim iTipoMovtoEstoque As Integer
Dim objMovEstoque As ClassMovEstoque
Dim lCodigo As Long, dFator As Double
Dim objItemNF As ClassItemNF, dSomaAlocacao As Double
Dim objItemNFAloc As ClassItemNFAlocacao
Dim sDocOrigem As String, objTipoDocInfo As New ClassTipoDocInfo
Dim objItemMovEstoque As ClassItemMovEstoque
Dim objRastroItemNF As ClassRastroItemNF
Dim objRastroMovto As ClassRastreamentoMovto
Dim colInsumos As Collection
Dim colRastroMovto As Collection
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objProduto As New ClassProduto
Dim objReservaItem As ClassReservaItem

On Error GoTo Erro_MovEstoque_Gera

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 59261
    
    iTipoMovtoEstoque = objTipoDocInfo.iTipoMovtoEstoque
    sDocOrigem = objTipoDocInfo.sSigla

    If iTipoMovtoEstoque > 0 Then

        Set objMovEstoque = New ClassMovEstoque

        'Obtém o Código do Movimento
        lErro = CF("MovEstoque_Automatico_EmTransacao1", alComando(2), alComando(3), alComando(4), objNFiscal.iFilialEmpresa, lCodigo)
        If lErro <> SUCESSO Then gError 39001

        objMovEstoque.dtData = objNFiscal.dtDataSaida
        objMovEstoque.dtHora = objNFiscal.dtHoraSaida
        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objMovEstoque.iTipoMov = iTipoMovtoEstoque
        objMovEstoque.lCodigo = lCodigo
        objMovEstoque.lCliente = objNFiscal.lCliente
        objMovEstoque.lFornecedor = objNFiscal.lFornecedor
        objMovEstoque.sDocOrigem = sDocOrigem & " " & objNFiscal.sSerie & " " & CStr(objNFiscal.lNumNotaFiscal)

        iIndice = 0
        
        'Adiciona itens ao Movimento
        For Each objItemNF In objNFiscal.ColItensNF
            
            iIndice = iIndice + 1
            
            If objItemNF.colItensRomaneioGrade.Count = 0 Then
            
                If objItemNF.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                    
                    If objItemNF.colAlocacoes.Count = 0 Then gError 42367
    
                    dSomaAlocacao = 0
                                                                    
                    For Each objItemNFAloc In objItemNF.colAlocacoes
                                            
                        dSomaAlocacao = dSomaAlocacao + Arredonda_Estoque(objItemNFAloc.dQuantidade)

                        Set colInsumos = New Collection
                        Set colRastroMovto = New Collection
                                            
                        Set objItemMovEstoque = objMovEstoque.colItens.Add(0, 0, objItemNF.dValorTotal, APROPR_CUSTO_INFORMADO, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNFAloc.sUnidadeMed, objItemNFAloc.dQuantidade, objItemNFAloc.iAlmoxarifado, objItemNFAloc.sAlmoxarifado, objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
                        
                        If Not objNFiscal.objRastreamento Is Nothing Then
                        
                            'Guarda o Rastreamento dos ItensNF
                            lErro = objNFiscal.objRastreamento.Move_RastroItemNF_ItemMovEstoque(objItemMovEstoque, objItemNF.colRastreamento, objTipoDocInfo)
                            If lErro <> SUCESSO Then gError 89461
                        
                        End If
    
                        objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL
                        
                        objItemMovEstoque.iClasseUM = objItemNF.iClasseUM
                        objItemMovEstoque.iControleEstoque = objItemNF.iControleEstoque
                        objItemMovEstoque.sSiglaUMEst = objItemNF.sUMEstoque
                        objItemMovEstoque.iApropriacaoProd = objItemNF.iApropriacaoProd
                        
                    Next
                    
                    lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUMEstoque, objItemNF.sUnidadeMed, dFator)
                    If lErro <> SUCESSO Then gError 41525
    
                    '############################################
                    'Alterado por Wagner 17/11/04
                    
                    'dSomaAlocacao = dSomaAlocacao * dFator
                                        
                    dSomaAlocacao = Arredonda_Estoque(dSomaAlocacao * dFator)
                    '############################################
    
                    If Abs(dSomaAlocacao - objItemNF.dQuantidade) > QTDE_ESTOQUE_DELTA2 Then gError 42368
                
                End If
            Else
                For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
                    
                    objProduto.sCodigo = objItemRomaneio.sProduto
                    
                    lErro = CF("Produto_Le", objProduto)
                    If lErro <> SUCESSO And lErro <> 23080 Then gError 86366
                    If lErro <> SUCESSO Then Error 86367
                    
                    If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                    
                        If objItemRomaneio.colLocalizacao.Count = 0 Then gError 42367
                        
                        dSomaAlocacao = 0
                        
                        For Each objReservaItem In objItemRomaneio.colLocalizacao
                            
                            dSomaAlocacao = dSomaAlocacao + objReservaItem.dQuantidade
                            
                            Set objItemMovEstoque = objMovEstoque.colItens.Add(0, 0, objItemNF.dValorTotal, APROPR_CUSTO_INFORMADO, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objProduto.sSiglaUMEstoque, objReservaItem.dQuantidade, objReservaItem.iAlmoxarifado, objReservaItem.sAlmoxarifado, objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
                            
                            objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE
                            
                            objItemMovEstoque.iClasseUM = objProduto.iClasseUM
                            objItemMovEstoque.iControleEstoque = objProduto.iControleEstoque
                            objItemMovEstoque.sSiglaUMEst = objProduto.sSiglaUMEstoque
                            objItemMovEstoque.iApropriacaoProd = objProduto.iApropriacaoCusto
                            
                        Next
                        
                    End If
                Next
            
            End If
        Next

        'Grava os Movimentos de Estoque relacionados a Nota Fiscal
        lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
        If lErro <> SUCESSO Then gError 39002
        
    End If

    MovEstoque_Gera = SUCESSO

    Exit Function

Erro_MovEstoque_Gera:

    MovEstoque_Gera = gErr

    Select Case gErr

        Case 35135, 35756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODOCINFO1", gErr, objNFiscal.iTipoNFiscal)

        Case 39000
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objNFiscal.iTipoNFiscal)

        Case 39001, 39002, 41525, 59261, 89461

        Case 42367
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCALIZACAO_ITEM_INEXISTENTE", gErr, iIndice)

        Case 42368
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCALIZACAO_ITEM_INCOMPLETA", gErr, iIndice, objItemNF.dQuantidade, dSomaAlocacao)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149807)

    End Select

    Exit Function

End Function

Private Function ReservasPV_Libera_AbreComandos(alComando1() As Long, alComando2() As Long, alComando3() As Long) As Long
'Abre comandos para MovEstoque_GeraUsandoReserva

Dim iIndice As Integer
Dim lErro As Long

On Error GoTo Erro_ReservasPV_Libera_AbreComandos
    
    'Abre comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then Error 25748
    Next
    
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = Comando_Abrir()
        If alComando2(iIndice) = 0 Then Error 25749
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then Error 25750
    Next
    
    ReservasPV_Libera_AbreComandos = SUCESSO

    Exit Function

Erro_ReservasPV_Libera_AbreComandos:

    ReservasPV_Libera_AbreComandos = Err

    Select Case Err

        Case 25748, 25749, 25750
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149808)

    End Select

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    For iIndice = LBound(alComando2) To UBound(alComando2)
        Call Comando_Fechar(alComando2(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    
    Exit Function

End Function

Private Function ReservasPV_Libera_FechaComandos(alComando1() As Long, alComando2() As Long, alComando3() As Long) As Long
'Fecha comandos para MovEstoque_GeraUsandoReserva

Dim iIndice As Integer
Dim lErro As Long

On Error GoTo Erro_ReservasPV_Libera_FechaComandos
    
    'Fecha comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    For iIndice = LBound(alComando2) To UBound(alComando2)
        Call Comando_Fechar(alComando2(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    
    ReservasPV_Libera_FechaComandos = SUCESSO

    Exit Function

Erro_ReservasPV_Libera_FechaComandos:

    ReservasPV_Libera_FechaComandos = Err

    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149809)

    End Select
    
    Exit Function

End Function

Private Function ReservasPV_Libera_QuantFaturadaNF(ByVal objNFiscal As ClassNFiscal) As Long
'Usa reservas do Pedido de Venda para criar movimentos
'de estoque correspondentes as alocações dos itens da nota fiscal
'Se no almoxarifado da alocação a reserva não atender, tenta liberar
'reservas de outros almoxarifados até chegar a quantidade alocada

Dim alComando1(1 To 2) As Long, alComando2(1 To 2) As Long
Dim alComando3(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim objItemNFAloc As ClassItemNFAlocacao
Dim dQuantLiberar As Double
Dim dQuantLiberada As Double
Dim objItemPV As New ClassItemPedido
Dim objMovEstoque As New ClassMovEstoque
Dim objProduto As New ClassProduto
Dim lCodigo As Long
Dim iTotItens As Integer
Dim objItemNFAux As New ClassItemNF
Dim objReservaItem As ClassReservaItem

On Error GoTo Erro_ReservasPV_Libera_QuantFaturadaNF
    
    'Abre comandos
    lErro = ReservasPV_Libera_AbreComandos(alComando1(), alComando2(), alComando3())
    If lErro <> SUCESSO Then Error 25752
    
    'Gera um novo Código para o Movimento de Estoque
    lErro = CF("MovEstoque_Automatico_EmTransacao", objNFiscal.iFilialEmpresa, lCodigo)
    If lErro <> SUCESSO Then Error 25776

    'Preenche o objMovEstoque
    objMovEstoque.lCodigo = lCodigo
    objMovEstoque.dtData = objNFiscal.dtDataEmissao
    objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
    objMovEstoque.iTipoMov = MOV_EST_UTILIZA_RESERVA
    
    For Each objItemNF In objNFiscal.ColItensNF
        
        iTotItens = objItemNF.colItensRomaneioGrade.Count
        
        For iIndice = 0 To iTotItens
        
            If iTotItens = 0 Then
                objProduto.sCodigo = objItemNF.sProduto
            Else
                If iIndice = 0 Then iIndice = iIndice + 1
                objProduto.sCodigo = objItemNF.colItensRomaneioGrade(iIndice).sProduto
            End If
            
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 23080 Then Error 62096
            If lErro <> SUCESSO Then Error 62097
                
            If objItemNF.colItensRomaneioGrade.Count = 0 Then
                
                objItemNF.iClasseUM = objProduto.iClasseUM
                objItemNF.iControleEstoque = objProduto.iControleEstoque
                objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
                objItemNF.sUMVenda = objProduto.sSiglaUMVenda
        
                If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
                                    
                    'Inicializa quantidade liberada de reservas de ItemPV
                    dQuantLiberada = 0
                
                    For Each objItemNFAloc In objItemNF.colAlocacoes
                        
                        'Inicializa quantidade a liberar de reservas p/ essa alocação
                        dQuantLiberar = objItemNFAloc.dQuantidade
                                        
                        'Gera movimento que disponibiliza reserva do Almoxarifado de alocação
                        lErro = ItemNFAloc_MovEst_Gera(alComando1(), objItemNF, objItemNFAloc, dQuantLiberar, objMovEstoque)
                        If lErro <> SUCESSO Then Error 25751
                        
                        'Se reserva do almox de alocação não atendeu
                        If dQuantLiberar > 0 Then
        
                            'Disponibiliza reservas de outros almoxarifados até completar a quantidade alocada nesse almoxarifado
                            lErro = ItemNFAloc_MovEst_Gera2(alComando2(), objItemNF, objItemNFAloc, dQuantLiberar, objMovEstoque)
                            If lErro <> SUCESSO Then Error 25754
        
                        End If
                        
                        'Adiciona o que foi liberado de reservas em dQuantLiberada
                        dQuantLiberada = dQuantLiberada + objItemNFAloc.dQuantidade - dQuantLiberar
                        
                    Next
                End If
            Else
                If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
                    dQuantLiberada = 0
                    For Each objReservaItem In objItemNF.colItensRomaneioGrade(iIndice).colLocalizacao
                        dQuantLiberar = objReservaItem.dQuantidade
                        
                        lErro = ItemNFGradeAloc_MovEst_Gera(alComando1(), objItemNF.colItensRomaneioGrade(iIndice), objReservaItem, dQuantLiberar, objMovEstoque)
                        If lErro <> SUCESSO Then Error 25751
                        
                        If dQuantLiberar > 0 Then
                            lErro = ItemNFGradeAloc_MovEst_Gera2(alComando2(), objItemNF.colItensRomaneioGrade(iIndice), objReservaItem, dQuantLiberar, objMovEstoque)
                            If lErro <> SUCESSO Then Error 25754
                        End If
                        
                        dQuantLiberada = dQuantLiberada + objReservaItem.dQuantidade - dQuantLiberar
                    Next
                
                End If
            End If
            
            'Se houve liberação de reserva para o ítemPV
            If dQuantLiberada > 0 And objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then

                'Atualiza quantidade reservada de ItemPV
                objItemPV.lNumIntDoc = objItemNF.lNumIntItemPedVenda
                lErro = ItemPV_Atualiza_QuantReservada(alComando3(), objItemPV, dQuantLiberada)
                If lErro <> SUCESSO Then Error 25755
                
                If iIndice > 0 Then
                    lErro = ItemPVGrade_Atualiza_QuantReservada(alComando3(), objItemNF.colItensRomaneioGrade(iIndice), objItemNF.sUnidadeMed, objProduto, dQuantLiberada)
                    If lErro <> SUCESSO Then Error 25755
                End If
            End If
            
        
        Next
    Next

    'Grava movimentos de estoque
    lErro = CF("MovEstoque_Grava", objMovEstoque)
    If lErro <> SUCESSO Then Error 25764
    
    'Fecha comandos
    Call ReservasPV_Libera_FechaComandos(alComando1(), alComando2(), alComando3())
    
    ReservasPV_Libera_QuantFaturadaNF = SUCESSO

    Exit Function

Erro_ReservasPV_Libera_QuantFaturadaNF:

    ReservasPV_Libera_QuantFaturadaNF = Err

    Select Case Err

        Case 25751, 25752, 25754, 25755, 25764, 25776, 62096 'tratado na rotina chamada

        Case 62097
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149810)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149811)

    End Select

    'Fecha comandos
    Call ReservasPV_Libera_FechaComandos(alComando1(), alComando2(), alComando3())

    Exit Function

End Function
  
Private Function ItemPV_Atualiza_QuantReservada(alComando() As Long, ByVal objItemPV As ClassItemPedido, ByVal dQuantLiberada As Double) As Long
'Atualiza QuantReservada o ItemPV cujo NumInt foi passado

Dim lErro As Long
Dim lComando As Long
Dim tItemPV As typeItemPedido
Dim objProduto As New ClassProduto
Dim dQuantLiberadaUMItemPV As Double
Dim dFator As Double

On Error GoTo Erro_ItemPV_Atualiza_QuantReservada
    
    tItemPV.sProduto = String(STRING_PRODUTO, 0)
    tItemPV.sUnidadeMed = String(STRING_UM_SIGLA, 0)
    
    'Lê UM e ClasseUM de itemPV
    lErro = Comando_ExecutarPos(alComando(1), "SELECT ClasseUM, UnidadeMed, QuantReservada, Produto FROM ItensPedidoDeVenda WHERE NumIntDoc = ?", 0, tItemPV.iClasseUM, tItemPV.sUnidadeMed, tItemPV.dQuantReservada, tItemPV.sProduto, objItemPV.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 25766

    'Tenta ler registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 25767
    If lErro = AD_SQL_SEM_DADOS Then Error 25768 'Não encontrou

    'Faz lock do item
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 25769
    
    objProduto.sCodigo = tItemPV.sProduto
       
    'Lê na tabela de Produto a UM de estoque
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then Error 25770
    
    'Se não encontrar o produto ==> Erro
    If lErro = 28030 Then Error 25771
    
    'Obtém fator de conversão para unidade de medida de ItemPV
    lErro = CF("UM_Conversao", tItemPV.iClasseUM, objProduto.sSiglaUMEstoque, tItemPV.sUnidadeMed, dFator)
    If lErro <> SUCESSO Then Error 25772

    'Quantidade liberada em UM de ItemPV
    dQuantLiberadaUMItemPV = (dQuantLiberada * dFator)

    'Se a quantidade liberada em reservas do ítem for maior que a reservada ==> erro
    If dQuantLiberadaUMItemPV - tItemPV.dQuantReservada > QTDE_ESTOQUE_DELTA Then Error 25773

    'Atualiza quant reservada de ItemPV
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensPedidoDeVenda SET QuantReservada = QuantReservada - ? ", alComando(1), dQuantLiberadaUMItemPV)
    If lErro <> AD_SQL_SUCESSO Then Error 25774
    
    ItemPV_Atualiza_QuantReservada = SUCESSO

    Exit Function

Erro_ItemPV_Atualiza_QuantReservada:

    ItemPV_Atualiza_QuantReservada = Err

    Select Case Err

        Case 25766, 25767
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMPV", Err, objItemPV.lNumIntDoc)

        Case 25768
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", Err, objItemPV.lNumIntDoc)

        Case 25769
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMPEDIDODEVENDA", Err, objItemPV.lNumIntDoc)

        Case 25770, 25772 'tratado na rotina chamada

        Case 25771
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)
        
        Case 25773
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_LIBERADA_MAIOR_QUANT_RESERVADA", Err, objItemPV.lNumIntDoc)
        
        Case 25774
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITEMPV", Err, objItemPV.lNumIntDoc)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149812)


    End Select

    Exit Function

End Function


Private Function ItemNFAloc_MovEst_Gera(alComando() As Long, ByVal objItemNF As ClassItemNF, ByVal objItemNFAloc As ClassItemNFAlocacao, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reserva do Almoxarifado de alocação

Dim lErro As Long
Dim dQuantidade As Double

On Error GoTo Erro_ItemNFAloc_MovEst_Gera
      
    'Busca uma reserva para o Almoxarifado da alocação
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado =?", 0, dQuantidade, TIPO_PEDIDO_COD, objItemNF.lNumIntItemPedVenda, objItemNF.sProduto, objItemNFAloc.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 25753

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25754
    
    'Se reserva foi encontrada
    If lErro = AD_SQL_SUCESSO Then
        
        'Faz o lock na reserva
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 25755

        'Se a quantidade reservada for menor ou igual a quantidade a liberar
        If dQuantLiberar >= dQuantidade Then
            
            'Exclui a reserva
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25756
            
            'Gera um item de movto de estoque de utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantidade, objItemNFAloc.iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = dQuantLiberar - dQuantidade
        
        Else
            'Atualiza a quantidade reservada em Reserva
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
            If lErro <> AD_SQL_SUCESSO Then Error 25757
            
            'Adiciona um movto de estoque do tipo utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantLiberar, objItemNFAloc.iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = 0
        
        End If

    End If

    ItemNFAloc_MovEst_Gera = SUCESSO

    Exit Function

Erro_ItemNFAloc_MovEst_Gera:

    ItemNFAloc_MovEst_Gera = Err

    Select Case Err

        Case 25753, 25754
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25755
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25757
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149813)

    End Select

    Exit Function

End Function

Private Function ItemNFAloc_MovEst_Gera2(alComando() As Long, ByVal objItemNF As ClassItemNF, ByVal objItemNFAloc As ClassItemNFAlocacao, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reservas do ItemNF(ItemPV correspondente) de almoxarifados distintos do almoxarifado de alocação
'A quantidade disponibilizada é dada por dQuantLiberar

Dim lErro As Long
Dim dQuantidade As Double
Dim iAlmoxarifado As Integer

On Error GoTo Erro_ItemNFAloc_MovEst_Gera2

    If dQuantLiberar > 0 Then
        
        'Busca reserva em Almoxarifados diferentes do de alocação
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade, Almoxarifado FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado <> ?", 0, dQuantidade, iAlmoxarifado, TIPO_PEDIDO_COD, objItemNF.lNumIntItemPedVenda, objItemNF.sProduto, objItemNFAloc.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 25758

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25759
        
        'Enquanto encontrar reserva ou ainda tiver o quantidade a liberar
        Do While lErro <> AD_SQL_SEM_DADOS And dQuantLiberar > 0
            
            'faz lock na reserva
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25760
            
            'Se a qtd reservada for menor ou igual a qtd a liberar
            If dQuantLiberar >= dQuantidade Then
                
                'Apaga a reserva
                lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
                If lErro <> AD_SQL_SUCESSO Then Error 25761
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantidade, iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = dQuantLiberar - dQuantidade
            
            Else
                'Atualiza a reserva subtraindo a QuantLiberar
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
                If lErro <> AD_SQL_SUCESSO Then Error 25762
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantLiberar, iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = 0
                Exit Do
            
            End If
                    
            'Busca a próxima reserva
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25763
        
        Loop
    
    End If

    ItemNFAloc_MovEst_Gera2 = SUCESSO

    Exit Function

Erro_ItemNFAloc_MovEst_Gera2:

    ItemNFAloc_MovEst_Gera2 = Err

    Select Case Err

        Case 25758, 25759, 25763
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25760
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25762
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149814)

    End Select

    Exit Function

End Function


'Function BloqueiosPV_Exclui_Credito(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
''Exclui os Bloqueios de Creditos não liberados ligados ao Pedido de Venda passado
''Chamada EM TRANSAÇÃO
'
'Dim lErro As Long
'Dim lComando As Long
'Dim lComando1 As Long
'Dim iTipoDeBloqueio As Integer
'
'On Error GoTo Erro_BloqueiosPV_Exclui_Credito
'
'    'Abre os comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 46023
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 46024
'
'    'Busca os Bloqueios de Crédito ligados ao Pedido
'    lErro = Comando_ExecutarPos(lComando, "SELECT TipoDeBloqueio FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? AND TipoDeBloqueio = ? AND DataLib = ?", 0, iTipoDeBloqueio, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, BLOQUEIO_CREDITO, DATA_NULA)
'    If lErro <> AD_SQL_SUCESSO Then Error 46025
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46026
'
'    'Para cada Bloqueio encontrado
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        'Exclui o bloqueio da tabela de Bloqueios de Pedido de Venda
'        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM BloqueiosPV", lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 46027
'
'        'Busca o próximo
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46028
'
'    Loop
'
'    'Fecha os comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    BloqueiosPV_Exclui_Credito = SUCESSO
'
'    Exit Function
'
'Erro_BloqueiosPV_Exclui_Credito:
'
'    BloqueiosPV_Exclui_Credito = Err
'
'    Select Case Err
'
'        Case 46023, 46024
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 46025, 46026, 46028
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV", Err, objPedidoVenda.lCodigo)
'
'        Case 46027
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BLOQUEIOSPV", Err, objPedidoVenda.lCodigo)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149815)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function

Function BloqueiosPV_Grava1(ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'Insere no BD os Bloqueios do Pedido de Venda

Dim lComando As Long
Dim lErro As Long
Dim iSequencial As Integer

On Error GoTo Erro_BloqueiosPV_Grava1

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44392

    'Gera o sequencial automático para o Bloqueio
    lErro = CF("BloqueioPV_Automatico", objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa, iSequencial)
    If lErro <> SUCESSO Then Error 44393

    'Insere o bloqueio na tabela de Bloqueios de Pedido de Venda
    lErro = Comando_Executar(lComando, "INSERT INTO BloqueiosPV(FilialEmpresa,PedidoDeVenda,Sequencial,TipoDeBloqueio,CodUsuario,Responsavel,Data,CodUsuarioLib,ResponsavelLib,DataLib) VALUES (?,?,?,?,?,?,?,?,?,?)", objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, iSequencial, objBloqueioPV.iTipoDeBloqueio, objBloqueioPV.sCodUsuario, objBloqueioPV.sResponsavel, objBloqueioPV.dtData, objBloqueioPV.sCodUsuarioLib, objBloqueioPV.sResponsavelLib, objBloqueioPV.dtDataLib)
    If lErro <> AD_SQL_SUCESSO Then Error 44394

    'Fecha o comando
    Call Comando_Fechar(lComando)

    BloqueiosPV_Grava1 = SUCESSO

    Exit Function

Erro_BloqueiosPV_Grava1:

    BloqueiosPV_Grava1 = Err

    Select Case Err

        Case 44392
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44393

        Case 44394
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BLOQUEIOPV", Err, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iSequencial)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149816)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LiberacaoCredito_Grava(ByVal objLiberacaoCredito As ClassLiberacaoCredito) As Long
'Grava uma alçada

Dim lErro As Long
Dim lTransacao As Long, lTransacaoDic As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim sCodigo As String
Dim dLimiteMensal As Double
Dim dLimiteOperacao As Double

On Error GoTo Erro_LiberacaoCredito_Grava

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 48119
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 48125
    
    'abre comando para que seja consultado o dicdados
    lComando2 = Comando_AbrirExt(GL_lConexaoDic)
    If lComando2 = 0 Then Error 48126
        
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 48120
    
    lTransacaoDic = Transacao_AbrirExt(GL_lConexaoDic)
    If lTransacaoDic = 0 Then Error 56577
    
    sCodigo = String(STRING_CODUSUARIO, 0)
    
    'verifica se a alçada está cadastrada
    lErro = Comando_ExecutarPos(lComando, "SELECT LimiteMensal, LimiteOperacao FROM LiberacaoCredito WHERE CodUsuario = ?", 0, dLimiteMensal, dLimiteOperacao, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 48121
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48123
    
    'se a alçada estiver cadastrada ==> é uma alteração
    If lErro = SUCESSO Then
        
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 48122
        
        lErro = Comando_ExecutarPos(lComando1, "UPDATE LiberacaoCredito SET LimiteMensal = ?, LimiteOperacao = ?", lComando, objLiberacaoCredito.dLimiteMensal, objLiberacaoCredito.dLimiteOperacao)
        If lErro <> AD_SQL_SUCESSO Then Error 48124
    
    Else
        
        'a alçada não estava cadastrada ==> é uma inclusão
        lErro = Comando_ExecutarLockado(lComando2, "SELECT CodUsuario FROM Usuarios WHERE CodUsuario = ?", sCodigo, objLiberacaoCredito.sCodUsuario)
        If lErro <> AD_SQL_SUCESSO Then Error 48127
            
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO Then Error 48128
        
        lErro = Comando_LockShared(lComando2)
        If lErro <> AD_SQL_SUCESSO Then Error 48129
        
        lErro = Comando_Executar(lComando, "INSERT INTO LiberacaoCredito (CodUsuario, LimiteOperacao, LimiteMensal) VALUES (?, ?, ?)", objLiberacaoCredito.sCodUsuario, objLiberacaoCredito.dLimiteOperacao, objLiberacaoCredito.dLimiteMensal)
        If lErro <> AD_SQL_SUCESSO Then Error 48130
        
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 48131

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
        
    Call Transacao_RollbackExt(lTransacaoDic)
        
    LiberacaoCredito_Grava = SUCESSO
    
    Exit Function
    
Erro_LiberacaoCredito_Grava:
    
    LiberacaoCredito_Grava = Err
    
    Select Case Err
            
        Case 48119, 48125, 48126 'Erro Abertura de comando
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 48120, 56577 'Erro abertura Transacao
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 48121, 48123 'Erro de leitura na tabela LiberacaoCredito
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err)
            
        Case 48122 'Erro na tentativa de fazer 'lock' na tabela LiberacaoCredito
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_LIBERACAOCREDITO", Err)
            
        Case 48124 'Erro na tentativa de atualizar a tabela LiberacaoCredito.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LIBERACAOCREDITO", Err)
            
        Case 48127, 48128 'Erro de leitura na tabela Usuarios.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_USUARIOS_DIC", Err)
            
        Case 48129 'Erro na tentativa de fazer 'lock' na tabela Usuarios.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_USUARIOS_DIC", Err)
            
        Case 48130 'Erro na tentiva de inserir um registro na tabela LiberacaoCredito.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_LIBERACAOCREDITO", Err)
            
        Case 48131
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149817)
    
    End Select
    
    Call Transacao_RollbackExt(lTransacaoDic)
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
            
    Exit Function
    
End Function

Function LiberacaoCredito_Exclui(ByVal objLiberacaoCredito As ClassLiberacaoCredito) As Long
'Exclui a alçada passada como parametro

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim sCodigo As String
Dim iIndice As Integer

On Error GoTo Erro_LiberacaoCredito_Exclui
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 48137
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 48138
    
    sCodigo = String(STRING_CODUSUARIO, 0)
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT CodUsuario FROM LiberacaoCredito WHERE CodUsuario = ?", 0, sCodigo, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 48139
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48140
    
    'Se não encontrou --> ERRO
    If lErro = AD_SQL_SEM_DADOS Then Error 58550
    
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then Error 48141
    
    'Exclui a alçada do BD
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM LiberacaoCredito", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 48148
         
    sCodigo = String(STRING_CODUSUARIO, 0)
         
    'Verifica se o usuário da alçada está vinculado a algum registro em ValorLiberadoCredito.
    lErro = Comando_ExecutarPos(alComando(2), "SELECT CodUsuario FROM ValorLiberadoCredito WHERE CodUsuario = ?", 0, sCodigo, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 48146
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48147
    
    'exclui os registros em ValorLiberadoCredito vinculados ao usuario
    Do While lErro = AD_SQL_SUCESSO
    
        'Exclui os registros em ValorLiberadoCredito
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ValorLiberadoCredito", alComando(2))
        If lErro <> AD_SQL_SUCESSO Then Error 48152
        
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48147
    
    Loop
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 48149
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    LiberacaoCredito_Exclui = SUCESSO
    
    Exit Function
    
Erro_LiberacaoCredito_Exclui:

    LiberacaoCredito_Exclui = Err
    
    Select Case Err
        
        Case 48137, 48152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 48138
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 48139, 48140
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err)
        
        Case 48141
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_LIBERACAOCREDITO", Err)
                    
        Case 48146, 48147
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALORLIBERADOCREDITO", Err)
                           
        Case 48148
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_LIBERACAOCREDITO", Err, objLiberacaoCredito.sCodUsuario)
        
        Case 48152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_VALORLIBERADOCREDITO", Err)
        
        Case 48149
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case 58550 'Não encontrou para excluir (Caso na Exclusão do Usuario no Dic)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149818)
            
    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalDevolucao_Grava_BD(ByVal objNFiscal As ClassNFiscal) As Long
'Faz a Inserção de uma Nota Fiscal de Saida-Devolução no BD

Dim lErro As Long
Dim alComando(0 To 6) As Long
Dim alComando3(1 To 4) As Long
Dim alComando4(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim lNumIntNF As Long
Dim lNumIntItemNF As Long
Dim iIndice As Integer
Dim objItemNF As ClassItemNF
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objMovEstoque As New ClassMovEstoque
Dim lCodigo As Long
Dim objItemMovEstoque As ClassItemMovEstoque
Dim iClasseDocCPR As Integer
Dim lNumIntDocCPR As Long

On Error GoTo Erro_NFiscalDevolucao_Grava_BD

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 39328
    Next

    'copia alguns alComando para alComando3
    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then Error 39328
    Next
    
    'copia alguns alComando para alComando4
    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = Comando_Abrir()
        If alComando4(iIndice) = 0 Then Error 39328
    Next
    
    If objNFiscal.lNumNotaFiscal = 0 Then
    
        'Gera o Número para a Nota Fiscal e atualiza a Tabela de Serie
        lErro = CF("NFiscalNumAuto", objNFiscal)
        If lErro <> SUCESSO Then Error 60444

        lErro = CF("NFiscalDev_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 39250 Then Error 39170
        
        If lErro = 39250 Then Error 32249
    
    Else
    
        lErro = CF("NFiscalDev_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 39250 Then Error 39170
        
        If lErro <> 39250 Then Error 32250
        
        'Tratar a gravação da Contabilidade
        Error 61406
    
    End If
    
    'Gerar o Número Interno da Nota Fiscal
    lErro = CF("NFiscal_Automatico", lNumIntNF)
    If lErro <> SUCESSO Then Error 39329
    
    objNFiscal.lNumIntDoc = lNumIntNF

    'Busca iClasseDocCPR e lNumIntDocCPR
    lErro = CF("CPR_Gera", objNFiscal, iClasseDocCPR, lNumIntDocCPR)
    If lErro <> SUCESSO Then Error 51630

    objNFiscal.iClasseDocCPR = iClasseDocCPR
    objNFiscal.lNumIntDocCPR = lNumIntDocCPR
        
    With objNFiscal
        
        'Insere no BD
        lErro = Comando_Executar(alComando(0), "INSERT INTO NFiscal (DataAtualizacao, NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento,DataReferencia, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal,VolumeNumero,FreteRespons,FilialPedido,HoraSaida, CodTranspRedesp, DetPagFrete, Moeda, TaxaMoeda, VolumeTotal, SemDataSaida) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            gdtDataHoje, lNumIntNF, STATUS_BAIXADO, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, .iFilialPedido, CDbl(.dtHoraSaida), .iCodTranspRedesp, .iDetPagFrete, .iMoeda, .dTaxaMoeda, .dVolumeTotal, .iSemDataSaida)
        If lErro <> AD_SQL_SUCESSO Then Error 39330

    End With

    lErro = CF("NFiscal_GravaTributacao", objNFiscal, alComando(4), alComando(5))
    If lErro <> SUCESSO Then Error 39331
    
    'Para cada Ítem da Nota Fiscal
    For Each objItemNF In objNFiscal.ColItensNF
        
        'Gera o Número Automático
        lErro = CF("NFiscalItem_Automatico", lNumIntItemNF)
        If lErro <> SUCESSO Then Error 39332

        objItemNF.lNumIntNF = lNumIntNF
        objItemNF.lNumIntDoc = lNumIntItemNF

        With objItemNF
        
            'Insere no BD
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensNFiscal (NumIntNF, Item, Status, Produto, UnidadeMed, Quantidade, Almoxarifado, PrecoUnitario, PercDesc, ValorDesconto, DataEntrega, DescricaoItem, ValorAbatComissao, NumIntPedVenda, NumIntItemPedVenda, NumIntDoc, NumIntTrib, NumIntDocOrig) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", lNumIntNF, .iItem, STATUS_BAIXADO, .sProduto, .sUnidadeMed, .dQuantidade, .iAlmoxarifado, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, lNumIntItemNF, .lNumIntTrib, .lNumIntDocOrig)
            If lErro <> AD_SQL_SUCESSO Then Error 39333
        
            lErro = CF("NFiscal_GravaTributacaoItem", objItemNF, alComando(3), alComando(6))
            If lErro <> SUCESSO Then Error 39334
        
        End With
    
        lErro = CF("ItensNFGrade_Inclui", objItemNF)
        If lErro <> SUCESSO Then Error 39332
    
    Next

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'gera os movimentos de estoque, se necessários
    lErro = CF("MovEstoque_Gera", alComando3(), alComando4(), objNFiscal)
    If lErro <> SUCESSO Then gError 44288
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next

    NFiscalDevolucao_Grava_BD = SUCESSO

    Exit Function

Erro_NFiscalDevolucao_Grava_BD:

    NFiscalDevolucao_Grava_BD = Err

    Select Case Err

        Case 39328
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", 0)

        Case 20813, 20824, 39170, 39329, 39332, 39335, 39337, 39338, 35425, 39331, 39334, 51630, 60444

        Case 39330
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFISCAL1", Err, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 39333
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSNFISCAL", Err, objNFiscal.lNumNotaFiscal)

        Case 39336
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", Err, objNFiscal.iTipoNFiscal)
        
        Case 61406 'Tratar a gravação da contabilidade na rotina chamadora
        
        Case 32249, 32250
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_NFISCAL_NUMAUTO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149819)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next
    
    Exit Function

End Function

''Function NFiscalFaturaPedido_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''Faz a gravação de uma nota fiscal fatura gerada a partir de um pedido de venda
''
''Dim lErro As Long
''Dim objPedidoVenda As New ClassPedidoDeVenda
''Dim lTransacao As Long
''Dim alComando1(1 To 30) As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
''Dim iIndice As Integer
''Dim dQuantFaturada As Double
''Dim dQuantNaoCancelada As Double
''Dim objMovEstoque As ClassMovEstoque
''Dim dQuantPedida As Double
''Dim dQuantCancelada  As Double
''Dim iStatus As Integer
''Dim lNumIntDoc As Long
''
''On Error GoTo Erro_NFiscalFaturaPedido_Grava
''
''   'Abre a transacao
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 46598
''
''    'Abre os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        alComando1(iIndice) = Comando_Abrir()
''        If alComando1(iIndice) = 0 Then Error 46055
''    Next
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 46595
''    Next
''
''    'Verifica se já existe nota com esses dados
''    lErro = Comando_Executar(alComando1(30), "SELECT NumIntDoc FROM NFiscalTipoDocInfo WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
''    If lErro <> AD_SQL_SUCESSO Then Error 61416
''
''    lErro = Comando_BuscarPrimeiro(alComando1(30))
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61417
''
''    'Nova nota Fiscal
''    If lErro = AD_SQL_SEM_DADOS Then
''
''        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
''        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
''
''        'Lê e faz lock no Pedido de Venda
''        lErro = CF("PedidoDeVenda_Le_Lock",alComando1(1), objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 36986 Then Error 46079
''
''        If lErro <> SUCESSO Then Error 46084
''
''        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
''        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then Error 35643
''
''        'Lê os bloqueios do Pedido de venda
''        lErro = CF("BloqueiosPV_Le",objPedidoVenda)
''        If lErro <> SUCESSO Then Error 46983
''
''        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
''        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 25741 Then Error 51469
''        If lErro = 25741 Then Error 46941
''
''        'Verifica se o cliente possui o crédito para faturar a nota fiscal
''        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 25742
''
''        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
''        For iIndice = 1 To objNFiscal.ColItensNF.Count
''            objNFiscal.ColItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
''        Next
''
''        'Tenta liberar reservas do Pedido igual quant. usadas na NF
''        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
''        If lErro <> SUCESSO Then Error 51580
''
''    End If
''
''    'Chama a função de gravação de uma nota fiscal
''    lErro = CF("NFiscalFatura_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61401 Then Error 46594
''
''    'Se for para gravar somente a contabilidade retornará o erro 61401
''    If lErro = SUCESSO Then
''
''        'OK ?? Shirley, precisa de colItemPedido ? Não tem os ítens a partir de ítens NF ?
''        'OK ?? Encapsular em ItensPV_AtualizaQuantFaturada(objNFiscal)
''        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
''        If lErro <> SUCESSO Then Error 51748
''
''        'Atualiza estatística de QuantPedida em ProdutoFilial
''        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida",objNFiscal)
''        If lErro <> SUCESSO Then Error 51497
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52970
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52971
''
''        'Le Itens de PV
''        lErro = CF("PedidoDeVenda_Le_Itens",objPedidoVenda)
''        If lErro <> AD_SQL_SUCESSO Then Error 51492
''
''        'Verifica se tem quantidade não cancelada
''        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada)
''        If lErro <> SUCESSO Then Error 51493
''
''        'Se nao tiver quantidade nao cancelada, baixa o Pedido
''        If dQuantNaoCancelada = 0 Then
''
''            lErro = CF("PedidoDeVenda_Baixar",alComando1, objPedidoVenda)
''            If lErro <> SUCESSO Then Error 51494
''
''        End If
''
''    End If
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 35645
''
''
''    'Faz o commit
''    lErro = Transacao_Commit()
''    If lErro <> SUCESSO Then Error 35647
''
''    'Fecha os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscalFaturaPedido_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscalFaturaPedido_Grava:
''
''    NFiscalFaturaPedido_Grava = Err
''
''    Select Case Err
''
''        Case 35643
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", Err)
''
''        Case 46055
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 25742, 35645, 46079, 46594, 52970, 52971, 51469, 51580, 51748
''
''        Case 46941
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", Err, objPedidoVenda.lCodigo)
''
''        Case 46084
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", Err, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
''
''        Case 46598
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 51492, 51493, 51494, 51495, 51496, 51497, 51526
''
''        Case 61416, 61417
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149820)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function
''
''Function NFiscalPedido_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''Faz a gravação de uma nota fiscal gerada a partir de um pedido de venda
''
''Dim lErro As Long
''Dim objPedidoVenda As New ClassPedidoDeVenda
''Dim lTransacao As Long
''Dim alComando1(1 To 29) As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
''Dim iIndice As Integer
''Dim dQuantFaturada As Double
''Dim dQuantNaoCancelada As Double
''Dim objMovEstoque As ClassMovEstoque
''Dim dQuantPedida As Double
''Dim dQuantCancelada As Double
''Dim iStatus As Integer
''Dim lNumIntDoc As Long
''
''On Error GoTo Erro_NFiscalPedido_Grava
''
''   'Abre a transacao
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 46598
''
''    'Abre os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        alComando1(iIndice) = Comando_Abrir()
''        If alComando1(iIndice) = 0 Then Error 46055
''    Next
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 46595
''    Next
''
''    'Verifica se já existe nota com esses dados
''    lErro = Comando_Executar(alComando1(29), "SELECT NumIntDoc FROM NFiscalTipoDocInfo WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
''    If lErro <> AD_SQL_SUCESSO Then Error 61418
''
''    lErro = Comando_BuscarPrimeiro(alComando1(29))
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61419
''
''    'Nova nota Fiscal
''    If lErro = AD_SQL_SEM_DADOS Then
''
''        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
''        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
''
''        'Lê e faz lock no Pedido de Venda
''        lErro = CF("PedidoDeVenda_Le_Lock",alComando1(1), objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 36986 Then Error 46079
''        If lErro <> SUCESSO Then Error 46084
''
''        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
''        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then Error 35643
''
''        'Lê os bloqueios do Pedido de venda
''        lErro = CF("BloqueiosPV_Le",objPedidoVenda)
''        If lErro <> SUCESSO Then Error 51470
''
''        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
''        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 25741 Then Error 51471
''        If lErro = 25741 Then Error 46942
''
''        'Verifica se o cliente possui o crédito para faturar a nota fiscal
''        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 25743
''
''        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
''        For iIndice = 1 To objNFiscal.ColItensNF.Count
''            objNFiscal.ColItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
''        Next
''
''        'Tenta liberar reservas do Pedido igual quant. usadas na NF
''        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
''        If lErro <> SUCESSO Then Error 25775
''
''    End If
''
''    'Chama a função de gravação de uma nota fiscal
''    lErro = CF("NFiscal_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61403 Then Error 46594
''
''    If lErro = SUCESSO Then
''
''        'OK ?? Shirley encapsular como em NFiscalFaturaPedido_Grava
''        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
''        If lErro <> SUCESSO Then Error 51749
''
''        'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
''        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida",objNFiscal)
''        If lErro <> SUCESSO Then Error 51497
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52968
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52969
''
''        'Lê ítens de Pedido Venda
''        lErro = CF("PedidoDeVenda_Le_Itens",objPedidoVenda)
''        If lErro <> AD_SQL_SUCESSO Then Error 51516
''
''        'Verifica se tem quantidade não cancelada
''        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada)
''        If lErro <> SUCESSO Then Error 51517
''
''        'Se nao tiver quantidade nao cancelada, baixa o Pedido
''        If dQuantNaoCancelada = 0 Then
''
''            lErro = CF("PedidoDeVenda_Baixar",alComando1, objPedidoVenda)
''            If lErro <> SUCESSO Then Error 51518
''
''        End If
''
''    End If
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 35645
''
''    'Faz o commit
''    lErro = Transacao_Commit()
''    If lErro <> SUCESSO Then Error 35647
''
''    'Fecha os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscalPedido_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscalPedido_Grava:
''
''    NFiscalPedido_Grava = Err
''
''    '?? Shirley tratamento de erros faltando (46614, 46615, 46616 outros ??). Checar tudo e colocar os erros em ordem.
''    '?? Não deixar erro que não existe na rotina
''
''    Select Case Err
''
''        Case 25778
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_QUANT_A_FATURAR", Err, objNFiscal.ColItensNF(iIndice).lNumIntItemPedVenda)
''
''        Case 35642
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
''
''        Case 35643
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", Err)
''
''        Case 46055
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 25743, 25775, 35645, 46079, 46594, 51470, 51471, 52968, 53969, 51497, 51516 To 51520, 51749
''
''        Case 46084
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", Err, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
''
''        Case 46598
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 46942
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", Err, objPedidoVenda.lCodigo)
''
''        Case 61418, 61419
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149821)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function
''
Function NFiscalRemessa_Grava_BD(ByVal objNFiscal As ClassNFiscal) As Long
'Faz a Inserção de uma Nota Fiscal de Saida-Remessa no BD

Dim lErro As Long
Dim alComando(0 To 6) As Long
Dim alComando3(1 To 4) As Long
Dim alComando4(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim lNumIntNF As Long
Dim lNumIntItemNF As Long
Dim iIndice As Integer
Dim objItemNF As ClassItemNF
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objMovEstoque As New ClassMovEstoque
Dim lCodigo As Long
Dim objItemMovEstoque As ClassItemMovEstoque

On Error GoTo Erro_NFiscalRemessa_Grava_BD

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 42094
    Next

    'copia alguns alComando para alComando3
    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then Error 42094
    Next
    
    'copia alguns alComando para alComando4
    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = Comando_Abrir()
        If alComando4(iIndice) = 0 Then Error 42094
    Next
    
    If objNFiscal.lNumNotaFiscal = 0 Then
    
        'Gera o Número para a Nota Fiscal e atualiza a Tabela de Serie
        lErro = CF("NFiscalNumAuto", objNFiscal)
        If lErro <> SUCESSO Then Error 60442
   
        'Verifica se já existe a Nota Fiscal e dá mensagem ao Usuário
        lErro = CF("NFiscalRemessa_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 42063 Then Error 39221
        
        If lErro = 42063 Then Error 32251
    
    Else
    
        'Verifica se já existe a Nota Fiscal e dá mensagem ao Usuário
        lErro = CF("NFiscalRemessa_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 42063 Then Error 39221
        
        If lErro <> 42063 Then Error 32252
        
        'Tratar Gravação da contabilidade
        Error 61408
    
    End If
    
    'Gera o Número Interno da Nota Fiscal
    lErro = CF("NFiscal_Automatico", lNumIntNF)
    If lErro <> SUCESSO Then Error 42095
    
    objNFiscal.lNumIntDoc = lNumIntNF

    With objNFiscal

        'Insere no BD
        lErro = Comando_Executar(alComando(0), "INSERT INTO NFiscal (DataAtualizacao, NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento,DataReferencia, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, VolumeNumero, FreteRespons, FilialPedido,HoraSaida, CodTranspRedesp, DetPagFrete, Moeda, TaxaMoeda, VolumeTotal, SemDataSaida) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            gdtDataHoje, lNumIntNF, STATUS_BAIXADO, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, .iFilialPedido, CDbl(.dtHoraSaida), .iCodTranspRedesp, .iDetPagFrete, .iMoeda, .dTaxaMoeda, .dVolumeTotal, .iSemDataSaida)
        If lErro <> AD_SQL_SUCESSO Then Error 42096

    End With

    lErro = CF("NFiscal_GravaTributacao", objNFiscal, alComando(4), alComando(5))
    If lErro <> SUCESSO Then Error 42097
    
    'Para cada Ítem da Nota Fiscal
    For Each objItemNF In objNFiscal.ColItensNF
        
        'Gera o Número Automático
        lErro = CF("NFiscalItem_Automatico", lNumIntItemNF)
        If lErro <> SUCESSO Then Error 42098

        objItemNF.lNumIntNF = lNumIntNF
        objItemNF.lNumIntDoc = lNumIntItemNF

        With objItemNF
            
            'Insere no BD
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensNFiscal (NumIntNF, Item, Status, Produto, UnidadeMed, Quantidade, Almoxarifado, PrecoUnitario, PercDesc, ValorDesconto, DataEntrega, DescricaoItem, ValorAbatComissao, NumIntPedVenda, NumIntItemPedVenda, NumIntDoc, NumIntTrib, NumIntDocOrig) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", lNumIntNF, .iItem, STATUS_BAIXADO, .sProduto, .sUnidadeMed, .dQuantidade, .iAlmoxarifado, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, lNumIntItemNF, .lNumIntTrib, .lNumIntDocOrig)
            If lErro <> AD_SQL_SUCESSO Then Error 42099
        
            lErro = CF("NFiscal_GravaTributacaoItem", objItemNF, alComando(3), alComando(6))
            If lErro <> SUCESSO Then Error 42100
        
        End With
        
        lErro = CF("ItensNFGrade_Inclui", objItemNF)
        If lErro <> SUCESSO Then Error 42098
    
    Next

        'gera os movimentos de estoque, se necessários
    lErro = CF("MovEstoque_Gera", alComando3(), alComando4(), objNFiscal)
    If lErro <> SUCESSO Then Error 42098

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next

    NFiscalRemessa_Grava_BD = SUCESSO

    Exit Function

Erro_NFiscalRemessa_Grava_BD:

    NFiscalRemessa_Grava_BD = Err

    Select Case Err

        Case 42094
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", 0)

        Case 20823, 42095, 42098, 42101, 42103, 42104, 35425, 42097, 42100, 60442, 39221

        Case 42096
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFISCAL1", Err, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 42099
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSNFISCAL", Err, objNFiscal.lNumNotaFiscal)

        Case 42102
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", Err, objNFiscal.iTipoNFiscal)
        
        Case 61408 'Tratar a gravação da contabilidade
        
        Case 32251, 32252
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_NFISCAL_NUMAUTO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149822)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next
    Exit Function

End Function

Function NFiscalNum_Automatico(ByVal sSerie As String, lNumAuto As Long) As Long
'Retorna o número do próximo NumNFiscal disponivel

Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lErro As Long
Dim lNumNFiscal As Long
Dim lNumNFiscalUsado As Long
Dim iFim_de_Arquivo As Integer

On Error GoTo Erro_NFiscalNum_Automatico

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 39006

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 30577

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 30579

    'Pesquisa o número do NumNFiscal gerado automaticamente pelo sistema
    lErro = Comando_ExecutarPos(lComando, "SELECT ProxNumNFiscal FROM Serie WHERE Serie = ?", 0, lNumNFiscal, sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 30582

    'le o registro com o número do NumNFiscal automático
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30583

    'loca o registro que guarda o numero do NumNFiscal gerado automaticamente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30584

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de NumNFiscal maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando1, "SELECT NFiscal.NumNotaFiscal FROM NFiscal, TiposDocInfo WHERE NFiscal.NumNotaFiscal >= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Tipo = ? ORDER BY NumNotaFiscal", lNumNFiscalUsado, lNumNFiscal, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then Error 30585

    'le o primeiro codigo >= ao codigo automatico
    iFim_de_Arquivo = Comando_BuscarPrimeiro(lComando1)

    'pesquisa o proximo número de codigo disponível
    Do While iFim_de_Arquivo <> AD_SQL_SEM_DADOS

        If lNumNFiscal < lNumNFiscalUsado Then Exit Do

        If lNumNFiscalUsado = lNumNFiscal Then
            lNumNFiscal = lNumNFiscal + 1
        End If

        iFim_de_Arquivo = Comando_BuscarProximo(lComando1)

    Loop

    'Valor de retorno da funcao
    lNumAuto = lNumNFiscal

    lNumNFiscal = lNumNFiscal + 1

    'atualiza o numero do NumNFiscal gerado automaticamente
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET ProxNumNFiscal = ?", lComando, lNumNFiscal)
    If lErro <> AD_SQL_SUCESSO Then Error 30586

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 39007

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)

    NFiscalNum_Automatico = SUCESSO

    Exit Function

Erro_NFiscalNum_Automatico:

    NFiscalNum_Automatico = Err

    Select Case Err

        Case 39006
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 39007
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 30577, 30579
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 30582, 30583
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case 30584
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", Err)

        Case 30585
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL4", Err)

        Case 30586
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149823)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'Function NFiscalRemessa_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'
'Dim lErro As Long
'Dim alComando(0 To 2) As Long
'Dim lTransacao As Long
'Dim lNumIntDoc As Long
'Dim dtDataEmissao As Date
'Dim vbMsgRes As VbMsgBoxResult
'Dim iIndice As Integer
'
'On Error GoTo Erro_NFiscalRemessa_Grava
'
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 42059
'
'    'Abre os Comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then Error 42060
'    Next
'
'    lErro = CF("NFiscalRemessa_Lock_Gravacao",objNFiscal, alComando(1))
'    If lErro <> SUCESSO Then Error 39220
'
'    lErro = CF("NFiscal_TabelaPreco_Lock",alComando(2), objNFiscal)
'    If lErro <> SUCESSO Then Error 51624
'
'    'Faz os "Lock's" relacionados aos itens da NF
'    lErro = CF("ItensNFiscalRem_Lock_Gravacao",objNFiscal)
'    If lErro <> SUCESSO Then Error 42086
'
'    lErro = CF("NFiscalRemessa_Grava_BD",objNFiscal)
'    If lErro <> SUCESSO And lErro <> 61408 Then Error 42087
'
'    If objNFiscal.lFornecedor > 0 Then
'
'        'Grava os dados contábeis (contabilidade)
'        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lFornecedor, objNFiscal.iFilialForn, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
'        If lErro <> SUCESSO Then Error 36503
'
'    Else
'
'        'Grava os dados contábeis (contabilidade)
'        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
'        If lErro <> SUCESSO Then Error 36504
'
'    End If
'
'    'Faz o Commit da Transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 42088
'
'    'Fecha os comanos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    NFiscalRemessa_Grava = SUCESSO
'
'    Exit Function
'
'Erro_NFiscalRemessa_Grava:
'
'    NFiscalRemessa_Grava = Err
'
'    Select Case Err
'
'        Case 36503, 36504, 39220, 42086, 42087, 51624
'
'        Case 42059
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
'
'        Case 42060
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 42088
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149824)
'
'    End Select
'
'    Call Transacao_Rollback
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Private Function Serie_Grava_Trans(ByVal objSerie As ClassSerie) As Long

Dim lErro As Long
Dim lComando(2) As Long
Dim lCodEndereco As Long
Dim iIndice As Integer
Dim tSerie As typeSerie
Dim iCodigo  As Integer
Dim objNFiscal As New ClassNFiscal
Dim vbMsgRes As VbMsgBoxResult, iMaxLinhasNF As Integer

On Error GoTo Erro_Serie_Grava_Trans

    'Abre os  comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 22203
    Next

    tSerie.sNomeTsk = String(STRING_NOME_TSK, 0)
    
    'Lê a Serie no BD
    lErro = Comando_ExecutarPos(lComando(0), "SELECT MaxLinhasNF, ProxNumNFiscal, TipoFormulario, NomeTsk FROM Serie WHERE FilialEmpresa = ? AND Serie = ?", 0, iMaxLinhasNF, tSerie.lProxNumNFiscal, tSerie.iTipoFormulario, tSerie.sNomeTsk, giFilialEmpresa, objSerie.sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 22205

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22206

    'Serie não existe - CRIACAO
    If lErro = AD_SQL_SEM_DADOS Then

        'Preenche FilialEmpresa de objSerie
        objSerie.iFilialEmpresa = giFilialEmpresa

        'Insere a Serie na tabela Serie
        lErro = Comando_Executar(lComando(1), "INSERT INTO Serie (FilialEmpresa, Serie, ProxNumNFiscal, TipoFormulario, NomeTsk, MaxLinhasNF) VALUES (?,?,?,?,?,?)", objSerie.iFilialEmpresa, objSerie.sSerie, objSerie.lProxNumNFiscal, objSerie.iTipoFormulario, objSerie.sNomeTsk, objSerie.iMaxLinhasNF)
        If lErro <> AD_SQL_SUCESSO Then Error 22207

    Else 'Serie existe - ALTERACAO
        
        lErro = Comando_LockExclusive(lComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 60432
        
        lErro = CF("Serie_Grava_Trans_Aux", objSerie, iMaxLinhasNF)
        If lErro <> AD_SQL_SUCESSO Then Error 32307
        
        If objSerie.lProxNumNFiscal <> tSerie.lProxNumNFiscal Or objSerie.iTipoFormulario <> tSerie.iTipoFormulario Or objSerie.sNomeTsk <> tSerie.sNomeTsk Or objSerie.iMaxLinhasNF <> iMaxLinhasNF Then
            
            'faz os teste para Nota Fiscal
            objNFiscal.iFilialEmpresa = giFilialEmpresa
            objNFiscal.sSerie = objSerie.sSerie
            objNFiscal.lNumNotaFiscal = objSerie.lProxNumNFiscal
            
            'Verifica se já existe Nota Fiscal cadastrada maior ou igual a esse Numero (com Data mais recente)
            lErro = NFiscal_Verifica_Numero_Maior(objNFiscal)
            If lErro <> SUCESSO And lErro <> 60427 Then Error 60433
            
            'Avisa o Usuario
            If lErro = SUCESSO Then
            
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_EXISTE_NF_MAIOR_OU_IGUAL", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, objNFiscal.iFilialEmpresa)
                If vbMsgRes = vbNo Then Error 60434
                
            End If
            
            Set objNFiscal = New ClassNFiscal
            
            objNFiscal.iFilialEmpresa = giFilialEmpresa
            objNFiscal.sSerie = objSerie.sSerie
            
            'Lê a Ultima Nota Cadastrada no Sistema
            lErro = CF("NFiscal_Le_UltimaCadastrada", objNFiscal)
            If lErro <> SUCESSO And lErro <> 60431 Then Error 60435
            
            'Se encontrou última nota cadastrada
            If lErro = SUCESSO Then
                
                'Avisa ao Usuario
                vbMsgRes = Rotina_Aviso(vbOKOnly, "AVISO_NF_ULTIMA_GRAVADA", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, objNFiscal.iFilialEmpresa)

            End If
                            
            'Atualiza ProxNumNFiscal na tabela de Serie
            lErro = Comando_ExecutarPos(lComando(1), "UPDATE Serie SET ProxNumNFiscal = ?, TipoFormulario = ?, NomeTsk = ?, MaxLinhasNF = ?", lComando(0), objSerie.lProxNumNFiscal, objSerie.iTipoFormulario, objSerie.sNomeTsk, objSerie.iMaxLinhasNF)
            If lErro <> AD_SQL_SUCESSO Then Error 22208
                    
        End If
        
    End If
    
    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Serie_Grava_Trans = SUCESSO

    Exit Function

Erro_Serie_Grava_Trans:

    Serie_Grava_Trans = Err

    Select Case Err

        Case 22204
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 22203
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22205, 22206
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case 22207
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SERIE", Err)

        Case 22209
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 22208
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_SERIE", Err)
        
        Case 60432
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", Err)
        
        Case 60433, 60435, 32307 'Erros já Tratados nas Rotinas Chamadas
        
        Case 60434 'Caso desista de Gravar a Nota Fiscal
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149825)

    End Select

    For iIndice = 0 To 2
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function Serie_Grava(ByVal objSerie As ClassSerie, bPadrao As Boolean) As Long
'Grava a Serie no BD, se o bPadrão for True então grava a série como padrão em FatConfig

Dim lErro As Long
Dim lTransacao As Long
Dim objFATConfig As New ClassFATConfig
Dim alComando1(2) As Long
Dim iIndice As Integer
Dim sSeriePadrao As String
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Serie_Grava

    'Abre os  comandos para a Gravacao do Config
    For iIndice = 0 To 2
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then Error 22203
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 22204
    
    'Grava a Série no BD
    lErro = Serie_Grava_Trans(objSerie)
    If lErro <> SUCESSO Then Error 64113
            
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then Error 64119
    
    If bPadrao = False And sSeriePadrao = objSerie.sSerie Then Error 64120
    
    'Se é a primeira sSérie então
    If bPadrao = False And sSeriePadrao = "" Then
        
        'Dá o aviso e marca para a Gravação
        vbMsgRes = Rotina_Aviso(vbOKOnly, "AVISO_SERIE_GRAVADA_PADRAO", objSerie.sSerie)
        bPadrao = True
        
    End If
    
    'Se a Série é a Nova Padrão
    If bPadrao = True Then
                
        'Grava a padrão no FatConfig
        objFATConfig.iFilialEmpresa = giFilialEmpresa
        objFATConfig.sCodigo = FATCFG_SERIE_PADRAO
        objFATConfig.sConteudo = objSerie.sSerie
    
        lErro = FATConfig_Grava_Trans(objFATConfig, alComando1)
        If lErro <> SUCESSO Then Error 64114
    
    End If
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 22209

    For iIndice = 0 To 2
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Serie_Grava = SUCESSO

    Exit Function

Erro_Serie_Grava:

    Serie_Grava = Err

    Select Case Err

        Case 22204
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 64113, 64114, 64119
                
        Case 22209
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 64120
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_SEM_PADRAO", Err, objSerie.sSerie)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149826)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 2
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Exit Function

End Function

Function Serie_Exclui(ByVal objSerie As ClassSerie) As Long
'Exclui a Serie

Dim lErro As Long
Dim lComando(2) As Long
Dim lTransacao As Long
Dim colCodNotasFiscais As New Collection
Dim lTotal As Long
Dim iIndice As Integer
Dim sSerie As String
Dim objFATConfig As New ClassFATConfig

On Error GoTo Erro_Serie_Exclui

    'Abre comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then gError 22189
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 22190

    sSerie = String(STRING_SERIE, 0)

    'Seleciona a Serie a ser excluida
    lErro = Comando_ExecutarPos(lComando(0), "SELECT Serie FROM Serie WHERE FilialEmpresa = ? AND Serie =?", 0, sSerie, giFilialEmpresa, objSerie.sSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 22191

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 22192
    
    If lErro = AD_SQL_SEM_DADOS Then gError 22193

    'Lock da Serie
    lErro = Comando_LockExclusive(lComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 22194

    'Verifica se Serie esta relacionada com Notas Fiscais
    lErro = NFs_Serie_Nao_Relacionada(sSerie)
    If lErro <> SUCESSO Then gError 22195
    
    'Se a série é a Padrão, atualiza FatConfig
    lErro = Trata_Serie_Padrao(objSerie.sSerie)
    If lErro <> SUCESSO Then gError 500177
    
    'Exclui a Serie
    lErro = Comando_ExecutarPos(lComando(1), "DELETE FROM Serie", lComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 22197
        
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 22198

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Serie_Exclui = SUCESSO

    Exit Function

Erro_Serie_Exclui:

    Serie_Exclui = gErr

    Select Case gErr

        'Tratado na rotina chamada
        Case 22195, 22196, 500177

        Case 22194
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", gErr)

        Case 22189
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 22190
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 22191, 22192
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", gErr)

        Case 22193
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", gErr, objSerie.sSerie)

        Case 22197
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SERIE", gErr, objSerie.sSerie)

        Case 22198
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149827)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 1
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function Trata_Serie_Padrao(ByVal sSerie As String) As Long
'Verifica se a série passada é a padrão e se for, exclui ela de FatConfig
    
Dim lErro As Long
Dim sSeriePadrao As String
Dim objFATConfig As New ClassFATConfig
Dim alComando(0 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Trata_Serie_Padrao
    
    'Abertura comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 500178
    Next
    
    'Verifica se a série padrão é igual a série passada
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then gError 500179
            
    'Se é igual
    If sSerie = sSeriePadrao Then
    
        'Grava a padrão no FatConfig
        objFATConfig.iFilialEmpresa = giFilialEmpresa
        objFATConfig.sCodigo = FATCFG_SERIE_PADRAO
        objFATConfig.sConteudo = ""
    
        lErro = FATConfig_Grava_Trans(objFATConfig, alComando)
        If lErro <> SUCESSO Then gError 500179
    
    End If
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Trata_Serie_Padrao = SUCESSO
    
    Exit Function

Erro_Trata_Serie_Padrao:

    Select Case gErr
    
        Case 500178
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 500179
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149828)
    
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function NFs_Serie_Nao_Relacionada(ByVal sSerie As String) As Long
'Verifica se Serie está relacionada com Notas Fiscais emitidas pela Empresa (pendentes, lançadas ou baixadas)

Dim lErro As Long, lComando As Long, lNumIntDoc As Long
Dim iEmitenteEmpresa As Integer
Dim lNumNF As Long
Dim iFilialEmpresaNF As Integer

On Error GoTo Erro_NFs_Serie_Nao_Relacionada

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27487

    iEmitenteEmpresa = EMITENTE_EMPRESA

'mario 2/7/99 Remover NFiscalBaixada comando reposicionado devido a retirada do codigo abaixo
'    lErro = Comando_Executar(lComando, "SELECT NFiscal.NumIntDoc FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Emitente = ? AND NFiscal.FilialEmpresa = ? AND NFiscal.Serie = ? UNION SELECT NFiscalBaixadas.NumIntDoc FROM NFiscalBaixadas, TiposDocInfo WHERE NFiscalBaixadas.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Emitente = ? AND NFiscalBaixadas.FilialEmpresa = ? AND NFiscalBaixadas.Serie = ?", lNumIntDoc, iEmitenteEmpresa, giFilialEmpresa, sSerie, iEmitenteEmpresa, giFilialEmpresa, sSerie)
'    If lErro <> AD_SQL_SUCESSO Then Error 27488

    lErro = Comando_Executar(lComando, "SELECT NFiscal.NumIntDoc, NFiscal.NumNotaFiscal, NFiscal.FilialEmpresa FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Emitente = ? AND NFiscal.FilialEmpresa = ? AND NFiscal.Serie = ?", lNumIntDoc, lNumNF, iFilialEmpresaNF, iEmitenteEmpresa, giFilialEmpresa, sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 27488

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27489
    
    'Se achou alguma nota relacionada
    If lErro = AD_SQL_SUCESSO Then Error 27490
        
    lErro = Comando_Fechar(lComando)
    
    NFs_Serie_Nao_Relacionada = SUCESSO

    Exit Function

Erro_NFs_Serie_Nao_Relacionada:

    NFs_Serie_Nao_Relacionada = Err

    Select Case Err

        Case 27487
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
                    
        Case 27488, 27489
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_SERIE", Err)
        
        Case 27490 'achou alguma nota relacionada
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXISTEM_NOTAS_FISCAIS_SERIE", Err, lNumNF, iFilialEmpresaNF)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149829)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function FAT_Instalacao_Filial(ByVal iFilialEmpresa As Integer) As Long
'faz as inicializacoes necessarias à criacao de uma nova filial especificas do modulo

Dim lErro As Long, lComando As Long

On Error GoTo Erro_FAT_Instalacao_Filial

    'a matriz já vem pré-inicializada
    If iFilialEmpresa <> FILIAL_MATRIZ Then
        
        lComando = Comando_Abrir()
        If lComando = 0 Then Error 41924
            
        lErro = Comando_Executar(lComando, "INSERT INTO FATConfig (Codigo,FilialEmpresa,Descricao,Tipo,Conteudo) VALUES (?,?,?,?,?)", "FILIAL_FATURAMENTO", iFilialEmpresa, "Filial de Faturamento default para Pedidos de Venda", 1, CStr(iFilialEmpresa))
        If lErro <> AD_SQL_SUCESSO Then Error 41925
        
        lErro = Comando_Executar(lComando, "INSERT INTO FATConfig (Codigo,FilialEmpresa,Descricao,Tipo,Conteudo) VALUES (?,?,?,?,?)", "NUM_PROX_CODIGO_PEDVENDA", iFilialEmpresa, "Número do próximo código de Pedido de Venda", 2, "1")
        If lErro <> AD_SQL_SUCESSO Then Error 41926
                
        lErro = Comando_Executar(lComando, "INSERT INTO FATConfig (Codigo,FilialEmpresa,Descricao,Tipo,Conteudo) VALUES (?,?,?,?,?)", "SERIE_PADRAO", iFilialEmpresa, "Série default", 0, "")
        If lErro <> AD_SQL_SUCESSO Then Error 64111
                
        Call Comando_Fechar(lComando)
    
    End If
    
    FAT_Instalacao_Filial = SUCESSO
     
    Exit Function
    
Erro_FAT_Instalacao_Filial:

    FAT_Instalacao_Filial = Err
     
    Select Case Err
          
        Case 41924
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41925, 41926, 64111
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ARQCONFIG", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149830)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function FATConfig_Grava_Configs1(ByVal objFAT As ClassFAT) As Long
'grava na tabela FATConfig uma colecao de registros de configuracao

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long
Dim colConfigs As New ColFATConfig
Dim colConfigs1 As New ColCRFATConfig

On Error GoTo Erro_FATConfig_Grava_Configs1
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 55007
    
    Call objFAT.Preenche_ColConfig(colConfigs)
    
    lErro = CF("FATConfig_Grava_Configs_Trans", colConfigs)
    If lErro <> SUCESSO Then Error 55008
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 55010
    
    FATConfig_Grava_Configs1 = SUCESSO
    
    Exit Function
    
Erro_FATConfig_Grava_Configs1:
    
    FATConfig_Grava_Configs1 = Err
    
    Select Case Err
    
        Case 55007
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
    
        Case 55008, 55009
        
        Case 55010
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149831)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

'Maristela (Inicio) Alteração: Não inclui mais as Datas da tabela FilialClienteFilEmp
Function FilialCliente_Grava_Estatistica(ByVal objNFiscal As ClassNFiscal) As Long
'Tem que ser chamado dentro de Transação
'Atualiza as estatísticas do Cliente

Dim lErro As Long
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objFilCliFilEmp As New ClassFilCliFilEmp
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long

On Error GoTo Erro_FilialCliente_Grava_Estatistica

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52534

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 52535
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 52538
    
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal

    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then Error 52536
    
    'Trata-se de uma nota fiscal de venda
    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
        
        objFilCliFilEmp.lCodCliente = objNFiscal.lCliente
        objFilCliFilEmp.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objFilCliFilEmp.iCodFilial = objNFiscal.iFilialCli
        
        'Lê e locka FilialClienteFilEmp
        lErro = CF("FilCliFilEmp_Le_Lock", lComando, objFilCliFilEmp)
        If lErro <> SUCESSO And lErro <> 52542 Then Error 52537
        
        'se não encontrou
        If lErro = 52542 Then
            'Maristela
            'Insere na tabela de FilialClienteFilEmp
            lErro = Comando_Executar(lComando3, "INSERT INTO FilialClienteFilEmp (FilialEmpresa, CodCliente, CodFilial, NumeroCompras ,MediaCompra, ValorAcumuladoCompras) VALUES (?,?,?,?,?,?)", objNFiscal.iFilialEmpresa, objNFiscal.lCliente, objNFiscal.iFilialCli, 1, objNFiscal.dValorTotal, objNFiscal.dValorTotal)
            If lErro <> AD_SQL_SUCESSO Then Error 52587
            'Maristela
        'se encontrou
        Else
            'recalcula os valores
            objFilCliFilEmp.dValorAcumuladoCompras = objFilCliFilEmp.dValorAcumuladoCompras + objNFiscal.dValorTotal
            objFilCliFilEmp.lNumeroCompras = objFilCliFilEmp.lNumeroCompras + 1
            objFilCliFilEmp.dMediaCompra = objFilCliFilEmp.dValorAcumuladoCompras / objFilCliFilEmp.lNumeroCompras
            
            'Maristela
            'Atualiza a tabela de FilialClienteFilEmp
            lErro = Comando_ExecutarPos(lComando2, "UPDATE FilialClienteFilEmp SET NumeroCompras =?,MediaCompra=?, ValorAcumuladoCompras=?", lComando, objFilCliFilEmp.lNumeroCompras, objFilCliFilEmp.dMediaCompra, objFilCliFilEmp.dValorAcumuladoCompras)
            If lErro <> AD_SQL_SUCESSO Then Error 52539
            'Maristela
        End If
    
    End If
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    FilialCliente_Grava_Estatistica = SUCESSO

    Exit Function

Erro_FilialCliente_Grava_Estatistica:

    FilialCliente_Grava_Estatistica = Err
    
    Select Case Err

        Case 52534, 52535, 52538
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 52536, 52537
        
        Case 52539
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FILIALCLIENTEFILEMP", Err)
        
        Case 52587
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERIR_FILIALCLIENTEFILEMP", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149832)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function
'Maristela (Fim)

Function ProdutoVendido_Grava_Estatisticas(ByVal objNFiscal As ClassNFiscal, ByVal iCancelamento As Integer) As Long
'Grava a estatística dos produtos vendidos

Dim objTipoDocInfo As New ClassTipoDocInfo
Dim lErro As Long

On Error GoTo Erro_ProdutoVendido_Grava_Estatisticas

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Le o tipo do produto
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then Error 52714
    
    'verifica se é Notafiscal de venda    'Alterado por Leo em 14/02/02
    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Or objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL Or (objTipoDocInfo.iCodigo = DOCINFO_NFISCP Or objTipoDocInfo.iCodigo = DOCINFO_NFISFCP)) Then
        
        'Grava a estatistica do Dia do produto
        lErro = SldDiaFat_Grava_Est(objNFiscal, objTipoDocInfo, iCancelamento)
        If lErro <> SUCESSO Then Error 52715
        
        'Grava a estatística do Mês do produto
        lErro = SldMesFat_Grava_Est(objNFiscal, objTipoDocInfo, iCancelamento)
        If lErro <> SUCESSO Then Error 52716
    
    End If
            
    ProdutoVendido_Grava_Estatisticas = SUCESSO
    
    Exit Function
    
Erro_ProdutoVendido_Grava_Estatisticas:
    
    ProdutoVendido_Grava_Estatisticas = Err

    Select Case Err
        
        Case 52714, 52715, 52716 'Tratado nas rotinas chamadas
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149833)

    End Select

    Exit Function

End Function

Private Function SldDiaFat_Grava_Est(ByVal objNFiscal As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo, ByVal iCancelamento As Integer) As Long
'Grava a estatística do Dia do produto

Dim lErro As Long
Dim objItemNF As New ClassItemNF
Dim objSldDiaFat As New ClassSldDiaFat
Dim dQuantUMVenda As Double
Dim dFator As Double
Dim lComando As Long, lComando2 As Long, lComando3 As Long
Dim objProduto As New ClassProduto
Dim sUMVenda As String
Dim iIndice As Integer
Dim iClasseUM As Integer
Dim sProduto As String
Dim dValorTotal As Double
Dim dValorDesconto As Double

On Error GoTo Erro_SldDiaFat_Grava_Est
        
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 52717

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 52718
            
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 52974
            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.ColItensNF
        
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
        
            If objItemNF.colItensRomaneioGrade.Count = 0 Then
                sUMVenda = objItemNF.sUMVenda
                dQuantUMVenda = objItemNF.dQuantidade
                sProduto = objItemNF.sProduto
                dValorTotal = objItemNF.dValorTotal
                dValorDesconto = objItemNF.dValorDesconto
            Else
                If iIndice = 0 Then iIndice = iIndice + 1
                dQuantUMVenda = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                sProduto = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                dValorTotal = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)
                dValorDesconto = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)
                                
                objProduto.sCodigo = sProduto
                
                lErro = CF("Produto_Le", objProduto)
                '??? Tratar SHirley
                
                sUMVenda = objProduto.sSiglaUMVenda
            End If
            'Converte as unidades de medida
            lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, sUMVenda, dFator)
            If lErro <> SUCESSO Then gError 52720
        
            'Quantidade convertida
            dQuantUMVenda = dQuantUMVenda * dFator
                
            objSldDiaFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
            objSldDiaFat.dtData = objNFiscal.dtDataEmissao
            objSldDiaFat.sProduto = sProduto
                
            'Lê todos os atributos na tabela SldDiaFat e faza lock exclusive
            lErro = CF("SldDiaFat_Le_Lock", lComando, objSldDiaFat)
            If lErro <> SUCESSO And lErro <> 52729 Then gError 52719
                            
            If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM) Then
              
                If iCancelamento = CANCELAMENTO_DOC Then
                    
                    objSldDiaFat.dValorFaturado = -dValorTotal
                    objSldDiaFat.dTotalDescontos = -dValorDesconto
                                
                'Trecho alterado por Leo em 14/02/02
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldDiaFat.dQuantFaturada = 0
                    Else
                        objSldDiaFat.dQuantFaturada = -dQuantUMVenda
                    End If
                
                Else
            
                    objSldDiaFat.dValorFaturado = dValorTotal
                    objSldDiaFat.dTotalDescontos = dValorDesconto
                    
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldDiaFat.dQuantFaturada = 0
                    Else
                        objSldDiaFat.dQuantFaturada = dQuantUMVenda
                    End If
                
                'Leo até aqui
                
                End If
            
            ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
            
                If iCancelamento = CANCELAMENTO_DOC Then
                    
                    objSldDiaFat.dValorDevolvido = -dValorTotal
                    objSldDiaFat.dQuantDevolvida = -dQuantUMVenda
                    
                Else
                
                    objSldDiaFat.dValorDevolvido = dValorTotal
                    objSldDiaFat.dQuantDevolvida = dQuantUMVenda
                
                End If
            
            End If
                            
            If lErro = SUCESSO Then 'Registro SldDiaFat existe no BD
                    
            'Trecho alterado por Leo em 14/02/02
                    
                'Verifica se o documento é TIPODOCINFO_FATURAMENTO_SIM
                If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Then
                
                    'Atualiza os campos referentes a notas de faturamneto em SldDiaFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?, TotalDescontos = TotalDescontos + ?, ValorDevolvido = ?, QuantDevolvida = ?", lComando, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
                    If lErro <> AD_SQL_SUCESSO Then gError 52721
            
                ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
                
                    'Atualiza os campos referentes a notas de devolução em SldDiaFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado = ?, QuantFaturada = ?, TotalDescontos = ?, ValorDevolvido = ValorDevolvido + ?, QuantDevolvida = QuantDevolvida + ?", lComando, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
                    If lErro <> AD_SQL_SUCESSO Then gError 94323
            
                End If
                
            'Leo até aqui
            
            Else 'Registro SldDiaFat não existe no BD
    
                If objNFiscal.iFilialEmpresa = 0 Then objNFiscal.iFilialEmpresa = giFilialEmpresa
                
                lErro = Comando_Executar(lComando3, "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorFaturado , QuantFaturada, TotalDescontos, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?,?,?,?)", objNFiscal.iFilialEmpresa, objNFiscal.dtDataEmissao, sProduto, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
                If lErro <> AD_SQL_SUCESSO Then gError 52972
                    
                        
            End If
        Next
    Next
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    SldDiaFat_Grava_Est = SUCESSO
    
    Exit Function
    
Erro_SldDiaFat_Grava_Est:
    
    SldDiaFat_Grava_Est = gErr

    Select Case gErr
        
        Case 52717, 52718, 52974
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 52719, 52720, 52779 'Tratados nas rotinas chamadas
        
        Case 52721, 94323
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAFAT", gErr, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
        
        Case 52972, 89786
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFAT", gErr, giFilialEmpresa, objItemNF.sProduto, objNFiscal.dtDataEmissao)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149834)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    Exit Function

End Function
        
Private Function SldMesFat_Grava_Est(ByVal objNFiscal As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo, ByVal iCancelamento As Integer) As Long
'Grava a estatística do Mês do produto

Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim objSldMesFat As New ClassSldMesFat
Dim iMes As Integer
Dim dFator As Double
Dim dQuantUMVenda As Double
Dim sMes As String
Dim lComando As Long, lComando2 As Long, lComando3 As Long
Dim objProduto As New ClassProduto
Dim sUMVenda As String
Dim iIndice As Integer
Dim iClasseUM As Integer
Dim sProduto As String
Dim dValorTotal As Double
Dim dValorDesconto As Double

On Error GoTo Erro_SldMesFat_Grava_Est
    
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 52722

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 52723
                
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 52975
            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.ColItensNF
        
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
        
            If objItemNF.colItensRomaneioGrade.Count = 0 Then
                sUMVenda = objItemNF.sUMVenda
                dQuantUMVenda = objItemNF.dQuantidade
                sProduto = objItemNF.sProduto
                dValorTotal = objItemNF.dValorTotal
                dValorDesconto = objItemNF.dValorDesconto
            Else
                If iIndice = 0 Then iIndice = iIndice + 1
                dQuantUMVenda = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                sProduto = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                dValorTotal = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)
                dValorDesconto = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)
                                
                objProduto.sCodigo = sProduto
                
                lErro = CF("Produto_Le", objProduto)
                '??? Tratar SHirley
                
                sUMVenda = objProduto.sSiglaUMVenda
            End If
            
            'Converte as unidades de medida
            lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, sUMVenda, dFator)
            If lErro <> SUCESSO Then gError 52725
        
            'Quantidade convertida
            dQuantUMVenda = dQuantUMVenda * dFator
                
            objSldMesFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
            objSldMesFat.iAno = Year(objNFiscal.dtDataEmissao)
            objSldMesFat.sProduto = sProduto
            
            iMes = Month(objNFiscal.dtDataEmissao)
            sMes = CStr(iMes)
                                        
            'Lê todos os atributos na tabela SldMesFat e faza lock exclusive
            lErro = SldMesFat_Le_Lock_Mes(lComando, objSldMesFat, iMes)
            If lErro <> SUCESSO And lErro <> 59264 Then gError 52724
                            
            If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM) Then
        
                If iCancelamento = CANCELAMENTO_DOC Then
            
                    objSldMesFat.dValorFaturado(iMes) = -dValorTotal
                    objSldMesFat.dTotalDescontos(iMes) = -dValorDesconto
                              
                'Trecho alterado por Leo em 14/02/02
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldMesFat.dQuantFaturada(iMes) = 0
                    Else
                        objSldMesFat.dQuantFaturada(iMes) = -dQuantUMVenda
                    End If
                    
                    
                Else
                
                    objSldMesFat.dValorFaturado(iMes) = dValorTotal
                    objSldMesFat.dTotalDescontos(iMes) = dValorDesconto
                
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldMesFat.dQuantFaturada(iMes) = 0
                    Else
                        objSldMesFat.dQuantFaturada(iMes) = dQuantUMVenda
                    End If
                'Leo até aqui
                                
                End If
            
            ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
            
                If iCancelamento = CANCELAMENTO_DOC Then
                
                    objSldMesFat.dValorDevolvido(iMes) = -dValorTotal
                    objSldMesFat.dQuantDevolvida(iMes) = -dQuantUMVenda
                        
                Else
                        
                    objSldMesFat.dValorDevolvido(iMes) = dValorTotal
                    objSldMesFat.dQuantDevolvida(iMes) = dQuantUMVenda
                    
                End If
            
            End If
            
            If lErro = SUCESSO Then
            
            'Trecho alterado por Leo em 14/02/02
            
                'Verifica se o tipo de faturamento é TIPODOCINFO_FATURAMENTO_SIM
                If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Then
            
                    'Atualiza os campos referentes a Notas de Faturamento em SldMesFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?, TotalDescontos" & sMes & " = TotalDescontos" & sMes & " + ?, ValorDevolvido" & sMes & " = ?, QuantDevolvida" & sMes & " = ?", lComando, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes), objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
                    If lErro <> AD_SQL_SUCESSO Then gError 52726
                
                'Verifica se o tipo de faturamento é TIPODOCINFO_FATURAMENTO_DEV
                ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
                
                    'Atualiza os campos referentes a Notas de Devolução em SldMesFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ?, QuantFaturada" & sMes & " = ?, TotalDescontos" & sMes & " = ?, ValorDevolvido" & sMes & " = ValorDevolvido" & sMes & " + ?, QuantDevolvida" & sMes & " = QuantDevolvida" & sMes & " + ?", lComando, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes), objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
                    If lErro <> AD_SQL_SUCESSO Then gError 94324
                
                End If
                        
            'Leo até aqui
                        
            Else
                
                'Atualiza a tabela de SldMesFat
                lErro = Comando_Executar(lComando3, "INSERT INTO SldMesFat (FilialEmpresa, Ano, Produto, ValorFaturado" & sMes & ", QuantFaturada" & sMes & ", TotalDescontos" & sMes & ", ValorDevolvido" & sMes & ", QuantDevolvida" & sMes & ") VALUES (?,?,?,?,?,?,?,?)", objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes), objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
                If lErro <> AD_SQL_SUCESSO Then gError 52973
                
            End If
            
            If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Then
                lErro = SldMesFatFilCli_Grava_Est(objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objNFiscal.lCliente, objNFiscal.iFilialCli, objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dValorFaturado(iMes), 0, 0, sMes)
                If lErro <> SUCESSO Then gError 110230
            ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
                lErro = SldMesFatFilCli_Grava_Est(objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objNFiscal.lCliente, objNFiscal.iFilialCli, 0, 0, objSldMesFat.dQuantDevolvida(iMes), objSldMesFat.dValorDevolvido(iMes), sMes)
                If lErro <> SUCESSO Then gError 110230
            End If
        Next
    Next
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
            
    SldMesFat_Grava_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFat_Grava_Est:
    
    SldMesFat_Grava_Est = gErr

    Select Case gErr
        
        Case 52722, 52723, 52975
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 52724, 52725, 52781 'Tratados nas rotinas chamadas
        
        Case 52726, 94324
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", gErr, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case 52973, 89787
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFAT", gErr, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto, objSldMesFat.iAno)
        
        Case 110230
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149835)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    Exit Function

End Function

Function SldMesFatFilCli_Grava_Est(iFilialEmpresa As Integer, iAno As Integer, sCodProduto As String, lCliente As Long, iFilialCliente As Integer, dQtdFaturada As Double, dValorFaturado As Double, dQtdDevolvida As Double, dValorDevolvido As Double, sMes As String)

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilial As Integer

On Error GoTo Erro_SldMesFatFilCli_Grava_Est

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 110231
    Next
    
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa FROM SldMesFatFilCli WHERE FilialEmpresa = ? AND Ano = ? AND Produto = ? AND Cliente = ? AND Filial = ?", 0, iFilial, iFilialEmpresa, iAno, sCodProduto, lCliente, iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 110232
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 110233
    
    If lErro = AD_SQL_SUCESSO Then
    
        'Lock
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 110234
        
        'Atualiza
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE SldMesFatFilCli SET QtdFaturada" & sMes & " = QtdFaturada" & sMes & " + ?, ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QtdDevolvida" & sMes & " = QtdDevolvida" & sMes & " + ?, ValorDevolvido" & sMes & " = ValorDevolvido" & sMes & " + ? ", alComando(1), dQtdFaturada, dValorFaturado, dQtdDevolvida, dValorDevolvido)
        If lErro <> AD_SQL_SUCESSO Then gError 110235
    
    Else
    
        lErro = Comando_Executar(alComando(3), "INSERT INTO SldMesFatFilCli (FilialEmpresa, Ano, Produto, Cliente, Filial, QtdFaturada" & sMes & ", ValorFaturado" & sMes & ", QtdDevolvida" & sMes & ", ValorDevolvido" & sMes & " ) " & _
                                                  "VALUES (?,?,?,?,?,?,?,?,?)", iFilialEmpresa, iAno, sCodProduto, lCliente, iFilialCliente, dQtdFaturada, dValorFaturado, dQtdDevolvida, dValorDevolvido)
        If lErro <> AD_SQL_SUCESSO Then gError 110236
    
    End If
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    SldMesFatFilCli_Grava_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFatFilCli_Grava_Est:

    SldMesFatFilCli_Grava_Est = gErr
    
    Select Case gErr
  
        Case 110231
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 110232, 110233
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110234
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, , sCodProduto, lCliente, iFilialCliente)
        
        Case 110235
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110236
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149836)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
Function SldMesFatFilCli_Cancela_Est(iFilialEmpresa As Integer, iAno As Integer, sCodProduto As String, lCliente As Long, iFilialCliente As Integer, dQtd As Double, dValor As Double, sMes As String)

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim iFilial As Integer

On Error GoTo Erro_SldMesFatFilCli_Cancela_Est

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 110238
    Next
    
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa FROM SldMesFatFilCli WHERE FilialEmpresa = ? AND Ano = ? AND Produto = ? AND Cliente = ? AND Filial = ?", 0, iFilial, iFilialEmpresa, iAno, sCodProduto, lCliente, iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 110239
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 110240
    
    If lErro = AD_SQL_SUCESSO Then
    
        'Lock
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 110241
   
        'Atualiza
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE SldMesFatFilCli SET QtdFaturada" & sMes & " = QtdFaturada" & sMes & " - ?, ValorFaturado" & sMes & " = ValorFaturado" & sMes & " - ? ", alComando(1), dQtd, dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 110242
    
    End If

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    SldMesFatFilCli_Cancela_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFatFilCli_Cancela_Est:

    SldMesFatFilCli_Cancela_Est = gErr
    
    Select Case gErr
  
        Case 110238
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 110239, 110240
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110241
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110242
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149837)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function GeracaoFatura_Automatico(lNumInt1 As Long) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lNumInt As Long

On Error GoTo Erro_GeracaoFatura_Automatico

    'Inicializa Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 43723

    lErro = CF("CRFATConfig_ObterNumInt1", "FATURA_NUM_PROX", lNumInt)
    If lErro <> SUCESSO Then Error 43724
    
    lNumInt1 = CLng(lNumInt)
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 43725

    GeracaoFatura_Automatico = SUCESSO
    
    Exit Function

Erro_GeracaoFatura_Automatico:

    GeracaoFatura_Automatico = Err

    Select Case Err
    
        Case 43723
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 43724
        
        Case 43725
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149838)
    
    End Select
    
    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function GeracaoFatura_GerarFatura(ByVal objGeracaoFatura As ClassGeracaoFatura, ByVal colNFiscalMarcado As Collection, ByVal colcolComissao As colcolComissao, ByVal colcolDesconto As colcolDesconto, ByVal objContabil As ClassContabil) As Long
'faz todas as atualizacoes no bd necessarias ao registro da fatura que cobra um grupo de NFs

Dim objTituloRec As New ClassTituloReceber
Dim lErro As Long
Dim iIndice As Integer
Dim ColDesconto As ColDesconto

On Error GoTo Erro_GeracaoFatura_GerarFatura

    objTituloRec.lCliente = objGeracaoFatura.lCliente
    objTituloRec.iFilial = objGeracaoFatura.iFilialCli
    objTituloRec.dtDataEmissao = objGeracaoFatura.dtDataEmissao
    objTituloRec.dtDataRegistro = gdtDataHoje
    objTituloRec.dSaldo = objGeracaoFatura.dValorNFsSelecionadas
    objTituloRec.dValor = objGeracaoFatura.dValorNFsSelecionadas
    objTituloRec.dValorIRRF = objGeracaoFatura.dValorIRRF
    objTituloRec.dValorISS = objGeracaoFatura.dValorISS
    objTituloRec.dValorINSS = objGeracaoFatura.dValorINSS
    objTituloRec.iFilialEmpresa = giFilialEmpresa
    objTituloRec.iISSRetido = objGeracaoFatura.iISSRetido
    objTituloRec.iNumParcelas = objGeracaoFatura.colParcelas.Count
    objTituloRec.sSiglaDocumento = TIPODOC_FATURA_A_RECEBER
    objTituloRec.iCondicaoPagto = objGeracaoFatura.iCondicaoPagto
            
    'Passa os descontos de colColDesconto para cada uma das parcelas correspondentes
    For iIndice = 1 To objGeracaoFatura.colParcelas.Count
    
        Set ColDesconto = colcolDesconto(iIndice).ColDesconto
            
        'Verifica se existe algum desconto cadastrado
        If ColDesconto.Count > 0 Then
            objGeracaoFatura.colParcelas(iIndice).iDesconto1Codigo = ColDesconto(1).iCodigo
            objGeracaoFatura.colParcelas(iIndice).dtDesconto1Ate = ColDesconto(1).dtData
            objGeracaoFatura.colParcelas(iIndice).dDesconto1Valor = ColDesconto(1).dValor
            objGeracaoFatura.colParcelas(iIndice).dtDesconto2Ate = DATA_NULA
            objGeracaoFatura.colParcelas(iIndice).dtDesconto3Ate = DATA_NULA
            If ColDesconto.Count > 1 Then
                objGeracaoFatura.colParcelas(iIndice).iDesconto2Codigo = ColDesconto(2).iCodigo
                objGeracaoFatura.colParcelas(iIndice).dtDesconto2Ate = ColDesconto(2).dtData
                objGeracaoFatura.colParcelas(iIndice).dDesconto2Valor = ColDesconto(2).dValor
                If ColDesconto.Count > 2 Then
                    objGeracaoFatura.colParcelas(iIndice).iDesconto3Codigo = ColDesconto(3).iCodigo
                    objGeracaoFatura.colParcelas(iIndice).dtDesconto3Ate = ColDesconto(3).dtData
                    objGeracaoFatura.colParcelas(iIndice).dDesconto3Valor = ColDesconto(3).dValor
                End If
            End If
        End If
    Next
            
    lErro = CF("TituloReceber_Grava_Fatura", objTituloRec, colNFiscalMarcado, objGeracaoFatura.colParcelas, colcolComissao, colcolDesconto, objContabil)
    If lErro <> SUCESSO Then Error 31381
    
    objGeracaoFatura.lNumTitulo = objTituloRec.lNumTitulo
    
    GeracaoFatura_GerarFatura = SUCESSO
    
    Exit Function
    
Erro_GeracaoFatura_GerarFatura:

    GeracaoFatura_GerarFatura = Err
    
    Select Case Err
        
        Case 31381
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149839)
            
    End Select
    
    Exit Function
    
End Function

Function RelFatPrazoPag_Grava(ByVal lCodigo As Long, ByVal ColPrazos As Collection) As Long

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim iIndice As Integer

On Error GoTo Erro_RelFatPrazoPag_Grava
    
    'abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 48567

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 48568

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 48569
    
    'Preenche a Tabela com o item da colecao
    For iIndice = 1 To ColPrazos.Count
        
        If iIndice = 1 Then
            lErro = Comando_Executar(lComando2, "INSERT INTO RelFatPrazoPag(Codigo,PrazoAte,PrazoDe) VALUES (?,?,?)", lCodigo, ColPrazos.Item(iIndice), ColPrazos.Item(iIndice))
            If lErro <> AD_SQL_SUCESSO Then Error 48724
            
        Else
        
            lErro = Comando_Executar(lComando2, "INSERT INTO RelFatPrazoPag(Codigo,PrazoAte,PrazoDe) VALUES (?,?,?)", lCodigo, ColPrazos.Item(iIndice), ColPrazos.Item(iIndice - 1) + 1)
            If lErro <> AD_SQL_SUCESSO Then Error 48570
        
        End If
        
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 48571

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
    
    RelFatPrazoPag_Grava = SUCESSO
    
    Exit Function
    
Erro_RelFatPrazoPag_Grava:

    RelFatPrazoPag_Grava = Err
    
        Select Case Err
            
            Case 48567, 48568
                lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

            Case 48569
                lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
            Case 48570, 48724
                lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFATPRAZOPAG", Err, lCodigo)
            
            Case 48571
                lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
                
            Case Else
                lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149840)
        
        End Select
        
    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Function NFiscal_Grava_Comissoes(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza os dados de comissões de uma nota fiscal, com as novas comissões passadas em objNFiscal

Dim lErro As Long
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim lTransacao As Long

On Error GoTo Erro_NFiscal_Grava_Comissoes

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 58350
       
    'Locka a NotaFiscal e o Vendedor e Testa se o total de Comissão é menor que o Valor Total - Valor IRRF
    lErro = ComissoesNF_Lock_Objetos_Relacionados(objNFiscal)
    If lErro <> SUCESSO Then Error 58351
      
    'Lê o Nome da Tela para saber se é uma Nota Fiscal Simples ou de Fatura
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Lê em TipoDocInfo
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then Error 58352
    
    If objTipoDocInfo.sNomeTelaNFiscal = "NFiscal" Or objTipoDocInfo.sNomeTelaNFiscal = "NFiscalPedido" Then
            
        'Se for uma comissao de uma NFiscal Simples
        lErro = NFiscalSimples_Grava_Comissao(objNFiscal)
        If lErro <> SUCESSO Then Error 58353
    
    ElseIf objTipoDocInfo.sNomeTelaNFiscal = "NFiscalFatura" Or objTipoDocInfo.sNomeTelaNFiscal = "NFiscalFaturaPedido" Or objTipoDocInfo.sNomeTelaNFiscal = "ConhecimentoFreteFatura" Then
        
        'Se for uma comissao de uma NFiscal Fatura
        lErro = NFiscalFatura_Grava_Comissao(objNFiscal)
        If lErro <> SUCESSO Then Error 58354
        
    End If
      
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 58355

    NFiscal_Grava_Comissoes = SUCESSO

    Exit Function

Erro_NFiscal_Grava_Comissoes:

    NFiscal_Grava_Comissoes = Err

    Select Case Err

        Case 58350
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 58351, 58352, 58353, 58354 'Tratados nas Rotinas chamadas
        
        Case 58355
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149841)

    End Select

   'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Private Function ComissoesNF_Lock_Objetos_Relacionados(ByVal objNFiscal As ClassNFiscal) As Long
'Locka a NotaFiscal
'Testa se o total de Comissão é menor que o Valor Total - Valor IRRF

Dim lErro As Long
Dim lComando As Long
Dim iIndice As Integer
Dim tNFiscal As typeNFiscal
Dim dValorTotalComissoes As Double
Dim lNumIntDoc As Long
Dim iTipoOperacaoTrib As Integer
Dim dIRRFValor As Double

On Error GoTo Erro_ComissoesNF_Lock_Objetos_Relacionados
    
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58314

    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc , TipoOperacaoTrib FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND Tipo = ? AND Cliente = ? AND FilialCli = ?", tNFiscal.lNumIntDoc, iTipoOperacaoTrib, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_SAIDA, objNFiscal.lCliente, objNFiscal.iFilialCli)
    If lErro <> AD_SQL_SUCESSO Then gError 89993
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89994

    'se a nota fiscal em questão não for encontrada
    If lErro = AD_SQL_SEM_DADOS Then gError 89995

    'Lê o NumIntDoc, DataEmissao, ValorTotal,  TipodocInfo da NotaFiscal e locka a NotaFiscal
    lErro = Comando_ExecutarLockado(lComando, "SELECT DataEmissao, ValorTotal, TipoNFiscal, NumIntDocCPR FROM NFiscal WHERE NumIntDoc = ?", _
    tNFiscal.dtDataEmissao, tNFiscal.dValorTotal, tNFiscal.iTipoNFiscal, tNFiscal.lNumIntDocCPR, tNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 58315

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 58316
    
    'Lock na NFiscal
    lErro = Comando_LockExclusive(lComando)
    If lErro <> SUCESSO Then Error 58318
    
    'Passa os dados da Nota para a NFiscal
    objNFiscal.lNumIntDoc = tNFiscal.lNumIntDoc
    objNFiscal.dtDataEmissao = tNFiscal.dtDataEmissao
    objNFiscal.iTipoNFiscal = tNFiscal.iTipoNFiscal
    objNFiscal.lNumIntDocCPR = tNFiscal.lNumIntDocCPR
    
    If iTipoOperacaoTrib <> 0 Then
    
        'Le o Valor IRRF
        lErro = CF("NFiscal_Le_Tributacao", objNFiscal)
        If lErro <> SUCESSO Then Error 58319
        
        dIRRFValor = objNFiscal.objTributacaoNF.dIRRFValor
        
    End If
    
    For iIndice = 1 To objNFiscal.ColComissoesNF.Count
        
        'Soma os Valores das Comissões para obter o Valor total das comissões
        dValorTotalComissoes = dValorTotalComissoes + objNFiscal.ColComissoesNF(iIndice).dValor
        
    Next
       
    'Testa se o total de Comissão é menor que o Valor Total - Valor IRRF
    If dValorTotalComissoes > tNFiscal.dValorTotal - dIRRFValor Then Error 58311

    'Fecha o comando
    Call Comando_Fechar(lComando)

    ComissoesNF_Lock_Objetos_Relacionados = SUCESSO
    
    Exit Function
    
Erro_ComissoesNF_Lock_Objetos_Relacionados:

    ComissoesNF_Lock_Objetos_Relacionados = Err
    
    Select Case Err
    
        Case 58311
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VALOR_TOTAL_COMISSAO_INVALIDO", Err, dValorTotalComissoes, objNFiscal.objTributacaoNF.dIRRFValor + tNFiscal.dValorTotal)
    
        Case 58314
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 58315, 58316
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTA_FISCAL_NUM_SERIE", Err, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.iFilialEmpresa)

        Case 58318
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFSREC", Err, objNFiscal.lNumNotaFiscal)

        Case 58319, 58320, 89993, 89994
   
        Case 89995
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_NUM_SERIE_NAO_CADASTRADA", Err, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149842)

    End Select
            
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
        
End Function

Private Function NFiscalSimples_Grava_Comissao(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a Comissao da Nota Fiscal Simples na Tabela de Comissoes

Dim lErro As Long
Dim colComissao As New colComissao
Dim alComando(2) As Long
Dim iIndice As Integer
Dim objComissoesNF As New ClassComissaoNF

On Error GoTo Erro_NFiscalSimples_Grava_Comissao
        
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58356
    Next
       
    'Se a Nota Fiscal já foi faturada --- ERRO
    If objNFiscal.lNumIntDocCPR <> 0 Then Error 58357
        
    'Exclui as Comissoes da Tabela de Comissoes, Se houver baixadas abandona a Gravação
    lErro = CF("Comissoes_Exclui", TIPO_NF, objNFiscal.lNumIntDoc, 0)
    If lErro <> SUCESSO Then Error 58358
    
    'Varre a ComissaoNF e monta a Colecao de Comissao
    For iIndice = 1 To objNFiscal.ColComissoesNF.Count

        Set objComissoesNF = objNFiscal.ColComissoesNF.Item(iIndice)

        colComissao.Add 0, objNFiscal.iFilialEmpresa, STATUS_LIBERADO, TIPO_NF, objNFiscal.lNumIntDoc, objComissoesNF.iCodVendedor, DATA_NULA, (objComissoesNF.dPercentualEmissao * objComissoesNF.dPercentual), objComissoesNF.dValorBase, objComissoesNF.dValorEmissao, objNFiscal.dtDataEmissao

    Next
    
    'Inclui as Comissoes da Tabela de Comissoes
    lErro = CF("Comissoes_Grava", colComissao)
    If lErro <> SUCESSO Then Error 58359
            
    'Exclui as ComissoesNF da Tabela ComissoesNF
    lErro = ComissoesNF_Exclui(objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then Error 58360
    
    'Inclui as ComissoesNF que estao na colecao na tabela ComissoesNF
    lErro = CF("ComissoesNF_Grava", alComando(1), alComando(2), objNFiscal)
    If lErro <> SUCESSO Then Error 58361
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalSimples_Grava_Comissao = SUCESSO
    
    Exit Function
    
Erro_NFiscalSimples_Grava_Comissao:

    NFiscalSimples_Grava_Comissao = Err
    
    Select Case Err
    
        Case 58356
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58357
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_ASSOCIADA_A_FATURA", Err, objNFiscal.lNumNotaFiscal)
        
        Case 58358, 58359, 58360, 58361 'Tratados nas rotinas chamadas
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149843)
    
    End Select
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function ComissoesNF_Exclui(ByVal lNumIntDoc As Long) As Long
'Exclui as Comissoes com o Numero interno passado

Dim lErro As Long
Dim alComando(2) As Long
Dim iIndice As Integer
Dim tComissoesNF As typeComissaoNF

On Error GoTo Erro_ComissoesNF_Exclui

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58362
    Next
    
    'Lê as comissoes
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodVendedor FROM ComissoesNF WHERE NumIntDoc = ? ", 0, tComissoesNF.iCodVendedor, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 58363
        
    'busca o próximo registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58367
        
    'Loop de exclusão
    Do While lErro = AD_SQL_SUCESSO

        'loca a comissao
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 58364
        
        'Faz a exclusão no BD
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ComissoesNF", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 58365
        
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58366
        
    Loop

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ComissoesNF_Exclui = SUCESSO
    
    Exit Function
    
Erro_ComissoesNF_Exclui:

    ComissoesNF_Exclui = Err
    
    Select Case Err
    
        Case 58362
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58363, 58366, 58367
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESNF", Err)
        
        Case 58364
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_COMISSOESNF", Err)
        
        Case 58365
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESNF2", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149844)
    
    End Select
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalFatura_Grava_Comissao(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim colComissao As New colComissao
Dim alComando(2) As Long
Dim iIndice As Integer
Dim objComissoesNF As New ClassComissaoNF
Dim objParcelaRec As ClassParcelaReceber
Dim colcolComissao As New colcolComissao
Dim dValorLiquido As Double
Dim objComissao As ClassComissao

On Error GoTo Erro_NFiscalFatura_Grava_Comissao
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58368
    Next
    
    'Trata primeiro a NFiscal
    
    'Exclui as Comissoes da Tabela de Comissoes, Se houver baixadas abandona a Gravação
    lErro = CF("Comissoes_Exclui", TIPO_NF, objNFiscal.lNumIntDoc, 0)
    If lErro <> SUCESSO Then Error 58369
    
    'Varre a ComissaoNF e monta a Colecao de Comissao
    For iIndice = 1 To objNFiscal.ColComissoesNF.Count
        
        Set objComissoesNF = objNFiscal.ColComissoesNF.Item(iIndice)
        
        colComissao.Add 0, objNFiscal.iFilialEmpresa, STATUS_LIBERADO, TIPO_NF, objNFiscal.lNumIntDoc, objComissoesNF.iCodVendedor, DATA_NULA, (objComissoesNF.dPercentualEmissao * objComissoesNF.dPercentual), objComissoesNF.dValorBase, objComissoesNF.dValorEmissao, objNFiscal.dtDataEmissao
    Next
    
    'Inclui as Comissoes da Tabela de Comissoes
    lErro = CF("Comissoes_Grava", colComissao)
    If lErro <> SUCESSO Then Error 58370
        
    'Exclui as Comissões da Nota Fiscal da Tabela de ComissaoNF
    lErro = ComissoesNF_Exclui(objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then Error 58371
    
    'Inclui as ComissoesNF que estao na colecao na tabela ComissoesNF
    lErro = CF("ComissoesNF_Grava", alComando(1), alComando(2), objNFiscal)
    If lErro <> SUCESSO Then Error 58372
    
    'Lê as Parcelas existentes para a Nota Fiscal
    lErro = CF("ParcelasRecNF_Le", objNFiscal)
    If lErro <> SUCESSO Then Error 58373
    
    'Trata as Parcelas
    For Each objParcelaRec In objNFiscal.ColParcelaReceber
    
        'Exclui as Comissões das Parcelas da Nota Fiscal Fatura Correspondente, se houver pelo menos uma baixada para a exclusão
        lErro = CF("Comissoes_Exclui", TIPO_PARCELA, objParcelaRec.lNumIntDoc, 0)
        If lErro <> SUCESSO Then Error 58374
        
        'Calcula o valor liquido das Parcelas
        dValorLiquido = dValorLiquido + objParcelaRec.dValor
                        
        'Adiciona para cada uma Parcela uma Colecao de Comissoes
        Set colComissao = New colComissao
        colcolComissao.Add colComissao
    
    Next
    
    'Gera as comissoes de acordo com o Número das Parcelas
    lErro = CF("ComissoesNF_Gera_ComissoesParc", objNFiscal, colcolComissao, dValorLiquido)
    If lErro <> SUCESSO Then Error 58375
    
    'Para cada comissao Gerada preenche com o NumIntDoc da Parcela e Grava a Comissao
    For iIndice = 1 To objNFiscal.ColParcelaReceber.Count
            
        Set objParcelaRec = objNFiscal.ColParcelaReceber.Item(iIndice)
            
        For Each objComissao In colcolComissao(iIndice).colComissao
            objComissao.lNumIntDoc = objParcelaRec.lNumIntDoc
        Next
    
        'Grava as Comissões da Parcela
        lErro = CF("Comissoes_Grava", colcolComissao(iIndice).colComissao)
        If lErro <> SUCESSO Then Error 58376
    
    Next
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalFatura_Grava_Comissao = SUCESSO
    
    Exit Function
    
Erro_NFiscalFatura_Grava_Comissao:
    
    NFiscalFatura_Grava_Comissao = Err
    
    Select Case Err
    
        Case 58368
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58369, 58370, 58371, 58372, 58373, 58374, 58375, 58376 'Tratados nas rotinas chamadas
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149845)
    
    End Select
        
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

'------------------------------------------------------------------------------------Até

Function GeracaoNFiscal_Abrir_Comandos(alComando() As Long, alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long) As Long
'Abre os comandos utilizados pela função de geração de notas Fiscais

Dim lErro As Long
Dim iIndice As Integer

On Error GoTo Erro_GeracaoNFiscal_Abrir_Comandos

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 44183
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then Error 44317
    Next

    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = Comando_Abrir()
        If alComando2(iIndice) = 0 Then Error 44286
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then Error 44298
    Next

    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = Comando_Abrir()
        If alComando4(iIndice) = 0 Then Error 44333
    Next

    GeracaoNFiscal_Abrir_Comandos = SUCESSO
    
    Exit Function

Erro_GeracaoNFiscal_Abrir_Comandos:

    GeracaoNFiscal_Abrir_Comandos = Err
    
    Select Case Err
    
        Case 44183, 44317, 44286, 44298, 44333
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149846)

    End Select

End Function

Private Sub GeracaoNFiscal_Fechar_Comandos(alComando() As Long, alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long)
'Fecha os comandos utilizados pela função de geracao de notas fiscais

Dim iIndice As Integer

    'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    For iIndice = LBound(alComando2) To UBound(alComando2)
        Call Comando_Fechar(alComando2(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next

    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next

End Sub

Function ProdutoFilial_Subtrai_NF_QuantPedida(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza Subtraindo a quantPedida do Produto em UM de Venda na tabela ProdutosFilial
 
Dim lErro As Long
Dim dQuantPedida As Double
Dim dQuantItem As Double
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objItemNF As ClassItemNF
Dim objProduto As New ClassProduto
Dim dFator As Double
 
On Error GoTo Erro_ProdutoFilial_Subtrai_NF_QuantPedida

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 51456
    Next
    
    For Each objItemNF In objNFiscal.ColItensNF
    
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
       
            If objItemNF.colItensRomaneioGrade.Count = 0 Then
       
                objProduto.sCodigo = objItemNF.sProduto
                dQuantItem = objItemNF.dQuantidade
                
            ElseIf iIndice = 0 Then
                iIndice = 1
                objProduto.sCodigo = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                dQuantItem = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                
            End If
            
        
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then Error 51461
            If lErro <> SUCESSO Then Error 51463
        
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 51462
            
            'Calcula a quantidade a ser Subtraida a quantidade pedida do produto
            dQuantItem = dQuantItem * dFator
                        
            'Busca o Registro de Produto do Item e FiliaisProduto
            lErro = Comando_ExecutarPos(alComando(0), "SELECT QuantPedida FROM ProdutosFilial WHERE Produto = ? AND FilialEmpresa = ?", 0, dQuantPedida, objProduto.sCodigo, objNFiscal.iFilialPedido)
            If lErro <> AD_SQL_SUCESSO Then Error 51457
    
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51458
            If lErro <> AD_SQL_SUCESSO Then Error 51459 'Não encontrou
                          
            'Atualiza a quantidade pedida em ProdutosFilial para o Produto
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE ProdutosFilial SET QuantPedida = QuantPedida - ?", alComando(0), dQuantItem)
            If lErro <> AD_SQL_SUCESSO Then Error 51460
        Next
    Next
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ProdutoFilial_Subtrai_NF_QuantPedida = SUCESSO
    
    Exit Function
    
Erro_ProdutoFilial_Subtrai_NF_QuantPedida:

    ProdutoFilial_Subtrai_NF_QuantPedida = Err
    
    Select Case Err
    
        Case 51456
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 51457, 51458
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", Err, objNFiscal.iFilialEmpresa, objItemNF.sProduto)
        
        Case 51459
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOFILIAL_INEXISTENTE", Err, objItemNF.sProduto, objNFiscal.iFilialEmpresa)
        
        Case 51460
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", Err, objNFiscal.iFilialEmpresa, objItemNF.sProduto)

        Case 51461, 51462
        
        Case 51463
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", Err, objProduto.sCodigo)
                        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149847)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function PedVenda_QuantNaoCancelada(ByVal objPedidoVenda As ClassPedidoDeVenda, dQuantNaoCancelada As Double) As Long
'Retorna a quantidade não cancelada em todos o Pedido

Dim lErro As Long
Dim objItemPV As ClassItemPedido

On Error GoTo Erro_PedVenda_QuantNaoCancelada

    'Zera o acumulador
    dQuantNaoCancelada = 0

    'Para cada item acumula a Quantidade não cancelada
    For Each objItemPV In objPedidoVenda.colItensPedido
        objItemPV.dQuantAFaturar = objItemPV.dQuantidade - objItemPV.dQuantCancelada - objItemPV.dQuantFaturada
        dQuantNaoCancelada = dQuantNaoCancelada + objItemPV.dQuantAFaturar
    Next

    PedVenda_QuantNaoCancelada = SUCESSO

    Exit Function

Erro_PedVenda_QuantNaoCancelada:

    PedVenda_QuantNaoCancelada = Err

    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149848)

    End Select

    Exit Function

End Function

Function PedidoVenda_Inclui_BloqueioCredito(ByVal lPedido As Long, ByVal iFilialPedido As Integer) As Long

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim lTransacao As Long

On Error GoTo Erro_PedidoVenda_Inclui_BloqueioCredito

    'ABre a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 51531

    objPedidoVenda.lCodigo = lPedido
    objPedidoVenda.iFilialEmpresa = iFilialPedido
    
    'Lê e faz o lock no Pedido de Venda passado
    lErro = CF("PedidoDeVenda_Le_ComBloqueio", objPedidoVenda)
    If lErro <> SUCESSO Then Error 51528
    
    'Insere bloqueio de crédito no PV se estourar limite crédito
    lErro = BloqueioPV_Testa_Credito(objPedidoVenda)
    If lErro <> SUCESSO Then Error 51529

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 51530

    PedidoVenda_Inclui_BloqueioCredito = SUCESSO

    Exit Function

Erro_PedidoVenda_Inclui_BloqueioCredito:

    PedidoVenda_Inclui_BloqueioCredito = Err
    
    Select Case Err
    
        Case 51531
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 51528, 51529  'tratados nas rotinas chamadas
        
        Case 51530
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149849)
        
    End Select
        
    Call Transacao_Rollback
                
    Exit Function
                
End Function

Function DescontoPadraoParcela_Gera(ByVal objParcela As Object, ByVal dtDataVencimento As Date) As Long
'Preenche o objParcela com o desconto padrão
'*Obs: O objParcela foi declarado como Object para que a função sirva para Parcelasde Pedido de Venda e Parcelas de Notas Fiscais
                        
Dim ColDesconto As ColDesconto
Dim lErro As Long
Dim iIndice2 As Integer

On Error GoTo Erro_DescontoPadraoParcela_Gera
                        
    Set ColDesconto = New ColDesconto
    'Gera os desconto com base nas novas datas de vencimento
    lErro = CF("Parcela_GeraDescontoPadrao", ColDesconto, dtDataVencimento)
    If lErro <> SUCESSO Then Error 51613
    With objParcela
        'Limpa no obj os decontos antigos
        .dDesconto1Valor = 0
        .dDesconto2Valor = 0
        .dDesconto3Valor = 0
        .dtDesconto1Ate = DATA_NULA
        .dtDesconto2Ate = DATA_NULA
        .dtDesconto3Ate = DATA_NULA
        .iDesconto1Codigo = 0
        .iDesconto2Codigo = 0
        .iDesconto3Codigo = 0
        
        'Preenche o obj comos novos descontos
        For iIndice2 = 1 To ColDesconto.Count
            If iIndice2 = 1 Then
                .iDesconto1Codigo = ColDesconto(iIndice2).iCodigo
                .dDesconto1Valor = ColDesconto(iIndice2).dValor
                .dtDesconto1Ate = ColDesconto(iIndice2).dtData
            ElseIf iIndice2 = 2 Then
                .iDesconto2Codigo = ColDesconto(iIndice2).iCodigo
                .dDesconto2Valor = ColDesconto(iIndice2).dValor
                .dtDesconto2Ate = ColDesconto(iIndice2).dtData
            Else
                .iDesconto3Codigo = ColDesconto(iIndice2).iCodigo
                .dDesconto3Valor = ColDesconto(iIndice2).dValor
                .dtDesconto3Ate = ColDesconto(iIndice2).dtData
            End If
        Next
    End With
    
    DescontoPadraoParcela_Gera = SUCESSO
    
    Exit Function
    
Erro_DescontoPadraoParcela_Gera:

    DescontoPadraoParcela_Gera = Err
    
    Select Case Err
        
        Case 51613
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149850)
            
    End Select

    Exit Function
    
End Function

Function ParcelasPV_Gerando_ParcelasNF(ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objNFiscal As ClassNFiscal) As Long
'Se a Data de referencia do Pedido estiver ultrapassada em relação a Data Atual e se
'a cobrança automática do pedido estiver selecionada as  parcelas são atualizadas.
    
Dim lErro As Long
Dim objCondicaoPagto As New ClassCondicaoPagto
Dim iIndice As Integer
Dim objParcelaPV As New ClassParcelaPedidoVenda

On Error GoTo Erro_ParcelasPV_Gerando_ParcelasNF
    
    'Se a condição de pagamento estiver preenchida e cobrança automática selecionada e a data de referencia do pedido estiver vazia ou ultrapassada
    If objPedidoVenda.iCondicaoPagto <> 0 And objPedidoVenda.iCobrancaAutomatica = 1 And (objPedidoVenda.dtDataReferencia = DATA_NULA Or objNFiscal.dtDataReferencia < gdtDataAtual) Then
        'A data de referencia da nota fiscal é atualizada
        objNFiscal.dtDataReferencia = gdtDataAtual
        
        objCondicaoPagto.iCodigo = objPedidoVenda.iCondicaoPagto
        'Lê Condicao Pagamento no BD
        lErro = CF("CondicaoPagto_Le", objCondicaoPagto)
        If lErro <> SUCESSO And lErro <> 19205 Then Error 59095
        If lErro = 19205 Then Error 59096
        
        If objCondicaoPagto.iNumeroParcelas <> objPedidoVenda.colParcelas.Count Then Error 59097
        
        'Calcula Datas de Vencimento das Parcelas
        objCondicaoPagto.dtDataRef = objNFiscal.dtDataReferencia
        lErro = CF("CondicaoPagto_CalculaParcelas", objCondicaoPagto, False, True)
        If lErro <> SUCESSO Then Error 59098

        'Loop de preenchimento de Parcelas com Datas de Vencimento Recalculadas
        For iIndice = 1 To objCondicaoPagto.iNumeroParcelas

            Set objParcelaPV = objPedidoVenda.colParcelas.Item(iIndice)
            
            'Preenche o desconto padrão
            lErro = DescontoPadraoParcela_Gera(objParcelaPV, objCondicaoPagto.colParcelas(iIndice).dtVencimento)
            If lErro <> SUCESSO Then Error 51613
                        
            With objParcelaPV
            '################################################
            'ALTERADO POR WAGNER -- ??? ALTERAR CLASSPARCELAPV PARA INCLUIR PREVISÃO E OBSERVAÇÃO ???
                'Adiciona a parcela na coleçào de parcelas
                objNFiscal.ColParcelaReceber.Add 0, 0, .iNumParcela, STATUS_ABERTO, objCondicaoPagto.colParcelas(iIndice).dtVencimento, objCondicaoPagto.colParcelas(iIndice).dtVencimento, .dValor, .dValor, 1, CARTEIRA_CARTEIRA, COBRADOR_PROPRIA_EMPRESA, "", 0, 0, 0, 0, 0, 0, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .iDesconto3Codigo, .dtDesconto3Ate, .dDesconto3Valor, 0, 0, 0, 0, 0, "", .dValor
            '################################################
            End With

        Next

    Else
    
        'transfere as parcelas do pedido de vendas para a nota fiscal
        For Each objParcelaPV In objPedidoVenda.colParcelas

            With objParcelaPV
            '################################################
            'ALTERADO POR WAGNER -- ??? ALTERAR CLASSPARCELAPV PARA INCLUIR PREVISÃO E OBSERVAÇÃO ???
                objNFiscal.ColParcelaReceber.Add 0, 0, .iNumParcela, STATUS_ABERTO, .dtDataVencimento, .dtDataVencimento, .dValor, .dValor, 1, CARTEIRA_CARTEIRA, COBRADOR_PROPRIA_EMPRESA, "", 0, 0, 0, 0, 0, 0, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .iDesconto3Codigo, .dtDesconto3Ate, .dDesconto3Valor, 0, 0, 0, 0, 0, "", .dValor
            '################################################
            End With

        Next
    
    End If
    
    ParcelasPV_Gerando_ParcelasNF = SUCESSO
    
    Exit Function

Erro_ParcelasPV_Gerando_ParcelasNF:

    ParcelasPV_Gerando_ParcelasNF = Err
    
    Select Case Err
        
        Case 59095, 59098, 51613  'tratados nas rotinas chamadas
        
        Case 59096
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", Err, objCondicaoPagto.iCodigo)
        
        Case 59097
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_ALTERADA_NUM_PARC", Err, objCondicaoPagto.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149851)
    
    End Select
    
    Exit Function
    
End Function

Function SldMesFat_Le_Lock_Mes(ByVal lComando As Long, ByVal objSldMesFat As ClassSldMesFat, ByVal iMes As Integer) As Long
'Lê todos atributos da tabela SldMesFat e faz lock exclusive
'Filtro: filial/produto/ano passados em objSldMesFat

Dim lErro As Long
Dim tSldMesFat As typeSldMesFat
Dim iIndice As Integer
Dim sIndice As String
Dim sComando_SqlPrimario As String
Dim sComando_SQL As String, sMes As String

On Error GoTo Erro_SldMesFat_Le_Lock_Mes
        
    sMes = CStr(iMes)
    
    'Le a tabela de SldMesFat para a filial/produto/ano em questão
    With tSldMesFat
        
        lErro = Comando_ExecutarPos(lComando, "SELECT ValorFaturado" & sMes & ", ValorDevolvido" & sMes & ", TotalDescontos" & sMes & ", QuantPedida" & sMes & ", QuantFaturada" & sMes & ", QuantDevolvida" & sMes & " FROM SldMesFat WHERE FilialEmpresa = ? AND Produto = ? AND Ano = ?", 0, _
            .adValorFaturado(1), .adValorDevolvido(1), .adTotalDescontos(1), .adQuantPedida(1), .adQuantFaturada(1), .adQuantDevolvida(1), objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto, objSldMesFat.iAno)
        If lErro <> AD_SQL_SUCESSO Then Error 59262
    
    End With
    
    'leitura do registro referente a filial/produto/ano em questão
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59263
    
    If lErro = AD_SQL_SEM_DADOS Then Error 59264
    
    'Lock da SldMesFat
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 59265
    
    'Preenche o objMesFat p/o mes passado
    objSldMesFat.dValorFaturado(iMes) = tSldMesFat.adValorFaturado(1)
    objSldMesFat.dValorDevolvido(iMes) = tSldMesFat.adValorDevolvido(1)
    objSldMesFat.dTotalDescontos(iMes) = tSldMesFat.adTotalDescontos(1)
    objSldMesFat.dQuantPedida(iMes) = tSldMesFat.adQuantPedida(1)
    objSldMesFat.dQuantFaturada(iMes) = tSldMesFat.adQuantFaturada(1)
    objSldMesFat.dQuantDevolvida(iMes) = tSldMesFat.adQuantDevolvida(1)
                
    SldMesFat_Le_Lock_Mes = SUCESSO
    
    Exit Function
    
Erro_SldMesFat_Le_Lock_Mes:

    SldMesFat_Le_Lock_Mes = Err
    
    Select Case Err
        
        Case 59262, 59263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", Err, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case 59264 'Não achou no BD. Tratado na rotina chamadora.
        
        Case 59265
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFAT", Err, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149852)

    End Select

    Exit Function

End Function

Private Function ItensPV_AtualizaQuantFaturada(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim iStatus As Integer
Dim dQuantFaturada As Double
Dim dQuantCancelada As Double
Dim dQuantPedida As Double
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim alComando(0 To 1) As Long
Dim sUM As String 'Inserido por Wagner
Dim dFator As Double 'Inserido por Wagner

On Error GoTo Erro_ItensPV_AtualizaQuantFaturada

    For iIndice = LBound(alComando) To UBound(alComando)
        
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 11111
    
    Next

    'Para cada item de pedido de venda que foi utilizado na Nota Fiscal
    For iIndice = 1 To objNFiscal.ColItensNF.Count
        
        '####################################################
        'Inserido por Wagner
        sUM = String(STRING_UM_SIGLA, 0)
        '####################################################
        
        iStatus = STATUS_NAO_ATENDIDO
        
        '####################################################
        'Alterado por Wagner
        'Lê o item de pedido de venda
        lErro = Comando_ExecutarPos(lComando, "SELECT QuantFaturada,QuantCancelada,Quantidade,UnidadeMed FROM ItensPedidoDeVenda WHERE NumIntDoc = ?", 0, dQuantFaturada, dQuantCancelada, dQuantPedida, sUM, objNFiscal.ColItensNF(iIndice).lNumIntItemPedVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 46614
        '####################################################
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46615
        If lErro <> AD_SQL_SUCESSO Then gError 46616
                
        '####################################################
        'Inserido por Wagner
        lErro = CF("UM_Conversao", objNFiscal.ColItensNF(iIndice).iClasseUM, sUM, objNFiscal.ColItensNF(iIndice).sUnidadeMed, dFator)
        If lErro <> SUCESSO Then gError 131015
        '####################################################
                
        'Se Quantidade faturada é maior do que quantidade a faturar, erro
        If Arredonda_Estoque(dQuantPedida * dFator) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objNFiscal.ColItensNF(iIndice).dQuantidade)) < -QTDE_ESTOQUE_DELTA Then gError 25777 'Alterado por Wagner

        If Abs(Arredonda_Estoque(dQuantPedida * dFator) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objNFiscal.ColItensNF(iIndice).dQuantidade))) < QTDE_ESTOQUE_DELTA Then iStatus = STATUS_ATENDIDO
        
        'Atualiza a quantidade faturada
        lErro = Comando_ExecutarPos(lComando1, "UPDATE ItensPedidoDeVenda SET QuantFaturada = QuantFaturada + ?, Status =? ", lComando, Arredonda_Estoque(objNFiscal.ColItensNF(iIndice).dQuantidade / dFator), iStatus) 'Alterado por Wagnmer
        If lErro <> AD_SQL_SUCESSO Then gError 46617
                
                
        For Each objItemRomaneio In objNFiscal.ColItensNF(iIndice).colItensRomaneioGrade
            
            lErro = Comando_ExecutarPos(alComando(0), "SELECT QuantFaturada,QuantCancelada,Quantidade FROM ItensPedidoDeVendaGrade WHERE NumIntDoc = ?", 0, dQuantFaturada, dQuantCancelada, dQuantPedida, objItemRomaneio.lNumIntItemPV)
            If lErro <> SUCESSO Then gError 55555
            
        
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 46615
            If lErro <> AD_SQL_SUCESSO Then gError 46616
            
            'Se Quantidade faturada é maior do que quantidade a faturar, erro
            If Arredonda_Estoque(dQuantPedida * dFator) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objItemRomaneio.dQuantidade)) < -QTDE_ESTOQUE_DELTA Then gError 25777
    
            If Abs(Arredonda_Estoque(dQuantPedida * dFator) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objItemRomaneio.dQuantidade))) < QTDE_ESTOQUE_DELTA Then iStatus = STATUS_ATENDIDO
            
            'Atualiza a quantidade faturada
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE ItensPedidoDeVendaGrade SET QuantFaturada = QuantFaturada + ?", alComando(0), Arredonda_Estoque(objItemRomaneio.dQuantidade / dFator))
            If lErro <> AD_SQL_SUCESSO Then gError 46617
            
        Next


    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensPV_AtualizaQuantFaturada = SUCESSO
    
    Exit Function
    
Erro_ItensPV_AtualizaQuantFaturada:

    ItensPV_AtualizaQuantFaturada = gErr
    
    Select Case gErr
    
        Case 25777
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_QUANT_A_FATURAR", gErr, objNFiscal.ColItensNF(iIndice).lNumIntItemPedVenda)
        
        Case 46614, 46615
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA", gErr)
        
        Case 46616
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", gErr, objNFiscal.ColItensNF(iIndice).lNumIntItemPedVenda)
            
        Case 46617
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITENSPEDIDODEVENDA", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149853)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function NFiscal_Verifica_Numero_Maior(ByVal objNFiscal As ClassNFiscal) As Long
'Verifica se tem alguma Nota com número maior ou igual para a série passada,não considerando as Notas Fiscais Externas

Dim lComando As Long
Dim tNFiscal As typeNFiscal
Dim lErro As Long

On Error GoTo Erro_NFiscal_Verifica_Numero_Maior

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60424
    
    'Lê a Nota Fiscal com número maior ou igual ao passado em ordem descrecente de Data (desconsidera as Notas Fiscais Externas)
    lErro = Comando_Executar(lComando, "SELECT NumNotaFiscal, DataEmissao FROM NFiscal,TiposDocInfo WHERE Serie = ? AND NumNotaFiscal >= ? AND FilialEmpresa = ? AND NFiscal.TipoNFiscal=TiposDocInfo.Codigo AND TiposDocInfo.Tipo<>? ORDER BY NumNotaFiscal, DataEmissao DESC", tNFiscal.lNumNotaFiscal, tNFiscal.dtDataEmissao, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.iFilialEmpresa, DOCINFO_NF_EXTERNA)
    If lErro <> AD_SQL_SUCESSO Then Error 60425
    
    'Busca o Primeiro da Lista selecionada
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60426
    
    'Se não encontrou ---> Erro
    If lErro <> AD_SQL_SUCESSO Then Error 60427
    
    objNFiscal.lNumNotaFiscal = tNFiscal.lNumNotaFiscal
    objNFiscal.dtDataEmissao = tNFiscal.dtDataEmissao
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    NFiscal_Verifica_Numero_Maior = SUCESSO
    
    Exit Function
        
Erro_NFiscal_Verifica_Numero_Maior:
    
    NFiscal_Verifica_Numero_Maior = Err
    
    Select Case Err
    
        Case 60424
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60425, 60426
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", Err)

        Case 60427 'Não encontrou nº NF maior ou igual. A ser tratado na rotina chamadora.
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149854)
            
    End Select
        
    'Fecha o comando
    Call Comando_Fechar(lComando)
        
    Exit Function
        
End Function

Function NotaFiscalSaida_Cancelar(ByVal objNFiscal As ClassNFiscal) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NotaFiscalSaida_Cancelar
    
    'ABre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 62152

    'Grava o Livro Fiscal a partir da Nota Fiscal
    lErro = CF("NotaFiscalSaida_Cancelar_EmTrans", objNFiscal)
    If lErro <> SUCESSO Then gError 126973
    
    'Confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 62175
    
    NotaFiscalSaida_Cancelar = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Cancelar:

    NotaFiscalSaida_Cancelar = gErr

    Select Case gErr

        Case 62152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 62175
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 126973
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149855)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function NotaFiscalSaida_Cancelar_EmTrans(ByVal objNFiscal As ClassNFiscal) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long, iIndice As Integer
Dim alComando(0 To 7) As Long
Dim iClasseDocCPR As Integer, lNumIntDocCPR As Long
Dim lNumMovtoEstoque As Long, lNumIntItem As Long
Dim objMovEstoque As New ClassMovEstoque, objTipoDocInfo As New ClassTipoDocInfo
Dim lCodigo As Long, lNumNotaFiscal As Long, iTipoNF As Integer, iStatus As Integer

On Error GoTo Erro_NotaFiscalSaida_Cancelar_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 62151
    Next

    'Lê a nota fiscal
    lErro = Comando_ExecutarPos(alComando(0), "SELECT  ClasseDocCPR, NumIntDocCPR FROM NFiscal WHERE NumIntDoc = ?", 0, iClasseDocCPR, lNumIntDocCPR, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 62153

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62154
    If lErro <> AD_SQL_SUCESSO Then gError 62155 'Não encontrou

    'faz o lock na Nota Fiscal
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 62156

    'Lê o tipodocinfo da nota fiscal
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 62157
    If lErro <> SUCESSO Then gError 62158
    
    'Se é uma nota que possui vinculação com outra que a sucede. Ex. Uma nota que tem uma devolução vinculada ou uma nota que tem um complemento vinculado.
    If Len(Trim(objTipoDocInfo.sSiglaNFOriginal)) > 0 Or objTipoDocInfo.iComplementar <> DOCINFO_COMPLEMENTO Then
        'verifica se a nota está vinculada a sua devolução ou ao seu complemento
        lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, TipoNFiscal FROM NFiscal WHERE NumIntNotaOriginal = ? AND Status <> ? ", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then gError 62159
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62200
        If lErro = AD_SQL_SUCESSO Then gError 62176 'Se está vinculada, erro.
    
    End If
                
    'Atualiza o status da nota fiscal
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE NFiscal SET Status = ?, CodUsuarioCancel=?, MotivoCancel=?", alComando(0), STATUS_CANCELADO, gsUsuario, objNFiscal.sMotivoCancel)
    If lErro <> AD_SQL_SUCESSO Then gError 62162
    
    'Se a nota for uma nota gerada por pedido
    If objTipoDocInfo.iCodigo = DOCINFO_NFISFVPV Or objTipoDocInfo.iCodigo = DOCINFO_NFISVPV Or objTipoDocInfo.sNomeTelaNFiscal = "NFiscalRemPedido" Then
        'Atualiza a qtd faturada ou desfaz a baixa do Pedido.
        lErro = CF("CancelamentoNFiscal_Atualiza_Pedido", objNFiscal)
        If lErro <> SUCESSO Then gError 62207
    End If
    
    'Se a nota gerou documentos em  CPR
    If iClasseDocCPR > 0 And lNumIntDocCPR > 0 Then
        'Desfaz os documentos associados
        lErro = CF("CPR_Exclui", iClasseDocCPR, lNumIntDocCPR)
        If lErro <> SUCESSO Then gError 62163
    End If

    'não trata o cancelamento dos itens de nf para notas de conhecimento de frete porque eles não possuem
    If objNFiscal.iTipoNFiscal <> DOCINFO_NFICF And objNFiscal.iTipoNFiscal <> DOCINFO_NFIFCF Then

        'Busca os itens da nota associada
        lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ? ", 0, lNumIntItem, objNFiscal.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 62164
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62165
        If lErro <> AD_SQL_SUCESSO Then gError 62201
        
        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        
        lErro = CF("Customizacoes_MovEstoque", objMovEstoque)
        If lErro <> SUCESSO Then gError 133041
        
        'Verifica se há movimento de estoque ligado ao item
        lErro = Comando_ExecutarPos(alComando(4), "SELECT Codigo FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", 0, lNumMovtoEstoque, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL, lNumIntItem, objMovEstoque.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 62167
    
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62168
        
        If lErro = AD_SQL_SUCESSO Then
    
            'Lê o movto de estoque da NOta fiscal
            objMovEstoque.lCodigo = lNumMovtoEstoque
            
            lErro = CF("MovEstoque_Le", objMovEstoque)
            If lErro <> SUCESSO And lErro <> 30128 Then gError 62169
            
            If lErro <> SUCESSO Then gError 62170
            
            'Lê os movimento dos itens de nota fiscal
            lErro = CF("MovEstoqueItens_Le_Desc", objMovEstoque)
            If lErro <> SUCESSO Then gError 62171
            
            'Redefine os movimento para fazer o cancelamento
            objMovEstoque.iTipoMov = 0
            
            For iIndice = 1 To objMovEstoque.colItens.Count
    ''            objMovEstoque.colItens(iIndice).lNumIntDoc = 0
                If objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoque Then
                    objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoque2
                ElseIf objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoqueConsig Then
                    objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoqueConsig2
                ElseIf objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_SAIDA_TRANSF_CONSIG_TERC Then
                    objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ESTORNO_SAIDA_TRANSF_CONSIG_TERC
                ElseIf objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ENTRADA_TRANSF_DISP1 Then
                    objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ESTORNO_ENTRADA_TRANSF_DISPONIVEL
                ElseIf objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_SAIDA_TRANSF_BENEF_TERC Then
                    objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ESTORNO_SAIDA_TRANSF_BENEF_TERC
                End If
            Next
            'Grava o movimento de estoque
            lErro = CF("MovEstoque_Grava", objMovEstoque)
            If lErro <> SUCESSO Then gError 62174
        
        End If
        
        Do While lErro <> AD_SQL_SEM_DADOS
                    
            'Cancela o item
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE ItensNFiscal SET Status = ?", alComando(2), STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 62166
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62172
        Loop

    End If
    
    'Exclui as comissoes da nota fiscal
    lErro = Comissoes_NFiscal_Exclui(objNFiscal)
    If lErro <> SUCESSO Then gError 62451
    
    'Desfaz a Estatistica de Compras
    'Trata-se de uma nota fiscal de venda
    If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL And objTipoDocInfo.iComplementar = DOCINFO_NORMAL Then
        
        'Defaz a Estatistica
        lErro = FilialClienteFilEmp_Cancela_NF(objNFiscal)
        If lErro <> SUCESSO Then gError 64151
    
        lErro = ProdutoVendido_Cancela_Estatisticas(objNFiscal)
        If lErro <> SUCESSO Then gError 86080
    
    End If
        
    'se for a exclusão de uma devolução de compra
    If objTipoDocInfo.iCompras = TIPODOCINFO_COMPRAS_DEVOLUCAO Then
        
        'Desfaz a Estatística da Filial Fornecedor
        lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CANCELAMENTO_FILIALFORNFILEMP)
        If lErro <> SUCESSO Then gError 89421
        
    End If
        
    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                        
        'Grava o Livro Fiscal a partir da Nota Fiscal
        lErro = CF("NotaFiscal_Cancela_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 81541
    
    End If
    
    'Gera um lançamento extorno para a Nota Fiscal ou se ainda não foi contabilizado Exclui
    lErro = NFiscalCancela_Contabilidade(objNFiscal, objTipoDocInfo)
    If lErro <> SUCESSO Then gError 64325
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NotaFiscalSaida_Cancelar_EmTrans = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Cancelar_EmTrans:

    NotaFiscalSaida_Cancelar_EmTrans = gErr

    Select Case gErr

        Case 62151
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 62153, 62154, 62159, 62160, 62161, 62200
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 62155
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_INTERNA_SAIDA_NAO_CADASTRADA", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 62156
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFISCAL", gErr)

        Case 62162
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFISCAL", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 62157, 62163, 62169, 62171, 62174, 62207, 64151, 62451, 64325, 81541, 89421, 133041

        Case 62158
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)

        Case 62164, 62165, 62172
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 62166
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ITEMNF", gErr)

        Case 62167, 62168
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

        Case 62170
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO", gErr, lNumIntItem)

        Case 62176, 62186
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_VINCULADA_CANCELAR", gErr, lNumNotaFiscal, iTipoNF)

        Case 62201
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_SEM_ITENS", gErr, objNFiscal.lNumNotaFiscal)
        
        Case 86080
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149856)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFiscalCancela_Contabilidade(ByVal objNFiscal As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo) As Long
'Gera um lançamento extorno para a Nota Fiscal ou se ainda não foi contabilizado Exclui

Dim lErro As Long
Dim objContabil As New ClassContabil
Dim objTelaAux As Object

On Error GoTo Erro_NFiscalCancela_Contabilidade
    
    lErro = objContabil.Contabil_Inicializa_Contabilidade1(objTelaAux, MODULO_FATURAMENTO, objTipoDocInfo.sNomeTelaNFiscal, objTipoDocInfo.iSubTipoContabil)
    If lErro <> SUCESSO Then gError 64323
    
    lErro = objContabil.Contabil_Exclui(objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 64324
    
    NFiscalCancela_Contabilidade = SUCESSO
    
    Exit Function
    
Erro_NFiscalCancela_Contabilidade:

    NFiscalCancela_Contabilidade = gErr
    
    Select Case gErr
        
        Case 64323, 64324
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149857)

    End Select
    
    Exit Function

End Function

'Maristela (Inicio) Alteração: Não atualiza mais as Datas da tabela FilialClienteFilEmp
Function FilialClienteFilEmp_Cancela_NF(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza a Estatistica de Compras
'Tem que ser chamado dentro de Transacao

Dim lErro As Long
Dim objFilCliFilEmp As New ClassFilCliFilEmp
Dim dtDataEmissao As Date
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long

On Error GoTo Erro_FilialClienteFilEmp_Cancela_NF
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 64141

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 64142

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 64143

    objFilCliFilEmp.iFilialEmpresa = objNFiscal.iFilialEmpresa
    objFilCliFilEmp.lCodCliente = objNFiscal.lCliente
    objFilCliFilEmp.iCodFilial = objNFiscal.iFilialCli
    
    lErro = CF("FilCliFilEmp_Le_Lock", lComando, objFilCliFilEmp)
    If lErro <> SUCESSO And lErro <> 52542 Then Error 64144
    
    If lErro = SUCESSO Then
    
        If objFilCliFilEmp.lNumeroCompras > 1 Then
            
            'recalcula os valores
            objFilCliFilEmp.dValorAcumuladoCompras = objFilCliFilEmp.dValorAcumuladoCompras - objNFiscal.dValorTotal
            objFilCliFilEmp.lNumeroCompras = objFilCliFilEmp.lNumeroCompras - 1
            objFilCliFilEmp.dMediaCompra = objFilCliFilEmp.dValorAcumuladoCompras / objFilCliFilEmp.lNumeroCompras
            
            If objFilCliFilEmp.dtDataUltimaCompra = objNFiscal.dtDataEmissao Then
                
                'Pesquisa a primeira Nota Fiscal Anterior para o mesmo Cliente e Filial.
                lErro = Comando_Executar(lComando2, "SELECT DataEmissao FROM NFiscal, TiposDocInfo WHERE FilialEmpresa = ? AND Cliente = ? AND FilialCli = ? AND NumIntDoc < ? AND Status <> ? AND Status <> ? AND TiposDocInfo.Faturamento = ? AND TiposDocInfo.Complementar = ? ORDER BY NumIntDoc DESC", dtDataEmissao, objNFiscal.iFilialEmpresa, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.lNumIntDoc, STATUS_CANCELADO, STATUS_EXCLUIDO, TIPODOCINFO_FATURAVEL, DOCINFO_NORMAL)
                If lErro <> AD_SQL_SUCESSO Then Error 64145
        
                lErro = Comando_BuscarPrimeiro(lComando2)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64146
                
                'Se não encontrar
                If lErro = AD_SQL_SEM_DADOS Then
                    objFilCliFilEmp.dtDataUltimaCompra = DATA_NULA
                Else
                    objFilCliFilEmp.dtDataUltimaCompra = dtDataEmissao
                End If
                
            End If
            
            If objFilCliFilEmp.dtDataPrimeiraCompra = objNFiscal.dtDataEmissao Then
            
                'Pesquisa a primeria Nota Fiscal depois para o mesmo Cliente e Filial.
                lErro = Comando_Executar(lComando2, "SELECT DataEmissao FROM NFiscal, TiposDocInfo WHERE FilialEmpresa = ? AND Cliente = ? AND FilialCli = ? AND NumIntDoc > ? AND Status <> ? AND Status <> ? AND TiposDocInfo.Faturamento = ? AND TiposDocInfo.Complementar = ? ORDER BY NumIntDoc", dtDataEmissao, objNFiscal.iFilialEmpresa, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.lNumIntDoc, STATUS_CANCELADO, STATUS_EXCLUIDO, TIPODOCINFO_FATURAVEL, DOCINFO_NORMAL)
                If lErro <> AD_SQL_SUCESSO Then Error 64147
        
                lErro = Comando_BuscarPrimeiro(lComando2)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64148
                
                'Se não encontrar
                If lErro = AD_SQL_SEM_DADOS Then
                    objFilCliFilEmp.dtDataPrimeiraCompra = DATA_NULA
                Else
                    objFilCliFilEmp.dtDataPrimeiraCompra = dtDataEmissao
                End If
            
            End If
            'Maristela
            'Atualiza a tabela de FilialClienteFilEmp
            lErro = Comando_ExecutarPos(lComando1, "UPDATE FilialClienteFilEmp SET NumeroCompras =?,MediaCompra=?, ValorAcumuladoCompras=? ", lComando, objFilCliFilEmp.lNumeroCompras, objFilCliFilEmp.dMediaCompra, objFilCliFilEmp.dValorAcumuladoCompras)
            If lErro <> AD_SQL_SUCESSO Then Error 64149
            'Maristela
        Else
            
            'Atualiza a tabela de FilialClienteFilEmp
            lErro = Comando_ExecutarPos(lComando1, "DELETE FROM FilialClienteFilEmp", lComando)
            If lErro <> AD_SQL_SUCESSO Then Error 64150
                        
        End If
    
    End If
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    FilialClienteFilEmp_Cancela_NF = SUCESSO
    
    Exit Function
    
Erro_FilialClienteFilEmp_Cancela_NF:
    
    FilialClienteFilEmp_Cancela_NF = Err
    
    Select Case Err
        
        Case 64141, 64142, 64143
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 64144
        
        Case 64145, 64146, 64147, 64148
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
        
        Case 64149
             lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FILIALCLIENTEFILEMP", Err)
        
        Case 64150
             lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIALCLIENTEFILEMP", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149858)

    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Function CancelamentoNFiscal_Atualiza_Pedido(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza o Pedido de Venda após o cancelamento da NF passada em objNFiscal.

Dim lErro As Long
Dim alComando(0 To 15) As Long
Dim iIndice As Integer
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objItemNF As ClassItemNF
Dim sSelect As String
Dim tItemPedido As typeItemPedido
Dim iBloqueio As Integer
Dim dQuantItem As Double
Dim iItemPVStatus As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim dQuantFaturada As Double

'Inserido por Wagner
Dim objItemPV As ClassItemPedido
Dim objNFAux As New ClassNFiscal
Dim objItemNFAux As ClassItemNF
Dim bPedidoBaixado As Boolean
Dim objProduto As ClassProduto
Dim dFator As Double

On Error GoTo Erro_CancelamentoNFiscal_Atualiza_Pedido

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 62208
    Next
    
    objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
    objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
    
    'BUsca o Pedido na tabela de Pedidos de Venda
    lErro = CF("PedidoDeVenda_Le_Lock", alComando(0), objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 36986 Then gError 62210
    
    'Se encontrou
    If lErro = SUCESSO Then
    
        bPedidoBaixado = False 'Inserido por Wagner
        
        'BUsca os itens do Pedido
        lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc,QuantFaturada FROM ItensPedidoDeVenda WHERE CodPedido = ? AND FilialEmpresa = ?", 0, tItemPedido.lNumIntDoc, tItemPedido.dQuantFaturada, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 62212
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62213
        
        'Para cada item do pedido
        Do While lErro <> AD_SQL_SEM_DADOS
            
            dQuantItem = 0
            
            'Verifica quanto foi faturado desse item por essa nf
            For Each objItemNF In objNFiscal.ColItensNF
                If objItemNF.lNumIntItemPedVenda = tItemPedido.lNumIntDoc Then
                    dQuantItem = objItemNF.dQuantidade
                    
                    For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
                        
                        lErro = Comando_ExecutarPos(alComando(14), "SELECT QuantFaturada FROM ItensPedidoDeVendaGrade WHERE NumIntDoc =?", 0, dQuantItem, objItemRomaneio.lNumIntItemPV)
                        If lErro <> AD_SQL_SUCESSO Then gError 86369
                        
                        lErro = Comando_BuscarPrimeiro(alComando(14))
                        If lErro <> AD_SQL_SUCESSO Then gError 86370
                        
                        lErro = Comando_ExecutarPos(alComando(15), "UPDATE ItensPedidoDeVendaGrade SET Quantfaturada = QuantFaturada - ?", alComando(14), objItemRomaneio.dQuantidade)
                        If lErro <> AD_SQL_SUCESSO Then gError 86371
                    Next
            
                    'Atualiza a qtd faturada o item de Pedido
                    lErro = Comando_ExecutarPos(alComando(3), "UPDATE ItensPedidoDeVenda SET QuantFaturada = QuantFaturada - ?", alComando(2), objItemNF.dQuantidade)
                    If lErro <> AD_SQL_SUCESSO Then gError 62219
            
                    Exit For
                End If
            Next
            
            'BUsca o próximo item
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 62270
        
        Loop
        
        If giTipoVersao = VERSAO_FULL Then
            'seta a variável p\ uma possível criação de 1 bloqueio parcial p\ o PV
            iBloqueio = BLOQUEIO_PARCIAL
        End If
        
    'Se não encontrou
    Else
    
        bPedidoBaixado = True
        
        'BUsca o pedido da tabela dos Pedidos de Venda Baixados
        lErro = CF("PedidoDeVendaBaixado_LeMod", alComando(0), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 62205 Then gError 62211
        
        'Se não encontrou ---> erro
        If lErro <> SUCESSO Then gError 62218
            
        'Desfaz a baixa do pedido de venda
        lErro = CF("PedidoDeVenda_Insere", objPedidoVenda, alComando(2))
        If lErro <> SUCESSO Then gError 62220
        
        With tItemPedido
            
            .sProduto = String(STRING_PRODUTO, 0)
            .sDescricao = String(STRING_ITEM_PEDIDO_DESCRICAO, 0)
            .sLote = String(STRING_ITEM_PEDIDO_LOTE, 0)
            .sUnidadeMed = String(STRING_UM_SIGLA, 0)
            
            'BUsca os itens baixados do pedido
            sSelect = "SELECT NumIntDoc,Produto,Quantidade,PrecoUnitario,PrecoTotal,ClasseUM,UnidadeMed,ValorDesconto,DataEntrega,Descricao,Lote,Status,ValorAbatComissao,QuantCancelada,QuantReservada,QuantFaturada,QuantOP,QuantSC FROM ItensPedidoDeVendaBaixados WHERE  FilialEmpresa = ? AND CodPedido = ?"
            lErro = Comando_ExecutarPos(alComando(3), sSelect, 0, .lNumIntDoc, .sProduto, .dQuantidade, .dPrecoUnitario, .dPrecoTotal, .iClasseUM, .sUnidadeMed, .dValorDesconto, .dtDataEntrega, .sDescricao, .sLote, .iStatus, .dValorAbatComissao, .dQuantCancelada, .dQuantReservada, .dQuantFaturada, .dQuantOP, .dQuantSC, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 62214
                            
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62215
            
            If lErro <> AD_SQL_SUCESSO Then gError 62217 'Não encontrou itens
            
            'Para cada item do Pedido
            Do While lErro <> AD_SQL_SEM_DADOS
            
                iItemPVStatus = .iStatus
                
                'Atualiza a quant faturada
                For Each objItemNF In objNFiscal.ColItensNF
                    If objItemNF.lNumIntItemPedVenda = .lNumIntDoc Then
                    
                        '#####################################################
                        'Inserido por Wagner
                        Set objProduto = New ClassProduto
                        
                        objProduto.sCodigo = objItemNF.sProduto
                        
                        lErro = CF("Produto_Le", objProduto)
                        If lErro <> SUCESSO And lErro <> 23080 Then gError 138549
                        
                        lErro = CF("UM_Conversao", objProduto.iClasseUM, objItemNF.sUnidadeMed, .sUnidadeMed, dFator)
                        If lErro <> SUCESSO Then gError 138550
                        '####################################################
                    
                        .dQuantFaturada = StrParaDbl(Formata_Estoque(.dQuantFaturada - (objItemNF.dQuantidade * dFator))) 'Alterado por Wagner
                        iItemPVStatus = STATUS_ABERTO
                        
                        For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
                            
                            lErro = Comando_ExecutarPos(alComando(14), "SELECT QuantFaturada FROM ItensPedidoDeVendaGrade WHERE NumIntDoc =?", 0, dQuantItem, objItemRomaneio.lNumIntItemPV)
                            If lErro <> AD_SQL_SUCESSO Then gError 86369
                            
                            lErro = Comando_BuscarPrimeiro(alComando(14))
                            If lErro <> AD_SQL_SUCESSO Then gError 86370
                            
                            lErro = Comando_ExecutarPos(alComando(15), "UPDATE ItensPedidoDeVendaGrade SET Quantfaturada = QuantFaturada - ?", alComando(14), objItemRomaneio.dQuantidade)
                            If lErro <> AD_SQL_SUCESSO Then gError 86371
                        Next
                
                        Exit For
                    End If
                Next
                
                objPedidoVenda.colItensPedido.Add .iFilialEmpresa, .lCodPedido, 0, .sProduto, .dQuantidade, .dPrecoUnitario, .dPrecoTotal, .dValorDesconto, .dtDataEntrega, .sProdutoDescricao, .dValorAbatComissao, .dQuantCancelada, .dQuantReservada, .colReservaItem, .sProdutoNomeReduzido, .sUnidadeMed, .sLote, .sUMEstoque, .iClasseUM, .dQuantFaturada, .dQuantAFaturar, .sDescricao, iItemPVStatus, .iControleEstoque, .dQuantOP, .dQuantSC, 0, 0, 0, 0, 0, 0, .lNumIntDoc
                
                'Desfaz a baixa do item de pedido de venda
                lErro = Comando_Executar(alComando(4), "INSERT INTO ItensPedidoDeVenda (FilialEmpresa, CodPedido, NumIntDoc,Produto,Quantidade,PrecoUnitario,PrecoTotal,ClasseUM,UnidadeMed,ValorDesconto,DataEntrega,Descricao,Lote,Status,ValorAbatComissao,QuantCancelada,QuantReservada,QuantFaturada,QuantOP,QuantSC) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, .lNumIntDoc, .sProduto, .dQuantidade, .dPrecoUnitario, .dPrecoTotal, .iClasseUM, .sUnidadeMed, .dValorDesconto, .dtDataEntrega, .sDescricao, .sLote, iItemPVStatus, .dValorAbatComissao, .dQuantCancelada, .dQuantReservada, .dQuantFaturada, .dQuantOP, .dQuantSC)
                If lErro <> AD_SQL_SUCESSO Then gError 62221
            
                'Exclui o item da tabela dos itens baixados
                lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM ItensPedidoDeVendaBaixados", alComando(3))
                If lErro <> AD_SQL_SUCESSO Then gError 62222
            
                'BUsca o próximo item
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62269
                
            Loop
            
        End With
            
        'Exclui o pedido de venda da tabela dos baixados
        lErro = Comando_ExecutarPos(alComando(6), "DELETE FROM PedidosDeVendaBaixados", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 62223
        
        'Desfaz a baixa da tributação do pedido
        lErro = CF("TributacaoPV_Desfaz_Baixa", objPedidoVenda)
        If lErro <> SUCESSO Then gError 62245
        
        'Desfaz a baixa das parcelas do pedido
        lErro = CF("ParcelasPV_Desfaz_Baixa", objPedidoVenda, alComando(7), alComando(8))
        If lErro <> SUCESSO Then gError 62248

        'Desfaz a baixa das comissoes do pedido
        lErro = CF("ComissoesPV_Desfaz_Baixa", objPedidoVenda, alComando(9), alComando(10))
        If lErro <> SUCESSO Then gError 62249
        
        If giTipoVersao = VERSAO_FULL Then
            'Desfaz a baixa dos bloqueios do pedido
            lErro = CF("BloqueiosPV_Desfaz_Baixa", objPedidoVenda, alComando(11), alComando(12))
            If lErro <> SUCESSO Then gError 62250
            
            'seta a variável p\ uma possível criação de 1 bloqueio parcial p\ o PV
            iBloqueio = BLOQUEIO_NAO_RESERVA
        End If
        
    End If

    If giTipoVersao = VERSAO_FULL Then
        
        'Inclui, se necessário, um bloqueio no tipo passado para o pedido de venda
        'faturado pela NF passada
        lErro = CF("CancelaNFiscal_Inclui_BloqueioPV", alComando(13), objNFiscal, objPedidoVenda, iBloqueio)
        If lErro <> SUCESSO Then gError 62268
        
    End If
    
    '###########################################
    'Alterado por Wagner
    'Não pode simplesmente atualizar o que foi faturado porque a nota a ser cancelada
    'Desfaz possíveis baixas manuais
    'Solução: Se o pedido estiver baixado verifica a quantidade livre do pedido e
    'atualiza em ProdutosFiliais senão atualiza só o que deixou de ser faturado.
    objNFAux.lNumIntDoc = objNFiscal.lNumIntDoc
    objNFAux.lNumNotaFiscal = objNFiscal.lNumNotaFiscal
    objNFAux.lNumPedidoVenda = objNFiscal.lNumPedidoVenda
    objNFAux.iFilialEmpresa = objNFiscal.iFilialEmpresa
    objNFAux.iFilialPedido = objNFiscal.iFilialPedido
    
    'mario 19/01/01
    'Troca o sinal da quantidade para que a função ProdutoFilial_Subtrai_NF_QuantPedida adicione as quantidades dos itens as quantidade em pedido de cada produto
    For Each objItemNF In objNFiscal.ColItensNF
        'objItemNF.dQuantidade = -objItemNF.dQuantidade'Comentado por Wagner
        
        'Instancia um objTemporário só para poder manupular os valores
        Set objItemNFAux = New ClassItemNF
    
        objItemNFAux.sProduto = objItemNF.sProduto
        objItemNFAux.sUnidadeMed = objItemNF.sUnidadeMed
        objItemNFAux.iAlmoxarifado = objItemNF.iAlmoxarifado
        
        Set objItemNFAux.colItensRomaneioGrade = objItemNF.colItensRomaneioGrade
        
        'Se o pedido de venda estava baixado
        If bPedidoBaixado Then
        
            'Encontra o item do Pedido de venda associado
            For Each objItemPV In objPedidoVenda.colItensPedido
            
                'Se esse item NF for associado a esse item PV
                If objItemNF.lNumIntItemPedVenda = objItemPV.lNumIntDoc Then
                    
                    'O que vai subir como disponível tem que ser atualizado
                    objItemNFAux.dQuantidade = objItemPV.dQuantFaturada - objItemPV.dQuantidade
            
                    Exit For
                End If
        
            Next
        
        Else
            'Só altera o sinal para fazer a soma ao invés da subtração
            objItemNFAux.dQuantidade = -objItemNF.dQuantidade
        End If
    
        objNFAux.ColItensNF.Add1 objItemNFAux
        
    Next
    
    'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
    lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFAux)
    If lErro <> SUCESSO Then gError 83542
    
'    'Retorna ao  sinal da quantidade original
'    For Each objItemNF In objNFiscal.ColItensNF
'        objItemNF.dQuantidade = -objItemNF.dQuantidade
'    Next
    'fim mario 19/01/01
    '####################################################
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
       
    CancelamentoNFiscal_Atualiza_Pedido = SUCESSO
        
    Exit Function
   
Erro_CancelamentoNFiscal_Atualiza_Pedido:
    
    CancelamentoNFiscal_Atualiza_Pedido = gErr
    
    Select Case gErr
    
        Case 62208
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 62209, 62210, 62211, 62246, 62247, 62248, 62249, 62250, 62268, 62270, 83542, 62220, 138549, 138550, 140318
        
        Case 62212, 62213, 62214, 62215, 86369, 86370
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA", gErr)
        
        Case 62216, 62217
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", gErr, objItemNF.lNumIntItemPedVenda)
        
        Case 62218
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 62219, 86371
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PEDVENDA", gErr, objPedidoVenda.lCodigo)
        
        Case 62221
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSPV", gErr)
        
        Case 62222
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSPEDIDODEVENDA", gErr, objPedidoVenda.lCodigo)
            
        Case 62223
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PEDIDODEVENDA", gErr, objPedidoVenda.lCodigo)
                    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149859)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function CPR_Exclui(ByVal iClasseDocCPR As Integer, ByVal lNumIntDocCPR As Long, Optional ByVal iExclusao As Integer = 0) As Long
'Usada no Cancelamento de NFiscais.
'Exclui o documento de CPR com a classe e o número interno passados.
'Se iExclusao = 1 indica que se trata de uma exclusão fisica devido a exclusao de uma nota fiscal
'ATENÇÃO : ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO.

Dim lErro As Long
Dim objContabil As New ClassContabil
Dim objTituloReceber As ClassTituloReceber
Dim objTituloPagar As ClassTituloPagar
Dim objNFPag As ClassNFsPag
Dim objCreditoPag As ClassCreditoPagar
Dim objDebitoRec As ClassDebitoRecCli

On Error GoTo Erro_CPR_Exclui

    Select Case iClasseDocCPR

        Case CPR_TITULO_PAGAR
            'Exclui o título a pagar
            Set objTituloPagar = New ClassTituloPagar
            objTituloPagar.lNumIntDoc = lNumIntDocCPR
            
            lErro = CF("TituloPagar_Le1", objTituloPagar)
            If lErro <> SUCESSO And lErro <> 89122 Then gError 62439
            
            'se não encontrou o titulo ==> possivelmente ele está baixado.
            If lErro = 89122 Then gError 89106
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objTituloPagar.iStatus = STATUS_EXCLUIDO Then gError 89124
            
            If iExclusao = 1 Then objTituloPagar.iExclusao = 1
            
            lErro = CF("TituloPagar_Exclui_EmTransacao", objTituloPagar, objContabil)
            If lErro <> SUCESSO Then gError 62177
            
        Case CPR_TITULO_RECEBER
            
            Set objTituloReceber = New ClassTituloReceber
            objTituloReceber.lNumIntDoc = lNumIntDocCPR
            
            'Localiza  o titulo a receber
            lErro = CF("TituloReceber_Le", objTituloReceber, iExclusao)
            If lErro <> SUCESSO And lErro <> 26061 Then gError 62178
            
            'se não encontrou o titulo ==> possivelmente ele está baixado.
            If lErro <> SUCESSO Then gError 89107
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objTituloReceber.iStatus = STATUS_EXCLUIDO Then gError 89125
            
            If objTituloReceber.sSiglaDocumento = TIPODOC_FATURA_A_RECEBER Then gError 62441
            
            If iExclusao = 1 Then objTituloReceber.iExclusao = 1
            
            'Exclui o titulo a receber
            lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
            If lErro <> SUCESSO Then gError 62180

        Case CPR_NF_PAGAR

            Set objNFPag = New ClassNFsPag
            objNFPag.lNumIntDoc = lNumIntDocCPR
            
            lErro = CF("NFPag_Le", objNFPag, iExclusao)
            If lErro <> SUCESSO And lErro <> 18257 Then gError 62458
            
            If lErro <> SUCESSO Then gError 89108
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objNFPag.iStatus = STATUS_EXCLUIDO Then gError 89126
            
            If objNFPag.lNumIntTitPag <> 0 Then gError 62440
            
            If iExclusao = 1 Then objNFPag.iExclusao = 1
            
            'Exclui a Nota Fiscal a Pagar
            lErro = CF("NFPag_Exclui_EmTransacao", objNFPag, objContabil)
            If lErro <> SUCESSO Then gError 62181

        Case CPR_DEBITO_RECEBER

            Set objDebitoRec = New ClassDebitoRecCli
            objDebitoRec.lNumIntDoc = lNumIntDocCPR
            
            lErro = CF("DebitoReceber_Le", objDebitoRec, iExclusao)
            If lErro <> SUCESSO And lErro <> 17835 Then gError 62459
            
            If lErro <> SUCESSO Then gError 89109
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objDebitoRec.iStatus = STATUS_EXCLUIDO Then gError 89127
            
            If iExclusao = 1 Then objDebitoRec.iExclusao = 1
        
            'Exclui o Débito a receber
            lErro = CF("DebitoRecCli_Exclui_EmTransacao", objDebitoRec, objContabil)
            If lErro <> SUCESSO Then gError 62182
            
        Case CPR_CREDITO_PAGAR

            Set objCreditoPag = New ClassCreditoPagar
            objCreditoPag.lNumIntDoc = lNumIntDocCPR
            
            'Localiza o Credito a Pagar
            lErro = CF("CreditoPagar_Le", objCreditoPag, iExclusao)
            If lErro <> SUCESSO And lErro <> 17071 Then gError 62183
            
            If lErro <> SUCESSO Then gError 62184
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objCreditoPag.iStatus = STATUS_EXCLUIDO Then gError 89128
            
            If iExclusao = 1 Then objCreditoPag.iExclusao = 1
            
            'Exclui o crédito a pagar
            lErro = CF("CreditoPagar_Exclui_EmTransacao", objCreditoPag, objContabil)
            If lErro <> SUCESSO Then gError 62185

    End Select

    CPR_Exclui = SUCESSO

    Exit Function

Erro_CPR_Exclui:

    CPR_Exclui = gErr

    Select Case gErr

        Case 62177, 62178, 62180, 62181, 62182, 62183, 62185, 62439, 62459

        Case 62179
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULORECEBER_NAO_CADASTRADO", gErr, lNumIntDocCPR)
        
        Case 62184
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITOPAGAR_NAO_CADASTRADO1", gErr, lNumIntDocCPR)
            
        Case 62440
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATURAPAG_NAO_EXCLUIDA", gErr)
            
        Case 62441
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATURAREC_NAO_EXCLUIDA", gErr, objTituloReceber.lNumTitulo)
        
        Case 89106
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89107
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_RECEBER_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89108
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFPAG_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89109
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITO_RECEBER_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89124
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_RECEBER_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89126
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFPAG_NAO_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89127
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITO_RECEBER_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89128
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITO_PAGAR_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149860)

    End Select

    Exit Function

End Function

Function CancelaNFiscal_Inclui_BloqueioPV(ByVal lComando As Long, ByVal objNFiscal As ClassNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal iBloqueio As Integer) As Long
'Inclui se necessário um bloqueio no tipo passado no pedido passado que foi
'faturado pela nota fiscal cancelada passada em objNfiscal.

Dim lErro As Long
Dim objBloqueioPV As ClassBloqueioPV
Dim bIncluirBloq As Boolean
Dim objItemNF As ClassItemNF
Dim objProduto As New ClassProduto
Dim bPossuiReserva As Boolean

On Error GoTo Erro_CancelaNFiscal_Inclui_BloqueioPV
    
    bIncluirBloq = True
    bPossuiReserva = False
    
    'Para cada item da NF
    For Each objItemNF In objNFiscal.ColItensNF
    
        objProduto.sCodigo = objItemNF.sProduto
        'Lê o produto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 11111
        If lErro <> SUCESSO Then Error 11112
        'Verifica se a nota possui algum produto com controle de estoque de reserva
        If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
            bPossuiReserva = True
            Exit For
        End If
    Next
    
    'Se pelo menos um dos produtos possui reserva
    If bPossuiReserva Then
        'Lê os bloqueios do pedido
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then Error 62246
        
        'Verifica se já possui um bloqueio de estoque
        For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
            If (objPedidoVenda.iTipoPedido = BLOQUEIO_NAO_RESERVA Or objPedidoVenda.iTipoPedido = BLOQUEIO_TOTAL Or objPedidoVenda.iTipoPedido = BLOQUEIO_PARCIAL) And objBloqueioPV.dtDataLib = DATA_NULA Then
                bIncluirBloq = False
                Exit For
            End If
        Next
        
        'Se não possui nenum bloqueio de  estoque
        If bIncluirBloq = True Then
            'Gera um bloqueio do tipo passado
            Set objBloqueioPV = New ClassBloqueioPV
            objBloqueioPV.dtData = gdtDataAtual
            objBloqueioPV.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
            objBloqueioPV.lPedidoDeVendas = objPedidoVenda.lCodigo
            objBloqueioPV.iTipoDeBloqueio = iBloqueio
            objBloqueioPV.sCodUsuario = gsUsuario
            objBloqueioPV.dtData = gdtDataAtual
            objBloqueioPV.dtDataLib = DATA_NULA
            
            'Inclui o bloqueio na tabela dos bloqueios de PV
            lErro = CF("BloqueioPV_Insere", lComando, objBloqueioPV)
            If lErro <> AD_SQL_SUCESSO Then Error 62247
        End If
        
    End If
    
    CancelaNFiscal_Inclui_BloqueioPV = SUCESSO
    
    Exit Function
    
Erro_CancelaNFiscal_Inclui_BloqueioPV:

    CancelaNFiscal_Inclui_BloqueioPV = Err
    
    Select Case Err
    
        Case 62246, 62247
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149861)
            
    End Select
    
    Exit Function

End Function

Function Serie_Unlock_ImpressaoNF(ByVal objSerie As ClassSerie) As Long
'Faz Unlock no Relatorio de Notas Fiscais

Dim lErro As Long
Dim iLockImpressao As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
 
On Error GoTo Erro_Serie_Unlock_ImpressaoNF
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61033
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60398
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60399
    
    'Lê a Série para poder Unlockar
    lErro = Comando_ExecutarPos(lComando, "SELECT LockImpressao FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, iLockImpressao, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60400

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60401

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 60402
    
'    'Se está não está Lockado então ---- > ERRO
'    If iLockImpressao = RELATORIO_NF_NAO_LOCKADO Then Error 60403
    
    'Estava lockado então Unlocka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET LockImpressao = ?", lComando, RELATORIO_NF_NAO_LOCKADO)
    If lErro <> AD_SQL_SUCESSO Then Error 60404

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61034

    Serie_Unlock_ImpressaoNF = SUCESSO
    
    Exit Function
    
Erro_Serie_Unlock_ImpressaoNF:

    Serie_Unlock_ImpressaoNF = Err
    
    Select Case Err
        
        Case 60398, 60399
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60400, 60401
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 60402 'Não encontrou, a  ser Tratado na rotina chamadora
        
'        Case 60403 'Relatorio não Lockado Anteriormente
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_SERIE_IMPRESSAO_NF", Err, objSerie.sSerie)
        
        Case 60404
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61033
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61034
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149862)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Unlock_Atualiza_ImpressaoNF(ByVal objSerie As ClassSerie) As Long
'Faz Unlock no Relatório de NF e Atualiza o Número da última Nota impressa.

Dim lErro As Long
Dim iLockImpressao As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long

On Error GoTo Erro_Serie_Unlock_Atualiza_ImpressaoNF
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61035
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60405
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60406
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT LockImpressao FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, iLockImpressao, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60407

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60408

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 60409
    
'    'Se está não Lockado então ---- > ERRO
'    If iLockImpressao = RELATORIO_NF_NAO_LOCKADO Then Error 60410
    
    'Se estava lockado então unlocka e altera próximo número de Nota a imprimir
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET LockImpressao = ?, ProxNumNFiscalImpressa = ?", lComando, RELATORIO_NF_NAO_LOCKADO, objSerie.lProxNumNFiscalImpressa)
    If lErro <> AD_SQL_SUCESSO Then Error 60411

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61036

    Serie_Unlock_Atualiza_ImpressaoNF = SUCESSO
    
    Exit Function
    
Erro_Serie_Unlock_Atualiza_ImpressaoNF:

    Serie_Unlock_Atualiza_ImpressaoNF = Err
    
    Select Case Err
        
        Case 60405, 60406
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60407, 60408
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 60409 'Não encontrou , a ser Tratado na rotina chamadora
        
'        Case 60410 'Relatorio não Lockado Anteriormente
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_SERIE_IMPRESSAO_NF", Err, objSerie.sSerie)
        
        Case 60411
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)

        Case 61035
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61036
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149863)


    End Select

    'Fechamento transação
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Lock_ImpressaoNFiscal(ByVal objSerie As ClassSerie) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tSerie As typeSerie
Dim vbMsgRes As VbMsgBoxResult
Dim lTransacao As Long

On Error GoTo Erro_Serie_Lock_ImpressaoNFiscal
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61014
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60383
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60384
    
    tSerie.sNomeTsk = String(STRING_NOME_TSK, 0)
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT LockImpressao, ProxNumNFiscalImpressa, NomeTsk FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, tSerie.iLockImpressao, tSerie.lProxNumNFiscalImpressa, tSerie.sNomeTsk, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60385

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60386

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 60387
    
    'Se está Lockado então ---- > ERRO
    If tSerie.iLockImpressao = RELATORIO_NF_LOCKADO Then
        
        'Avisa que a Impressão está bloqueada
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_NFISCAL_LOCKADA")
        If vbMsgRes = vbNo Then Error 60388
        
    End If
    
    objSerie.iLockImpressao = RELATORIO_NF_LOCKADO
    objSerie.lProxNumNFiscalImpressa = tSerie.lProxNumNFiscalImpressa
    objSerie.sNomeTsk = tSerie.sNomeTsk
    
    'Se não estava lockado então locka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET LockImpressao = ?", lComando, RELATORIO_NF_LOCKADO)
    If lErro <> AD_SQL_SUCESSO Then Error 60389

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61016

    Serie_Lock_ImpressaoNFiscal = SUCESSO
    
    Exit Function
    
Erro_Serie_Lock_ImpressaoNFiscal:

    Serie_Lock_ImpressaoNFiscal = Err
    
    Select Case Err
        
        Case 60383, 60384
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60385, 60386
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 60387 'Não encontrou
        
        Case 60388 'Relatorio Lockado
        
        Case 60389
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61014
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 61016
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149864)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Altera_Imprimindo(ByVal objSerie As ClassSerie) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tSerie As typeSerie
Dim lTransacao As Long

On Error GoTo Erro_Serie_Altera_Imprimindo
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61015
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61004
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 61005
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT Imprimindo FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, tSerie.iImprimindo, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 61006

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61007
    
    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 61008
    
    'Se não estava lockado então locka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET Imprimindo = ?", lComando, RELATORIO_NF_IMPRIMINDO)
    If lErro <> AD_SQL_SUCESSO Then Error 61009

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61017

    Serie_Altera_Imprimindo = SUCESSO
    
    Exit Function
    
Erro_Serie_Altera_Imprimindo:

    Serie_Altera_Imprimindo = Err
    
    Select Case Err
        
        Case 61004, 61005
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61006, 61007
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 61008 'Não encontrou
        
        Case 61009
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61015
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61017
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149865)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Altera_Nao_Imprimindo(ByVal objSerie As ClassSerie) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tSerie As typeSerie
Dim lTransacao As Long

On Error GoTo Erro_Serie_Altera_Nao_Imprimindo
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61020
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61021
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 61022
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT Imprimindo FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, tSerie.iImprimindo, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 61023

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61024
    
    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 61025
    
    'Se não estava lockado então locka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET Imprimindo = ?", lComando, RELATORIO_NF_NAO_IMPRIMINDO)
    If lErro <> AD_SQL_SUCESSO Then Error 61026

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61027

    Serie_Altera_Nao_Imprimindo = SUCESSO
    
    Exit Function
    
Erro_Serie_Altera_Nao_Imprimindo:

    Serie_Altera_Nao_Imprimindo = Err
    
    Select Case Err
        
        Case 61020
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61021, 61022
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61023, 61024
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 61025 'Não encontrou
        
        Case 61026
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61027
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149866)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Comissoes_NFiscal_Exclui(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim dtDataBaixa As Date

 On Error GoTo Erro_Comissoes_NFiscal_Exclui

    'ABre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 62452
    Next
    
    'Lê as comissões da nota fiscal passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBaixa FROM Comissoes WHERE TipoTitulo = ? AND NumIntDoc = ?", 0, dtDataBaixa, TIPO_NF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 62453
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62454
    
    'Para cada comissao encontrada
    Do While lErro = AD_SQL_SUCESSO
        'Se houver comissao baixada --> Erro
        If dtDataBaixa <> DATA_NULA Then Error 62456
        
        'Exclui a comissão da tabela de comissões
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Comissoes", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 62457
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62455
        
    Loop
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Comissoes_NFiscal_Exclui = SUCESSO

    Exit Function
    
Erro_Comissoes_NFiscal_Exclui:

    Comissoes_NFiscal_Exclui = Err
    
    Select Case Err
    
        Case 62452
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 62453, 62454, 62455
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES3", Err)
        
        Case 62456
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSAO_BAIXADA_CANC_NFISCAL", Err)
        
        Case 62457
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESNF2", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149867)
    
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    

End Function

Private Function NFiscal_Altera_Status(ByVal lNumIntDoc As Long, ByVal iClasseDocCPR, ByVal iStatus As Integer) As Long
'Altera o Status da Nota Fiscal para a ClasseDoc e NumIntDoc passados

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim lNumIntDocAux As Long

On Error GoTo Erro_NFiscal_Altera_Status

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61281
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 61282

    'Lê as Notas Fiscas que tenham o NumIntDocCPR e ClasseDocCPR igual ao passado
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM NFiscal WHERE ClasseDocCPR = ? AND NumIntDocCPR = ?", 0, lNumIntDocAux, iClasseDocCPR, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 61283

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61284
     
    Do While lErro = AD_SQL_SUCESSO
        
        'Altera o status da Nota para o Status passado
        lErro = Comando_ExecutarPos(lComando2, "UPDATE NFiscal SET Status = ?", lComando, iStatus)
        If lErro <> AD_SQL_SUCESSO Then Error 61285
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61286
    
    Loop
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    NFiscal_Altera_Status = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Altera_Status:

    NFiscal_Altera_Status = Err
    
    Select Case Err
    
        Case 61281, 61282
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61283, 61284, 61286
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", Err)
        
        Case 61285
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFISCAL2", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149868)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

'------- Raphael 19/07/00 Criadas versão 2 para Livro Fiscal

Function NFiscal_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'grava uma nota fiscal

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscal_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 35961

    lErro = CF("NFiscal_Grava_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 106557
    
    'Confirma Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 39004

    NFiscal_Grava = SUCESSO

    Exit Function

Erro_NFiscal_Grava:

    NFiscal_Grava = gErr

    Select Case gErr

        Case 106557
        
        Case 35961
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 39004
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149869)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function NFiscalFatura_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava NFiscal Fatura

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalFatura_Grava

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 42413

    lErro = CF("NFiscalFatura_Grava_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 106558
    
    'Faz o Commit da Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 42438

    NFiscalFatura_Grava = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_Grava:

    NFiscalFatura_Grava = gErr
    
    Select Case gErr
    
        Case 106558
        
        Case 42413
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 42438
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149870)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFiscalDevolucao_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava uma NFiscal Devolução

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalDevolucao_Grava

    'Inicia transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 39246
    
    lErro = CF("NFiscalDevolucao_Grava_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 106559
       
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 39275
    
    NFiscalDevolucao_Grava = SUCESSO

    Exit Function
    
Erro_NFiscalDevolucao_Grava:

    NFiscalDevolucao_Grava = gErr
    
    Select Case gErr
    
        Case 106559
    
        Case 39246
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 39275
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149871)
            
    End Select
    
    'Finaliza transação
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFiscalRemessa_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalRemessa_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 42059
    
    lErro = CF("NFiscalRemessa_Grava_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 106560
           
    'Faz o Commit da Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 42088
    
    NFiscalRemessa_Grava = SUCESSO

    Exit Function
    
Erro_NFiscalRemessa_Grava:

    NFiscalRemessa_Grava = gErr
    
    Select Case gErr
    
        Case 106560
        
        Case 42059
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 42088
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149872)
            
    End Select
    
    Call Transacao_Rollback
   
    Exit Function
    
End Function

Function NFiscalPedido_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal gerada a partir de um pedido de venda

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalPedido_Grava
   
   'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 46598

    lErro = CF("NFiscalPedido_Grava_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 106561
           
    'Faz o commit
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 35647
    
    NFiscalPedido_Grava = SUCESSO
    
    Exit Function
    
Erro_NFiscalPedido_Grava:

    NFiscalPedido_Grava = gErr
    
    Select Case gErr
    
        Case 106561
        
        Case 35647
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                    
        Case 46598
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149873)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Function NFiscalRemPedido_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objBloqueioPV As ClassBloqueioPV, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal remessa gerada a partir de um pedido de venda

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalRemPedido_Grava
   
   'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 91499

    lErro = CF("NFiscalRemPedido_Grava_EmTrans", objNFiscal, objBloqueioPV, objContabil)
    If lErro <> SUCESSO Then gError 106562
           
    'Faz o commit
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 96027
    
    NFiscalRemPedido_Grava = SUCESSO
    
    Exit Function
    
Erro_NFiscalRemPedido_Grava:

    NFiscalRemPedido_Grava = gErr
    
    Select Case gErr
      
        Case 106562
        
        Case 91499
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
 
        Case 96027
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
      
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149874)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Function NFiscalFaturaPedido_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal fatura gerada a partir de um pedido de venda

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalFaturaPedido_Grava
   
   'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 46598

    lErro = CF("NFiscalFaturaPedido_Grava_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 106563
               
    'Faz o commit
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 35647
    
    NFiscalFaturaPedido_Grava = SUCESSO
    
    Exit Function
    
Erro_NFiscalFaturaPedido_Grava:

    NFiscalFaturaPedido_Grava = gErr
    
    Select Case gErr
    
        Case 106563
        
        Case 35647
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 46598
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149875)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function Bloqueio_Libera_Automatico(ByVal objBloqueioPV As ClassBloqueioPV) As Long
'grava as liberações de bloqueio

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iSequencial As Integer

On Error GoTo Erro_Bloqueio_Libera_Automatico

     For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96070
     Next
    
    '???? Colocar o tipo do bloqueio. Mario
    'Pesquisa no BD o bloqueio em questão
    'Janaina
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Sequencial FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? AND TipoDeBloqueio = ? AND Datalib = ?", 0, iSequencial, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iTipoDeBloqueio, DATA_NULA)
    'Janaina
    If lErro <> AD_SQL_SUCESSO Then gError 96071

    'Lê o bloqueio
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96072
    
    'Se encontrou o bloqueio
    If lErro = AD_SQL_SUCESSO Then

        'Loca o bloqueio
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 36650
    
        '???? desbloqueio automatico. Mario
        'Atualiza o Bloqueio
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE BloqueiosPV SET CodUsuarioLib = ? , ResponsavelLib = ?, DataLib = ?", alComando(0), objBloqueioPV.sCodUsuarioLib, DESBLOQUEIO_AUTO_RESP, gdtDataAtual)
        If lErro <> AD_SQL_SUCESSO Then gError 96073
    
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Bloqueio_Libera_Automatico = SUCESSO

    Exit Function

Erro_Bloqueio_Libera_Automatico:

    Bloqueio_Libera_Automatico = gErr

    Select Case gErr
         
         Case 96070
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

         Case 96074, 96075
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        '???? Trocar a mensagem. Mario
        'Janaina
        Case 96071, 96072
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV", gErr)

        Case 96073
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BLOQUEIOPV", gErr, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iSequencial)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149876)

    End Select
    
    Exit Function

End Function

''Copiada provisóriamente está em FatGrava
'Private Function Processa_NFiscal_Credito(objNFiscal As ClassNFiscal) As Long
''verifica se o cliente possui o crédito para faturar a nota fiscal.
''Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
''IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO
'
'Dim lErro As Long
'Dim objLiberacaoCredito As New ClassLiberacaoCredito
'Dim objValorLiberadoCredito As New ClassValorLiberadoCredito
'Dim lComando As Long
'Dim lComando1 As Long
'Dim tCliente As typeCliente
'Dim sCodUsuario As String
'Dim dValor As Double
'Dim dtData As Date
'Dim objClienteEstatistica As New ClassFilialClienteEst
'Dim bNFPedido As Boolean
'Dim iCreditoAprovado As Integer
'Dim objPedidoVenda As New ClassPedidoDeVenda
'
'On Error GoTo Erro_Processa_NFiscal_Credito
'
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 44482
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 44483
'
'    'Verifica se NFiscal é oriunda de Pedido
'    If objNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Or objNFiscal.iTipoNFiscal = DOCINFO_NFISVPV Then
'        bNFPedido = True
'    Else
'        bNFPedido = False
'    End If
'
'    'Se for testa se Pedido tem crédito aprovado
'    If bNFPedido Then
'
'        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
'        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
'
'        'verifica se o pedido tem credito aprovado
'        lErro = CF("BloqueiosPV_Credito_Aprovado_Testa",objPedidoVenda, iCreditoAprovado)
'        If lErro <> SUCESSO Then Error 25740
'
'    End If
'
'    'se NF não for oriunda de PV ou se crédito não está liberado
'    If (Not bNFPedido) Or iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Then
'
'        'Lê os saldos e o limite de credito do Cliente
'        lErro = Comando_ExecutarLockado(lComando, "SELECT LimiteCredito FROM Clientes WHERE Codigo = ?", tCliente.dLimiteCredito, objNFiscal.lCliente)
'        If lErro <> AD_SQL_SUCESSO Then Error 44484
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44485
'
'        'se não encontrou os dados do cliente
'        If lErro = AD_SQL_SEM_DADOS Then Error 44486
'
'        'loca o cliente
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 44487
'
'        'Passa chave de objClienteEstatistica
'        objClienteEstatistica.lCodCliente = objNFiscal.lCliente
'        objClienteEstatistica.iFilialEmpresa = objNFiscal.iFilialEmpresa
'
'        'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
'        lErro = CF("Cliente_Le_Estatistica_Credito",objClienteEstatistica)
'        If lErro <> SUCESSO Then Error 52955
'
'        'Verifica se a soma dos creditos em Pedidos, Titulos e NFs ultrapassa o limite de Credito do Cliente
'        If tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + IIf(bNFPedido, 0, objNFiscal.dValorTotal)) Then
'
'            'se um usuário não autorizou o credito ==> erro
'            If Len(objNFiscal.sCodUsuario) = 0 Then Error 44488
'
'                objLiberacaoCredito.sCodUsuario = objNFiscal.sCodUsuario
'
'            If giTipoVersao = VERSAO_FULL Then
'
'                'verificar se o usuário tem autorizacao para liberar o valor
'                lErro = CF("LiberacaoCredito_Lock",objLiberacaoCredito)
'                If lErro <> SUCESSO And lErro <> 44479 Then Error 44489
'
'                'se não foi encontrado autorização para o usuario liberar credito
'                If lErro = 44479 Then Error 44490
'
'                'se o valor da nota ultrapassar o limite de credito que o usuario pode conceder por operacao
'                If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteOperacao Then Error 44491
'
'                objValorLiberadoCredito.sCodUsuario = objNFiscal.sCodUsuario
'                objValorLiberadoCredito.iAno = Year(gdtDataAtual)
'
'                'Lê a estatistica de liberação de credito de um usuario em um determinado ano
'                lErro = CF("ValorLiberadoCredito_Lock",objValorLiberadoCredito)
'                If lErro <> SUCESSO And lErro <> 44470 Then Error 44492
'
'                'se o valor da nota ultrapassar o valor mensal que o usuario tem capacidade de liberar
'                If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteMensal - objValorLiberadoCredito.adValorLiberado(Month(gdtDataAtual)) Then Error 44493
'
'                sCodUsuario = objValorLiberadoCredito.sCodUsuario
'
'            ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'                sCodUsuario = objNFiscal.sCodUsuario
'
'            End If
'
'            dValor = objNFiscal.dValorTotal
'            dtData = gdtDataAtual
'
'            'Atualiza a estatistica de liberação de credito do usuario
'            lErro = CF("ValorLiberadoCredito_Grava",sCodUsuario, dValor, dtData)
'            If lErro <> SUCESSO Then Error 44494
'
'        End If
'
'    End If
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Processa_NFiscal_Credito = SUCESSO
'
'    Exit Function
'
'Erro_Processa_NFiscal_Credito:
'
'    Processa_NFiscal_Credito = Err
'
'    Select Case Err
'
'        Case 44482, 44483
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 44484, 44485
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", Err, objNFiscal.lCliente)
'
'        Case 44486
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", Err, objNFiscal.lCliente)
'
'        Case 44487
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", Err, objNFiscal.lCliente)
'
'        Case 44488
'           lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_CREDITO", Err, objNFiscal.lCliente)
'
'        Case 25740, 44489, 44492, 44494, 52955
'
'        Case 44490
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE", Err, objLiberacaoCredito.sCodUsuario)
'
'        Case 44491
'            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEOPERACAO", Err, objLiberacaoCredito.sCodUsuario)
'
'        Case 44493
'            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEMENSAL", Err, objLiberacaoCredito.sCodUsuario)
'
'        Case 44495
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", Err, objNFiscal.lCliente)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149877)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function
'
'Private Function PedidoDeVenda_TestaBloqueios(objPedidoVenda As ClassPedidoDeVenda) As Long
''verifica se existe bloqueio que impeça o faturamento
'
'Dim lErro As Long
'Dim objBloqueioPV As ClassBloqueioPV
'
'On Error GoTo Erro_PedidoDeVenda_TestaBloqueios
'
'    For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
'        If objBloqueioPV.dtDataLib = DATA_NULA Then
'            If objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_PARCIAL And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_NAO_RESERVA Then Error 25741
'        End If
'    Next
'
'    PedidoDeVenda_TestaBloqueios = SUCESSO
'
'    Exit Function
'
'Erro_PedidoDeVenda_TestaBloqueios:
'
'    PedidoDeVenda_TestaBloqueios = Err
'
'    Select Case Err
'
'        Case 25741 'encontrou bloqueio que impede o faturamento
'
'        Case Else
'             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149878)
'
'     End Select
'
'     Exit Function
'
'End Function
'

'???? Fernando. Antes de transferir para RotinasMAT ler a observacao ao lado e se necessário falar com Mario. Existe uma rotina em ClassEstGrava com o nome de NFiscalEntrada_Calcula_Custo e que deverá ser substituida por esta que é igual. Quem antes chamava NFiscalEntrada_Calcula_Custo deverá passar a chamar NFiscal_Calcula_Custo.
Function NFiscal_Calcula_Custo(ByVal objItemNF As ClassItemNF) As Long
'calcula o custo do item da NF em função do credito do ICMS e do IPI

On Error GoTo Erro_NFiscal_Calcula_Custo
    
    objItemNF.dCusto = objItemNF.dCusto + objItemNF.dValorTotal
    If objItemNF.objTributacaoItemNF.dICMSCredito <> 0 Then
        objItemNF.dCusto = objItemNF.dCusto - objItemNF.objTributacaoItemNF.dICMSCredito
    End If
    If objItemNF.objTributacaoItemNF.dIPICredito = 0 Then
        objItemNF.dCusto = objItemNF.dCusto + objItemNF.objTributacaoItemNF.dIPIValor
    End If
        
    NFiscal_Calcula_Custo = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Calcula_Custo:

    NFiscal_Calcula_Custo = Err
    
    Select Case Err

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149879)

    End Select

    Exit Function
            
End Function

Function ProdutoVendido_Cancela_Estatisticas(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a estatística dos produtos vendidos

Dim objItemNF As ClassItemNF
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim lErro As Long
Dim objProduto As New ClassProduto

On Error GoTo Erro_ProdutoVendido_Cancela_Estatisticas

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Le o tipo do produto
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 86081
    
    'verifica se é Notafiscal de venda
    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
                
        For Each objItemNF In objNFiscal.ColItensNF
        
            objProduto.sCodigo = objItemNF.sProduto
            
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 23080 Then gError 86082
            If lErro <> SUCESSO Then gError 86083
            
            objItemNF.iClasseUM = objProduto.iClasseUM
            objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
            objItemNF.sUMVenda = objProduto.sSiglaUMVenda
            
        Next
                
        'Grava a estatistica do Dia do produto
        lErro = SldDiaFat_Cancela_Est(objNFiscal)
        If lErro <> SUCESSO Then gError 86084
        
        'Grava a estatística do Mês do produto
        lErro = SldMesFat_Cancela_Est(objNFiscal)
        If lErro <> SUCESSO Then gError 86085
    
    End If
            
    ProdutoVendido_Cancela_Estatisticas = SUCESSO
    
    Exit Function
    
Erro_ProdutoVendido_Cancela_Estatisticas:
    
    ProdutoVendido_Cancela_Estatisticas = gErr

    Select Case gErr
        
        Case 86081, 86082, 86084, 86085 'Tratado nas rotinas chamadas
        
        Case 86083
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149880)

    End Select

    Exit Function

End Function


Function SldDiaFat_Cancela_Est(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a estatística do Dia do produto

Dim lErro As Long
Dim objItemNF As New ClassItemNF
Dim objSldDiaFat As New ClassSldDiaFat
Dim dQuantUMVenda As Double
Dim dFator As Double
Dim lComando As Long, lComando2 As Long
Dim objProduto As New ClassProduto

On Error GoTo Erro_SldDiaFat_Cancela_Est
        
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86086

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 86087
            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.ColItensNF
        
        'Converte as unidades de medida
        lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, objItemNF.sUMVenda, dFator)
        If lErro <> SUCESSO Then gError 86088
    
        'Quantidade convertida
        dQuantUMVenda = (objItemNF.dQuantidade * dFator)
            
        objSldDiaFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objSldDiaFat.dtData = objNFiscal.dtDataEmissao
        objSldDiaFat.sProduto = objItemNF.sProduto
            
        'Lê todos os atributos na tabela SldDiaFat e faza lock exclusive
        lErro = CF("SldDiaFat_Le_Lock", lComando, objSldDiaFat)
        If lErro <> SUCESSO And lErro <> 52729 Then gError 86089
                        
        If lErro = SUCESSO Then 'Registro SldDiaFat existe no BD
                
            objSldDiaFat.dValorFaturado = objSldDiaFat.dValorFaturado - objItemNF.dValorTotal
                
            objSldDiaFat.dQuantFaturada = objSldDiaFat.dQuantFaturada - dQuantUMVenda
            objSldDiaFat.dTotalDescontos = objSldDiaFat.dTotalDescontos - objItemNF.dValorDesconto
            
            'Atualiza a tabela de SldDiaFat
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado =?, QuantFaturada=?, TotalDescontos=?", lComando, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos)
            If lErro <> AD_SQL_SUCESSO Then gError 86090
        
        End If
            
    Next
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    SldDiaFat_Cancela_Est = SUCESSO
    
    Exit Function
    
Erro_SldDiaFat_Cancela_Est:
    
    SldDiaFat_Cancela_Est = gErr

    Select Case gErr
        
        Case 86086, 86087
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 86089, 86088 'Tratados nas rotinas chamadas
        
        Case 86090
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAFAT", gErr, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149881)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
        
    Exit Function

End Function
       
Function SldMesFat_Cancela_Est(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a estatística do Mês do produto

Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim objSldMesFat As New ClassSldMesFat
Dim iMes As Integer
Dim dFator As Double
Dim dQuantUMVenda As Double
Dim sMes As String
Dim lComando As Long, lComando2 As Long

On Error GoTo Erro_SldMesFat_Cancela_Est
    
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86091

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 86092
                            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.ColItensNF
        
        'Converte as unidades de medida
        lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, objItemNF.sUMVenda, dFator)
        If lErro <> SUCESSO Then gError 86093
    
        'Quantidade convertida
        dQuantUMVenda = (objItemNF.dQuantidade * dFator)
            
        objSldMesFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objSldMesFat.iAno = Year(objNFiscal.dtDataEmissao)
        objSldMesFat.sProduto = objItemNF.sProduto
        
        iMes = Month(objNFiscal.dtDataEmissao)
        sMes = CStr(iMes)
                                    
        'Lê todos os atributos na tabela SldMesFat e faza lock exclusive
        lErro = SldMesFat_Le_Lock_Mes(lComando, objSldMesFat, iMes)
        If lErro <> SUCESSO And lErro <> 59264 Then gError 86094
                        
        If lErro = SUCESSO Then
        
            objSldMesFat.dValorFaturado(iMes) = objSldMesFat.dValorFaturado(iMes) - objItemNF.dValorTotal
            objSldMesFat.dQuantFaturada(iMes) = objSldMesFat.dQuantFaturada(iMes) - dQuantUMVenda
            objSldMesFat.dTotalDescontos(iMes) = objSldMesFat.dTotalDescontos(iMes) - objItemNF.dValorDesconto
            
            'Atualiza a tabela de SldMesFat
            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" & sMes & "=?, QuantFaturada" & sMes & "=?, TotalDescontos" & sMes & "= ?", lComando, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes))
            If lErro <> AD_SQL_SUCESSO Then gError 86095
            
        End If
        
        lErro = SldMesFatFilCli_Cancela_Est(objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objNFiscal.lCliente, objNFiscal.iFilialCli, dQuantUMVenda, objItemNF.dValorTotal, sMes)
        If lErro <> SUCESSO Then gError 110237
        
    Next
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
            
    SldMesFat_Cancela_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFat_Cancela_Est:
    
    SldMesFat_Cancela_Est = gErr

    Select Case gErr
        
        Case 86091, 86092
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 86094, 86093 'Tratados nas rotinas chamadas
        
        Case 86095
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", gErr, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case 110237
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149882)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Function NotaFiscalSaida_Excluir(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NotaFiscalSaida_Excluir
    
    'ABre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 83901

    lErro = CF("NotaFiscalSaida_Excluir_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 126968
    
    'Confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 83935
    
    NotaFiscalSaida_Excluir = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Excluir:

    NotaFiscalSaida_Excluir = gErr

    Select Case gErr

        Case 83901
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 83935
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 126968
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149883)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function


Function NotaFiscalSaida_Excluir_Usu(ByVal objNFiscal As ClassNFiscal) As Long

    NotaFiscalSaida_Excluir_Usu = SUCESSO
        
End Function

Function NotaFiscalSaida_Excluir_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long, alComando(0 To 10) As Long
Dim iClasseDocCPR As Integer, lNumIntDocCPR As Long
Dim lNumIntItem As Long
Dim objMovEstoque As New ClassMovEstoque, objTipoDocInfo As New ClassTipoDocInfo
Dim lCodigo As Long, lNumNotaFiscal As Long, iTipoNF As Integer, iStatus As Integer
Dim lNumIntDocEst As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim lErro1 As Long

On Error GoTo Erro_NotaFiscalSaida_Excluir_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 83900
    Next
    
    'Lê a nota fiscal
    lErro = Comando_ExecutarPos(alComando(0), "SELECT  ClasseDocCPR, NumIntDocCPR FROM NFiscal WHERE NumIntDoc = ?", 0, iClasseDocCPR, lNumIntDocCPR, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 83902

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83903
    
    If lErro <> AD_SQL_SUCESSO Then gError 83904 'Não encontrou

    'faz o lock na Nota Fiscal
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 83905

    'exclui os dados contábeis pendentes ou atualizados (se houverem) relativos a lNumIntDocOrigem
    lErro = objContabil.Contabil_Exclui(objNFiscal.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then gError 83897
        
    'Lê o tipodocinfo da nota fiscal
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 83906
    
    If lErro <> SUCESSO Then gError 83907
    
    'Se é uma nota que possui vinculação com outra que a sucede. Ex. Uma nota que tem uma devolução vinculada ou uma nota que tem um complemento vinculado.
    If Len(Trim(objTipoDocInfo.sSiglaNFOriginal)) > 0 Or objTipoDocInfo.iComplementar <> DOCINFO_COMPLEMENTO Then
    
        'verifica se a nota está vinculada a sua devolução ou ao seu complemento
        lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, TipoNFiscal FROM NFiscal WHERE NumIntNotaOriginal = ?", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 83908
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83909
        
        If lErro = AD_SQL_SUCESSO Then gError 83910 'Se está vinculada, erro.
    
    End If
                
    'Se a nota for uma nota gerada por pedido
    If objTipoDocInfo.iCodigo = DOCINFO_NFISFVPV Or objTipoDocInfo.iCodigo = DOCINFO_NFISVPV Then
        
        If objNFiscal.iStatus <> STATUS_CANCELADO Then
        
            'Atualiza a qtd faturada ou desfaz a baixa do Pedido.
            lErro = CF("CancelamentoNFiscal_Atualiza_Pedido", objNFiscal)
            If lErro <> SUCESSO Then gError 83911
            
        End If
        
    End If
    
    'Se a nota gerou documentos em  CPR
    If iClasseDocCPR > 0 And lNumIntDocCPR > 0 Then
    
        'Desfaz os documentos associados
        lErro = CF("CPR_Exclui", iClasseDocCPR, lNumIntDocCPR, 1)
        If lErro <> SUCESSO Then gError 83912
    
    End If

    'não trata o cancelamento dos itens de nf para notas de conhecimento de frete porque eles não possuem
    If objNFiscal.iTipoNFiscal <> DOCINFO_NFICF And objNFiscal.iTipoNFiscal <> DOCINFO_NFIFCF Then

        'Busca os itens da nota associada
        lErro1 = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ? ", 0, lNumIntItem, objNFiscal.lNumIntDoc)
        If lErro1 <> AD_SQL_SUCESSO Then gError 83913
    
        lErro1 = Comando_BuscarPrimeiro(alComando(2))
        If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 83914
        
        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        
        lErro = CF("Customizacoes_MovEstoque", objMovEstoque)
        If lErro <> SUCESSO Then gError 126803
        
        'Verifica se há movimento de estoque ligado ao item
        lErro = Comando_Executar(alComando(4), "SELECT Codigo, NumIntDocEst FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", lCodigo, lNumIntDocEst, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL, lNumIntItem, objMovEstoque.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 83916
    
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83917
        
        If lErro = AD_SQL_SUCESSO Then
        
            objMovEstoque.lCodigo = lCodigo
            
            'Lê os movimento dos itens de nota fiscal
            lErro = CF("MovEstoqueItens_Le_Desc1", objMovEstoque)
            If lErro <> SUCESSO And lErro <> 89050 Then gError 83920
            
            If lErro = 89050 Then gError 89052
            
            'Redefine os movimento para fazer o cancelamento
            objMovEstoque.iOperacao = EXCLUSAO_MOVIMENTO
            
            'Grava o movimento de estoque
            lErro = CF("MovEstoque_Grava", objMovEstoque)
            If lErro <> SUCESSO Then gError 83921
        
' não é mais necessário o codigo abaixo pois MovEstoque_Grava se encarrega de excluir os estornos associados aos movimentos originais.
'            'se lNumIntDocEst <> 0 indica que o movimento tem um cancelamento/estorno associado que também precisa ser excluido
'            If lNumIntDocEst <> 0 Then
'
'                'Verifica se há movimento de estoque ligado ao item
'                lErro = Comando_Executar(alComando(10), "SELECT Codigo FROM MovimentoEstoque WHERE NumIntDoc = ?", lCodigo, lNumIntDocEst)
'                If lErro <> AD_SQL_SUCESSO Then gError 83922
'
'                lErro = Comando_BuscarPrimeiro(alComando(10))
'                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83923
'
'                'Lê o movto de estoque da NOta fiscal
'                objMovEstoque1.iFilialEmpresa = objNFiscal.iFilialEmpresa
'
'                objMovEstoque1.lCodigo = lCodigo
'
'                'Lê os movimento dos itens de nota fiscal
'                lErro = CF("MovEstoqueItens_Le_Desc1",objMovEstoque1)
'                If lErro <> SUCESSO And lErro <> 89050 Then gError 83926
'
'                If lErro = 89050 Then gError 89053
'
'                'Redefine os movimento para fazer o cancelamento
'                objMovEstoque1.iOperacao = EXCLUSAO_MOVIMENTO
'
'                'Grava o movimento de estoque
'                lErro = CF("MovEstoque_Grava",objMovEstoque1)
'                If lErro <> SUCESSO Then gError 83927
'
'            End If
        
        End If
    
    End If
    
    'Exclui itens customizados
    lErro = CF("NotaFiscalSaida_Excluir_Usu", objNFiscal)
    If lErro <> SUCESSO Then gError 99112
    
    'Exclui as ComissoesNF da Tabela ComissoesNF
    lErro = ComissoesNF_Exclui(objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 89006
    
    'Exclui as comissoes da nota fiscal
    lErro = Comissoes_NFiscal_Exclui(objNFiscal)
    If lErro <> SUCESSO Then gError 83928
    
    'se a nota já não tiver sido cancelada anteriormente, i.e., se sua estatística já não foi desfeita
    If objNFiscal.iStatus <> STATUS_CANCELADO Then
    
        'Desfaz a Estatistica de Compras
        'Trata-se de uma nota fiscal de venda
        If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
            
            'Defaz a Estatistica
            lErro = FilialClienteFilEmp_Cancela_NF(objNFiscal)
            If lErro <> SUCESSO Then gError 83929
        
            lErro = ProdutoVendido_Cancela_Estatisticas(objNFiscal)
            If lErro <> SUCESSO Then gError 83930
        
        End If
            
        'se for a exclusão de uma devolução de compra
        If objTipoDocInfo.iCompras = TIPODOCINFO_COMPRAS_DEVOLUCAO Then
            
            'Desfaz a Estatística da Filial Fornecedor
            lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CANCELAMENTO_FILIALFORNFILEMP)
            If lErro <> SUCESSO Then gError 89420
            
        End If
        
    End If
        
    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                        
        'Grava o Livro Fiscal a partir da Nota Fiscal
        lErro = CF("NotaFiscal_Exclui_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 83898
    
    End If
    
    lErro = CF("NFiscal_ExcluiTributacao", objNFiscal)
    If lErro <> SUCESSO Then gError 83899
    
    'não trata o cancelamento dos itens de nf para notas de conhecimento de frete porque eles não possuem
    If objNFiscal.iTipoNFiscal <> DOCINFO_NFICF And objNFiscal.iTipoNFiscal <> DOCINFO_NFIFCF Then
        
        Do While lErro1 <> AD_SQL_SEM_DADOS
                    
            'Cancela o item
            lErro1 = Comando_ExecutarPos(alComando(3), "DELETE FROM ItensNFiscal", alComando(2))
            If lErro1 <> AD_SQL_SUCESSO Then gError 83931
            
            '###############################################
            'Inserido por Wagner
            lErro = NFiscal_Exclui_ContratoCobranca(lNumIntItem)
            If lErro <> SUCESSO Then gError 132991
            '###############################################
            
            lErro1 = Comando_BuscarProximo(alComando(2))
            If lErro1 <> SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 83932
                       
            lErro = CF("ItensNFGrade_Exclui", lNumIntItem)
            If lErro <> SUCESSO Then gError 86367
            
         Loop
        
    End If
    
    'Atualiza o status da nota fiscal
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM NFiscal", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 83934
    
    'se for uma nota de conhecimento de frete vai exclui-lo da tabela especifica
    lErro = ConhecimentoFrete_Exclui(objNFiscal)
    If lErro <> SUCESSO Then gError 89131
    
    'Daniel 27/05/2002
    'Caso exista vínculo, desvincula o Orçamento de Venda da NFiscal a ser excluida.
    lErro = NFiscal_Desvincula_Orcamento(objNFiscal)
    If lErro <> SUCESSO Then gError 94484
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NotaFiscalSaida_Excluir_EmTrans = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Excluir_EmTrans:

    NotaFiscalSaida_Excluir_EmTrans = gErr

    Select Case gErr

        Case 83897, 83898, 83899, 83906, 83911, 83912, 83918, 83920, 83921, 83924, 83926, 83927, 83928, 83929, 83930, 83932, 89006, 89131, 89420, 84735, 99112, 86367, 126803, 132991 'Alterado por Wagner

        Case 83900
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83902, 83903, 83908, 83909
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 83904
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_INTERNA_SAIDA_NAO_CADASTRADA", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 83905
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFISCAL", gErr)

        Case 83907
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)

        Case 83910
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_VINCULADA_EXCLUIR", gErr, lNumNotaFiscal, iTipoNF)

        Case 83913, 83914
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 83915
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_SEM_ITENS", gErr, objNFiscal.lNumNotaFiscal)

        Case 83916, 83917, 83922, 83923
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case 89052, 89053
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO2", gErr, objNFiscal.iFilialEmpresa, lCodigo)

        Case 83931
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMNF", gErr)

        Case 91056
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NFISCAL1", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149884)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


Function NotaFiscalRemPedidoSaida_Excluir(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long, alComando(0 To 10) As Long
Dim iClasseDocCPR As Integer, lNumIntDocCPR As Long
Dim lNumIntItem As Long
Dim objMovEstoque As New ClassMovEstoque, objTipoDocInfo As New ClassTipoDocInfo
Dim lCodigo As Long, lNumNotaFiscal As Long, iTipoNF As Integer, iStatus As Integer
Dim lNumIntDocEst As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim lErro1 As Long

On Error GoTo Erro_NotaFiscalRemPedidoSaida_Excluir
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96028
    Next
    
    'ABre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 96029

    'Lê a nota fiscal
    lErro = Comando_ExecutarPos(alComando(0), "SELECT  ClasseDocCPR, NumIntDocCPR, Status FROM NFiscal WHERE NumIntDoc = ?", 0, iClasseDocCPR, lNumIntDocCPR, iStatus, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 96030

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96031
    
    If lErro <> AD_SQL_SUCESSO Then gError 96032  'Não encontrou

    'faz o lock na Nota Fiscal
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 96033

    'exclui os dados contábeis pendentes ou atualizados (se houverem) relativos a lNumIntDocOrigem
    lErro = objContabil.Contabil_Exclui(objNFiscal.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then gError 96053
        
    'Lê o tipodocinfo da nota fiscal
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 96034
    
    If lErro <> SUCESSO Then gError 96035
    
    'Se é uma nota que possui vinculação com outra que a sucede. Ex. Uma nota que tem uma devolução vinculada ou uma nota que tem um complemento vinculado.
    If Len(Trim(objTipoDocInfo.sSiglaNFOriginal)) > 0 Or objTipoDocInfo.iComplementar <> DOCINFO_COMPLEMENTO Then
    
        'verifica se a nota está vinculada a sua devolução ou ao seu complemento
        lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, TipoNFiscal FROM NFiscal WHERE NumIntNotaOriginal = ?", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 96036
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96037
        
        If lErro = AD_SQL_SUCESSO Then gError 96038
    
    End If
      
    'Atualiza a qtd faturada ou desfaz a baixa do Pedido.
    lErro = CF("CancelamentoNFiscal_Atualiza_Pedido", objNFiscal)
    If lErro <> SUCESSO Then gError 96039
    
    'Se a nota gerou documentos em  CPR
    If iClasseDocCPR > 0 And lNumIntDocCPR > 0 Then
    
        'Desfaz os documentos associados
        lErro = CF("CPR_Exclui", iClasseDocCPR, lNumIntDocCPR, 1)
        If lErro <> SUCESSO Then gError 96040
    
    End If

    'Busca os itens da nota associada
    lErro1 = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ? ", 0, lNumIntItem, objNFiscal.lNumIntDoc)
    If lErro1 <> AD_SQL_SUCESSO Then gError 96041

    lErro1 = Comando_BuscarPrimeiro(alComando(2))
    If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 96042
    
    'Verifica se há movimento de estoque ligado ao item
    lErro = Comando_Executar(alComando(4), "SELECT Codigo, NumIntDocEst FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", lCodigo, lNumIntDocEst, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL, lNumIntItem, objNFiscal.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 96043

    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96044
    
    If lErro = AD_SQL_SUCESSO Then
    
        'Lê o movto de estoque da NOta fiscal
        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        
        objMovEstoque.lCodigo = lCodigo
        
        'Lê os movimento dos itens de nota fiscal
        lErro = CF("MovEstoqueItens_Le_Desc1", objMovEstoque)
        If lErro <> SUCESSO And lErro <> 89050 Then gError 96045
        
        If lErro = 89050 Then gError 96046
        
        'Redefine os movimento para fazer o cancelamento
        objMovEstoque.iOperacao = EXCLUSAO_MOVIMENTO
        
        'Grava o movimento de estoque
        lErro = CF("MovEstoque_Grava", objMovEstoque)
        If lErro <> SUCESSO Then gError 96047
    
    End If
    
    'se a nota já não tiver sido cancelada anteriormente, i.e., se sua estatística já não foi desfeita
    If iStatus <> STATUS_CANCELADO Then
    
        'Desfaz a Estatistica de Compras
        'Trata-se de uma nota fiscal de venda
        If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
            
            'Defaz a Estatistica
            lErro = FilialClienteFilEmp_Cancela_NF(objNFiscal)
            If lErro <> SUCESSO Then gError 96048
        
            lErro = ProdutoVendido_Cancela_Estatisticas(objNFiscal)
            If lErro <> SUCESSO Then gError 96049
        
        End If
            
        'se for a exclusão de uma devolução de compra
        If objTipoDocInfo.iCompras = TIPODOCINFO_COMPRAS_DEVOLUCAO Then
            
            'Desfaz a Estatística da Filial Fornecedor
            lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CANCELAMENTO_FILIALFORNFILEMP)
            If lErro <> SUCESSO Then gError 96050
            
        End If
        
    End If
        
    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                        
        'Grava o Livro Fiscal a partir da Nota Fiscal
        lErro = CF("NotaFiscal_Exclui_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 96051
    
    End If
    
    lErro = CF("NFiscal_ExcluiTributacao", objNFiscal)
    If lErro <> SUCESSO Then gError 96052
    
    Do While lErro1 <> AD_SQL_SEM_DADOS
                
        'Cancela o item
        lErro1 = Comando_ExecutarPos(alComando(3), "DELETE FROM ItensNFiscal", alComando(2))
        If lErro1 <> AD_SQL_SUCESSO Then gError 96054
        
        lErro1 = Comando_BuscarProximo(alComando(2))
        If lErro1 <> SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 96055
        
    Loop
        
    'Atualiza o status da nota fiscal
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM NFiscal", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 96056
    
    'Confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 96058
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NotaFiscalRemPedidoSaida_Excluir = SUCESSO

    Exit Function

Erro_NotaFiscalRemPedidoSaida_Excluir:

    NotaFiscalRemPedidoSaida_Excluir = gErr

    Select Case gErr
       
        Case 96028
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 96029
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 96030, 96031, 96036, 96037
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 96032
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_INTERNA_SAIDA_NAO_CADASTRADA", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 96033
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFISCAL", gErr)

        Case 96035
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)

        Case 96038
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_VINCULADA_EXCLUIR", gErr, lNumNotaFiscal, iTipoNF)

        Case 96041, 96042
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 96043, 96044
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case 96046
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO2", gErr, objNFiscal.iFilialEmpresa, lCodigo)

        Case 96053, 96051, 96052, 96034, 96039, 96040, 96045, 96047, 96048, 96049, 96055, 96057, 96050

        Case 96054
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMNF", gErr)

        Case 96056
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NFISCAL1", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 96058
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149885)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
'Janaina
End Function


Private Function ConhecimentoFrete_Exclui(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_ConhecimentoFrete_Exclui
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 89132
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 89133
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntNFiscal FROM ConhecimentoFrete WHERE NumIntNFiscal = ?", 0, lNumIntDoc, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 89134

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89135
    
    If lErro = SUCESSO Then
    
        'Se não estava lockado então locka
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM ConhecimentoFrete", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 89136

    End If

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ConhecimentoFrete_Exclui = SUCESSO
    
    Exit Function
    
Erro_ConhecimentoFrete_Exclui:

    ConhecimentoFrete_Exclui = gErr
    
    Select Case gErr
        
        Case 89132, 89133
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 89134, 89135
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONHECIMENTO_FRETE", gErr)
        
        Case 89136
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CONHECIMENTO_FRETE", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149886)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function SldMesFat_Altera_Estatisticas(ByVal objNFiscal As ClassNFiscal, ByVal objNFiscalBD As ClassNFiscal) As Long
'Para as notas de fiscais de saidao, Atualiza as tabelas SldMesFat e SldDiaFat diminuindo a quantidade e o valor da data de emissao original e colocando na nova data
'Tem que ser chamado dentro de Transação

Dim lErro As Long
Dim dtDataEmissao As Date

On Error GoTo Erro_SldMesFat_Altera_Estatisticas

    If objNFiscal.dtDataEmissao <> objNFiscalBD.dtDataEmissao Then

        'Grava a Estatística do Produto com Relação a devolução
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscalBD, CANCELAMENTO_DOC)
        If lErro <> SUCESSO Then gError 89788

        dtDataEmissao = objNFiscalBD.dtDataEmissao
    
        objNFiscalBD.dtDataEmissao = objNFiscal.dtDataEmissao
    
        'Grava a Estatística do Produto com Relação a devolução
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscalBD, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 89789
    
        objNFiscalBD.dtDataEmissao = dtDataEmissao

    End If

    SldMesFat_Altera_Estatisticas = SUCESSO
    
    Exit Function

Erro_SldMesFat_Altera_Estatisticas:

    SldMesFat_Altera_Estatisticas = gErr
    
    Select Case gErr

        Case 89788, 89789

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 149887)

    End Select
    
    Exit Function

End Function

'horaentrada
Private Function NFiscal_Altera_MovEstoque(ByVal objNFiscal As ClassNFiscal) As Long
'trata da alteração de data dos movimentos de estoque associados à nota fiscal

Dim objMovEstoque As New ClassMovEstoque
Dim lCodigoMovEst As Long
Dim lErro As Long
Dim objItemMovEstoque As ClassItemMovEstoque
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objNFiscalBD As New ClassNFiscal

On Error GoTo Erro_NFiscal_Altera_MovEstoque

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Le o tipo do produto
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 89795

    objNFiscalBD.lNumIntDoc = objNFiscal.lNumIntDoc
    objNFiscalBD.iFilialEmpresa = objNFiscal.iFilialEmpresa

    'Lê os Ítens da Nota Fiscal
    lErro = CF("NFiscalItens_Le", objNFiscalBD)
    If lErro <> SUCESSO Then gError 89701
    
    'Lê o codigo do movimento de estoque associado aos itens da Nota Fiscal passada
    lErro = CF("MovEstoque_NFiscal_Le", objNFiscalBD, objMovEstoque)
    If lErro <> SUCESSO And lErro <> 89699 Then gError 89702
    
    If lErro = SUCESSO Then
    
        For Each objItemMovEstoque In objMovEstoque.colItens
            If objTipoDocInfo.iTipo = TIPODOCINFO_TIPO_NFIS Then
                objItemMovEstoque.dtData = objNFiscal.dtDataSaida
                objItemMovEstoque.dtHora = objNFiscal.dtHoraSaida
            Else
                objItemMovEstoque.dtData = objNFiscal.dtDataEntrada
                objItemMovEstoque.dtHora = objNFiscal.dtHoraEntrada
            End If
        Next
        
        'Lê o movto de estoque da NOta fiscal
        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objMovEstoque.lCodigo = objMovEstoque.colItens(1).lCodigo
    
        If objTipoDocInfo.iTipo = TIPODOCINFO_TIPO_NFIS Then
            objMovEstoque.dtData = objNFiscal.dtDataSaida
            objMovEstoque.dtHora = objNFiscal.dtHoraSaida
        Else
            objMovEstoque.dtData = objNFiscal.dtDataEntrada
            objMovEstoque.dtHora = objNFiscal.dtHoraEntrada
        End If
        
        'Gera um Movimento de Estoque
        lErro = CF("MovEstoque_Grava", objMovEstoque)
        If lErro <> SUCESSO Then gError 89693

    End If

    'Atualiza os campos Data e Hora de entrada e saida da nota fiscal passada como parametro
    lErro = CF("NFiscal_Grava_DataHora", objNFiscal)
    If lErro <> SUCESSO Then gError 89721

    NFiscal_Altera_MovEstoque = SUCESSO

    Exit Function
    
Erro_NFiscal_Altera_MovEstoque:

    NFiscal_Altera_MovEstoque = gErr

    Select Case gErr
    
        Case 89693, 89701, 89702, 89721, 89795
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149888)

    End Select

    Exit Function

End Function

'horaentrada
Function NFiscal_Alteracao(ByVal objNFiscal As ClassNFiscal) As Long
'trata da alteração de data dos movimentos de estoque associados à nota fiscal

Dim lErro As Long
Dim objTituloPagar As New ClassTituloPagar
Dim objNFiscalBD As New ClassNFiscal

On Error GoTo Erro_NFiscal_Alteracao

    objNFiscalBD.lNumIntDoc = objNFiscal.lNumIntDoc
    
    'le a nota fiscal e traz para objNFiscalBD
    lErro = CF("NFiscal_Le", objNFiscalBD)
    If lErro <> SUCESSO And lErro <> 31442 Then gError 89739

    'se a nota fiscal não estiver cadastrada ==> erro
    If lErro = 31442 Then gError 89738
    
    'trata da alteração de data/hora dos movimentos de estoque associados à nota fiscal
'    lErro = NFiscal_Altera_MovEstoque(objNFiscal)
'    If lErro <> SUCESSO Then gError 89685

    'Se a nota já existir, permite alterar os rastreamentos
    lErro = objNFiscal.objRastreamento.Altera_Rastreamento(objNFiscal)
    If lErro <> SUCESSO Then gError 83238

    'Atualiza os campos Data e Hora de entrada e saida da nota fiscal passada como parametro
    lErro = CF("NFiscal_Grava_DataHora", objNFiscal)
    If lErro <> SUCESSO Then gError 89721

    '########################################################
    'Inserido por Wagner
    lErro = CF("NFiscalEntrada_Grava_CamposAlteraveis", objNFiscal)
    If lErro <> SUCESSO Then gError 132355
    '########################################################

    'Atualiza as tabelas SldMesForn e SldDiaForn diminuindo a quantidade e o valor da data de emissao original e colocando na nova data, se a data de emissão foi alterada
    lErro = CF("SldMesForn_Altera_Estatisticas", objNFiscal, objNFiscalBD)
    If lErro <> SUCESSO Then gError 89736

    'Para as notas fiscais de saida que participam do faturamento, Atualiza as tabelas SldMesFat e SldDiaFat diminuindo a quantidade e o valor da data de emissao original e colocando na nova data
    lErro = SldMesFat_Altera_Estatisticas(objNFiscal, objNFiscalBD)
    If lErro <> SUCESSO Then gError 89792

    objNFiscal.iClasseDocCPR = objNFiscalBD.iClasseDocCPR
    objNFiscal.lNumIntDocCPR = objNFiscalBD.lNumIntDocCPR

    'Altera a data de emissao do titulo relacionado à nota fiscal, se houver
    lErro = CF("CPR_Altera", objNFiscal)
    If lErro <> SUCESSO Then gError 89772

    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then

        lErro = CF("NotaFiscal_Altera_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 88034
    
    End If
    
    NFiscal_Alteracao = SUCESSO
    
    Exit Function

Erro_NFiscal_Alteracao:

    NFiscal_Alteracao = gErr
    
    Select Case gErr

        Case 83238, 88034, 89685, 89721, 89736, 89739, 89772, 89778, 89792, 132355

        Case 89738
            Call Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_NAO_CADASTRADA", gErr, objNFiscal.lNumIntDoc)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149889)

    End Select
    
    Exit Function
    
End Function



'Function ProdutoVendido_Grava_EstatisticasDev(objNFiscal As ClassNFiscal, iCancelamento As Integer) As Long
''Grava a estatística dos produtos devolvidos
'
'Dim objTipoDocInfo As New ClassTipoDocInfo
'Dim lErro As Long
'
'On Error GoTo Erro_ProdutoVendido_Grava_EstatisticasDev
'
'    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
'
'    'Le o tipo do produto
'    lErro = CF("TipoDocInfo_Le_Codigo",objTipoDocInfo)
'    If lErro <> SUCESSO Then Error 52735
'
'    'Verifica se é NotaFiscal de Devolução de Venda
'    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
'
'        'Grava a estatistica do Dia do Produto
'        lErro = SldDiaFat_Grava_EstDev(objNFiscal, iCancelamento)
'        If lErro <> SUCESSO Then Error 52736
'
'        'Grava a estatística do Mês do Produto
'        lErro = SldMesFat_Grava_EstDev(objNFiscal, iCancelamento)
'        If lErro <> SUCESSO Then Error 52737
'
'    End If
'
'    ProdutoVendido_Grava_EstatisticasDev = SUCESSO
'
'    Exit Function
'
'Erro_ProdutoVendido_Grava_EstatisticasDev:
'
'    ProdutoVendido_Grava_EstatisticasDev = Err
'
'    Select Case Err
'
'        Case 52735, 52736, 52737 'Tratados na rotinas chamadas
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149890)
'
'    End Select
'
'    Exit Function
'
'End Function

'Private Function SldDiaFat_Grava_EstDev(objNFiscal As ClassNFiscal, iCancelamento As Integer) As Long
''Grava a estatística do Dia do produto
'
'Dim lErro As Long
'Dim objItemNF As ClassItemNF
'Dim objSldDiaFat As New ClassSldDiaFat
'Dim dQuantUMVenda As Double
'Dim dFator As Double
'Dim lComando As Long, lComando2 As Long, lComando3 As Long
'Dim objProduto As New ClassProduto
'
'On Error GoTo Erro_SldDiaFat_Grava_EstDev
'
'    'Inicializa comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then gError 52738
'
'    lComando2 = Comando_Abrir()
'    If lComando2 = 0 Then gError 52739
'
'    lComando3 = Comando_Abrir()
'    If lComando3 = 0 Then gError 52825
'
'    'Para cada Item da Nota Fiscal
'    For Each objItemNF In objNFiscal.ColItensNF
'
'        objProduto.sCodigo = objItemNF.sProduto
'
'        'Lê na tabela de Produto a UM de venda
'        lErro = CF("Produto_Le",objProduto)
'        If lErro <> SUCESSO And lErro <> 28030 Then gError 52775
'
'        'Se não encontrar o produto  - - ->>> Erro
'        If lErro = 28030 Then gError 52776
'
'        'Calcula fator de conversão para UM_Venda
'        lErro = CF("UM_Conversao",objItemNF.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
'        If lErro <> SUCESSO Then gError 52741
'
'        'Converte Quantidade para UM_Venda
'        dQuantUMVenda = (objItemNF.dQuantidade * dFator)
'
'        objSldDiaFat.iFilialEmpresa = giFilialEmpresa
'        objSldDiaFat.dtData = objNFiscal.dtDataEmissao
'        objSldDiaFat.sProduto = objItemNF.sProduto
'
'        'Lê todos os atributos na tabela SldDiaFat e faz lock exclusive
'        lErro = CF("SldDiaFat_Le_Lock",lComando, objSldDiaFat)
'        If lErro <> SUCESSO And lErro <> 52729 Then gError 52740
'
'        If lErro = SUCESSO Then 'Registro SldDiaFat existe no BD
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                objSldDiaFat.dValorDevolvido = objSldDiaFat.dValorDevolvido - objItemNF.dValorTotal
'                objSldDiaFat.dQuantDevolvida = objSldDiaFat.dQuantDevolvida - dQuantUMVenda
'
'            Else
'
'                objSldDiaFat.dValorDevolvido = objSldDiaFat.dValorDevolvido + objItemNF.dValorTotal
'                objSldDiaFat.dQuantDevolvida = objSldDiaFat.dQuantDevolvida + dQuantUMVenda
'
'            End If
'
'            'Atualiza a tabela de SldDiaFat
'            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorDevolvido =?, QuantDevolvida=?", lComando, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
'            If lErro <> AD_SQL_SUCESSO Then gError 52742
'
'        Else 'Registro SldDiaFat não existe no BD
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                lErro = Comando_Executar(lComando3, "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?)", giFilialEmpresa, objNFiscal.dtDataEmissao, objItemNF.sProduto, -objItemNF.dValorTotal, -dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 89785
'
'            Else
'
'                lErro = Comando_Executar(lComando3, "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?)", giFilialEmpresa, objNFiscal.dtDataEmissao, objItemNF.sProduto, objItemNF.dValorTotal, dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 52827
'
'            End If
'
'        End If
'
'    Next
'
'    'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    SldDiaFat_Grava_EstDev = SUCESSO
'
'    Exit Function
'
'Erro_SldDiaFat_Grava_EstDev:
'
'    SldDiaFat_Grava_EstDev = gErr
'
'    Select Case gErr
'
'        Case 52738, 52739, 52825
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 52740, 52741, 52775 'Tratados nas rotinas chamadas
'
'        Case 52742
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAFAT", gErr, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
'
'        Case 52776
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)
'
'        Case 52827, 89785
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFAT", gErr, giFilialEmpresa, objItemNF.sProduto, objNFiscal.dtDataEmissao)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149891)
'
'    End Select
'
'    'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    Exit Function
'
'End Function
        
'Private Function SldMesFat_Grava_EstDev(objNFiscal As ClassNFiscal, iCancelamento As Integer) As Long
''Grava a estatística do Mês do produto
'
'Dim lErro As Long
'Dim objItemNF As ClassItemNF
'Dim objSldMesFat As New ClassSldMesFat
'Dim iMes As Integer
'Dim dFator As Double
'Dim dQuantUMVenda As Double
'Dim sMes As String
'Dim lComando As Long, lComando2 As Long, lComando3 As Long
'Dim objProduto As New ClassProduto
'
'On Error GoTo Erro_SldMesFat_Grava_EstDev
'
'    'Inicializa comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then gError 52743
'
'    lComando2 = Comando_Abrir()
'    If lComando2 = 0 Then gError 52744
'
'    lComando3 = Comando_Abrir()
'    If lComando3 = 0 Then gError 52828
'
'    'Para cada Item da Nota Fiscal
'    For Each objItemNF In objNFiscal.ColItensNF
'
'        'Pega o mês correspondente
'        iMes = Month(objNFiscal.dtDataEmissao)
'
'        'Transforma em string para a concatenação
'        sMes = CStr(iMes)
'
'        objProduto.sCodigo = objItemNF.sProduto
'
'        'Lê na tabela de Produto a UM de venda
'        lErro = CF("Produto_Le",objProduto)
'        If lErro <> SUCESSO And lErro <> 28030 Then gError 52777
'
'        'Se não encontrar o produto  - - ->>> Erro
'        If lErro = 28030 Then gError 52778
'
'        'Calcula o fator de converção da UM_Venda
'        lErro = CF("UM_Conversao",objItemNF.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
'        If lErro <> SUCESSO Then gError 52746
'
'        'Converte a UM da Quantidade
'        dQuantUMVenda = (objItemNF.dQuantidade * dFator)
'
'        objSldMesFat.iFilialEmpresa = giFilialEmpresa
'        objSldMesFat.iAno = Year(objNFiscal.dtDataEmissao)
'        objSldMesFat.sProduto = objItemNF.sProduto
'
'        'Lê todos os atributos na tabela SldMesFat e faz lock exclusive
'        lErro = CF("SldMesFat_Le_Lock",lComando, objSldMesFat)
'        If lErro <> SUCESSO And lErro <> 52733 Then gError 52745
'
'        If lErro = SUCESSO Then
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                objSldMesFat.dValorDevolvido(iMes) = objSldMesFat.dValorDevolvido(iMes) - objItemNF.dValorTotal
'                objSldMesFat.dQuantDevolvida(iMes) = objSldMesFat.dQuantFaturada(iMes) - dQuantUMVenda
'
'            Else
'
'                objSldMesFat.dValorDevolvido(iMes) = objSldMesFat.dValorDevolvido(iMes) + objItemNF.dValorTotal
'                objSldMesFat.dQuantDevolvida(iMes) = objSldMesFat.dQuantFaturada(iMes) + dQuantUMVenda
'
'            End If
'
'            'Atualiza a tabela de SldMesFat
'            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorDevolvido" & sMes & "=?, QuantDevolvida" & sMes & "=?", lComando, objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
'            If lErro <> AD_SQL_SUCESSO Then gError 52747
'
'        Else
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                'Atualiza a tabela de SldMesFat
'                lErro = Comando_Executar(lComando2, "INSERT INTO SldMesFat (FilialEmpresa , Ano, Produto, ValorDevolvido" & sMes & ", QuantDevolvida" & sMes & ") VALUES (?,?,?,?,?)", objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, -objItemNF.dValorTotal, -dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 89784
'
'            Else
'
'                'Atualiza a tabela de SldMesFat
'                lErro = Comando_Executar(lComando2, "INSERT INTO SldMesFat (FilialEmpresa , Ano, Produto, ValorDevolvido" & sMes & ", QuantDevolvida" & sMes & ") VALUES (?,?,?,?,?)", objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objItemNF.dValorTotal, dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 52831
'
'            End If
'
'        End If
'
'    Next
'
'     'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    SldMesFat_Grava_EstDev = SUCESSO
'
'    Exit Function
'
'Erro_SldMesFat_Grava_EstDev:
'
'    SldMesFat_Grava_EstDev = gErr
'
'    Select Case gErr
'
'        Case 52743, 52744, 52828
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 52745, 52746, 52777 'Tratados nas rotinas chamadas
'
'        Case 52747
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", gErr, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
'
'        Case 52778
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)
'
'        Case 52831, 89784
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFAT", gErr, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto, objSldMesFat.iAno)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149892)
'
'    End Select
'
'    'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    Exit Function
'
'End Function

'Private Function SldMesFat_Altera_Estatisticas_Dev(objNFiscal As ClassNFiscal, objNFiscalBD As ClassNFiscal) As Long
''Para as notas de devolução, Atualiza as tabelas SldMesFat e SldDiaFat diminuindo a quantidade e o valor da data de emissao original e colocando na nova data
''Tem que ser chamado dentro de Transação
'
'Dim lErro As Long
'Dim dtDataEmissao As Date
'
'On Error GoTo Erro_SldMesFat_Altera_Estatisticas_Dev
'
'    If objNFiscal.dtDataEmissao <> objNFiscalBD.dtDataEmissao Then
'
'        'Grava a Estatística do Produto com Relação a devolução
'        lErro = CF("ProdutoVendido_Grava_EstatisticasDev",objNFiscalBD, CANCELAMENTO_DOC)
'        If lErro <> SUCESSO Then gError 89776
'
'        dtDataEmissao = objNFiscalBD.dtDataEmissao
'
'        objNFiscalBD.dtDataEmissao = objNFiscal.dtDataEmissao
'
'        'Grava a Estatística do Produto com Relação a devolução
'        lErro = CF("ProdutoVendido_Grava_EstatisticasDev",objNFiscalBD, CADASTRAMENTO_DOC)
'        If lErro <> SUCESSO Then gError 89777
'
'        objNFiscalBD.dtDataEmissao = dtDataEmissao
'
'    End If
'
'    SldMesFat_Altera_Estatisticas_Dev = SUCESSO
'
'    Exit Function
'
'Erro_SldMesFat_Altera_Estatisticas_Dev:
'
'    SldMesFat_Altera_Estatisticas_Dev = gErr
'
'    Select Case gErr
'
'        Case 89776, 89777
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 149893)
'
'    End Select
'
'    Exit Function
'
'End Function
'
Sub NFiscal_Imprime_Romaneio(ByVal objNFiscal As ClassNFiscal)

Dim objRelatorio As New AdmRelatorio
Dim sNomeTsk As String, sBuffer As String
Dim lErro As Long
Dim objSerie As New ClassSerie

On Error GoTo Erro_NFiscal_Imprime_Romaneio

    lErro = objRelatorio.ExecutarDireto("Romaneio de Separação de Nota Fiscal", "", 0, "", "TSERIE", objNFiscal.sSerie, "NNFISCALINIC", CStr(objNFiscal.lNumNotaFiscal), "NNFISCALFIM", CStr(objNFiscal.lNumNotaFiscal))
    If lErro <> SUCESSO Then gError 62552

    objSerie.sSerie = objNFiscal.sSerie
    objSerie.iFilialEmpresa = objNFiscal.iFilialEmpresa

    objSerie.lProxNumRomaneio = CLng(objNFiscal.lNumNotaFiscal) + 1

    'Atualiza a Tabela de Série
    lErro = CF("Serie_Atualiza_ImpressaoRomaneio", objSerie)
    If lErro <> SUCESSO And lErro <> 90116 Then gError 81681

    'Não encontrou a Série
    If lErro = 90116 Then gError 81682
       
    Exit Sub

Erro_NFiscal_Imprime_Romaneio:

    Select Case gErr

        Case 62552, 81681

        Case 81682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", gErr, objSerie.sSerie)
       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149894)

    End Select

    Exit Sub

End Sub

Function Serie_Atualiza_ImpressaoRomaneio(ByVal objSerie As ClassSerie) As Long
'Atualiza o Número do último Romaneio de Nota impressa.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim lProxNumRomaneio As Long

On Error GoTo Erro_Serie_Atualiza_ImpressaoRomaneio
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 90111
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90112
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 90113
    
    'Lê a Série para poder atualizar o Numero de Romaneio
    lErro = Comando_ExecutarPos(lComando, "SELECT ProxNumRomaneio FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, lProxNumRomaneio, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 90114

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90115

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then gError 90116
   
    'Altera próximo Romaneio de Nota a imprimir
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET ProxNumRomaneio = ?", lComando, objSerie.lProxNumRomaneio)
    If lErro <> AD_SQL_SUCESSO Then gError 90117

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 90118

    Serie_Atualiza_ImpressaoRomaneio = SUCESSO
    
    Exit Function
    
Erro_Serie_Atualiza_ImpressaoRomaneio:

    Serie_Atualiza_ImpressaoRomaneio = gErr
    
    Select Case gErr
        
        Case 90112, 90113
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 90114, 90115
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", gErr, objSerie.sSerie)
        
        Case 90116 'Não encontrou , a ser Tratado na rotina chamadora
        
        Case 90117
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", gErr, objSerie.sSerie)

        Case 90111
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 90118
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149895)


    End Select

    'Fechamento transação
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function TabelaPrecoItem_AtualizarPrecosFP(ByVal sProdInicial As String, ByVal sProdFinal As String, ByVal colTabelas As Collection, ByVal dtDataVigencia As Date) As Long
'Atualiza as tabelas de preços utilizando a planilha de formação de preços

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim lTransacao As Long
Dim sProduto As String
Dim dtDataVigencia1 As Date
Dim iFilialEmpresa As Integer
Dim objFormacaoPreco As New ClassFormacaoPreco
Dim objFormacaoPrecoTemp As ClassFormacaoPreco
Dim colFormacaoPreco As Collection
Dim dValor As Double, objContexto As ClassContextoPlan

On Error GoTo Erro_TabelaPrecoItem_AtualizarPrecosFP

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92435
    Next

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lErro <> SUCESSO Then gError 92436

    objFormacaoPreco.iFilialEmpresa = giFilialEmpresa

    For iIndice = 1 To colTabelas.Count

        sProduto = String(STRING_PRODUTO, 0)

        If sProdInicial <> "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos que estão entre o produto inicial e o produto final
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ? AND CodProduto <= ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial, sProdFinal)
            If lErro <> AD_SQL_SUCESSO Then gError 92437

        ElseIf sProdInicial <> "" And sProdFinal = "" Then

            'Pesquisa a tabela de preço os produtos maiores ou iguais ao produto inicial
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial)
            If lErro <> AD_SQL_SUCESSO Then gError 92438

        ElseIf sProdInicial = "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos menores ou iguais ao produto final
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto <= ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa, sProdFinal)
            If lErro <> AD_SQL_SUCESSO Then gError 92439

        Else

            'Pesquisa todos os produtos da tabela de preço
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 92440

        End If

        'Tenta ler os produtos da tabela de preco
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92441

        Do While lErro <> AD_SQL_SEM_DADOS

            objFormacaoPreco.iTabelaPreco = colTabelas.Item(iIndice)
            objFormacaoPreco.sProduto = sProduto
            objFormacaoPreco.iEscopo = FORMACAO_PRECO_ESCOPO_TABPRECO
            
            Set colFormacaoPreco = New Collection
            
            'Lê a planilha de Formacao de Preço da Tabela/Produto
            lErro = CF("FormacaoPreco_Le1", objFormacaoPreco, colFormacaoPreco)
            If lErro <> SUCESSO And lErro <> 92434 And lErro <> 92432 Then gError 92448
        
            For Each objFormacaoPrecoTemp In colFormacaoPreco
            
                With objFormacaoPrecoTemp
                    .iFilialEmpresa = giFilialEmpresa
                    .iEscopo = FORMACAO_PRECO_ESCOPO_TABPRECO
                    .iTabelaPreco = colTabelas.Item(iIndice)
                    .sProduto = sProduto
                End With
            
            Next
    
            Set objContexto = New ClassContextoPlan
            
            lErro = CF("ContextoPlan_Inicializa", objContexto, objFormacaoPreco.iFilialEmpresa, objFormacaoPreco.sProduto, objFormacaoPreco.iTabelaPreco, gdtDataAtual, 1)
            If lErro <> SUCESSO Then gError 92449
        
            'Executa as formulas da planilha de preço. Retorna o valor da planilha em dValor (que é o valor da última linha da planilha) e o valor de cada linha em colFormacaoPreco.Item(?).dValor
            lErro = CF("Avalia_Expressao_FPreco1", colFormacaoPreco, dValor, sProduto, objContexto)
            If lErro <> SUCESSO Then gError 92449

            'Pesquisa o item da tabela de preco em questão na data de vigencia
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM TabelasDePrecoItens WHERE CodTabela = ? AND FilialEmpresa = ? AND CodProduto = ? AND DataVigencia = ?", 0, iFilialEmpresa, colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia)
            If lErro <> AD_SQL_SUCESSO Then gError 92450

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92451

            'se existir o item da tabela de preco na data de vigencia ==> atualiza o valor
            If lErro = AD_SQL_SUCESSO Then

                'Atualiza o preço do produto na tabela
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE TabelasDePrecoItens SET Preco = ?", alComando(2), dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 92453

            Else
            
                'Insere o item na tabela de preço do produto em questão na data de vigência
                lErro = Comando_Executar(alComando(4), "INSERT INTO TabelasDePrecoItens (CodTabela, FilialEmpresa, CodProduto, DataVigencia, Preco) VALUES (?,?,?,?,?)", colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia, dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 92454
            
            
            End If

            'Lê o próximo Produto na tabela
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92447

        Loop

    Next

    'Finaliza Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 92455

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TabelaPrecoItem_AtualizarPrecosFP = SUCESSO

    Exit Function

Erro_TabelaPrecoItem_AtualizarPrecosFP:

    TabelaPrecoItem_AtualizarPrecosFP = gErr

    Select Case gErr

        Case 92435
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92436
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 92437, 92438, 92439, 92440, 92441, 92447
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS1", gErr, colTabelas.Item(iIndice))

        Case 92448, 92449

        Case 92450, 92451
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS3", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92453
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TABELASDEPRECOITENS", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92454
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TABELASDEPRECOITENS1", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92455
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149896)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TabelaPrecoItem_AtualizaPrecosPerc(ByVal sProdInicial As String, ByVal sProdFinal As String, ByVal dPercentual As Double, ByVal colTabelas As Collection, ByVal dtDataVigencia As Date, ByVal dtDataBase As Date) As Long
'atualiza as tabelas de preço passadas como parametros a partir da data de vigencia utilizando o percentual em cima dos preços validos na dataatual

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim lTransacao As Long
Dim dPreco As Double
Dim dPreco1 As Double
Dim dtDataVigencia1 As Date
Dim sProduto As String

On Error GoTo Erro_TabelaPrecoItem_AtualizaPrecosPerc

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92456
    Next

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lErro <> SUCESSO Then gError 92457

    For iIndice = 1 To colTabelas.Count

        sProduto = String(STRING_PRODUTO, 0)

        If sProdInicial <> "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos que estão entre o produto inicial e o produto final
            lErro = Comando_Executar(alComando(1), "SELECT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ? AND CodProduto <= ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial, sProdFinal, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92458

        ElseIf sProdInicial <> "" And sProdFinal = "" Then

            'Pesquisa a tabela de preço os produtos maiores ou iguais ao produto inicial
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92459

        ElseIf sProdInicial = "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos menores ou iguais ao produto final
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto <= ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, sProdFinal, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92460

        Else

            'Pesquisa todos os produtos da tabela de preço
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92461

        End If

        'Tenta ler os produtos da tabela de preco
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92462

        Do While lErro <> AD_SQL_SEM_DADOS

            'Pesquisa o item da tabela de preco em questão na data de vigencia
            lErro = Comando_ExecutarPos(alComando(2), "SELECT Preco FROM TabelasDePrecoItens WHERE CodTabela = ? AND FilialEmpresa = ? AND CodProduto = ? AND DataVigencia = ?", 0, dPreco, colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia1)
            If lErro <> AD_SQL_SUCESSO Then gError 92463

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92464

            If lErro = AD_SQL_SEM_DADOS Then gError 92465

            If dPreco <> 0 Then dPreco1 = dPreco + dPreco * dPercentual / 100

            'se já existe registro na data de vigencia ==> atualiza o registro
            If dtDataVigencia = dtDataVigencia1 Then

                'Atualiza o preço do produto na tabela
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE TabelasDePrecoItens SET Preco = ?", alComando(2), dPreco1)
                If lErro <> AD_SQL_SUCESSO Then gError 92466

            Else
            
                'Insere o item na tabela de preço do produto em questão na data de vigência
                lErro = Comando_Executar(alComando(4), "INSERT INTO TabelasDePrecoItens (CodTabela, FilialEmpresa, CodProduto, DataVigencia, Preco) VALUES (?,?,?,?,?)", colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia, dPreco1)
                If lErro <> AD_SQL_SUCESSO Then gError 92467

            End If

            'Lê o próximo Produto na tabela
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92468

        Loop

    Next

    'Finaliza Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 92469

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TabelaPrecoItem_AtualizaPrecosPerc = SUCESSO

    Exit Function

Erro_TabelaPrecoItem_AtualizaPrecosPerc:

    TabelaPrecoItem_AtualizaPrecosPerc = gErr

    Select Case gErr

        Case 92456
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92457
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 92458, 92459, 92460, 92461, 92462, 92468
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS1", gErr, colTabelas.Item(iIndice))

        Case 92463, 92464
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS3", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia1)

        Case 92465
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TABELASDEPRECOITENS_NAO_CADASTRADO", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92466
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TABELASDEPRECOITENS", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92467
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TABELASDEPRECOITENS1", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92469
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149897)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Sub Correcao_FATEST_Integridades(bApenasSaldosFAT As Boolean, bEST As Boolean, Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String)

Dim lErro As Long
Dim bPreenchido As Boolean
Dim dtNull As Date

On Error GoTo Erro_FATEST_Testa_Integridades

    'trecho de código que verifica se todos os filtros estão preenchidos ou nenhum deles
    'Alterado por Wagner
    If dtDataInicial <> 0 Then bPreenchido = True
    If dtDataFinal = 0 Then
        If bPreenchido = True Then gError 1000
    Else
        If bPreenchido = False Then gError 1000
        bPreenchido = True
    End If
    If Len(Trim(sProdutoInicial)) = 0 Then
        If bPreenchido = True Then gError 1000
    Else
        If bPreenchido = False Then gError 1000
        bPreenchido = True
    End If
    If Len(Trim(sProdutoFinal)) = 0 Then
        If bPreenchido = True Then gError 1000
    Else
        If bPreenchido = False Then gError 1000
    End If
    
    'Abre arquivo de Erro
    Open "CORRECAO_BD.txt" For Output As #1
    Print #1, "CORREÇÕES"
    Print #1, Now & ""
    Print #1, ""
    Print #1, "--------------------------------------------------------------------------"
    Print #1, ""

    If bApenasSaldosFAT = False Then
    
        'Pedido de Venda
        lErro = PedidoDeVenda_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'Nota Fiscal
        lErro = NotaFiscal_Testa_Integridades()
        If lErro <> SUCESSO Then Error 999

        'SaldoDiaFat
        lErro = SaldoDiaFat_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesFat
        lErro = SaldoMesFat_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999
        
        'SaldoMesFatFilCli - Inserido por Wagner
        lErro = SaldoMesFatFilCli_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

    End If
    
    If bEST = True Then
    
        'SaldoDiaEst
        lErro = SldDiaEst_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEst
        lErro = SldMesEst_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEst
        lErro = SldMesEst1_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEst
        lErro = SldMesEst2_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoDiaEstAlm
        lErro = SldDiaEstAlm_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEstAlm
        lErro = SldMesEstAlm_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999
    
        'Estoque Produto
        lErro = Estoque_Produto_Testa_Integridade(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999
    
    End If
    
    Close
    
    Exit Sub
     
Erro_FATEST_Testa_Integridades:

    Close

    Select Case Err
          
        Case 1000
            Call Rotina_Erro(vbOKOnly, "Todos os filtros deverão estar preenchidos ou nenhum deles.", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149898)
     
    End Select
    
    Exit Sub
    
End Sub

Function PedidoDeVenda_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 11) As Long
Dim tProdutoFilial As typeProdutoFilial
Dim dTotalQuantidade As Double, dTotalQuantCancelada As Double, dTotalQuantFaturada As Double
Dim iIndice As Integer
Dim dTotalQuantidadeItensNF As Double
Dim lPedido As Long
Dim iFilialPedido As Integer
Dim iFilialNF As Integer
Dim iFilialFaturamento As Integer
Dim dValorProdutos As Double
Dim dPrecoTotalItensPedido As Double
Dim dDescontoGlobalPedido As Double
Dim dValorTotal As Double
Dim dSomaParcelaPV As Double
Dim lTransacao As Long
Dim iClasseUM As Integer, sSiglaUMVenda As String, sSiglaUMMov As String, dFator As Double, dQuantidade As Double
Dim objPV As ClassPedidoDeVenda

Const STATUS_CANCELADO = 7

On Error GoTo Erro_PedidoDeVenda_Testa_Integridades2
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999

    'Quantidade Pedida de Produto Filial
    tProdutoFilial.sProduto = String(STRING_PRODUTO, 0)

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Produto, QuantPedida FROM ProdutosFilial ORDER BY Produto", 0, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto, tProdutoFilial.dQuantPedida)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    Else
        'Select Incluindo filtros de produtos
        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Produto, QuantPedida FROM ProdutosFilial WHERE Produto >= ? AND Produto <= ? ORDER BY Produto", 0, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto, tProdutoFilial.dQuantPedida, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        
        dQuantidade = 0
        
        'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
        If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
            
            lErro = Comando_Executar(alComando(2), "SELECT ItensPedidoDeVenda.UnidadeMed,Produtos.SiglaUMVenda, Produtos.ClasseUM, ItensPedidoDeVenda.Quantidade, ItensPedidoDeVenda.QuantCancelada, ItensPedidoDeVenda.QuantFaturada FROM ItensPedidoDeVenda, PedidosDeVenda, Produtos WHERE Produtos.Codigo = ItensPedidoDeVenda.Produto AND PedidosDeVenda.Codigo = ItensPedidoDeVenda.CodPedido AND PedidosDeVenda.FilialEmpresa = ItensPedidoDeVenda.FilialEmpresa AND PedidosDeVenda.FilialEmpresaFaturamento = ? AND ItensPedidoDeVenda.Produto = ?", sSiglaUMMov, sSiglaUMVenda, iClasseUM, dTotalQuantidade, dTotalQuantCancelada, dTotalQuantFaturada, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto)
            If lErro <> AD_SQL_SUCESSO Then Error 999
                        
        Else
                    
            lErro = Comando_Executar(alComando(2), "SELECT ItensPedidoDeVenda.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM, ItensPedidoDeVenda.Quantidade, ItensPedidoDeVenda.QuantCancelada, ItensPedidoDeVenda.QuantFaturada FROM" & _
            " ItensPedidoDeVenda, PedidosDeVenda, Produtos" & _
            " WHERE Produtos.Codigo = ItensPedidoDeVenda.Produto AND PedidosDeVenda.Codigo = ItensPedidoDeVenda.CodPedido AND PedidosDeVenda.FilialEmpresa = ItensPedidoDeVenda.FilialEmpresa AND PedidosDeVenda.FilialEmpresaFaturamento = ? AND ItensPedidoDeVenda.Produto = ? AND PedidosDeVenda.DataEmissao >= ? AND PedidosDeVenda.DataEmissao <= ?", _
            sSiglaUMMov, sSiglaUMVenda, iClasseUM, dTotalQuantidade, dTotalQuantCancelada, dTotalQuantFaturada, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto, dtDataInicial, dtDataFinal)
            If lErro <> AD_SQL_SUCESSO Then Error 999
        
        End If 'Modificado por Leo Final
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        Do While lErro = AD_SQL_SUCESSO
            
            lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 999
        
            dQuantidade = dQuantidade + ((dTotalQuantidade - dTotalQuantCancelada - dTotalQuantFaturada) * dFator)
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
        Loop
        
        'Teste a Ser Feito
        If Abs(tProdutoFilial.dQuantPedida - (dQuantidade)) >= 0.01 Then
                
            Print #1, "PedidoDeVenda x ProdutoFilial"
            Print #1, "Produto = " & tProdutoFilial.sProduto & " FilialEmpresa = " & tProdutoFilial.iFilialEmpresa
            Print #1, "Quantidade Produto Filial = " & tProdutoFilial.dQuantPedida & " Quantidade ItensPedido = " & dQuantidade
            Print #1, "--------------------------------------------------------------------------"
            
            lErro = Comando_ExecutarPos(alComando(7), "UPDATE ProdutosFilial SET QuantPedida = ?", alComando(1), dQuantidade)
            If lErro <> AD_SQL_SUCESSO Then Error 999
                    
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
        
    'Verificar Quantidades, Valores, FilialFaturamento para Notas que tenham vinculos com Pedidos
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
    
        'Quantidade NotaFiscal = Quantidade Faturada em Pedidos
        lErro = Comando_Executar(alComando(3), "SELECT SUM(ItensNFiscal.Quantidade), NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal,ItensNFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.Status <> ?  GROUP BY NFiscal.NumPedidoVenda, NFiscal.FilialPedido ORDER BY NFiscal.NumPedidoVenda", dTotalQuantidadeItensNF, lPedido, iFilialPedido, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        'Quantidade NotaFiscal = Quantidade Faturada em Pedidos
        lErro = Comando_Executar(alComando(3), "SELECT SUM(ItensNFiscal.Quantidade), NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal,ItensNFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.Status <> ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? GROUP BY NFiscal.NumPedidoVenda, NFiscal.FilialPedido ORDER BY NFiscal.NumPedidoVenda", _
        dTotalQuantidadeItensNF, lPedido, iFilialPedido, STATUS_CANCELADO, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Fim
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(4), "SELECT SUM(ItensPedidoDeVendaTodos.QuantFaturada) FROM ItensPedidoDeVendaTodos, PedVenTodos WHERE PedVenTodos.Codigo = ItensPedidoDeVendaTodos.CodPedido AND PedVenTodos.FilialEmpresa = ItensPedidoDeVendaTodos.FilialEmpresa AND PedVenTodos.FilialEmpresa = ? AND PedVenTodos.Codigo = ?", _
        dTotalQuantFaturada, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        If lErro = AD_SQL_SUCESSO Then
            'Teste a Ser Feito
            If Abs(dTotalQuantFaturada - dTotalQuantidadeItensNF) >= 0.01 Then
    
                Print #1, "Pedido X NotaFiscal - Quantidade"
                Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
                Print #1, "Quantidade itens NF  = " & dTotalQuantidadeItensNF & " Quantidade Faturada PV = " & dTotalQuantFaturada
                Print #1, "--------------------------------------------------------------------------"
    
            End If
        Else
        
            Print #1, "Pedido X NotaFiscal - Quantidade - PV nao encontrado"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "Quantidade itens NF  = " & dTotalQuantidadeItensNF
            Print #1, "--------------------------------------------------------------------------"
        
        End If

        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
            
        'Filial Faturamento dos Pedidos = FilialEmpresa das Notas
        lErro = Comando_Executar(alComando(5), "SELECT NFiscal.FilialEmpresa, NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.Status <> ? AND ORDER BY NFiscal.NumPedidoVenda", _
        iFilialNF, lPedido, iFilialPedido, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    Else
    
        'Filial Faturamento dos Pedidos = FilialEmpresa das Notas
        lErro = Comando_Executar(alComando(5), "SELECT NFiscal.FilialEmpresa, NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.Status <> ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? ORDER BY NFiscal.NumPedidoVenda", _
        iFilialNF, lPedido, iFilialPedido, STATUS_CANCELADO, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999

    End If 'Modificado por Leo Fim
    
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(6), "SELECT PedVenTodos.FilialEmpresaFaturamento FROM PedVenTodos WHERE PedVenTodos.FilialEmpresa = ? AND PedVenTodos.Codigo = ?", iFilialFaturamento, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        If lErro = AD_SQL_SUCESSO Then
        
            'Teste a Ser Feito
            If iFilialFaturamento <> iFilialNF Then
    
                Print #1, "Pedido X NotaFiscal - FilialFaturamento"
                Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
                Print #1, "FilialEmpresa NF   = " & iFilialNF & " Filial Faturamento Pedido = "; iFilialFaturamento
                Print #1, "--------------------------------------------------------------------------"
    
            End If

        Else
        
            Print #1, "Pedido X NotaFiscal - FilialFaturamento - PV nao encontrado"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "FilialEmpresa NF   = " & iFilialNF
            Print #1, "--------------------------------------------------------------------------"
        
        End If

        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
    
        'Verificar se Valor de Produtos de PedidoDeVenda é igual a Soma dos Valores dos Item - Desconto Global
        lErro = Comando_Executar(alComando(8), "SELECT PedVenTodos.ValorProdutos, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa, PedVenTodos.ValorDesconto FROM PedVenTodos ORDER BY PedVenTodos.Codigo", dValorProdutos, lPedido, iFilialPedido, dDescontoGlobalPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    Else
    
        'Verificar se Valor de Produtos de PedidoDeVenda é igual a Soma dos Valores dos Item - Desconto Global
        lErro = Comando_Executar(alComando(8), "SELECT PedVenTodos.ValorProdutos, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa, PedVenTodos.ValorDesconto FROM PedVenTodos WHERE PedVenTodos.DataEmissao >= ? AND PedVenTodos.DataEmissao <= ? ORDER BY PedVenTodos.Codigo", dValorProdutos, lPedido, iFilialPedido, dDescontoGlobalPedido, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Fim
    
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(9), "SELECT SUM(ItensPedidoDeVendaTodos.PrecoTotal) FROM ItensPedidoDeVendaTodos WHERE ItensPedidoDeVendaTodos.FilialEmpresa = ? AND  ItensPedidoDeVendaTodos.CodPedido = ?", dPrecoTotalItensPedido, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(9))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        'Teste a Ser Feito
        If Abs(dPrecoTotalItensPedido - (dValorProdutos + dDescontoGlobalPedido)) >= 0.01 Then
            
            Print #1, "Pedido -> Valor Produtos + Desconto Global = Soma dos Valores dos Itens Pedido"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "Valor itens PV  = " & dPrecoTotalItensPedido & " Valor Produtos - DescontoGlobal = " & (dValorProdutos - dDescontoGlobalPedido)
            Print #1, "--------------------------------------------------------------------------"
            
            Set objPV = New ClassPedidoDeVenda
            
            objPV.lCodigo = lPedido
            objPV.iFilialEmpresa = iFilialPedido
            objPV.dValorProdutos = dPrecoTotalItensPedido - dDescontoGlobalPedido
            
            lErro = PedidoVenda_Atualiza(objPV)
            If lErro <> SUCESSO Then Error 999
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
        
        'Verifica se a Valor dos Pedidos é igual a soma das Parcelas Pedido de Venda
        lErro = Comando_Executar(alComando(10), "SELECT PedVenTodos.ValorTotal, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa FROM PedVenTodos ORDER BY PedVenTodos.Codigo", dValorTotal, lPedido, iFilialPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999
            
    Else
    
        'Verifica se a Valor dos Pedidos é igual a soma das Parcelas Pedido de Venda
        lErro = Comando_Executar(alComando(10), "SELECT PedVenTodos.ValorTotal, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa FROM PedVenTodos WHERE PedVenTodos.DataEmissao >= ? AND PedVenTodos.DataEmissao <= ? ORDER BY PedVenTodos.Codigo", dValorTotal, lPedido, iFilialPedido, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Fim
            
    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Do While lErro = SUCESSO
        
        lErro = Comando_Executar(alComando(11), "SELECT SUM(Valor) FROM ParcelasPedVendaTodas WHERE FilialEmpresa = ? AND PedidodeVenda = ?", dSomaParcelaPV, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(11))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        'Teste a Ser Feito
        If Abs(dSomaParcelaPV - (dValorTotal)) >= 0.01 Then
            
            Print #1, "Pedido X Parcelas PV"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "Valor Total PV  = " & dValorTotal & " Valor das Parcelas = " & dSomaParcelaPV
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(10))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    PedidoDeVenda_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_PedidoDeVenda_Testa_Integridades2:

    PedidoDeVenda_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149899)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function PedidoVenda_Atualiza(objPV As ClassPedidoDeVenda) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lCodigo As Long

On Error GoTo Erro_PedidoVenda_Atualiza

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM PedidosDeVenda WHERE Codigo = ? AND FilialEmpresa = ?", 0, lCodigo, objPV.lCodigo, objPV.iFilialEmpresa)
    If lErro <> SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lErro = AD_SQL_SUCESSO Then
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE PedidosDeVenda SET ValorProdutos = ?", alComando(0), objPV.dValorProdutos)
        If lErro <> SUCESSO Then Error 999
    Else
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM PedidosDeVendaBaixados WHERE Codigo = ? AND FilialEmpresa = ?", 0, lCodigo, objPV.lCodigo, objPV.iFilialEmpresa)
        If lErro <> SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE PedidosDeVendaBaixados SET ValorProdutos = ?", alComando(0), objPV.dValorProdutos)
            If lErro <> SUCESSO Then Error 999
        End If
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

Erro_PedidoVenda_Atualiza:

    PedidoVenda_Atualiza = Err
    
    Select Case Err
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149900)
            
    
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function SaldoDiaFat_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 9) As Long
Dim dValorFaturado As Double, dTotalDescontos As Double, dQuantPedida As Double, dQuantFaturada  As Double, dValorDevolvido  As Double, dQuantDevolvida As Double
Dim iFilialEmpresa As Integer
Dim dtData As Date
Dim sProduto As String
Dim dItensQuantidade As Double, dItensValorDesconto As Double, dItensPrecoUnitario As Double
Dim dItensTotalQuantidade As Double, dItensTotalValor As Double
Dim dItensTotalQuantidadeDev As Double, dItensTotalValorDev As Double
Dim iIndice As Integer
Dim dSomaQuantidadePV As Double, dSomaQuantCanceladaPV As Double
Dim dValorTotalDescontos As Double
Dim iClasseUM As Integer, sSiglaUMVenda As String, sSiglaUMMov As String, dFator As Double, dQuantidade As Double
Dim lTransacao As Long
Dim iCodTipoDocInfo As Integer

On Error GoTo Erro_SaldoDiaFat_Testa_Integridades2
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 1999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 2999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
 
        lErro = Comando_ExecutarPos(alComando(1), "SELECT ValorFaturado, TotalDescontos, QuantPedida, QuantFaturada, ValorDevolvido, QuantDevolvida, FilialEmpresa, Data, Produto FROM SldDiaFat ORDER BY Data, Produto", 0, dValorFaturado, dTotalDescontos, dQuantPedida, dQuantFaturada, dValorDevolvido, dQuantDevolvida, iFilialEmpresa, dtData, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 3999
            
    Else
            
        lErro = Comando_ExecutarPos(alComando(1), "SELECT ValorFaturado, TotalDescontos, QuantPedida, QuantFaturada, ValorDevolvido, QuantDevolvida, FilialEmpresa, Data, Produto FROM SldDiaFat WHERE Data >= ? AND Data <= ? AND Produto >= ? AND Produto <= ? ORDER BY Data, Produto", _
        0, dValorFaturado, dTotalDescontos, dQuantPedida, dQuantFaturada, dValorDevolvido, dQuantDevolvida, iFilialEmpresa, dtData, sProduto, dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 3999
            
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 4999
    
    Do While lErro = SUCESSO
        
        dItensTotalQuantidade = 0
        dItensTotalValor = 0
        
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        
        'Quantidade e Valor Faturados
        lErro = Comando_Executar(alComando(2), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM, TiposDocInfo.Codigo FROM NFiscal, ItensNFiscal, TiposDocInfo, Produtos WHERE ItensNfiscal.Produto = Produtos.Codigo AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao = ? AND ItensNFiscal.Produto = ? AND NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 1 AND (TiposDocInfo.Complementar = 0 OR TiposDocInfo.Codigo IN (?,?))", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iCodTipoDocInfo, iFilialEmpresa, dtData, sProduto, DOCINFO_NFISCP, DOCINFO_NFISFCP)
        If lErro <> AD_SQL_SUCESSO Then Error 5999
                
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6999
        
        Do While lErro = SUCESSO
                
            lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 7999
                        
            If iCodTipoDocInfo <> DOCINFO_NFISCP And iCodTipoDocInfo <> DOCINFO_NFISFCP Then
                dItensTotalQuantidade = dItensTotalQuantidade + (dItensQuantidade * dFator)
            End If
            
            dItensTotalValor = dItensTotalValor + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9998
        
        Loop
        
        'Teste a Ser Feito
        If Abs(dItensTotalQuantidade - dQuantFaturada) >= 0.01 Or Abs(dItensTotalValor - dValorFaturado) >= 0.01 Then
            
            Print #1, "SaldoDiaFat - Valor Faturado e Quantidade Faturada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade Faturada SaldoDiaFat= " & dQuantFaturada & " Quantidade Faturada ItensNF = " & dItensTotalQuantidade
            Print #1, "Valor Faturado SaldoDiaFat= " & dValorFaturado & " Valor Faturada ItensNF - ValorDescontos = " & (dItensTotalValor - dItensValorDesconto)
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        
        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        
        dQuantidade = 0
       'Leo, já utiliza o produto filtrado no 1º select
        'Quantidade Pedida
        lErro = Comando_Executar(alComando(3), "SELECT ItensPedidoDeVendaTodos.Quantidade, ItensPedidoDeVendaTodos.QuantCancelada, ItensPedidoDeVendaTodos.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM ItensPedidoDeVendaTodos, PedVenTodos, Produtos WHERE  ItensPedidoDeVendaTodos.Produto = Produtos.Codigo AND ItensPedidoDeVendaTodos.CodPedido = PedVenTodos.Codigo AND ItensPedidoDeVendaTodos.FilialEmpresa = PedVenTodos.FilialEmpresa AND PedVenTodos.FilialEmpresa = ? AND PedVenTodos.DataEmissao = ? AND ItensPedidoDeVendaTodos.Produto = ?", dSomaQuantidadePV, dSomaQuantCanceladaPV, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtData, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 9999
        
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9910

        Do While lErro = AD_SQL_SUCESSO

            lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 9911

            dQuantidade = dQuantidade + ((dSomaQuantidadePV - dSomaQuantCanceladaPV) * dFator)

            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9912

        Loop

        'Teste a Ser Feito
        If Abs(dQuantPedida - dQuantidade) >= 0.01 Then

            Print #1, "SaldoDiaFat - Quantidade Pedida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade Pedida SaldoDiaFat= " & dQuantPedida & " Quantidade ItensPV - QuantCancelada ItensPV = " & (dQuantidade)
            Print #1, "--------------------------------------------------------------------------"

        End If

        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        
        dItensTotalQuantidadeDev = 0
        dItensTotalValorDev = 0
        'Leo, já utiliza o produto filtrado no 1º select
        'QuantidadeDevolvida e Valor Devolvido
        lErro = Comando_Executar(alComando(4), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM NFiscal, ItensNFiscal, Produtos, TiposDocInfo WHERE NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao = ? AND ItensNFiscal.Produto = ? AND ItensNFiscal.Produto = Produtos.Codigo AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 2", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtData, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 9913

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9914

        Do While lErro = SUCESSO

            lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 9915
                        
            dItensTotalQuantidadeDev = dItensTotalQuantidadeDev + (dItensQuantidade * dFator)
            dItensTotalValorDev = dItensTotalValorDev + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)

            lErro = Comando_BuscarProximo(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9916
        
        Loop
        
        'Teste a Ser Feito
        If Abs(dItensTotalQuantidadeDev - dQuantDevolvida) >= 0.01 Or Abs(dItensTotalValorDev - dValorDevolvido) >= 0.01 Then
            
            Print #1, "SaldoDiaFat - Valor Devolvido e Quantidade Devolvida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade Devolvida SaldoDiaFat= " & dQuantDevolvida & " Quantidade Devolvida ItensNF = " & dItensTotalQuantidadeDev
            Print #1, "Valor Devolvido SaldoDiaFat= " & dValorDevolvido & " Valor Devolvido ItensNF - ValorDescontos = " & dItensTotalValorDev
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        'Leo, já utiliza o produto filtrado no 1º select
        'Total de Descontos
        lErro = Comando_Executar(alComando(5), "SELECT SUM(ItensNFiscal.ValorDesconto) FROM NFiscal, ItensNFiscal WHERE NFiscal.Status <> 7 AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao = ? AND ItensNFiscal.Produto = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF", dValorTotalDescontos, iFilialEmpresa, dtData, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 9917
        
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9918

        'Teste a Ser Feito
        If Abs(dValorTotalDescontos - dTotalDescontos) >= 0.01 Then
            
            Print #1, "SaldoDiaFat - Valor Total Descontos"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor descontos SaldoDiaFat = " & dTotalDescontos & " Valor dos descontos dos itens = " & dValorTotalDescontos
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        
        'Teste a Ser Feito
        If Abs(dQuantPedida - dQuantidade) >= 0.01 Or Abs(dItensTotalQuantidade - dQuantFaturada) >= 0.01 Or Abs(dItensTotalValor - dValorFaturado) >= 0.01 Or Abs(dValorTotalDescontos - dTotalDescontos) >= 0.01 Or Abs(dItensTotalQuantidadeDev - dQuantDevolvida) >= 0.01 Or Abs(dItensTotalValorDev - dValorDevolvido) >= 0.01 Then
            
            lErro = Comando_ExecutarPos(alComando(9), "UPDATE SldDiaFat SET ValorFaturado=?, TotalDescontos=?, QuantPedida=?, QuantFaturada=?, ValorDevolvido=?, QuantDevolvida=?", alComando(1), _
                (dItensTotalValor - dItensValorDesconto), dValorTotalDescontos, dQuantidade, dItensTotalQuantidade, dItensTotalValorDev, dItensTotalQuantidadeDev)
            If lErro <> SUCESSO Then Error 9919
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9920
        
    Loop
        
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 9921
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SaldoDiaFat_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SaldoDiaFat_Testa_Integridades2:

    SaldoDiaFat_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149901)
     
    End Select
    
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function SaldoMesFat_Testa_Integridades2(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 6) As Long
Dim iIndice As Integer
Dim sSQL As String
Dim adValorFaturado(1 To 12) As Double
Dim adValorDevolvido(1 To 12) As Double
Dim adTotalDescontos(1 To 12) As Double
Dim adQuantPedida(1 To 12) As Double
Dim adQuantFaturada(1 To 12) As Double
Dim adQuantDevolvida(1 To 12) As Double
Dim iAno As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dValorFaturado As Double, dTotalDescontos As Double, dQuantPedida As Double, dQuantFaturada  As Double, dValorDevolvido  As Double, dQuantDevolvida As Double
Dim dItensQuantidade As Double, dItensValorDesconto As Double, dItensPrecoUnitario As Double
Dim dItensTotalQuantidade As Double, dItensTotalValor As Double
Dim dItensTotalQuantidadeDev As Double, dItensTotalValorDev As Double
Dim dSomaQuantidadePV As Double, dSomaQuantCanceladaPV As Double
Dim dValorTotalDescontos As Double
Dim alComandoUPDATE(0 To 2) As Long
Dim lTransacao As Long
Dim iClasseUM As Integer, sSiglaUMVenda As String, sSiglUMEstoque As String, sSiglaUMMov As String, dFator As Double, dQuantidade As Double
Dim iCodTipoDocInfo As Integer
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

On Error GoTo Erro_SaldoMesFat_Testa_Integridades2
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    For iIndice = LBound(alComandoUPDATE) To UBound(alComandoUPDATE)
        alComandoUPDATE(iIndice) = Comando_Abrir()
        If alComandoUPDATE(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        sSQL = sSQL & ", ValorFaturado" & iIndice
        sSQL = sSQL & ", ValorDevolvido" & iIndice
        sSQL = sSQL & ", TotalDescontos" & iIndice
        sSQL = sSQL & ", QuantPedida" & iIndice
        sSQL = sSQL & ", QuantFaturada" & iIndice
        sSQL = sSQL & ", QuantDevolvida" & iIndice
    Next
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    'Alterado por Wagner
    If dtDataInicial2 = 0 Then 'Modificado por Leo Inicio
    
        sSQL = sSQL & " FROM SldMesFat ORDER BY Produto"
    
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, adValorFaturado(1), adValorDevolvido(1), adTotalDescontos(1), adQuantPedida(1), adQuantFaturada(1), adQuantDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adTotalDescontos(2), adQuantPedida(2), adQuantFaturada(2), adQuantDevolvida(2), adValorFaturado(3), adValorDevolvido(3), adTotalDescontos(3), adQuantPedida(3), adQuantFaturada(3), adQuantDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adTotalDescontos(4), adQuantPedida(4), adQuantFaturada(4), adQuantDevolvida(4), adValorFaturado(5), adValorDevolvido(5), adTotalDescontos(5), adQuantPedida(5), adQuantFaturada(5), adQuantDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adTotalDescontos(6), adQuantPedida(6), adQuantFaturada(6), adQuantDevolvida(6), adValorFaturado(7), adValorDevolvido(7), adTotalDescontos(7), adQuantPedida(7), adQuantFaturada(7), adQuantDevolvida(7), _
        adValorFaturado(8), adValorDevolvido(8), adTotalDescontos(8), adQuantPedida(8), adQuantFaturada(8), adQuantDevolvida(8), adValorFaturado(9), adValorDevolvido(9), adTotalDescontos(9), adQuantPedida(9), adQuantFaturada(9), adQuantDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adTotalDescontos(10), adQuantPedida(10), adQuantFaturada(10), adQuantDevolvida(10), adValorFaturado(11), adValorDevolvido(11), adTotalDescontos(11), adQuantPedida(11), adQuantFaturada(11), adQuantDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adTotalDescontos(12), adQuantPedida(12), adQuantFaturada(12), adQuantDevolvida(12))
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    Else
               
        sSQL = sSQL & " FROM SldMesFat WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
    
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, adValorFaturado(1), adValorDevolvido(1), adTotalDescontos(1), adQuantPedida(1), adQuantFaturada(1), adQuantDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adTotalDescontos(2), adQuantPedida(2), adQuantFaturada(2), adQuantDevolvida(2), adValorFaturado(3), adValorDevolvido(3), adTotalDescontos(3), adQuantPedida(3), adQuantFaturada(3), adQuantDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adTotalDescontos(4), adQuantPedida(4), adQuantFaturada(4), adQuantDevolvida(4), adValorFaturado(5), adValorDevolvido(5), adTotalDescontos(5), adQuantPedida(5), adQuantFaturada(5), adQuantDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adTotalDescontos(6), adQuantPedida(6), adQuantFaturada(6), adQuantDevolvida(6), adValorFaturado(7), adValorDevolvido(7), adTotalDescontos(7), adQuantPedida(7), adQuantFaturada(7), adQuantDevolvida(7), _
        adValorFaturado(8), adValorDevolvido(8), adTotalDescontos(8), adQuantPedida(8), adQuantFaturada(8), adQuantDevolvida(8), adValorFaturado(9), adValorDevolvido(9), adTotalDescontos(9), adQuantPedida(9), adQuantFaturada(9), adQuantDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adTotalDescontos(10), adQuantPedida(10), adQuantFaturada(10), adQuantDevolvida(10), adValorFaturado(11), adValorDevolvido(11), adTotalDescontos(11), adQuantPedida(11), adQuantFaturada(11), adQuantDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adTotalDescontos(12), adQuantPedida(12), adQuantFaturada(12), adQuantDevolvida(12), sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
    
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
    
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
            
            'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            'Alterado por Wagner
            If dtDataInicial2 <> 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 Or dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
            
            'Se o período estiver de acordo
            If bPassou = False Then
            
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dItensTotalQuantidade = 0
                dItensTotalValor = 0
                
                'Valor Faturado e quantidade Faturada
                lErro = Comando_Executar(alComando(2), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, TiposDocInfo.Codigo, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM NFiscal, ItensNFiscal, TiposDocInfo, Produtos WHERE ItensNfiscal.Produto = Produtos.Codigo AND NFiscal.FilialEmpresa = ? AND ItensNFiscal.Produto = ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? AND NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 1 AND (TiposDocInfo.Complementar = 0 OR TiposDocInfo.Codigo IN (?,?))", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, iCodTipoDocInfo, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal, DOCINFO_NFISCP, DOCINFO_NFISFCP)
                If lErro <> AD_SQL_SUCESSO Then Error 999
                          
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then Error 999
                                   
                    If iCodTipoDocInfo <> DOCINFO_NFISCP And iCodTipoDocInfo <> DOCINFO_NFISFCP Then
                        dItensTotalQuantidade = dItensTotalQuantidade + (dItensQuantidade * dFator)
                    End If
                              
                    dItensTotalValor = dItensTotalValor + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Loop
                  
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidade - adQuantFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    Print #1, "SaldoMesFat - Valor Faturado e Quantidade Faturada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Quantidade Faturada SaldoMesFat= " & adQuantFaturada(iMes) & " Quantidade Faturada ItensNF = " & dItensTotalQuantidade
                    Print #1, "Valor Faturado SaldoMesFat= " & adValorFaturado(iMes) & " Valor Faturada ItensNF - ValorDescontos = " & (dItensTotalValor - dItensValorDesconto)
                    Print #1, "--------------------------------------------------------------------------"
            
                End If
                  
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dQuantidade = 0
                
                'Quantidade Pedida
                lErro = Comando_Executar(alComando(3), "SELECT ItensPedidoDeVendaTodos.Quantidade, ItensPedidoDeVendaTodos.QuantCancelada, ItensPedidoDeVendaTodos.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM ItensPedidoDeVendaTodos, PedVenTodos,Produtos WHERE ItensPedidoDeVendaTodos.CodPedido = PedVenTodos.Codigo AND ItensPedidoDeVendaTodos.FilialEmpresa = PedVenTodos.FilialEmpresa AND PedVenTodos.FilialEmpresa = ? AND PedVenTodos.DataEmissao >= ? AND PedVenTodos.DataEmissao <= ? AND ItensPedidoDeVendaTodos.Produto = ? AND Produtos.Codigo = ItensPedidoDeVendaTodos.Produto", dSomaQuantidadePV, dSomaQuantCanceladaPV, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto)
                If lErro <> AD_SQL_SUCESSO Then Error 999
                
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
                Do While lErro = AD_SQL_SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then Error 999
                                   
                    dQuantidade = dQuantidade + ((dSomaQuantidadePV - dSomaQuantCanceladaPV) * dFator)
                    
                    lErro = Comando_BuscarProximo(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
                Loop
    
                'Teste a Ser Feito
                If Abs(adQuantPedida(iMes) - (dQuantidade)) >= 0.01 Then
                    
                    Print #1, "SaldoMesFat - Quantidade Pedida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Quantidade Pedida SaldoMesFat= " & adQuantPedida(iMes) & " Quantidade ItensPV - QuantCancelada ItensPV = " & (dQuantidade) & sSiglaUMVenda
                    Print #1, "--------------------------------------------------------------------------"
    
                End If
    
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dItensTotalQuantidadeDev = 0
                dItensTotalValorDev = 0
                
                'QuantidadeDevolvida e Valor Devolvido
                lErro = Comando_Executar(alComando(4), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM NFiscal, ItensNFiscal, Produtos, TiposDocInfo WHERE ItensNfiscal.Produto = Produtos.Codigo AND NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? AND ItensNFiscal.Produto = ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 2", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto)
                If lErro <> AD_SQL_SUCESSO Then Error 999
    
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
                Do While lErro = SUCESSO
    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then Error 999
                                   
                    dItensTotalQuantidadeDev = dItensTotalQuantidadeDev + (dItensQuantidade * dFator)
                    dItensTotalValorDev = dItensTotalValorDev + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
    
                    lErro = Comando_BuscarProximo(alComando(4))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
                Loop
    
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidadeDev - adQuantDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Then
    
                    Print #1, "SaldoMesFat - Valor Devolvido e Quantidade Devolvida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Quantidade Devolvida SaldoMesFat= " & adQuantDevolvida(iMes) & " Quantidade Devolvida ItensNF = " & dItensTotalQuantidadeDev
                    Print #1, "Valor Devolvido SaldoMesFat= " & adValorDevolvido(iMes) & " Valor Devolvido ItensNF - ValorDescontos = " & (dItensTotalValorDev)
                    Print #1, "--------------------------------------------------------------------------"
    
                End If
                
                'Total de Descontos
                lErro = Comando_Executar(alComando(5), "SELECT SUM(ItensNFiscal.ValorDesconto) FROM NFiscal, ItensNFiscal WHERE NFiscal.Status <> 7 AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? AND ItensNFiscal.Produto = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF", dValorTotalDescontos, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto)
                If lErro <> AD_SQL_SUCESSO Then Error 999
                
                lErro = Comando_BuscarPrimeiro(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
                'Teste a Ser Feito
                If Abs(dValorTotalDescontos - adTotalDescontos(iMes)) >= 0.01 Then
                    
                    Print #1, "SaldoMesFat - Valor Total Descontos"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Valor descontos SaldoMesFat = " & adTotalDescontos(iMes) & " Valor dos descontos dos itens = " & dValorTotalDescontos
                    Print #1, "--------------------------------------------------------------------------"
                            
                End If
                
                'Teste a Ser Feito
                If Abs(adQuantPedida(iMes) - (dQuantidade)) >= 0.01 Or Abs(dItensTotalQuantidadeDev - adQuantDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Or Abs(dValorTotalDescontos - adTotalDescontos(iMes)) >= 0.01 Or Abs(dItensTotalQuantidade - adQuantFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    lErro = Comando_ExecutarPos(alComandoUPDATE(0), "UPDATE SldMesFat SET ValorFaturado" & iMes & " =? , QuantFaturada" & iMes & " =?, TotalDescontos" & iMes & " =?, ValorDevolvido" & iMes & " =?, QuantDevolvida" & iMes & " =?, QuantPedida" & iMes & " =?", alComando(1), _
                        dItensTotalValor, dItensTotalQuantidade, dValorTotalDescontos, dItensTotalValorDev, dItensTotalQuantidadeDev, dQuantidade)
                    If lErro <> SUCESSO Then Error 999
                    
                End If
            
            End If
        
            bPassou = False
                
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
              
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    For iIndice = LBound(alComandoUPDATE) To UBound(alComandoUPDATE)
        Call Comando_Fechar(alComandoUPDATE(iIndice))
    Next
    
    SaldoMesFat_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SaldoMesFat_Testa_Integridades2:

    SaldoMesFat_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149902)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    For iIndice = LBound(alComandoUPDATE) To UBound(alComandoUPDATE)
        Call Comando_Fechar(alComandoUPDATE(iIndice))
    Next
    
End Function

Function SaldoMesFatFilCli_Testa_Integridades2(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim sSQL As String
Dim lTransacao As Long
Dim adValorFaturado(1 To 12) As Double
Dim adValorDevolvido(1 To 12) As Double
Dim adQtdFaturada(1 To 12) As Double
Dim adQtdDevolvida(1 To 12) As Double
Dim iAno As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim lCliente As Long
Dim iFilialCli As Integer
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dValorFaturado As Double
Dim dQtdFaturada  As Double
Dim dValorDevolvido  As Double
Dim dQtdDevolvida As Double
Dim dItensQuantidade As Double
Dim dItensValorDesconto As Double
Dim dItensPrecoUnitario As Double
Dim dItensTotalQuantidade As Double
Dim dItensTotalValor As Double
Dim dItensTotalQuantidadeDev As Double
Dim dItensTotalValorDev As Double
Dim iClasseUM As Integer
Dim sSiglaUMVenda As String
Dim sSiglUMEstoque As String
Dim sSiglaUMMov As String
Dim dFator As Double
Dim iCodTipoDocInfo As Integer
Dim iMesAux As Integer
Dim iAnoAux As Integer

On Error GoTo Erro_SaldoMesFatFilCli_Testa_Integridades2
    
    'Inicia transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 999
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 999
    Next
    
    'Aloca espaço em variáveis strings
    sProduto = String(STRING_PRODUTO, 0)
    
    'Monta Select
    sSQL = "SELECT FilialEmpresa, Ano, Produto, Cliente, Filial "
    
    For iIndice = 1 To 12
        sSQL = sSQL & ", ValorFaturado" & iIndice
        sSQL = sSQL & ", ValorDevolvido" & iIndice
        sSQL = sSQL & ", QtdFaturada" & iIndice
        sSQL = sSQL & ", QtdDevolvida" & iIndice
    Next
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If dtDataInicial2 = 0 Then
    
        sSQL = sSQL & " FROM SldMesFatFilCli ORDER BY Produto"
        
        'Todas tuplas (sem filtro)
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, lCliente, iFilialCli, adValorFaturado(1), adValorDevolvido(1), _
            adQtdFaturada(1), adQtdDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adQtdFaturada(2), adQtdDevolvida(2), adValorFaturado(3), adValorDevolvido(3), _
            adQtdFaturada(3), adQtdDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adQtdFaturada(4), adQtdDevolvida(4), adValorFaturado(5), adValorDevolvido(5), _
            adQtdFaturada(5), adQtdDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adQtdFaturada(6), adQtdDevolvida(6), adValorFaturado(7), adValorDevolvido(7), _
            adQtdFaturada(7), adQtdDevolvida(7), adValorFaturado(8), adValorDevolvido(8), adQtdFaturada(8), adQtdDevolvida(8), adValorFaturado(9), adValorDevolvido(9), _
            adQtdFaturada(9), adQtdDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adQtdFaturada(10), adQtdDevolvida(10), adValorFaturado(11), adValorDevolvido(11), _
            adQtdFaturada(11), adQtdDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adQtdFaturada(12), adQtdDevolvida(12))
        If lErro <> AD_SQL_SUCESSO Then gError 999
    
    Else
               
        'Tuplas filtradas por Produto Inicial e Final
        sSQL = sSQL & " FROM SldMesFatFilCli WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
    
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, lCliente, iFilialCli, adValorFaturado(1), adValorDevolvido(1), _
            adQtdFaturada(1), adQtdDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adQtdFaturada(2), adQtdDevolvida(2), adValorFaturado(3), adValorDevolvido(3), _
            adQtdFaturada(3), adQtdDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adQtdFaturada(4), adQtdDevolvida(4), adValorFaturado(5), adValorDevolvido(5), _
            adQtdFaturada(5), adQtdDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adQtdFaturada(6), adQtdDevolvida(6), adValorFaturado(7), adValorDevolvido(7), _
            adQtdFaturada(7), adQtdDevolvida(7), adValorFaturado(8), adValorDevolvido(8), adQtdFaturada(8), adQtdDevolvida(8), adValorFaturado(9), adValorDevolvido(9), _
            adQtdFaturada(9), adQtdDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adQtdFaturada(10), adQtdDevolvida(10), adValorFaturado(11), adValorDevolvido(11), _
            adQtdFaturada(11), adQtdDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adQtdFaturada(12), adQtdDevolvida(12), sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then gError 999
    
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        'Ignora dia passado e "Seta" como dia 01
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        'Ignora dia passado e "Seta" como último do mês
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
    
    End If
    
    'Busca primeira tupla
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
    
    'Enquanto houver tuplas faça
    Do While lErro = SUCESSO
    
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
            
            'Verifica se passou filtro e ele está entre as datas passadas por parâmetro
            If dtDataInicial2 = 0 Or (dtDataInicial >= dtDataInicial2 And dtDataFinal <= dtDataFinal2) Then
                 
                'Aloca espaço nas variáveis strings
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                    
                dItensTotalQuantidade = 0
                dItensTotalValor = 0
                
                'Valor Faturado e quantidade Faturada
                lErro = Comando_Executar(alComando(2), "SELECT I.Quantidade, I.ValorDesconto, I.PrecoUnitario, T.Codigo, I.UnidadeMed, P.SiglaUMVenda, P.ClasseUM FROM NFiscal AS N, ItensNFiscal AS I, TiposDocInfo AS T, Produtos AS P " & _
                                                       "WHERE I.Produto = P.Codigo AND N.FilialEmpresa = ? AND I.Produto = ? AND N.DataEmissao >= ? AND N.DataEmissao <= ? AND N.Status <> 7 AND N.NumIntDoc = I.NumIntNF AND N.TipoNFiscal = T.Codigo AND T.Faturamento = 1 AND (T.Complementar = 0 OR T.Codigo IN (?,?)) AND N.Cliente = ? AND N.FilialCli = ? ", _
                                                       dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, iCodTipoDocInfo, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal, DOCINFO_NFISCP, DOCINFO_NFISFCP, lCliente, iFilialCli)
                If lErro <> AD_SQL_SUCESSO Then gError 999
                          
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999

                Do While lErro = SUCESSO
                    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then gError 999
                                   
                    If iCodTipoDocInfo <> DOCINFO_NFISCP And iCodTipoDocInfo <> DOCINFO_NFISFCP Then
                        dItensTotalQuantidade = dItensTotalQuantidade + (dItensQuantidade * dFator)
                    End If
                              
                    dItensTotalValor = dItensTotalValor + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
            
                Loop
                  
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidade - adQtdFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    Print #1, "SaldoMesFatFilCli - Valor Faturado e Quantidade Faturada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes & " Ano = " & iAno & " Cliente = " & lCliente & " Filial Cliente = " & iFilialCli
                    Print #1, "Quantidade Faturada SaldoMesFatFilCli= " & adQtdFaturada(iMes) & " Quantidade Faturada ItensNF = " & dItensTotalQuantidade
                    Print #1, "Valor Faturado SaldoMesFatFilCli= " & adValorFaturado(iMes) & " Valor Faturada ItensNF - ValorDescontos = " & (dItensTotalValor - dItensValorDesconto)
                    Print #1, "--------------------------------------------------------------------------"
            
                End If
                  
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dItensTotalQuantidadeDev = 0
                dItensTotalValorDev = 0
                
                'QuantidadeDevolvida e Valor Devolvido
                lErro = Comando_Executar(alComando(3), "SELECT I.Quantidade, I.ValorDesconto, I.PrecoUnitario, I.UnidadeMed, P.SiglaUMVenda, P.ClasseUM FROM NFiscal AS N, ItensNFiscal AS I, Produtos AS P, TiposDocInfo AS T " & _
                                                       "WHERE I.Produto = P.Codigo AND N.Status <> 7 AND N.NumIntDoc = I.NumIntNF AND N.FilialEmpresa = ? AND N.DataEmissao >= ? AND N.DataEmissao <= ? AND I.Produto = ? AND N.TipoNFiscal = T.Codigo AND T.Faturamento = 2 AND Cliente = ? AND FilialCli = ? ", _
                                                       dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto, lCliente, iFilialCli)
                If lErro <> AD_SQL_SUCESSO Then gError 110252
    
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
    
                Do While lErro = SUCESSO
    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then gError 999
                                   
                    dItensTotalQuantidadeDev = dItensTotalQuantidadeDev + (dItensQuantidade * dFator)
                    dItensTotalValorDev = dItensTotalValorDev + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
    
                    lErro = Comando_BuscarProximo(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
    
                Loop
    
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidadeDev - adQtdDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Then
    
                    Print #1, "SaldoMesFatFilCli - Valor Devolvido e Quantidade Devolvida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes & " Ano = " & iAno & " Cliente = " & lCliente & " Filial Cliente = " & iFilialCli
                    Print #1, "Quantidade Devolvida SaldoMesFatFilCli= " & adQtdDevolvida(iMes) & " Quantidade Devolvida ItensNF = " & dItensTotalQuantidadeDev
                    Print #1, "Valor Devolvido SaldoMesFatFilCli= " & adValorDevolvido(iMes) & " Valor Devolvido ItensNF - ValorDescontos = " & (dItensTotalValorDev)
                    Print #1, "--------------------------------------------------------------------------"
    
                End If
               
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidadeDev - adQtdDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Or Abs(dItensTotalQuantidade - adQtdFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    lErro = Comando_ExecutarPos(alComando(4), "UPDATE SldMesFatFilCli SET ValorFaturado" & iMes & " =? , QtdFaturada" & iMes & " =? , ValorDevolvido" & iMes & " =?, QtdDevolvida" & iMes & " =? ", alComando(1), _
                        dItensTotalValor, dItensTotalQuantidade, dItensTotalValorDev, dItensTotalQuantidadeDev)
                    If lErro <> SUCESSO Then gError 999
                
                End If
                    
            End If
                      
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
        
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 999
              
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SaldoMesFatFilCli_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SaldoMesFatFilCli_Testa_Integridades2:

    SaldoMesFatFilCli_Testa_Integridades2 = gErr
    
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149903)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldDiaEst_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a Tabela de SldDiaEst
 
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim dtData As Date
Dim dQuantEntrada As Double, dQuantSaida As Double, dQuantCons As Double, dQuantVend As Double, dValorEntrada As Double, dValorSaida As Double, dQuantComp As Double, dValorComp As Double, dValorVend As Double, dValorCons As Double
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dQuantEntCusto As Double, dValorEntCusto As Double, dQuantSaiCusto As Double, dValorSaiCusto As Double
Dim dTotalQuantEntCusto As Double, dTotalValorEntCusto As Double, dTotalQuantSaiCusto As Double, dTotalValorSaiCusto As Double

Dim dQuantEntConsig3 As Double, dValorEntConsig3 As Double, dQuantSaiConsig3 As Double, dValorSaiConsig3 As Double
Dim dTotalQuantEntConsig3 As Double, dTotalValorEntConsig3 As Double, dTotalQuantSaiConsig3 As Double, dTotalValorSaiConsig3 As Double
Dim dQuantEntDemo3 As Double, dValorEntDemo3 As Double, dQuantSaiDemo3 As Double, dValorSaiDemo3 As Double
Dim dTotalQuantEntDemo3 As Double, dTotalValorEntDemo3 As Double, dTotalQuantSaiDemo3 As Double, dTotalValorSaiDemo3 As Double
Dim dQuantEntConserto3 As Double, dValorEntConserto3 As Double, dQuantSaiConserto3 As Double, dValorSaiConserto3 As Double
Dim dTotalQuantEntConserto3 As Double, dTotalValorEntConserto3 As Double, dTotalQuantSaiConserto3 As Double, dTotalValorSaiConserto3 As Double
Dim dQuantEntOutras3 As Double, dValorEntOutras3 As Double, dQuantSaiOutras3 As Double, dValorSaiOutras3 As Double
Dim dTotalQuantEntOutras3 As Double, dTotalValorEntOutras3 As Double, dTotalQuantSaiOutras3 As Double, dTotalValorSaiOutras3 As Double
Dim dQuantEntBenef3 As Double, dValorEntBenef3 As Double, dQuantSaiBenef3 As Double, dValorSaiBenef3 As Double
Dim dTotalQuantEntBenef3 As Double, dTotalValorEntBenef3 As Double, dTotalQuantSaiBenef3 As Double, dTotalValorSaiBenef3 As Double

Dim dQuantEntConsig As Double, dValorEntConsig As Double, dQuantSaiConsig As Double, dValorSaiConsig As Double
Dim dTotalQuantEntConsig As Double, dTotalValorEntConsig As Double, dTotalQuantSaiConsig As Double, dTotalValorSaiConsig As Double
Dim dQuantEntDemo As Double, dValorEntDemo As Double, dQuantSaiDemo As Double, dValorSaiDemo As Double
Dim dTotalQuantEntDemo As Double, dTotalValorEntDemo As Double, dTotalQuantSaiDemo As Double, dTotalValorSaiDemo As Double
Dim dQuantEntConserto As Double, dValorEntConserto As Double, dQuantSaiConserto As Double, dValorSaiConserto As Double
Dim dTotalQuantEntConserto As Double, dTotalValorEntConserto As Double, dTotalQuantSaiConserto As Double, dTotalValorSaiConserto As Double
Dim dQuantEntOutras As Double, dValorEntOutras As Double, dQuantSaiOutras As Double, dValorSaiOutras As Double
Dim dTotalQuantEntOutras As Double, dTotalValorEntOutras As Double, dTotalQuantSaiOutras As Double, dTotalValorSaiOutras As Double
Dim dQuantEntBenef As Double, dValorEntBenef As Double, dQuantSaiBenef As Double, dValorSaiBenef As Double
Dim dTotalQuantEntBenef As Double, dTotalValorEntBenef As Double, dTotalQuantSaiBenef As Double, dTotalValorSaiBenef As Double

Dim sUPDATE As String, sSelecaoSQL As String, sSelecaoSQL2 As String

Dim dQuantVendConsig3 As Double, dValorVendConsig3 As Double, dTotalQuantVendConsig3 As Double, dTotalValorVendConsig3 As Double
Dim dQuantEntRecIndl As Double, dValorEntRecIndl As Double, dTotalQuantEntRecIndl As Double, dTotalValorEntRecIndl As Double
Dim dQuantSaiRecIndl As Double, dValorSaiRecIndl As Double, dTotalQuantSaiRecIndl As Double, dTotalValorSaiRecIndl As Double

Dim iClasseUM As Integer, sSiglaUMEst As String, sSiglaUMMov As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean


On Error GoTo Erro_SldDiaEst_Testa_Integridades2
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
     
        'Guarda a Selecao SQL
        sSelecaoSQL = "SELECT FilialEmpresa, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons, QuantEntCusto, ValorEntCusto, QuantSaiCusto, ValorSaiCusto, " & _
                      "QuantEntConsig3, ValorEntConsig3, QuantSaiConsig3, ValorSaiConsig3, QuantEntDemo3, ValorEntDemo3, QuantSaiDemo3, ValorSaiDemo3, QuantEntConserto3, ValorEntConserto3, QuantSaiConserto3, ValorSaiConserto3, QuantEntOutros3, ValorEntOutros3, QuantSaiOutros3, ValorSaiOutros3, QuantEntBenef3, ValorEntBenef3, QuantSaiBenef3, ValorSaiBenef3, " & _
                      "QuantEntConsig, ValorEntConsig, QuantSaiConsig, ValorSaiConsig, QuantEntDemo, ValorEntDemo, QuantSaiDemo, ValorSaiDemo, QuantEntConserto, ValorEntConserto, QuantSaiConserto, ValorSaiConserto, QuantEntOutros, ValorEntOutros, QuantSaiOutros, ValorSaiOutros, QuantEntBenef, ValorEntBenef, QuantSaiBenef, ValorSaiBenef, QuantVendConsig3, ValorVendConsig3, " & _
                      "QuantEntRecIndl, ValorEntRecIndl, QuantSaiRecIndl, ValorSaiRecIndl " & _
                      "FROM SldDiaEst ORDER BY FilialEmpresa, Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSelecaoSQL, 0, iFilialEmpresa, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons, dQuantEntCusto, dValorEntCusto, dQuantSaiCusto, dValorSaiCusto, dQuantEntConsig3, dValorEntConsig3, dQuantSaiConsig3, dValorSaiConsig3, dQuantEntDemo3, dValorEntDemo3, dQuantSaiDemo3, dValorSaiDemo3, dQuantEntConserto3, dValorEntConserto3, dQuantSaiConserto3, dValorSaiConserto3, dQuantEntOutras3, dValorEntOutras3, dQuantSaiOutras3, dValorSaiOutras3, dQuantEntBenef3, dValorEntBenef3, dQuantSaiBenef3, dValorSaiBenef3, dQuantEntConsig, dValorEntConsig, dQuantSaiConsig, dValorSaiConsig, dQuantEntDemo, dValorEntDemo, dQuantSaiDemo, dValorSaiDemo, dQuantEntConserto, dValorEntConserto, dQuantSaiConserto, dValorSaiConserto, dQuantEntOutras, dValorEntOutras, dQuantSaiOutras, dValorSaiOutras, dQuantEntBenef, dValorEntBenef, dQuantSaiBenef, dValorSaiBenef, dQuantVendConsig3, dValorVendConsig3, _
                                    dQuantEntRecIndl, dValorEntRecIndl, dQuantSaiRecIndl, dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    Else
    
      'Guarda a Selecao SQL
        sSelecaoSQL = "SELECT FilialEmpresa, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons, QuantEntCusto, ValorEntCusto, QuantSaiCusto, ValorSaiCusto, " & _
                      "QuantEntConsig3, ValorEntConsig3, QuantSaiConsig3, ValorSaiConsig3, QuantEntDemo3, ValorEntDemo3, QuantSaiDemo3, ValorSaiDemo3, QuantEntConserto3, ValorEntConserto3, QuantSaiConserto3, ValorSaiConserto3, QuantEntOutros3, ValorEntOutros3, QuantSaiOutros3, ValorSaiOutros3, QuantEntBenef3, ValorEntBenef3, QuantSaiBenef3, ValorSaiBenef3, " & _
                      "QuantEntConsig, ValorEntConsig, QuantSaiConsig, ValorSaiConsig, QuantEntDemo, ValorEntDemo, QuantSaiDemo, ValorSaiDemo, QuantEntConserto, ValorEntConserto, QuantSaiConserto, ValorSaiConserto, QuantEntOutros, ValorEntOutros, QuantSaiOutros, ValorSaiOutros, QuantEntBenef, ValorEntBenef, QuantSaiBenef, ValorSaiBenef, QuantVendConsig3, ValorVendConsig3, " & _
                      "QuantEntRecIndl, ValorEntRecIndl, QuantSaiRecIndl, ValorSaiRecIndl " & _
                      "FROM SldDiaEst WHERE Data >= ? AND Data <= ? AND Produto >= ? AND Produto <= ? ORDER BY FilialEmpresa, Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSelecaoSQL, 0, iFilialEmpresa, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons, dQuantEntCusto, dValorEntCusto, dQuantSaiCusto, dValorSaiCusto, dQuantEntConsig3, dValorEntConsig3, dQuantSaiConsig3, dValorSaiConsig3, dQuantEntDemo3, dValorEntDemo3, dQuantSaiDemo3, dValorSaiDemo3, dQuantEntConserto3, dValorEntConserto3, dQuantSaiConserto3, dValorSaiConserto3, dQuantEntOutras3, dValorEntOutras3, dQuantSaiOutras3, dValorSaiOutras3, dQuantEntBenef3, dValorEntBenef3, dQuantSaiBenef3, dValorSaiBenef3, dQuantEntConsig, dValorEntConsig, dQuantSaiConsig, dValorSaiConsig, dQuantEntDemo, dValorEntDemo, dQuantSaiDemo, dValorSaiDemo, dQuantEntConserto, dValorEntConserto, dQuantSaiConserto, dValorSaiConserto, dQuantEntOutras, dValorEntOutras, dQuantSaiOutras, dValorSaiOutras, dQuantEntBenef, dValorEntBenef, dQuantSaiBenef, dValorSaiBenef, dQuantVendConsig3, dValorVendConsig3, _
                                    dQuantEntRecIndl, dValorEntRecIndl, dQuantSaiRecIndl, dValorSaiRecIndl, dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    End If 'Modificado por Leo até aqui
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
        
        bMudou = False
        
        dTotalQuantEntrada = 0
        dTotalQuantSaida = 0
        dTotalQuantCons = 0
        dTotalQuantVend = 0
        dTotalValorEntrada = 0
        dTotalValorSaida = 0
        dTotalQuantComp = 0
        dTotalValorComp = 0
        dTotalValorVend = 0
        dTotalValorCons = 0
        dTotalQuantEntCusto = 0
        dTotalValorEntCusto = 0
        dTotalQuantSaiCusto = 0
        dTotalValorSaiCusto = 0
        
        dTotalQuantEntConsig3 = 0
        dTotalValorEntConsig3 = 0
        dTotalQuantSaiConsig3 = 0
        dTotalValorSaiConsig3 = 0
        dTotalQuantEntDemo3 = 0
        dTotalValorEntDemo3 = 0
        dTotalQuantSaiDemo3 = 0
        dTotalValorSaiDemo3 = 0
        dTotalQuantEntConserto3 = 0
        dTotalValorEntConserto3 = 0
        dTotalQuantSaiConserto3 = 0
        dTotalValorSaiConserto3 = 0
        dTotalQuantEntOutras3 = 0
        dTotalValorEntOutras3 = 0
        dTotalQuantSaiOutras3 = 0
        dTotalValorSaiOutras3 = 0
        dTotalQuantEntBenef3 = 0
        dTotalValorEntBenef3 = 0
        dTotalQuantSaiBenef3 = 0
        dTotalValorSaiBenef3 = 0
        
        dTotalQuantEntConsig = 0
        dTotalValorEntConsig = 0
        dTotalQuantSaiConsig = 0
        dTotalValorSaiConsig = 0
        dTotalQuantEntDemo = 0
        dTotalValorEntDemo = 0
        dTotalQuantSaiDemo = 0
        dTotalValorSaiDemo = 0
        dTotalQuantEntConserto = 0
        dTotalValorEntConserto = 0
        dTotalQuantSaiConserto = 0
        dTotalValorSaiConserto = 0
        dTotalQuantEntOutras = 0
        dTotalValorEntOutras = 0
        dTotalQuantSaiOutras = 0
        dTotalValorSaiOutras = 0
        dTotalQuantEntBenef = 0
        dTotalValorEntBenef = 0
        dTotalQuantSaiBenef = 0
        dTotalValorSaiBenef = 0
        
        dTotalQuantVendConsig3 = 0
        dTotalValorVendConsig3 = 0
        
        dTotalQuantEntRecIndl = 0
        dTotalValorEntRecIndl = 0
        dTotalQuantSaiRecIndl = 0
        dTotalValorSaiRecIndl = 0
        
        sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        

        sSelecaoSQL2 = "SELECT TiposMovimentoEstoque.Codigo, TiposMovimentoEstoque.AtualizaSaldoCusto, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida, TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque, MovimentoEstoque.SiglaUM, " & _
                       "TiposMovimentoEstoque.AtualizaConsig, TiposMovimentoEstoque.AtualizaDemo, TiposMovimentoEstoque.AtualizaConserto, TiposMovimentoEstoque.AtualizaOutras, TiposMovimentoEstoque.AtualizaBenef, TiposMovimentoEstoque.ProdutodeTerc, TiposMovimentoEstoque.AtualizaVendaConsig3, TiposMovimentoEstoque.AtualizaRecebIndisp " & _
                       "FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data = ? AND MovimentoEstoque.Produto = produtos.codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0"
        
        'Correção 13/03- Shirley
        lErro = Comando_Executar(alComando(2), sSelecaoSQL2, tTiposMovimentoEstoque.iCodigo, tTiposMovimentoEstoque.iAtualizaSaldoCusto, dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, _
                                tTiposMovimentoEstoque.iAtualizaConsig, tTiposMovimentoEstoque.iAtualizaDemo, tTiposMovimentoEstoque.iAtualizaConserto, tTiposMovimentoEstoque.iAtualizaOutras, tTiposMovimentoEstoque.iAtualizaBenef, tTiposMovimentoEstoque.iProdutoDeTerc, tTiposMovimentoEstoque.iAtualizaVendaConsig3, tTiposMovimentoEstoque.iAtualizaRecebIndisp, iFilialEmpresa, sProduto, dtData)
        
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        Do While lErro = SUCESSO

            lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
            If lErro <> SUCESSO Then Error 999
             
            dQuantidadeMovEst = dQuantidadeMovEst * dFator
            
            If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Then
                dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                dTotalValorSaida = dTotalValorSaida + dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp - dCustoMovEst
            End If
            
            'Daniel
            If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Or tTiposMovimentoEstoque.iCodigo = MOV_EST_AJUSTE_CUSTO_STD_NOSSO Then
                If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                    dTotalQuantEntCusto = dTotalQuantEntCusto + dQuantidadeMovEst
                    dTotalValorEntCusto = dTotalValorEntCusto + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                    dTotalQuantEntCusto = dTotalQuantEntCusto - dQuantidadeMovEst
                    dTotalValorEntCusto = dTotalValorEntCusto - dCustoMovEst
                End If
            End If
            
            If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                    dTotalQuantSaiCusto = dTotalQuantSaiCusto + dQuantidadeMovEst
                    dTotalValorSaiCusto = dTotalValorSaiCusto + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                    dTotalQuantSaiCusto = dTotalQuantSaiCusto - dQuantidadeMovEst
                    dTotalValorSaiCusto = dTotalValorSaiCusto - dCustoMovEst
                End If
            End If
            
            If tTiposMovimentoEstoque.iAtualizaRecebIndisp = TIPOMOV_EST_ADICIONARECEBINDISP Then
                dTotalQuantEntRecIndl = dTotalQuantEntRecIndl + dQuantidadeMovEst
                dTotalValorEntRecIndl = dTotalValorEntRecIndl + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaRecebIndisp = TIPOMOV_EST_SUBTRAIRECEBINDISP Then
                dTotalQuantSaiRecIndl = dTotalQuantSaiRecIndl - dQuantidadeMovEst
                dTotalValorSaiRecIndl = dTotalValorSaiRecIndl - dCustoMovEst
            End If
        
            If tTiposMovimentoEstoque.iAtualizaVendaConsig3 = TIPOMOV_EST_ADICIONAVENDACONSIG3 Then
                dTotalQuantVendConsig3 = dTotalQuantVendConsig3 + dQuantidadeMovEst
                dTotalValorVendConsig3 = dTotalValorVendConsig3 + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaVendaConsig3 = TIPOMOV_EST_SUBTRAIVENDACONSIG3 Then
                dTotalQuantVendConsig3 = dTotalQuantVendConsig3 - dQuantidadeMovEst
                dTotalValorVendConsig3 = dTotalValorVendConsig3 - dCustoMovEst
            End If
            
            'Se for Produto Nosso em Terceiros...
            If tTiposMovimentoEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTONOSSO Then
            
                If tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                    dTotalQuantEntDemo = dTotalQuantEntDemo + dQuantidadeMovEst
                    dTotalValorEntDemo = dTotalValorEntDemo + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                    dTotalQuantSaiDemo = dTotalQuantSaiDemo + dQuantidadeMovEst
                    dTotalValorSaiDemo = dTotalValorSaiDemo + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                    dTotalQuantEntBenef = dTotalQuantEntBenef + dQuantidadeMovEst
                    dTotalValorEntBenef = dTotalValorEntBenef + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                    dTotalQuantSaiBenef = dTotalQuantSaiBenef + dQuantidadeMovEst
                    dTotalValorSaiBenef = dTotalValorSaiBenef + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                    dTotalQuantEntConserto = dTotalQuantEntConserto + dQuantidadeMovEst
                    dTotalValorEntConserto = dTotalValorEntConserto + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                    dTotalQuantSaiConserto = dTotalQuantSaiConserto + dQuantidadeMovEst
                    dTotalValorSaiConserto = dTotalValorSaiConserto + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                    dTotalQuantEntConsig = dTotalQuantEntConsig + dQuantidadeMovEst
                    dTotalValorEntConsig = dTotalValorEntConsig + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                    dTotalQuantSaiConsig = dTotalQuantSaiConsig + dQuantidadeMovEst
                    dTotalValorSaiConsig = dTotalValorSaiConsig + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                    dTotalQuantEntOutras = dTotalQuantEntOutras + dQuantidadeMovEst
                    dTotalValorEntOutras = dTotalValorEntOutras + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                    dTotalQuantSaiOutras = dTotalQuantSaiOutras + dQuantidadeMovEst
                    dTotalValorSaiOutras = dTotalValorSaiOutras + dCustoMovEst
                End If
            
            'Senão, se for Produto de Terceiros Conosco...
            ElseIf tTiposMovimentoEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTODETERCEIROS Then
            
                If tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                    dTotalQuantEntDemo3 = dTotalQuantEntDemo3 + dQuantidadeMovEst
                    dTotalValorEntDemo3 = dTotalValorEntDemo3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                    dTotalQuantSaiDemo3 = dTotalQuantSaiDemo3 + dQuantidadeMovEst
                    dTotalValorSaiDemo3 = dTotalValorSaiDemo3 + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                    dTotalQuantEntBenef3 = dTotalQuantEntBenef3 + dQuantidadeMovEst
                    dTotalValorEntBenef3 = dTotalValorEntBenef3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                    dTotalQuantSaiBenef3 = dTotalQuantSaiBenef3 + dQuantidadeMovEst
                    dTotalValorSaiBenef3 = dTotalValorSaiBenef3 + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                    dTotalQuantEntConserto3 = dTotalQuantEntConserto3 + dQuantidadeMovEst
                    dTotalValorEntConserto3 = dTotalValorEntConserto3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                    dTotalQuantSaiConserto3 = dTotalQuantSaiConserto3 + dQuantidadeMovEst
                    dTotalValorSaiConserto3 = dTotalValorSaiConserto3 + dCustoMovEst
                End If

                If tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                    dTotalQuantEntConsig3 = dTotalQuantEntConsig3 + dQuantidadeMovEst
                    dTotalValorEntConsig3 = dTotalValorEntConsig3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                    dTotalQuantSaiConsig3 = dTotalQuantSaiConsig3 + dQuantidadeMovEst
                    dTotalValorSaiConsig3 = dTotalValorSaiConsig3 + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                    dTotalQuantEntOutras3 = dTotalQuantEntOutras3 + dQuantidadeMovEst
                    dTotalValorEntOutras3 = dTotalValorEntOutras3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                    dTotalQuantSaiOutras3 = dTotalQuantSaiOutras3 + dQuantidadeMovEst
                    dTotalValorSaiOutras3 = dTotalValorSaiOutras3 + dCustoMovEst
                End If
                
            End If
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
        Loop
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntrada - dQuantEntrada) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntrada & " Quantidade MovEst = " & dTotalQuantEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntrada - dValorEntrada) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntrada & " Valor MovEst = " & dTotalValorEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaida - dQuantSaida) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaida & " Quantidade MovEst = " & dTotalQuantSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaida - dValorSaida) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaida & " Valor MovEst = " & dTotalValorSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantCons - dQuantCons) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Consumida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantCons & " Quantidade MovEst = " & dTotalQuantCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorCons - dValorCons) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consumido"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorCons & " Valor MovEst = " & dTotalValorCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantVend - dQuantVend) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Venda"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantVend & " Quantidade MovEst = " & dTotalQuantVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorVend - dValorVend) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Venda"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorVend & " Valor MovEst = " & dTotalValorVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantComp - dQuantComp) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Compra"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantComp & " Quantidade MovEst = " & dTotalQuantComp
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorComp - dValorComp) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Compra"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorComp & " Valor MovEst = " & dTotalValorComp
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntCusto - dQuantEntCusto) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Custo Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntCusto & " Quantidade MovEst = " & dTotalQuantEntCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntCusto - dValorEntCusto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Custo Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntCusto & " Valor MovEst = " & dTotalValorEntCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiCusto - dQuantSaiCusto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Custo Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiCusto & " Quantidade MovEst = " & dTotalQuantSaiCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiCusto - dValorSaiCusto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Custo Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiCusto & " Valor MovEst = " & dTotalValorSaiCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntBenef3 - dQuantEntBenef3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Benef. de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntBenef3 & " Quantidade MovEst = " & dTotalQuantEntBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntBenef3 - dValorEntBenef3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntBenef3 & " Valor MovEst = " & dTotalValorEntBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiBenef3 - dQuantSaiBenef3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Benef. de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiBenef3 & " Quantidade MovEst = " & dTotalQuantSaiBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiBenef3 - dValorSaiBenef3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiBenef3 & " Valor MovEst = " & dTotalValorSaiBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntOutras3 - dQuantEntOutras3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Outras de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntOutras3 & " Quantidade MovEst = " & dTotalQuantEntOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntOutras3 - dValorEntOutras3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntOutras3 & " Valor MovEst = " & dTotalValorEntOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiOutras3 - dQuantSaiOutras3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Outras de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiOutras3 & " Quantidade MovEst = " & dTotalQuantSaiOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiOutras3 - dValorSaiOutras3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiOutras3 & " Valor MovEst = " & dTotalValorSaiOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntDemo3 - dQuantEntDemo3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Demo de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntDemo3 & " Quantidade MovEst = " & dTotalQuantEntDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntDemo3 - dValorEntDemo3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntDemo3 & " Valor MovEst = " & dTotalValorEntDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiDemo3 - dQuantSaiDemo3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Demo de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiDemo3 & " Quantidade MovEst = " & dTotalQuantSaiDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiDemo3 - dValorSaiDemo3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiDemo3 & " Valor MovEst = " & dTotalValorSaiDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConserto3 - dQuantEntConserto3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Conserto de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConserto3 & " Quantidade MovEst = " & dTotalQuantEntConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConserto3 - dValorEntConserto3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConserto3 & " Valor MovEst = " & dTotalValorEntConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConserto3 - dQuantSaiConserto3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Conserto de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConserto3 & " Quantidade MovEst = " & dTotalQuantSaiConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConserto3 - dValorSaiConserto3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConserto3 & " Valor MovEst = " & dTotalValorSaiConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConsig3 - dQuantEntConsig3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Consig de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConsig3 & " Quantidade MovEst = " & dTotalQuantEntConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConsig3 - dValorEntConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConsig3 & " Valor MovEst = " & dTotalValorEntConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConsig3 - dQuantSaiConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Consig de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConsig3 & " Quantidade MovEst = " & dTotalQuantSaiConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConsig3 - dValorSaiConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConsig3 & " Valor MovEst = " & dTotalValorSaiConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntBenef - dQuantEntBenef) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Benef. Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntBenef & " Quantidade MovEst = " & dTotalQuantEntBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntBenef - dValorEntBenef) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntBenef & " Valor MovEst = " & dTotalValorEntBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiBenef - dQuantSaiBenef) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Benef. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiBenef & " Quantidade MovEst = " & dTotalQuantSaiBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiBenef - dValorSaiBenef) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiBenef & " Valor MovEst = " & dTotalValorSaiBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntOutras - dQuantEntOutras) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Outras de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntOutras & " Quantidade MovEst = " & dTotalQuantEntOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntOutras - dValorEntOutras) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntOutras & " Valor MovEst = " & dTotalValorEntOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiOutras - dQuantSaiOutras) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Outras de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiOutras & " Quantidade MovEst = " & dTotalQuantSaiOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiOutras - dValorSaiOutras) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiOutras & " Valor MovEst = " & dTotalValorSaiOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntDemo - dQuantEntDemo) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Demo de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntDemo & " Quantidade MovEst = " & dTotalQuantEntDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntDemo - dValorEntDemo) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntDemo & " Valor MovEst = " & dTotalValorEntDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiDemo - dQuantSaiDemo) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Demo de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiDemo & " Quantidade MovEst = " & dTotalQuantSaiDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiDemo - dValorSaiDemo) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiDemo & " Valor MovEst = " & dTotalValorSaiDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConserto - dQuantEntConserto) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Conserto de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConserto & " Quantidade MovEst = " & dTotalQuantEntConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConserto - dValorEntConserto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConserto & " Valor MovEst = " & dTotalValorEntConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConserto - dQuantSaiConserto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Conserto de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConserto & " Quantidade MovEst = " & dTotalQuantSaiConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConserto - dValorSaiConserto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConserto & " Valor MovEst = " & dTotalValorSaiConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConsig - dQuantEntConsig) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Consig de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConsig & " Quantidade MovEst = " & dTotalQuantEntConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConsig - dValorEntConsig) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConsig & " Valor MovEst = " & dTotalValorEntConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConsig - dQuantSaiConsig) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Consig de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConsig & " Quantidade MovEst = " & dTotalQuantSaiConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConsig - dValorSaiConsig) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConsig & " Valor MovEst = " & dTotalValorSaiConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantVendConsig3 - dQuantVendConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Venda Consig 3ºs"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantVendConsig3 & " Quantidade MovEst = " & dTotalQuantVendConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorVendConsig3 - dValorVendConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Venda Consig 3ºs"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorVendConsig3 & " Valor MovEst = " & dTotalValorVendConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntRecIndl - dQuantEntRecIndl) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Rec. Indisp. de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntRecIndl & " Quantidade MovEst = " & dTotalQuantEntRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntRecIndl - dValorEntRecIndl) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Rec. Indisp. de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntRecIndl & " Valor MovEst = " & dTotalValorEntRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiRecIndl - dQuantSaiRecIndl) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Rec. Indisp. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiRecIndl & " Quantidade MovEst = " & dTotalQuantSaiRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiRecIndl - dValorSaiRecIndl) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Rec. Indisp. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiRecIndl & " Valor MovEst = " & dTotalValorSaiRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
    
        If bMudou = True Then
        
            sUPDATE = "UPDATE SldDiaEst SET QuantEntrada=?, QuantSaida=?, QuantCons=?, QuantVend=?, ValorEntrada=?, ValorSaida=?, " & _
                      "QuantComp=?, ValorComp=?, ValorVend=?, ValorCons=?, QuantEntCusto=?, ValorEntCusto=?, QuantSaiCusto=?, ValorSaiCusto=?, " & _
                      "QuantEntConsig3=?, ValorEntConsig3=?, QuantSaiConsig3=?, ValorSaiConsig3=?, QuantEntDemo3 =?, ValorEntDemo3=?, QuantSaiDemo3=?, ValorSaiDemo3=?, QuantEntConserto3=?, ValorEntConserto3=?, QuantSaiConserto3=?, ValorSaiConserto3=?, QuantEntOutros3=?, ValorEntOutros3=?, QuantSaiOutros3=?, ValorSaiOutros3=?, QuantEntBenef3=?, ValorEntBenef3=?, QuantSaiBenef3=?, ValorSaiBenef3=?, QuantEntConsig=?, ValorEntConsig=?, QuantSaiConsig=?, ValorSaiConsig=?, QuantEntDemo=?, ValorEntDemo=?, QuantSaiDemo=?, ValorSaiDemo=?, QuantEntConserto=?, ValorEntConserto=?, QuantSaiConserto=?, ValorSaiConserto=?, QuantEntOutros=?, ValorEntOutros=?, QuantSaiOutros=?, ValorSaiOutros=?, QuantEntBenef=?, ValorEntBenef=?, QuantSaiBenef=?, ValorSaiBenef=?, QuantVendConsig3=?, ValorVendConsig3=?, " & _
                      "QuantEntRecIndl=?, ValorEntRecIndl=?, QuantSaiRecIndl=?, ValorSaiRecIndl=?"
                              
            lErro = Comando_ExecutarPos(alComando(3), sUPDATE, alComando(1), _
                                        dTotalQuantEntrada, dTotalQuantSaida, dTotalQuantCons, dTotalQuantVend, dTotalValorEntrada, dTotalValorSaida, dTotalQuantComp, dTotalValorComp, dTotalValorVend, dTotalValorCons, dTotalQuantEntCusto, dTotalValorEntCusto, dTotalQuantSaiCusto, dTotalValorSaiCusto, _
                                        dTotalQuantEntConsig3, dTotalValorEntConsig3, dTotalQuantSaiConsig3, dTotalValorSaiConsig3, dTotalQuantEntDemo3, dTotalValorEntDemo3, dTotalQuantSaiDemo3, dTotalValorSaiDemo3, dTotalQuantEntConserto3, dTotalValorEntConserto3, dTotalQuantSaiConserto3, dTotalValorSaiConserto3, dTotalQuantEntOutras3, dTotalValorEntOutras3, dTotalQuantSaiOutras3, dTotalValorSaiOutras3, dTotalQuantEntBenef3, dTotalValorEntBenef3, dTotalQuantSaiBenef3, dTotalValorSaiBenef3, dTotalQuantEntConsig, dTotalValorEntConsig, dTotalQuantSaiConsig, dTotalValorSaiConsig, dTotalQuantEntDemo, dTotalValorEntDemo, dTotalQuantSaiDemo, dTotalValorSaiDemo, dTotalQuantEntConserto, dTotalValorEntConserto, dTotalQuantSaiConserto, dTotalValorSaiConserto, dTotalQuantEntOutras, dTotalValorEntOutras, dTotalQuantSaiOutras, dTotalValorSaiOutras, dTotalQuantEntBenef, dTotalValorEntBenef, dTotalQuantSaiBenef, dTotalValorSaiBenef, dTotalQuantVendConsig3, dTotalValorVendConsig3, _
                                        dTotalQuantEntRecIndl, dTotalValorEntRecIndl, dTotalQuantSaiRecIndl, dTotalValorSaiRecIndl)
            If lErro <> AD_SQL_SUCESSO Then Error 999
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldDiaEst_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SldDiaEst_Testa_Integridades2:

    SldDiaEst_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149904)
     
    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldDiaEstAlm_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iAlmoxarifado As Integer
Dim sProduto As String
Dim dtData As Date
Dim dQuantEntrada As Double, dQuantSaida As Double, dQuantCons As Double, dQuantVend As Double, dValorEntrada As Double, dValorSaida As Double, dQuantComp As Double, dValorComp As Double, dValorVend As Double, dValorCons As Double
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean

On Error GoTo Erro_SldDiaEstAlm_Testa_Integridades2
    
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 999
    
     For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
        
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Almoxarifado, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons FROM SldDiaEstAlm ORDER BY Almoxarifado, Produto", 0, iAlmoxarifado, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons)
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Almoxarifado, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons FROM SldDiaEstAlm WHERE Produto >= ? AND Produto <= ? AND Data >= ? AND Data <= ? ORDER BY Almoxarifado, Produto", _
        0, iAlmoxarifado, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons, sProdutoInicial, sProdutoFinal, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
        
        bMudou = False
        
        dTotalQuantEntrada = 0
        dTotalQuantSaida = 0
        dTotalQuantCons = 0
        dTotalQuantVend = 0
        dTotalValorEntrada = 0
        dTotalValorSaida = 0
        dTotalQuantComp = 0
        dTotalValorComp = 0
        dTotalValorVend = 0
        dTotalValorCons = 0
        
        sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)

        'Correção 13/03- Shirley
        lErro = Comando_Executar(alComando(2), "SELECT MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida, TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque,MovimentoEstoque.SiglaUM   FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos  WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.Almoxarifado = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data = ? AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0", _
        dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, iAlmoxarifado, sProduto, dtData)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        Do While lErro = SUCESSO
        
            lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
            If lErro <> SUCESSO Then Error 999
        
            dQuantidadeMovEst = dQuantidadeMovEst * dFator
            
            If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Then
                dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                dTotalValorSaida = dTotalValorSaida + dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp - dCustoMovEst
            End If
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
        Loop
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntrada - dQuantEntrada) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Entrada"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm = " & dQuantEntrada & " Quantidade MovEst = " & dTotalQuantEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntrada - dValorEntrada) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Entrada"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorEntrada & " Valor MovEst = " & dTotalValorEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaida - dQuantSaida) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Saida"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantSaida & " Quantidade MovEst = " & dTotalQuantSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaida - dValorSaida) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Saida"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorSaida & " Valor MovEst = " & dTotalValorSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantCons - dQuantCons) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Consumida"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantCons & " Quantidade MovEst = " & dTotalQuantCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorCons - dValorCons) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Consumido"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorCons & " Valor MovEst = " & dTotalValorCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantVend - dQuantVend) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Venda"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantVend & " Quantidade MovEst = " & dTotalQuantVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorVend - dValorVend) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Venda"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorVend & " Valor MovEst = " & dTotalValorVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantComp - dQuantComp) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Compra"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantComp & " Quantidade MovEst = " & dTotalQuantComp
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorComp - dValorComp) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Compra"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorComp & " Valor MovEst = " & dTotalValorComp
            Print #1, "--------------------------------------------------------------------------"
        End If
        
        If bMudou = True Then
        
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE SldDiaEstAlm SET QuantEntrada=?, QuantSaida=?, QuantCons=?, QuantVend=?, ValorEntrada=?, ValorSaida=?, QuantComp=?, ValorComp=?, ValorVend=?, ValorCons=?", alComando(1), _
                dTotalQuantEntrada, dTotalQuantSaida, dTotalQuantCons, dTotalQuantVend, dTotalValorEntrada, dTotalValorSaida, dTotalQuantComp, dTotalValorComp, dTotalValorVend, dTotalValorCons)
            If lErro <> AD_SQL_SUCESSO Then Error 999
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldDiaEstAlm_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SldDiaEstAlm_Testa_Integridades2:

    SldDiaEstAlm_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149905)
     
    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NotaFiscal_Testa_Integridades() As Long
'Função comentada por Leo 20/02/02

'Dim lErro As Long
'Dim alComando(1 To 6) As Long
'Dim iIndice As Integer
'
'On Error GoTo Erro_NotaFiscal_Testa_Integridades
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then Error 999
'    Next
'
'    '???? Sugestao para proxima versao
'    'Testar Integridade com:
'    '1 - TitulosPag
'    '2 - TitulosRec
'    '3 - CreditoPagForn
'    '4 - DebRecCliente
'    '5 - NFPag (CP)
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    NotaFiscal_Testa_Integridades = SUCESSO
'
'    Exit Function
'
'Erro_NotaFiscal_Testa_Integridades:
'
'    NotaFiscal_Testa_Integridades = Err
'
'    Select Case Err
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149906)
'
'    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
End Function

Function SldMesEst_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a tabela de SldMesEST.

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst As typeSldMesEst
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dSaldoQuantCusto As Double, dSaldoValorCusto As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean
Dim dTotalQuantVendConsig3 As Double, dTotalValorVendConsig3 As Double
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean
         
On Error GoTo Erro_SldMesEst_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", QuantEnt" & iIndice
        sSQL = sSQL & ", ValorEnt" & iIndice
        sSQL = sSQL & ", QuantSai" & iIndice
        sSQL = sSQL & ", ValorSai" & iIndice
        sSQL = sSQL & ", QuantCons" & iIndice
        sSQL = sSQL & ", ValorCons" & iIndice
        sSQL = sSQL & ", QuantVend" & iIndice
        sSQL = sSQL & ", ValorVend" & iIndice
        sSQL = sSQL & ", QuantComp" & iIndice
        sSQL = sSQL & ", ValorComp" & iIndice
        sSQL = sSQL & ", SaldoQuantCusto" & iIndice
        sSQL = sSQL & ", SaldoValorCusto" & iIndice
        sSQL = sSQL & ", QuantVendConsig3" & iIndice
        sSQL = sSQL & ", ValorVendConsig3" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio
    
        sSQL = sSQL & " FROM SldMesEst ORDER BY Produto "
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), tSldMesEst.adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adQuantVendConsig3(1), tSldMesEst.adValorVendConsig3(1), _
                tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), tSldMesEst.adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adQuantVendConsig3(2), tSldMesEst.adValorVendConsig3(2), _
                tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), tSldMesEst.adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adQuantVendConsig3(3), tSldMesEst.adValorVendConsig3(3), _
                tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), tSldMesEst.adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adQuantVendConsig3(4), tSldMesEst.adValorVendConsig3(4), _
                tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), tSldMesEst.adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adQuantVendConsig3(5), tSldMesEst.adValorVendConsig3(5), _
                tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), tSldMesEst.adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adQuantVendConsig3(6), tSldMesEst.adValorVendConsig3(6), _
                tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), tSldMesEst.adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adQuantVendConsig3(7), tSldMesEst.adValorVendConsig3(7), _
                tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), tSldMesEst.adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adQuantVendConsig3(8), tSldMesEst.adValorVendConsig3(8), _
                tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), tSldMesEst.adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adQuantVendConsig3(9), tSldMesEst.adValorVendConsig3(9), _
                tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), tSldMesEst.adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adQuantVendConsig3(10), tSldMesEst.adValorVendConsig3(10), _
                tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), tSldMesEst.adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adQuantVendConsig3(11), tSldMesEst.adValorVendConsig3(11), _
                tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), tSldMesEst.adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12), tSldMesEst.adSaldoQuantCusto(12), tSldMesEst.adSaldoValorCusto(12), tSldMesEst.adQuantVendConsig3(12), tSldMesEst.adValorVendConsig3(12))
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        sSQL = sSQL & " FROM SldMesEst WHERE Produto >= ? AND Produto <= ? ORDER BY Produto "
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), tSldMesEst.adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adQuantVendConsig3(1), tSldMesEst.adValorVendConsig3(1), _
                tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), tSldMesEst.adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adQuantVendConsig3(2), tSldMesEst.adValorVendConsig3(2), _
                tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), tSldMesEst.adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adQuantVendConsig3(3), tSldMesEst.adValorVendConsig3(3), _
                tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), tSldMesEst.adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adQuantVendConsig3(4), tSldMesEst.adValorVendConsig3(4), _
                tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), tSldMesEst.adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adQuantVendConsig3(5), tSldMesEst.adValorVendConsig3(5), _
                tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), tSldMesEst.adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adQuantVendConsig3(6), tSldMesEst.adValorVendConsig3(6), _
                tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), tSldMesEst.adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adQuantVendConsig3(7), tSldMesEst.adValorVendConsig3(7), _
                tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), tSldMesEst.adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adQuantVendConsig3(8), tSldMesEst.adValorVendConsig3(8), _
                tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), tSldMesEst.adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adQuantVendConsig3(9), tSldMesEst.adValorVendConsig3(9), _
                tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), tSldMesEst.adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adQuantVendConsig3(10), tSldMesEst.adValorVendConsig3(10), _
                tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), tSldMesEst.adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adQuantVendConsig3(11), tSldMesEst.adValorVendConsig3(11), _
                tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), tSldMesEst.adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12), tSldMesEst.adSaldoQuantCusto(12), tSldMesEst.adSaldoValorCusto(12), tSldMesEst.adQuantVendConsig3(12), tSldMesEst.adValorVendConsig3(12), _
                sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
        
    End If 'modificado por Leo Final
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
    
            'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
            
            'Se o período estiver de acordo
            If bPassou = False Then
        
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        
                'Correção 13/03- Shirley
                lErro = Comando_Executar(alComando(2), "SELECT  TiposMovimentoEstoque.AtualizaVendaConsig3, TiposMovimentoEstoque.AtualizaSaldoCusto, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida, TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque,MovimentoEstoque.SiglaUM FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ?  AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0", _
                tTiposMovimentoEstoque.iAtualizaVendaConsig3, tTiposMovimentoEstoque.iAtualizaSaldoCusto, dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal)
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Then
                        dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                        dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                        dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                        dTotalValorSaida = dTotalValorSaida + dCustoMovEst
                    End If
                
                    If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                        dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                        dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                        dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                        dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                        dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                        dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp - dCustoMovEst
                    End If
                    
                    'Daniel
                    If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Or tTiposMovimentoEstoque.iCodigo = MOV_EST_AJUSTE_CUSTO_STD_NOSSO Then
                        If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                            dSaldoQuantCusto = dSaldoQuantCusto + dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto + dCustoMovEst
                        ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                            dSaldoQuantCusto = dSaldoQuantCusto - dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto - dCustoMovEst
                        End If
                    End If
                
                    If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                        If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                            dSaldoQuantCusto = dSaldoQuantCusto - dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto - dCustoMovEst
                        ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                            dSaldoQuantCusto = dSaldoQuantCusto + dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto + dCustoMovEst
                        End If
                    End If
                
                    If tTiposMovimentoEstoque.iAtualizaVendaConsig3 = TIPOMOV_EST_ADICIONAVENDACONSIG3 Then
                        dTotalQuantVendConsig3 = dTotalQuantVendConsig3 + dQuantidadeMovEst
                        dTotalValorVendConsig3 = dTotalValorVendConsig3 + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_SUBTRAIVENDACONSIG3 Then
                        dTotalQuantVendConsig3 = dTotalQuantVendConsig3 - dQuantidadeMovEst
                        dTotalValorVendConsig3 = dTotalValorVendConsig3 - dCustoMovEst
                    End If
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                'Teste a Ser Feito
                If Abs(dTotalQuantEntrada - tSldMesEst.adQuantEnt(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantEnt(iMes) & " Quantidade MovEst = " & dTotalQuantEntrada
                    Print #1, "--------------------------------------------------------------------------"
                               
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorEntrada - tSldMesEst.adValorEnt(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorEnt(iMes) & " Valor MovEst = " & dTotalValorEntrada
                    Print #1, "--------------------------------------------------------------------------"
                    
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantSaida - tSldMesEst.adQuantSai(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Saida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantSai(iMes) & " Quantidade MovEst = " & dTotalQuantSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorSaida - tSldMesEst.adValorSai(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Saida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorSai(iMes) & " Valor MovEst = " & dTotalValorSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantCons - tSldMesEst.adQuantCons(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Consumida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantCons(iMes) & " Quantidade MovEst = " & dTotalQuantCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorCons - tSldMesEst.adValorCons(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Consumido"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorCons(iMes) & " Valor MovEst = " & dTotalValorCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantVend - tSldMesEst.adQuantVend(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Venda"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantVend(iMes) & " Quantidade MovEst = " & dTotalQuantVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorVend - tSldMesEst.adValorVend(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Venda"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorVend(iMes) & " Valor MovEst = " & dTotalValorVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantComp - tSldMesEst.adQuantComp(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Compra"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantComp(iMes) & " Quantidade MovEst = " & dTotalQuantComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorComp - tSldMesEst.adValorComp(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Compra"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorComp(iMes) & " Valor MovEst = " & dTotalValorComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                
                'Teste a Ser Feito
                If Abs(dSaldoQuantCusto - tSldMesEst.adSaldoQuantCusto(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Custo"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adSaldoQuantCusto(iMes) & " Quantidade MovEst = " & dSaldoQuantCusto
                    Print #1, "--------------------------------------------------------------------------"
                               
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dSaldoValorCusto - tSldMesEst.adSaldoValorCusto(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Custo"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adSaldoValorCusto(iMes) & " Valor MovEst = " & dSaldoValorCusto
                    Print #1, "--------------------------------------------------------------------------"
                    
                    bMudou = True
                    
                End If
                '*/
                
                'Teste a Ser Feito
                If Abs(dTotalQuantVendConsig3 - tSldMesEst.adQuantVendConsig3(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Venda Consig3. Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantVendConsig3(iMes) & " Quantidade MovEst = " & dTotalQuantVendConsig3
                    Print #1, "--------------------------------------------------------------------------"
                               
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorVendConsig3 - tSldMesEst.adValorVendConsig3(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Venda Consig3. Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorVendConsig3(iMes) & " Valor MovEst = " & dTotalValorVendConsig3
                    Print #1, "--------------------------------------------------------------------------"
                    
                    bMudou = True
                    
                End If
                
                'Trecho inserido por Leo em 18/02/02
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEst SET QuantEnt" & iMes & " = ?, ValorEnt" & iMes & " = ?, QuantSai" & iMes & " = ?, ValorSai" & iMes & " = ?, QuantCons" & iMes & " = ?, ValorCons" & iMes & " = ?, QuantVend" & iMes & " = ?, ValorVend" & iMes & " = ?, QuantComp" & iMes & " = ?, ValorComp" & iMes & " = ?, SaldoQuantCusto" & iMes & " = ?, SaldoValorCusto" & iMes & " = ?, QuantVendConsig3" & iMes & " =?, ValorVendConsig3" & iMes & " =?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, _
                    alComando(1), dTotalQuantEntrada, dTotalValorEntrada, dTotalQuantSaida, dTotalValorSaida, dTotalQuantCons, dTotalValorCons, dTotalQuantVend, dTotalValorVend, dTotalQuantComp, dTotalValorComp, dSaldoQuantCusto, dSaldoValorCusto, dTotalQuantVendConsig3, dTotalValorVendConsig3)
                    If lErro <> SUCESSO Then Error 999
                                
                End If
                         
                dTotalQuantEntrada = 0
                dTotalQuantSaida = 0
                dTotalQuantCons = 0
                dTotalQuantVend = 0
                dTotalValorEntrada = 0
                dTotalValorSaida = 0
                dTotalQuantComp = 0
                dTotalValorComp = 0
                dTotalValorVend = 0
                dTotalValorCons = 0
                dSaldoQuantCusto = 0
                dSaldoValorCusto = 0
                dTotalQuantVendConsig3 = 0
                dTotalValorVendConsig3 = 0
        
            End If
        
        bPassou = False
        
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEst_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEst_Testa_Integridades:

    SldMesEst_Testa_Integridades = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149907)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldMesEstAlm_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iAlmoxarifado As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst As typeSldMesEst
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim adValorCons(1 To 12) As Double
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

On Error GoTo Erro_SldMesEstAlm_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT Almoxarifado, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", QuantEnt" & iIndice
        sSQL = sSQL & ", ValorEnt" & iIndice
        sSQL = sSQL & ", QuantSai" & iIndice
        sSQL = sSQL & ", ValorSai" & iIndice
        sSQL = sSQL & ", QuantCons" & iIndice
        sSQL = sSQL & ", ValorCons" & iIndice
        sSQL = sSQL & ", QuantVend" & iIndice
        sSQL = sSQL & ", ValorVend" & iIndice
        sSQL = sSQL & ", QuantComp" & iIndice
        sSQL = sSQL & ", ValorComp" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio
        
        sSQL = sSQL & " FROM SldMesEstAlm ORDER BY Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iAlmoxarifado, iAno, sProduto, tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), _
        tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), _
        tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), _
        tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12))
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        sSQL = sSQL & " FROM SldMesEstAlm WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iAlmoxarifado, iAno, sProduto, tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), _
        tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), _
        tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), _
        tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12), _
        sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
        
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
    
             'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
    
            'Se o período estiver de acordo
            If bPassou = False Then
        
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
    
                'Correção 13/03- Shirley
                lErro = Comando_Executar(alComando(2), "SELECT MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida, TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque,MovimentoEstoque.SiglaUM FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.Almoxarifado = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ? AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0", _
                dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, iAlmoxarifado, sProduto, dtDataInicial, dtDataFinal)
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Then
                        dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                        dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                        dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                        dTotalValorSaida = dTotalValorSaida + dCustoMovEst
                    End If
                
                    If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                        dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                        dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                        dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                        dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                        dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                        dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp - dCustoMovEst
                    End If
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                'Teste a Ser Feito
                If Abs(dTotalQuantEntrada - tSldMesEst.adQuantEnt(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Entrada"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantEnt(iMes) & " Quantidade MovEst = " & dTotalQuantEntrada
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorEntrada - tSldMesEst.adValorEnt(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Entrada"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorEnt(iMes) & " Valor MovEst = " & dTotalValorEntrada
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantSaida - tSldMesEst.adQuantSai(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Saida"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantSai(iMes) & " Quantidade MovEst = " & dTotalQuantSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorSaida - tSldMesEst.adValorSai(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Saida"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorSai(iMes) & " Valor MovEst = " & dTotalValorSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantCons - tSldMesEst.adQuantCons(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Consumida"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantCons(iMes) & " Quantidade MovEst = " & dTotalQuantCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorCons - adValorCons(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Consumido"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & adValorCons(iMes) & " Valor MovEst = " & dTotalValorCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantVend - tSldMesEst.adQuantVend(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Venda"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantVend(iMes) & " Quantidade MovEst = " & dTotalQuantVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorVend - tSldMesEst.adValorVend(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Venda"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorVend(iMes) & " Valor MovEst = " & dTotalValorVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantComp - tSldMesEst.adQuantComp(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Compra"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantComp(iMes) & " Quantidade MovEst = " & dTotalQuantComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorComp - tSldMesEst.adValorComp(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Compra"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorComp(iMes) & " Valor MovEst = " & dTotalValorComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEstAlm SET QuantEnt" & iMes & " = ?, ValorEnt" & iMes & " = ?, QuantSai" & iMes & " = ?, ValorSai" & iMes & " = ?, QuantCons" & iMes & " = ?, ValorCons" & iMes & " = ?, QuantVend" & iMes & " = ?, ValorVend" & iMes & " = ?, QuantComp" & iMes & " = ?, ValorComp" & iMes & " = ?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, _
                    alComando(1), dTotalQuantEntrada, dTotalValorEntrada, dTotalQuantSaida, dTotalValorSaida, dTotalQuantCons, dTotalValorCons, dTotalQuantVend, dTotalValorVend, dTotalQuantComp, dTotalValorComp)
                    If lErro <> SUCESSO Then Error 999
                    
                End If
                
                dTotalQuantEntrada = 0
                dTotalQuantSaida = 0
                dTotalQuantCons = 0
                dTotalQuantVend = 0
                dTotalValorEntrada = 0
                dTotalValorSaida = 0
                dTotalQuantComp = 0
                dTotalValorComp = 0
                dTotalValorVend = 0
                dTotalValorCons = 0
            
            End If

            bPassou = False

        Next

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEstAlm_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEstAlm_Testa_Integridades:

    SldMesEstAlm_Testa_Integridades = Err

    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149908)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function Estoque_Produto_Testa_Integridade(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String)

Dim lErro As Long
Dim alComando(1 To 6) As Long
Dim tEstoqueProduto As typeEstoqueProduto
Dim dQuantidadeTotal As Double
Dim dQuantidadePV As Double
Dim dQuantidadeReserva As Double
Dim lPedido As Long
Dim iFilialEmpresa As Integer
Dim iIndice As Integer, lTransacao As Long
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double, sProduto As String

On Error GoTo Erro_Estoque_Produto_Testa_Integridade
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    tEstoqueProduto.sProduto = String(STRING_PRODUTO, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
        
        lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantReservada, Produto, Almoxarifado FROM EstoqueProduto ORDER BY Produto", 0, tEstoqueProduto.dQuantReservada, tEstoqueProduto.sProduto, tEstoqueProduto.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    Else
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantReservada, Produto, Almoxarifado FROM EstoqueProduto WHERE Produto >= ? AND Produto <= ? ORDER BY Produto", 0, _
        tEstoqueProduto.dQuantReservada, tEstoqueProduto.sProduto, tEstoqueProduto.iAlmoxarifado, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
        
        lErro = Comando_Executar(alComando(2), "SELECT SUM(Quantidade) FROM Reserva WHERE Produto = ? AND Almoxarifado = ? ", dQuantidadeTotal, tEstoqueProduto.sProduto, tEstoqueProduto.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        'Teste a Ser Feito
        If tEstoqueProduto.dQuantReservada <> dQuantidadeTotal Then
            
            Print #1, "EstoqueProduto x Reserva"
            Print #1, "Produto = " & tEstoqueProduto.sProduto
            Print #1, "Quantidade Reserva Estoque Produto = " & tEstoqueProduto.dQuantReservada & " Quantidade reserva = " & dQuantidadeTotal
            Print #1, "--------------------------------------------------------------------------"
            
            'Incluido por leo em 18/02/02
            lErro = Comando_ExecutarPos(alComando(6), "UPDATE EstoqueProduto SET QuantReservada = ?", alComando(1), dQuantidadeTotal)
            If lErro <> SUCESSO Then Error 999
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
    
    sProduto = String(STRING_PRODUTO, 0)
    sSiglaUMMov = String(STRING_UM_SIGLA, 0)
    sSiglaUMEst = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(3), "SELECT ItensPedidoDeVenda.QuantReservada, ItensPedidoDeVenda.CodPedido, ItensPedidoDeVenda.FilialEmpresa, ItensPedidoDeVenda.Produto, ItensPedidoDeVenda.UnidadeMed, Produtos.SiglaUMEstoque, Produtos.ClasseUM FROM ItensPedidoDeVenda, Produtos WHERE pRODUTOS.CODIGO = ItensPedidoDeVenda.Produto ORDER BY ItensPedidoDeVenda.CodPedido, ItensPedidoDeVenda.FilialEmpresa", dQuantidadePV, lPedido, iFilialEmpresa, sProduto, sSiglaUMMov, sSiglaUMEst, iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(4), "SELECT SUM(Quantidade) FROM Reserva WHERE FilialEmpresa = ? AND DocOrigem = ? AND Produto = ? AND TipoDoc = 1", dQuantidadeReserva, iFilialEmpresa, lPedido, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
        If lErro <> SUCESSO Then Error 999
        
        dQuantidadePV = dQuantidadePV * dFator
        
        'Teste a Ser Feito
        If dQuantidadePV <> dQuantidadeReserva Then

            Print #1, "Pedido de Venda x Reserva"
            Print #1, "Pedido = " & lPedido & "FilialEmpresa = "; iFilialEmpresa
            Print #1, "Quantidade Reserva PV = " & dQuantidadePV & " Quantidade reserva = " & dQuantidadeReserva
            Print #1, "--------------------------------------------------------------------------"

            'Incluido por leo em 18/02/02
            lErro = Comando_Executar(alComando(5), "UPDATE ItensPedidoDeVenda SET QuantReservada = ? WHERE FilialEmpresa = ? AND CodPedido = ? AND Produto = ?", dQuantidadeReserva, iFilialEmpresa, lPedido, sProduto)
            If lErro <> SUCESSO Then Error 999
        
        End If

        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Estoque_Produto_Testa_Integridade = SUCESSO
    
    Exit Function
         
Erro_Estoque_Produto_Testa_Integridade:

    Estoque_Produto_Testa_Integridade = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149909)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'=====================================================================
'=====================================================================

'Incluida por leo em 21/02/02
Private Function Processa_Bloqueio_DiasAtraso(ByVal objBloqueioPV As ClassBloqueioPV) As Long
'trata os bloqueios de crédito por dia de atraso

Dim lErro As Long
Dim objLiberacaoCredito As New ClassLiberacaoCredito

On Error GoTo Erro_Processa_Bloqueio_DiasAtraso

    objLiberacaoCredito.sCodUsuario = objBloqueioPV.sCodUsuario
    
    'verificar se o usuário tem autorizacao para liberar o bloqueio
    lErro = CF("LiberacaoCredito_Le", objLiberacaoCredito)
    If lErro <> SUCESSO And lErro <> 36968 Then gError 94331
    
    'se não foi encontrado autorização para o usuario liberar o bloqueio
    If lErro = 36968 Then gError 94332
    
    Processa_Bloqueio_DiasAtraso = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_DiasAtraso:

    Processa_Bloqueio_DiasAtraso = gErr
    
    Select Case gErr

        Case 94331
        
        Case 94332
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAODIASATRASO_INEXISTENTE", gErr, objLiberacaoCredito.sCodUsuario, objBloqueioPV.lPedidoDeVendas)
             
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149910)

    End Select

    Exit Function

End Function

'Incluida por leo em 22/02/02
Private Function PedidoDeVenda_VerificaAtraso2(objPedidoVenda As ClassPedidoDeVenda) As Long
'Verifica no BD se existe parcelasrec aberta com vctoreal <= (gdtDataHoje - gobjCRFAT.iDiasBloqueioAtraso)

Dim lErro As Long
Dim lComando As Long
Dim dtDataLimite As Date
Dim lCliente As Long

On Error GoTo Erro_PedidoDeVenda_VerificaAtraso2

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94335
    
    'Verifica a data limite p/ atraso de uma parcela antes do bloqueio por atraso. Retorna DATA_NULA caso a empresa não use o Bloqueio por atraso.
    lErro = CF("Verifica_DataLimite_Bloqueio_Atraso", dtDataLimite)
    If lErro <> SUCESSO Then gError 94389
    
    If dtDataLimite <> DATA_NULA Then
    
        'Seleciona parcelasrec do Cliente recebido em objPedidoVenda que esteja em atraso de acordo com os dias máximos p/ atraso definido p/ Bloqueios por atraso de pagamento.
        lErro = Comando_Executar(lComando, "SELECT TitulosRec.Cliente FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND ParcelasRec.DataVencimentoReal <= ? AND TitulosRec.Cliente = ?", lCliente, STATUS_EXCLUIDO, STATUS_BAIXADO, dtDataLimite, objPedidoVenda.lCliente)
        If lErro <> SUCESSO Then gError 94336
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94337
        
        'se existe pelo menos uma parcela em atraso, Erro.
        If lErro = SUCESSO Then gError 94363
    
    End If
    
    Call Comando_Fechar(lComando)
    
    PedidoDeVenda_VerificaAtraso2 = SUCESSO
     
    Exit Function
    
Erro_PedidoDeVenda_VerificaAtraso2:

    PedidoDeVenda_VerificaAtraso2 = gErr
     
    Select Case gErr
          
        Case 94389
        
        Case 94335
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)
            
        Case 94336, 94337
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)
                    
        Case 94363 'Este erro deverá ser tratado na rotina chamadora
                    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149911)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Incluida por leo em 22/02/02
Private Function PedidoVenda_Inclui_BloqueioAtraso(ByVal lPedido As Long, ByVal iFilialPedido As Integer) As Long

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim lTransacao As Long

On Error GoTo Erro_PedidoVenda_Inclui_BloqueioAtraso

    'ABre a Transacao1
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 94339 '51531

    objPedidoVenda.lCodigo = lPedido
    objPedidoVenda.iFilialEmpresa = iFilialPedido
    
    'Lê e faz o lock no Pedido de Venda passado
    lErro = CF("PedidoDeVenda_Le_ComBloqueio", objPedidoVenda)
    If lErro <> SUCESSO Then gError 94340
    
    'Insere bloqueio de Atraso no PV se tiver parcelas em atraso
    lErro = BloqueioPV_Testa_Atraso(objPedidoVenda)
    If lErro <> SUCESSO Then gError 94341

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 94342

    PedidoVenda_Inclui_BloqueioAtraso = SUCESSO

    Exit Function

Erro_PedidoVenda_Inclui_BloqueioAtraso:

    PedidoVenda_Inclui_BloqueioAtraso = gErr
    
    Select Case gErr
    
        Case 94339
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 94340, 94341
        
        Case 94342
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149912)
        
    End Select
        
    Call Transacao_Rollback
                
    Exit Function
                
End Function


'Incluida por leo em 22/02/02
Private Function BloqueioPV_Testa_Atraso(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Remove o bloqueio de atraso antigo se houver e se o cliente estiver em  atraso, Inclui no BD um novo bloqueio de atraso
'Chamada EM TRANSAÇÃO

Dim lErro As Long
Dim objBloqueioPV As New ClassBloqueioPV

On Error GoTo Erro_BloqueioPV_Testa_Atraso

    'Exclui os Bloqueios de Atraso não liberados ligados ao Pedido de Venda passado
    lErro = CF("BloqueiosPV_Exclui_Tipo", objPedidoVenda, BLOQUEIO_DIAS_ATRASO)
    If lErro <> SUCESSO Then gError 94343

    lErro = PedidoDeVenda_VerificaAtraso2(objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 94363 Then gError 94344

    'Se existe parcela em atraso do Cliente
    If lErro <> SUCESSO Then

        objBloqueioPV.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
        objBloqueioPV.lPedidoDeVendas = objPedidoVenda.lCodigo
        objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_DIAS_ATRASO
        objBloqueioPV.sCodUsuario = gsUsuario
        objBloqueioPV.sResponsavel = BLOQUEIO_AUTO_RESP
        objBloqueioPV.dtData = gdtDataHoje
        objBloqueioPV.dtDataLib = DATA_NULA

        lErro = CF("BloqueiosPV_Grava1", objPedidoVenda, objBloqueioPV)
        If lErro <> SUCESSO Then gError 94345

    End If

    BloqueioPV_Testa_Atraso = SUCESSO

    Exit Function

Erro_BloqueioPV_Testa_Atraso:

    BloqueioPV_Testa_Atraso = gErr

    Select Case gErr

        Case 94343, 94344, 94345
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149913)

    End Select

    Exit Function

End Function


'Inserida por Leo em 22/02/02
Private Function PedidoDeVenda_VerificaAtraso(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Verifica se é necessário inserir um Bloqueio por Atraso de pagamento p/ o cliente

Dim lErro As Long
Dim iAtraso As Integer

On Error GoTo Erro_PedidoDeVenda_VerificaAtraso

    'verifica se o pedido tem bloqueio por atraso aprovado
    lErro = CF("BloqueiosPV_Aprovado_Testa", objPedidoVenda, iAtraso, BLOQUEIO_DIAS_ATRASO)
    If lErro <> SUCESSO Then gError 94355

    'se não tiver atraso
    If iAtraso <> BLOQUEIO_POR_ATRASO_LIBERADO Then
    
        'Verifica o Atrasos do cliente
        lErro = PedidoDeVenda_VerificaAtraso2(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 94363 Then gError 94356
        If lErro = 94363 Then gError 94357
        
    End If

    PedidoDeVenda_VerificaAtraso = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaAtraso:

    PedidoDeVenda_VerificaAtraso = gErr

    Select Case gErr

        Case 94355, 94356
        
        Case 94357 'tratado na rotina chamadora
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149914)

    End Select

    Exit Function

End Function

'Incluida por Leo em 25/02/02
Private Function Processa_NFiscal_Atraso(ByVal objNFiscal As ClassNFiscal) As Long
'verifica se tem parcelas com dias de atraso além do limite para faturar ou não a nota fiscal.

Dim lErro As Long
Dim objLiberacaoCredito As New ClassLiberacaoCredito
Dim sCodUsuario As String
Dim bNFPedido As Boolean
Dim iAtraso As Integer
Dim iTipoCli As Integer
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim colParcRec As New Collection
Dim objCliente As New ClassCliente 'Inserido por Wagner

On Error GoTo Erro_Processa_NFiscal_Atraso

    'Verifica se NFiscal é oriunda de Pedido
    If objNFiscal.lNumPedidoVenda > 0 Then
        bNFPedido = True
    Else
        bNFPedido = False
    End If
    
    'Se for testa se Pedido tem crédito aprovado
    If bNFPedido Then
    
        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido

        'verifica se o pedido tem credito aprovado
        lErro = CF("BloqueiosPV_Aprovado_Testa", objPedidoVenda, iAtraso, BLOQUEIO_DIAS_ATRASO)
        If lErro <> SUCESSO Then gError 94365 '25740

    End If
    
    'Inserido por Wagner
    '##################
    objCliente.lCodigo = objNFiscal.lCliente
    'le os dados do cliente
    lErro = CF("Cliente_Le", objCliente)
    If lErro <> SUCESSO And lErro <> 12293 Then gError 129151
    
    If objCliente.iAtivo <> CLIENTE_ATIVO Then gError 129152
    '##################
    
    'esse trecho estava dando problema de limite de credito
    'estava aparecendo a tela q nao deveria...
    'tulio160103
    If gobjCRFAT.iCreditoVerificaLimite = VERIFICAR_LIMITE_CREDITO Then
            
        'se NF não for oriunda de PV ou se crédito não está liberado
        If (Not bNFPedido) Or iAtraso <> BLOQUEIOPV_LIBERADO Then
                            
            'verifica se tem parcela em atraso que justifique um bloqueio
            lErro = CF("ParcelasRec_Atraso_Le", colParcRec, objNFiscal.lCliente)
            If lErro <> SUCESSO And lErro <> 94405 Then gError 94371
            
            'se há parcelas em atraso dentro do limite para bloqueio por atraso
            If colParcRec.Count <> 0 Then
            
                'se um usuário não autorizou o credito ==> erro
                If Len(objNFiscal.sCodUsuario) = 0 Then gError 94370 '44488
                        
                objLiberacaoCredito.sCodUsuario = objNFiscal.sCodUsuario
                        
                'verificar se o usuário tem autorizacao para o Bloqueio
                '(os usuários que possuem autorização p/ liberar bloqueios por falta de pagamento são os mesmos que podem autorizar crédito)
                lErro = CF("LiberacaoCredito_Lock", objLiberacaoCredito)
                If lErro <> SUCESSO And lErro <> 44479 Then gError 94371 '44489
                        
                'se não foi encontrado autorização para o usuario liberar credito
                If lErro = 44479 Then gError 94372 '44490
                    
            End If
            
        End If
            
    End If
            
    Processa_NFiscal_Atraso = SUCESSO
    
    Exit Function
    
Erro_Processa_NFiscal_Atraso:

    Processa_NFiscal_Atraso = gErr
    
    Select Case gErr

        Case 94363, 94364
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94370
           lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_CREDITO", gErr, objNFiscal.lCliente)

        Case 94365, 94371

        Case 94372
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE", gErr, objLiberacaoCredito.sCodUsuario)
        
        Case 129151
        
        Case 129152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_INATIVO", gErr, objNFiscal.lCliente)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149915)

    End Select

    Exit Function

End Function

Function SldMesEst1_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a tabela de SldMesEst1.

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst1 As typeSldMesEst1
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dSaldoQuantCusto As Double, dSaldoValorCusto As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean

Dim dTotalSaldoQuantConsig3 As Double, dTotalSaldoValorConsig3 As Double
Dim dTotalSaldoQuantDemo3 As Double, dTotalSaldoValorDemo3 As Double
Dim dTotalSaldoQuantConserto3 As Double, dTotalSaldoValorConserto3 As Double
Dim dTotalSaldoQuantOutros3 As Double, dTotalSaldoValorOutros3 As Double
Dim dTotalSaldoQuantBenef3 As Double, dTotalSaldoValorBenef3 As Double
Dim sSelecaoSQL As String
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

On Error GoTo Erro_SldMesEst1_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", SaldoQuantConsig3" & iIndice
        sSQL = sSQL & ", SaldoValorConsig3" & iIndice
        sSQL = sSQL & ", SaldoQuantDemo3" & iIndice
        sSQL = sSQL & ", SaldoValorDemo3" & iIndice
        sSQL = sSQL & ", SaldoQuantConserto3" & iIndice
        sSQL = sSQL & ", SaldoValorConserto3" & iIndice
        sSQL = sSQL & ", SaldoQuantOutros3" & iIndice
        sSQL = sSQL & ", SaldoValorOutros3" & iIndice
        sSQL = sSQL & ", SaldoQuantBenef3" & iIndice
        sSQL = sSQL & ", SaldoValorBenef3" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio

        sSQL = sSQL & " FROM SldMesEst1 ORDER BY Produto"
        
        With tSldMesEst1
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig3(1), .adSaldoValorConsig3(1), .adSaldoQuantDemo3(1), .adSaldoValorDemo3(1), .adSaldoQuantConserto3(1), .adSaldoValorConserto3(1), .adSaldoQuantOutros3(1), .adSaldoValorOutros3(1), .adSaldoQuantBenef3(1), .adSaldoValorBenef3(1), _
                    .adSaldoQuantConsig3(2), .adSaldoValorConsig3(2), .adSaldoQuantDemo3(2), .adSaldoValorDemo3(2), .adSaldoQuantConserto3(2), .adSaldoValorConserto3(2), .adSaldoQuantOutros3(2), .adSaldoValorOutros3(2), .adSaldoQuantBenef3(2), .adSaldoValorBenef3(2), _
                    .adSaldoQuantConsig3(3), .adSaldoValorConsig3(3), .adSaldoQuantDemo3(3), .adSaldoValorDemo3(3), .adSaldoQuantConserto3(3), .adSaldoValorConserto3(3), .adSaldoQuantOutros3(3), .adSaldoValorOutros3(3), .adSaldoQuantBenef3(3), .adSaldoValorBenef3(3), _
                    .adSaldoQuantConsig3(4), .adSaldoValorConsig3(4), .adSaldoQuantDemo3(4), .adSaldoValorDemo3(4), .adSaldoQuantConserto3(4), .adSaldoValorConserto3(4), .adSaldoQuantOutros3(4), .adSaldoValorOutros3(4), .adSaldoQuantBenef3(4), .adSaldoValorBenef3(4), _
                    .adSaldoQuantConsig3(5), .adSaldoValorConsig3(5), .adSaldoQuantDemo3(5), .adSaldoValorDemo3(5), .adSaldoQuantConserto3(5), .adSaldoValorConserto3(5), .adSaldoQuantOutros3(5), .adSaldoValorOutros3(5), .adSaldoQuantBenef3(5), .adSaldoValorBenef3(5), _
                    .adSaldoQuantConsig3(6), .adSaldoValorConsig3(6), .adSaldoQuantDemo3(6), .adSaldoValorDemo3(6), .adSaldoQuantConserto3(6), .adSaldoValorConserto3(6), .adSaldoQuantOutros3(6), .adSaldoValorOutros3(6), .adSaldoQuantBenef3(6), .adSaldoValorBenef3(6), _
                    .adSaldoQuantConsig3(7), .adSaldoValorConsig3(7), .adSaldoQuantDemo3(7), .adSaldoValorDemo3(7), .adSaldoQuantConserto3(7), .adSaldoValorConserto3(7), .adSaldoQuantOutros3(7), .adSaldoValorOutros3(7), .adSaldoQuantBenef3(7), .adSaldoValorBenef3(7), _
                    .adSaldoQuantConsig3(8), .adSaldoValorConsig3(8), .adSaldoQuantDemo3(8), .adSaldoValorDemo3(8), .adSaldoQuantConserto3(8), .adSaldoValorConserto3(8), .adSaldoQuantOutros3(8), .adSaldoValorOutros3(8), .adSaldoQuantBenef3(8), .adSaldoValorBenef3(8), _
                    .adSaldoQuantConsig3(9), .adSaldoValorConsig3(9), .adSaldoQuantDemo3(9), .adSaldoValorDemo3(9), .adSaldoQuantConserto3(9), .adSaldoValorConserto3(9), .adSaldoQuantOutros3(9), .adSaldoValorOutros3(9), .adSaldoQuantBenef3(9), .adSaldoValorBenef3(9), _
                    .adSaldoQuantConsig3(10), .adSaldoValorConsig3(10), .adSaldoQuantDemo3(10), .adSaldoValorDemo3(10), .adSaldoQuantConserto3(10), .adSaldoValorConserto3(10), .adSaldoQuantOutros3(10), .adSaldoValorOutros3(10), .adSaldoQuantBenef3(10), .adSaldoValorBenef3(10), _
                    .adSaldoQuantConsig3(11), .adSaldoValorConsig3(11), .adSaldoQuantDemo3(11), .adSaldoValorDemo3(11), .adSaldoQuantConserto3(11), .adSaldoValorConserto3(11), .adSaldoQuantOutros3(11), .adSaldoValorOutros3(11), .adSaldoQuantBenef3(11), .adSaldoValorBenef3(11), _
                    .adSaldoQuantConsig3(12), .adSaldoValorConsig3(12), .adSaldoQuantDemo3(12), .adSaldoValorDemo3(12), .adSaldoQuantConserto3(12), .adSaldoValorConserto3(12), .adSaldoQuantOutros3(12), .adSaldoValorOutros3(12), .adSaldoQuantBenef3(12), .adSaldoValorBenef3(12))
                    
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        sSQL = sSQL & " FROM SldMesEst1 WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
        
        With tSldMesEst1
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig3(1), .adSaldoValorConsig3(1), .adSaldoQuantDemo3(1), .adSaldoValorDemo3(1), .adSaldoQuantConserto3(1), .adSaldoValorConserto3(1), .adSaldoQuantOutros3(1), .adSaldoValorOutros3(1), .adSaldoQuantBenef3(1), .adSaldoValorBenef3(1), _
                    .adSaldoQuantConsig3(2), .adSaldoValorConsig3(2), .adSaldoQuantDemo3(2), .adSaldoValorDemo3(2), .adSaldoQuantConserto3(2), .adSaldoValorConserto3(2), .adSaldoQuantOutros3(2), .adSaldoValorOutros3(2), .adSaldoQuantBenef3(2), .adSaldoValorBenef3(2), _
                    .adSaldoQuantConsig3(3), .adSaldoValorConsig3(3), .adSaldoQuantDemo3(3), .adSaldoValorDemo3(3), .adSaldoQuantConserto3(3), .adSaldoValorConserto3(3), .adSaldoQuantOutros3(3), .adSaldoValorOutros3(3), .adSaldoQuantBenef3(3), .adSaldoValorBenef3(3), _
                    .adSaldoQuantConsig3(4), .adSaldoValorConsig3(4), .adSaldoQuantDemo3(4), .adSaldoValorDemo3(4), .adSaldoQuantConserto3(4), .adSaldoValorConserto3(4), .adSaldoQuantOutros3(4), .adSaldoValorOutros3(4), .adSaldoQuantBenef3(4), .adSaldoValorBenef3(4), _
                    .adSaldoQuantConsig3(5), .adSaldoValorConsig3(5), .adSaldoQuantDemo3(5), .adSaldoValorDemo3(5), .adSaldoQuantConserto3(5), .adSaldoValorConserto3(5), .adSaldoQuantOutros3(5), .adSaldoValorOutros3(5), .adSaldoQuantBenef3(5), .adSaldoValorBenef3(5), _
                    .adSaldoQuantConsig3(6), .adSaldoValorConsig3(6), .adSaldoQuantDemo3(6), .adSaldoValorDemo3(6), .adSaldoQuantConserto3(6), .adSaldoValorConserto3(6), .adSaldoQuantOutros3(6), .adSaldoValorOutros3(6), .adSaldoQuantBenef3(6), .adSaldoValorBenef3(6), _
                    .adSaldoQuantConsig3(7), .adSaldoValorConsig3(7), .adSaldoQuantDemo3(7), .adSaldoValorDemo3(7), .adSaldoQuantConserto3(7), .adSaldoValorConserto3(7), .adSaldoQuantOutros3(7), .adSaldoValorOutros3(7), .adSaldoQuantBenef3(7), .adSaldoValorBenef3(7), _
                    .adSaldoQuantConsig3(8), .adSaldoValorConsig3(8), .adSaldoQuantDemo3(8), .adSaldoValorDemo3(8), .adSaldoQuantConserto3(8), .adSaldoValorConserto3(8), .adSaldoQuantOutros3(8), .adSaldoValorOutros3(8), .adSaldoQuantBenef3(8), .adSaldoValorBenef3(8), _
                    .adSaldoQuantConsig3(9), .adSaldoValorConsig3(9), .adSaldoQuantDemo3(9), .adSaldoValorDemo3(9), .adSaldoQuantConserto3(9), .adSaldoValorConserto3(9), .adSaldoQuantOutros3(9), .adSaldoValorOutros3(9), .adSaldoQuantBenef3(9), .adSaldoValorBenef3(9), _
                    .adSaldoQuantConsig3(10), .adSaldoValorConsig3(10), .adSaldoQuantDemo3(10), .adSaldoValorDemo3(10), .adSaldoQuantConserto3(10), .adSaldoValorConserto3(10), .adSaldoQuantOutros3(10), .adSaldoValorOutros3(10), .adSaldoQuantBenef3(10), .adSaldoValorBenef3(10), _
                    .adSaldoQuantConsig3(11), .adSaldoValorConsig3(11), .adSaldoQuantDemo3(11), .adSaldoValorDemo3(11), .adSaldoQuantConserto3(11), .adSaldoValorConserto3(11), .adSaldoQuantOutros3(11), .adSaldoValorOutros3(11), .adSaldoQuantBenef3(11), .adSaldoValorBenef3(11), _
                    .adSaldoQuantConsig3(12), .adSaldoValorConsig3(12), .adSaldoQuantDemo3(12), .adSaldoValorDemo3(12), .adSaldoQuantConserto3(12), .adSaldoValorConserto3(12), .adSaldoQuantOutros3(12), .adSaldoValorOutros3(12), .adSaldoQuantBenef3(12), .adSaldoValorBenef3(12), _
                    sProdutoInicial, sProdutoFinal)
            If lErro <> AD_SQL_SUCESSO Then Error 999
        
        End With
        
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
                    
    End If 'modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
    
            'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
    
            'Se o período estiver de acordo
            If bPassou = False Then
        
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        
                sSelecaoSQL = "SELECT TiposMovimentoEstoque.AtualizaConsig, TiposMovimentoEstoque.AtualizaDemo, " & _
                              "TiposMovimentoEstoque.AtualizaConserto, TiposMovimentoEstoque.AtualizaOutras, " & _
                              "TiposMovimentoEstoque.AtualizaBenef, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, " & _
                              "Produtos.ClasseUM, Produtos.SiglaUMEstoque, MovimentoEstoque.SiglaUM " & _
                              "FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE TiposMovimentoEstoque.ProdutodeTerc =? AND " & _
                              "MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ?  AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0"
                
                With tTiposMovimentoEstoque
                    lErro = Comando_Executar(alComando(2), sSelecaoSQL, .iAtualizaConsig, .iAtualizaDemo, .iAtualizaConserto, .iAtualizaOutras, .iAtualizaBenef, _
                            dQuantidadeMovEst, dCustoMovEst, iClasseUM, sSiglaUMEst, sSiglaUMMov, TIPOMOV_EST_PRODUTODETERCEIROS, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal)
                End With
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    With tTiposMovimentoEstoque
                        
                        If .iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                            dTotalSaldoQuantConsig3 = dTotalSaldoQuantConsig3 + dQuantidadeMovEst
                            dTotalSaldoValorConsig3 = dTotalSaldoValorConsig3 + dCustoMovEst
                        ElseIf .iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                            dTotalSaldoQuantConsig3 = dTotalSaldoQuantConsig3 - dQuantidadeMovEst
                            dTotalSaldoValorConsig3 = dTotalSaldoValorConsig3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                            dTotalSaldoQuantDemo3 = dTotalSaldoQuantDemo3 + dQuantidadeMovEst
                            dTotalSaldoValorDemo3 = dTotalSaldoValorDemo3 + dCustoMovEst
                        ElseIf .iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                            dTotalSaldoQuantDemo3 = dTotalSaldoQuantDemo3 - dQuantidadeMovEst
                            dTotalSaldoValorDemo3 = dTotalSaldoValorDemo3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                            dTotalSaldoQuantConserto3 = dTotalSaldoQuantConserto3 + dQuantidadeMovEst
                            dTotalSaldoValorConserto3 = dTotalSaldoValorConserto3 + dCustoMovEst
                        ElseIf .iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                            dTotalSaldoQuantConserto3 = dTotalSaldoQuantConserto3 - dQuantidadeMovEst
                            dTotalSaldoValorConserto3 = dTotalSaldoValorConserto3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                            dTotalSaldoQuantOutros3 = dTotalSaldoQuantOutros3 + dQuantidadeMovEst
                            dTotalSaldoValorOutros3 = dTotalSaldoValorOutros3 + dCustoMovEst
                        ElseIf .iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                            dTotalSaldoQuantOutros3 = dTotalSaldoQuantOutros3 - dQuantidadeMovEst
                            dTotalSaldoValorOutros3 = dTotalSaldoValorOutros3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                            dTotalSaldoQuantBenef3 = dTotalSaldoQuantBenef3 + dQuantidadeMovEst
                            dTotalSaldoValorBenef3 = dTotalSaldoValorBenef3 + dCustoMovEst
                        ElseIf .iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                            dTotalSaldoQuantBenef3 = dTotalSaldoQuantBenef3 - dQuantidadeMovEst
                            dTotalSaldoValorBenef3 = dTotalSaldoValorBenef3 - dCustoMovEst
                        End If
                    
                    End With
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                With tSldMesEst1
                
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConsig3 - .adSaldoQuantConsig3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Consig3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantConsig3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConsig3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConsig3 - .adSaldoValorConsig3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Consig3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorConsig3(iMes) & " Valor MovEst = " & dTotalSaldoValorConsig3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantDemo3 - .adSaldoQuantDemo3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Demo3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantDemo3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantDemo3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorDemo3 - .adSaldoValorDemo3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Demo3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorDemo3(iMes) & " Valor MovEst = " & dTotalSaldoValorDemo3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConserto3 - .adSaldoQuantConserto3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Conserto3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantConserto3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConserto3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConserto3 - .adSaldoValorConserto3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Conserto3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorConserto3(iMes) & " Valor MovEst = " & dTotalSaldoValorConserto3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantOutros3 - .adSaldoQuantOutros3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Outros3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantOutros3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantOutros3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorOutros3 - .adSaldoValorOutros3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Outros3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorOutros3(iMes) & " Valor MovEst = " & dTotalSaldoValorOutros3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantBenef3 - .adSaldoQuantBenef3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Benef3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantBenef3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantBenef3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorBenef3 - .adSaldoValorBenef3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Benef3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorBenef3(iMes) & " Valor MovEst = " & dTotalSaldoValorBenef3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                End With
                    
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEst1 SET " & _
                            "SaldoQuantConsig3" & iMes & " = ?, SaldoValorConsig3" & iMes & " = ?, " & _
                            "SaldoQuantDemo3" & iMes & " = ?, SaldoValorDemo3" & iMes & " = ?, " & _
                            "SaldoQuantConserto3" & iMes & " = ?, SaldoValorConserto3" & iMes & " = ?, " & _
                            "SaldoQuantOutros3" & iMes & " = ?, SaldoValorOutros3" & iMes & " = ?, " & _
                            "SaldoQuantBenef3" & iMes & " = ?, SaldoValorBenef3" & iMes & " = ?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, alComando(1), _
                            dTotalSaldoQuantConsig3, dTotalSaldoValorConsig3, dTotalSaldoQuantDemo3, dTotalSaldoValorDemo3, _
                            dTotalSaldoQuantConserto3, dTotalSaldoValorConserto3, dTotalSaldoQuantOutros3, dTotalSaldoValorOutros3, _
                            dTotalSaldoQuantBenef3, dTotalSaldoValorBenef3)
                    If lErro <> SUCESSO Then Error 999
                                
                End If
                    
                dTotalSaldoQuantConsig3 = 0
                dTotalSaldoValorConsig3 = 0
                dTotalSaldoQuantDemo3 = 0
                dTotalSaldoValorDemo3 = 0
                dTotalSaldoQuantConserto3 = 0
                dTotalSaldoValorConserto3 = 0
                dTotalSaldoQuantOutros3 = 0
                dTotalSaldoValorOutros3 = 0
                dTotalSaldoQuantBenef3 = 0
                dTotalSaldoValorBenef3 = 0
                    
            End If
                                
            bPassou = False
                                
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEst1_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEst1_Testa_Integridades:

    SldMesEst1_Testa_Integridades = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149916)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldMesEst2_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a tabela de SldMesEst2.

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst2 As typeSldMesEst2
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dSaldoQuantCusto As Double, dSaldoValorCusto As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean

Dim dTotalSaldoQuantConsig As Double, dTotalSaldoValorConsig As Double
Dim dTotalSaldoQuantDemo As Double, dTotalSaldoValorDemo As Double
Dim dTotalSaldoQuantConserto As Double, dTotalSaldoValorConserto As Double
Dim dTotalSaldoQuantOutros As Double, dTotalSaldoValorOutros As Double
Dim dTotalSaldoQuantBenef As Double, dTotalSaldoValorBenef As Double
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

Dim sSelecaoSQL As String

On Error GoTo Erro_SldMesEst2_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", SaldoQuantConsig" & iIndice
        sSQL = sSQL & ", SaldoValorConsig" & iIndice
        sSQL = sSQL & ", SaldoQuantDemo" & iIndice
        sSQL = sSQL & ", SaldoValorDemo" & iIndice
        sSQL = sSQL & ", SaldoQuantConserto" & iIndice
        sSQL = sSQL & ", SaldoValorConserto" & iIndice
        sSQL = sSQL & ", SaldoQuantOutros" & iIndice
        sSQL = sSQL & ", SaldoValorOutros" & iIndice
        sSQL = sSQL & ", SaldoQuantBenef" & iIndice
        sSQL = sSQL & ", SaldoValorBenef" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio
        
        sSQL = sSQL & " FROM SldMesEst2 ORDER BY Produto"
        
        With tSldMesEst2
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig(1), .adSaldoValorConsig(1), .adSaldoQuantDemo(1), .adSaldoValorDemo(1), .adSaldoQuantConserto(1), .adSaldoValorConserto(1), .adSaldoQuantOutros(1), .adSaldoValorOutros(1), .adSaldoQuantBenef(1), .adSaldoValorBenef(1), _
                    .adSaldoQuantConsig(2), .adSaldoValorConsig(2), .adSaldoQuantDemo(2), .adSaldoValorDemo(2), .adSaldoQuantConserto(2), .adSaldoValorConserto(2), .adSaldoQuantOutros(2), .adSaldoValorOutros(2), .adSaldoQuantBenef(2), .adSaldoValorBenef(2), _
                    .adSaldoQuantConsig(3), .adSaldoValorConsig(3), .adSaldoQuantDemo(3), .adSaldoValorDemo(3), .adSaldoQuantConserto(3), .adSaldoValorConserto(3), .adSaldoQuantOutros(3), .adSaldoValorOutros(3), .adSaldoQuantBenef(3), .adSaldoValorBenef(3), _
                    .adSaldoQuantConsig(4), .adSaldoValorConsig(4), .adSaldoQuantDemo(4), .adSaldoValorDemo(4), .adSaldoQuantConserto(4), .adSaldoValorConserto(4), .adSaldoQuantOutros(4), .adSaldoValorOutros(4), .adSaldoQuantBenef(4), .adSaldoValorBenef(4), _
                    .adSaldoQuantConsig(5), .adSaldoValorConsig(5), .adSaldoQuantDemo(5), .adSaldoValorDemo(5), .adSaldoQuantConserto(5), .adSaldoValorConserto(5), .adSaldoQuantOutros(5), .adSaldoValorOutros(5), .adSaldoQuantBenef(5), .adSaldoValorBenef(5), _
                    .adSaldoQuantConsig(6), .adSaldoValorConsig(6), .adSaldoQuantDemo(6), .adSaldoValorDemo(6), .adSaldoQuantConserto(6), .adSaldoValorConserto(6), .adSaldoQuantOutros(6), .adSaldoValorOutros(6), .adSaldoQuantBenef(6), .adSaldoValorBenef(6), _
                    .adSaldoQuantConsig(7), .adSaldoValorConsig(7), .adSaldoQuantDemo(7), .adSaldoValorDemo(7), .adSaldoQuantConserto(7), .adSaldoValorConserto(7), .adSaldoQuantOutros(7), .adSaldoValorOutros(7), .adSaldoQuantBenef(7), .adSaldoValorBenef(7), _
                    .adSaldoQuantConsig(8), .adSaldoValorConsig(8), .adSaldoQuantDemo(8), .adSaldoValorDemo(8), .adSaldoQuantConserto(8), .adSaldoValorConserto(8), .adSaldoQuantOutros(8), .adSaldoValorOutros(8), .adSaldoQuantBenef(8), .adSaldoValorBenef(8), _
                    .adSaldoQuantConsig(9), .adSaldoValorConsig(9), .adSaldoQuantDemo(9), .adSaldoValorDemo(9), .adSaldoQuantConserto(9), .adSaldoValorConserto(9), .adSaldoQuantOutros(9), .adSaldoValorOutros(9), .adSaldoQuantBenef(9), .adSaldoValorBenef(9), _
                    .adSaldoQuantConsig(10), .adSaldoValorConsig(10), .adSaldoQuantDemo(10), .adSaldoValorDemo(10), .adSaldoQuantConserto(10), .adSaldoValorConserto(10), .adSaldoQuantOutros(10), .adSaldoValorOutros(10), .adSaldoQuantBenef(10), .adSaldoValorBenef(10), _
                    .adSaldoQuantConsig(11), .adSaldoValorConsig(11), .adSaldoQuantDemo(11), .adSaldoValorDemo(11), .adSaldoQuantConserto(11), .adSaldoValorConserto(11), .adSaldoQuantOutros(11), .adSaldoValorOutros(11), .adSaldoQuantBenef(11), .adSaldoValorBenef(11), _
                    .adSaldoQuantConsig(12), .adSaldoValorConsig(12), .adSaldoQuantDemo(12), .adSaldoValorDemo(12), .adSaldoQuantConserto(12), .adSaldoValorConserto(12), .adSaldoQuantOutros(12), .adSaldoValorOutros(12), .adSaldoQuantBenef(12), .adSaldoValorBenef(12))
                    
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else

        sSQL = sSQL & " FROM SldMesEst2 WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
        
        With tSldMesEst2
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig(1), .adSaldoValorConsig(1), .adSaldoQuantDemo(1), .adSaldoValorDemo(1), .adSaldoQuantConserto(1), .adSaldoValorConserto(1), .adSaldoQuantOutros(1), .adSaldoValorOutros(1), .adSaldoQuantBenef(1), .adSaldoValorBenef(1), _
                    .adSaldoQuantConsig(2), .adSaldoValorConsig(2), .adSaldoQuantDemo(2), .adSaldoValorDemo(2), .adSaldoQuantConserto(2), .adSaldoValorConserto(2), .adSaldoQuantOutros(2), .adSaldoValorOutros(2), .adSaldoQuantBenef(2), .adSaldoValorBenef(2), _
                    .adSaldoQuantConsig(3), .adSaldoValorConsig(3), .adSaldoQuantDemo(3), .adSaldoValorDemo(3), .adSaldoQuantConserto(3), .adSaldoValorConserto(3), .adSaldoQuantOutros(3), .adSaldoValorOutros(3), .adSaldoQuantBenef(3), .adSaldoValorBenef(3), _
                    .adSaldoQuantConsig(4), .adSaldoValorConsig(4), .adSaldoQuantDemo(4), .adSaldoValorDemo(4), .adSaldoQuantConserto(4), .adSaldoValorConserto(4), .adSaldoQuantOutros(4), .adSaldoValorOutros(4), .adSaldoQuantBenef(4), .adSaldoValorBenef(4), _
                    .adSaldoQuantConsig(5), .adSaldoValorConsig(5), .adSaldoQuantDemo(5), .adSaldoValorDemo(5), .adSaldoQuantConserto(5), .adSaldoValorConserto(5), .adSaldoQuantOutros(5), .adSaldoValorOutros(5), .adSaldoQuantBenef(5), .adSaldoValorBenef(5), _
                    .adSaldoQuantConsig(6), .adSaldoValorConsig(6), .adSaldoQuantDemo(6), .adSaldoValorDemo(6), .adSaldoQuantConserto(6), .adSaldoValorConserto(6), .adSaldoQuantOutros(6), .adSaldoValorOutros(6), .adSaldoQuantBenef(6), .adSaldoValorBenef(6), _
                    .adSaldoQuantConsig(7), .adSaldoValorConsig(7), .adSaldoQuantDemo(7), .adSaldoValorDemo(7), .adSaldoQuantConserto(7), .adSaldoValorConserto(7), .adSaldoQuantOutros(7), .adSaldoValorOutros(7), .adSaldoQuantBenef(7), .adSaldoValorBenef(7), _
                    .adSaldoQuantConsig(8), .adSaldoValorConsig(8), .adSaldoQuantDemo(8), .adSaldoValorDemo(8), .adSaldoQuantConserto(8), .adSaldoValorConserto(8), .adSaldoQuantOutros(8), .adSaldoValorOutros(8), .adSaldoQuantBenef(8), .adSaldoValorBenef(8), _
                    .adSaldoQuantConsig(9), .adSaldoValorConsig(9), .adSaldoQuantDemo(9), .adSaldoValorDemo(9), .adSaldoQuantConserto(9), .adSaldoValorConserto(9), .adSaldoQuantOutros(9), .adSaldoValorOutros(9), .adSaldoQuantBenef(9), .adSaldoValorBenef(9), _
                    .adSaldoQuantConsig(10), .adSaldoValorConsig(10), .adSaldoQuantDemo(10), .adSaldoValorDemo(10), .adSaldoQuantConserto(10), .adSaldoValorConserto(10), .adSaldoQuantOutros(10), .adSaldoValorOutros(10), .adSaldoQuantBenef(10), .adSaldoValorBenef(10), _
                    .adSaldoQuantConsig(11), .adSaldoValorConsig(11), .adSaldoQuantDemo(11), .adSaldoValorDemo(11), .adSaldoQuantConserto(11), .adSaldoValorConserto(11), .adSaldoQuantOutros(11), .adSaldoValorOutros(11), .adSaldoQuantBenef(11), .adSaldoValorBenef(11), _
                    .adSaldoQuantConsig(12), .adSaldoValorConsig(12), .adSaldoQuantDemo(12), .adSaldoValorDemo(12), .adSaldoQuantConserto(12), .adSaldoValorConserto(12), .adSaldoQuantOutros(12), .adSaldoValorOutros(12), .adSaldoQuantBenef(12), .adSaldoValorBenef(12), _
                    sProdutoInicial, sProdutoFinal)
                    
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
        
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
                        
             'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
    
            'Se o período estiver de acordo
            If bPassou = False Then
   
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        
                sSelecaoSQL = "SELECT TiposMovimentoEstoque.AtualizaConsig, TiposMovimentoEstoque.AtualizaDemo, " & _
                              "TiposMovimentoEstoque.AtualizaConserto, TiposMovimentoEstoque.AtualizaOutras, " & _
                              "TiposMovimentoEstoque.AtualizaBenef, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, " & _
                              "Produtos.ClasseUM, Produtos.SiglaUMEstoque, MovimentoEstoque.SiglaUM " & _
                              "FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE TiposMovimentoEstoque.ProdutodeTerc =? AND " & _
                              "MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ?  AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0"
                
                With tTiposMovimentoEstoque
                    lErro = Comando_Executar(alComando(2), sSelecaoSQL, .iAtualizaConsig, .iAtualizaDemo, .iAtualizaConserto, .iAtualizaOutras, .iAtualizaBenef, _
                            dQuantidadeMovEst, dCustoMovEst, iClasseUM, sSiglaUMEst, sSiglaUMMov, TIPOMOV_EST_PRODUTONOSSO, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal)
                End With
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    With tTiposMovimentoEstoque
                        
                        If .iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                            dTotalSaldoQuantConsig = dTotalSaldoQuantConsig + dQuantidadeMovEst
                            dTotalSaldoValorConsig = dTotalSaldoValorConsig + dCustoMovEst
                        ElseIf .iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                            dTotalSaldoQuantConsig = dTotalSaldoQuantConsig - dQuantidadeMovEst
                            dTotalSaldoValorConsig = dTotalSaldoValorConsig - dCustoMovEst
                        End If
                        
                        If .iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                            dTotalSaldoQuantDemo = dTotalSaldoQuantDemo + dQuantidadeMovEst
                            dTotalSaldoValorDemo = dTotalSaldoValorDemo + dCustoMovEst
                        ElseIf .iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                            dTotalSaldoQuantDemo = dTotalSaldoQuantDemo - dQuantidadeMovEst
                            dTotalSaldoValorDemo = dTotalSaldoValorDemo - dCustoMovEst
                        End If
                        
                        If .iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                            dTotalSaldoQuantConserto = dTotalSaldoQuantConserto + dQuantidadeMovEst
                            dTotalSaldoValorConserto = dTotalSaldoValorConserto + dCustoMovEst
                        ElseIf .iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                            dTotalSaldoQuantConserto = dTotalSaldoQuantConserto - dQuantidadeMovEst
                            dTotalSaldoValorConserto = dTotalSaldoValorConserto - dCustoMovEst
                        End If
                        
                        If .iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                            dTotalSaldoQuantOutros = dTotalSaldoQuantOutros + dQuantidadeMovEst
                            dTotalSaldoValorOutros = dTotalSaldoValorOutros + dCustoMovEst
                        ElseIf .iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                            dTotalSaldoQuantOutros = dTotalSaldoQuantOutros - dQuantidadeMovEst
                            dTotalSaldoValorOutros = dTotalSaldoValorOutros - dCustoMovEst
                        End If
                        
                        If .iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                            dTotalSaldoQuantBenef = dTotalSaldoQuantBenef + dQuantidadeMovEst
                            dTotalSaldoValorBenef = dTotalSaldoValorBenef + dCustoMovEst
                        ElseIf .iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                            dTotalSaldoQuantBenef = dTotalSaldoQuantBenef - dQuantidadeMovEst
                            dTotalSaldoValorBenef = dTotalSaldoValorBenef - dCustoMovEst
                        End If
                    
                    End With
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                With tSldMesEst2
                
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConsig - .adSaldoQuantConsig(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Consig."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantConsig(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConsig
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConsig - .adSaldoValorConsig(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Consig."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorConsig(iMes) & " Valor MovEst = " & dTotalSaldoValorConsig
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantDemo - .adSaldoQuantDemo(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Demo."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantDemo(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantDemo
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorDemo - .adSaldoValorDemo(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Demo."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorDemo(iMes) & " Valor MovEst = " & dTotalSaldoValorDemo
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConserto - .adSaldoQuantConserto(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Conserto"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantConserto(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConserto
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConserto - .adSaldoValorConserto(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Conserto"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorConserto(iMes) & " Valor MovEst = " & dTotalSaldoValorConserto
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantOutros - .adSaldoQuantOutros(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Outros"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantOutros(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantOutros
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorOutros - .adSaldoValorOutros(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Outros"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorOutros(iMes) & " Valor MovEst = " & dTotalSaldoValorOutros
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantBenef - .adSaldoQuantBenef(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Benef"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantBenef(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantBenef
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorBenef - .adSaldoValorBenef(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Benef"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorBenef(iMes) & " Valor MovEst = " & dTotalSaldoValorBenef
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                End With
                    
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEst2 SET " & _
                            "SaldoQuantConsig" & iMes & " = ?, SaldoValorConsig" & iMes & " = ?, " & _
                            "SaldoQuantDemo" & iMes & " = ?, SaldoValorDemo" & iMes & " = ?, " & _
                            "SaldoQuantConserto" & iMes & " = ?, SaldoValorConserto" & iMes & " = ?, " & _
                            "SaldoQuantOutros" & iMes & " = ?, SaldoValorOutros" & iMes & " = ?, " & _
                            "SaldoQuantBenef" & iMes & " = ?, SaldoValorBenef" & iMes & " = ?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, alComando(1), _
                            dTotalSaldoQuantConsig, dTotalSaldoValorConsig, dTotalSaldoQuantDemo, dTotalSaldoValorDemo, _
                            dTotalSaldoQuantConserto, dTotalSaldoValorConserto, dTotalSaldoQuantOutros, dTotalSaldoValorOutros, _
                            dTotalSaldoQuantBenef, dTotalSaldoValorBenef)
                    If lErro <> SUCESSO Then Error 999
                                
                End If
                    
                dTotalSaldoQuantConsig = 0
                dTotalSaldoValorConsig = 0
                dTotalSaldoQuantDemo = 0
                dTotalSaldoValorDemo = 0
                dTotalSaldoQuantConserto = 0
                dTotalSaldoValorConserto = 0
                dTotalSaldoQuantOutros = 0
                dTotalSaldoValorOutros = 0
                dTotalSaldoQuantBenef = 0
                dTotalSaldoValorBenef = 0
                
            End If
        
            bPassou = False
        
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEst2_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEst2_Testa_Integridades:

    SldMesEst2_Testa_Integridades = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149917)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'Incluída por Tulio Jorge em 02/05/02
'Revisada por Luiz G.F.Nogueira em 02/05/02
Public Function ComissoesRegras_Grava(ByVal colComissoesRegras As Collection) As Long
'Grava as regras para cálculo de comissão no BD...
'objComissoesRegras RECEBE(INPUT) os dados a serem gravados

Dim lErro As Long
Dim lTransacao As Long
Dim objComissoesRegras As ClassComissoesRegras

On Error GoTo Erro_ComissoesRegras_Grava

    'Abrindo Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 101579
    
    'Exclui do bd as regras em questao...
    lErro = ComissoesRegras_Exclui_EmTrans()
    If lErro <> SUCESSO Then gError 101580
    
    'para cada Regra na colecao
    For Each objComissoesRegras In colComissoesRegras
    
        'grava a regra
        lErro = CF("ComissoesRegras_Grava_EmTrans", objComissoesRegras)
        If lErro <> SUCESSO Then gError 101581
        
    Next
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 101582

    ComissoesRegras_Grava = SUCESSO

    Exit Function

Erro_ComissoesRegras_Grava:

    ComissoesRegras_Grava = gErr
    
    Select Case gErr
    
        Case 101579
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 101580, 101581
    
        Case 101582
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149918)

    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

'Incluída por Tulio Jorge em 02/05/02
'Revisada por Luiz G.F.Nogueira em 02/05/02 -> ainda não liberada
Public Function ComissoesRegras_Exclui_EmTrans() As Long
'Exclui todos os registros da tabela e atualiza o NUM_PROX_COMISSOESREGRAS
'DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim lComando As Long
Dim lCodigo As Long

On Error GoTo Erro_ComissoesRegras_Exclui_EmTrans

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 101590
        
    'obtem o conjunto unitario de registros que serao excluidos do bd..
    lErro = Comando_Executar(lComando, "DELETE FROM ComissoesRegras")
    If lErro <> AD_SQL_SUCESSO Then gError 101591

    'fecha comando
    Call Comando_Fechar(lComando)
    
    ComissoesRegras_Exclui_EmTrans = SUCESSO
    
    Exit Function

Erro_ComissoesRegras_Exclui_EmTrans:

    ComissoesRegras_Exclui_EmTrans = gErr
    
    Select Case gErr
        
        Case 101590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 101591
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESREGRAS", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149919)
            
    End Select
    
    'fecha comando
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function

Public Function ComissoesRegras_Exclui() As Long
'Abre a transação e chama a função que irá excluir todos os registros do bd

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ComissoesRegras_Exclui

    'Abre transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 101596
    
    'Exclui a planilha do bd
    lErro = CF("ComissoesRegras_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 101597

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 101598

    ComissoesRegras_Exclui = SUCESSO
    
    Exit Function
    
Erro_ComissoesRegras_Exclui:

    ComissoesRegras_Exclui = gErr
    
    Select Case gErr
        
        Case 101596
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 101597
        
        Case 101598
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149920)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

'Daniel 27/05/2002
Function NFiscal_AlteraVinculo_Orcamento(objNFiscal As ClassNFiscal)
'Vincula ou desvincula um Orçamento de Venda a uma Nfiscal.

Dim lErro As Long
Dim objOrcamentoVenda As New ClassOrcamentoVenda
Dim lComando As Long
Dim lComando2 As Long
Dim lNumIntPedVenda As Long
Dim lNumIntNFiscal As Long
Dim lCodigo As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_NFiscal_AlteraVinculo_Orcamento

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94465
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 94466
        
    'Se o usuário selecionou um Orcamento
    If objNFiscal.lNumOrcamentoVenda <> 0 Then
    
        objOrcamentoVenda.lCodigo = objNFiscal.lNumOrcamentoVenda
        objOrcamentoVenda.iFilial = objNFiscal.iFilialOrcamento
    
        'Seleciona o Orçamento na Tela de OrcamentoVenda
        lErro = Comando_ExecutarPos(lComando, "SELECT NumIntPedVenda, NumIntNFiscal FROM OrcamentoVenda WHERE Codigo = ? AND Filial = ?", _
                                    0, lNumIntPedVenda, lNumIntNFiscal, objOrcamentoVenda.lCodigo, objOrcamentoVenda.iFilial)
        If lErro <> SUCESSO Then gError 94467
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94468
        
        'Se o Orçamento não existe ---> Erro.
        If lErro <> AD_SQL_SUCESSO Then gError 94469
                
        objOrcamentoVenda.lNumIntPedVenda = lNumIntPedVenda
        objOrcamentoVenda.lNumIntNFiscal = lNumIntNFiscal
        
        'Se o Orcamento estiver vinculado a uma Nota Fiscal diferente ou a um Pedido de Venda => Erro.
        If objOrcamentoVenda.lNumIntNFiscal <> 0 And objOrcamentoVenda.lNumIntNFiscal <> objNFiscal.lNumIntDoc Then gError 94470
        If objOrcamentoVenda.lNumIntPedVenda <> 0 Then gError 94471
    
        'Vincula o Orçamento a NFiscal
        lErro = Comando_ExecutarPos(lComando2, "UPDATE OrcamentoVenda SET NumIntNFiscal = ?", lComando, objNFiscal.lNumIntDoc)
        If lErro <> SUCESSO Then gError 94472
        
    End If
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    NFiscal_AlteraVinculo_Orcamento = SUCESSO
    
    Exit Function
    
Erro_NFiscal_AlteraVinculo_Orcamento:
    
    NFiscal_AlteraVinculo_Orcamento = gErr
    
    Select Case gErr
                              
        Case 94465, 94466
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
                                          
        Case 94467, 94468, 94473, 94474
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)
            
        Case 94469
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORCAMENTOVENDA_NAO_CADASTRADO1", gErr, lCodigo, iFilialEmpresa)
            
        Case 94470
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORCAMENTOVENDA_VINCULADO_PEDVENDA", gErr, lCodigo, iFilialEmpresa)
            
        Case 94471
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORCAMENTOVENDA_VINCULADO_NFISCAL", gErr, lCodigo, iFilialEmpresa)
                       
        Case 94472, 94475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ORCAMENTOVENDA", gErr, lCodigo, iFilialEmpresa)
                       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149921)
     
    End Select
        
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
        
    Exit Function

End Function

'Daniel 27/05/2002
Function NFiscal_Desvincula_Orcamento(ByVal objNFiscal As ClassNFiscal) As Long
'Desvincula o Orçamento de Venda da NFiscal a ser excluida.

Dim lErro As Long
Dim lNumIntDoc As Long
Dim lComando As Long
Dim lComando1 As Long

On Error GoTo Erro_NFiscal_Desvincula_Orcamento
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94479
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 94480
    
    'Tenta buscar um Orçamento Vinculado ao Pedido de Venda
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM OrcamentoVenda WHERE NumIntNFiscal = ?", 0, lNumIntDoc, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 94481

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94482
    
    If lErro = SUCESSO Then
    
        'Desvincula a NFiscal da Tabela de Orçamentos.
        lErro = Comando_ExecutarPos(lComando1, "UPDATE OrcamentoVenda SET NumIntNFiscal = ?", lComando, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 94483

    End If

    NFiscal_Desvincula_Orcamento = SUCESSO

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

Erro_NFiscal_Desvincula_Orcamento:

    NFiscal_Desvincula_Orcamento = gErr

    Select Case gErr

        Case 94479, 94480
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94481, 94482
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)

        Case 94483
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ORCAMENTOVENDA", gErr, objNFiscal.lNumOrcamentoVenda)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149922)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Function NFiscal_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'grava uma nota fiscal

Dim lErro As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscal_Grava_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 35962
    Next
    
    'grava a nota fiscal
    lErro = CF("NFiscal_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61403 Then gError 44259
    
    'Se a Nota é nova
    If lErro = SUCESSO Then
        
        'verifica se o cliente possui o crédito para faturar a nota fiscal.
        'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
        lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 44496
        
        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52964
    
        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52965
    
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69555
        
        End If
        
    Else
    
'horaentrada
        'trata da alteração dos dados da nota fiscal.
        lErro = CF("NFiscal_Alteracao", objNFiscal)
        If lErro <> SUCESSO Then gError 83331
    
    End If
        
    'Grava os dados contábeis (contabilidade)
    If Not (objContabil Is Nothing) Then
        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
        If lErro <> SUCESSO Then gError 36502
    End If
    
    'Daniel 27/05/2002
    'Vincula ou desvincula um Orçamento de Venda a uma NFiscal.
    lErro = NFiscal_AlteraVinculo_Orcamento(objNFiscal)
    If lErro <> SUCESSO Then gError 94464
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscal_Grava_EmTrans = SUCESSO

    Exit Function

Erro_NFiscal_Grava_EmTrans:

    NFiscal_Grava_EmTrans = gErr

    Select Case gErr

        Case 35962
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 36502, 44259, 44496, 52964, 52965, 69555, 83331

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149923)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalFatura_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava NFiscal Fatura

Dim lErro As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalFatura_Grava_EmTrans

    'Abre os Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 42414
    Next

    'Grava NFiscal Fatura
    lErro = CF("NFiscalFatura_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61401 Then gError 44289
    
    'Se for uma nota nova
    If lErro = SUCESSO Then
        
        'vai trabalhar as notas fiscais que precisam ser checadas quanto
        'a integridade em relacao aos demais dados no bd.
        lErro = Verifica_Integridade_NFiscal(objNFiscal)
        If lErro <> SUCESSO Then gError 133105
        
        'verifica se o cliente possui o crédito para faturar a nota fiscal.
        'Se tiver atualiza tabela de estatistica de liberacao do usuario
            lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 44496

        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52966

        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52967
    
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69556
        
        End If
    
    Else
    
'horaentrada
        'trata da alteração dos dados da nota fiscal.
        lErro = CF("NFiscal_Alteracao", objNFiscal)
        If lErro <> SUCESSO Then gError 83399
    
    End If
    
    'Grava os dados contábeis (contabilidade)
    If Not (objContabil Is Nothing) Then
        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal, -objNFiscal.dValorLivroAux)
        If lErro <> SUCESSO Then gError 36507
    End If
    
    'Daniel 27/05/2002
    'Vincula ou desvincula um Orçamento de Venda a uma NFiscal.
    lErro = NFiscal_AlteraVinculo_Orcamento(objNFiscal)
    If lErro <> SUCESSO Then gError 94464

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalFatura_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_Grava_EmTrans:

    NFiscalFatura_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 36507, 44289, 44496, 52966, 52967, 69556, 83399, 133105
    
        Case 42414
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149924)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalDevolucao_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava uma NFiscal Devolução

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalDevolucao_Grava_EmTrans

    'Abre os Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 39247
    Next
    
    lErro = CF("NFiscalDev_Lock_Gravacao", objNFiscal, alComando(1))
    If lErro <> SUCESSO Then gError 39255
    
    lErro = CF("ItensNFiscalDev_Lock_Gravacao", objNFiscal)
    If lErro <> SUCESSO Then gError 39273
    
    lErro = CF("NFiscalDevolucao_Grava_BD", objNFiscal)
    If lErro <> SUCESSO And lErro <> 61406 Then gError 39274
    
    'Se for uma nota nova
    If lErro = SUCESSO Then
        
        'Grava a Estatística da Filial Fornecedor
        lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_FILIALFORNFILEMP)
        If lErro <> SUCESSO Then gError 52988
    
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69557
        
        End If
        
    Else
    
        'trata da alteração dos dados da nota fiscal.
        lErro = CF("NFiscal_Alteracao", objNFiscal)
        If lErro <> SUCESSO Then gError 83417
    
    End If
    
    If Not (objContabil Is Nothing) Then
    
        If objNFiscal.lFornecedor > 0 Then
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 36505
    
        Else
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 36506
        
        End If
       
    End If
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalDevolucao_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalDevolucao_Grava_EmTrans:

    NFiscalDevolucao_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 36505, 36506, 39273, 39274, 52988, 69557, 83417
    
        Case 39247
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 39257
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATUREZAOP", gErr, objNFiscal.sNaturezaOp)
                        
        Case 39261, 39262
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr, objNFiscal.lCliente, objNFiscal.iFilialCli)

        Case 39263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_INEXISTENTE", gErr, objNFiscal.iFilialCli, objNFiscal.lCliente)
            
        Case 39264
            If objNFiscal.lFornecedor > 0 Then
                lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISFORNECEDORES1", gErr, objNFiscal.lFornecedor, objNFiscal.iFilialForn)
            Else
                lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", gErr, objNFiscal.lCliente, objNFiscal.iFilialCli)
            End If
        
        Case 39265, 39266
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", gErr, objNFiscal.sSerie)
        
        Case 39267
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", gErr, objNFiscal.sSerie)
        
        Case 39268
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", gErr)
        
        Case 39269, 39270
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRANSPORTADORA", gErr, objNFiscal.iCodTransportadora)
        
        Case 39271
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TRANSPORTADORA_NAO_CADASTRADA", gErr, objNFiscal.iCodTransportadora)
            
        Case 39272
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TRANSPORTADORA", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149925)
            
    End Select
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalRemessa_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult
Dim iIndice As Integer

On Error GoTo Erro_NFiscalRemessa_Grava_EmTrans

    'Abre os Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 42060
    Next

    lErro = CF("NFiscalRemessa_Lock_Gravacao", objNFiscal, alComando(1))
    If lErro <> SUCESSO Then gError 39220
    
    lErro = CF("NFiscal_TabelaPreco_Lock", alComando(2), objNFiscal)
    If lErro <> SUCESSO Then gError 51624
        
    'Faz os "Lock's" relacionados aos itens da NF
    lErro = CF("ItensNFiscalRem_Lock_Gravacao", objNFiscal)
    If lErro <> SUCESSO Then gError 42086
    
    lErro = CF("NFiscalRemessa_Grava_BD", objNFiscal)
    If lErro <> SUCESSO And lErro <> 61408 Then gError 42087
    
    'se for uma nota nova
    If lErro = SUCESSO Then
    
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                                
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69558
            
        End If
        
    Else
    
'horaentrada
        'trata da alteração dos dados da nota fiscal.
        lErro = CF("NFiscal_Alteracao", objNFiscal)
        If lErro <> SUCESSO Then gError 83409
    
    End If
    
    If Not (objContabil Is Nothing) Then
    
        If objNFiscal.lFornecedor > 0 Then
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 36503
    
        Else
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 36504
        
        End If
    
    End If
    
    'Fecha os comanos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalRemessa_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalRemessa_Grava_EmTrans:

    NFiscalRemessa_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 36503, 36504, 39220, 42086, 42087, 51624, 69558, 83409
        
        Case 42060
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149926)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalPedido_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal gerada a partir de um pedido de venda

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim alComando1(1 To 29) As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
Dim iIndice As Integer
Dim dQuantFaturada As Double
Dim dQuantNaoCancelada As Double
Dim objMovEstoque As ClassMovEstoque
Dim dQuantPedida As Double
Dim dQuantCancelada As Double
Dim iStatus As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_NFiscalPedido_Grava_EmTrans
   
    'Abre os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 46055
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 46595
    Next
        
    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(alComando1(29), "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 61418
    
    lErro = Comando_BuscarPrimeiro(alComando1(29))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 61419
    
    'Nova nota Fiscal
    If lErro = AD_SQL_SEM_DADOS Then
        
        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
        
        'Lê e faz lock no Pedido de Venda
        lErro = CF("PedidoDeVenda_Le_Lock", alComando1(1), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 36986 Then gError 46079
        If lErro <> SUCESSO Then gError 46084
        
        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 35643
        
        'Lê os bloqueios do Pedido de venda
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 51470
        
        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 25741 Then gError 51471
        If lErro = 25741 Then gError 46942
         
        'Verifica se o cliente possui o crédito para faturar a nota fiscal
        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
        lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 25743
                
        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
        For iIndice = 1 To objNFiscal.ColItensNF.Count
            objNFiscal.ColItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
        Next
        
        'Tenta liberar reservas do Pedido igual quant. usadas na NF
        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
        If lErro <> SUCESSO Then gError 25775
    
    End If
    
    'Chama a função de gravação de uma nota fiscal
    lErro = CF("NFiscal_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61403 Then gError 46594
    
    'se a nota é nova
    If lErro = SUCESSO Then
        
        'OK ?? Shirley encapsular como em NFiscalFaturaPedido_Grava
        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
        If lErro <> SUCESSO Then gError 51749
        
        'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
        If lErro <> SUCESSO Then gError 51497
    
        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52968
        
        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52969
        
        'Lê ítens de Pedido Venda
        lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 51516
        
        'Verifica se tem quantidade não cancelada
        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada)
        If lErro <> SUCESSO Then gError 51517
    
        'Se nao tiver quantidade nao cancelada, baixa o Pedido
        If dQuantNaoCancelada = 0 Then
    
            lErro = CF("PedidoDeVenda_Baixar", alComando1, objPedidoVenda)
            If lErro <> SUCESSO Then gError 51518
         
        End If
        
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69559
        
        End If
        
    Else
    
'horaentrada
        'trata da alteração dos dados da nota fiscal.
        lErro = CF("NFiscal_Alteracao", objNFiscal)
        If lErro <> SUCESSO Then gError 83400
    
    End If
    
    'Grava os dados contábeis (contabilidade)
    If Not (objContabil Is Nothing) Then
        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
        If lErro <> SUCESSO Then gError 35645
    End If
        
    'Fecha os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalPedido_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_NFiscalPedido_Grava_EmTrans:

    NFiscalPedido_Grava_EmTrans = gErr
    
    '?? Shirley tratamento de erros faltando (46614, 46615, 46616 outros ??). Checar tudo e colocar os erros em ordem.
    '?? Não deixar erro que não existe na rotina
    
    Select Case gErr
    
        Case 25778
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_QUANT_A_FATURAR", gErr, objNFiscal.ColItensNF(iIndice).lNumIntItemPedVenda)
        
        Case 35643
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", gErr)
                    
        Case 46055
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 25743, 25775, 35645, 46079, 46594, 51470, 51471, 52968, 53969, 51497, 51516 To 51520, 51749, 69559, 83400
        
        Case 46084
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 46942
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)
        
        Case 61418, 61419
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149927)
    
    End Select
    
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalRemPedido_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objBloqueioPV As ClassBloqueioPV, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal remessa gerada a partir de um pedido de venda

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim alComando1(1 To 29) As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
Dim iIndice As Integer
Dim dQuantFaturada As Double
Dim dQuantNaoCancelada As Double
Dim objMovEstoque As ClassMovEstoque
Dim dQuantPedida As Double
Dim dQuantCancelada As Double
Dim iStatus As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_NFiscalRemPedido_Grava_EmTrans
   
    'Abre os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 96000
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96001
    Next

    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(alComando1(29), "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND Tipo =? ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 96002
    
    lErro = Comando_BuscarPrimeiro(alComando1(29))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96003
    
    'Nova nota Fiscal
    If lErro = AD_SQL_SEM_DADOS Then
        
        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
        
        'Lê e faz lock no Pedido de Venda
        lErro = CF("PedidoDeVenda_Le_Lock", alComando1(1), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 36986 Then gError 96004
        If lErro <> SUCESSO Then gError 96005
        
        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 96006
        
        'Lê os bloqueios do Pedido de venda
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 96007
        
        For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV

            If objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_CREDITO Then
           
                lErro = CF("Bloqueio_Libera_Automatico", objBloqueioPV)
                If lErro <> SUCESSO Then gError 96069

            End If
        Next
        
        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 25741 Then gError 96008
        If lErro = 25741 Then gError 96009
         
        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
        For iIndice = 1 To objNFiscal.ColItensNF.Count
            objNFiscal.ColItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
        Next
        
        'Tenta liberar reservas do Pedido igual quant. usadas na NF
        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
        If lErro <> SUCESSO Then gError 96011
    
    End If

    'Chama função de gravação de uma nota fiscal Remessa
    lErro = CF("NFiscalRemessa_Lock_Gravacao", objNFiscal, alComando(1))
    If lErro <> SUCESSO Then gError 96012
    
    lErro = CF("NFiscal_TabelaPreco_Lock", alComando(2), objNFiscal)
    If lErro <> SUCESSO Then gError 96013
        
    'Faz os "Lock's" relacionados aos itens da NF
    lErro = CF("ItensNFiscalRemPedido_Lock_Gravacao", objNFiscal)
    If lErro <> SUCESSO Then gError 96014
    
    'Janaina
    'Insere uma Nota Fiscal de Saida no Banco de Dados
    lErro = NFiscal_Grava_BD(alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61400 Then gError 96098
    'Janaina
   
    'se a nota é nova
    If lErro = SUCESSO Then
        
        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
        If lErro <> SUCESSO Then gError 96016
        
        'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
        If lErro <> SUCESSO Then gError 96017
    
        'Lê ítens de Pedido Venda
        lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 96020
        
        'Verifica se tem quantidade não cancelada
        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada)
        If lErro <> SUCESSO Then gError 96021
    
        'Se nao tiver quantidade nao cancelada, baixa o Pedido
        If dQuantNaoCancelada = 0 Then
    
            lErro = CF("PedidoDeVenda_Baixar", alComando1, objPedidoVenda)
            If lErro <> SUCESSO Then gError 96022
         
        End If
        
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 96023
        
        End If
        
    Else

        'trata da alteração dos dados da nota fiscal.
        lErro = CF("NFiscal_Alteracao", objNFiscal)
        If lErro <> SUCESSO Then gError 96024
    
    End If

    If Not (objContabil Is Nothing) Then
   
       If objNFiscal.lFornecedor > 0 Then
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 96025
    
        Else
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 96026
        
        End If
   
    End If
   
    'Fecha os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalRemPedido_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_NFiscalRemPedido_Grava_EmTrans:

    NFiscalRemPedido_Grava_EmTrans = gErr
    
    Select Case gErr
      
        Case 96000, 96001
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 96002, 96003
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
 
        Case 96005
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 96006
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", gErr)

        Case 96009
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)

        Case 96010, 96011, 96004, 96007, 96008, 96018, 96017, 96020, 96016, 96023, 96024, 96012, 96013, 96014, 96015, 96019, 96021, 96022, 96025, 96026, 96069, 96098
      
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149928)
    
    End Select
    
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalFaturaPedido_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal fatura gerada a partir de um pedido de venda

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim alComando1(1 To 30) As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
Dim iIndice As Integer
Dim dQuantFaturada As Double
Dim dQuantNaoCancelada As Double
Dim objMovEstoque As ClassMovEstoque
Dim dQuantPedida As Double
Dim dQuantCancelada  As Double
Dim iStatus As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_NFiscalFaturaPedido_Grava_EmTrans
   
    'Abre os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 46055
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 46595
    Next
        
    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(alComando1(30), "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 61416
    
    lErro = Comando_BuscarPrimeiro(alComando1(30))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 61417
    
    'Nova nota Fiscal
    If lErro = AD_SQL_SEM_DADOS Then
        
        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
    
        'Lê e faz lock no Pedido de Venda
        lErro = CF("PedidoDeVenda_Le_Lock", alComando1(1), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 36986 Then gError 46079
        
        If lErro <> SUCESSO Then gError 46084
    
        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 35643
    
        'Lê os bloqueios do Pedido de venda
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 46983
    
        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 25741 Then gError 51469
        If lErro = 25741 Then gError 46941
     
        'Verifica se o cliente possui o crédito para faturar a nota fiscal
        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
        lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 25742
            
        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
        For iIndice = 1 To objNFiscal.ColItensNF.Count
            objNFiscal.ColItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
        Next
    
        'se nao for faturamento de venda para entrega futura
        If objNFiscal.iTipoNFiscal <> DOCINFO_NFIFVEFPV Then
        
            'Tenta liberar reservas do Pedido igual quant. usadas na NF
            lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
            If lErro <> SUCESSO Then gError 51580

        End If
        
    End If
    
    'Chama a função de gravação de uma nota fiscal
    lErro = CF("NFiscalFatura_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61401 Then gError 46594
    
    'Se for uma nota nova
    If lErro = SUCESSO Then
    
        'se nao for faturamento de venda para entrega futura
        If objNFiscal.iTipoNFiscal <> DOCINFO_NFIFVEFPV Then
        
            'OK ?? Shirley, precisa de colItemPedido ? Não tem os ítens a partir de ítens NF ?
            'OK ?? Encapsular em ItensPV_AtualizaQuantFaturada(objNFiscal)
            lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
            If lErro <> SUCESSO Then gError 51748
            
            'Atualiza estatística de QuantPedida em ProdutoFilial
            lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
            If lErro <> SUCESSO Then gError 51497

        End If
        
        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52970
        
        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52971
            
        'Le Itens de PV
        lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 51492
            
        If objNFiscal.iTipoNFiscal <> DOCINFO_NFIFVEFPV Then
            
            'Verifica se tem quantidade não cancelada
            lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada)
            If lErro <> SUCESSO Then gError 51493
        
            'Se nao tiver quantidade nao cancelada, baixa o Pedido
            If Abs(dQuantNaoCancelada) < QTDE_ESTOQUE_DELTA Then 'Alterado por Wagner
        
                lErro = CF("PedidoDeVenda_Baixar", alComando1, objPedidoVenda)
                If lErro <> SUCESSO Then gError 51494
             
            End If
    
        End If
        
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69560
        
        End If
    
    Else
    
'horaentrada
        'trata da alteração dos dados da nota fiscal.
        lErro = CF("NFiscal_Alteracao", objNFiscal)
        If lErro <> SUCESSO Then gError 83401
    
    End If
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal, -objNFiscal.dValorLivroAux)
    If lErro <> SUCESSO Then gError 35645
    
    'Fecha os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalFaturaPedido_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_NFiscalFaturaPedido_Grava_EmTrans:

    NFiscalFaturaPedido_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 25742, 35645, 46079, 46594, 52970, 52971, 51469, 51580, 51748, 69560, 83401
        
        Case 35643
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", gErr)
        
        Case 46055
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 46084
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 46941
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)
        
        Case 51492, 51493, 51494, 51495, 51496, 51497, 51526
        
        Case 61416, 61417
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149929)
    
    End Select
    
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Public Sub Redimensiona_Tam_MsgNF(ByVal objControle As Object)

    'a inpal pediu o dobro do tamanho do campo da nota fiscal
    objControle.MaxLength = STRING_NFISCAL_MENSAGEM

End Sub

Function Retorna_Almoxarifado_Alternativo(iAlmoxarifadoPadrao As Integer, iFilialEmpresa As Integer) As Long

    iAlmoxarifadoPadrao = 0
    iFilialEmpresa = 0

    Retorna_Almoxarifado_Alternativo = SUCESSO
    
End Function

Function Calcula_Quantidade_Alocada(colAlocacoes As ColAlocacoesItemNF, dQuantidade As Double) As Long

    Calcula_Quantidade_Alocada = SUCESSO
    
End Function

Public Function CustoEmbMP_Exclui(ByVal objCustoEmb As ClassCustoEmbMP) As Long
'Exclui dados do BD da tabela "CustoEmbMP"

Dim alComando(1) As Long
Dim sProduto As String
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim tCustoEmb As typeCustoEmbMP

On Error GoTo Erro_CustoEmbMP_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116326

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 116325
    Next

    'inicializa a string p/ receber o produto
    sProduto = String(STRING_PRODUTO, 0)

    'faz uma busca no Bd a partir do produto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto FROM CustoEmbMP WHERE Produto = ? AND FilialEmpresa = ?", 0, sProduto, objCustoEmb.sProduto, objCustoEmb.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 116327

    'busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116333

    'se nao achou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 116328

    'faz um lock exclusivo no registro encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 116329

    'exclui os campos da tabela CustoEMbMP
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoEmbMP", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116330

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116331

    '#######################################
    'Inserido por Wagner 07/12/2005
    lErro = CustoEmbMPAux_Exclui(objCustoEmb)
    If lErro <> SUCESSO Then gError 141321
    '#######################################
        
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMP_Exclui = SUCESSO

    Exit Function

Erro_CustoEmbMP_Exclui:

    CustoEmbMP_Exclui = gErr

    Select Case gErr

        Case 116325
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116326
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116327, 116333
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMP", gErr)

        Case 116328
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTO_NAO_EXISTENTE", gErr, objCustoEmb.sProduto)

        Case 116329
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 116330
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTOPRODUTO", gErr, objCustoEmb.sProduto)

        Case 116331
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)

        Case 141321 'Inserido por Wagner

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149930)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoEmbMP_Grava(ByVal objCustoEmb As ClassCustoEmbMP) As Long
'Grava alterações e inserções no BD

Dim lErro As Long
Dim alComando(2) As Long
Dim lTransacao As Long
Dim objProduto As New ClassProduto
Dim sProduto As String
Dim iIndice As Integer

On Error GoTo Erro_CustoEmbMP_Grava

    'abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116315

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116314
    Next

    'inicializa a string do produto
    sProduto = String(STRING_PRODUTO, 0)

    'faz uma busca no Bd p/a verificar se o produto tem relacao c/ o custo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Produto FROM CustoEmbMP WHERE Produto = ? AND FilialEmpresa = ?", 0, sProduto, objCustoEmb.sProduto, objCustoEmb.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 116316

    'tenta buscar o registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116317

    'se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then

        'carrega o cód. do produto p/ ele ser passado como parametro
        objProduto.sCodigo = objCustoEmb.sProduto
    
        'faz um lock shared no produto passado como parametro
        lErro = CF("Produto_Lock_Shared", alComando(0), objProduto)
        If lErro <> SUCESSO And lErro <> 55235 Then gError 116332

        'insere um novo registro
        With objCustoEmb
            lErro = Comando_Executar(alComando(2), "INSERT INTO CustoEmbMP(FilialEmpresa, Produto , DataAtualizacao, Custo, AliquotaICMS, CondicaoPagto, FretePorKg, AliquotaICMSInf, CondicaoPagtoInf, FretePorKGInf ) VALUES (?,?,?,?,?,?,?,?,?,?)", .iFilialEmpresa, .sProduto, .dtDataAtualizacao, .dCusto, .dAliquotaICMS, .iCondicaoPagto, .dFretePorKg, .iAliquotaICMSInf, .iCondicaoPagtoInf, .iFretePorKGInf)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 116318

    'senão
    Else

        'atualiza o existente
        With objCustoEmb
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE CustoEmbMP SET FilialEmpresa = ?, Produto = ?, DataAtualizacao = ?, Custo = ?, AliquotaICMS = ?, CondicaoPagto = ?, FretePorKG = ?, AliquotaICMSInf = ?, CondicaoPagtoInf = ?, FretePorKGInf = ?", alComando(1), .iFilialEmpresa, .sProduto, .dtDataAtualizacao, .dCusto, .dAliquotaICMS, .iCondicaoPagto, .dFretePorKg, .iAliquotaICMSInf, .iCondicaoPagtoInf, .iFretePorKGInf)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 116319

        '#######################################
        'Inserido por Wagner 07/12/2005
        lErro = CustoEmbMPAux_Exclui(objCustoEmb)
        If lErro <> SUCESSO Then gError 141319
        '#######################################

    End If

    '#######################################
    'Inserido por Wagner 07/12/2005
    lErro = CustoEmbMPAux_Insere(objCustoEmb.colAux)
    If lErro <> SUCESSO Then gError 141320
    '#######################################

    'fecha a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116320

    'fecha o comamdo
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMP_Grava = SUCESSO

    Exit Function

Erro_CustoEmbMP_Grava:

    CustoEmbMP_Grava = gErr

    Select Case gErr

        Case 116314
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116315
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116316, 116317
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMP", gErr)

        Case 116318
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTOEMBMP", gErr, objCustoEmb.sProduto)

        Case 116319
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CUSTOEMBMP", gErr, objCustoEmb.sProduto)

        Case 116320
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 116332
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SHARED", gErr)

        Case 141319, 141320 'Inserido por Wagner

        Case Else
             Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149931)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoFixoProd_Grava(ByVal objCustoFixoProd As ClassCustoFixoProd) As Long
'grava ou altera a tabela CustoFixoProd

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer, iAutomatico As Integer

On Error GoTo Erro_CustoFixoProd_Grava

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116396
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116397
    Next
    
    'Verifico se existe o registro em custofixoprod
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Automatico FROM CustoFixoProd WHERE DataReferencia = ? AND FilialEmpresa = ? AND Produto = ?", 0, iAutomatico, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 116398

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116400

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
        
        'faz um update apenas no Custo Aplicado
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CustoFixoProd SET Custo = ?, Automatico = ?", alComando(0), objCustoFixoProd.dCusto, IIf(iAutomatico = CUSTOFIXOPROD_AUTOMATICO, CUSTOFIXOPROD_AUTOMATICO_MANUAL, iAutomatico))
        If lErro <> AD_SQL_SUCESSO Then gError 116401
    
    Else

        'insere a Data, Produto, Custo Aplicado, além da filial e automatico
        lErro = Comando_Executar(alComando(1), "INSERT INTO CustoFixoProd(FilialEmpresa, DataReferencia, Produto, Custo, Automatico) VALUES (?,?,?,?,?)", objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.sProduto, objCustoFixoProd.dCusto, CUSTOFIXOPROD_MANUAL)
        If lErro <> AD_SQL_SUCESSO Then gError 116402
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116399
    
    CustoFixoProd_Grava = SUCESSO

    Exit Function

Erro_CustoFixoProd_Grava:

    CustoFixoProd_Grava = gErr

    Select Case gErr
        
        Case 116397
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 116396
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 116398, 116400
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOFIXOPROD", gErr)
            
        Case 116401
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CUSTOFIXOPROD", gErr)
        
        Case 116402
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTOFIXOPROD", gErr)
        
        Case 116399
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                
    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoFixoProd_Exclui(ByVal objCustoFixoProd As ClassCustoFixoProd) As Long
'Exclui os registros da tabela CustoFixoProd

Dim alComando(1) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_CustoFixoProd_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116403

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 116404
    Next

    'faz uma busca no Bd a partir da data, produto e filial
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM CustoFixoProd WHERE Produto = ? AND FilialEmpresa = ? AND DataReferencia = ?", 0, iFilialEmpresa, objCustoFixoProd.sProduto, objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.dtDataReferencia)
    If lErro <> AD_SQL_SUCESSO Then gError 116405

    'busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116406

    'se nao achou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 116407

    'faz um lock exclusivo no registro encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 116408

    'exclui os campos da tabela CustoFixoProd
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoFixoProd", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116409

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116410

    CustoFixoProd_Exclui = SUCESSO

    Exit Function

Erro_CustoFixoProd_Exclui:

    CustoFixoProd_Exclui = gErr

    Select Case gErr

        Case 116404
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116403
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116405, 116406
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOFIXOPROD", gErr)

        Case 116407
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTOFIXOPROD_NAO_EXISTENTE", gErr, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.sProduto)

        Case 116408
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 116409
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTOFIXOPROD", gErr)

        Case 116410
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149932)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TipoFreteFP_Grava(ByVal objTipo As ClassTipoFreteFP) As Long
'Atualiza ou insere um novo registro na tabela Tipos de Bloqueio

Dim lErro As Long
Dim alComando(2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_TipoFreteFP_Grava

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116935
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116936

    'pesquisa se já é usado o nome reduzido para outro codigo
    lErro = Comando_Executar(alComando(0), "SELECT FilialEmpresa FROM TipoFreteFP WHERE Codigo <> ? AND NomeReduzido = ?", iFilialEmpresa, objTipo.iCodigo, objTipo.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then gError 116937

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116938

    If lErro <> AD_SQL_SEM_DADOS Then gError 116939

    'pesquisa Tipo no BD
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa FROM TipoFreteFP WHERE Codigo = ? ", 0, iFilialEmpresa, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 116940

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116941

    If lErro = AD_SQL_SEM_DADOS Then
    'Tipo nao pertence ao BD

        'insere novo registro na tabela Tipos
        lErro = Comando_Executar(alComando(2), "INSERT INTO TipoFreteFP(Codigo, NomeReduzido, Descricao, FilialEmpresa, Preco, DataAtualizacao) VALUES (?,?,?,?,?,?)", objTipo.iCodigo, objTipo.sNomeReduzido, objTipo.sDescricao, giFilialEmpresa, objTipo.dPreco, objTipo.dtDataAtualizacao)
        If lErro <> AD_SQL_SUCESSO Then gError 116942

    Else
    'tipo existe no BD

        If objTipo.iFilialEmpresa <> iFilialEmpresa Then gError 116959
        
        'altera registro na tabela tipo
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE TipoFreteFP SET NomeReduzido = ? , Descricao = ?, DataAtualizacao = ?, Preco = ? ", alComando(1), objTipo.sNomeReduzido, objTipo.sDescricao, objTipo.dtDataAtualizacao, objTipo.dPreco)
        If lErro <> AD_SQL_SUCESSO Then gError 116943

    End If

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116944
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    TipoFreteFP_Grava = SUCESSO

    Exit Function

Erro_TipoFreteFP_Grava:

    TipoFreteFP_Grava = gErr

        Select Case gErr

        Case 116935
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116936
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116937, 116938, 116940, 116941
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116939
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_TIPOFRETE_REPETIDO", gErr, objTipo.sNomeReduzido, objTipo.iCodigo, iFilialEmpresa)

        Case 116942
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116943
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116959
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_FRETE_OUTRA_FILIAL", gErr, objTipo.iCodigo, iFilialEmpresa)
        
        Case 116944
             lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149933)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function TipoFreteFP_Exclui(ByVal objTipo As ClassTipoFreteFP) As Long
'Exclui o tipo do BD

Dim alComando(1) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_TipoFreteFP_Exclui

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116945
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116946
    
    'pesquisa Tipo na tabela Tipos de Frete
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM TipoFreteFP WHERE Codigo = ? ", 0, iFilialEmpresa, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116947

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116948

    If lErro = AD_SQL_SEM_DADOS Then gError 116949
    
    If iFilialEmpresa <> objTipo.iFilialEmpresa Then gError 116960

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 116950
    
    'verificar se está relacionado com alguma tabela
    lErro = TipoFreteFP_Testa_Vinculo(objTipo)
    If lErro <> SUCESSO Then gError 116951
    
    'exclui Tipo da tabela
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TipoFreteFP", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116952
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116953

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TipoFreteFP_Exclui = SUCESSO

    Exit Function

Erro_TipoFreteFP_Exclui:

    TipoFreteFP_Exclui = gErr

    Select Case gErr

        Case 116945
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116946
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116947, 116948
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOFRETE", gErr, Error$)

        Case 116949
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOFRETE_NAO_CADASTRADO", gErr, objTipo.iCodigo, giFilialEmpresa)

        Case 116960
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOFRETE_OUTRA_FILIAL", gErr, objTipo.iCodigo, objTipo.sNomeReduzido, objTipo.iFilialEmpresa)
        
        Case 116952
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116953
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 116950
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPOFRETE", gErr)
                    
        Case 116951 'Tratado na rotina chamada
                       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149934)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function TipoFreteFP_Testa_Vinculo(ByVal objTipo As ClassTipoFreteFP) As Long
'Lê no BD se existe uso deste tipo de Frete em outras tabelas

Dim lErro As Long
Dim lComando As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_TipoFreteFP_Testa_Vinculo
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116954
    
    'Procura no BD o uso deste Tipo de Frete na tabela DVVCliente
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa FROM DVVCliente WHERE TipoFrete=?", iFilialEmpresa, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116955
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116956
    
    'Se Estiver sendo usado(se existe em outra tabela) ==>ERRO
    If lErro = AD_SQL_SUCESSO Then gError 116957
    
    Call Comando_Fechar(lComando)
    
    TipoFreteFP_Testa_Vinculo = SUCESSO
    
    Exit Function
    
Erro_TipoFreteFP_Testa_Vinculo:
    
    TipoFreteFP_Testa_Vinculo = gErr
    
    Select Case gErr
        
        Case 116955, 116956
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTE", gErr)
        
        Case 116957
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOFRETE_USADO", gErr, objTipo.iCodigo)
             
        Case 116954
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149935)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function TipoFreteFP_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo Tipo disponivel

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_TipoFreteFP_Automatico

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico", "FATConfig", "NUM_PROX_TIPO_FRETEFP", "TipoFreteFP", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then gError 116958
    
    iCodigo = lNumAuto

    TipoFreteFP_Automatico = SUCESSO

    Exit Function

Erro_TipoFreteFP_Automatico:

    TipoFreteFP_Automatico = gErr

    Select Case gErr

    Case 116958
        
    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149936)

    End Select

    Exit Function

End Function

Function DVVCliente_Grava(ByVal objDVVCliente As ClassDVVCliente) As Long
'grava os registros nas tabelas DVVCliente e DVVClienteProd

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_DVVCliente_Grava

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116488

    'grava na tabela DVVCliente
    lErro = CF("DVVCliente_Grava_Cliente", objDVVCliente)
    If lErro <> SUCESSO Then gError 116490
    
    'Grava na tablela DVVClienteProd
    lErro = CF("DVVCliente_Grava_Produto", objDVVCliente)
    If lErro <> SUCESSO Then gError 116491
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116489

    DVVCliente_Grava = SUCESSO

    Exit Function

Erro_DVVCliente_Grava:

    DVVCliente_Grava = gErr

    Select Case gErr

        Case 116490, 116491
        
        Case 116488
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 116489
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149937)

    End Select

    Call Transacao_Rollback
    
    Exit Function
        
End Function

Public Function DVVCliente_Grava_Cliente(ByVal objDVVCliente As ClassDVVCliente) As Long
'grava os registro na tabela DVVCliente

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_DVVCliente_Grava_Cliente

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116495
    Next
    
    'Verifico se existe o registro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM DVVCliente WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 116496

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116497

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
        
        'faz um update apenas no Custo Aplicado
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE DVVCLiente SET TipoFrete = ? ", alComando(0), objDVVCliente.iTipoFrete)
        If lErro <> AD_SQL_SUCESSO Then gError 116498
    
    Else

        'insere a Data, Produto, Custo Aplicado, além da filial e automatico
        lErro = Comando_Executar(alComando(1), "INSERT INTO DVVCLiente(FilialEmpresa, CodCliente, CodFilial, TipoFrete) VALUES (?,?,?,?)", objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial, objDVVCliente.iTipoFrete)
        If lErro <> AD_SQL_SUCESSO Then gError 116499
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    DVVCliente_Grava_Cliente = SUCESSO

    Exit Function

Erro_DVVCliente_Grava_Cliente:

    DVVCliente_Grava_Cliente = gErr

    Select Case gErr
        
        Case 116495
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 116496, 116497
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTE", gErr)
            
        Case 116498
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_DVVCLIENTE", gErr)
        
        Case 116499
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVCLIENTE", gErr)
                 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149938)
                 
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function DVVCliente_Grava_Produto(ByVal objDVVCliente As ClassDVVCliente) As Long
'grava os registro na tabela DVVClienteProd

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim objDVVClienteProd As ClassDVVClienteProd

On Error GoTo Erro_DVVCliente_Grava_Produto

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 119501
    Next
    
    'Verifico se existe o registro em custofixoprod
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM DVVClienteProd WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 119502

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119503

    Do While lErro = AD_SQL_SUCESSO

        'Faz o lock exclusivo do produto
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 119504

        'Exclui a relação da embalagem com o produto
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVClienteProd", alComando(0))
        If lErro <> SUCESSO Then gError 119505
        
        'Buscar o Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119506

    Loop

    'Para cada embalagem na coleção
    For Each objDVVClienteProd In objDVVCliente.colDVVCLienteProd
        
        lErro = Comando_Executar(alComando(2), "INSERT INTO DVVCLienteProd(FilialEmpresa, CodCliente, CodFilial, Produto, PercDVV, Paletizacao) VALUES (?,?,?,?,?,?)", objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial, objDVVClienteProd.sProduto, objDVVClienteProd.dPercDVV, objDVVClienteProd.iPaletizacao)
        If lErro <> AD_SQL_SUCESSO Then gError 119507
               
    Next
     
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    DVVCliente_Grava_Produto = SUCESSO

    Exit Function

Erro_DVVCliente_Grava_Produto:

    DVVCliente_Grava_Produto = gErr

    Select Case gErr
        
        Case 119501
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
             
        Case 119502, 119503, 119506
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTEPROD", gErr)
            
        Case 119504
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)
        
        Case 119505
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVCLIENTEPROD", gErr)
        
        Case 119507
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVCLIENTEPROD", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149939)
                
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function DVVCliente_Exclui(ByVal objDVVCliente As ClassDVVCliente) As Long
'exclui os registros das tabelas DVVCliente e DVVClienteProd

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim iIndice As Integer, iFilialEmpresa As Integer

On Error GoTo Erro_DVVCliente_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 119508

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 119509
    Next

    'Faz a leitura dos registros na tabela DVVCliente
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM DVVCliente WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 119510

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119511
    
    'se não encontrou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 119513
                
   'Faz o lock exclusivo do registro
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 119517
    
    'exclui o registro
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVCLiente", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 119514

    'Verifica se existe o registro em DVVClienteProd
    lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM DVVClienteProd WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 119518

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119519

    Do While lErro = AD_SQL_SUCESSO

        'Faz o lock exclusivo do registro
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then gError 119512

        'Exclui o registro na tabela DVVClienteProd
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM DVVClienteProd", alComando(2))
        If lErro <> SUCESSO Then gError 119515
        
        'Buscar o Próximo
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119516

    Loop

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116410
    
    DVVCliente_Exclui = SUCESSO

    Exit Function

Erro_DVVCliente_Exclui:

    DVVCliente_Exclui = gErr

    Select Case gErr

        Case 119509
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119508
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 119510, 119511
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTE", gErr)

        Case 119516, 119518, 119519
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTEPROD", gErr)

        Case 119513
            Call Rotina_Erro(vbOKOnly, "ERRO_DVVCLIENTE_NAO_ENCONTRADO", gErr)

        Case 119512, 119517
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 119514
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVCLIENTE", gErr)

        Case 119515
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVCLIENTEPROD", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149940)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Public Function RelMargContr_Grava(ByVal objMargContr As ClassMargContr) As Long
'grava os dados do relatorio nas tabelas temporárias para ser impresso

Dim lErro As Long
Dim lNumIntRel As Long
Dim lTransacao As Long

On Error GoTo Erro_RelMargContr_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 119612

    'obtem o nº automatico
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL", lNumIntRel)
    If lErro <> SUCESSO Then gError 119613
    
    'carrega o obj c/ o nº automatico
    objMargContr.lNumIntRel = lNumIntRel
    
    'grava na tabela RelMargContr
    lErro = CF("RelMargContr_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119614

    'grava na tabela RelMargContrCol
    lErro = CF("RelMargContrCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119615

    'grava na tabela RelMargContrLin
    lErro = CF("RelMargContrLin_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119616

    'grava na tabela RelMargContrLinCol
    lErro = CF("RelMargContrLinCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119617
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 119622
    
    RelMargContr_Grava = SUCESSO

    Exit Function

Erro_RelMargContr_Grava:

    RelMargContr_Grava = gErr

    Select Case gErr

        Case 119612
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_ABRIR", gErr)

        Case 119613 To 119617
        
        Case 119622
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149941)

    End Select
    
    Call Transacao_Rollback
    
    Exit Function
        
End Function

Public Function RelMargContr_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContr com o objMargContr passado como parametro

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_RelMargContr_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119618
    
    'grava na tabela RelMargContr
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContr(NumIntRel, CodCliente, CodFilial, CodVendedor, FilialFaturamento, Produto, Quantidade) VALUES (?,?,?,?,?,?,?)", objMargContr.lNumIntRel, objMargContr.lCodCliente, objMargContr.iCodFilial, objMargContr.iCodVendedor, objMargContr.iFilialFaturamento, objMargContr.sProduto, objMargContr.dQuantidade)
    If lErro <> AD_SQL_SUCESSO Then gError 119619

    'fecha o comando
    Call Comando_Fechar(lComando)

    RelMargContr_Grava_EmTrans = SUCESSO
    
    Exit Function

Erro_RelMargContr_Grava_EmTrans:

    RelMargContr_Grava_EmTrans = gErr

    Select Case gErr

        Case 119618
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119619
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARG", gErr)

    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RelMargContrLin_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContrLin a partir da col. passada no obj

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLin As ClassPlanMargContrLin, objDVVLin As ClassDVVLin

On Error GoTo Erro_RelMargContrLin_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119620
    
    'Para cada objRelMargContrLin na coleção
    For Each objPlanMargContrLin In objMargContr.colPlanMargContrLin
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLin(NumIntRel, TipoReg, Linha, Descricao, Formato) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDANALISE, objPlanMargContrLin.iLinha, objPlanMargContrLin.sDescricao, objPlanMargContrLin.iFormato)
        If lErro <> AD_SQL_SUCESSO Then gError 119621
                      
    Next
                 
    'Para cada objRelMargContrLin na coleção
    For Each objDVVLin In objMargContr.colDVVLin
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLin(NumIntRel, TipoReg, Linha, Descricao, Formato) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, objDVVLin.iLinha, objDVVLin.sDescricao, 4444) '??? trocar 4444 por cte devida
        If lErro <> AD_SQL_SUCESSO Then gError 119621
                      
    Next
                 
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    RelMargContrLin_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RelMargContrLin_Grava_EmTrans:

    RelMargContrLin_Grava_EmTrans = gErr

    Select Case gErr
        
        Case 119620
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 119621
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARGLIN", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149942)
                
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function RelMargContrLinCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContrLinCol a partir da col. passada no obj

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLinCol As ClassPlanMargContrLinCol, objDVVLinCol As ClassDVVLinCol

On Error GoTo Erro_RelMargContrLinCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119623
    
    'Para cada objPlanMargContrLinCol na coleção
    For Each objPlanMargContrLinCol In objMargContr.colPlanMargContrLinCol
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLinCol(NumIntRel, TipoReg, Linha, Coluna, Valor) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDANALISE, objPlanMargContrLinCol.iLinha, objPlanMargContrLinCol.iColuna, objPlanMargContrLinCol.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 119624
                              
    Next
     
    'Para cada objDVVLinCol na coleção
    For Each objDVVLinCol In objMargContr.colDVVLinCol
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLinCol(NumIntRel, TipoReg, Linha, Coluna, Valor) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, objDVVLinCol.iLinha, objDVVLinCol.iColuna, objDVVLinCol.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 119624
                              
    Next
     
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    RelMargContrLinCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RelMargContrLinCol_Grava_EmTrans:

    RelMargContrLinCol_Grava_EmTrans = gErr

    Select Case gErr
        
        Case 119623
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
                
        Case 119624
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARGLINCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149943)
                
    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RelMargContrCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContrCol a partir da col. passado no obj

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrCol As ClassPlanMargContrCol

On Error GoTo Erro_RelMargContrCol_Grava_EmTrans
    
    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119626
     
    'Para cada objPlanMargContrCol na coleção
    For Each objPlanMargContrCol In objMargContr.colPlanMargContrCol

        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDANALISE, objPlanMargContrCol.iColuna, objPlanMargContrCol.sTitulo)
        If lErro <> AD_SQL_SUCESSO Then gError 119627
                              
    Next
             
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, 1, "Padrão")
    If lErro <> AD_SQL_SUCESSO Then gError 119627
    
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, 2, "Cliente")
    If lErro <> AD_SQL_SUCESSO Then gError 119627
    
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, 3, "Simulação")
    If lErro <> AD_SQL_SUCESSO Then gError 119627
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    RelMargContrCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RelMargContrCol_Grava_EmTrans:

    RelMargContrCol_Grava_EmTrans = gErr

    Select Case gErr
        
        Case 119626
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 119627
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARGCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149944)
                
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function PlanMargContrCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava na tabela PlanMargContrCol

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrCol As ClassPlanMargContrCol

On Error GoTo Erro_PlanMargContrCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121009
    
    For Each objPlanMargContrCol In objMargContr.colPlanMargContrCol
    
        'Insere os dados na tabela PlanMargContrCol
        lErro = Comando_Executar(lComando, "INSERT INTO PlanMargContrCol (Coluna, Titulo, Descricao) VALUES (?,?,?)", objPlanMargContrCol.iColuna, objPlanMargContrCol.sTitulo, objPlanMargContrCol.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 121015
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    PlanMargContrCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrCol_Grava_EmTrans:

    PlanMargContrCol_Grava_EmTrans = gErr

    Select Case gErr

        Case 121045
        
        Case 121009
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 121015
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PLANMARGCONTRCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149945)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function PlanMargContrCol_Exclui_EmTrans() As Long
'Exclui dados da tabela PlanMargContrCol

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iColuna As Integer
Dim iIndice As Integer

On Error GoTo Erro_PlanMargContrCol_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121059
        
    Next
    
    'Executar comando SQL de busca na tabela PlanMargContrCol
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Coluna FROM PlanMargContrCol", 0, iColuna)
    If lErro <> AD_SQL_SUCESSO Then gError 121010

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121012
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121011

        'Executar comando SQL de busca na tabela PlanMargContrCol
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM PlanMargContrCol", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121013
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121014

    Loop
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PlanMargContrCol_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrCol_Exclui_EmTrans:

    PlanMargContrCol_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121059
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121011
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_PLANMARGCONTRCOL", gErr)

        Case 121010, 121012, 121014
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRCOL", gErr)
            
        Case 121013
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PLANMARGCONTRCOL", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149946)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function PlanMargContrLin_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava dados na tabela PlanMargContrLin

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLin As ClassPlanMargContrLin

On Error GoTo Erro_PlanMargContrLin_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121016
    
    For Each objPlanMargContrLin In objMargContr.colPlanMargContrLin
    
        'Insere os dados na tabela PlanMargContrLin
        lErro = Comando_Executar(lComando, "INSERT INTO PlanMargContrLin (Linha, Descricao, FormulaGeral, FormulaL1, Formato, Editavel) VALUES (?,?,?,?,?,?)", objPlanMargContrLin.iLinha, objPlanMargContrLin.sDescricao, objPlanMargContrLin.sFormulaGeral, objPlanMargContrLin.sFormulaL1, objPlanMargContrLin.iFormato, objPlanMargContrLin.iEditavel)
        If lErro <> AD_SQL_SUCESSO Then gError 121022
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    PlanMargContrLin_Grava_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLin_Grava_EmTrans:

    PlanMargContrLin_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 121062

        Case 121016
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121022
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PLANMARGCONTRLIN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149947)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function PlanMargContrLin_Exclui_EmTrans() As Long
'Grava dados na tabela PlanMargContrLin

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iLinha As Integer
Dim iIndice As Integer

On Error GoTo Erro_PlanMargContrLin_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121060
        
    Next
    
    'Executar comando SQL de busca na tabela PlanMargContrLin
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Linha FROM PlanMargContrLin", 0, iLinha)
    If lErro <> AD_SQL_SUCESSO Then gError 121017

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121019
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121018
        
        'Executar comando SQL de busca na tabela PlanMargContrLin
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM PlanMargContrLin", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121020
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121021

    Loop
        
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PlanMargContrLin_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLin_Exclui_EmTrans:

    PlanMargContrLin_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121060
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121017, 121019, 121021
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRLIN", gErr)
            
        Case 121018
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_PLANMARGCONTRLIN", gErr)

        Case 121020
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PLANMARGCONTRLIN", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149948)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        
        Call Comando_Fechar(alComando(iIndice))
    
    Next
                
    Exit Function

End Function

Public Function PlanMargContrLinCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava dados na tabela PlaMargContrLinCol

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLinCol As ClassPlanMargContrLinCol

On Error GoTo Erro_PlanMargContrLinCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121023
    
    For Each objPlanMargContrLinCol In objMargContr.colPlanMargContrLinCol
    
        'Insere os dados na tabela PlaMargContrLinCol
        lErro = Comando_Executar(lComando, "INSERT INTO PlanMargContrLinCol (Coluna, Linha, Formula) VALUES (?,?,?)", objPlanMargContrLinCol.iColuna, objPlanMargContrLinCol.iLinha, objPlanMargContrLinCol.sFormula)
        If lErro <> AD_SQL_SUCESSO Then gError 121029
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    PlanMargContrLinCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLinCol_Grava_EmTrans:

    PlanMargContrLinCol_Grava_EmTrans = gErr

    Select Case gErr

        Case 121063
        
        Case 121023
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121029
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PLANMARGCONTRLINCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149949)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function PlanMargContrLinCol_Exclui_EmTrans() As Long
'Exclui dados da tabela PlaMargContrLinCol

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iColuna As Integer
Dim iIndice As Integer

On Error GoTo Erro_PlanMargContrLinCol_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121061
        
    Next
    
    'Executar comando SQL de busca na tabela PlaMargContrLinCol
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Coluna FROM PlanMargContrLinCol", 0, iColuna)
    If lErro <> AD_SQL_SUCESSO Then gError 121024

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121026

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121025
        
        'Executar comando SQL de busca na tabela PlaMargContrLinCol
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM PlanMargContrLinCol", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121027
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121028

    Loop
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PlanMargContrLinCol_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLinCol_Exclui_EmTrans:

    PlanMargContrLinCol_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121061
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121024, 121026, 121028
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRLINCOL", gErr)
            
        Case 121025
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_PLANMARGCONTRLINCOL", gErr)

        Case 121027
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PLANMARGCONTRLINCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149950)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function DVVLin_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava dados na tabela DVVLin

Dim lErro As Long
Dim lComando As Long
Dim objDVVLin As ClassDVVLin

On Error GoTo Erro_DVVLin_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121030
    
    For Each objDVVLin In objMargContr.colDVVLin
    
        'Insere os dados na tabela DvvLin
        lErro = Comando_Executar(lComando, "INSERT INTO DVVLin (Linha, Descricao) VALUES (?,?)", objDVVLin.iLinha, objDVVLin.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 121036
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    DVVLin_Grava_EmTrans = SUCESSO

    Exit Function

Erro_DVVLin_Grava_EmTrans:

    DVVLin_Grava_EmTrans = gErr

    Select Case gErr

        Case 121064
        
        Case 121030
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121036
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVLIN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149951)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function DVVLin_Exclui_EmTrans() As Long
'Exclui dados na tabela DVVLin

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iLinha As Integer

On Error GoTo Erro_DVVLin_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121057
        
    Next
        
    'Executar comando SQL de busca na tabela DVVLin
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Linha FROM DVVLin", 0, iLinha)
    If lErro <> AD_SQL_SUCESSO Then gError 121031

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121033
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121032
    
        'Executar comando SQL de busca na tabela DVVLIn
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVLin", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121034
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121035

    Loop
            
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DVVLin_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_DVVLin_Exclui_EmTrans:

    DVVLin_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121057
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121031, 121033, 121035
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVLIN", gErr)

        Case 121032
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_DVVLIN", gErr)

        Case 121034
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVLIN", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149952)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function DVVLinCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava na tabela DvvLinCol

Dim lErro As Long
Dim lComando As Long
Dim objDVVLinCol As ClassDVVLinCol

On Error GoTo Erro_DVVLinCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121037
    
    For Each objDVVLinCol In objMargContr.colDVVLinCol
    
        'Insere os dados na tabela DvvLIncol
        lErro = Comando_Executar(lComando, "INSERT INTO DVVLinCol (Coluna, Linha, Formula) VALUES (?,?,?)", objDVVLinCol.iColuna, objDVVLinCol.iLinha, objDVVLinCol.sFormula)
        If lErro <> AD_SQL_SUCESSO Then gError 121043
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    DVVLinCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_DVVLinCol_Grava_EmTrans:

    DVVLinCol_Grava_EmTrans = gErr

    Select Case gErr

        Case 121065
        
        Case 121037
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121043
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVLINCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149953)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function DVVLinCol_Exclui_EmTrans() As Long
'Exclui dados da tabela DvvLinCol

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iColuna As Integer
Dim iIndice As Integer

On Error GoTo Erro_DVVLinCol_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121058
        
    Next
    
    'Executar comando SQL de busca na tabela DVVLinCol
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Coluna FROM DVVLinCol", 0, iColuna)
    If lErro <> AD_SQL_SUCESSO Then gError 121038

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121040

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121039
        
        'Executar comando SQL de busca na tabela DVVLinCol
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVLinCol", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121041
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121042

    Loop
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DVVLinCol_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_DVVLinCol_Exclui_EmTrans:

    DVVLinCol_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121058
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121038, 121040, 121042
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVLINCOL", gErr)

        Case 121039
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_DVVLINCOL", gErr)

        Case 121041
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVLINCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149954)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function PlanMargContrConfig_Grava(ByVal objMargContr As ClassMargContr) As Long
'Aciona as rotinas de gravação nas tabelas PlanMargContrCol, PlanMargContrLinCol,
'PlanMargContrLin, DvvLinCol, DvvLin

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_PlanMargContrConfig_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116889

    lErro = PlanMargContrConfig_Exclui_EmTrans
    If lErro <> SUCESSO Then gError 106656
    
    'Chama função que grava na tabela : PlanMargContrCol
    lErro = CF("PlanMargContrCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 116890
    
    'Chama função que grava na tabela : PlanMargContrLin
    lErro = CF("PlanMargContrLin_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121046

    'Chama função que grava na tabela : PlanMargContrLinCol
    lErro = CF("PlanMargContrLinCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121047

    'Chama função que grava na tabela : DVVLin_Grava
    lErro = CF("DVVLin_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121048

    'Chama função que grava na tabela : DVVLinCol_Grava_EmTrans
    lErro = CF("DVVLinCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121049

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116892
    
    PlanMargContrConfig_Grava = SUCESSO

    Exit Function

Erro_PlanMargContrConfig_Grava:

    PlanMargContrConfig_Grava = gErr

    Select Case gErr
    
        Case 116890, 121046 To 121049, 106656

        Case 116889
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116892
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149955)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function PlanMargContrConfig_Exclui() As Long
'aciona rotinas de exclusão de dados

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_PlanMargContrConfig_Exclui

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 121050

    lErro = PlanMargContrConfig_Exclui_EmTrans
    If lErro <> SUCESSO Then gError 106655

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 121056
    
    PlanMargContrConfig_Exclui = SUCESSO

    Exit Function

Erro_PlanMargContrConfig_Exclui:

    PlanMargContrConfig_Exclui = gErr

    Select Case gErr
    
        Case 106655

        Case 121050
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 121056
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149956)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function PlanMargContrConfig_Exclui_EmTrans() As Long
'aciona rotinas de exclusão de dados

Dim lErro As Long

On Error GoTo Erro_PlanMargContrConfig_Exclui_EmTrans

    'Chama função que Exclui dados da tabela PlanMargContrCol
    lErro = CF("PlanMargContrCol_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121051
    
    'Chama função que Exclui dados da tabela PlanMargContrLin
    lErro = CF("PlanMargContrLin_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121052

    'Chama função que Exclui dados da tabela PlanMargContrLinCol
    lErro = CF("PlanMargContrLinCol_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121053

    'Chama função que Exclui dados da tabela DVVLin
    lErro = CF("DVVLin_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121054

    'Chama função que Exclui dados da tabela DvvLinCol
    lErro = CF("DVVLinCol_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121055

    PlanMargContrConfig_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrConfig_Exclui_EmTrans:

    PlanMargContrConfig_Exclui_EmTrans = gErr

    Select Case gErr
    
        Case 121051 To 121555

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149957)

    End Select

    Exit Function

End Function

Function RelListaPrecoCalc_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataAtual As Date, ByVal dtDataAnt As Date, ByVal sProdIni As String, ByVal sProdFim As String) As Long
'gera registros na tabela RelListaPrecoCalc para a execucao do relatorio de lista de precos

Dim lErro As Long, dQtdeOrcada As Double, lTransacao As Long
Dim iIndice As Integer, alComando(1 To 4) As Long, sProduto As String
Dim dCustoMPAnt As Double, dCustoEmbAnt As Double, dCustoFreteAnt As Double, dCustoDiretoAnt As Double, dCustoFixoAnt As Double, dDVVSemICMSAnt As Double, dDevDuvAnt As Double
Dim dCustoMPAtual As Double, dCustoEmbAtual As Double, dCustoFreteAtual As Double, dCustoDiretoAtual As Double, dCustoFixoAtual As Double, dDVVSemICMSAtual As Double, dDevDuvAtual As Double
Dim dPrecoCalc1Atual As Double, dPrecoCalc2Atual As Double, dPrecoCalc3Atual As Double, dPrecoCalc2Ant As Double, dPrecoVenda2Ant As Double, dPrecoVenda2Atual As Double

On Error GoTo Erro_RelListaPrecoCalc_Prepara

    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 106940
    Next
    
    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 106941

    'obtem o nº automatico
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL", lNumIntRel)
    If lErro <> SUCESSO Then gError 106942
    
    dQtdeOrcada = 0 '??? falta obter media mensal do ano, usando a previsao ???
    
    sProduto = String(STRING_PRODUTO, 0)
    
    If sProdIni = "" And sProdFim = "" Then
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ?", sProduto, iFilialEmpresa, dtDataAtual)
    ElseIf sProdIni <> "" And sProdFim = "" Then
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND Produto >= ?", sProduto, iFilialEmpresa, dtDataAtual, sProdIni)
    ElseIf sProdIni = "" And sProdFim <> "" Then
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND Produto <= ?", sProduto, iFilialEmpresa, dtDataAtual, sProdFim)
    Else
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND Produto >= ? AND Produto <= ?", sProduto, iFilialEmpresa, dtDataAtual, sProdIni, sProdFim)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 106943
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106944
    
    Do While lErro = AD_SQL_SUCESSO
    
        'obter valores do calculo anterior
        lErro = RelListaPrecoCalc_Prepara1(iFilialEmpresa, dtDataAnt, 1, sProduto, dCustoMPAnt, dCustoEmbAnt, dCustoFreteAnt, dCustoDiretoAnt, dCustoFixoAnt, dDVVSemICMSAnt, dDevDuvAnt, alComando())
        If lErro <> SUCESSO Then gError 106945
        
        'obter preco de venda anterior da tabela 2
        lErro = CF("Produto_ObtemPrecoData", iFilialEmpresa, 2, sProduto, dtDataAnt, dPrecoVenda2Ant)
        If lErro <> SUCESSO Then gError 106946
        
        'obter valores do calculo atual
        lErro = RelListaPrecoCalc_Prepara1(iFilialEmpresa, dtDataAtual, 1, sProduto, dCustoMPAtual, dCustoEmbAtual, dCustoFreteAtual, dCustoDiretoAtual, dCustoFixoAtual, dDVVSemICMSAtual, dDevDuvAtual, alComando())
        If lErro <> SUCESSO Then gError 106947
        
        'obter preco de venda atual da tabela 2
        lErro = CF("Produto_ObtemPrecoData", iFilialEmpresa, 2, sProduto, dtDataAtual, dPrecoVenda2Atual)
        If lErro <> SUCESSO Then gError 106948
        
        'obter preco calculado atual da tabela 1
        lErro = RelListaPrecoCalc_Prepara2(iFilialEmpresa, dtDataAtual, 1, sProduto, dPrecoCalc1Atual, alComando())
        If lErro <> SUCESSO Then gError 106949
        
        'obter preco calculado atual da tabela 2
        lErro = RelListaPrecoCalc_Prepara2(iFilialEmpresa, dtDataAtual, 2, sProduto, dPrecoCalc2Atual, alComando())
        If lErro <> SUCESSO Then gError 106950
        
        'obter preco calculado atual da tabela 3
        lErro = RelListaPrecoCalc_Prepara2(iFilialEmpresa, dtDataAtual, 3, sProduto, dPrecoCalc3Atual, alComando())
        If lErro <> SUCESSO Then gError 106951
        
        'grava o registro na tabela
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelListaPrecoCalc (NumIntRel, Produto, QtdeOrcada, CustoMPAnt, CustoEmbAnt, CustoFreteAnt, CustoMPAtual, CustoEmbAtual, CustoFreteAtual, CustoDiretoAtual, CustoFixoAtual, DVVSemICMSAtual, DevDuvAtual, PrecoCalc1Atual, PrecoCalc2Atual, PrecoCalc3Atual, PrecoCalc2Ant, PrecoVenda2Ant, PrecoVenda2Atual) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            lNumIntRel, sProduto, dQtdeOrcada, dCustoMPAnt, dCustoEmbAnt, dCustoFreteAnt, dCustoMPAtual, dCustoEmbAtual, dCustoFreteAtual, dCustoDiretoAtual, dCustoFixoAtual, dDVVSemICMSAtual, dDevDuvAtual, dPrecoCalc1Atual, dPrecoCalc2Atual, dPrecoCalc3Atual, dPrecoCalc2Ant, dPrecoVenda2Ant, dPrecoVenda2Atual)
        If lErro <> AD_SQL_SUCESSO Then gError 106952
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106944
    
    Loop
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 106953
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    RelListaPrecoCalc_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelListaPrecoCalc_Prepara:

    RelListaPrecoCalc_Prepara = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149958)
     
    End Select
     
    Call Transacao_Rollback
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    Exit Function

End Function

Private Function RelListaPrecoCalc_Prepara1(ByVal iFilialEmpresa As Integer, ByVal dtData As Date, ByVal iTabelaPreco As Integer, ByVal sProduto As String, dCustoMP As Double, dCustoEmb As Double, dCustoFrete As Double, dCustoDireto As Double, dCustoFixo As Double, dDVVSemICMS As Double, dDevDuv As Double, alComando() As Long) As Long
'obtem valores correspondentes à estas colunas:
'CustoMP , CustoEmb, CustoFrete, CustoDireto, CustoFixo, DVVSemICMS, DevDuv

Dim lErro As Long, sExpressao As String, dValor As Double

On Error GoTo Erro_RelListaPrecoCalc_Prepara1

    'inicializa valores
    dCustoMP = 0
    dCustoEmb = 0
    dCustoFrete = 0
    dCustoDireto = 0
    dCustoFixo = 0
    dDVVSemICMS = 0
    dDevDuv = 0

    sExpressao = String(STRING_FORMACAOPRECO_EXPRESSAO, 0)
    
    lErro = Comando_Executar(alComando(3), "SELECT Expressao, Valor FROM FormacaoPrecoCalcLin WHERE FilialEmpresa = ? AND Data = ? AND TabelaPreco = ? AND Produto = ?", _
        sExpressao, dValor, iFilialEmpresa, dtData, iTabelaPreco, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 106937
        
    lErro = Comando_BuscarProximo(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106938
            
    Do While lErro = AD_SQL_SUCESSO
    
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTOMP, vbTextCompare) <> 0 Then dCustoMP = dValor
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTOEMB, vbTextCompare) <> 0 Then dCustoEmb = dValor
        If InStr(1, sExpressao, "ValorCategoria(""DVV"",3)", vbTextCompare) <> 0 Then dCustoFrete = dValor
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTODIRETO, vbTextCompare) <> 0 Then dCustoDireto = dValor
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTOFIXO, vbTextCompare) <> 0 Then dCustoFixo = dValor
        If InStr(1, sExpressao, "ValorCategoria(""DVV"",1)", vbTextCompare) <> 0 Then dDVVSemICMS = dValor
        If InStr(1, sExpressao, "DevDuvPadrao", vbTextCompare) <> 0 Then dDevDuv = dValor
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106939
    
    Loop
        
    RelListaPrecoCalc_Prepara1 = SUCESSO
     
    Exit Function
    
Erro_RelListaPrecoCalc_Prepara1:

    RelListaPrecoCalc_Prepara1 = gErr
     
    Select Case gErr
          
        Case 106937, 106938, 106939
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORMACAOPRECOCALCLIN", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149959)
     
    End Select
     
    Exit Function

End Function

Private Function RelListaPrecoCalc_Prepara2(ByVal iFilialEmpresa As Integer, ByVal dtData As Date, ByVal iTabelaPreco As Integer, ByVal sProduto As String, dPrecoCalc As Double, alComando() As Long) As Long
'obtem o preco calculado pela rotina de calculo de precos

Dim lErro As Long, dValor As Double

On Error GoTo Erro_RelListaPrecoCalc_Prepara2

    lErro = Comando_Executar(alComando(4), "SELECT Valor FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND TabelaPreco = ? AND Produto = ?", _
        dValor, iFilialEmpresa, dtData, iTabelaPreco, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 106954
        
    lErro = Comando_BuscarProximo(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106955

    If lErro = AD_SQL_SUCESSO Then
        dPrecoCalc = dValor
    Else
        dPrecoCalc = 0
    End If
    
    RelListaPrecoCalc_Prepara2 = SUCESSO
     
    Exit Function
    
Erro_RelListaPrecoCalc_Prepara2:

    RelListaPrecoCalc_Prepara2 = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149960)
     
    End Select
     
    Exit Function

End Function

Function RelCustoCOMCustoFP_Prepara(ByVal iFilialEmpresa As Integer, lNumIntRel As Long) As Long
'Insere registros em RElCustoComCustoFP referentes a produtos atributos para efeito de formacao de precos
'comparados com o preço utilizado no ultimo pedido de compras enviado.

Dim alComando(1 To 3) As Long
Dim lErro As Long
Dim lTransacao As Long
Dim sProduto As String, iClasseUM As Integer
Dim sFPUM As String, dFPCusto As Double, dtFPDataAtualizacao As Date, dFPAliquotaICMS As Double, iFPCondicaoPagto As Integer
Dim iIndice As Integer, dFator As Double
Dim lNumIntDoc As Long, dtData As Date, sUM As String, iMoeda As Integer, dTaxa As Double, dAliquotaICMS As Double, iCondicaoPagto As Integer, dPrecoUnitario As Double
Dim objCotacao As ClassCotacaoMoeda
Dim objCotacaoAnterior As ClassCotacaoMoeda

On Error GoTo Erro_RelCustoCOMCustoFP_Prepara
    
    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 123211
    
    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = SUCESSO Then gError 123212
    Next
    
    'Obtem o próximo NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_CUSTOFPCOM", lNumIntRel)
    If lErro <> SUCESSO Then gError 123217
        
    'inicializa as strings
    sProduto = String(STRING_PRODUTO, 0)
    sFPUM = String(STRING_UM_SIGLA, 0)
    
    'Busca a maior data daquele produto
    lErro = Comando_Executar(alComando(1), "SELECT Produtos.ClasseUM, Produtos.SiglaUMEstoque, Produto, Custo, DataAtualizacao, AliquotaICMS, CondicaoPagto FROM CustoEmbMP, Produtos WHERE CustoEmbMP.Produto = Produtos.Codigo AND FilialEmpresa = ? ORDER BY Produto", _
        iClasseUM, sFPUM, sProduto, dFPCusto, dtFPDataAtualizacao, dFPAliquotaICMS, iFPCondicaoPagto, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 123213
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 123214
    
    Do While lErro = AD_SQL_SUCESSO
    
        '??? depois ver necessidade de considerar desconto
    
        sUM = String(STRING_UM_SIGLA, 0)
    
        'Busca informacoes sobre o ultimo pedido de compras enviado referente ao produto.
        lErro = Comando_Executar(alComando(2), "SELECT ItensPedCompraN.UM, ItensPedCompraN.NumIntDoc, ItensPedCompraN.PrecoUnitario, ItensPedCompraN.AliquotaICMS, PedidoCompraN.CondicaoPagto, PedidoCompraN.Moeda, PedidoCompraN.Taxa FROM ItensPedCompraN, PedidoCompraN WHERE ItensPedCompraN.PedCompra = PedidoCompraN.NumIntDoc AND PedidoCompraN.FilialEmpresa = ? AND PedidoCompraN.DataEnvio <> ? AND ItensPedCompraN.Produto = ? ORDER BY PedidoCompraN.Data DESC, PedidoCompraN.Codigo DESC", _
            sUM, lNumIntDoc, dPrecoUnitario, dAliquotaICMS, iCondicaoPagto, iMoeda, dTaxa, iFilialEmpresa, DATA_NULA, sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 123215
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 123216
    
        If lErro = SUCESSO Then
        
            'Verifica se a moeda não é a Real
            If iMoeda <> MOEDA_REAL Then
                
                'Verifica se a taxa foi preenchida e realiza a conversão
                If dTaxa = 0 Then
                
                    objCotacao.dtData = gdtDataAtual
                    objCotacao.iMoeda = iMoeda
                    lErro = CF("CotacaoMoeda_Le_UltimasCotacoes", objCotacao, objCotacaoAnterior)
                    If lErro <> SUCESSO Then gError 106960
                    
                    If objCotacao.dValor <> 0 Then
                        dTaxa = objCotacao.dValor
                    Else
                        If objCotacaoAnterior.dValor <> 0 Then
                            dTaxa = objCotacaoAnterior.dValor
                        End If
                    End If
                
                    dFPCusto = dFPCusto * dTaxa
                    
                End If
                
            Else
            
                dTaxa = 1
                
            End If
            
            If sFPUM <> sUM Then
                
                lErro = CF("UM_Conversao", iClasseUM, sFPUM, sUM, dFator)
                If lErro <> SUCESSO Then gError 106961
                
                dPrecoUnitario = dPrecoUnitario * dFator
                
            End If
            
            '??? depois incluir diferencas de aliqicms, condpgto
            
            If (dPrecoUnitario - dFPCusto) > DELTA_VALORMONETARIO Then
            
                'Realiza a gravação
                lErro = Comando_Executar(alComando(3), "INSERT INTO RelCustoCOMCustoFP (NumIntRel, FilialEmpresa, Produto, NumIntItemPedCompra, Taxa, PrecoUnitario) VALUES (?,?,?,?,?,?)", lNumIntRel, iFilialEmpresa, sProduto, lNumIntDoc, dTaxa, dPrecoUnitario)
                If lErro <> AD_SQL_SUCESSO Then gError 123218
        
            End If
    
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 123219
        
    Loop
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 123220
    
    RelCustoCOMCustoFP_Prepara = SUCESSO
            
    Exit Function
    
Erro_RelCustoCOMCustoFP_Prepara:

    RelCustoCOMCustoFP_Prepara = gErr
    
    Select Case gErr
        
        Case 123211
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 123212
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 123213, 123214, 123215, 123216, 123219
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMP", gErr)
            
        Case 123217, 106960, 106961
        
        Case 123218
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCUSTOCOMCUSTOFP", gErr)
            
        Case 123220
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149961)
        
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function RelCriticasFP_Prepara(ByVal iFilialEmpresa As Integer, ByVal sCodPrev As String, ByVal dtDataRef As Date, lNumIntRel As Long) As Long
'preenche arquivo auxiliar ao relatorio identificando produtos com informacoes faltando que afetem rotinas de formacao de precos.

Dim lErro As Long
Dim alComando(1 To 4) As Long, lTransacao As Long, iIndice As Integer
Dim sProduto As String

On Error GoTo Erro_RelCriticasFP_Prepara

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 106965
    
    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = SUCESSO Then gError 106966
    Next
    
    'Obtem o próximo NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL", lNumIntRel)
    If lErro <> SUCESSO Then gError 106967
        
    'verificar se existem produtos para os quais existe previsao de venda que nao estao classificados p/rateio de custo fixo
    If giSQLTipoOrdParam = SQL_ORD_PARAM_ESQ_DIR Then
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, Produto, 1 FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND NOT EXISTS (SELECT Produto FROM ProdutoCategoria WHERE ProdutoCategoria.Categoria = ? AND ProdutoCategoria.Produto = PrevVendaMensal.Produto ))", _
            lNumIntRel, iFilialEmpresa, sCodPrev, Year(dtDataRef), gobjFAT.sCategCustoFixo)
    Else
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, Produto, 1 FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND NOT EXISTS (SELECT Produto FROM ProdutoCategoria WHERE ProdutoCategoria.Categoria = ? AND ProdutoCategoria.Produto = PrevVendaMensal.Produto ))", _
            gobjFAT.sCategCustoFixo, lNumIntRel, iFilialEmpresa, sCodPrev, Year(dtDataRef))
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 106968
    
    'verificar produtos para os quais existe previsao de venda mas nao tinham kit definido
    lErro = Comando_Executar(alComando(2), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, Produto, 2 FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND NOT EXISTS (SELECT ProdutoRaiz FROM Kit WHERE Kit.ProdutoRaiz = PrevVendaMensal.Produto ))", _
        lNumIntRel, iFilialEmpresa, sCodPrev, Year(dtDataRef))
    If lErro <> AD_SQL_SUCESSO Then gError 106970
    
    'verificar se existem mps, rotulos,... que nao tenham custo definido
    lErro = Comando_Executar(alComando(3), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, ProdutoMP, 3 FROM CustoDirFabrPlanMP WHERE FilialEmpresa = ? AND Ano = ? AND NOT EXISTS (SELECT ProdutoMP FROM CustoEmbMP WHERE CustoEmbMP.FilialEmpresa = CustoDirFabrPlanMP.FilialEmpresa AND CustoEmbMP.Produto = CustoDirFabrPlanMP.ProdutoMP))", _
        lNumIntRel, iFilialEmpresa, Year(dtDataRef))
    If lErro <> AD_SQL_SUCESSO Then gError 106971
    
    'verificar se existem embalagens que nao tenham custo definido
    lErro = Comando_Executar(alComando(4), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, ProdutoEmb, 4 FROM CustoDirFabrPlanEmb WHERE FilialEmpresa = ? AND Ano = ? AND NOT EXISTS (SELECT ProdutoEmb FROM CustoEmbMP WHERE CustoEmbMP.FilialEmpresa = CustoDirFabrPlanEmb.FilialEmpresa AND CustoEmbMP.Produto = CustoDirFabrPlanEmb.ProdutoEmb))", _
        lNumIntRel, iFilialEmpresa, Year(dtDataRef))
    If lErro <> AD_SQL_SUCESSO Then gError 106972
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 106969
    
    RelCriticasFP_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelCriticasFP_Prepara:

    RelCriticasFP_Prepara = gErr
     
    Select Case gErr
          
        Case 106965
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 106966
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 106967
        
        Case 106968, 106970, 106971, 106972
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCRITICASFP", gErr)
        
        Case 106969
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149962)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Grava(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Dispara a gravação de Campos Genéricos

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_CamposGenericos_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102346
    
    'Atualiza a tabela CamposGenericos
    lErro = CF("CamposGenericos_Grava_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102347
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 102348
    
    CamposGenericos_Grava = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_Grava:

    CamposGenericos_Grava = gErr

    Select Case gErr
    
        Case 102346
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 102347
        
        Case 102348
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149963)
    
    End Select
    
    Call Transacao_Rollback
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Grava_EmTrans(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Faz o lock do campo que está sendo alterado
'Atualiza informações do campo
'Grava os valores do campo
'DEVE SER CHAMADA EM TRANSAÇÃO

Dim iIndice As Integer
Dim alComando(0 To 1) As Long
Dim lErro As Long
Dim lCodigo As Long

On Error GoTo Erro_CamposGenericos_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102339
    Next

    '*** LOCK DO CAMPO QUE SERÁ ALTERADO ***
    'Seleciona o Campo Genérico a ser alterado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM CamposGenericos WHERE Codigo =?", 0, lCodigo, objCamposGenericos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 102340

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102341

    'Não encontrou a Tabela de Preço --> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102342

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 102343
    '*** FIM DO LOCK ************************
    
    'Atualiza o campo CodProxValor na tabela CamposGenericos
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE CamposGenericos SET ProxCodValor = ?", alComando(0), objCamposGenericos.lProxCodValor)
    If lErro <> AD_SQL_SUCESSO Then gError 102344
    
    'Grava os valores para o campo em questão
    lErro = CF("CamposGenericosValores_Grava_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102345
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CamposGenericos_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_Grava_EmTrans:

    CamposGenericos_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 102345
        
        Case 102339
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102340, 102341
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
            
        Case 102342
            Call Rotina_Erro(vbOKOnly, "ERRO_CAMPOGENERICO_NAO_ENCONTRADO", gErr, objCamposGenericos.lCodigo)
            
        Case 102343
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
        
        Case 102344
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149964)
    
    End Select
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Grava_EmTrans(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Exclui os valores do campo em questão
'Insere os novos valores para o campo
'Verifica se não gerou inconsistência no BD
'DEVE SER CHAMADA EM TRANSAÇÃO

Dim iIndice As Integer
Dim alComando(0) As Long
Dim lErro As Long
Dim objCamposGenericosValores As ClassCamposGenericosValores

On Error GoTo Erro_CamposGenericosValores_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102357
    Next
    
    'Exclui os valores do campo em questão
    lErro = CF("CamposGenericosValores_Exclui_EmTrans", objCamposGenericos, False)
    If lErro <> SUCESSO Then gError 102354
    
    'Para cada valor a ser gravado para o campo em questão
    For Each objCamposGenericosValores In objCamposGenericos.colCamposGenericosValores
    
        'Insere o valor no BD
        lErro = Comando_Executar(alComando(0), "INSERT INTO CamposGenericosValores( CodCampo, CodValor, Padrao, Valor, Complemento1, Complemento2, Complemento3, Complemento4, Complemento5) VALUES (?,?,?,?,?,?,?,?,?)", objCamposGenericos.lCodigo, objCamposGenericosValores.lCodValor, objCamposGenericosValores.iPadrao, objCamposGenericosValores.sValor, objCamposGenericosValores.sComplemento1, objCamposGenericosValores.sComplemento2, objCamposGenericosValores.sComplemento3, objCamposGenericosValores.sComplemento4, objCamposGenericosValores.sComplemento5)
        If lErro <> AD_SQL_SUCESSO Then gError 102355
    
    Next

    'Verifica se não foi excluído algum valor que já tenha sido utilizado em outro local (teste de consistência)
    If Len(Trim(objCamposGenericos.sValidaExclusao)) <> 0 Then
        lErro = CF(objCamposGenericos.sValidaExclusao)
        If lErro <> SUCESSO Then gError 102356
    End If
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CamposGenericosValores_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_CamposGenericosValores_Grava_EmTrans:

    CamposGenericosValores_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 102354, 102356
        
        Case 102357
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102355
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CAMPOSGENERICOSVALORES", gErr, objCamposGenericosValores.sValor, objCamposGenericos.lCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149965)
    
    End Select
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Exclui(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Exclui os valores de um determinado campo genérico

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CamposGenericosValores_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102380
    
    'Exclui os valores para o campo passado como parâmetro
    lErro = CF("CamposGenericosValores_Exclui_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102381
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 102382
    
    CamposGenericosValores_Exclui = SUCESSO
    
    Exit Function
    
Erro_CamposGenericosValores_Exclui:

    CamposGenericosValores_Exclui = gErr
    
    Select Case gErr
    
        Case 102380
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 102381
            
        Case 102382
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149966)
    
    End Select
    
    Call Transacao_Rollback
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Exclui_EmTrans(ByVal objCamposGenericos As ClassCamposGenericos, Optional ByVal bValidaExclusao As Boolean = True) As Long
'Exclui os valores de um determinado campo genérico
'DEVE SER CHAMADA EM TRANSAÇÃO

Dim iIndice As Integer
Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lCodValor As Long
Dim sValor As String

On Error GoTo Erro_CamposGenericosValores_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102349
    Next
    
    'Inicializa a string valor
    sValor = String(STRING_CAMPOSGENERICOSVALORES_VALOR, 0)
    
    'Lê os valores do campo passado como parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT CodValor, Valor FROM CamposGenericosValores WHERE CodCampo = ?", 0, lCodValor, sValor, objCamposGenericos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 102350
    
    'Busca o primeiro valor
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102351
    
    'Enquanto houverem valores
    Do While lErro = AD_SQL_SUCESSO
    
        'Exclui o valor do BD
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CamposGenericosValores", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 102353
        
        'Busca o próximo valor
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102352
    
    Loop
    
    'Se é para validar a exclusão
    'Obs.: a exclusão não é validada quando é chamada na gravação. Nesse
    'caso, a validação é chamada na própria função de gravação, depois que
    'os registros forem inseridos
    If bValidaExclusao Then
    
        'Verifica se não foi excluído algum valor que já tenha sido utilizado em outro local (teste de consistência)
        lErro = CF(objCamposGenericos.sValidaExclusao)
        If lErro <> SUCESSO Then gError 102405
    
    End If
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CamposGenericosValores_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_CamposGenericosValores_Exclui_EmTrans:

    CamposGenericosValores_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 102405
        
        Case 102349
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 102350 To 102352
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOSVALORES", gErr, objCamposGenericos.lCodigo)
            
        Case 102353
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, sValor, objCamposGenericos.lCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149967)
    
    End Select
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Public Function CamposGenericos_CorrigeBD_MarcaEspecie(ByVal lCodCampo As Long) As Long
'Verifica qual campo deve ser lido na tabela de PedidosDeVenda/PedidosDeVendaBaixados/NFiscal (espécie ou marca)
'Lê os valores para o campo passado como parâmetro
'Monta um objCamposGenericos guardando os valores lidos
'Efetua a gravação nas tabelas CamposGenericos e CamposGenericosValores
'Atualiza as tabelas PedidosDeVenda/PedidosDeVendaBaixados/NFiscal para que ao invés de conteúdo, elas guardem o código de espécie/marca
'Essa função deve ser utilizada quandoo recurso de cadastro de Espécie/Marca de volumes for
'incluído em versões do Corporator já instaladas em clientes

Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim lErro As Long
Dim objCamposGenericos As New ClassCamposGenericos
Dim objCamposGenericosValores As ClassCamposGenericosValores
Dim lCodValor As Long
Dim sMarcaEspecie As String
Dim sSelect As String
Dim asUpdate(0 To 2) As String
Dim iIndice As Long

On Error GoTo Erro_CamposGenericos_CorrigeBD_MarcaEspecie

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102367
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102368
    Next
    
    'inicializa a string
    sMarcaEspecie = String(STRING_NFISCAL_VOLUME_MARCA, 0)
    
    'Determina o select que será feito
    Select Case lCodCampo
    
        Case CAMPOSGENERICOS_VOLUMEESPECIE
            sSelect = "SELECT DISTINCT Trim(VolumeEspecie) FROM NFiscal WHERE Len(Trim(VolumeEspecie)>0 UNION SELECT DISTINCT Trim(VolumeEspecie) FROM PedidosDeVenda WHERE Len(Trim(VolumeEspecie))>0 UNION SELECT DISTINCT Trim(VolumeEspecie) FROM PedidosDeVendaBaixados WHERE Len(Trim(VolumeEspecie))>0 ORDER BY VolumeEspecie"
            asUpdate(0) = "UPDATE NFiscal SET VolumeEspecie = ? WHERE VolumeEspecie = ?"
            asUpdate(1) = "UPDATE PedidosDeVenda SET VolumeEspecie = ? WHERE VolumeEspecie = ?"
            asUpdate(2) = "UPDATE PedidosDeVendaBaixados SET VolumeEspecie = ? WHERE VolumeEspecie = ?"
            objCamposGenericos.sValidaExclusao = "CamposGenericos_ValidaExclusao_Especie1"
        
        Case CAMPOSGENERICOS_VOLUMEMARCA
            sSelect = "SELECT DISTINCT Trim(VolumeMarca) FROM NFiscal WHERE Len(Trim(VolumeMarca))>0 UNION SELECT DISTINCT Trim(VolumeMarca) FROM PedidosDeVenda WHERE Len(Trim(VolumeMarca))>0 UNION  SELECT DISTINCT Trim(VolumeMarca) FROM PedidosDeVendaBaixados WHERE Len(Trim(VolumeEspecie))>0 ORDER BY VolumeMarca"
            asUpdate(0) = "UPDATE NFiscal SET VolumeMarca = ? WHERE VolumeMarca = ?"
            asUpdate(1) = "UPDATE PedidosDeVenda SET VolumeMarca = ? WHERE VolumeMarca = ?"
            asUpdate(2) = "UPDATE PedidosDeVendaBaixados SET VolumeMarca = ? WHERE VolumeMarca = ?"
            objCamposGenericos.sValidaExclusao = "CamposGenericos_ValidaExclusao_Marca1"
    
    End Select

    'Lê no BD as espécies/marcas de volumes que já foram utilizadas em notas fiscais
    lErro = Comando_Executar(alComando(0), sSelect, sMarcaEspecie)
    If lErro <> AD_SQL_SUCESSO Then gError 102369
    
    'Busca a primeira espécie/marca de volume
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102370
    
    'Se não encontrou nada => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102375
    
    'Guarda no obj o código do campo genérico espécie/marca de volume
    objCamposGenericos.lCodigo = lCodCampo
    
    'Inicializa o primeiro código de valor para esse campo
    lCodValor = 1
    
    'Enquanto houverem espécies/marcas de volume
    Do While lErro = AD_SQL_SUCESSO
    
        'Instancia um novo obj
        Set objCamposGenericosValores = New ClassCamposGenericosValores
        
        'Guarda no obj o código para essa espécie/marca
        objCamposGenericosValores.lCodValor = lCodValor
        
        'Guarda no obj a descrição da espécie/marca
        objCamposGenericosValores.sValor = sMarcaEspecie
    
        'Adiciona o obj à coleção de espécies/marcas
        objCamposGenericos.colCamposGenericosValores.Add objCamposGenericosValores
        
        'Para cada tabela a ser atualizada
        For iIndice = LBound(asUpdate) To UBound(asUpdate)
        
            'Atualiza a tabela de NFiscal, alterando a descrição da espécie/marca pelo novo código criado para ela
            lErro = Comando_Executar(alComando(1), asUpdate(iIndice), lCodValor, sMarcaEspecie)
            If lErro <> AD_SQL_SUCESSO Then gError 102371
        
        Next
        
        lCodValor = lCodValor + 1
        
        'Busca a próxima espécie/marca
        lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102372
    
    Loop
    
    'Guarda o código para a próxima espécie / marca a ser gerada
    objCamposGenericos.lProxCodValor = lCodValor
    
    'Grava o campo espécie/marca
    lErro = CF("CamposGenericos_Grava_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102373
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 102374
    
    CamposGenericos_CorrigeBD_MarcaEspecie = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_CorrigeBD_MarcaEspecie:

    CamposGenericos_CorrigeBD_MarcaEspecie = gErr
    
    Select Case gErr
    
        Case 102373, 102375
        
        Case 102367
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 102368
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102371
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO", gErr, "PedidosDeVenda/PedidosDeVendaBaixados/NFiscal")
            
        Case 102369, 102370, 102372
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_GENERICO", gErr, "PedidosDeVenda/PedidosDeVendaBaixados/NFiscal")
            
        Case 102374
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149968)
    
    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'RollBack
    Call Transacao_Rollback
    
End Function

Function Cliente_Verifica_Preenchimento(ByVal objCliente As ClassCliente) As Long
'para ser chamada em Gravar_Registro de Cliente verificando se campos foram preenchidos

Dim lErro As Long, objFilialCliente As New ClassFilialCliente
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Cliente_Verifica_Preenchimento

    With objCliente
        objFilialCliente.sCgc = .sCgc
        objFilialCliente.iCodTransportadora = .iCodTransportadora
        objFilialCliente.sInscricaoEstadual = .sInscricaoEstadual
    End With
    
    lErro = FilialCliente_Verifica_Preenchimento(objFilialCliente)
    If lErro <> SUCESSO Then gError 124069
    
    If objCliente.iCondicaoPagto = 0 Then
        
        Select Case gobjFAT.iCliPreenchCondPagto
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124061
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_CONDPAGTO")
                If vbMsgRes = vbNo Then gError 124062
            
        End Select
        
    End If
        
    Cliente_Verifica_Preenchimento = SUCESSO
     
    Exit Function
    
Erro_Cliente_Verifica_Preenchimento:

    Cliente_Verifica_Preenchimento = gErr
     
    Select Case gErr
          
        Case 124061
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_COND_PAGTO", gErr)
        
        Case 124062, 124069
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149969)
     
    End Select
     
    Exit Function

End Function

Function FilialCliente_Verifica_Preenchimento(ByVal objFilialCliente As ClassFilialCliente) As Long
'para ser chamada em Gravar_Registro de FilialCliente verificando se campos foram preenchidos

Dim lErro As Long, vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_FilialCliente_Verifica_Preenchimento

    If Len(Trim(objFilialCliente.sCgc)) = 0 Then
    
        Select Case gobjFAT.iCliPreenchCNPJ
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124059
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_CNPJ")
                If vbMsgRes = vbNo Then gError 124060
            
        End Select
    
    End If
    
    If Len(Trim(objFilialCliente.sInscricaoEstadual)) = 0 Then
    
        Select Case gobjFAT.iCliPreenchInscEst
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124063
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_INSCEST")
                If vbMsgRes = vbNo Then gError 124064
            
        End Select
    
    End If
    
    If objFilialCliente.iCodTransportadora = 0 Then
    
        Select Case gobjFAT.iCliPreenchTransp
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124065
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_TRANSP")
                If vbMsgRes = vbNo Then gError 124066
            
        End Select
    
    End If
    
    FilialCliente_Verifica_Preenchimento = SUCESSO
     
    Exit Function
    
Erro_FilialCliente_Verifica_Preenchimento:

    FilialCliente_Verifica_Preenchimento = gErr
     
    Select Case gErr
          
        Case 124059
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_CNPJ", gErr)
        
        Case 124063
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_INSCR_EST", gErr)
        
        Case 124065
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_TRANSPORTADORA", gErr)
        
        Case 124060, 124064, 124066
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149970)
     
    End Select
     
    Exit Function

End Function

Function PedidoVenda_Verifica_Preenchimento(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

Dim lErro As Long, vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_PedidoVenda_Verifica_Preenchimento

    If objPedidoVenda.iCondicaoPagto = 0 Then
        
        Select Case gobjFAT.iPVPreenchCondPagto
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124071
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_PV_SEM_CONDPAGTO")
                If vbMsgRes = vbNo Then gError 124072
            
        End Select
        
    End If
        
    PedidoVenda_Verifica_Preenchimento = SUCESSO
     
    Exit Function
    
Erro_PedidoVenda_Verifica_Preenchimento:

    PedidoVenda_Verifica_Preenchimento = gErr
     
    Select Case gErr
          
        Case 124071
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_COND_PAGTO", gErr)
        
        Case 124072
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149971)
     
    End Select
     
    Exit Function

End Function

Private Function ItemNFGradeAloc_MovEst_Gera(alComando() As Long, ByVal objItemRomaneio As ClassItemRomaneioGrade, ByVal objItemRomaneioAloc As ClassReservaItem, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reserva do Almoxarifado de alocação

Dim lErro As Long
Dim dQuantidade As Double

On Error GoTo Erro_ItemNFGradeAloc_MovEst_Gera
      
    dQuantLiberar = objItemRomaneioAloc.dQuantidade
      
    'Busca uma reserva para o Almoxarifado da alocação
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado =?", 0, dQuantidade, TIPO_PEDIDO_GRADE, objItemRomaneio.lNumIntItemPV, objItemRomaneio.sProduto, objItemRomaneioAloc.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 25753

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25754
    
    'Se reserva foi encontrada
    If lErro = AD_SQL_SUCESSO Then
        
        'Faz o lock na reserva
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 25755

        'Se a quantidade reservada for menor ou igual a quantidade a liberar
        If dQuantLiberar >= dQuantidade Then
            
            'Exclui a reserva
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25756


            
            'Gera um item de movto de estoque de utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantidade, objItemRomaneioAloc.iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = dQuantLiberar - dQuantidade
        
        Else
            'Atualiza a quantidade reservada em Reserva
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
            If lErro <> AD_SQL_SUCESSO Then Error 25757
            
            'Adiciona um movto de estoque do tipo utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantLiberar, objItemRomaneioAloc.iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = 0


        
        End If

    End If

    ItemNFGradeAloc_MovEst_Gera = SUCESSO

    Exit Function

Erro_ItemNFGradeAloc_MovEst_Gera:

    ItemNFGradeAloc_MovEst_Gera = Err

    Select Case Err

        Case 25753, 25754
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25755
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25757
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149972)

    End Select

    Exit Function

End Function

Private Function ItemNFGradeAloc_MovEst_Gera2(alComando() As Long, ByVal objItemRomaneio As ClassItemRomaneioGrade, ByVal objItemRomaneioAloc As ClassReservaItem, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reservas do ItemNF(ItemPV correspondente) de almoxarifados distintos do almoxarifado de alocação
'A quantidade disponibilizada é dada por dQuantLiberar

Dim lErro As Long
Dim dQuantidade As Double
Dim iAlmoxarifado As Integer

On Error GoTo Erro_ItemNFGradeAloc_MovEst_Gera2

    If dQuantLiberar > 0 Then
        
        'Busca reserva em Almoxarifados diferentes do de alocação
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade, Almoxarifado FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado <> ?", 0, dQuantidade, iAlmoxarifado, TIPO_PEDIDO_GRADE, objItemRomaneio.lNumIntItemPV, objItemRomaneio.sProduto, objItemRomaneioAloc.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 25758

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25759
        
        'Enquanto encontrar reserva ou ainda tiver o quantidade a liberar
        Do While lErro <> AD_SQL_SEM_DADOS And dQuantLiberar > 0

            
            'faz lock na reserva
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25760
            
            'Se a qtd reservada for menor ou igual a qtd a liberar
            If dQuantLiberar >= dQuantidade Then
                
                'Apaga a reserva
                lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
                If lErro <> AD_SQL_SUCESSO Then Error 25761
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantidade, iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = dQuantLiberar - dQuantidade
            
            Else
                'Atualiza a reserva subtraindo a QuantLiberar
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
                If lErro <> AD_SQL_SUCESSO Then Error 25762
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantLiberar, iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = 0
                Exit Do

            
            End If
                    
            'Busca a próxima reserva
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25763







        
        Loop
    
    End If

    ItemNFGradeAloc_MovEst_Gera2 = SUCESSO

    Exit Function

Erro_ItemNFGradeAloc_MovEst_Gera2:

    ItemNFGradeAloc_MovEst_Gera2 = Err

    Select Case Err

        Case 25758, 25759, 25763
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25760
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25762
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149973)

    End Select

    Exit Function

End Function

Private Function ItemPVGrade_Atualiza_QuantReservada(alComando() As Long, objItemRomaneioGrade As ClassItemRomaneioGrade, sUnidadeMed As String, ByVal objProduto As ClassProduto, ByVal dQuantLiberada As Double) As Long
'Atualiza QuantReservada o ItemPV cujo NumInt foi passado

Dim lErro As Long
Dim tItemPV As typeItemPedido
Dim dQuantLiberadaUMItemPV As Double
Dim dFator As Double

On Error GoTo Erro_ItemPVGrade_Atualiza_QuantReservada
       
    'Lê UM e ClasseUM de itemPV
    lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantReservada FROM ItensPedidoDeVendaGrade WHERE NumIntDoc = ?", 0, tItemPV.dQuantReservada, objItemRomaneioGrade.lNumIntItemPV)
    If lErro <> AD_SQL_SUCESSO Then Error 25766

    'Tenta ler registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 25767
    If lErro = AD_SQL_SEM_DADOS Then Error 25768 'Não encontrou

    'Faz lock do item
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 25769
       
    'Obtém fator de conversão para unidade de medida de ItemPV
    lErro = CF("UM_Conversao", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, sUnidadeMed, dFator)
    If lErro <> SUCESSO Then Error 25772

    'Quantidade liberada em UM de ItemPV
    dQuantLiberadaUMItemPV = (dQuantLiberada * dFator)

    'Se a quantidade liberada em reservas do ítem for maior que a reservada ==> erro
    If dQuantLiberadaUMItemPV - tItemPV.dQuantReservada > QTDE_ESTOQUE_DELTA Then Error 25773

    'Atualiza quant reservada de ItemPV
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensPedidoDeVendaGrade SET QuantReservada = QuantReservada - ? ", alComando(1), dQuantLiberadaUMItemPV)
    If lErro <> AD_SQL_SUCESSO Then Error 25774
    
    ItemPVGrade_Atualiza_QuantReservada = SUCESSO

    Exit Function

Erro_ItemPVGrade_Atualiza_QuantReservada:

    ItemPVGrade_Atualiza_QuantReservada = Err

    Select Case Err

        Case 25766, 25767
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMPV", Err, objItemRomaneioGrade.lNumIntDoc)

        Case 25768
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", Err, objItemRomaneioGrade.lNumIntDoc)

        Case 25769
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMPEDIDODEVENDA", Err, objItemRomaneioGrade.lNumIntDoc)

        Case 25770, 25772 'tratado na rotina chamada

        Case 25771
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)
        
        Case 25773
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_LIBERADA_MAIOR_QUANT_RESERVADA", Err, objItemRomaneioGrade.lNumIntDoc)
        
        Case 25774
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITEMPV", Err, objItemRomaneioGrade.lNumIntDoc)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149974)

    End Select

    Exit Function

End Function


Function ItensNFGrade_Inclui(objItemNF As ClassItemNF) As Long

Dim lErro As Long
Dim lComando As Long
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim lNumIntDoc As Long

On Error GoTo Erro_ItensNFGrade_Inclui

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86340
    
    For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
        
        'descobre o proximo NumIntDoc de ItemPVGrade disponivel
        lErro = CF("Config_ObterNumInt", "CRFATConfig", "NUM_PROX_INT_ITEMNFGRADE", lNumIntDoc)
        If lErro <> SUCESSO Then gError 86341
        
        objItemRomaneio.lNumIntDoc = lNumIntDoc
        
        lErro = Comando_Executar(lComando, "INSERT INTO ItensNFiscalGrade (NumIntDoc,NumIntItemNF,Produto,Quantidade, NumIntItemPVGrade,Almoxarifado) VALUES (?,?,?,?,?,?)", lNumIntDoc, objItemNF.lNumIntDoc, objItemRomaneio.sProduto, objItemRomaneio.dQuantidade, objItemRomaneio.lNumIntItemPV, objItemRomaneio.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then gError 86342
        
    Next
    
    Call Comando_Fechar(lComando)

    ItensNFGrade_Inclui = SUCESSO
    
    Exit Function

Erro_ItensNFGrade_Inclui:

    ItensNFGrade_Inclui = gErr
    
    Select Case gErr
    
        Case 86340
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 86341
        
        Case 86342
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_ITEMNFGRADE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149975)

            
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function
        
End Function

Function ItensNFGrade_Exclui(lNumIntItem As Long) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lNumIntDoc As Long
Dim iIndice As Integer
Dim sProduto As String

On Error GoTo Erro_ItensNFGrade_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 86333
    Next
    
    sProduto = String(STRING_PRODUTO, 0)

    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto, NumIntDoc FROM ItensNFiscalGrade WHERE NumIntItemNF = ? ", 0, sProduto, lNumIntDoc, lNumIntItem)
    If lErro <> AD_SQL_SUCESSO Then gError 86334
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86335
    
    Do While lErro <> AD_SQL_SEM_DADOS
        
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ItensNFiscalGrade", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 86336
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86337
    
    Loop
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensNFGrade_Exclui = SUCESSO
    
    Exit Function
    
Erro_ItensNFGrade_Exclui:

    ItensNFGrade_Exclui = gErr
    
    Select Case gErr
    
        Case 86333
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 86334, 86335, 86337
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFGRADE", gErr, sProduto)
        
        Case 86336
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSNFGRADE", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149976)
    
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Grava(ByVal colClienteContatos As Collection) As Long
'Abre transação e chama a função para gravação de contatos
'colClienteContatos recebe os contatos que serão gravados

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ClienteContatos_Grava

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102580
    
    'Efetua
    'Chama a função para efetuar a gravação do relacionamento
    lErro = ClienteContatos_Grava_EmTrans(colClienteContatos)
    If lErro <> SUCESSO Then gError 102581
    
    'Fecha a transação
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 102582

    ClienteContatos_Grava = SUCESSO

    Exit Function

Erro_ClienteContatos_Grava:

    ClienteContatos_Grava = gErr

    Select Case gErr

        Case 102580
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 102581
        
        Case 102582
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149977)

    End Select

    'Faz o rollback da transação
    Call Transacao_Rollback

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Grava_EmTrans(ByVal colClienteContatos As Collection) As Long
'Faz o lock dos objetos relacionados, exclui os contatos gravados atualmente,
'insere os novos contatos e verifica se não ficou nenhum contato inconsistente no BD
'colClienteContatos recebe os contatos a serem gravados

Dim lErro As Long
Dim lComando As Long
Dim iIndice As Integer
Dim objClienteContatos As New ClassClienteContatos
Dim objClienteContatosAux As New ClassClienteContatos

On Error GoTo Erro_ClienteContatos_Grava_EmTrans

    'Executa a abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102581
    
    'Verifica se Cliente e Filial estão cadastrados e faz o lock deles
    lErro = CF("FilialCliente_Lock", colClienteContatos(1).lCliente, colClienteContatos(1).iFilialCliente)
    If lErro <> SUCESSO And lErro <> 43050 Then gError 102582
    
    'Não encontrou a Filial Cliente --> erro
    If lErro = 43050 Then gError 102583
    
    'Guarda código do cliente e da filial que terão os contatos excluídos
    'A exclusão é feita para limpar o BD e posteriormente ser feita a gravação dos
    'novos contatos
    objClienteContatos.lCliente = colClienteContatos(1).lCliente
    objClienteContatos.iFilialCliente = colClienteContatos(1).iFilialCliente
    
    'Exclui os contatos existentes para o Cliente/Filial
    lErro = ClienteContatos_Exclui_EmTrans(objClienteContatos)
    If lErro <> SUCESSO Then gError 102584
    
    'Para cada contato a ser gravado
    For Each objClienteContatosAux In colClienteContatos
    
        'Insere o contato na tabela
        lErro = Comando_Executar(lComando, "INSERT INTO ClienteContatos (Cliente, FilialCliente, Codigo, Contato, Setor, Cargo, Telefone, Fax, Email, Padrao) VALUES (?,?,?,?,?,?,?,?,?,?)", objClienteContatosAux.lCliente, objClienteContatosAux.iFilialCliente, objClienteContatosAux.iCodigo, objClienteContatosAux.sContato, objClienteContatosAux.sSetor, objClienteContatosAux.sCargo, objClienteContatosAux.sTelefone, objClienteContatosAux.sFax, objClienteContatosAux.sEmail, objClienteContatosAux.iPadrao)
        If lErro <> AD_SQL_SUCESSO Then gError 102585
    
    Next
    
    'Verifica se não foi eliminado algum contato que esteja sendo usada em alguma outra tabela relacionada
    lErro = CF("ClienteContatos_Valida_Exclusao", objClienteContatos)
    If lErro <> SUCESSO Then gError 102586

    'Executa o fechamento dos Comandos
    Call Comando_Fechar(lComando)

    ClienteContatos_Grava_EmTrans = SUCESSO

    Exit Function

Erro_ClienteContatos_Grava_EmTrans:

    ClienteContatos_Grava_EmTrans = gErr

    Select Case gErr

        Case 102581
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102582, 102584

        Case 102583
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA", gErr, objClienteContatos.iFilialCliente, objClienteContatos.lCliente)
        
        Case 102585
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CLIENTECONTATOS", gErr)
        
        Case 102586
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149978)

    End Select

    'Executa o fechamento dos Comandos
    Call Comando_Fechar(lComando)

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Exclui(ByVal objClienteContatos As ClassClienteContatos) As Long
'Abre transação e chama a função para exclusão de contatos de um cliente
'objClienteContatos recebe o código do cliente e da filial que terão seus contatos excluídos

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ClienteContatos_Exclui

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102587
    
    'Chama a função para efetuar a exclusão do relacionamento
    lErro = ClienteContatos_Exclui_EmTrans(objClienteContatos)
    If lErro <> SUCESSO Then gError 102588
    
    'Verifica se não foi eliminado algum contato que esteja sendo usada em alguma outra tabela relacionada
    lErro = CF("ClienteContatos_Valida_Exclusao", objClienteContatos)
    If lErro <> SUCESSO Then gError 102586
    
    'Fecha a transação
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 102589

    ClienteContatos_Exclui = SUCESSO

    Exit Function

Erro_ClienteContatos_Exclui:

    ClienteContatos_Exclui = gErr

    Select Case gErr

        Case 102587
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 102588, 102586
        
        Case 102589
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149979)

    End Select
    
    'Faz o rollback da transação
    Call Transacao_Rollback

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Exclui_EmTrans(ByVal objClienteContatos As ClassClienteContatos) As Long
'Exclui os contatos do cliente/filial passados como parâmetros
'objClienteContatos recebe o código do cliente e da filial que terão seus contatos excluídos

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim lCodigo As Long

On Error GoTo Erro_ClienteContatos_Exclui_EmTrans

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102590
    Next
    
    'Lê os contatos que serão excluídos
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ClienteContatos WHERE Cliente=? AND FilialCliente=?", 0, lCodigo, objClienteContatos.lCliente, objClienteContatos.iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 102591
    
    'Posiciona no primeiro contato encontrado
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102592
    
    'Enquando houverem contatos para exclusão
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ClienteContatos", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 102594
        
        'Posiciona no próximo contato encontrado
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102593
    
    Loop

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ClienteContatos_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_ClienteContatos_Exclui_EmTrans:

    ClienteContatos_Exclui_EmTrans = gErr

    Select Case gErr

        Case 102590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102591 To 102593
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 102594
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CLIENTECONTATOS", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149980)

    End Select

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

'Incluída por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Exclui_Cliente_EmTrans(ByVal lCliente As Long, Optional ByVal iFilialCliente As Integer) As Long
'Exclui todos os contatos para o cliente passado como parâmetro
'ou apenas os contatos para a filial do cliente passada como parâmetro
'lCliente recebe o código do cliente que deve ter seus contatos excluídos
'iFilialCliente indica se deve excluir os contatos de todas as filiais ou de uma filial específica
'Se for passado um valor em iFilialCliente, ou seja, iFilialCliente<>0, significa que devem ser
'excluídos apenas os contatos da filial passada

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim lCodContato As Long

On Error GoTo Erro_ClienteContatos_Exclui_Cliente_EmTrans

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102698
    Next
    
    'Se foi passada uma filial específica do cliente
    If iFilialCliente <> 0 Then
    
        'Lê os contatos para a filial do cliente passada como parâmetro
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ClienteContatos WHERE Cliente=? AND FilialCliente=?", 0, lCodContato, lCliente, iFilialCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 102716
    
    'Senão
    Else
    
        'Lê os contatos de todas as filiais do cliente passado como parâmetro
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ClienteContatos WHERE Cliente=?", 0, lCodContato, lCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 102699
    
    End If
    
    'Posiciona no primeiro contato encontrado
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102700
    
    'Enquanto houver contatos para excluir
    Do While lErro = AD_SQL_SUCESSO
    
        'Exclui o contato
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ClienteContatos", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 102702
    
        'Busca o próximo contato
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102701
    
    Loop

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ClienteContatos_Exclui_Cliente_EmTrans = SUCESSO

    Exit Function

Erro_ClienteContatos_Exclui_Cliente_EmTrans:

    ClienteContatos_Exclui_Cliente_EmTrans = gErr

    Select Case gErr

        Case 102698
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102699 To 102701, 102716
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 102702
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CLIENTECONTATOS", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149981)

    End Select

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function


Private Function Processa_Item_PV_ComGrade(alComando() As Long, ByVal objItemPV As ClassItemPedido, ByVal objItemNF As ClassItemNF, ByVal objMovEstoque As ClassMovEstoque, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, dQtdeEmFaltaNoEstoque As Double) As Long
'processa um item do pedido de venda, gerando movimentos de estoque relativos às reservas e excluindo as reservas

Dim lErro As Long
Dim dFator As Double
Dim objProduto As New ClassProduto
Dim objAlmoxarifado As ClassAlmoxarifado
Dim objReservaItem As ClassReservaItem
Dim bReservaUtilizada As Boolean
Dim iIndice As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objItemPVAux As New ClassItemPedido
Dim iIndice2 As Integer

On Error GoTo Erro_Processa_Item_PV_ComGrade

    objProduto.sCodigo = objItemPV.sProduto
    
    'ler dados do produto
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then Error 44201
    
    'se o produto não estiver cadastrado
    If lErro = 28030 Then Error 44202

    'converter qtde a faturar p/UMEstoque do produto
    lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemPV.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
    If lErro <> SUCESSO Then Error 44203

    objItemPV.dQuantAFaturar = objItemPV.dQuantAFaturar * dFator
    
    objItemPV.sUMEstoque = objProduto.sSiglaUMEstoque
    
    
    For Each objItemRomaneio In objItemPV.colItensRomaneioGrade
    
        objItemRomaneio.dQuantAFaturar = objItemRomaneio.dQuantidade - objItemRomaneio.dQuantCancelada - objItemRomaneio.dQuantFaturada
        
        objProduto.sCodigo = objItemRomaneio.sProduto
                
        'ler dados do produto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 44201
        
        'se o produto não estiver cadastrado
        If lErro = 28030 Then Error 44202
    
        'converter qtde a faturar p/UMEstoque do produto
        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemPV.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then Error 44203
    
        objItemRomaneio.dQuantAFaturar = objItemRomaneio.dQuantAFaturar * dFator
        
        objItemRomaneio.sUMEstoque = objProduto.sSiglaUMEstoque
            
        'se item for estoque+reserva ou estoque
        If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
    
           'criar as movimentacoes de estoque de reserva
            lErro = GeracaoNFiscal_CriarMovtosEstoque_Grade(alComando(), objGeracaoNFiscal, objPedidoVenda, objItemPV, objMovEstoque, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
            If lErro <> SUCESSO Then Error 44240
    
            'se há ainda material a faturar ==> faturamento parcial
            If dQtdeEmFaltaNoEstoque <> 0 Then
    
                'desfaz a nota fiscal pois não haverá faturamento parcial automático
                Error 44325
                '*******************************************************************
                'codigo para futura implantacao do faturamento parcial
                '*******************************************************************
                'lErro = Processa_Faturamento_Parcial()
                'If lErro <> SUCESSO Then
    
            Else
                
                'se não há mais quantidade a faturar
                                        
                        
                'retorna a unidade de venda
                objItemPV.dQuantAFaturar = (objItemPV.dQuantAFaturar / dFator)
                
                'excluir as reservas associadas ao item de estoque nos almoxarifados das outras filiais que não seja a de faturamento, que podem ter sobrado
                For Each objReservaItem In objItemRomaneio.colLocalizacao
                
                    bReservaUtilizada = False
                    For iIndice2 = 1 To objItemNF.colItensRomaneioGrade.Count
                        
                        For iIndice = 1 To objItemNF.colItensRomaneioGrade(iIndice2).colLocalizacao.Count
                            If objItemNF.colItensRomaneioGrade(iIndice2).colLocalizacao(iIndice).iAlmoxarifado = objReservaItem.iAlmoxarifado Then bReservaUtilizada = True
                        Next
                    Next
                    'verifica se almox pertence a filial do faturamento
                    lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReservaItem.iAlmoxarifado)
                    If lErro <> SUCESSO And lErro <> 44234 Then Error 44241
    
                    'se o almoxarifado não pertence à filial do faturamento
                    'ou se a utilização da rserva não foi feita
                    If lErro = 44234 Or (Not bReservaUtilizada) Then
                        Set objAlmoxarifado = New ClassAlmoxarifado
                        objAlmoxarifado.iCodigo = objReservaItem.iAlmoxarifado
    
                        '** TRASFERE OS DADOS PARA UM OBJ AUXILIAR PARA APROVEITAR FUNÇÃO ********
                        objItemPVAux.lNumIntDoc = objItemRomaneio.lNumIntDoc
                        objItemPVAux.sProduto = objItemRomaneio.sProduto
                        objItemPVAux.lCodPedido = objItemPV.lCodPedido
                        objItemPVAux.iFilialEmpresa = objItemPV.iFilialEmpresa
                        objItemPVAux.sProdutoDescricao = objItemRomaneio.sDescricao
                        objItemPVAux.sUMEstoque = objItemRomaneio.sUMEstoque
                        
                        'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
                        lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPVAux, objAlmoxarifado)
                        If lErro <> SUCESSO Then Error 44242
                        
                    End If
    
                Next
    
            End If 'se há falta de estoque
    
        End If 'se for item inventariado
    Next
    Processa_Item_PV_ComGrade = SUCESSO

    Exit Function

Erro_Processa_Item_PV_ComGrade:

    Processa_Item_PV_ComGrade = Err

    Select Case Err

        Case 44201, 44203, 44240, 44241, 44242

        Case 44202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)

        Case 44325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", Err, objPedidoVenda.lCodigo)


        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149982)

     End Select

     Exit Function

End Function

Private Function GeracaoNFiscal_CriarMovtosEstoque_Grade(alComando() As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF, objItemRomaneio As ClassItemRomaneioGrade) As Long
'cria os movimentos de estoque correspondentes a um item de pedido de venda
'Somente as reservas feitas em almoxarifados da filial que vai faturar poderao ser utilizadas
'   para estas reservas, se usadas, deverao ser criados movtos que retiram diretamente da qtde reservada
'primeiro tenta retirar do almoxarifado padrao, se nao der, dos outros com reserva e depois nos outros almoxarifados da filial
'vai mantendo numa colecao os almoxarifados percorridos

Dim lErro As Long
Dim colAlmoxPercorridos As New Collection
Dim iAlmoxarifadoPadrao As Integer
Dim objAlmoxarifado As New ClassAlmoxarifado
Dim objReservaItem As ClassReservaItem
Dim objProdutoFilial As New ClassProdutoFilial
Dim iIndice1 As Integer
Dim iIndice2 As Integer

On Error GoTo Erro_GeracaoNFiscal_CriarMovtosEstoque_Grade

    dQtdeEmFaltaNoEstoque = objItemRomaneio.dQuantAFaturar

    objProdutoFilial.iFilialEmpresa = objPedidoVenda.iFilialEmpresaFaturamento
    objProdutoFilial.sProduto = objItemRomaneio.sProduto
    
    'obter o almox padrao p/(produto, FilialEmpresaFaturamento)
    lErro = CF("ProdutoFilial_Le2", alComando(2), objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 44208 Then Error 44209
    
    'Se não encontrou o almoxarifado padrão do produto/filialempresaFaturamento
    If lErro = 44208 Or objProdutoFilial.iAlmoxarifado = 0 Then
    
        'pega o almoxarifado padrao da filial
        iAlmoxarifadoPadrao = objGeracaoNFiscal.iAlmoxarifadoPadrao
        
    Else
    
        'se encontrou o almoxarifado padrao
        iAlmoxarifadoPadrao = objProdutoFilial.iAlmoxarifado
        
    End If
    
    'se há um almoxarifado padrão ==> retira material do almoxarifado padrao
    If iAlmoxarifadoPadrao <> 0 Then

        objAlmoxarifado.iCodigo = iAlmoxarifadoPadrao
        
        'cria movtos de estoque retirando material do almoxarifado padrao
        lErro = GeracaoNFiscal_PercorreAlmox_Grade(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
        If lErro <> SUCESSO Then Error 44233

    End If

    'percorrer os almoxarifados das outras reservas
    If dQtdeEmFaltaNoEstoque > 0 Then
        For Each objReservaItem In objItemRomaneio.colLocalizacao
    
            If iAlmoxarifadoPadrao <> objReservaItem.iAlmoxarifado Then
    
                'verifica se almox pertence a filial faturamento
                lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReservaItem.iAlmoxarifado)
                If lErro <> SUCESSO And lErro <> 44234 Then Error 44235
    
                'se o almoxarifado pertence à filial de faturamento
                If lErro = SUCESSO Then
                    Set objAlmoxarifado = New ClassAlmoxarifado
                    
                    objAlmoxarifado.iCodigo = objReservaItem.iAlmoxarifado
                    
                    'cria movtos de estoque retirando material deste almoxarifado
                    lErro = GeracaoNFiscal_PercorreAlmox_Grade(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
                    If lErro <> SUCESSO Then Error 44236
    
                End If
    
            End If
    
        Next
    End If

    If dQtdeEmFaltaNoEstoque > 0 Then
        'percorrer os almoxarifados da filial
        For Each objAlmoxarifado In objGeracaoNFiscal.colAlmoxFilial
    
            'verifica se almoxarifado já foi verificado acima
            lErro = Almoxarifado_NaColecao(colAlmoxPercorridos, objAlmoxarifado.iCodigo)
            If lErro <> SUCESSO And lErro <> 44234 Then Error 44239
            
            'se o almoxarifado ainda não foi verificado
            If lErro = 44234 Then
    
                'cria movtos de estoque retirando material deste almoxarifado
                lErro = GeracaoNFiscal_PercorreAlmox_Grade(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
                If lErro <> SUCESSO Then Error 44238
    
            End If
    
        Next
    End If
    
    GeracaoNFiscal_CriarMovtosEstoque_Grade = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_CriarMovtosEstoque_Grade:

    GeracaoNFiscal_CriarMovtosEstoque_Grade = Err

    Select Case Err

        Case 44209, 44233, 44235, 44236, 44238, 44239

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149983)

    End Select

    Exit Function

End Function


Private Function GeracaoNFiscal_PercorreAlmox_Grade(alComando() As Long, ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, ByVal colAlmoxPercorridos As Collection, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF, objItemRomaneio As ClassItemRomaneioGrade) As Long
'cria os movtos de estoque retirando material da qtde reservada, disp nossa e consig3 para atender a qtde demandada

Dim lErro As Long
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dQtde As Double
Dim dQuantReserva As Double
Dim dQuantAloc As Double
Dim objItemNFAloc As ClassItemNFAlocacao
Dim objReservaItem As ClassReservaItem
Dim objItemPVAux As New ClassItemPedido
Dim objItemRomaneioAux As ClassItemRomaneioGrade

On Error GoTo Erro_GeracaoNFiscal_PercorreAlmox_Grade

    For Each objReservaItem In objItemRomaneio.colLocalizacao
        
        If objReservaItem.iAlmoxarifado = objAlmoxarifado.iCodigo Then dQuantReserva = dQuantReserva + objReservaItem.dQuantidade
    
    Next

    'se houve reserva para o almoxarifado em questão
    If dQuantReserva <> 0 Then

        'se há quantidade a faturar
        If dQtdeEmFaltaNoEstoque <> 0 Then

            'se a quantidade a faturar for menor que a quantidade reservada
            If dQtdeEmFaltaNoEstoque <= dQuantReserva Then
                
                'esta será a quantidade da reserva a ser utilizada
                dQtde = dQtdeEmFaltaNoEstoque
            Else
                'se a quantidade faturada for maior que a quantidade reservada, toda a reserva será utilizada
                dQtde = dQuantReserva
            End If

            '** TRASFERE OS DADOS PARA UM OBJ AUXILIAR PARA APROVEITAR FUNÇÃO ********
            objItemPVAux.lNumIntDoc = objItemRomaneio.lNumIntDoc
            objItemPVAux.sProduto = objItemRomaneio.sProduto
            objItemPVAux.lCodPedido = objItemPV.lCodPedido
            objItemPVAux.iFilialEmpresa = objItemPV.iFilialEmpresa
            objItemPVAux.sProdutoDescricao = objItemRomaneio.sDescricao
            objItemPVAux.sUMEstoque = objItemRomaneio.sUMEstoque

            'Utiliza a reserva, ou seja, serão gerados movimentos de utilização e possivelmente cancelamento do que não foi utilizado. Além disso a reserva é excluida
            lErro = CF("Reserva_Utilizar", alComando(3), alComando(4), objMovEstoque, objItemPVAux, objAlmoxarifado, dQtde)
            If lErro <> SUCESSO Then Error 44220
            '**************************

            'ainda falta esta parte para faturar
            dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
            dQuantAloc = dQtde
    
        Else

            
            '** TRASFERE OS DADOS PARA UM OBJ AUXILIAR PARA APROVEITAR FUNÇÃO ********
            objItemPVAux.lNumIntDoc = objItemRomaneio.lNumIntDoc
            objItemPVAux.sProduto = objItemRomaneio.sProduto
            objItemPVAux.lCodPedido = objItemPV.lCodPedido
            objItemPVAux.iFilialEmpresa = objItemPV.iFilialEmpresa
            objItemPVAux.sProdutoDescricao = objItemRomaneio.sDescricao
            objItemPVAux.sUMEstoque = objItemRomaneio.sUMEstoque
            
            'se não há quantidade a faturar
            'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
            lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPVAux, objAlmoxarifado)
            If lErro <> SUCESSO Then Error 44226

        End If

    End If

    'se ainda há quantidade a faturar
    If dQtdeEmFaltaNoEstoque <> 0 Then

        objEstoqueProduto.sProduto = objItemRomaneio.sProduto
        objEstoqueProduto.iAlmoxarifado = objAlmoxarifado.iCodigo
        
        'ler a tabela estoqueproduto e fazer lock exclusivo
        lErro = CF("EstoqueProduto_Le_Exclusivo", alComando(7), objEstoqueProduto)
        If lErro <> SUCESSO And lErro <> 44229 Then Error 44231

        If lErro = SUCESSO Then

            'retirar quanto possivel deste almoxarifado
            If objEstoqueProduto.dQuantDisponivel > 0 Then
    
                'se a quantidade que ainda tem a faturar for menor que a quantidade disponivel no almoxarifado
                If dQtdeEmFaltaNoEstoque <= objEstoqueProduto.dQuantDisponivel Then
                
                    'faturar tudo
                    dQtde = dQtdeEmFaltaNoEstoque
                    
                Else
                    
                    'senão, faturar só o que está disponível
                    dQtde = objEstoqueProduto.dQuantDisponivel
                    
                End If
    
                'esta é a quantidade que ainda falta faturar
                dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
                
                dQuantAloc = dQuantAloc + dQtde
            End If

        End If
    
    End If

    If dQuantAloc > 0 Then
                
        Set objReservaItem = New ClassReservaItem
        
        objReservaItem.iAlmoxarifado = objAlmoxarifado.iCodigo
        objReservaItem.sAlmoxarifado = objAlmoxarifado.sNomeReduzido
        objReservaItem.dQuantidade = dQuantAloc
        
        For Each objItemRomaneioAux In objItemNF.colItensRomaneioGrade
            If objItemRomaneio.sProduto = objItemRomaneioAux.sProduto Then
                objItemRomaneioAux.colLocalizacao.Add objReservaItem
                Exit For
            End If
        Next
        
    End If
        
        
    'inclui-lo em colAlmoxPercorridos
    colAlmoxPercorridos.Add objAlmoxarifado

    GeracaoNFiscal_PercorreAlmox_Grade = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_PercorreAlmox_Grade:

    GeracaoNFiscal_PercorreAlmox_Grade = Err

    Select Case Err

        Case 44220, 44221, 44226, 44231

        Case 44232
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEPRODUTO_NAO_CADASTRADO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149984)

    End Select

    Exit Function

End Function

Function Move_ItensGrade_Tela(colItensRomaneio As Collection, colItensRomaneioTela As Collection, Optional bTrazPedido As Boolean = False) As Long

Dim objItemRomaneioGrade As ClassItemRomaneioGrade
Dim objItemRomaneioGradeTela As ClassItemRomaneioGrade
Dim objReservaItem As ClassReservaItem
Dim objReservaItemTela As ClassReservaItem
Dim objAlmoxarifado As New ClassAlmoxarifado
Dim lErro As Long

On Error GoTo Erro_Move_ItensGrade_Tela

    'Para cada Item de Romaneio vindo da tela ( Aqueles que já tem quantidade)
    For Each objItemRomaneioGradeTela In colItensRomaneioTela
                    
        Set objItemRomaneioGrade = New ClassItemRomaneioGrade
            
        objItemRomaneioGrade.sProduto = objItemRomaneioGradeTela.sProduto
        objItemRomaneioGrade.dQuantOP = objItemRomaneioGradeTela.dQuantOP
        objItemRomaneioGrade.dQuantSC = objItemRomaneioGradeTela.dQuantSC
        objItemRomaneioGrade.dQuantPV = objItemRomaneioGradeTela.dQuantidade - objItemRomaneioGradeTela.dQuantCancelada - objItemRomaneioGradeTela.dQuantFaturada
        objItemRomaneioGrade.sDescricao = objItemRomaneioGradeTela.sDescricao
        objItemRomaneioGrade.sUMEstoque = objItemRomaneioGradeTela.sUMEstoque
        objItemRomaneioGrade.dQuantidade = objItemRomaneioGradeTela.dQuantidade - objItemRomaneioGradeTela.dQuantCancelada - objItemRomaneioGradeTela.dQuantFaturada
        objItemRomaneioGrade.dQuantAFaturar = objItemRomaneioGradeTela.dQuantAFaturar
        objItemRomaneioGrade.dQuantReservada = objItemRomaneioGradeTela.dQuantReservada
        If bTrazPedido Then
            objItemRomaneioGrade.lNumIntItemPV = objItemRomaneioGradeTela.lNumIntDoc
        Else
            objItemRomaneioGrade.lNumIntDoc = objItemRomaneioGradeTela.lNumIntDoc
            objItemRomaneioGrade.lNumIntItemPV = objItemRomaneioGradeTela.lNumIntItemPV
        End If
                            
                            
        colItensRomaneio.Add objItemRomaneioGrade
    
        'Transfere as informações de Localização
        Set objItemRomaneioGrade.colLocalizacao = New Collection
            
'        For Each objReservaItemTela In objItemRomaneioGradeTela.colLocalizacao
'
'            objAlmoxarifado.iCodigo = objReservaItemTela.iAlmoxarifado
'
'            lErro = CF("Almoxarifado_Le", objAlmoxarifado)
'            If lErro <> 25056 And lErro <> SUCESSO Then gError 94331
'            If lErro = 25056 Then gError 94332
'
'
'            If objAlmoxarifado.iFilialEmpresa = giFilialEmpresa Then
'
'                Set objReservaItem = New ClassReservaItem
'
'                objReservaItem.dQuantidade = objReservaItemTela.dQuantidade
'                objReservaItem.dtDataValidade = objReservaItemTela.dtDataValidade
'                objReservaItem.iAlmoxarifado = objReservaItemTela.iAlmoxarifado
'                objReservaItem.iFilialEmpresa = objReservaItemTela.iFilialEmpresa
'                objReservaItem.lNumIntDoc = objReservaItemTela.lNumIntDoc
'                objReservaItem.sAlmoxarifado = objReservaItemTela.sAlmoxarifado
'                objReservaItem.sResponsavel = objReservaItemTela.sResponsavel
'
'                objItemRomaneioGrade.colLocalizacao.Add objReservaItem
'            End If
'        Next
    
    Next
    
    Move_ItensGrade_Tela = SUCESSO
    
    Exit Function
    
Erro_Move_ItensGrade_Tela:

    Move_ItensGrade_Tela = gErr

    Select Case gErr
            
        Case 94331

        Case 94332
            Call Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_INEXISTENTE", gErr, objReservaItemTela.iAlmoxarifado)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149985)

    End Select
    
    Exit Function

End Function

'####################################################
'INSERIDO POR WAGNER - IMPAL 12/11/04
Public Function CustoDirFabrProdInf_Grava(ByVal objCustoDirFabr As ClassCustoDirFabr) As Long
'grava ou altera a tabela CustoDirFabrProdInf

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_CustoDirFabrProdInf_Grava

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 131257
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 131258
    Next
    
    'Verifico se existe o registro em CustoDirFabrProdInf
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa  FROM CustoDirFabrProdInf WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, iAux, objCustoDirFabr.iAno, objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 131259

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131260

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
        
        'faz um update apenas no Custo Aplicado
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CustoDirFabrProdInf SET Custo = ?", alComando(0), objCustoDirFabr.dCustoTotal)
        If lErro <> AD_SQL_SUCESSO Then gError 131261
    
    Else

        'insere
        lErro = Comando_Executar(alComando(1), "INSERT INTO CustoDirFabrProdInf(FilialEmpresa, Ano, Produto, Custo) VALUES (?,?,?,?)", objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.iAno, objCustoDirFabr.sProduto, objCustoDirFabr.dCustoTotal)
        If lErro <> AD_SQL_SUCESSO Then gError 131262
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 131263
    
    CustoDirFabrProdInf_Grava = SUCESSO

    Exit Function

Erro_CustoDirFabrProdInf_Grava:

    CustoDirFabrProdInf_Grava = gErr

    Select Case gErr
        
        Case 131257
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 131258
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 131259, 131260
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTODIRFABRPRODINF", gErr)
            
        Case 131261
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CUSTODIRFABRPRODINF", gErr)
        
        Case 131262
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTODIRFABRPRODINF", gErr)
        
        Case 131263
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                
    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoDirFabrProdInf_Exclui(ByVal objCustoDirFabr As ClassCustoDirFabr) As Long
'Exclui os registros da tabela CustoDirFabrProdInf

Dim alComando(1) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_CustoDirFabrProdInf_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 131264

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 131265
    Next

    'faz uma busca no Bd a partir da data, produto e filial
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM CustoDirFabrProdInf WHERE Produto = ? AND FilialEmpresa = ? AND Ano = ?", 0, iFilialEmpresa, objCustoDirFabr.sProduto, objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.iAno)
    If lErro <> AD_SQL_SUCESSO Then gError 131266

    'busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131267

    'se nao achou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 131268

    'faz um lock exclusivo no registro encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 131269

    'exclui os campos da tabela CustoDirFabrProdInf
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoDirFabrProdInf", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 131270

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 131271

    CustoDirFabrProdInf_Exclui = SUCESSO

    Exit Function

Erro_CustoDirFabrProdInf_Exclui:

    CustoDirFabrProdInf_Exclui = gErr

    Select Case gErr

        Case 131264
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 131265
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 131266, 131267
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTODIRFABRPRODINF", gErr)

        Case 131268
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTODIRFABRPRODINF_NAO_EXISTENTE", gErr, objCustoDirFabr.sProduto, objCustoDirFabr.iAno)

        Case 131269
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 131270
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTODIRFABRPRODINF", gErr)

        Case 131271
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149986)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'####################################################

'#########################################################################
'INSERIDO POR WAGNER - RELATIVO A CONTRATOS (Cadastro/Medição/Faturamento)
'#########################################################################
Function Contrato_Grava(ByVal objContrato As ClassContrato) As Long
'Grava um Contrato

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumProx As Long
Dim iTipo As Integer

On Error GoTo Erro_Contrato_Grava

    'Abre Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129337
    Next

    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129338
    
    'Le Contrato
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, Tipo FROM Contratos WHERE Codigo = ? AND FilialEmpresa = ? ", 0, lNumIntDoc, iTipo, objContrato.sCodigo, objContrato.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 129339

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129340

    'Se não encontrou insere, senão altera
    If lErro = AD_SQL_SEM_DADOS Then
        
        With objContrato
        
            'Busca próximo identificador
            lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
            If lErro <> SUCESSO Then gError 131066
            
            .lNumIntDoc = lNumProx
        
            'Insere contrato
            lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                        .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor)
            If lErro <> AD_SQL_SUCESSO Then gError 129341
    
        End With
        
    Else

        'Se é um contrato a Pagar sendo gravado como a receber ou vice versa => Erro
        If iTipo <> objContrato.iTipo Then
        
            If iTipo = CONTRATOS_PAGAR Then
                gError 132920
            Else
                gError 132921
            End If
        
        End If

        With objContrato
                
            .lNumIntDoc = lNumIntDoc

            'Altera Contrato
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Contratos SET FilialEmpresa = ?, Codigo = ?, Descricao= ?, Ativo= ?, Cliente= ?, FilCli= ?, Observacao= ?, DataIniContrato= ?, DataFimContrato= ?, DataRenovContrato= ?, ContaContabil= ?, HistoricoContabil= ?, DataIniCobrancaPadrao= ?, PeriodicidadePadrao= ?, CondPagtoPadrao= ?, Ccl=?, NaturezaOP = ?, TipoTributacao = ?, Fornecedor = ?, FilialFornecedor = ?, Tipo = ? ", alComando(1), _
                                                    .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .lFornecedor, .iFilForn, .iTipo)
            If lErro <> AD_SQL_SUCESSO Then gError 129342

        End With

    End If
    
    'Grava os itens do contrato
    lErro = ItensDeContrato_Grava(objContrato)
    If lErro <> SUCESSO Then gError 129343

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129344
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Contrato_Grava = SUCESSO

    Exit Function

Erro_Contrato_Grava:

    Contrato_Grava = gErr

        Select Case gErr

        Case 129337
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129338
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129339, 129340
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)

        Case 129341
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTRATO", gErr, objContrato.sCodigo)

        Case 129342
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTRATO", gErr, objContrato.sCodigo)

        Case 129343, 131066

        Case 129344
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
             
        Case 132920
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_CONTRATO_MESMO_CODIGO_PAGAR", gErr, objContrato.sCodigo, objContrato.iFilialEmpresa)
        
        Case 132921
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_CONTRATO_MESMO_CODIGO_RECEBER", gErr, objContrato.sCodigo, objContrato.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149987)

    End Select

    'Desfaz as alterações
    Call Transacao_Rollback
    
    'Fecha comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ItensDeContrato_Insere(ByVal colItensDeContrato As Collection) As Long
'Insere Itens de Contrato passados na coleção colItensDeContrato

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objItensDeContrato As ClassItensDeContrato
Dim lNumProx As Long

On Error GoTo Erro_ItensDeContrato_Insere

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129345
    Next

    'Para cada item de contrato passado
    For Each objItensDeContrato In colItensDeContrato
           
        With objItensDeContrato
        
            'Obtem identificado (NumIntDoc)
            lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
            If lErro <> SUCESSO Then gError 129367
            
            .lNumIntDoc = lNumProx
        
            'Insere item
            lErro = Comando_Executar(alComando(1), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                        .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
            If lErro <> AD_SQL_SUCESSO Then gError 129348
            
        End With
            
    Next
     
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensDeContrato_Insere = SUCESSO

    Exit Function

Erro_ItensDeContrato_Insere:

    ItensDeContrato_Insere = gErr

        Select Case gErr

        Case 129345
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129348
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSDECONTRATO", gErr, objItensDeContrato.iSeq)

        Case 129367

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149988)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ItensDeMedicaoContrato_Insere(ByVal colItensDeMedicao As Collection) As Long
'Insere os itens de medição passados na coleção colItensDeMedicao

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objItensDeMedicao As ClassItensMedCtr
Dim lNumProx As Long

On Error GoTo Erro_ItensDeMedicaoContrato_Insere

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129346
    Next

    'Para cada item de medição passado
    For Each objItensDeMedicao In colItensDeMedicao
           
        With objItensDeMedicao
               
            'Insere o item
            lErro = Comando_Executar(alComando(2), "INSERT INTO ItensDeMedicaoContrato(Custo,Quantidade, VlrCobrar, Status, Medicao, NumIntItensContrato, DataCobranca, DataRefIni, DataRefFim ) VALUES (?,?,?,?,?,?,?,?,?)", _
                                                      .dCusto, .dQuantidade, .dVlrCobrar, .iStatus, .lMedicao, .lNumIntItensContrato, .dtDataCobranca, .dtDataRefIni, .dtDataRefFim)
            If lErro <> AD_SQL_SUCESSO Then gError 129347
            
        End With
            
    Next
     
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensDeMedicaoContrato_Insere = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Insere:

    ItensDeMedicaoContrato_Insere = gErr

        Select Case gErr

        Case 129346
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129347
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSDEMEDICAOCONTRATO", gErr, objItensDeMedicao.objItensDeContrato.iSeq)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149989)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ItensDeContrato_Grava(ByVal objContrato As ClassContrato) As Long
'Grava os itens de contrato

Dim lErro As Long
Dim objItens As ClassItensDeContrato
Dim objItensBD As ClassItensDeContrato
Dim objContratoBD As New ClassContrato
Dim colItensAtualiza As New Collection
Dim colItensInsere As New Collection
Dim colItensExclui As New Collection
Dim bAchou As Boolean

On Error GoTo Erro_ItensDeContrato_Grava

    objContratoBD.sCodigo = objContrato.sCodigo
    objContratoBD.iFilialEmpresa = giFilialEmpresa

    'Busca informações gravadas no BD
    lErro = CF("Contrato_Le", objContratoBD)
    If lErro <> SUCESSO Then gError 129365
    
    'Procura os dados da coleção no BD
    For Each objItens In objContrato.colItens
    
        bAchou = False
    
        For Each objItensBD In objContratoBD.colItens
            If objItens.iSeq = objItensBD.iSeq Then
                objItens.lNumIntDoc = objItensBD.lNumIntDoc
                bAchou = True
                Exit For
            End If
        Next
        
        'Se Encontrar Atualiza, senão Insere
        If bAchou Then
            objItens.lNumIntContrato = objContratoBD.lNumIntDoc
            colItensAtualiza.Add objItens
        Else
            objItens.lNumIntContrato = objContrato.lNumIntDoc
            colItensInsere.Add objItens
        End If
   
    Next
    
    'Procura os dados do BD na coleção
    For Each objItensBD In objContratoBD.colItens
    
        bAchou = False
    
        For Each objItens In objContrato.colItens
            If objItens.iSeq = objItensBD.iSeq Then
                bAchou = True
                Exit For
            End If
        Next
        
        'Se não encontrar exclui
        If Not bAchou Then
            objItensBD.lNumIntContrato = objContrato.lNumIntDoc
            colItensExclui.Add objItensBD
        End If
   
    Next
    
    'Insere os itens
    lErro = ItensDeContrato_Insere(colItensInsere)
    If lErro <> SUCESSO Then gError 129366
    
    'Atualiza os itens
    lErro = ItensDeContrato_Atualiza(colItensAtualiza)
    If lErro <> SUCESSO Then gError 129490
    
    'Exclui os itens
    lErro = ItensDeContrato_Exclui(colItensExclui)
    If lErro <> SUCESSO Then gError 129619
    
    ItensDeContrato_Grava = SUCESSO

    Exit Function

Erro_ItensDeContrato_Grava:

    ItensDeContrato_Grava = gErr

    Select Case gErr
    
        Case 129365, 129366, 129490, 129619

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149990)

    End Select
    
    Exit Function

End Function

Function Contrato_Exclui(ByVal objContrato As ClassContrato) As Long
'Exclui um contrato com todos seus itens
'Contratos que possuem itens medidos ou faturados não podem ser excluídos

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_Contrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129350
    Next
    
    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129351
    
    'Le contrato que vai ser excluído
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM Contratos WHERE Codigo = ? AND FilialEmpresa = ? ", 0, lNumIntDoc, objContrato.sCodigo, objContrato.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 129352

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129353

    'Se não encontrar => Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 129354
    
    'Bloqueia o registro contra Alteração/Leituras
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129355
    
    objContrato.lNumIntDoc = lNumIntDoc
    
    'Le os itens do contrato
    lErro = CF("ItensDeContrato_Le", objContrato)
    If lErro <> SUCESSO Then gError 129838
    
    'Exclui os itens do contrato
    lErro = ItensDeContrato_Exclui(objContrato.colItens)
    If lErro <> SUCESSO Then gError 129356
    
    'Exclui o contrato
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Contratos", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129357
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129358

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contrato_Exclui = SUCESSO

    Exit Function

Erro_Contrato_Exclui:

    Contrato_Exclui = gErr

    Select Case gErr

        Case 129350
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129351
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129352
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)

        Case 129353, 129354
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTRATO_NAO_CADASTRADO", gErr, objContrato.sCodigo)

        Case 129355
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CONTRATO", gErr)

        Case 129356

        Case 129357
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CONTRATO", gErr, objContrato.sCodigo)
        
        Case 129358
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 129838
                                           
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149991)

    End Select

    'Desfaz alterações
    Call Transacao_Rollback
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ItensDeContrato_Exclui(ByVal colItensDeContrato As Collection) As Long
'Exclui os itens de contrato passados na coleção colItensDeContrato

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeContrato As ClassItensDeContrato

On Error GoTo Erro_ItensDeContrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129359
    Next
    
    'Para cada item de contrato passado
    For Each objItensDeContrato In colItensDeContrato
        
        'Le item de contrato posicionando cursor
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ItensDeContrato WHERE NumIntDoc = ? ", 0, lNumIntDoc, objItensDeContrato.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 129360
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129361

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Bloqueia registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> SUCESSO Then gError 129362
            
            'Verifica se a exclusão é válida
            lErro = ItensDeContrato_ValidaExclusao(objItensDeContrato)
            If lErro <> SUCESSO Then gError 129746
            
            'Exclui item
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensDeContrato", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129363
            
        End If

    Next

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Exclui = SUCESSO

    Exit Function

Erro_ItensDeContrato_Exclui:

    ItensDeContrato_Exclui = gErr

    Select Case gErr

        Case 129359
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129360, 129361
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 129362
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDECONTRATO", gErr)

        Case 129363
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSDECONTRATO", gErr, objItensDeContrato.iSeq)
        
        Case 129746
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149992)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ItensDeContrato_Atualiza(ByVal colItensDeContrato As Collection) As Long
'Altera itens de contrato já gravados no BD

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeContrato As ClassItensDeContrato

On Error GoTo Erro_ItensDeContrato_Atualiza

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129399
    Next
    
    'Para cada item de contrato passado
    For Each objItensDeContrato In colItensDeContrato
        
        'Le o item de contrato
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ItensDeContrato WHERE NumIntDoc = ? ", 0, lNumIntDoc, objItensDeContrato.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 129400
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129401

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Bloqueia o registro para Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129402
            
            'Atualiza registro
            With objItensDeContrato
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensDeContrato SET NumIntContrato = ?, Seq = ?, Cobrar = ?, Produto = ?, DescProd = ?, Quantidade = ?, UM = ?, Valor = ?, Medicao = ?, DataIniCobranca = ?, Periodicidade = ?, CondPagto = ?, Observacao = ?, DataProxCobranca = ?, DataRefIni = ?, DataRefFim = ?", _
                                            alComando(1), .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 129403
            
        End If

    Next

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Atualiza = SUCESSO

    Exit Function

Erro_ItensDeContrato_Atualiza:

    ItensDeContrato_Atualiza = gErr

    Select Case gErr

        Case 129399
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129400, 129401
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 129402
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDECONTRATO", gErr)

        Case 129403
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTRATO", gErr, objItensDeContrato.iSeq)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149993)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensDeMedicaoContrato_Atualiza(ByVal colItensDeMedicao As Collection) As Long
'Atualiza os itens de medição passados na coleção colItensDeMedicao

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeMedicao As ClassItensMedCtr
Dim objNF As New ClassNFiscal
Dim objItemNF As New ClassItemNF
Dim iItem As Integer

On Error GoTo Erro_ItensDeMedicaoContrato_Atualiza

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129369
    Next
    
    'Para cada item passado
    For Each objItensDeMedicao In colItensDeMedicao
        
        'Le o item de medição possicionando o cursor
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItensContrato FROM ItensDeMedicaoContrato WHERE NumIntItensContrato = ? AND Medicao = ?", 0, lNumIntDoc, objItensDeMedicao.lNumIntItensContrato, objItensDeMedicao.lMedicao)
        If lErro <> AD_SQL_SUCESSO Then gError 129370
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129371

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            objItemNF.objCobrItensContrato.lMedicao = objItensDeMedicao.lMedicao
            objItemNF.objCobrItensContrato.lNumIntItensContrato = objItensDeMedicao.lNumIntItensContrato
        
            Set objItemNF.objCobrItensContrato.colMedicoes = colItensDeMedicao
        
            'Busca Faturas do item
            lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
            If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 131027
            
            'Se encontrar => Erro
            If lErro = SUCESSO Then gError 131028
        
            'Bloqueia o registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129372
            
            'Atualiza o registro
            With objItensDeMedicao
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensDeMedicaoContrato SET Status = ?, VlrCobrar = ?, Quantidade = ?, Custo = ?, DataCobranca = ?, DataRefIni = ?, DataRefFim = ?", _
                                            alComando(1), .iStatus, .dVlrCobrar, .dQuantidade, .dCusto, .dtDataCobranca, .dtDataRefIni, .dtDataRefFim)
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 129373
            
        End If

    Next

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeMedicaoContrato_Atualiza = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Atualiza:

    ItensDeMedicaoContrato_Atualiza = gErr

    Select Case gErr

        Case 129369
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129370, 129371
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129372
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129373
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITENSDEMEDICAOCONTRATO", gErr, objItensDeMedicao.objItensDeContrato.iSeq)
        
        Case 131027
        
        Case 131028
            Call Rotina_Erro(vbOKOnly, "ERRO_MEDICAO_FATURADA2", gErr, objItensDeMedicao.lMedicao, objItensDeMedicao.objItensDeContrato.iSeq)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149994)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensDeContrato_Atualiza_DataProxCobranca(ByVal objCobrItensContrato As ClassCobrItensContrato) As Long
'Atualiza a data da próxima cobrança de um item de contrato
'Se baseia na última cobrança e na periodicidade
'Recebe o NumIntDoc e a data da última cobrança

Dim alComando(1 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iPeriodicidade As Long
Dim dtDataProxCobranca As Date
Dim dtRefIni As Date
Dim dtRefFim As Date
Dim objItemNF As New ClassItemNF
Dim objNF As New ClassNFiscal
Dim dtDataUltCobranca As Date
Dim dtRefMaior As Date
Dim objItemMedicao As ClassItensMedCtr

On Error GoTo Erro_ItensDeContrato_Atualiza_DataProxCobranca

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129375
    Next
    
    dtRefIni = DateAdd("d", 1, objCobrItensContrato.dtDataRefFim)
    dtDataUltCobranca = objCobrItensContrato.dtDataUltCobranca
        
    'Le o item de contrato posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Periodicidade FROM ItensDeContrato WHERE NumIntDoc = ? ", 0, iPeriodicidade, objCobrItensContrato.lNumIntItensContrato)
    If lErro <> AD_SQL_SUCESSO Then gError 129376

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129377
    If lErro = AD_SQL_SEM_DADOS Then gError 129378
    
    objItemNF.objCobrItensContrato.lNumIntItensContrato = objCobrItensContrato.lNumIntItensContrato
    
    If objCobrItensContrato.colMedicoes.Count = 0 Then
   
        'Obtém os itens fiscais gerados por último (Com maior data da última cobrança)
        lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
        If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 136190
        If lErro = SUCESSO Then
        
            'Se está sendo faturado algo alterior a uma fatura já feita, considera a data da fatura com maior data
            If objCobrItensContrato.dtDataUltCobranca < objItemNF.objCobrItensContrato.dtDataUltCobranca Then
            
                dtRefIni = DateAdd("d", 1, objItemNF.objCobrItensContrato.dtDataRefFim)
                dtDataUltCobranca = objItemNF.objCobrItensContrato.dtDataUltCobranca
            
            End If
        
        End If
        
    Else
    
        'Busca a maior data de referência final dentro das medições do item
        dtRefMaior = DATA_NULA
        For Each objItemMedicao In objCobrItensContrato.colMedicoes
        
            If objItemMedicao.dtDataRefFim > dtRefMaior Then
                dtRefMaior = objItemMedicao.dtDataRefFim
                dtDataUltCobranca = objItemMedicao.dtDataCobranca
            End If
        
        Next
    
        dtRefIni = DateAdd("d", 1, dtRefMaior)
    
    End If

    lErro = CF("Contrato_ProxCobranca", iPeriodicidade, dtDataUltCobranca, dtRefIni, dtDataProxCobranca, dtRefFim)
    If lErro <> SUCESSO Then gError 133281
    
    'Bloqueia o registro contra Alteração/Leituras
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129379
    
    'Atualiza a data da próxima cobrança
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensDeContrato SET DataProxCobranca = ?, DataRefIni = ?, DataRefFim = ? ", _
                                    alComando(1), dtDataProxCobranca, dtRefIni, dtRefFim)
    If lErro <> AD_SQL_SUCESSO Then gError 129380

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Atualiza_DataProxCobranca = SUCESSO

    Exit Function

Erro_ItensDeContrato_Atualiza_DataProxCobranca:

    ItensDeContrato_Atualiza_DataProxCobranca = gErr

    Select Case gErr

        Case 129375
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129376, 129377, 129378
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 129379
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDECONTRATO", gErr)

        Case 129380
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTRATO", gErr, objCobrItensContrato.lNumIntItensContrato)
        
        Case 133281, 136190
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149995)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MedicaoContrato_Exclui(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Exclui uma medição de contrato juntamente com seus itens
'Não permite exclusões de medições que possuam itens faturados
'O objMedicaoContrato.lCodigo precisa estar preenchido

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lAux As Long

On Error GoTo Erro_MedicaoContrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129590
    Next
    
    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129591
    
    'Le a Medição de contrato posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM MedicaoContrato WHERE Codigo = ? ", 0, lAux, objMedicaoContrato.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 129592

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129593

    'Se não encontrar => Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 129594
    
    'Bloqueia o registro contra Alterações/Leituras
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129595
    
    'Exclui os itens de medição do contrato
    lErro = CF("ItensDeMedicaoContrato_Le", objMedicaoContrato)
    If lErro <> SUCESSO Then gError 131024
    
    'Exclui os itens de medição do contrato
    lErro = ItensDeMedicaoContrato_Exclui(objMedicaoContrato.colItens)
    If lErro <> SUCESSO Then gError 129596
    
    'Exclui a medição do contrato
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MedicaoContrato", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129597
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129598

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MedicaoContrato_Exclui = SUCESSO

    Exit Function

Erro_MedicaoContrato_Exclui:

    MedicaoContrato_Exclui = gErr

    Select Case gErr

        Case 129590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129591
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129592
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MEDICAOCONTRATO", gErr)

        Case 129593, 129594
            Call Rotina_Erro(vbOKOnly, "ERRO_MEDICAOCONTRATO_NAO_CADASTRADO", gErr, objMedicaoContrato.lCodigo)

        Case 129595
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MEDICAOCONTRATO", gErr)

        Case 129596, 131024

        Case 129597
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MEDICAOCONTRATO", gErr, objMedicaoContrato.lCodigo)
        
        Case 129598
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                                           
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149996)

    End Select

    'Desfaz alterações
    Call Transacao_Rollback
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensDeMedicaoContrato_Exclui(ByVal colItensDeMedicao As Collection) As Long
'Exclui os itens de medição de contratos passados na coleção colItensDeMedicao
'Não permite a exclusão de itens de mediçào de contrato faturados

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeMedicaoContrato As ClassItensMedCtr
Dim objNF As New ClassNFiscal
Dim objItemNF As New ClassItemNF

On Error GoTo Erro_ItensDeMedicaoContrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129599
    Next
    
    'Para cada item passado
    For Each objItensDeMedicaoContrato In colItensDeMedicao
        
        'Le o item posicionando o cursor
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItensContrato FROM ItensDeMedicaoContrato WHERE NumIntItensContrato = ? AND Medicao = ? ", 0, lNumIntDoc, objItensDeMedicaoContrato.lNumIntItensContrato, objItensDeMedicaoContrato.lMedicao)
        If lErro <> AD_SQL_SUCESSO Then gError 129600
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129601

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Bloqueia o registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> SUCESSO Then gError 129602
            
            objItemNF.objCobrItensContrato.lMedicao = objItensDeMedicaoContrato.lMedicao
            objItemNF.objCobrItensContrato.lNumIntItensContrato = objItensDeMedicaoContrato.lNumIntItensContrato
            
            Set objItemNF.objCobrItensContrato.colMedicoes = colItensDeMedicao
            
            'Busca Faturas do item
            lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
            If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 129606
            
            'Se encontrar => Erro
            If lErro = SUCESSO Then gError 129603
            
            'Exclui o item de medição de contrato
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensDeMedicaoContrato", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129604
            
        End If

    Next

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeMedicaoContrato_Exclui = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Exclui:

    ItensDeMedicaoContrato_Exclui = gErr

    Select Case gErr

        Case 129599
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129600, 129601, 129605
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129602
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129604
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSDEMEDICAOCONTRATO", gErr, objItensDeMedicaoContrato.lMedicao, objItensDeMedicaoContrato.lNumIntItensContrato)
        
        Case 129603
            Call Rotina_Erro(vbOKOnly, "ERRO_MEDICAO_FATURADA", gErr, objItensDeMedicaoContrato.lMedicao, objItensDeMedicaoContrato.objItensDeContrato.iSeq)
        
        Case 129606
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149997)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MedicaoContrato_Grava(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Grava uma medição de contrato

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lAux As Long

On Error GoTo Erro_MedicaoContrato_Grava

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129607
    Next

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129608
    
    'Le a Medição de contrato posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM MedicaoContrato WHERE Codigo = ? ", 0, lAux, objMedicaoContrato.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 129609

    'Busca a medição
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129610

    'Se não encontrar então inclui senão altera
    If lErro = AD_SQL_SEM_DADOS Then
        
        With objMedicaoContrato
        
            'Insere mediçào
            lErro = Comando_Executar(alComando(2), "INSERT INTO MedicaoContrato(Codigo, NumIntContrato, Data) VALUES (?,?,?)", _
                                                                        .lCodigo, .lNumIntContrato, .dtData)
            If lErro <> AD_SQL_SUCESSO Then gError 129611
    
        End With
        
    Else

        With objMedicaoContrato
        
            'Bloqueia o registro para Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129606

            'Atualiza medição
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE MedicaoContrato SET NumIntContrato= ?, Data= ? ", alComando(1), _
                                                    .lNumIntContrato, .dtData)
            If lErro <> AD_SQL_SUCESSO Then gError 129612

        End With

    End If
    
    'Grava os itens da medição
    lErro = ItensDeMedicaoContrato_Grava(objMedicaoContrato)
    If lErro <> SUCESSO Then gError 129613

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129614
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    MedicaoContrato_Grava = SUCESSO

    Exit Function

Erro_MedicaoContrato_Grava:

    MedicaoContrato_Grava = gErr

    Select Case gErr
    
        Case 129606
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MEDICAOCONTRATO", gErr)
        
        Case 129607
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129608
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129609, 129610
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MEDICAOCONTRATO", gErr)

        Case 129611
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MEDICAOCONTRATO", gErr, objMedicaoContrato.lCodigo)

        Case 129612
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MEDICAOCONTRATO", gErr, objMedicaoContrato.lCodigo)

        Case 129613

        Case 129614
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149998)

    End Select

    'Desfaz alterações
    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ItensDeMedicaoContrato_Grava(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Grava os itens de medição passados na coleção objMedicaoContrato.colItens

Dim lErro As Long
Dim objItens As ClassItensMedCtr
Dim objItensBD As ClassItensMedCtr
Dim objMedicaoContratoBD As New ClassMedicaoContrato
Dim colItensAtualiza As New Collection
Dim colItensInsere As New Collection
Dim colItensExclui As New Collection
Dim bAchou As Boolean

On Error GoTo Erro_ItensDeMedicaoContrato_Grava

    objMedicaoContratoBD.lCodigo = objMedicaoContrato.lCodigo
    
    'Le a medição no BD
    lErro = CF("MedicaoContrato_Le", objMedicaoContratoBD)
    If lErro <> SUCESSO Then gError 129618
    
    'Procura os dados da coleção na tabela
    For Each objItens In objMedicaoContrato.colItens
    
        bAchou = False
    
        For Each objItensBD In objMedicaoContratoBD.colItens
            If objItens.lNumIntItensContrato = objItensBD.lNumIntItensContrato Then
                Set objItens.objItensDeContrato = objItensBD.objItensDeContrato
                bAchou = True
                Exit For
            End If
        Next
        
        'Se Encontrar Atualiza, senão Insere
        If bAchou Then
            colItensAtualiza.Add objItens
        Else
            colItensInsere.Add objItens
        End If
   
    Next
    
    'Procura os dados da Tabela na coleção
    For Each objItensBD In objMedicaoContratoBD.colItens
    
        bAchou = False
    
        For Each objItens In objMedicaoContrato.colItens
            If objItens.lNumIntItensContrato = objItensBD.lNumIntItensContrato Then
                bAchou = True
                Exit For
            End If
        Next
        
        'Se não encontrar exclui
        If Not bAchou Then
            colItensExclui.Add objItensBD
        End If
   
    Next
    
    'Insere os itens de medição de contrato
    lErro = ItensDeMedicaoContrato_Insere(colItensInsere)
    If lErro <> SUCESSO Then gError 129615
    
    'Altera os itens de medição de contrato
    lErro = ItensDeMedicaoContrato_Atualiza(colItensAtualiza)
    If lErro <> SUCESSO Then gError 129616
    
    'Exclui os itens de medição de contrato
    lErro = ItensDeMedicaoContrato_Exclui(colItensExclui)
    If lErro <> SUCESSO Then gError 129617
    
    ItensDeMedicaoContrato_Grava = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Grava:

    ItensDeMedicaoContrato_Grava = gErr

    Select Case gErr
    
        Case 129615 To 129618

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149999)

    End Select
    
    Exit Function

End Function

Function ItensDeContrato_ValidaExclusao(ByVal objItensDeContrato As ClassItensDeContrato) As Long
'Verifica se a exclusão de um contrato pode ocorrer
'Um item de contrato não pode ser excluído quando:
'1 - Possuir medições associadas a ele
'2 - Já tiver sido faturado

Dim lErro As Long
Dim lComando As Long
Dim lAux As Long
Dim objNF As New ClassNFiscal
Dim objItemNF As New ClassItemNF
Dim dtDataUltCobranca As Date

On Error GoTo Erro_ItensDeContrato_ValidaExclusao

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129740
    
    'Le a Medições do item de contrato passado
    lErro = Comando_Executar(lComando, "SELECT Medicao FROM ItensDeMedicaoContrato WHERE NumIntItensContrato = ? ", _
                                              lAux, objItensDeContrato.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 129741

    'Busca o primeiro item de medição
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129742
        
    'Se encontrar => Erro (Item com medição)
    If lErro <> AD_SQL_SEM_DADOS Then gError 129743
    
    objItemNF.objCobrItensContrato.lMedicao = 0
    objItemNF.objCobrItensContrato.lNumIntItensContrato = objItensDeContrato.lNumIntDoc
    
    'Busca faturas do item de contrato passado
    lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
    If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 129745
    
    'Se encontrar => Erro (Item Faturado)
    If lErro = SUCESSO Then gError 129744
                
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContrato_ValidaExclusao = SUCESSO

    Exit Function

Erro_ItensDeContrato_ValidaExclusao:

    ItensDeContrato_ValidaExclusao = gErr

    Select Case gErr

        Case 129740
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129741 To 129742
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr, objItensDeContrato.iSeq)

        Case 129743
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTRATO_COM_MEDICAO", gErr, objItensDeContrato.iSeq)

        Case 129744
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTRATO_FATURADO", gErr, objItensDeContrato.iSeq)

        Case 129745

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150000)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeContrato_Insere_Fatura(ByVal objNF As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
'Grava relação ItemNF vs ItemContrato ou ItemMedição

Dim alComando(1 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntItensContrato As Long
Dim lNumIntItemNF As Long
Dim sContrato As String
Dim iItem As Integer
Dim objItemMedicao As ClassItensMedCtr

On Error GoTo Erro_ItensDeContrato_Insere_Fatura

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129940
    Next
    
    If objItemNF.objCobrItensContrato.colMedicoes.Count = 0 Then
    'Se for associado a um item de contrato => Le ItensDeContratoCobranca
        lErro = Comando_Executar(alComando(1), "SELECT NumIntItensContrato FROM ItensDeContratoCobranca WHERE NumIntItemNFiscal = ? ", lNumIntItensContrato, objItemNF.lNumIntDoc)
    Else
    'Se for associado a um item de medição => Le ItensDeMedicaoCobranca
        lErro = Comando_Executar(alComando(1), "SELECT NumIntItensContrato FROM ItensDeMedicaoCobranca WHERE NumIntItemNFiscal = ? ", lNumIntItensContrato, objItemNF.lNumIntDoc)
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 129941

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129942

    'Se não encontrar
    If lErro = AD_SQL_SEM_DADOS Then
    
        If objItemNF.objCobrItensContrato.colMedicoes.Count = 0 Then
        'Se for associado a um item de contrato => Insere em ItensDeContratoCobranca
            lErro = Comando_Executar(alComando(1), "INSERT INTO ItensDeContratoCobranca(NumIntItensContrato, NumIntItemNFiscal, DataUltCobranca, NumIntDocCobranca, DataRefIni, DataRefFim ) VALUES (?,?,?,?,?,?)", _
                                                     objItemNF.objCobrItensContrato.lNumIntItensContrato, objItemNF.lNumIntDoc, objItemNF.objCobrItensContrato.dtDataUltCobranca, objItemNF.objCobrItensContrato.lNumIntDocCobranca, objItemNF.objCobrItensContrato.dtDataRefIni, objItemNF.objCobrItensContrato.dtDataRefFim)
            If lErro <> AD_SQL_SUCESSO Then gError 129943
    
        
        Else
        
            'Para cada medição do item
            For Each objItemMedicao In objItemNF.objCobrItensContrato.colMedicoes
            
                sContrato = String(STRING_CONTRATO_CODIGO, 0)
            
                lErro = Comando_Executar(alComando(1), "SELECT IMC.NumIntItemNFiscal, C.Codigo, IC.Seq FROM ItensDeMedicaoCobranca AS IMC, Contratos AS C, ItensDeContrato AS IC WHERE C.NumIntDoc = IC.NumIntContrato AND IC.NumIntDoc = IMC.NumIntItensContrato AND IMC.NumIntItensContrato = ? AND IMC.Medicao = ?", lNumIntItemNF, sContrato, iItem, objItemMedicao.lNumIntItensContrato, objItemMedicao.lMedicao)
                If lErro <> AD_SQL_SUCESSO Then gError 136191
            
                'Busca o item
                lErro = Comando_BuscarPrimeiro(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136192
            
                'Se já tiver isdo faturado dá erro
                If lErro = SUCESSO Then gError 136193
            
                'Insere em ItensDeMedicaoCobranca
                lErro = Comando_Executar(alComando(1), "INSERT INTO ItensDeMedicaoCobranca(NumIntItensContrato,Medicao, NumIntItemNFiscal, DataUltCobranca, NumIntDocCobranca, DataRefIni, DataRefFim ) VALUES (?,?,?,?,?,?,?)", _
                                                         objItemMedicao.lNumIntItensContrato, objItemMedicao.lMedicao, objItemNF.lNumIntDoc, objItemMedicao.dtDataCobranca, objItemNF.objCobrItensContrato.lNumIntDocCobranca, objItemMedicao.dtDataRefIni, objItemMedicao.dtDataRefFim)
        
                If lErro <> AD_SQL_SUCESSO Then gError 129943
        
            Next
        
        End If

    End If
    
    'Atualiza a data da próxima cobrança
    lErro = ItensDeContrato_Atualiza_DataProxCobranca(objItemNF.objCobrItensContrato)
    If lErro <> SUCESSO Then gError 129952

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Insere_Fatura = SUCESSO

    Exit Function

Erro_ItensDeContrato_Insere_Fatura:

    ItensDeContrato_Insere_Fatura = gErr

    Select Case gErr

        Case 129940
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129941 To 129943
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
        
        Case 129952, 136191, 136192
        
        Case 136193
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMMEDICAO_FATURADO", gErr, objItemMedicao.lMedicao, sContrato, iItem)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150001)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'#######################################################################
'FIM
'#######################################################################

'#######################################################
'Inserido por Wagner
Private Sub NFiscalContratoSQL_Prepara(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato, sSQL As String)
'Monta o SELECT que traz os dados necessários para o faturamento de uma nota fiscal

Dim sSelect1 As String, sWhere1 As String, sFrom1 As String, sSubSelect1 As String, sOrderBy As String
Dim sSelect2 As String, sWhere2 As String, sFrom2 As String, sSubSelect2 As String
Dim sSQL1 As String, sSQL2 As String, sWhereAux

On Error GoTo Erro_NFiscalContratoSQL_Prepara
    
    'Traz os Itens de Contratos Com Medição
    sSelect1 = "SELECT  C.NumIntDoc, " & _
                        "C.Codigo, " & _
                        "C.Descricao, " & _
                        "C.Cliente, " & _
                        "C.FilCli, " & _
                        "C.Ccl, " & _
                        "IC.NumIntDoc, " & _
                        "IC.Seq, " & _
                        "IC.Produto, " & _
                        "IC.DescProd, " & _
                        "IC.UM, " & _
                        "IC.CondPagto, " & _
                        "IC.Periodicidade, " & _
                        "IC.DataIniCobranca, " & _
                        "IM.DataCobranca, " & _
                        "IC.Valor, " & _
                        "M.Codigo AS NumIntMedicao, " & _
                        "IM.DataRefIni  AS RefIni, " & _
                        "IM.DataRefFim  AS RefFim, " & _
                        "IM.Quantidade AS Quantidade, " & _
                        "IM.Custo AS Custo, " & _
                        "IM.VlrCobrar AS ValorCobrar, " & _
                        "C.NaturezaOP, " & _
                        "C.TipoTributacao "

    sFrom1 = "FROM      Contratos                AS C, " & _
                        "ItensDeContrato         AS IC, " & _
                        "MedicaoContrato         AS M, " & _
                        "ItensDeMedicaoContrato  AS IM "
                    
    sWhere1 = "WHERE    C.NumIntDoc          = IC.NumIntContrato AND " & _
                        "C.NumIntDoc         = M.NumIntContrato AND " & _
                        "IC.NumIntDoc        = IM.NumIntItensContrato AND " & _
                        "IM.Medicao          = M.Codigo AND " & _
                        "C.Ativo             = 1 AND " & _
                        "IC.Cobrar           = 1 AND " & _
                        "C.FilialEmpresa     = ? AND " & _
                        "IM.DataCobranca  >= ? AND " & _
                        "IM.DataCobranca  <= ? AND " & _
                        "C.Tipo = ? AND " & _
                        "NOT EXISTS "
    
    'Verifica se o Item de Medição ainda não foi faturada
    sSubSelect1 = "( SELECT   NumIntItemNFiscal " & _
                    "FROM   ItensDeMedicaoCobranca AS IMNF, ItensNFiscal AS INF " & _
                    "WHERE  IMNF.NumIntItensContrato    = IM.NumIntItensContrato AND " & _
                            "IMNF.Medicao = IM.Medicao AND  " & _
                            "INF.NumIntDoc = IMNF.NumIntItemNFiscal ) "
    sWhere1 = sWhere1 & sSubSelect1
                            
    'Traz os Itens de Contratos Sem Medição
    sSelect2 = "SELECT  C.NumIntDoc, " & _
                        "C.Codigo, " & _
                        "C.Descricao, " & _
                        "C.Cliente, " & _
                        "C.FilCli, " & _
                        "C.Ccl, " & _
                        "IC.NumIntDoc, " & _
                        "IC.Seq, " & _
                        "IC.Produto, " & _
                        "IC.DescProd, " & _
                        "IC.UM, " & _
                        "IC.CondPagto, " & _
                        "IC.Periodicidade, " & _
                        "IC.DataIniCobranca, " & _
                        "IC.DataProxCobranca, " & _
                        "IC.Valor, " & _
                        "0 AS NumIntMedicao, " & _
                        "IC.DataRefIni  AS RefIni, " & _
                        "IC.DataRefFim  AS RefFim, " & _
                        "IC.Quantidade AS Quantidade, " & _
                        "0 AS Custo, " & _
                        "IC.Valor * IC.Quantidade AS ValorCobrar, " & _
                        "C.NaturezaOP, " & _
                        "C.TipoTributacao "

    sFrom2 = "FROM  Contratos        AS C, " & _
                    "ItensDeContrato AS IC "
                    
    sWhere2 = "WHERE     C.NumIntDoc         = IC.NumIntContrato AND " & _
                        "C.Ativo             = 1 AND " & _
                        "IC.Cobrar           = 1 AND " & _
                        "IC.Medicao          = 0 AND " & _
                        "C.FilialEmpresa     = ? AND " & _
                        "IC.DataProxCobranca >= ? AND " & _
                        "IC.DataProxCobranca <= ? AND " & _
                        "(IC.DataRefIni < C.DataFimContrato OR C.DataFimContrato = ?) AND " & _
                        "C.Tipo <= ? " 'Alterado por Wagner 09/06/05
                      
    sOrderBy = "ORDER BY C.Codigo, IC.CondPagto "
      
    If objGeracaoFatContrato.sContratoIni <> "" Then
        sWhereAux = sWhereAux & "AND C.Codigo >= ? "
    End If
    If objGeracaoFatContrato.sContratoFim <> "" Then
        sWhereAux = sWhereAux & "AND C.Codigo <= ? "
    End If
    
    If objGeracaoFatContrato.lClienteIni <> 0 Then
        sWhereAux = sWhereAux & "AND C.Cliente >= ? "
    End If
    If objGeracaoFatContrato.lClienteFim <> 0 Then
        sWhereAux = sWhereAux & "AND C.Cliente <= ? "
    End If
    
    sWhere1 = sWhere1 & sWhereAux
    sWhere2 = sWhere2 & sWhereAux
    
    sSQL1 = sSelect1 & sFrom1 & sWhere1
    sSQL2 = sSelect2 & sFrom2 & sWhere2 & sOrderBy
    
    sSQL = sSQL1 & " UNION " & sSQL2

    Exit Sub

Erro_NFiscalContratoSQL_Prepara:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150002)

    End Select

    Exit Sub

End Sub

Private Function NFiscalContratoInt_Prepara(ByVal lComando As Long, vlNumIntContrato As Variant, vsContrato As Variant, vsDescContrato As Variant, vlCliente As Variant, viFilCli As Variant, vsCcl As Variant, vlNumIntItem, viItem As Variant, vsProduto As Variant, vsDescProd As Variant, vsUM As Variant, viCondPagto As Variant, viPeriodicidade As Variant, vdtIniCobr As Variant, vdtProxCobr As Variant, vdValor As Variant, vlMedicao As Variant, vdtRefIni As Variant, vdtRefFim As Variant, vdQtd As Variant, vdCusto As Variant, vdVlrCobrar As Variant, vsNaturezaOP As Variant, viTipoTributacao As Variant, ByVal vlClienteIni As Variant, ByVal vlClienteFim As Variant, ByVal vsContratoIni As Variant, ByVal vsContratoFim As Variant, ByVal viFilialEmpresa As Variant, ByVal vdtCobrI As Variant, ByVal vdtCobrF As Variant, ByVal viTipo As Variant, ByVal sSQL As String) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados a serem faturados

Dim lErro As Long
Dim vdtDataNula As Variant 'Inserido 09/06/05

On Error GoTo Erro_NFiscalContratoInt_Prepara

    vdtDataNula = DATA_NULA 'Inserido dia 09/06/05

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129800

    lErro = Comando_BindVarInt(lComando, vlNumIntContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129801

    lErro = Comando_BindVarInt(lComando, vsContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129802
    
    lErro = Comando_BindVarInt(lComando, vsDescContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129803
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129804
    
    lErro = Comando_BindVarInt(lComando, viFilCli)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129805
    
    lErro = Comando_BindVarInt(lComando, vsCcl)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129806
    
    lErro = Comando_BindVarInt(lComando, vlNumIntItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129807
    
    lErro = Comando_BindVarInt(lComando, viItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129808
    
    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129809
    
    lErro = Comando_BindVarInt(lComando, vsDescProd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129810
    
    lErro = Comando_BindVarInt(lComando, vsUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129811
    
    lErro = Comando_BindVarInt(lComando, viCondPagto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129812
    
    lErro = Comando_BindVarInt(lComando, viPeriodicidade)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129813
    
    lErro = Comando_BindVarInt(lComando, vdtIniCobr)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129814
    
    lErro = Comando_BindVarInt(lComando, vdtProxCobr)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129815
    
    lErro = Comando_BindVarInt(lComando, vdValor)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129816
    
    lErro = Comando_BindVarInt(lComando, vlMedicao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129817
       
    lErro = Comando_BindVarInt(lComando, vdtRefIni)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129818
    
    lErro = Comando_BindVarInt(lComando, vdtRefFim)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129818
    
    lErro = Comando_BindVarInt(lComando, vdQtd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129819
    
    lErro = Comando_BindVarInt(lComando, vdCusto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129820
    
    lErro = Comando_BindVarInt(lComando, vdVlrCobrar)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129821
        
    lErro = Comando_BindVarInt(lComando, vsNaturezaOP)
    If (lErro <> AD_SQL_SUCESSO) Then gError 132838
   
    lErro = Comando_BindVarInt(lComando, viTipoTributacao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 132839
   
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129822
    
    lErro = Comando_BindVarInt(lComando, vdtCobrI)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129823
    
    lErro = Comando_BindVarInt(lComando, vdtCobrF)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129824
        
    lErro = Comando_BindVarInt(lComando, viTipo)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129824
   
    If vsContratoIni <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129884
    End If

    If vsContratoFim <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129885
    End If

    If vlClienteIni <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129886
    End If

    If vlClienteFim <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129887
    End If
    
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129888
    
    lErro = Comando_BindVarInt(lComando, vdtCobrI)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129889
    
    lErro = Comando_BindVarInt(lComando, vdtCobrF)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129890
     
    '###############################
    'Inserido por Wagner
    'Inserido 09/06/05
    lErro = Comando_BindVarInt(lComando, vdtDataNula)
    If (lErro <> AD_SQL_SUCESSO) Then gError 136669
    '################################
    
    lErro = Comando_BindVarInt(lComando, viTipo)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129824
    
    If vsContratoIni <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129891
    End If

    If vsContratoFim <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129892
    End If

    If vlClienteIni <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129893
    End If

    If vlClienteFim <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129894
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129895

    NFiscalContratoInt_Prepara = SUCESSO

    Exit Function

Erro_NFiscalContratoInt_Prepara:

    NFiscalContratoInt_Prepara = gErr

    Select Case gErr

        Case 129800 To 129824, 129882 To 129895, 136669
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150003)

    End Select

    Exit Function

End Function

Public Function NFiscalContrato_Prepara(lNumIntRel As Long, ByVal objGeracaoFatContrato As ClassGeracaoFatContrato) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim iTotal As Integer
Dim iTotalItens As Integer
Dim iSeqNfiscal As Integer
Dim iSeq As Integer
Dim objContratoFat As ClassContratoFat
Dim objContratoFatItens As ClassContratoFatItens

Dim objNFiscal As ClassNFiscal, iTemp As Integer
Dim objItemNF As ClassItemNF
Dim objContabil As ClassContabil
Dim dValorTotal As Double, objTribTab As ClassTribTab
Dim objTipoDocInfo As New ClassTipoDocInfo, dValorLiquido As Double
Dim iItem As Integer

On Error GoTo Erro_NFiscalContrato_Prepara

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129179
    Next
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129180

    'Lê o número do Relatório
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_CONTRATOPREVFATURA", lNumIntRel)
    If lErro <> SUCESSO Then gError 129181
    
    'Lê o Tipo de Documento
    objTipoDocInfo.iCodigo = objGeracaoFatContrato.iTipoNFiscal
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 130023

    'se não estiver cadastrado ==> erro
    If lErro = 31415 Then gError 130024
    
    'Lê a Serie Padrão
    lErro = CF("NFiscalContrato_Le", objGeracaoFatContrato, iTotalItens, iTotal)
    If lErro <> SUCESSO Then gError 129182
    
    For Each objContratoFat In objGeracaoFatContrato.colItens
                      
        Set objNFiscal = New ClassNFiscal
                
        Call objNFiscal.Inicializa_Tributacao
        
        objNFiscal.iCondicaoPagto = objContratoFat.iCondPagto
        objNFiscal.iFilialCli = objContratoFat.iFilCli
        objNFiscal.lCliente = objContratoFat.lCliente
        objNFiscal.dtDataReferencia = objGeracaoFatContrato.dtDataRefVencimento
        objNFiscal.dtDataEmissao = objGeracaoFatContrato.dtDataEmissao
        objNFiscal.dtDataSaida = objGeracaoFatContrato.dtDataEmissao
        objNFiscal.dtDataEntrada = DATA_NULA
        objNFiscal.dtDataVencimento = DATA_NULA
        objNFiscal.iFilialEmpresa = objGeracaoFatContrato.iFilialEmpresa
        objNFiscal.iFilialEntrega = objGeracaoFatContrato.iFilialEmpresa
        objNFiscal.dtDataEmissao = objGeracaoFatContrato.dtDataEmissao
        objNFiscal.sSerie = objContratoFat.sSerie
        objNFiscal.sNaturezaOp = objContratoFat.sNaturezaOp
        objNFiscal.iTipoDocInfo = objGeracaoFatContrato.iTipoNFiscal
        objNFiscal.iTipoNFiscal = objGeracaoFatContrato.iTipoNFiscal
        objNFiscal.iStatus = STATUS_LANCADO
        
        If Len(Trim(objContratoFat.sNaturezaOp)) <> 0 Then
            objNFiscal.sNaturezaOp = objContratoFat.sNaturezaOp
            objNFiscal.objTributacaoNF.sNaturezaOpInterna = objContratoFat.sNaturezaOp
            objNFiscal.objTributacaoNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
        Else
            objNFiscal.objTributacaoNF.iNaturezaOpManual = VAR_PREENCH_AUTOMATICO
        End If
        
        If objContratoFat.iTipoTributacao <> 0 Then
            objNFiscal.objTributacaoNF.iTipoTributacao = objContratoFat.iTipoTributacao
            objNFiscal.objTributacaoNF.iTipoTributacaoManual = VAR_PREENCH_MANUAL
        Else
            objNFiscal.objTributacaoNF.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
        End If
        
        With objNFiscal.objTributacaoNF
            .objTributacaoDesconto.iNaturezaOpManual = VAR_PREENCH_AUTOMATICO
            .objTributacaoDesconto.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
            .objTributacaoFrete.iNaturezaOpManual = VAR_PREENCH_AUTOMATICO
            .objTributacaoFrete.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
            .objTributacaoOutras.iNaturezaOpManual = VAR_PREENCH_AUTOMATICO
            .objTributacaoOutras.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
            .objTributacaoSeguro.iNaturezaOpManual = VAR_PREENCH_AUTOMATICO
            .objTributacaoSeguro.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
        
            .iICMSBaseManual = VAR_PREENCH_AUTOMATICO
            .iICMSSubstBaseManual = VAR_PREENCH_AUTOMATICO
            .iICMSSubstValorManual = VAR_PREENCH_AUTOMATICO
            .iICMSValorManual = VAR_PREENCH_AUTOMATICO
            .iIPIBaseManual = VAR_PREENCH_AUTOMATICO
            .iIPIValorManual = VAR_PREENCH_AUTOMATICO
            
            .iIRRFAliquotaManual = VAR_PREENCH_AUTOMATICO
            .iIRRFValorManual = VAR_PREENCH_AUTOMATICO
            .iISSAliquotaManual = VAR_PREENCH_AUTOMATICO
            .iISSValorManual = VAR_PREENCH_AUTOMATICO
            '??? .iISSInclusoManual = VAR_PREENCH_AUTOMATICO
            
            .iINSSBaseManual = VAR_PREENCH_AUTOMATICO
            .iINSSDeducoesManual = VAR_PREENCH_AUTOMATICO
            .iINSSValorManual = VAR_PREENCH_AUTOMATICO
            .iINSSRetidoManual = VAR_PREENCH_AUTOMATICO
            
            .iPISRetidoManual = VAR_PREENCH_AUTOMATICO
            .iCOFINSRetidoManual = VAR_PREENCH_AUTOMATICO
            .iCSLLRetidoManual = VAR_PREENCH_AUTOMATICO
            
        End With
        
        dValorTotal = 0
        
        For Each objContratoFatItens In objContratoFat.colItens
        
            Set objItemNF = New ClassItemNF
            Call objItemNF.Inicializa_Tributacao
            
            objItemNF.dQuantidade = objContratoFatItens.dQuantidade
            objItemNF.dPrecoUnitario = objContratoFatItens.dValor
            objItemNF.dValorTotal = objContratoFatItens.dVlrCobrar
               
            dValorTotal = dValorTotal + objItemNF.dValorTotal
        
            objNFiscal.ColItensNF.Add1 objItemNF
        
            If Len(Trim(objContratoFatItens.sNaturezaOp)) <> 0 Then
                objItemNF.objTributacaoItemNF.sNaturezaOp = objContratoFatItens.sNaturezaOp
                objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
            Else
                If Len(Trim(objContratoFat.sNaturezaOp)) <> 0 Then
                    objItemNF.objTributacaoItemNF.sNaturezaOp = objContratoFat.sNaturezaOp
                    objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
                Else
                    objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_AUTOMATICO
                End If
            End If
            
            If objContratoFatItens.iTipoTributacao <> 0 Then
                objItemNF.objTributacaoItemNF.iTipoTributacao = objContratoFatItens.iTipoTributacao
                objItemNF.objTributacaoItemNF.iTipoTributacaoManual = VAR_PREENCH_MANUAL
            Else
                If objContratoFat.iTipoTributacao <> 0 Then
                    objItemNF.objTributacaoItemNF.iTipoTributacao = objContratoFat.iTipoTributacao
                    objItemNF.objTributacaoItemNF.iTipoTributacaoManual = VAR_PREENCH_MANUAL
                Else
                    objItemNF.objTributacaoItemNF.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
                End If
            End If
        
            With objItemNF.objTributacaoItemNF
                .iIPITipoManual = VAR_PREENCH_AUTOMATICO
                .iIPIBaseManual = VAR_PREENCH_AUTOMATICO
                .iIPIPercRedBaseManual = VAR_PREENCH_AUTOMATICO
                .iIPIAliquotaManual = VAR_PREENCH_AUTOMATICO
                .iIPIValorManual = VAR_PREENCH_AUTOMATICO
                .iICMSTipoManual = VAR_PREENCH_AUTOMATICO
                .iICMSBaseManual = VAR_PREENCH_AUTOMATICO
                .iICMSPercRedBaseManual = VAR_PREENCH_AUTOMATICO
                .iICMSAliquotaManual = VAR_PREENCH_AUTOMATICO
                .iICMSValorManual = VAR_PREENCH_AUTOMATICO
                .iICMSSubstBaseManual = VAR_PREENCH_AUTOMATICO
                .iICMSSubstAliquotaManual = VAR_PREENCH_AUTOMATICO
                .iICMSSubstValorManual = VAR_PREENCH_AUTOMATICO
            End With
            
        Next
        
        objNFiscal.dValorProdutos = dValorTotal
        
        Set objTribTab = New ClassTribTab
        
        lErro = objTribTab.TributacaoNF_Reset(objNFiscal)
        If lErro <> SUCESSO Then gError 130020
        
        Call objTribTab.TipoNFiscal_Definir(objTipoDocInfo.iCodigo, objTipoDocInfo.sSigla)
        Call objTribTab.DataEmissao_Alterada(objGeracaoFatContrato.dtDataEmissao)
        Call objTribTab.Serie_Alterada(objNFiscal.sSerie)
        
        'forçado
        objTribTab.objNFTributacao.iISSInclusoManual = VAR_PREENCH_AUTOMATICO

        lErro = gobjTributacao.AtualizaImpostos(objTribTab.mvarobjNFTributacao, 0)
        If lErro <> SUCESSO Then gError 130021
        
        lErro = objTribTab.PreencherNF(objNFiscal)
        If lErro <> SUCESSO Then gError 130022
        
        Set objTribTab = Nothing
        
        objNFiscal.sNaturezaOp = objNFiscal.objTributacaoNF.sNaturezaOpInterna
        
        'acertar valor total e da parcela, considerando os tributos, retencóes,...
        objNFiscal.dValorTotal = dValorTotal + objNFiscal.objTributacaoNF.dICMSSubstValor + objNFiscal.objTributacaoNF.dIPIValor + objNFiscal.dValorFrete + objNFiscal.dValorSeguro + objNFiscal.dValorOutrasDespesas + IIf(objNFiscal.objTributacaoNF.iISSIncluso = 0, objNFiscal.objTributacaoNF.dISSValor, 0)

        objContratoFat.dValor = objNFiscal.dValorTotal

    Next
    
   
    For Each objContratoFat In objGeracaoFatContrato.colItens
                      
        iSeqNfiscal = iSeqNfiscal + 1
        iSeq = 0
        
        'Insere a Capa da NotaFiscal
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelContratoNFiscal (NumIntRel, Seq, FilialEmpresa, Contrato, CondicaoPagto,FilialCli,Cliente,DataReferencia,TipoDocInfo,Serie,NaturezaOp,TipoTributacao,ValorNF) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                lNumIntRel, iSeqNfiscal, objGeracaoFatContrato.iFilialEmpresa, objContratoFat.sContrato, objContratoFat.iCondPagto, objContratoFat.iFilCli, objContratoFat.lCliente, objGeracaoFatContrato.dtDataRefVencimento, _
                                                objGeracaoFatContrato.iTipoNFiscal, objContratoFat.sSerie, objContratoFat.sNaturezaOp, objContratoFat.iTipoTributacao, objContratoFat.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 129183

        For Each objContratoFatItens In objContratoFat.colItens
        
            iSeq = iSeq + 1
    
            'Para cada Item Insere
            lErro = Comando_Executar(alComando(2), "INSERT INTO RelContratoNFiscalItens(NumIntRel,SeqNFiscal, Seq, Custo,ValorTotal,Ccl,DescricaoItem,Produto,UM,PrecoUnitario,Quantidade,NaturezaOP,DataRefIni,DataRefFim,DataCobranca) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                       lNumIntRel, iSeqNfiscal, iSeq, objContratoFatItens.dCusto, objContratoFatItens.dVlrCobrar, objContratoFatItens.sCcl, objContratoFatItens.sDescProd, objContratoFatItens.sProduto, _
                                       objContratoFatItens.sUM, objContratoFatItens.dValor, objContratoFatItens.dQuantidade, objContratoFatItens.sNaturezaOp, objContratoFatItens.dtDataRefIni, objContratoFatItens.dtDataRefFim, objContratoFatItens.dtDataProxCobranca)
            If lErro <> AD_SQL_SUCESSO Then gError 129184
     
        Next
                          
    Next

    'Confirma transação
    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 129186

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalContrato_Prepara = SUCESSO

    Exit Function

Erro_NFiscalContrato_Prepara:

    NFiscalContrato_Prepara = gErr

    Select Case gErr

        Case 129179
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 129180
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 129181, 129182, 129185, 130020 To 130023
        
        Case 129183
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCONTRATONFISCAL", gErr)
        
        Case 129184
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCONTRATONFISCALITENS", gErr)
        
        Case 129186
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)
        
        Case 130024
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150004)

    End Select

    'Rollback
    Call Transacao_Rollback
    
    'Fecha o Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFiscalContrato_Le(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato, iTotalItensNFs As Integer, iTotalNFs As Integer) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim sSQL As String
Dim iIndice As Integer

'Variáveis Auxiliares
Dim iCondPagtoAux As Integer
Dim sContratoAux As String

'Variáveis de retorno de dados do BD
Dim lNumIntContrato As Long
Dim sContrato  As String
Dim sDescContrato  As String
Dim lCliente  As Long
Dim iFilCli  As Integer
Dim sCcl As String
Dim lNumIntItensContrato As Long
Dim sProduto  As String
Dim sDescProd  As String
Dim sUM  As String
Dim iCondPagto  As Integer
Dim iPeriodicidade  As Integer
Dim dtDataIniCobranca  As Date
Dim dtDataProxCobranca  As Date
Dim dValor As Double
Dim lMedicao As Long
Dim dQuantidade  As Double
Dim dCusto  As Double
Dim dVlrCobrar As Double
Dim iItem As Integer
Dim iTipoTributacao As Integer
Dim sNaturezaOp As String
Dim dtDataRefIni As Date
Dim dtDataRefFim As Date

Dim sSeriePadrao As String

Dim objContratoFat As ClassContratoFat
Dim objContratoFatItens As ClassContratoFatItens
Dim objTipoDocInfo As New ClassTipoDocInfo

On Error GoTo Erro_NFiscalContrato_Le

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129187
    Next
   
    'Lê a Serie Padrão
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then gError 129188

    objTipoDocInfo.iCodigo = objGeracaoFatContrato.iTipoNFiscal
    
    'Buscar a NarurezaOpPadrão
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 129189
       
    'Monta o Select
    Call NFiscalContratoSQL_Prepara(objGeracaoFatContrato, sSQL)

    'Aloca espaço suficiente para o retorno dos dados do BD
    sContrato = String(STRING_CONTRATO_CODIGO, 0)
    sDescContrato = String(STRING_CONTRATO_DESCRICAO, 0)
    sCcl = String(STRING_CONTRATO_CCL, 0)
    sProduto = String(STRING_PRODUTO, 0)
    sDescProd = String(STRING_PRODUTO_DESCRICAO, 0)
    sUM = String(STRING_UM_SIGLA, 0)
    sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)

    'Passa os Binds
    lErro = NFiscalContratoInt_Prepara(alComando(1), lNumIntContrato, sContrato, sDescContrato, lCliente, iFilCli, sCcl, lNumIntItensContrato, iItem, sProduto, sDescProd, sUM, iCondPagto, iPeriodicidade, dtDataIniCobranca, dtDataProxCobranca, dValor, lMedicao, dtDataRefIni, dtDataRefFim, dQuantidade, dCusto, dVlrCobrar, sNaturezaOp, iTipoTributacao, objGeracaoFatContrato.lClienteIni, objGeracaoFatContrato.lClienteFim, objGeracaoFatContrato.sContratoIni, objGeracaoFatContrato.sContratoFim, objGeracaoFatContrato.iFilialEmpresa, objGeracaoFatContrato.dtDataCobrIni, objGeracaoFatContrato.dtDataCobrFim, CONTRATOS_RECEBER, sSQL)
    If lErro <> AD_SQL_SUCESSO Then gError 129190

    iTotalItensNFs = 0
    iTotalNFs = 0

    'Busca primeiro Item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129191
      
    Do While lErro = AD_SQL_SUCESSO
                                   
        'Verifica se houve troca das Informações contidas na capa da NotaFiscal
        If sContratoAux <> sContrato Or iCondPagtoAux <> iCondPagto Or lErro = AD_SQL_SEM_DADOS Then
                        
            Set objContratoFat = New ClassContratoFat
            
            objContratoFat.dtDataRef = objGeracaoFatContrato.dtDataRefVencimento
            objContratoFat.iCondPagto = iCondPagto
            objContratoFat.iFilCli = iFilCli
            objContratoFat.lCliente = lCliente
            
            If Len(Trim(sNaturezaOp)) = 0 Then
                objContratoFat.sNaturezaOp = ""
            Else
                objContratoFat.sNaturezaOp = sNaturezaOp
            End If
            objContratoFat.iTipoTributacao = iTipoTributacao
            
            objContratoFat.sSerie = sSeriePadrao
            objContratoFat.sContrato = sContrato
            
            sContratoAux = sContrato
            iCondPagtoAux = iCondPagto
                        
        End If
        
        Set objContratoFatItens = New ClassContratoFatItens
        
        objContratoFatItens.dCusto = dCusto
        objContratoFatItens.dQuantidade = dQuantidade
        objContratoFatItens.dValor = dValor
        objContratoFatItens.dVlrCobrar = dVlrCobrar
        objContratoFatItens.iItem = iItem
        objContratoFatItens.sCcl = sCcl
        objContratoFatItens.sDescProd = sDescProd
        objContratoFatItens.sProduto = sProduto
        objContratoFatItens.lMedicao = lMedicao
        objContratoFatItens.lNumIntItensContrato = lNumIntItensContrato
        objContratoFatItens.sUM = sUM
        objContratoFatItens.dtDataProxCobranca = dtDataProxCobranca
        objContratoFatItens.sNaturezaOp = objContratoFat.sNaturezaOp
        objContratoFatItens.dtDataRefIni = dtDataRefIni
        objContratoFatItens.dtDataRefFim = dtDataRefFim
                   
        objContratoFat.colItens.Add objContratoFatItens
        iTotalItensNFs = iTotalItensNFs + 1
                   
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129192
            
        'Verifica se houve troca das Informações contidas na capa da NotaFiscal
        If lErro = AD_SQL_SEM_DADOS Or (sContratoAux <> sContrato Or iCondPagtoAux <> iCondPagto) Then
            objGeracaoFatContrato.colItens.Add objContratoFat
            iTotalNFs = iTotalNFs + 1
        End If
    
    Loop

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscalContrato_Le = SUCESSO

    Exit Function

Erro_NFiscalContrato_Le:

    NFiscalContrato_Le = gErr

    Select Case gErr

        Case 129187
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129188 To 129192

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150005)

    End Select

    'Fecha o Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'#################################################
'Inserido por Wagner
Public Function Contrato_Grava_RelErro(ByVal objContratoFat As ClassContratoFat) As Long
'Grava um relatório de erros de Notas fiscais geradas por contratos

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, lTransacao As Long
Dim lNumIntProx As Long

On Error GoTo Erro_Contrato_Grava_RelErro

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 136000
    Next
    
    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130395
    
    'Obtém o próximo número interno
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_COBRANCACONTRATO", lNumIntProx)
    If lErro <> SUCESSO Then gError 136001
   
    'Insere item
    lErro = Comando_Executar(alComando(1), "INSERT INTO FaturamentoContratosRelErros (NumIntDoc, Contrato, FilialEmpresa, Serie, NaturezaOP, TipoTributacao, DataReferencia, CondPagto,TipoErro,Valor,NumNotaFiscal, NumIntDocCobranca) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                        lNumIntProx, objContratoFat.sContrato, objContratoFat.iFilialEmpresa, objContratoFat.sSerie, objContratoFat.sNaturezaOp, objContratoFat.iTipoTributacao, objContratoFat.dtDataRef, objContratoFat.iCondPagto, objContratoFat.iTipoErro, objContratoFat.dValor, objContratoFat.lNumNotaFiscal, objContratoFat.lNumIntDocCobranca)
    If lErro <> AD_SQL_SUCESSO Then gError 136002

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130396
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contrato_Grava_RelErro = SUCESSO

    Exit Function

Erro_Contrato_Grava_RelErro:

    Contrato_Grava_RelErro = gErr

    Select Case gErr
    
        Case 136000
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 136001
        
        Case 136002
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FATCONTERROS", gErr)

        Case 130395
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 130396
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150006)

    End Select

    'Desfaz as alterações
    Call Transacao_Rollback
    
    'Fecha o Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function CobrancaContrato_Grava(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato) As Long
'Grava os dados utilizados para faturar contratos a receber

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lNumProx As Long

On Error GoTo Erro_CobrancaContrato_Grava

    'Abre Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 132975
    Next

    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 132976
    
    'Busca próximo identificador
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_COBRANCACONTRATO", lNumProx)
    If lErro <> SUCESSO Then gError 132977
    
    objGeracaoFatContrato.lNumIntDoc = lNumProx

    'Insere
    lErro = Comando_Executar(alComando(1), "INSERT INTO CobrancaContrato( NumIntDoc, DataCobrIni, " & _
                "DataCobrFim, Usuario, DataGeracao, ClienteIni, ClienteFim, " & _
                "ContratoIni, ContratoFim, DataEmissao, DataRefVencimento, FilialEmpresa, " & _
                "TipoNFiscal) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objGeracaoFatContrato.lNumIntDoc, objGeracaoFatContrato.dtDataCobrIni, _
                objGeracaoFatContrato.dtDataCobrFim, objGeracaoFatContrato.sUsuario, objGeracaoFatContrato.dtDataGeracao, objGeracaoFatContrato.lClienteIni, objGeracaoFatContrato.lClienteFim, _
                objGeracaoFatContrato.sContratoIni, objGeracaoFatContrato.sContratoFim, objGeracaoFatContrato.dtDataEmissao, objGeracaoFatContrato.dtDataRefVencimento, objGeracaoFatContrato.iFilialEmpresa, _
                objGeracaoFatContrato.iTipoNFiscal)
    If lErro <> AD_SQL_SUCESSO Then gError 132978
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 132979
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CobrancaContrato_Grava = SUCESSO

    Exit Function

Erro_CobrancaContrato_Grava:

    CobrancaContrato_Grava = gErr

        Select Case gErr

        Case 132975
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 132976
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 132977
        
        Case 132978
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COBRANCACONTRATO", gErr)

        Case 132979
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150007)

    End Select

    'Desfaz as alterações
    Call Transacao_Rollback
    
    'Fecha comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function NFiscal_Exclui_ContratoCobranca(ByVal lNumIntItem As Long) As Long
'Exclui o Link entre o contrato e a NF quando essa é excluida

Dim alComando(1 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_NFiscal_Exclui_ContratoCobranca

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 132992
    Next
    
    'Le o item posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItensContrato FROM ItensDeMedicaoCobranca WHERE NumIntItemNFiscal = ? ", 0, lNumIntDoc, lNumIntItem)
    If lErro <> AD_SQL_SUCESSO Then gError 132993

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132994

    'Se encontrar
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Bloqueia o registro contra Alterações/Leituras
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 132995
        
        'Exclui o item de medição de contrato cobrança
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensDeMedicaoCobranca", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 132996
        
        'Busca o item
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136004
    
    Loop

    'Le o item posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItensContrato FROM ItensDeContratoCobranca WHERE NumIntItemNFiscal = ? ", 0, lNumIntDoc, lNumIntItem)
    If lErro <> AD_SQL_SUCESSO Then gError 132997

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132998

    'Se encontrar
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Bloqueia o registro contra Alterações/Leituras
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 132999
        
        'Exclui o item de contrato cobrança
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensDeContratoCobranca", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 132989
            
        'Busca o item
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136005
    
    Loop
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscal_Exclui_ContratoCobranca = SUCESSO

    Exit Function

Erro_NFiscal_Exclui_ContratoCobranca:

    NFiscal_Exclui_ContratoCobranca = gErr

    Select Case gErr
    
        Case 132989
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMCONTRATOCOBRANCA", gErr)

        Case 132992
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 132993, 132994, 136004
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMMEDICAOCOBRANCA", gErr)
            
        Case 132995
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMMEDICAOCOBRANCA", gErr)

        Case 132996
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMMEDICAOCOBRANCA", gErr)
            
        Case 132997, 132998, 136005
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCONTRATOCOBRANCA", gErr)
        
        Case 132999
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMCONTRATOCOBRANCA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150008)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'#################################################


Function Contrato_ProxCobranca(ByVal iPeriodicidade As Integer, ByVal dtDataUltCobranca As Date, ByVal dtRefIni As Date, dtDataProxCobranca As Date, dtRefFim As Date) As Long

On Error GoTo Erro_Contrato_ProxCobranca

    'Soma o período a data da última cobrança
    Select Case iPeriodicidade
    
        Case PERIODICIDADE_LIVRE
            dtDataProxCobranca = dtDataUltCobranca
            dtRefFim = dtRefIni
        
        Case PERIODICIDADE_SEMANAL
            dtDataProxCobranca = DateAdd("d", 7, dtDataUltCobranca)
            dtRefFim = DateAdd("d", 7, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_DECENDIAL
            dtDataProxCobranca = DateAdd("d", 10, dtDataUltCobranca)
            dtRefFim = DateAdd("d", 10, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_QUINZENAL
            dtDataProxCobranca = DateAdd("d", 15, dtDataUltCobranca)
            dtRefFim = DateAdd("d", 15, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_MENSAL
            dtDataProxCobranca = DateAdd("m", 1, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 1, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_BIMESTRAL
            dtDataProxCobranca = DateAdd("m", 2, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 2, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_TRIMESTRAL
            dtDataProxCobranca = DateAdd("m", 3, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 3, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_QUADRIMESTRAL
            dtDataProxCobranca = DateAdd("m", 4, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 4, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_SEMESTRAL
            dtDataProxCobranca = DateAdd("m", 6, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 6, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_ANUAL
            dtDataProxCobranca = DateAdd("yyyy", 1, dtDataUltCobranca)
            dtRefFim = DateAdd("yyyy", 1, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case Else
            dtDataProxCobranca = dtDataUltCobranca
            dtRefFim = dtRefIni
        
    End Select

    Contrato_ProxCobranca = SUCESSO
    
    Exit Function

Erro_Contrato_ProxCobranca:

    Contrato_ProxCobranca = gErr

    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150009)

    End Select

    Exit Function

End Function

Private Function Verifica_Integridade_NFiscal(ByVal objNFiscal As ClassNFiscal) As Long
'verifica se o cliente possui o crédito para faturar a nota fiscal.
'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim objProduto As New ClassProduto
Dim objItemNF As ClassItemNF
Dim dFator As Double
Dim dQuantVendida As Double
Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim dQuantRemessa As Double
Dim sUM As String
Dim dQuantDevolvida As Double
Dim dQuantidade As Double
Dim dQuantFaturada As Double

On Error GoTo Erro_Verifica_Integridade_NFiscal

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 133109
    Next

    'se estiver lidando com uma nota fiscal fatura venda fora do estabelecimento
    'verificar se quantidade remetida - quantidade devolvida - quantidade ja faturada >= quantidade a faturar nesta nota
    If objNFiscal.iTipoNFiscal = DOCINFO_NFISFVFE Then

        For Each objItemNF In objNFiscal.ColItensNF
        
            dQuantFaturada = 0
            dQuantDevolvida = 0
        
            objProduto.sCodigo = objItemNF.sProduto
            
            'ler dados do produto
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 133106
            
            'se o produto não estiver cadastrado
            If lErro = 28030 Then gError 133107
        
            'converter qtde a faturar p/UMEstoque do produto
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 133108
        
            dQuantVendida = objItemNF.dQuantidade * dFator
            
            sUM = String(STRING_UM_SIGLA, 0)
            
            'Lê a nota fiscal de remessa para venda fora do estabelecimento associada
            lErro = Comando_Executar(alComando(1), "SELECT Quantidade, UnidadeMed FROM ItensNFiscal, NFiscal WHERE NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.NumIntDoc=? AND ItensNFiscal.Produto=? AND NFiscal.Status <> ?", _
            dQuantRemessa, sUM, objNFiscal.lNumIntNotaOriginal, objItemNF.sProduto, STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 133110
            
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133111
        
            'se nao encontrou ==> erro
            If lErro <> AD_SQL_SUCESSO Then gError 133112

            'converter qtde a faturar p/UMEstoque do produto
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 133113

            dQuantRemessa = dQuantRemessa * dFator

            sUM = String(STRING_UM_SIGLA, 0)

            'Lê as notas de devolucao associadas a nota fiscal de remessa para venda fora do estabelecimento
            lErro = Comando_Executar(alComando(2), "SELECT Quantidade, UnidadeMed FROM ItensNFiscal, NFiscal WHERE NFiscal.TipoNFiscal = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.NumIntNotaOriginal = ? AND ItensNFiscal.Produto=? AND NFiscal.Status <> ?", _
            dQuantidade, sUM, DOCINFO_NFIEDVRFE, objNFiscal.lNumIntNotaOriginal, objItemNF.sProduto, STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 133114
            
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133115

            Do While lErro = AD_SQL_SUCESSO
            
                'converter qtde a faturar p/UMEstoque do produto
                lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 133116
    
                dQuantidade = dQuantidade * dFator
            
                dQuantDevolvida = dQuantDevolvida + dQuantidade
            
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133117
            
            Loop

            sUM = String(STRING_UM_SIGLA, 0)

            'Lê as notas de faturamento associadas a nota fiscal de remessa para venda fora do estabelecimento
            lErro = Comando_Executar(alComando(3), "SELECT Quantidade, UnidadeMed FROM ItensNFiscal, NFiscal WHERE NFiscal.TipoNFiscal = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.NumIntNotaOriginal = ? AND ItensNFiscal.Produto=? AND NFiscal.Status <> ? AND NFiscal.NumIntDoc <> ?", _
            dQuantidade, sUM, DOCINFO_NFISFVFE, objNFiscal.lNumIntNotaOriginal, objItemNF.sProduto, STATUS_CANCELADO, objNFiscal.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 133118
            
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133119

            Do While lErro = AD_SQL_SUCESSO
            
                'converter qtde a faturar p/UMEstoque do produto
                lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 133120
    
                dQuantidade = dQuantidade * dFator
            
                dQuantFaturada = dQuantFaturada + dQuantidade
            
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133121
            
            Loop

            'se a quantidade remetida menos a devolvida e ja faturada forem menores que a quantidade vendida ==> erro
            If dQuantRemessa - dQuantDevolvida - dQuantFaturada < dQuantVendida Then gError 133122

        Next

    End If
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Verifica_Integridade_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Verifica_Integridade_NFiscal:

    Verifica_Integridade_NFiscal = gErr
    
    Select Case gErr

        Case 133106, 133108, 133113, 133116, 133120

        Case 133107
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)

        Case 133109
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 133110, 133111, 133114, 133115, 133117, 133118, 133119, 133121
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 133112
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNF_INEXISTENTE", gErr)

        Case 133122
            Call Rotina_Erro(vbOKOnly, "ERRO_QUANT_EXCEDE_REMVFE", gErr, objItemNF.sProduto, dQuantRemessa, dQuantDevolvida, dQuantFaturada, dQuantVendida)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150010)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

'#################################################

'Inserido por Jorge Specian - 23/05/2005
'---------------------------------------
Function Projeto_Automatico(lCodigo As Long) As Long
'Obtem o próximo número de Projeto

Dim lErro As Long, lNumAuto As Long

On Error GoTo Erro_Projeto_Automatico

    'seleciona o codigo no bd e verifica se já existe
    lErro = CF("Config_ObterAutomatico", "FATConfig", "NUM_PROX_PROJETO", "Projeto", "Codigo", lNumAuto)
    If lErro <> SUCESSO And lErro <> 25191 Then gError 139169

    lCodigo = lNumAuto

    Projeto_Automatico = SUCESSO

    Exit Function

Erro_Projeto_Automatico:

    Projeto_Automatico = gErr

   Select Case gErr

        'Erro já tratado
        Case 139169

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150011)

    End Select

    Exit Function

End Function

Public Function Projeto_Grava(ByVal objProjeto As ClassProjeto) As Long
'Grava o Projeto passado como parametro no BD

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Projeto_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 139170

    lErro = CF("Projeto_Grava_EmTrans", objProjeto)
    If lErro <> SUCESSO Then gError 139171

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 139172

    Projeto_Grava = SUCESSO

    Exit Function

Erro_Projeto_Grava:

    Projeto_Grava = gErr

    Select Case gErr

        Case 139170
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 139171

        Case 139172
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150012)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Projeto_Grava_EmTrans(ByVal objProjeto As ClassProjeto) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lCodigo As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_Projeto_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 139173
    Next

    'Busca o Projeto com mesmo Nome Reduzido
    lErro = Comando_Executar(alComando(0), "SELECT Codigo FROM Projeto WHERE NomeReduzido = ?", lCodigo, objProjeto.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then gError 139174

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139175

    'Le a tabela Projeto com mesmo Codigo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM Projeto WHERE Codigo= ? ", _
                0, lNumIntDoc, objProjeto.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 139176

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139177

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Se o NomeReduzido já existe
        If lCodigo <> 0 Then

            'Se o Código referente ao NomeReduzido já existente forem diferentes do Projeto a ser gravado, Erro.
            If objProjeto.lCodigo <> lCodigo Then gError 139178

        End If

        objProjeto.lNumIntDoc = lNumIntDoc

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 139179

        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Projeto SET NomeReduzido= ? , Descricao= ? , " & _
                "CodCliente= ? , CodFilial= ? , Responsavel= ? , DataCriacao= ? , DataValidade = ?, " & _
                "Observacao = ? ", alComando(1), _
                objProjeto.sNomeReduzido, objProjeto.sDescricao, objProjeto.lCodCliente, objProjeto.iCodFilial, _
                objProjeto.sResponsavel, objProjeto.dtDataCriacao, objProjeto.dtDataValidade, objProjeto.sObservacao)
        If lErro <> AD_SQL_SUCESSO Then gError 139180
        
    Else

        If lCodigo <> 0 Then gError 139181

        'Obter NumIntDoc
        'gera um NumIntDoc para o novo Projeto.
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_PROJETO", lNumIntDoc)
        If lErro <> SUCESSO Then gError 139182

        objProjeto.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(2), "INSERT INTO Projeto(NumIntDoc, Codigo, NomeReduzido, " & _
                "Descricao, CodCliente, CodFilial, Responsavel, DataCriacao, DataValidade, Observacao) VALUES (?,?,?,?,?,?,?,?,?,?)", _
                objProjeto.lNumIntDoc, objProjeto.lCodigo, objProjeto.sNomeReduzido, objProjeto.sDescricao, objProjeto.lCodCliente, objProjeto.iCodFilial, _
                objProjeto.sResponsavel, objProjeto.dtDataCriacao, objProjeto.dtDataValidade, objProjeto.sObservacao)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139183

    End If

    lErro = Projeto_GravaItens_EmTrans(objProjeto)
    If lErro <> SUCESSO Then gError 139184

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Projeto_Grava_EmTrans = SUCESSO

    Exit Function

Erro_Projeto_Grava_EmTrans:

    Projeto_Grava_EmTrans = gErr

    Select Case gErr

        Case 139173
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 139174 To 139177
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETO", gErr)

        Case 139178, 139181
            Call Rotina_Erro(vbOKOnly, "ERRO_NOMERED_PROJETO_EXISTENTE", gErr, objProjeto.sNomeReduzido, lCodigo)

        Case 139179
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PROJETO", gErr)

        Case 139180
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PROJETO", gErr)
        
        Case 139182, 139184
            'erro tratado nas rotinas chamadas
        
        Case 139183
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROJETO", gErr)
            



        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150013)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Projeto_GravaItens_EmTrans(ByVal objProjeto As ClassProjeto) As Long

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim objProjetoItens As New ClassProjetoItens
Dim lNumIntDoc As Long
Dim bApagarItem As Boolean

On Error GoTo Erro_Projeto_GravaItens_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 139185
    Next
        
    'Para cada ProjetoItens na coleção
    For Each objProjetoItens In objProjeto.colProjetoItens

        'Le a tabela ProjetoItens
        lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM ProjetoItens WHERE NumIntDocProj= ? And Seq = ? ", _
                    0, lNumIntDoc, objProjeto.lNumIntDoc, objProjetoItens.iSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 139186
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139187
    
        'Se existir => UPDATE, senão => INSERT
        If lErro = AD_SQL_SUCESSO Then
        
            objProjetoItens.lNumIntDoc = lNumIntDoc
            objProjetoItens.lNumIntDocProj = objProjeto.lNumIntDoc
        
            'Trava registro contra alterações/Leituras
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> SUCESSO Then gError 139188
    
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE ProjetoItens SET Produto= ? , Versao= ? , UMedida= ? , Quantidade= ? , DataInicioPrev = ? , DataTerminoPrev = ? , DataMaxTermino = ? , PrecoTotalItem = ? , CustoTotalItem = ? , Destino = ? , NumIntDocCusteio = ? ", alComando(0), _
                    objProjetoItens.sProduto, objProjetoItens.sVersao, objProjetoItens.sUMedida, objProjetoItens.dQuantidade, objProjetoItens.dtDataInicioPrev, objProjetoItens.dtDataTerminoPrev, objProjetoItens.dtDataMaxTermino, objProjetoItens.dPrecoTotalItem, objProjetoItens.dCustoTotalItem, objProjetoItens.iDestino, objProjetoItens.lNumIntDocCusteio)
            If lErro <> AD_SQL_SUCESSO Then gError 139189
            
        Else
    
            'Obter NumIntDoc
            lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_PROJETOITENS", lNumIntDoc)
            If lErro <> SUCESSO Then gError 139190
    
            objProjetoItens.lNumIntDoc = lNumIntDoc
            objProjetoItens.lNumIntDocProj = objProjeto.lNumIntDoc
    
            lErro = Comando_Executar(alComando(1), "INSERT INTO ProjetoItens (NumIntDoc, NumIntDocProj, Seq, Produto, Versao, UMedida, Quantidade, DataInicioPrev, DataTerminoPrev, DataMaxTermino, PrecoTotalItem, CustoTotalItem, Destino, NumIntDocCusteio) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objProjetoItens.lNumIntDoc, objProjetoItens.lNumIntDocProj, objProjetoItens.iSeq, objProjetoItens.sProduto, objProjetoItens.sVersao, objProjetoItens.sUMedida, objProjetoItens.dQuantidade, objProjetoItens.dtDataInicioPrev, objProjetoItens.dtDataTerminoPrev, objProjetoItens.dtDataMaxTermino, objProjetoItens.dPrecoTotalItem, objProjetoItens.dCustoTotalItem, objProjetoItens.iDestino, objProjetoItens.lNumIntDocCusteio)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139191
    
        End If
        
    Next
    
    'Le a tabela ProjetoItens novamente para verificar se haverá deleções
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM ProjetoItens WHERE NumIntDocProj= ? ", _
                0, lNumIntDoc, objProjeto.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 139192
    
    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139193

    'Faça enquanto existir
    Do While lErro = AD_SQL_SUCESSO
    
        bApagarItem = True
        
        'Para cada ProjetoItens na coleção
        For Each objProjetoItens In objProjeto.colProjetoItens
        
            If objProjetoItens.lNumIntDoc = lNumIntDoc Then
            
                 bApagarItem = False
                 Exit For
            
            End If
        
        Next
        
        If bApagarItem Then
            
            lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ProjetoItens", alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 139194
            
        End If

        'vai para o próximo
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 139195

    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Projeto_GravaItens_EmTrans = SUCESSO

    Exit Function

Erro_Projeto_GravaItens_EmTrans:

    Projeto_GravaItens_EmTrans = gErr

    Select Case gErr

        Case 139185
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 139186, 139187, 139192, 139193, 139195
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOITENS", gErr)

        Case 139188
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PROJETOITENS", gErr)

        Case 139189
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PROJETOITENS", gErr)
            
        Case 139190
            'erro tratado na rotina chamada

        Case 139191
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROJETOITENS", gErr)
            
        Case 139194
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PROJETOITENS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150014)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Projeto_Exclui(ByVal objProjeto As ClassProjeto) As Long
'Exclui o Projeto a partir do Codigo

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Projeto_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 139196

    lErro = CF("Projeto_Exclui_EmTrans", objProjeto)
    If lErro <> SUCESSO Then gError 139197

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 139198

    Projeto_Exclui = SUCESSO

    Exit Function

Erro_Projeto_Exclui:

    Projeto_Exclui = gErr

    Select Case gErr

        Case 139196
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 139197

        Case 139198
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150015)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Projeto_Exclui_EmTrans(ByVal objProjeto As ClassProjeto) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim iAux As Integer

On Error GoTo Erro_Projeto_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 139199
    Next

    'Le a Tabela Projeto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM Projeto WHERE Codigo= ? ", _
                0, lNumIntDoc, objProjeto.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 139200

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139201

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 139202

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 139203

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Projeto", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 139204
    
    objProjeto.lNumIntDoc = lNumIntDoc

    'Exclui os Itens de Projeto, também
    lErro = Projeto_ExcluiItens_EmTrans(objProjeto)
    If lErro <> AD_SQL_SUCESSO Then gError 139205

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Projeto_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_Projeto_Exclui_EmTrans:

    Projeto_Exclui_EmTrans = gErr

    Select Case gErr

        Case 139199
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 139200, 139201
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETO", gErr)

        Case 139202
            Call Rotina_Erro(vbOKOnly, "ERRO_PROJETO_NAO_CADASTRADO", gErr, objProjeto.lCodigo)

        Case 139203
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PROJETO", gErr)

        Case 139204
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PROJETO", gErr)

        Case 139205
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150016)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Projeto_ExcluiItens_EmTrans(ByVal objProjeto As ClassProjeto) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim iDestino As Integer
Dim objProjetoItensRegGerados As ClassProjetoItensRegGerados

On Error GoTo Erro_Projeto_ExcluiItens_EmTrans

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 139206
    Next

    'Exclui Itens do Projeto
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, Destino FROM ProjetoItens WHERE NumIntDocProj = ?", 0, lNumIntDoc, iDestino, objProjeto.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 139207

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139208

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objProjetoItensRegGerados = New ClassProjetoItensRegGerados

        objProjetoItensRegGerados.lNumIntDocItemProj = lNumIntDoc
        objProjetoItensRegGerados.iDestino = iDestino
    
        'Le a tabela de relacionamento
        lErro = CF("Projeto_Le_ItensRegGerados", objProjetoItensRegGerados)
        If lErro <> SUCESSO And lErro <> 139157 Then gError 139209

        'Se encontrou relacionamentos... não pode excluir
        If lErro = SUCESSO Then gError 139210

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 139211
        
        'Apaga o registro
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ProjetoItens", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 139212
        
        'vai para o próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 139213

    Loop

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Projeto_ExcluiItens_EmTrans = SUCESSO

    Exit Function

Erro_Projeto_ExcluiItens_EmTrans:

    Projeto_ExcluiItens_EmTrans = gErr

    Select Case gErr

        Case 139206
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 139207, 139208, 139213
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOITENS", gErr)

        Case 139209
        
        Case 139210
            Call Rotina_Erro(vbOKOnly, "ERRO_PROJETO_NAO_PODE_EXCLUIR", gErr, objProjeto.lCodigo)
        
        Case 139211
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PROJETOITENS", gErr)

        Case 139212
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PROJETOITENS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150017)

    End Select

    Call Transacao_Rollback

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Projeto_Grava_OrcamentoVenda(ByVal objOrcamentoVenda As ClassOrcamentoVenda, ByVal colOrcamentoVenda As Collection) As Long
'Grava o Orcamento de Venda Gerado pela Exportação do Projeto

Dim lErro As Long
Dim lTransacao As Long
Dim objItemOrcamento As ClassItemOV
Dim objProjetoItensRegGerados As ClassProjetoItensRegGerados
Dim objProjetoItens As New ClassProjetoItens

On Error GoTo Erro_Projeto_Grava_OrcamentoVenda
   
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 139214

    'Chama a rotina de gravação em transação
    lErro = CF("OrcamentoVenda_Grava_EmTrans", objOrcamentoVenda)
    If lErro <> SUCESSO Then gError 139215
    
    'Para cada Item do Orcamento
    For Each objItemOrcamento In objOrcamentoVenda.colItens
    
        'e para cada ProjetoItens na coleção que serviu de base
        For Each objProjetoItens In colOrcamentoVenda
        
            'verifica se é o item que esta gravando
            If objProjetoItens.sProduto = objItemOrcamento.sProduto And objProjetoItens.sVersao = objItemOrcamento.sVersaoKitBase Then
                Exit For
            End If
        
        Next
        
        'Altera o Destino para o efetivamente exportado
        lErro = Projeto_Altera_DestinoItens(objProjetoItens)
        If lErro <> SUCESSO Then gError 139216
        
        'Cria o objeto para gravar o relacionamento entre o destino gerado e o projeto
        Set objProjetoItensRegGerados = New ClassProjetoItensRegGerados
        
        objProjetoItensRegGerados.lNumIntDocDestino = objItemOrcamento.lNumIntDoc
        objProjetoItensRegGerados.lNumIntDocItemProj = objProjetoItens.lNumIntDoc
        objProjetoItensRegGerados.iDestino = objProjetoItens.iDestino
        
        'Grava o relacionamento
        lErro = CF("Projeto_Grava_ItensRegGerados", objProjetoItensRegGerados)
        If lErro <> SUCESSO Then gError 139217
    
    Next

    'Faz o commit na transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 139218

    Projeto_Grava_OrcamentoVenda = SUCESSO

    Exit Function

Erro_Projeto_Grava_OrcamentoVenda:

    Projeto_Grava_OrcamentoVenda = gErr

    Select Case gErr

        Case 139214
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 139215 To 139217
            'erro tratado na rotina chamada

        Case 139218
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150018)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Public Function Projeto_Grava_ItensRegGerados(ByVal objProjetoItensRegGerados As ClassProjetoItensRegGerados) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_Projeto_Grava_ItensRegGerados

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 139219
    Next

    'Le a tabela ProjetoItensRegGerados com mesmo NumIntDocItemProj
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ProjetoItensRegGerados WHERE NumIntDocItemProj= ? ", _
                0, lNumIntDoc, objProjetoItensRegGerados.lNumIntDocItemProj)
    If lErro <> AD_SQL_SUCESSO Then gError 139220

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139221

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        objProjetoItensRegGerados.lNumIntDoc = lNumIntDoc

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 139222

        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ProjetoItensRegGerados SET NumIntDocDestino= ? , Destino= ? ", alComando(1), _
                objProjetoItensRegGerados.lNumIntDocDestino, objProjetoItensRegGerados.iDestino)
        If lErro <> AD_SQL_SUCESSO Then gError 139223
        
    Else

        'Obter NumIntDoc
        'gera um NumIntDoc para o relacionamento.
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_ITENSGERADOS", lNumIntDoc)
        If lErro <> SUCESSO Then gError 139224

        objProjetoItensRegGerados.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(2), "INSERT INTO ProjetoItensRegGerados(NumIntDoc, NumIntDocDestino, NumIntDocItemProj, " & _
                "Destino) VALUES (?,?,?,?)", objProjetoItensRegGerados.lNumIntDoc, objProjetoItensRegGerados.lNumIntDocDestino, objProjetoItensRegGerados.lNumIntDocItemProj, objProjetoItensRegGerados.iDestino)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139225

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Projeto_Grava_ItensRegGerados = SUCESSO

    Exit Function

Erro_Projeto_Grava_ItensRegGerados:

    Projeto_Grava_ItensRegGerados = gErr

    Select Case gErr

        Case 139219
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 139220, 139221
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOITENSGERADOS", gErr)

        Case 139222
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PROJETOITENSGERADOS", gErr)

        Case 139223
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PROJETOITENSGERADOS", gErr)
            
        Case 139224
            'erro tratado na rotina chamada

        Case 139225
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROJETOITENSGERADOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150019)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Projeto_Altera_DestinoItens(ByVal objProjetoItens As ClassProjetoItens) As Long
'Altera o Destino de Exportação do Item do Projeto
'IMPORTANTE: Deve ser chamada em Transação

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_Projeto_Altera_DestinoItens

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 139226
    Next
        
    'Le a tabela ProjetoItens
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM ProjetoItens WHERE NumIntDoc= ? ", _
                0, iAux, objProjetoItens.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 139227

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139228

    'Se não existir ... erro
    If lErro <> AD_SQL_SUCESSO Then gError 139229
    
    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 139230

    'Altera o registro
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ProjetoItens SET Destino = ? ", alComando(0), objProjetoItens.iDestino)
    If lErro <> AD_SQL_SUCESSO Then gError 139231
            
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Projeto_Altera_DestinoItens = SUCESSO

    Exit Function

Erro_Projeto_Altera_DestinoItens:

    Projeto_Altera_DestinoItens = gErr

    Select Case gErr

        Case 139226
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 139227, 139228
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOITENS", gErr)
            
        Case 139229
            Call Rotina_Erro(vbOKOnly, "ERRO_PROJETOITENS_NAO_CADASTRADO", gErr)

        Case 139230
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PROJETOITENS", gErr)

        Case 139231
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PROJETOITENS", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150020)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Projeto_ExcluiItensOV_EmTrans(ByVal objItemOV As ClassItemOV) As Long
'Exclui o relacionamento do Item do Orcamento de Venda Gerado pela Exportação do Projeto

Dim lErro As Long
Dim objProjetoItensRegGerados As ClassProjetoItensRegGerados

On Error GoTo Erro_Projeto_ExcluiItensOV_EmTrans
   
    'Cria o objeto para excluir o relacionamento entre o destino gerado e o projeto
    Set objProjetoItensRegGerados = New ClassProjetoItensRegGerados
    
    objProjetoItensRegGerados.lNumIntDocDestino = objItemOV.lNumIntDoc
    objProjetoItensRegGerados.iDestino = ITEMDEST_ORCAMENTO_DE_VENDA
    
    'Exclui o relacionamento
    lErro = CF("Projeto_Exclui_ItensRegGerados", objProjetoItensRegGerados)
    If lErro <> SUCESSO Then gError 139232
    
    Projeto_ExcluiItensOV_EmTrans = SUCESSO

    Exit Function

Erro_Projeto_ExcluiItensOV_EmTrans:

    Projeto_ExcluiItensOV_EmTrans = gErr

    Select Case gErr

        Case 139232
            'erro tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150021)

    End Select

    Exit Function

End Function

Public Function Projeto_Exclui_ItensRegGerados(ByVal objProjetoItensRegGerados As ClassProjetoItensRegGerados) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim iAux As Integer

On Error GoTo Erro_Projeto_Exclui_ItensRegGerados

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 139233
    Next

    'Le a Tabela ProjetoItensRegGerados
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM ProjetoItensRegGerados WHERE NumIntDocDestino= ? And Destino = ? ", _
                0, lNumIntDoc, objProjetoItensRegGerados.lNumIntDocDestino, objProjetoItensRegGerados.iDestino)
    If lErro <> AD_SQL_SUCESSO Then gError 139234

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 139235

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 139236

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 139237

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ProjetoItensRegGerados", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 139238
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Projeto_Exclui_ItensRegGerados = SUCESSO

    Exit Function

Erro_Projeto_Exclui_ItensRegGerados:

    Projeto_Exclui_ItensRegGerados = gErr

    Select Case gErr

        Case 139233
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 139234, 139235
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOITENSGERADOS", gErr)

        Case 139236
            Call Rotina_Erro(vbOKOnly, "ERRO_PROJETOITENSGERADOS_NAO_CADASTRADO", gErr)

        Case 139237
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PROJETOITENSGERADOS", gErr)

        Case 139238
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PROJETOITENSGERADOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150022)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Projeto_Grava_PedidoDeVenda(ByVal objPedidoDeVenda As ClassPedidoDeVenda, ByVal colPedidoDeVenda As Collection) As Long
'Grava o Orcamento de Venda Gerado pela Exportação do Projeto

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objProjetoItensRegGerados As ClassProjetoItensRegGerados
Dim objProjetoItens As New ClassProjetoItens

On Error GoTo Erro_Projeto_Grava_PedidoDeVenda
   
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 139214

    'Insere o Pedido novo no Banco de Dados
    lErro = CF("PedidoVenda_Insere_BD", objPedidoDeVenda)
    If lErro <> SUCESSO Then gError 139215
    
    'Grava os dados estatísticos - INSERÇÃO
    lErro = CF("PedVenda_Grava_Estatisticas", objPedidoDeVenda)
    If lErro <> SUCESSO Then gError 139215

    'Para cada Item do Pedido de Venda
    For iIndice = 1 To objPedidoDeVenda.colItensPedido.Count
    
        'e para cada ProjetoItens na coleção que serviu de base
        For Each objProjetoItens In colPedidoDeVenda
        
            'verifica se é o item que esta gravando
            If objProjetoItens.sProduto = objPedidoDeVenda.colItensPedido.Item(iIndice).sProduto Then
                Exit For
            End If
        
        Next
        
        'Altera o Destino para o efetivamente exportado
        lErro = Projeto_Altera_DestinoItens(objProjetoItens)
        If lErro <> SUCESSO Then gError 139216
        
        'Cria o objeto para gravar o relacionamento entre o destino gerado e o projeto
        Set objProjetoItensRegGerados = New ClassProjetoItensRegGerados
        
        objProjetoItensRegGerados.lNumIntDocDestino = objPedidoDeVenda.colItensPedido.Item(iIndice).lNumIntDoc
        objProjetoItensRegGerados.lNumIntDocItemProj = objProjetoItens.lNumIntDoc
        objProjetoItensRegGerados.iDestino = objProjetoItens.iDestino
        
        'Grava o relacionamento
        lErro = CF("Projeto_Grava_ItensRegGerados", objProjetoItensRegGerados)
        If lErro <> SUCESSO Then gError 139217
    
    Next

    'Faz o commit na transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 139218

    Projeto_Grava_PedidoDeVenda = SUCESSO

    Exit Function

Erro_Projeto_Grava_PedidoDeVenda:

    Projeto_Grava_PedidoDeVenda = gErr

    Select Case gErr

        Case 139214
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 139215 To 139217
            'erro tratado na rotina chamada

        Case 139218
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150023)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Public Function Projeto_ExcluiItensPV_EmTrans(ByVal objItemPV As ClassItemPedido) As Long
'Exclui o relacionamento do Item do Pedido de Venda Gerado pela Exportação do Projeto

Dim lErro As Long
Dim objProjetoItensRegGerados As ClassProjetoItensRegGerados

On Error GoTo Erro_Projeto_ExcluiItensPV_EmTrans
   
    'Cria o objeto para excluir o relacionamento entre o destino gerado e o projeto
    Set objProjetoItensRegGerados = New ClassProjetoItensRegGerados
    
    objProjetoItensRegGerados.lNumIntDocDestino = objItemPV.lNumIntDoc
    objProjetoItensRegGerados.iDestino = ITEMDEST_PEDIDO_DE_VENDA
    
    'Exclui o relacionamento
    lErro = CF("Projeto_Exclui_ItensRegGerados", objProjetoItensRegGerados)
    If lErro <> SUCESSO Then gError 139245
    
    Projeto_ExcluiItensPV_EmTrans = SUCESSO

    Exit Function

Erro_Projeto_ExcluiItensPV_EmTrans:

    Projeto_ExcluiItensPV_EmTrans = gErr

    Select Case gErr

        Case 139245
            'erro tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150024)

    End Select

    Exit Function

End Function

Function Serie_Grava_Trans_Aux(ByVal objSerie As ClassSerie, ByVal iMaxLinhasNF As Integer) As Long
'apenas para permitir customizacao

    Serie_Grava_Trans_Aux = SUCESSO

End Function

'###############################################
'Inserido por Wagner
Public Function NF_Valida_Data_Vencimento(ByVal dtDataVencimento As Date, ByVal dtDataEmissao As Date, ByVal iIndice As Integer) As Long

Dim lErro As Long

On Error GoTo Erro_NF_Valida_Data_Vencimento
     
    If dtDataVencimento < dtDataEmissao Then gError 140293
     
    NF_Valida_Data_Vencimento = SUCESSO

    Exit Function

Erro_NF_Valida_Data_Vencimento:

    NF_Valida_Data_Vencimento = gErr

    Select Case gErr
    
        Case 140293
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAVENCIMENTO_PARCELA_COBRANCA_MENOR", gErr, iIndice, dtDataVencimento, dtDataEmissao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150025)

    End Select

    Exit Function
    
End Function

Public Function NF_Valida_Data_Referencia(ByVal dtDataReferencia As Date, ByVal dtDataEmissao As Date) As Long

Dim lErro As Long

On Error GoTo Erro_NF_Valida_Data_Referencia
     
    If dtDataReferencia < dtDataEmissao Then gError 140327
     
    NF_Valida_Data_Referencia = SUCESSO

    Exit Function

Erro_NF_Valida_Data_Referencia:

    NF_Valida_Data_Referencia = gErr

    Select Case gErr
    
        Case 140327
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAEMISSAO_MAIOR_DATAREFERENCIA", gErr, dtDataReferencia, dtDataEmissao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150026)

    End Select

    Exit Function
    
End Function
'###############################################

'##################################################################
'Inserido por Wagner 12/09/05

Function RelEstatisticaCliente_Prepara(lNumIntRel As Long, ByVal objClienteFaixa As ClassClienteFaixa) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim colCliente As New Collection
Dim colEstatCliente As New Collection
Dim objCliente As ClassCliente
Dim objClienteEstatistica As ClassFilialClienteEst

On Error GoTo Erro_RelEstatisticaCliente_Prepara

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140170
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140171

    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_ESTATCLIENTE", lNumIntRel)
    If lErro <> SUCESSO Then gError 140175
    
    lErro = CF("Cliente_Le_Faixa", objClienteFaixa, colCliente, colEstatCliente)
    If lErro <> SUCESSO Then gError 140172
    
    iIndice = 0

    For Each objClienteEstatistica In colEstatCliente
    
        iIndice = iIndice + 1
        
        Set objCliente = colCliente.Item(iIndice)

        'insere novo registro na tabela Tipos
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelEstatisticaCliente(NumIntRel, " & _
                "Cliente, NomeCliente, RazaoSocial,MediaCompra,SaldoAtrasado," & _
                "SaldoDuplicatas,SaldoPedidosLiberados,SaldoTitulos,DataPrimeiraCompra, " & _
                "DataUltChequeDevolvido,DataUltimaCompra,ValorAcumuladoCompras," & _
                "ValorNFsNaoFaturadas,ValPagtosAtraso,NumChequesDevolvidos,MaiorAtraso," & _
                "MediaAtraso,NumeroCompras) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, objCliente.lCodigo, objCliente.sNomeReduzido, objCliente.sRazaoSocial, objClienteEstatistica.dMediaCompra, objClienteEstatistica.dSaldoAtrasados, _
                objClienteEstatistica.dSaldoDuplicatas, objClienteEstatistica.dSaldoPedidosLiberados, objClienteEstatistica.dSaldoTitulos, objClienteEstatistica.dtDataPrimeiraCompra, _
                objClienteEstatistica.dtDataUltChequeDevolvido, objClienteEstatistica.dtDataUltimaCompra, objClienteEstatistica.dValorAcumuladoCompras, _
                objClienteEstatistica.dValorNFsNaoFaturadas, objClienteEstatistica.dValPagtosAtraso, objClienteEstatistica.iNumChequesDevolvidos, objClienteEstatistica.lMaiorAtraso, _
                objClienteEstatistica.lMediaAtraso, objClienteEstatistica.lNumeroCompras)
        If lErro <> AD_SQL_SUCESSO Then gError 140173

    Next

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140174
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelEstatisticaCliente_Prepara = SUCESSO

    Exit Function

Erro_RelEstatisticaCliente_Prepara:

    RelEstatisticaCliente_Prepara = gErr

        Select Case gErr

        Case 140170
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140171
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140172, 140175

        Case 140173
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELESTATCLIENTE", gErr)
        
        Case 140174
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150027)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function RelClienteVendedor_Prepara(lNumIntRel As Long, ByVal objClienteFaixa As ClassClienteFaixa, ByVal dtDataDe As Date, ByVal dtDataAte As Date) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim colFilialCliente As New Collection
Dim colFilialClienteEst As New Collection
Dim objFilialCliente As ClassFilialCliente
Dim colNFTotal As Collection
Dim colNFPeriodo As Collection
Dim dtDataPrimeiraCompra As Date
Dim dtDataUltimaCompra As Date

On Error GoTo Erro_RelClienteVendedor_Prepara

    dtDataPrimeiraCompra = DATA_NULA
    dtDataUltimaCompra = DATA_NULA

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140267
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140268

    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_CLIENTEVENDEDOR", lNumIntRel)
    If lErro <> SUCESSO Then gError 140269
    
    lErro = CF("FilialCliente_Le_Faixa", objClienteFaixa, colFilialCliente, colFilialClienteEst)
    If lErro <> SUCESSO Then gError 140270
    
    iIndice = 0

    For Each objFilialCliente In colFilialCliente
    
        Set colNFTotal = New Collection
        Set colNFPeriodo = New Collection
            
        lErro = CF("FilialCliente_Le_Compras_Periodo", objFilialCliente, dtDataDe, dtDataAte, colNFPeriodo)
        If lErro <> SUCESSO Then gError 140271
        
        lErro = CF("FilialCliente_Le_Compras", objFilialCliente, colNFTotal, dtDataPrimeiraCompra, dtDataUltimaCompra)
        If lErro <> SUCESSO Then gError 140274
        
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelClienteVendedor(NumIntRel, " & _
                "Cliente, Filial, QtdComprasPeriodo, QtdComprasTotal, DataPrimeiraCompra, DataUltimaCompra) VALUES (?,?,?,?,?,?,?)", _
                lNumIntRel, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, colNFPeriodo.Count, colNFTotal.Count, dtDataPrimeiraCompra, dtDataUltimaCompra)
        If lErro <> AD_SQL_SUCESSO Then gError 140272
    
    Next

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140273
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelClienteVendedor_Prepara = SUCESSO

    Exit Function

Erro_RelClienteVendedor_Prepara:

    RelClienteVendedor_Prepara = gErr

        Select Case gErr

        Case 140267
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140268
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140269 To 140271, 140274

        Case 140272
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCLIENTEVENDEDOR", gErr)
        
        Case 140273
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150028)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
'##################################################################

'##################################################################
'Inserido por Wagner 24/10/2005
'Rotina Customizada
Public Function RelEmissaoNF_Prepara(ByVal lNumNotaIni As Long, ByVal lNumNotaFim As Long, ByVal sSerie As String, ByVal iFilialEmpresa As Integer, lNumIntRel As Long) As Long
   
    RelEmissaoNF_Prepara = SUCESSO
    
End Function
'##########################################################################

'##########################################################################
'Inserido por Wagner 23/11/05
Function RelParamFormPreco_Prepara(lNumIntRel As Long, ByVal sProdutoIni As String, ByVal sProdutoFim As String, ByVal iTipoPlanilha As Integer) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iEscopo As Integer
Dim objProduto As ClassProduto
Dim colProdutos As New Collection
Dim objMnemonicoFPTipo As ClassMnemonicoFPTipo
Dim colMnemonicoFPTipo As Collection

On Error GoTo Erro_RelParamFormPreco_Prepara

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140986
    Next
    
    iEscopo = MNEMONICOFPRECO_ESCOPO_PRODUTO

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140987

    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_FORMPRECO", lNumIntRel)
    If lErro <> SUCESSO Then gError 140988
    
    lErro = CF("Produto_Le_Faixa", sProdutoIni, sProdutoFim, colProdutos)
    If lErro <> SUCESSO Then gError 140989
    
    For Each objProduto In colProdutos
    
        Set objMnemonicoFPTipo = New ClassMnemonicoFPTipo
        Set colMnemonicoFPTipo = New Collection
    
        objMnemonicoFPTipo.iFilialEmpresa = giFilialEmpresa
        objMnemonicoFPTipo.iEscopo = iEscopo
        objMnemonicoFPTipo.sProduto = objProduto.sCodigo
        objMnemonicoFPTipo.iTipoPlanilha = iTipoPlanilha
    
        'Lê o Produto
        lErro = CF("MnemonicoFPTipo_Le_Todos", objMnemonicoFPTipo, colMnemonicoFPTipo)
        If lErro <> SUCESSO And lErro <> 116812 Then gError 140990
        
        For Each objMnemonicoFPTipo In colMnemonicoFPTipo
        
            lErro = Comando_Executar(alComando(1), "INSERT INTO RelParamFormPreco(NumIntRel, " & _
            "Produto, Mnemonico, MnemonicoDesc, Expressao, ValorCalculado, Escopo) VALUES (?,?,?,?,?,?,?) ", _
            lNumIntRel, objProduto.sCodigo, objMnemonicoFPTipo.sMnemonico, objMnemonicoFPTipo.sMnemonicoDesc, objMnemonicoFPTipo.sExpressao, objMnemonicoFPTipo.sExpressao, objMnemonicoFPTipo.iEscopo)
            If lErro <> AD_SQL_SUCESSO Then gError 140991
        
        Next
        
    Next

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140992
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelParamFormPreco_Prepara = SUCESSO

    Exit Function

Erro_RelParamFormPreco_Prepara:

    RelParamFormPreco_Prepara = gErr

        Select Case gErr

        Case 140986
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140987
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140988 To 140991

        Case 140992
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150029)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
'##########################################################################

'####################################################################################
'Inserido por Wagner 07/12/2005
'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function CustoEmbMPAux_Insere(ByVal colCustoEmbMPAux As Collection) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim objCustoEmbMPAux As ClassCustoEmbMPAux

On Error GoTo Erro_CustoEmbMPAux_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 141317
    Next
    
    For Each objCustoEmbMPAux In colCustoEmbMPAux

        lErro = Comando_Executar(alComando(1), "INSERT INTO CustoEmbMPAux( FilialEmpresa, Produto, Mnemonico, Valor) VALUES (?,?,?,?)", _
                objCustoEmbMPAux.iFilialEmpresa, objCustoEmbMPAux.sProduto, objCustoEmbMPAux.sMnemonico, objCustoEmbMPAux.sValor)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141318

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMPAux_Insere = SUCESSO

    Exit Function

Erro_CustoEmbMPAux_Insere:

    CustoEmbMPAux_Insere = gErr

    Select Case gErr

        Case 141317
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 141318
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTOEMBMPAUX", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150030)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function CustoEmbMPAux_Exclui(ByVal objCustoEmbMP As ClassCustoEmbMP) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_CustoEmbMPAux_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 141308
    Next

    'Le a tabelaCustoEmbMPAux
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM CustoEmbMPAux WHERE FilialEmpresa= ?  AND Produto= ?  ", _
                0, iAux, objCustoEmbMP.iFilialEmpresa, objCustoEmbMP.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 141309

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141310

    'Se não existir => ERRO
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 141312
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoEmbMPAux", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 141313
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141311
        
    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMPAux_Exclui = SUCESSO

    Exit Function

Erro_CustoEmbMPAux_Exclui:

    CustoEmbMPAux_Exclui = gErr

    Select Case gErr

        Case 141308
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 141309, 141310
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMPAUX", gErr)

        Case 141311
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTOEMBMPAUX_NAO_CADASTRADO", gErr, objCustoEmbMP.iFilialEmpresa, objCustoEmbMP.sProduto)

        Case 141312
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CUSTOEMBMPAUX", gErr)

        Case 141313
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTOEMBMPAUX", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150031)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'####################################################################################






